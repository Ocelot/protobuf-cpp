// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_cloud.steamclient.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "steammessages_cloud.steamclient.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace steam {
class CCloud_GetUploadServerInfo_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CCloud_GetUploadServerInfo_Request> {
} _CCloud_GetUploadServerInfo_Request_default_instance_;
class CCloud_GetUploadServerInfo_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CCloud_GetUploadServerInfo_Response> {
} _CCloud_GetUploadServerInfo_Response_default_instance_;
class CCloud_BeginHTTPUpload_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CCloud_BeginHTTPUpload_Request> {
} _CCloud_BeginHTTPUpload_Request_default_instance_;
class CCloud_BeginHTTPUpload_Response_HTTPHeadersDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CCloud_BeginHTTPUpload_Response_HTTPHeaders> {
} _CCloud_BeginHTTPUpload_Response_HTTPHeaders_default_instance_;
class CCloud_BeginHTTPUpload_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CCloud_BeginHTTPUpload_Response> {
} _CCloud_BeginHTTPUpload_Response_default_instance_;
class CCloud_CommitHTTPUpload_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CCloud_CommitHTTPUpload_Request> {
} _CCloud_CommitHTTPUpload_Request_default_instance_;
class CCloud_CommitHTTPUpload_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CCloud_CommitHTTPUpload_Response> {
} _CCloud_CommitHTTPUpload_Response_default_instance_;
class CCloud_GetFileDetails_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CCloud_GetFileDetails_Request> {
} _CCloud_GetFileDetails_Request_default_instance_;
class CCloud_UserFileDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CCloud_UserFile> {
} _CCloud_UserFile_default_instance_;
class CCloud_GetFileDetails_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CCloud_GetFileDetails_Response> {
} _CCloud_GetFileDetails_Response_default_instance_;
class CCloud_EnumerateUserFiles_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CCloud_EnumerateUserFiles_Request> {
} _CCloud_EnumerateUserFiles_Request_default_instance_;
class CCloud_EnumerateUserFiles_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CCloud_EnumerateUserFiles_Response> {
} _CCloud_EnumerateUserFiles_Response_default_instance_;
class CCloud_Delete_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CCloud_Delete_Request> {
} _CCloud_Delete_Request_default_instance_;
class CCloud_Delete_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CCloud_Delete_Response> {
} _CCloud_Delete_Response_default_instance_;
class CCloud_GetClientEncryptionKey_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CCloud_GetClientEncryptionKey_Request> {
} _CCloud_GetClientEncryptionKey_Request_default_instance_;
class CCloud_GetClientEncryptionKey_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CCloud_GetClientEncryptionKey_Response> {
} _CCloud_GetClientEncryptionKey_Response_default_instance_;
class CCloud_CDNReport_NotificationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CCloud_CDNReport_Notification> {
} _CCloud_CDNReport_Notification_default_instance_;
class CCloud_ExternalStorageTransferReport_NotificationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CCloud_ExternalStorageTransferReport_Notification> {
} _CCloud_ExternalStorageTransferReport_Notification_default_instance_;
class CCloud_ClientBeginFileUpload_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CCloud_ClientBeginFileUpload_Request> {
} _CCloud_ClientBeginFileUpload_Request_default_instance_;
class ClientCloudFileUploadBlockDetails_HTTPHeadersDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ClientCloudFileUploadBlockDetails_HTTPHeaders> {
} _ClientCloudFileUploadBlockDetails_HTTPHeaders_default_instance_;
class ClientCloudFileUploadBlockDetailsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ClientCloudFileUploadBlockDetails> {
} _ClientCloudFileUploadBlockDetails_default_instance_;
class CCloud_ClientBeginFileUpload_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CCloud_ClientBeginFileUpload_Response> {
} _CCloud_ClientBeginFileUpload_Response_default_instance_;
class CCloud_ClientCommitFileUpload_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CCloud_ClientCommitFileUpload_Request> {
} _CCloud_ClientCommitFileUpload_Request_default_instance_;
class CCloud_ClientCommitFileUpload_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CCloud_ClientCommitFileUpload_Response> {
} _CCloud_ClientCommitFileUpload_Response_default_instance_;
class CCloud_ClientFileDownload_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CCloud_ClientFileDownload_Request> {
} _CCloud_ClientFileDownload_Request_default_instance_;
class CCloud_ClientFileDownload_Response_HTTPHeadersDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CCloud_ClientFileDownload_Response_HTTPHeaders> {
} _CCloud_ClientFileDownload_Response_HTTPHeaders_default_instance_;
class CCloud_ClientFileDownload_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CCloud_ClientFileDownload_Response> {
} _CCloud_ClientFileDownload_Response_default_instance_;
class CCloud_ClientDeleteFile_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CCloud_ClientDeleteFile_Request> {
} _CCloud_ClientDeleteFile_Request_default_instance_;
class CCloud_ClientDeleteFile_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CCloud_ClientDeleteFile_Response> {
} _CCloud_ClientDeleteFile_Response_default_instance_;
class CCloud_ClientConflictResolution_NotificationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CCloud_ClientConflictResolution_Notification> {
} _CCloud_ClientConflictResolution_Notification_default_instance_;

namespace protobuf_steammessages_5fcloud_2esteamclient_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[30];
const ::google::protobuf::ServiceDescriptor* file_level_service_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_GetUploadServerInfo_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_GetUploadServerInfo_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_GetUploadServerInfo_Request, appid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_GetUploadServerInfo_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_GetUploadServerInfo_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_GetUploadServerInfo_Response, server_url_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_BeginHTTPUpload_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_BeginHTTPUpload_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_BeginHTTPUpload_Request, appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_BeginHTTPUpload_Request, file_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_BeginHTTPUpload_Request, filename_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_BeginHTTPUpload_Request, file_sha_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_BeginHTTPUpload_Request, is_public_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_BeginHTTPUpload_Request, platforms_to_sync_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_BeginHTTPUpload_Request, request_headers_names_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_BeginHTTPUpload_Request, request_headers_values_),
  2,
  3,
  0,
  1,
  4,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_BeginHTTPUpload_Response_HTTPHeaders, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_BeginHTTPUpload_Response_HTTPHeaders, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_BeginHTTPUpload_Response_HTTPHeaders, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_BeginHTTPUpload_Response_HTTPHeaders, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_BeginHTTPUpload_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_BeginHTTPUpload_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_BeginHTTPUpload_Response, ugcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_BeginHTTPUpload_Response, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_BeginHTTPUpload_Response, url_host_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_BeginHTTPUpload_Response, url_path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_BeginHTTPUpload_Response, use_https_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_BeginHTTPUpload_Response, request_headers_),
  2,
  3,
  0,
  1,
  4,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_CommitHTTPUpload_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_CommitHTTPUpload_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_CommitHTTPUpload_Request, transfer_succeeded_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_CommitHTTPUpload_Request, appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_CommitHTTPUpload_Request, file_sha_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_CommitHTTPUpload_Request, filename_),
  2,
  3,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_CommitHTTPUpload_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_CommitHTTPUpload_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_CommitHTTPUpload_Response, file_committed_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_GetFileDetails_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_GetFileDetails_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_GetFileDetails_Request, ugcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_GetFileDetails_Request, appid_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_UserFile, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_UserFile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_UserFile, appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_UserFile, ugcid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_UserFile, filename_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_UserFile, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_UserFile, file_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_UserFile, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_UserFile, steamid_creator_),
  3,
  2,
  0,
  5,
  4,
  1,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_GetFileDetails_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_GetFileDetails_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_GetFileDetails_Response, details_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_EnumerateUserFiles_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_EnumerateUserFiles_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_EnumerateUserFiles_Request, appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_EnumerateUserFiles_Request, extended_details_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_EnumerateUserFiles_Request, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_EnumerateUserFiles_Request, start_index_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_EnumerateUserFiles_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_EnumerateUserFiles_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_EnumerateUserFiles_Response, files_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_EnumerateUserFiles_Response, total_files_),
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_Delete_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_Delete_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_Delete_Request, filename_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_Delete_Request, appid_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_Delete_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_Delete_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_GetClientEncryptionKey_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_GetClientEncryptionKey_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_GetClientEncryptionKey_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_GetClientEncryptionKey_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_GetClientEncryptionKey_Response, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_GetClientEncryptionKey_Response, crc_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_CDNReport_Notification, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_CDNReport_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_CDNReport_Notification, steamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_CDNReport_Notification, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_CDNReport_Notification, success_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_CDNReport_Notification, http_status_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_CDNReport_Notification, expected_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_CDNReport_Notification, received_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_CDNReport_Notification, duration_),
  1,
  0,
  2,
  3,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_ExternalStorageTransferReport_Notification, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_ExternalStorageTransferReport_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_ExternalStorageTransferReport_Notification, host_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_ExternalStorageTransferReport_Notification, path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_ExternalStorageTransferReport_Notification, is_upload_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_ExternalStorageTransferReport_Notification, success_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_ExternalStorageTransferReport_Notification, http_status_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_ExternalStorageTransferReport_Notification, bytes_expected_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_ExternalStorageTransferReport_Notification, bytes_actual_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_ExternalStorageTransferReport_Notification, duration_ms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_ExternalStorageTransferReport_Notification, cellid_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_ClientBeginFileUpload_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_ClientBeginFileUpload_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_ClientBeginFileUpload_Request, appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_ClientBeginFileUpload_Request, file_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_ClientBeginFileUpload_Request, raw_file_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_ClientBeginFileUpload_Request, file_sha_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_ClientBeginFileUpload_Request, time_stamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_ClientBeginFileUpload_Request, filename_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_ClientBeginFileUpload_Request, platforms_to_sync_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_ClientBeginFileUpload_Request, cell_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_ClientBeginFileUpload_Request, can_encrypt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_ClientBeginFileUpload_Request, is_shared_file_),
  2,
  3,
  5,
  0,
  4,
  1,
  9,
  6,
  7,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientCloudFileUploadBlockDetails_HTTPHeaders, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientCloudFileUploadBlockDetails_HTTPHeaders, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientCloudFileUploadBlockDetails_HTTPHeaders, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientCloudFileUploadBlockDetails_HTTPHeaders, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientCloudFileUploadBlockDetails, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientCloudFileUploadBlockDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientCloudFileUploadBlockDetails, url_host_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientCloudFileUploadBlockDetails, url_path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientCloudFileUploadBlockDetails, use_https_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientCloudFileUploadBlockDetails, http_method_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientCloudFileUploadBlockDetails, request_headers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientCloudFileUploadBlockDetails, block_offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientCloudFileUploadBlockDetails, block_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientCloudFileUploadBlockDetails, explicit_body_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientCloudFileUploadBlockDetails, may_parallelize_),
  0,
  1,
  4,
  3,
  ~0u,
  6,
  7,
  2,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_ClientBeginFileUpload_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_ClientBeginFileUpload_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_ClientBeginFileUpload_Response, encrypt_file_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_ClientBeginFileUpload_Response, block_requests_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_ClientCommitFileUpload_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_ClientCommitFileUpload_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_ClientCommitFileUpload_Request, transfer_succeeded_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_ClientCommitFileUpload_Request, appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_ClientCommitFileUpload_Request, file_sha_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_ClientCommitFileUpload_Request, filename_),
  2,
  3,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_ClientCommitFileUpload_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_ClientCommitFileUpload_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_ClientCommitFileUpload_Response, file_committed_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_ClientFileDownload_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_ClientFileDownload_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_ClientFileDownload_Request, appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_ClientFileDownload_Request, filename_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_ClientFileDownload_Response_HTTPHeaders, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_ClientFileDownload_Response_HTTPHeaders, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_ClientFileDownload_Response_HTTPHeaders, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_ClientFileDownload_Response_HTTPHeaders, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_ClientFileDownload_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_ClientFileDownload_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_ClientFileDownload_Response, appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_ClientFileDownload_Response, file_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_ClientFileDownload_Response, raw_file_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_ClientFileDownload_Response, sha_file_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_ClientFileDownload_Response, time_stamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_ClientFileDownload_Response, is_explicit_delete_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_ClientFileDownload_Response, url_host_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_ClientFileDownload_Response, url_path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_ClientFileDownload_Response, use_https_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_ClientFileDownload_Response, request_headers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_ClientFileDownload_Response, encrypted_),
  3,
  4,
  6,
  0,
  5,
  7,
  1,
  2,
  8,
  ~0u,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_ClientDeleteFile_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_ClientDeleteFile_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_ClientDeleteFile_Request, appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_ClientDeleteFile_Request, filename_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_ClientDeleteFile_Request, is_explicit_delete_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_ClientDeleteFile_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_ClientDeleteFile_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_ClientConflictResolution_Notification, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_ClientConflictResolution_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_ClientConflictResolution_Notification, appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCloud_ClientConflictResolution_Notification, chose_local_files_),
  0,
  1,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 6, sizeof(CCloud_GetUploadServerInfo_Request)},
  { 7, 13, sizeof(CCloud_GetUploadServerInfo_Response)},
  { 14, 27, sizeof(CCloud_BeginHTTPUpload_Request)},
  { 35, 42, sizeof(CCloud_BeginHTTPUpload_Response_HTTPHeaders)},
  { 44, 55, sizeof(CCloud_BeginHTTPUpload_Response)},
  { 61, 70, sizeof(CCloud_CommitHTTPUpload_Request)},
  { 74, 80, sizeof(CCloud_CommitHTTPUpload_Response)},
  { 81, 88, sizeof(CCloud_GetFileDetails_Request)},
  { 90, 102, sizeof(CCloud_UserFile)},
  { 109, 115, sizeof(CCloud_GetFileDetails_Response)},
  { 116, 125, sizeof(CCloud_EnumerateUserFiles_Request)},
  { 129, 136, sizeof(CCloud_EnumerateUserFiles_Response)},
  { 138, 145, sizeof(CCloud_Delete_Request)},
  { 147, 152, sizeof(CCloud_Delete_Response)},
  { 152, 157, sizeof(CCloud_GetClientEncryptionKey_Request)},
  { 157, 164, sizeof(CCloud_GetClientEncryptionKey_Response)},
  { 166, 178, sizeof(CCloud_CDNReport_Notification)},
  { 185, 199, sizeof(CCloud_ExternalStorageTransferReport_Notification)},
  { 208, 223, sizeof(CCloud_ClientBeginFileUpload_Request)},
  { 233, 240, sizeof(ClientCloudFileUploadBlockDetails_HTTPHeaders)},
  { 242, 256, sizeof(ClientCloudFileUploadBlockDetails)},
  { 265, 272, sizeof(CCloud_ClientBeginFileUpload_Response)},
  { 274, 283, sizeof(CCloud_ClientCommitFileUpload_Request)},
  { 287, 293, sizeof(CCloud_ClientCommitFileUpload_Response)},
  { 294, 301, sizeof(CCloud_ClientFileDownload_Request)},
  { 303, 310, sizeof(CCloud_ClientFileDownload_Response_HTTPHeaders)},
  { 312, 328, sizeof(CCloud_ClientFileDownload_Response)},
  { 339, 347, sizeof(CCloud_ClientDeleteFile_Request)},
  { 350, 355, sizeof(CCloud_ClientDeleteFile_Response)},
  { 355, 362, sizeof(CCloud_ClientConflictResolution_Notification)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CCloud_GetUploadServerInfo_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CCloud_GetUploadServerInfo_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CCloud_BeginHTTPUpload_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CCloud_BeginHTTPUpload_Response_HTTPHeaders_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CCloud_BeginHTTPUpload_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CCloud_CommitHTTPUpload_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CCloud_CommitHTTPUpload_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CCloud_GetFileDetails_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CCloud_UserFile_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CCloud_GetFileDetails_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CCloud_EnumerateUserFiles_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CCloud_EnumerateUserFiles_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CCloud_Delete_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CCloud_Delete_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CCloud_GetClientEncryptionKey_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CCloud_GetClientEncryptionKey_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CCloud_CDNReport_Notification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CCloud_ExternalStorageTransferReport_Notification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CCloud_ClientBeginFileUpload_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ClientCloudFileUploadBlockDetails_HTTPHeaders_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ClientCloudFileUploadBlockDetails_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CCloud_ClientBeginFileUpload_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CCloud_ClientCommitFileUpload_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CCloud_ClientCommitFileUpload_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CCloud_ClientFileDownload_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CCloud_ClientFileDownload_Response_HTTPHeaders_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CCloud_ClientFileDownload_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CCloud_ClientDeleteFile_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CCloud_ClientDeleteFile_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CCloud_ClientConflictResolution_Notification_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "steammessages_cloud.steamclient.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, file_level_service_descriptors);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 30);
}

}  // namespace

void TableStruct::Shutdown() {
  _CCloud_GetUploadServerInfo_Request_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _CCloud_GetUploadServerInfo_Response_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _CCloud_BeginHTTPUpload_Request_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _CCloud_BeginHTTPUpload_Response_HTTPHeaders_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _CCloud_BeginHTTPUpload_Response_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _CCloud_CommitHTTPUpload_Request_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _CCloud_CommitHTTPUpload_Response_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _CCloud_GetFileDetails_Request_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _CCloud_UserFile_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _CCloud_GetFileDetails_Response_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _CCloud_EnumerateUserFiles_Request_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _CCloud_EnumerateUserFiles_Response_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _CCloud_Delete_Request_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _CCloud_Delete_Response_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _CCloud_GetClientEncryptionKey_Request_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _CCloud_GetClientEncryptionKey_Response_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _CCloud_CDNReport_Notification_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _CCloud_ExternalStorageTransferReport_Notification_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _CCloud_ClientBeginFileUpload_Request_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _ClientCloudFileUploadBlockDetails_HTTPHeaders_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _ClientCloudFileUploadBlockDetails_default_instance_.Shutdown();
  delete file_level_metadata[20].reflection;
  _CCloud_ClientBeginFileUpload_Response_default_instance_.Shutdown();
  delete file_level_metadata[21].reflection;
  _CCloud_ClientCommitFileUpload_Request_default_instance_.Shutdown();
  delete file_level_metadata[22].reflection;
  _CCloud_ClientCommitFileUpload_Response_default_instance_.Shutdown();
  delete file_level_metadata[23].reflection;
  _CCloud_ClientFileDownload_Request_default_instance_.Shutdown();
  delete file_level_metadata[24].reflection;
  _CCloud_ClientFileDownload_Response_HTTPHeaders_default_instance_.Shutdown();
  delete file_level_metadata[25].reflection;
  _CCloud_ClientFileDownload_Response_default_instance_.Shutdown();
  delete file_level_metadata[26].reflection;
  _CCloud_ClientDeleteFile_Request_default_instance_.Shutdown();
  delete file_level_metadata[27].reflection;
  _CCloud_ClientDeleteFile_Response_default_instance_.Shutdown();
  delete file_level_metadata[28].reflection;
  _CCloud_ClientConflictResolution_Notification_default_instance_.Shutdown();
  delete file_level_metadata[29].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::proto::steam::protobuf_steammessages_5funified_5fbase_2esteamclient_2eproto::InitDefaults();
  _CCloud_GetUploadServerInfo_Request_default_instance_.DefaultConstruct();
  _CCloud_GetUploadServerInfo_Response_default_instance_.DefaultConstruct();
  _CCloud_BeginHTTPUpload_Request_default_instance_.DefaultConstruct();
  _CCloud_BeginHTTPUpload_Response_HTTPHeaders_default_instance_.DefaultConstruct();
  _CCloud_BeginHTTPUpload_Response_default_instance_.DefaultConstruct();
  _CCloud_CommitHTTPUpload_Request_default_instance_.DefaultConstruct();
  _CCloud_CommitHTTPUpload_Response_default_instance_.DefaultConstruct();
  _CCloud_GetFileDetails_Request_default_instance_.DefaultConstruct();
  _CCloud_UserFile_default_instance_.DefaultConstruct();
  _CCloud_GetFileDetails_Response_default_instance_.DefaultConstruct();
  _CCloud_EnumerateUserFiles_Request_default_instance_.DefaultConstruct();
  _CCloud_EnumerateUserFiles_Response_default_instance_.DefaultConstruct();
  _CCloud_Delete_Request_default_instance_.DefaultConstruct();
  _CCloud_Delete_Response_default_instance_.DefaultConstruct();
  _CCloud_GetClientEncryptionKey_Request_default_instance_.DefaultConstruct();
  _CCloud_GetClientEncryptionKey_Response_default_instance_.DefaultConstruct();
  _CCloud_CDNReport_Notification_default_instance_.DefaultConstruct();
  _CCloud_ExternalStorageTransferReport_Notification_default_instance_.DefaultConstruct();
  _CCloud_ClientBeginFileUpload_Request_default_instance_.DefaultConstruct();
  _ClientCloudFileUploadBlockDetails_HTTPHeaders_default_instance_.DefaultConstruct();
  _ClientCloudFileUploadBlockDetails_default_instance_.DefaultConstruct();
  _CCloud_ClientBeginFileUpload_Response_default_instance_.DefaultConstruct();
  _CCloud_ClientCommitFileUpload_Request_default_instance_.DefaultConstruct();
  _CCloud_ClientCommitFileUpload_Response_default_instance_.DefaultConstruct();
  _CCloud_ClientFileDownload_Request_default_instance_.DefaultConstruct();
  _CCloud_ClientFileDownload_Response_HTTPHeaders_default_instance_.DefaultConstruct();
  _CCloud_ClientFileDownload_Response_default_instance_.DefaultConstruct();
  _CCloud_ClientDeleteFile_Request_default_instance_.DefaultConstruct();
  _CCloud_ClientDeleteFile_Response_default_instance_.DefaultConstruct();
  _CCloud_ClientConflictResolution_Notification_default_instance_.DefaultConstruct();
  _CCloud_GetFileDetails_Response_default_instance_.get_mutable()->details_ = const_cast< ::proto::steam::CCloud_UserFile*>(
      ::proto::steam::CCloud_UserFile::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n%steammessages_cloud.steamclient.proto\022"
      "\013proto.steam\032,steammessages_unified_base"
      ".steamclient.proto\"d\n\"CCloud_GetUploadSe"
      "rverInfo_Request\022>\n\005appid\030\001 \001(\rB/\202\265\030+App"
      " ID to which a file will be uploaded to."
      "\"9\n#CCloud_GetUploadServerInfo_Response\022"
      "\022\n\nserver_url\030\001 \001(\t\"\224\006\n\036CCloud_BeginHTTP"
      "Upload_Request\022\?\n\005appid\030\001 \001(\rB0\202\265\030,App I"
      "D for which the file is being uploaded.\022"
      "3\n\tfile_size\030\002 \001(\rB \202\265\030\034Original file si"
      "ze in bytes.\022=\n\010filename\030\003 \001(\tB+\202\265\030\'Name"
      " of the file to store in the cloud.\022V\n\010f"
      "ile_sha\030\004 \001(\tBD\202\265\030@Hex string (40 digits"
      ") representing the SHA1 digest of the fi"
      "le.\022\\\n\tis_public\030\005 \001(\010BI\202\265\030ETrue if the "
      "file should be marked public on the UFS,"
      " false otherwise.\022z\n\021platforms_to_sync\030\006"
      " \003(\tB_\202\265\030[Array of string specifying whi"
      "ch platforms to sync; value values: all,"
      " windows, osx, linux.\022r\n\025request_headers"
      "_names\030\007 \003(\tBS\202\265\030ONames for headers you\'"
      "ll want to set on your upload request. M"
      "ay be left blank.\022\226\001\n\026request_headers_va"
      "lues\030\010 \003(\tBv\202\265\030rValues for headers you\'l"
      "l want to set on your upload request. Th"
      "e number of names must equal the number "
      "of values.\"\245\004\n\037CCloud_BeginHTTPUpload_Re"
      "sponse\022/\n\005ugcid\030\001 \001(\006B \202\265\030\034UGC ID of the"
      " uploaded file.\0220\n\ttimestamp\030\002 \001(\007B\035\202\265\030\031"
      "Server timestamp of file.\022X\n\010url_host\030\003 "
      "\001(\tBF\202\265\030BHost name of server to which fi"
      "le should be uploaded via HTTP PUT.\022O\n\010u"
      "rl_path\030\004 \001(\tB=\202\265\0309Relative path on serv"
      "er to which file should be uploaded.\022>\n\t"
      "use_https\030\005 \001(\010B+\202\265\030\'If true, use https,"
      " otherwise use http.\022\207\001\n\017request_headers"
      "\030\006 \003(\01328.proto.steam.CCloud_BeginHTTPUpl"
      "oad_Response.HTTPHeadersB4\202\265\0300Name-value"
      " pairs to be sent in HTTP PUT request.\032*"
      "\n\013HTTPHeaders\022\014\n\004name\030\001 \001(\t\022\r\n\005value\030\002 \001"
      "(\t\"\255\004\n\037CCloud_CommitHTTPUpload_Request\022\244"
      "\001\n\022transfer_succeeded\030\001 \001(\010B\207\001\202\265\030\202\001True "
      "if the HTTP PUT to the upload URL succee"
      "ded (URL provided in response to Cloud.B"
      "eginHTTPUpload), false if a failure occu"
      "rred.\022x\n\005appid\030\002 \001(\rBi\202\265\030eApp ID for whi"
      "ch the file is being uploaded. Must matc"
      "h the app ID provided to Cloud.BeginHTTP"
      "Upload.\022\225\001\n\010file_sha\030\003 \001(\tB\202\001\202\265\030~Hex str"
      "ing (40 digits) representing the SHA1 di"
      "gest of the file. Must match the SHA1 di"
      "gest provided to Cloud.BeginHTTPUpload.\022"
      "Q\n\010filename\030\004 \001(\tB\?\202\265\030;Filename as speci"
      "fied in the Cloud.BeginHTTPUpload reques"
      "t.\"}\n CCloud_CommitHTTPUpload_Response\022Y"
      "\n\016file_committed\030\001 \001(\010BA\202\265\030=True if the "
      "file was successfully committed, false o"
      "therwise.\"\214\001\n\035CCloud_GetFileDetails_Requ"
      "est\022;\n\005ugcid\030\001 \001(\004B,\202\265\030(ID of the Cloud "
      "file to get details for.\022.\n\005appid\030\002 \001(\rB"
      "\037\202\265\030\033App ID the file belongs to.\"\215\001\n\017CCl"
      "oud_UserFile\022\r\n\005appid\030\001 \001(\r\022\r\n\005ugcid\030\002 \001"
      "(\004\022\020\n\010filename\030\003 \001(\t\022\021\n\ttimestamp\030\004 \001(\004\022"
      "\021\n\tfile_size\030\005 \001(\r\022\013\n\003url\030\006 \001(\t\022\027\n\017steam"
      "id_creator\030\007 \001(\006\"O\n\036CCloud_GetFileDetail"
      "s_Response\022-\n\007details\030\001 \001(\0132\034.proto.stea"
      "m.CCloud_UserFile\"\351\003\n!CCloud_EnumerateUs"
      "erFiles_Request\0224\n\005appid\030\001 \001(\rB%\202\265\030!App "
      "ID to enumerate the files of.\022\233\001\n\020extend"
      "ed_details\030\002 \001(\010B\200\001\202\265\030|(Optional) Get ex"
      "tended details back on the files found. "
      "Defaults to only returned the app Id and"
      " UGC Id of the files found.\022|\n\005count\030\003 \001"
      "(\rBm\202\265\030i(Optional) Maximum number of res"
      "ults to return on this call. Defaults to"
      " a maximum of 500 files returned.\022r\n\013sta"
      "rt_index\030\004 \001(\rB]\202\265\030Y(Optional) Starting "
      "index to begin enumeration at. Defaults "
      "to the beginning of the list.\"f\n\"CCloud_"
      "EnumerateUserFiles_Response\022+\n\005files\030\001 \003"
      "(\0132\034.proto.steam.CCloud_UserFile\022\023\n\013tota"
      "l_files\030\002 \001(\r\"Y\n\025CCloud_Delete_Request\022\020"
      "\n\010filename\030\001 \001(\t\022.\n\005appid\030\002 \001(\rB\037\202\265\030\033App"
      " ID the file belongs to.\"\030\n\026CCloud_Delet"
      "e_Response\"\'\n%CCloud_GetClientEncryption"
      "Key_Request\"n\n&CCloud_GetClientEncryptio"
      "nKey_Response\022\'\n\003key\030\001 \001(\014B\032\202\265\030\026AES-256 "
      "encryption key\022\033\n\003crc\030\002 \001(\005B\016\202\265\030\nCRC of "
      "key\"\252\001\n\035CCloud_CDNReport_Notification\022\017\n"
      "\007steamid\030\001 \001(\006\022\013\n\003url\030\002 \001(\t\022\017\n\007success\030\003"
      " \001(\010\022\030\n\020http_status_code\030\004 \001(\r\022\026\n\016expect"
      "ed_bytes\030\005 \001(\004\022\026\n\016received_bytes\030\006 \001(\004\022\020"
      "\n\010duration\030\007 \001(\r\"\340\001\n1CCloud_ExternalStor"
      "ageTransferReport_Notification\022\014\n\004host\030\001"
      " \001(\t\022\014\n\004path\030\002 \001(\t\022\021\n\tis_upload\030\003 \001(\010\022\017\n"
      "\007success\030\004 \001(\010\022\030\n\020http_status_code\030\005 \001(\r"
      "\022\026\n\016bytes_expected\030\006 \001(\004\022\024\n\014bytes_actual"
      "\030\007 \001(\004\022\023\n\013duration_ms\030\010 \001(\r\022\016\n\006cellid\030\t "
      "\001(\r\"\274\005\n$CCloud_ClientBeginFileUpload_Req"
      "uest\022\?\n\005appid\030\001 \001(\rB0\202\265\030,App ID for whic"
      "h the file is being uploaded.\022D\n\tfile_si"
      "ze\030\002 \001(\rB1\202\265\030-file size as transmitted a"
      "nd stored in Cloud.\022N\n\rraw_file_size\030\003 \001"
      "(\rB7\202\265\0303file size before any compression"
      " and/or encryption.\022(\n\010file_sha\030\004 \001(\014B\026\202"
      "\265\030\022SHA-1 of raw file.\022*\n\ntime_stamp\030\005 \001("
      "\004B\026\202\265\030\022Timestamp of file.\022=\n\010filename\030\006 "
      "\001(\tB+\202\265\030\'Name of the file to store in th"
      "e cloud.\022%\n\021platforms_to_sync\030\007 \001(\r:\n429"
      "4967295\022F\n\007cell_id\030\t \001(\rB5\202\265\0301Client\'s c"
      "ell ID so we can pick storage location.\022"
      "Q\n\013can_encrypt\030\n \001(\010B<\202\265\0308if true, clien"
      "t can encrypt the file before uploading "
      "it\022f\n\016is_shared_file\030\013 \001(\010BN\202\265\030Jif true,"
      " this is going to be UGC or a screenshot"
      " or some other shared file\"\376\006\n!ClientClo"
      "udFileUploadBlockDetails\022X\n\010url_host\030\001 \001"
      "(\tBF\202\265\030BHost name of server to which fil"
      "e should be uploaded via HTTP PUT.\022O\n\010ur"
      "l_path\030\002 \001(\tB=\202\265\0309Relative path on serve"
      "r to which file should be uploaded.\022>\n\tu"
      "se_https\030\003 \001(\010B+\202\265\030\'If true, use https, "
      "otherwise use http.\022;\n\013http_method\030\004 \001(\005"
      "B&\202\265\030\"EHTTPMethod to use for this block."
      "\022\211\001\n\017request_headers\030\005 \003(\0132:.proto.steam"
      ".ClientCloudFileUploadBlockDetails.HTTPH"
      "eadersB4\202\265\0300Name-value pairs to be sent "
      "in HTTP PUT request.\0228\n\014block_offset\030\006 \001"
      "(\004B\"\202\265\030\036offset of file block to upload\022m"
      "\n\014block_length\030\007 \001(\rBW\202\265\030Slength of file"
      " block to upload - if zero, no part of t"
      "he file is part of this block\022_\n\022explici"
      "t_body_data\030\010 \001(\014BC\202\265\030\?explicit body dat"
      "a to use, instead of file data, for this"
      " block\022o\n\017may_parallelize\030\t \001(\010BV\202\265\030Rif "
      "true, this request may be done in parall"
      "el with other similarly-marked requests\032"
      "*\n\013HTTPHeaders\022\014\n\004name\030\001 \001(\t\022\r\n\005value\030\002 "
      "\001(\t\"\371\001\n%CCloud_ClientBeginFileUpload_Res"
      "ponse\022[\n\014encrypt_file\030\001 \001(\010BE\202\265\030AIf true"
      ", the file should be encrypted by the cl"
      "ient before upload\022s\n\016block_requests\030\002 \003"
      "(\0132..proto.steam.ClientCloudFileUploadBl"
      "ockDetailsB+\202\265\030\'HTTP requests to make to"
      " perform upload\"\311\003\n%CCloud_ClientCommitF"
      "ileUpload_Request\022a\n\022transfer_succeeded\030"
      "\001 \001(\010BE\202\265\030ATrue if all block uploads suc"
      "ceeded, false if any of them failed.\022x\n\005"
      "appid\030\002 \001(\rBi\202\265\030eApp ID for which the fi"
      "le is being uploaded. Must match the app"
      " ID provided to Cloud.BeginFileUpload.\022p"
      "\n\010file_sha\030\003 \001(\014B^\202\265\030ZSHA1 digest of the"
      " raw file. Must match the SHA1 digest pr"
      "ovided to Cloud.BeginFileUpload.\022Q\n\010file"
      "name\030\004 \001(\tB\?\202\265\030;Filename as specified in"
      " the Cloud.BeginFileUpload request.\"\203\001\n&"
      "CCloud_ClientCommitFileUpload_Response\022Y"
      "\n\016file_committed\030\001 \001(\010BA\202\265\030=True if the "
      "file was successfully committed, false o"
      "therwise.\"\200\001\n!CCloud_ClientFileDownload_"
      "Request\022.\n\005appid\030\001 \001(\rB\037\202\265\030\033App ID the f"
      "ile is part of.\022+\n\010filename\030\002 \001(\tB\031\202\265\030\025F"
      "ilename of the file.\"\213\006\n\"CCloud_ClientFi"
      "leDownload_Response\0222\n\005appid\030\001 \001(\rB#\202\265\030\037"
      "Application the file belongs to\022G\n\tfile_"
      "size\030\002 \001(\rB4\202\265\0300file size as transmitted"
      " and stored in the Cloud\022G\n\rraw_file_siz"
      "e\030\003 \001(\rB0\202\265\030,file size when decompressed"
      " and/or decrypted\022!\n\010sha_file\030\004 \001(\014B\017\202\265\030"
      "\013SHA of file\022)\n\ntime_stamp\030\005 \001(\004B\025\202\265\030\021Ti"
      "mestamp of file\022J\n\022is_explicit_delete\030\006 "
      "\001(\010B.\202\265\030*True if this is an explicitly d"
      "eleted file\022/\n\010url_host\030\007 \001(\tB\035\202\265\030\031Host "
      "to GET the file from\022O\n\010url_path\030\010 \001(\tB="
      "\202\265\0309Path on that host to use, including "
      "URL parameters if any\0227\n\tuse_https\030\t \001(\010"
      "B$\202\265\030 If set, use HTTPS, else use HTTP\022\212"
      "\001\n\017request_headers\030\n \003(\0132;.proto.steam.C"
      "Cloud_ClientFileDownload_Response.HTTPHe"
      "adersB4\202\265\0300Name-value pairs to be sent i"
      "n HTTP GET request.\022\021\n\tencrypted\030\013 \001(\010\032*"
      "\n\013HTTPHeaders\022\014\n\004name\030\001 \001(\t\022\r\n\005value\030\002 \001"
      "(\t\"\343\001\n\037CCloud_ClientDeleteFile_Request\022>"
      "\n\005appid\030\001 \001(\rB/\202\265\030+App ID for which the "
      "file is being deleted.\022\'\n\010filename\030\002 \001(\t"
      "B\025\202\265\030\021Filename of file.\022W\n\022is_explicit_d"
      "elete\030\003 \001(\010B;\202\265\0307If true, this is a \'del"
      "ete\'; if false, it is a \'forget\'\"\"\n CClo"
      "ud_ClientDeleteFile_Response\"\340\001\n,CCloud_"
      "ClientConflictResolution_Notification\022>\n"
      "\005appid\030\001 \001(\rB/\202\265\030+App ID for which the c"
      "onflict was resolved.\022p\n\021chose_local_fil"
      "es\030\002 \001(\010BU\202\265\030QDid the user choose to kee"
      "p the files local to the machine they ar"
      "e on right now\?2\354\023\n\005Cloud\022\264\001\n\023GetUploadS"
      "erverInfo\022/.proto.steam.CCloud_GetUpload"
      "ServerInfo_Request\0320.proto.steam.CCloud_"
      "GetUploadServerInfo_Response\":\202\265\0306Return"
      "s the URL of the proper cloud server for"
      " a user.\022\300\002\n\017BeginHTTPUpload\022+.proto.ste"
      "am.CCloud_BeginHTTPUpload_Request\032,.prot"
      "o.steam.CCloud_BeginHTTPUpload_Response\""
      "\321\001\202\265\030\314\001Begins the process of uploading a"
      " file to Steam external storage services"
      ". File should be uploaded via HTTP PUT t"
      "o the returned URL, after which the uplo"
      "ad must be finalized by a call to Commit"
      "HTTPUpload.\022\305\001\n\020CommitHTTPUpload\022,.proto"
      ".steam.CCloud_CommitHTTPUpload_Request\032-"
      ".proto.steam.CCloud_CommitHTTPUpload_Res"
      "ponse\"T\202\265\030PCommits a file upload initiat"
      "ed by BeginHTTPUpload and transferred vi"
      "a HTTP PUT.\022\217\001\n\016GetFileDetails\022*.proto.s"
      "team.CCloud_GetFileDetails_Request\032+.pro"
      "to.steam.CCloud_GetFileDetails_Response\""
      "$\202\265\030 Returns details on a Cloud file.\022\322\001"
      "\n\022EnumerateUserFiles\022..proto.steam.CClou"
      "d_EnumerateUserFiles_Request\032/.proto.ste"
      "am.CCloud_EnumerateUserFiles_Response\"[\202"
      "\265\030WEnumerates Cloud files for a user of "
      "a given app ID. Returns up to 500 files "
      "at a time.\022|\n\006Delete\022\".proto.steam.CClou"
      "d_Delete_Request\032#.proto.steam.CCloud_De"
      "lete_Response\")\202\265\030%Deletes a file from t"
      "he user\'s cloud.\022\261\001\n\026GetClientEncryption"
      "Key\0222.proto.steam.CCloud_GetClientEncryp"
      "tionKey_Request\0323.proto.steam.CCloud_Get"
      "ClientEncryptionKey_Response\".\202\265\030*Gets t"
      "he user\'s Cloud file encryption key.\022{\n\t"
      "CDNReport\022*.proto.steam.CCloud_CDNReport"
      "_Notification\032\027.proto.steam.NoResponse\")"
      "\202\265\030%Reports the result of a CDN transfer"
      ".\022\267\001\n\035ExternalStorageTransferReport\022>.pr"
      "oto.steam.CCloud_ExternalStorageTransfer"
      "Report_Notification\032\027.proto.steam.NoResp"
      "onse\"=\202\265\0309Reports the result of an exter"
      "nal Cloud storage transfer.\022\240\001\n\025ClientBe"
      "ginFileUpload\0221.proto.steam.CCloud_Clien"
      "tBeginFileUpload_Request\0322.proto.steam.C"
      "Cloud_ClientBeginFileUpload_Response\" \202\265"
      "\030\034Initiate an upload to Cloud.\022\262\001\n\026Clien"
      "tCommitFileUpload\0222.proto.steam.CCloud_C"
      "lientCommitFileUpload_Request\0323.proto.st"
      "eam.CCloud_ClientCommitFileUpload_Respon"
      "se\"/\202\265\030+Commit the file upload or indica"
      "te failure.\022\224\001\n\022ClientFileDownload\022..pro"
      "to.steam.CCloud_ClientFileDownload_Reque"
      "st\032/.proto.steam.CCloud_ClientFileDownlo"
      "ad_Response\"\035\202\265\030\031Initiate a file downloa"
      "d.\022\215\001\n\020ClientDeleteFile\022,.proto.steam.CC"
      "loud_ClientDeleteFile_Request\032-.proto.st"
      "eam.CCloud_ClientDeleteFile_Response\"\034\202\265"
      "\030\030Delete or forget a file.\022\246\001\n\030ClientCon"
      "flictResolution\0229.proto.steam.CCloud_Cli"
      "entConflictResolution_Notification\032\027.pro"
      "to.steam.NoResponse\"6\202\265\0302User has picked"
      " a resolution for a Cloud conflict.\032)\202\265\030"
      "%A service for Steam Cloud operations.B\003"
      "\200\001\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 10323);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "steammessages_cloud.steamclient.proto", &protobuf_RegisterTypes);
  ::proto::steam::protobuf_steammessages_5funified_5fbase_2esteamclient_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_steammessages_5fcloud_2esteamclient_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCloud_GetUploadServerInfo_Request::kAppidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCloud_GetUploadServerInfo_Request::CCloud_GetUploadServerInfo_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fcloud_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CCloud_GetUploadServerInfo_Request)
}
CCloud_GetUploadServerInfo_Request::CCloud_GetUploadServerInfo_Request(const CCloud_GetUploadServerInfo_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  appid_ = from.appid_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CCloud_GetUploadServerInfo_Request)
}

void CCloud_GetUploadServerInfo_Request::SharedCtor() {
  _cached_size_ = 0;
  appid_ = 0u;
}

CCloud_GetUploadServerInfo_Request::~CCloud_GetUploadServerInfo_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CCloud_GetUploadServerInfo_Request)
  SharedDtor();
}

void CCloud_GetUploadServerInfo_Request::SharedDtor() {
}

void CCloud_GetUploadServerInfo_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCloud_GetUploadServerInfo_Request::descriptor() {
  protobuf_steammessages_5fcloud_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fcloud_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CCloud_GetUploadServerInfo_Request& CCloud_GetUploadServerInfo_Request::default_instance() {
  protobuf_steammessages_5fcloud_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CCloud_GetUploadServerInfo_Request* CCloud_GetUploadServerInfo_Request::New(::google::protobuf::Arena* arena) const {
  CCloud_GetUploadServerInfo_Request* n = new CCloud_GetUploadServerInfo_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CCloud_GetUploadServerInfo_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CCloud_GetUploadServerInfo_Request)
  appid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CCloud_GetUploadServerInfo_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CCloud_GetUploadServerInfo_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1 [(.proto.steam.description) = "App ID to which a file will be uploaded to."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CCloud_GetUploadServerInfo_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CCloud_GetUploadServerInfo_Request)
  return false;
#undef DO_
}

void CCloud_GetUploadServerInfo_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CCloud_GetUploadServerInfo_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1 [(.proto.steam.description) = "App ID to which a file will be uploaded to."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CCloud_GetUploadServerInfo_Request)
}

::google::protobuf::uint8* CCloud_GetUploadServerInfo_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CCloud_GetUploadServerInfo_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1 [(.proto.steam.description) = "App ID to which a file will be uploaded to."];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CCloud_GetUploadServerInfo_Request)
  return target;
}

size_t CCloud_GetUploadServerInfo_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CCloud_GetUploadServerInfo_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 appid = 1 [(.proto.steam.description) = "App ID to which a file will be uploaded to."];
  if (has_appid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->appid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCloud_GetUploadServerInfo_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CCloud_GetUploadServerInfo_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CCloud_GetUploadServerInfo_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CCloud_GetUploadServerInfo_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CCloud_GetUploadServerInfo_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CCloud_GetUploadServerInfo_Request)
    MergeFrom(*source);
  }
}

void CCloud_GetUploadServerInfo_Request::MergeFrom(const CCloud_GetUploadServerInfo_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CCloud_GetUploadServerInfo_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_appid()) {
    set_appid(from.appid());
  }
}

void CCloud_GetUploadServerInfo_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CCloud_GetUploadServerInfo_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCloud_GetUploadServerInfo_Request::CopyFrom(const CCloud_GetUploadServerInfo_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CCloud_GetUploadServerInfo_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_GetUploadServerInfo_Request::IsInitialized() const {
  return true;
}

void CCloud_GetUploadServerInfo_Request::Swap(CCloud_GetUploadServerInfo_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCloud_GetUploadServerInfo_Request::InternalSwap(CCloud_GetUploadServerInfo_Request* other) {
  std::swap(appid_, other->appid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CCloud_GetUploadServerInfo_Request::GetMetadata() const {
  protobuf_steammessages_5fcloud_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fcloud_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CCloud_GetUploadServerInfo_Request

// optional uint32 appid = 1 [(.proto.steam.description) = "App ID to which a file will be uploaded to."];
bool CCloud_GetUploadServerInfo_Request::has_appid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CCloud_GetUploadServerInfo_Request::set_has_appid() {
  _has_bits_[0] |= 0x00000001u;
}
void CCloud_GetUploadServerInfo_Request::clear_has_appid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CCloud_GetUploadServerInfo_Request::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
::google::protobuf::uint32 CCloud_GetUploadServerInfo_Request::appid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_GetUploadServerInfo_Request.appid)
  return appid_;
}
void CCloud_GetUploadServerInfo_Request::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_GetUploadServerInfo_Request.appid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCloud_GetUploadServerInfo_Response::kServerUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCloud_GetUploadServerInfo_Response::CCloud_GetUploadServerInfo_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fcloud_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CCloud_GetUploadServerInfo_Response)
}
CCloud_GetUploadServerInfo_Response::CCloud_GetUploadServerInfo_Response(const CCloud_GetUploadServerInfo_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  server_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_server_url()) {
    server_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_url_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.steam.CCloud_GetUploadServerInfo_Response)
}

void CCloud_GetUploadServerInfo_Response::SharedCtor() {
  _cached_size_ = 0;
  server_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CCloud_GetUploadServerInfo_Response::~CCloud_GetUploadServerInfo_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CCloud_GetUploadServerInfo_Response)
  SharedDtor();
}

void CCloud_GetUploadServerInfo_Response::SharedDtor() {
  server_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CCloud_GetUploadServerInfo_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCloud_GetUploadServerInfo_Response::descriptor() {
  protobuf_steammessages_5fcloud_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fcloud_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CCloud_GetUploadServerInfo_Response& CCloud_GetUploadServerInfo_Response::default_instance() {
  protobuf_steammessages_5fcloud_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CCloud_GetUploadServerInfo_Response* CCloud_GetUploadServerInfo_Response::New(::google::protobuf::Arena* arena) const {
  CCloud_GetUploadServerInfo_Response* n = new CCloud_GetUploadServerInfo_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CCloud_GetUploadServerInfo_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CCloud_GetUploadServerInfo_Response)
  if (has_server_url()) {
    GOOGLE_DCHECK(!server_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*server_url_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CCloud_GetUploadServerInfo_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CCloud_GetUploadServerInfo_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string server_url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->server_url().data(), this->server_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CCloud_GetUploadServerInfo_Response.server_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CCloud_GetUploadServerInfo_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CCloud_GetUploadServerInfo_Response)
  return false;
#undef DO_
}

void CCloud_GetUploadServerInfo_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CCloud_GetUploadServerInfo_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string server_url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_url().data(), this->server_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCloud_GetUploadServerInfo_Response.server_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->server_url(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CCloud_GetUploadServerInfo_Response)
}

::google::protobuf::uint8* CCloud_GetUploadServerInfo_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CCloud_GetUploadServerInfo_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string server_url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_url().data(), this->server_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCloud_GetUploadServerInfo_Response.server_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->server_url(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CCloud_GetUploadServerInfo_Response)
  return target;
}

size_t CCloud_GetUploadServerInfo_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CCloud_GetUploadServerInfo_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional string server_url = 1;
  if (has_server_url()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->server_url());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCloud_GetUploadServerInfo_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CCloud_GetUploadServerInfo_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CCloud_GetUploadServerInfo_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CCloud_GetUploadServerInfo_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CCloud_GetUploadServerInfo_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CCloud_GetUploadServerInfo_Response)
    MergeFrom(*source);
  }
}

void CCloud_GetUploadServerInfo_Response::MergeFrom(const CCloud_GetUploadServerInfo_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CCloud_GetUploadServerInfo_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_server_url()) {
    set_has_server_url();
    server_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_url_);
  }
}

void CCloud_GetUploadServerInfo_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CCloud_GetUploadServerInfo_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCloud_GetUploadServerInfo_Response::CopyFrom(const CCloud_GetUploadServerInfo_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CCloud_GetUploadServerInfo_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_GetUploadServerInfo_Response::IsInitialized() const {
  return true;
}

void CCloud_GetUploadServerInfo_Response::Swap(CCloud_GetUploadServerInfo_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCloud_GetUploadServerInfo_Response::InternalSwap(CCloud_GetUploadServerInfo_Response* other) {
  server_url_.Swap(&other->server_url_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CCloud_GetUploadServerInfo_Response::GetMetadata() const {
  protobuf_steammessages_5fcloud_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fcloud_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CCloud_GetUploadServerInfo_Response

// optional string server_url = 1;
bool CCloud_GetUploadServerInfo_Response::has_server_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CCloud_GetUploadServerInfo_Response::set_has_server_url() {
  _has_bits_[0] |= 0x00000001u;
}
void CCloud_GetUploadServerInfo_Response::clear_has_server_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void CCloud_GetUploadServerInfo_Response::clear_server_url() {
  server_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_server_url();
}
const ::std::string& CCloud_GetUploadServerInfo_Response::server_url() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_GetUploadServerInfo_Response.server_url)
  return server_url_.GetNoArena();
}
void CCloud_GetUploadServerInfo_Response::set_server_url(const ::std::string& value) {
  set_has_server_url();
  server_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_GetUploadServerInfo_Response.server_url)
}
#if LANG_CXX11
void CCloud_GetUploadServerInfo_Response::set_server_url(::std::string&& value) {
  set_has_server_url();
  server_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CCloud_GetUploadServerInfo_Response.server_url)
}
#endif
void CCloud_GetUploadServerInfo_Response::set_server_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_server_url();
  server_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CCloud_GetUploadServerInfo_Response.server_url)
}
void CCloud_GetUploadServerInfo_Response::set_server_url(const char* value, size_t size) {
  set_has_server_url();
  server_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CCloud_GetUploadServerInfo_Response.server_url)
}
::std::string* CCloud_GetUploadServerInfo_Response::mutable_server_url() {
  set_has_server_url();
  // @@protoc_insertion_point(field_mutable:proto.steam.CCloud_GetUploadServerInfo_Response.server_url)
  return server_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CCloud_GetUploadServerInfo_Response::release_server_url() {
  // @@protoc_insertion_point(field_release:proto.steam.CCloud_GetUploadServerInfo_Response.server_url)
  clear_has_server_url();
  return server_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CCloud_GetUploadServerInfo_Response::set_allocated_server_url(::std::string* server_url) {
  if (server_url != NULL) {
    set_has_server_url();
  } else {
    clear_has_server_url();
  }
  server_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_url);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CCloud_GetUploadServerInfo_Response.server_url)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCloud_BeginHTTPUpload_Request::kAppidFieldNumber;
const int CCloud_BeginHTTPUpload_Request::kFileSizeFieldNumber;
const int CCloud_BeginHTTPUpload_Request::kFilenameFieldNumber;
const int CCloud_BeginHTTPUpload_Request::kFileShaFieldNumber;
const int CCloud_BeginHTTPUpload_Request::kIsPublicFieldNumber;
const int CCloud_BeginHTTPUpload_Request::kPlatformsToSyncFieldNumber;
const int CCloud_BeginHTTPUpload_Request::kRequestHeadersNamesFieldNumber;
const int CCloud_BeginHTTPUpload_Request::kRequestHeadersValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCloud_BeginHTTPUpload_Request::CCloud_BeginHTTPUpload_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fcloud_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CCloud_BeginHTTPUpload_Request)
}
CCloud_BeginHTTPUpload_Request::CCloud_BeginHTTPUpload_Request(const CCloud_BeginHTTPUpload_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      platforms_to_sync_(from.platforms_to_sync_),
      request_headers_names_(from.request_headers_names_),
      request_headers_values_(from.request_headers_values_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_filename()) {
    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  file_sha_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_file_sha()) {
    file_sha_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_sha_);
  }
  ::memcpy(&appid_, &from.appid_,
    reinterpret_cast<char*>(&is_public_) -
    reinterpret_cast<char*>(&appid_) + sizeof(is_public_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CCloud_BeginHTTPUpload_Request)
}

void CCloud_BeginHTTPUpload_Request::SharedCtor() {
  _cached_size_ = 0;
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_sha_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&appid_, 0, reinterpret_cast<char*>(&is_public_) -
    reinterpret_cast<char*>(&appid_) + sizeof(is_public_));
}

CCloud_BeginHTTPUpload_Request::~CCloud_BeginHTTPUpload_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CCloud_BeginHTTPUpload_Request)
  SharedDtor();
}

void CCloud_BeginHTTPUpload_Request::SharedDtor() {
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_sha_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CCloud_BeginHTTPUpload_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCloud_BeginHTTPUpload_Request::descriptor() {
  protobuf_steammessages_5fcloud_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fcloud_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CCloud_BeginHTTPUpload_Request& CCloud_BeginHTTPUpload_Request::default_instance() {
  protobuf_steammessages_5fcloud_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CCloud_BeginHTTPUpload_Request* CCloud_BeginHTTPUpload_Request::New(::google::protobuf::Arena* arena) const {
  CCloud_BeginHTTPUpload_Request* n = new CCloud_BeginHTTPUpload_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CCloud_BeginHTTPUpload_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CCloud_BeginHTTPUpload_Request)
  platforms_to_sync_.Clear();
  request_headers_names_.Clear();
  request_headers_values_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_filename()) {
      GOOGLE_DCHECK(!filename_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*filename_.UnsafeRawStringPointer())->clear();
    }
    if (has_file_sha()) {
      GOOGLE_DCHECK(!file_sha_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*file_sha_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 28u) {
    ::memset(&appid_, 0, reinterpret_cast<char*>(&is_public_) -
      reinterpret_cast<char*>(&appid_) + sizeof(is_public_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CCloud_BeginHTTPUpload_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CCloud_BeginHTTPUpload_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1 [(.proto.steam.description) = "App ID for which the file is being uploaded."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 file_size = 2 [(.proto.steam.description) = "Original file size in bytes."];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_file_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &file_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string filename = 3 [(.proto.steam.description) = "Name of the file to store in the cloud."];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CCloud_BeginHTTPUpload_Request.filename");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string file_sha = 4 [(.proto.steam.description) = "Hex string (40 digits) representing the SHA1 digest of the file."];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_sha()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file_sha().data(), this->file_sha().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CCloud_BeginHTTPUpload_Request.file_sha");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_public = 5 [(.proto.steam.description) = "True if the file should be marked public on the UFS, false otherwise."];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_is_public();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_public_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string platforms_to_sync = 6 [(.proto.steam.description) = "Array of string specifying which platforms to sync; value values: all, windows, osx, linux."];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_platforms_to_sync()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->platforms_to_sync(this->platforms_to_sync_size() - 1).data(),
            this->platforms_to_sync(this->platforms_to_sync_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CCloud_BeginHTTPUpload_Request.platforms_to_sync");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string request_headers_names = 7 [(.proto.steam.description) = "Names for headers you\'ll want to set on your upload request. May be left blank."];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_request_headers_names()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->request_headers_names(this->request_headers_names_size() - 1).data(),
            this->request_headers_names(this->request_headers_names_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CCloud_BeginHTTPUpload_Request.request_headers_names");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string request_headers_values = 8 [(.proto.steam.description) = "Values for headers you\'ll want to set on your upload request. The number of names must equal the number of values."];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_request_headers_values()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->request_headers_values(this->request_headers_values_size() - 1).data(),
            this->request_headers_values(this->request_headers_values_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CCloud_BeginHTTPUpload_Request.request_headers_values");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CCloud_BeginHTTPUpload_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CCloud_BeginHTTPUpload_Request)
  return false;
#undef DO_
}

void CCloud_BeginHTTPUpload_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CCloud_BeginHTTPUpload_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1 [(.proto.steam.description) = "App ID for which the file is being uploaded."];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional uint32 file_size = 2 [(.proto.steam.description) = "Original file size in bytes."];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->file_size(), output);
  }

  // optional string filename = 3 [(.proto.steam.description) = "Name of the file to store in the cloud."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCloud_BeginHTTPUpload_Request.filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->filename(), output);
  }

  // optional string file_sha = 4 [(.proto.steam.description) = "Hex string (40 digits) representing the SHA1 digest of the file."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_sha().data(), this->file_sha().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCloud_BeginHTTPUpload_Request.file_sha");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->file_sha(), output);
  }

  // optional bool is_public = 5 [(.proto.steam.description) = "True if the file should be marked public on the UFS, false otherwise."];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_public(), output);
  }

  // repeated string platforms_to_sync = 6 [(.proto.steam.description) = "Array of string specifying which platforms to sync; value values: all, windows, osx, linux."];
  for (int i = 0, n = this->platforms_to_sync_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->platforms_to_sync(i).data(), this->platforms_to_sync(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCloud_BeginHTTPUpload_Request.platforms_to_sync");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->platforms_to_sync(i), output);
  }

  // repeated string request_headers_names = 7 [(.proto.steam.description) = "Names for headers you\'ll want to set on your upload request. May be left blank."];
  for (int i = 0, n = this->request_headers_names_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_headers_names(i).data(), this->request_headers_names(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCloud_BeginHTTPUpload_Request.request_headers_names");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->request_headers_names(i), output);
  }

  // repeated string request_headers_values = 8 [(.proto.steam.description) = "Values for headers you\'ll want to set on your upload request. The number of names must equal the number of values."];
  for (int i = 0, n = this->request_headers_values_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_headers_values(i).data(), this->request_headers_values(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCloud_BeginHTTPUpload_Request.request_headers_values");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->request_headers_values(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CCloud_BeginHTTPUpload_Request)
}

::google::protobuf::uint8* CCloud_BeginHTTPUpload_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CCloud_BeginHTTPUpload_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1 [(.proto.steam.description) = "App ID for which the file is being uploaded."];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional uint32 file_size = 2 [(.proto.steam.description) = "Original file size in bytes."];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->file_size(), target);
  }

  // optional string filename = 3 [(.proto.steam.description) = "Name of the file to store in the cloud."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCloud_BeginHTTPUpload_Request.filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->filename(), target);
  }

  // optional string file_sha = 4 [(.proto.steam.description) = "Hex string (40 digits) representing the SHA1 digest of the file."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_sha().data(), this->file_sha().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCloud_BeginHTTPUpload_Request.file_sha");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->file_sha(), target);
  }

  // optional bool is_public = 5 [(.proto.steam.description) = "True if the file should be marked public on the UFS, false otherwise."];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_public(), target);
  }

  // repeated string platforms_to_sync = 6 [(.proto.steam.description) = "Array of string specifying which platforms to sync; value values: all, windows, osx, linux."];
  for (int i = 0, n = this->platforms_to_sync_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->platforms_to_sync(i).data(), this->platforms_to_sync(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCloud_BeginHTTPUpload_Request.platforms_to_sync");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->platforms_to_sync(i), target);
  }

  // repeated string request_headers_names = 7 [(.proto.steam.description) = "Names for headers you\'ll want to set on your upload request. May be left blank."];
  for (int i = 0, n = this->request_headers_names_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_headers_names(i).data(), this->request_headers_names(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCloud_BeginHTTPUpload_Request.request_headers_names");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->request_headers_names(i), target);
  }

  // repeated string request_headers_values = 8 [(.proto.steam.description) = "Values for headers you\'ll want to set on your upload request. The number of names must equal the number of values."];
  for (int i = 0, n = this->request_headers_values_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request_headers_values(i).data(), this->request_headers_values(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCloud_BeginHTTPUpload_Request.request_headers_values");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->request_headers_values(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CCloud_BeginHTTPUpload_Request)
  return target;
}

size_t CCloud_BeginHTTPUpload_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CCloud_BeginHTTPUpload_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated string platforms_to_sync = 6 [(.proto.steam.description) = "Array of string specifying which platforms to sync; value values: all, windows, osx, linux."];
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->platforms_to_sync_size());
  for (int i = 0, n = this->platforms_to_sync_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->platforms_to_sync(i));
  }

  // repeated string request_headers_names = 7 [(.proto.steam.description) = "Names for headers you\'ll want to set on your upload request. May be left blank."];
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->request_headers_names_size());
  for (int i = 0, n = this->request_headers_names_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->request_headers_names(i));
  }

  // repeated string request_headers_values = 8 [(.proto.steam.description) = "Values for headers you\'ll want to set on your upload request. The number of names must equal the number of values."];
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->request_headers_values_size());
  for (int i = 0, n = this->request_headers_values_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->request_headers_values(i));
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional string filename = 3 [(.proto.steam.description) = "Name of the file to store in the cloud."];
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional string file_sha = 4 [(.proto.steam.description) = "Hex string (40 digits) representing the SHA1 digest of the file."];
    if (has_file_sha()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_sha());
    }

    // optional uint32 appid = 1 [(.proto.steam.description) = "App ID for which the file is being uploaded."];
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional uint32 file_size = 2 [(.proto.steam.description) = "Original file size in bytes."];
    if (has_file_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->file_size());
    }

    // optional bool is_public = 5 [(.proto.steam.description) = "True if the file should be marked public on the UFS, false otherwise."];
    if (has_is_public()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCloud_BeginHTTPUpload_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CCloud_BeginHTTPUpload_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CCloud_BeginHTTPUpload_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CCloud_BeginHTTPUpload_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CCloud_BeginHTTPUpload_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CCloud_BeginHTTPUpload_Request)
    MergeFrom(*source);
  }
}

void CCloud_BeginHTTPUpload_Request::MergeFrom(const CCloud_BeginHTTPUpload_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CCloud_BeginHTTPUpload_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  platforms_to_sync_.MergeFrom(from.platforms_to_sync_);
  request_headers_names_.MergeFrom(from.request_headers_names_);
  request_headers_values_.MergeFrom(from.request_headers_values_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_filename();
      filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_file_sha();
      file_sha_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_sha_);
    }
    if (cached_has_bits & 0x00000004u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000008u) {
      file_size_ = from.file_size_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_public_ = from.is_public_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CCloud_BeginHTTPUpload_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CCloud_BeginHTTPUpload_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCloud_BeginHTTPUpload_Request::CopyFrom(const CCloud_BeginHTTPUpload_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CCloud_BeginHTTPUpload_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_BeginHTTPUpload_Request::IsInitialized() const {
  return true;
}

void CCloud_BeginHTTPUpload_Request::Swap(CCloud_BeginHTTPUpload_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCloud_BeginHTTPUpload_Request::InternalSwap(CCloud_BeginHTTPUpload_Request* other) {
  platforms_to_sync_.InternalSwap(&other->platforms_to_sync_);
  request_headers_names_.InternalSwap(&other->request_headers_names_);
  request_headers_values_.InternalSwap(&other->request_headers_values_);
  filename_.Swap(&other->filename_);
  file_sha_.Swap(&other->file_sha_);
  std::swap(appid_, other->appid_);
  std::swap(file_size_, other->file_size_);
  std::swap(is_public_, other->is_public_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CCloud_BeginHTTPUpload_Request::GetMetadata() const {
  protobuf_steammessages_5fcloud_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fcloud_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CCloud_BeginHTTPUpload_Request

// optional uint32 appid = 1 [(.proto.steam.description) = "App ID for which the file is being uploaded."];
bool CCloud_BeginHTTPUpload_Request::has_appid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CCloud_BeginHTTPUpload_Request::set_has_appid() {
  _has_bits_[0] |= 0x00000004u;
}
void CCloud_BeginHTTPUpload_Request::clear_has_appid() {
  _has_bits_[0] &= ~0x00000004u;
}
void CCloud_BeginHTTPUpload_Request::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
::google::protobuf::uint32 CCloud_BeginHTTPUpload_Request::appid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_BeginHTTPUpload_Request.appid)
  return appid_;
}
void CCloud_BeginHTTPUpload_Request::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_BeginHTTPUpload_Request.appid)
}

// optional uint32 file_size = 2 [(.proto.steam.description) = "Original file size in bytes."];
bool CCloud_BeginHTTPUpload_Request::has_file_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CCloud_BeginHTTPUpload_Request::set_has_file_size() {
  _has_bits_[0] |= 0x00000008u;
}
void CCloud_BeginHTTPUpload_Request::clear_has_file_size() {
  _has_bits_[0] &= ~0x00000008u;
}
void CCloud_BeginHTTPUpload_Request::clear_file_size() {
  file_size_ = 0u;
  clear_has_file_size();
}
::google::protobuf::uint32 CCloud_BeginHTTPUpload_Request::file_size() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_BeginHTTPUpload_Request.file_size)
  return file_size_;
}
void CCloud_BeginHTTPUpload_Request::set_file_size(::google::protobuf::uint32 value) {
  set_has_file_size();
  file_size_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_BeginHTTPUpload_Request.file_size)
}

// optional string filename = 3 [(.proto.steam.description) = "Name of the file to store in the cloud."];
bool CCloud_BeginHTTPUpload_Request::has_filename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CCloud_BeginHTTPUpload_Request::set_has_filename() {
  _has_bits_[0] |= 0x00000001u;
}
void CCloud_BeginHTTPUpload_Request::clear_has_filename() {
  _has_bits_[0] &= ~0x00000001u;
}
void CCloud_BeginHTTPUpload_Request::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_filename();
}
const ::std::string& CCloud_BeginHTTPUpload_Request::filename() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_BeginHTTPUpload_Request.filename)
  return filename_.GetNoArena();
}
void CCloud_BeginHTTPUpload_Request::set_filename(const ::std::string& value) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_BeginHTTPUpload_Request.filename)
}
#if LANG_CXX11
void CCloud_BeginHTTPUpload_Request::set_filename(::std::string&& value) {
  set_has_filename();
  filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CCloud_BeginHTTPUpload_Request.filename)
}
#endif
void CCloud_BeginHTTPUpload_Request::set_filename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CCloud_BeginHTTPUpload_Request.filename)
}
void CCloud_BeginHTTPUpload_Request::set_filename(const char* value, size_t size) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CCloud_BeginHTTPUpload_Request.filename)
}
::std::string* CCloud_BeginHTTPUpload_Request::mutable_filename() {
  set_has_filename();
  // @@protoc_insertion_point(field_mutable:proto.steam.CCloud_BeginHTTPUpload_Request.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CCloud_BeginHTTPUpload_Request::release_filename() {
  // @@protoc_insertion_point(field_release:proto.steam.CCloud_BeginHTTPUpload_Request.filename)
  clear_has_filename();
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CCloud_BeginHTTPUpload_Request::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    set_has_filename();
  } else {
    clear_has_filename();
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CCloud_BeginHTTPUpload_Request.filename)
}

// optional string file_sha = 4 [(.proto.steam.description) = "Hex string (40 digits) representing the SHA1 digest of the file."];
bool CCloud_BeginHTTPUpload_Request::has_file_sha() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CCloud_BeginHTTPUpload_Request::set_has_file_sha() {
  _has_bits_[0] |= 0x00000002u;
}
void CCloud_BeginHTTPUpload_Request::clear_has_file_sha() {
  _has_bits_[0] &= ~0x00000002u;
}
void CCloud_BeginHTTPUpload_Request::clear_file_sha() {
  file_sha_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_sha();
}
const ::std::string& CCloud_BeginHTTPUpload_Request::file_sha() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_BeginHTTPUpload_Request.file_sha)
  return file_sha_.GetNoArena();
}
void CCloud_BeginHTTPUpload_Request::set_file_sha(const ::std::string& value) {
  set_has_file_sha();
  file_sha_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_BeginHTTPUpload_Request.file_sha)
}
#if LANG_CXX11
void CCloud_BeginHTTPUpload_Request::set_file_sha(::std::string&& value) {
  set_has_file_sha();
  file_sha_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CCloud_BeginHTTPUpload_Request.file_sha)
}
#endif
void CCloud_BeginHTTPUpload_Request::set_file_sha(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_file_sha();
  file_sha_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CCloud_BeginHTTPUpload_Request.file_sha)
}
void CCloud_BeginHTTPUpload_Request::set_file_sha(const char* value, size_t size) {
  set_has_file_sha();
  file_sha_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CCloud_BeginHTTPUpload_Request.file_sha)
}
::std::string* CCloud_BeginHTTPUpload_Request::mutable_file_sha() {
  set_has_file_sha();
  // @@protoc_insertion_point(field_mutable:proto.steam.CCloud_BeginHTTPUpload_Request.file_sha)
  return file_sha_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CCloud_BeginHTTPUpload_Request::release_file_sha() {
  // @@protoc_insertion_point(field_release:proto.steam.CCloud_BeginHTTPUpload_Request.file_sha)
  clear_has_file_sha();
  return file_sha_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CCloud_BeginHTTPUpload_Request::set_allocated_file_sha(::std::string* file_sha) {
  if (file_sha != NULL) {
    set_has_file_sha();
  } else {
    clear_has_file_sha();
  }
  file_sha_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_sha);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CCloud_BeginHTTPUpload_Request.file_sha)
}

// optional bool is_public = 5 [(.proto.steam.description) = "True if the file should be marked public on the UFS, false otherwise."];
bool CCloud_BeginHTTPUpload_Request::has_is_public() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CCloud_BeginHTTPUpload_Request::set_has_is_public() {
  _has_bits_[0] |= 0x00000010u;
}
void CCloud_BeginHTTPUpload_Request::clear_has_is_public() {
  _has_bits_[0] &= ~0x00000010u;
}
void CCloud_BeginHTTPUpload_Request::clear_is_public() {
  is_public_ = false;
  clear_has_is_public();
}
bool CCloud_BeginHTTPUpload_Request::is_public() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_BeginHTTPUpload_Request.is_public)
  return is_public_;
}
void CCloud_BeginHTTPUpload_Request::set_is_public(bool value) {
  set_has_is_public();
  is_public_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_BeginHTTPUpload_Request.is_public)
}

// repeated string platforms_to_sync = 6 [(.proto.steam.description) = "Array of string specifying which platforms to sync; value values: all, windows, osx, linux."];
int CCloud_BeginHTTPUpload_Request::platforms_to_sync_size() const {
  return platforms_to_sync_.size();
}
void CCloud_BeginHTTPUpload_Request::clear_platforms_to_sync() {
  platforms_to_sync_.Clear();
}
const ::std::string& CCloud_BeginHTTPUpload_Request::platforms_to_sync(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_BeginHTTPUpload_Request.platforms_to_sync)
  return platforms_to_sync_.Get(index);
}
::std::string* CCloud_BeginHTTPUpload_Request::mutable_platforms_to_sync(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CCloud_BeginHTTPUpload_Request.platforms_to_sync)
  return platforms_to_sync_.Mutable(index);
}
void CCloud_BeginHTTPUpload_Request::set_platforms_to_sync(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_BeginHTTPUpload_Request.platforms_to_sync)
  platforms_to_sync_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void CCloud_BeginHTTPUpload_Request::set_platforms_to_sync(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_BeginHTTPUpload_Request.platforms_to_sync)
  platforms_to_sync_.Mutable(index)->assign(std::move(value));
}
#endif
void CCloud_BeginHTTPUpload_Request::set_platforms_to_sync(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  platforms_to_sync_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.steam.CCloud_BeginHTTPUpload_Request.platforms_to_sync)
}
void CCloud_BeginHTTPUpload_Request::set_platforms_to_sync(int index, const char* value, size_t size) {
  platforms_to_sync_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CCloud_BeginHTTPUpload_Request.platforms_to_sync)
}
::std::string* CCloud_BeginHTTPUpload_Request::add_platforms_to_sync() {
  // @@protoc_insertion_point(field_add_mutable:proto.steam.CCloud_BeginHTTPUpload_Request.platforms_to_sync)
  return platforms_to_sync_.Add();
}
void CCloud_BeginHTTPUpload_Request::add_platforms_to_sync(const ::std::string& value) {
  platforms_to_sync_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto.steam.CCloud_BeginHTTPUpload_Request.platforms_to_sync)
}
#if LANG_CXX11
void CCloud_BeginHTTPUpload_Request::add_platforms_to_sync(::std::string&& value) {
  platforms_to_sync_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:proto.steam.CCloud_BeginHTTPUpload_Request.platforms_to_sync)
}
#endif
void CCloud_BeginHTTPUpload_Request::add_platforms_to_sync(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  platforms_to_sync_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto.steam.CCloud_BeginHTTPUpload_Request.platforms_to_sync)
}
void CCloud_BeginHTTPUpload_Request::add_platforms_to_sync(const char* value, size_t size) {
  platforms_to_sync_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto.steam.CCloud_BeginHTTPUpload_Request.platforms_to_sync)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
CCloud_BeginHTTPUpload_Request::platforms_to_sync() const {
  // @@protoc_insertion_point(field_list:proto.steam.CCloud_BeginHTTPUpload_Request.platforms_to_sync)
  return platforms_to_sync_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
CCloud_BeginHTTPUpload_Request::mutable_platforms_to_sync() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CCloud_BeginHTTPUpload_Request.platforms_to_sync)
  return &platforms_to_sync_;
}

// repeated string request_headers_names = 7 [(.proto.steam.description) = "Names for headers you\'ll want to set on your upload request. May be left blank."];
int CCloud_BeginHTTPUpload_Request::request_headers_names_size() const {
  return request_headers_names_.size();
}
void CCloud_BeginHTTPUpload_Request::clear_request_headers_names() {
  request_headers_names_.Clear();
}
const ::std::string& CCloud_BeginHTTPUpload_Request::request_headers_names(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_BeginHTTPUpload_Request.request_headers_names)
  return request_headers_names_.Get(index);
}
::std::string* CCloud_BeginHTTPUpload_Request::mutable_request_headers_names(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CCloud_BeginHTTPUpload_Request.request_headers_names)
  return request_headers_names_.Mutable(index);
}
void CCloud_BeginHTTPUpload_Request::set_request_headers_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_BeginHTTPUpload_Request.request_headers_names)
  request_headers_names_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void CCloud_BeginHTTPUpload_Request::set_request_headers_names(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_BeginHTTPUpload_Request.request_headers_names)
  request_headers_names_.Mutable(index)->assign(std::move(value));
}
#endif
void CCloud_BeginHTTPUpload_Request::set_request_headers_names(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  request_headers_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.steam.CCloud_BeginHTTPUpload_Request.request_headers_names)
}
void CCloud_BeginHTTPUpload_Request::set_request_headers_names(int index, const char* value, size_t size) {
  request_headers_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CCloud_BeginHTTPUpload_Request.request_headers_names)
}
::std::string* CCloud_BeginHTTPUpload_Request::add_request_headers_names() {
  // @@protoc_insertion_point(field_add_mutable:proto.steam.CCloud_BeginHTTPUpload_Request.request_headers_names)
  return request_headers_names_.Add();
}
void CCloud_BeginHTTPUpload_Request::add_request_headers_names(const ::std::string& value) {
  request_headers_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto.steam.CCloud_BeginHTTPUpload_Request.request_headers_names)
}
#if LANG_CXX11
void CCloud_BeginHTTPUpload_Request::add_request_headers_names(::std::string&& value) {
  request_headers_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:proto.steam.CCloud_BeginHTTPUpload_Request.request_headers_names)
}
#endif
void CCloud_BeginHTTPUpload_Request::add_request_headers_names(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  request_headers_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto.steam.CCloud_BeginHTTPUpload_Request.request_headers_names)
}
void CCloud_BeginHTTPUpload_Request::add_request_headers_names(const char* value, size_t size) {
  request_headers_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto.steam.CCloud_BeginHTTPUpload_Request.request_headers_names)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
CCloud_BeginHTTPUpload_Request::request_headers_names() const {
  // @@protoc_insertion_point(field_list:proto.steam.CCloud_BeginHTTPUpload_Request.request_headers_names)
  return request_headers_names_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
CCloud_BeginHTTPUpload_Request::mutable_request_headers_names() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CCloud_BeginHTTPUpload_Request.request_headers_names)
  return &request_headers_names_;
}

// repeated string request_headers_values = 8 [(.proto.steam.description) = "Values for headers you\'ll want to set on your upload request. The number of names must equal the number of values."];
int CCloud_BeginHTTPUpload_Request::request_headers_values_size() const {
  return request_headers_values_.size();
}
void CCloud_BeginHTTPUpload_Request::clear_request_headers_values() {
  request_headers_values_.Clear();
}
const ::std::string& CCloud_BeginHTTPUpload_Request::request_headers_values(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_BeginHTTPUpload_Request.request_headers_values)
  return request_headers_values_.Get(index);
}
::std::string* CCloud_BeginHTTPUpload_Request::mutable_request_headers_values(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CCloud_BeginHTTPUpload_Request.request_headers_values)
  return request_headers_values_.Mutable(index);
}
void CCloud_BeginHTTPUpload_Request::set_request_headers_values(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_BeginHTTPUpload_Request.request_headers_values)
  request_headers_values_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void CCloud_BeginHTTPUpload_Request::set_request_headers_values(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_BeginHTTPUpload_Request.request_headers_values)
  request_headers_values_.Mutable(index)->assign(std::move(value));
}
#endif
void CCloud_BeginHTTPUpload_Request::set_request_headers_values(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  request_headers_values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.steam.CCloud_BeginHTTPUpload_Request.request_headers_values)
}
void CCloud_BeginHTTPUpload_Request::set_request_headers_values(int index, const char* value, size_t size) {
  request_headers_values_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CCloud_BeginHTTPUpload_Request.request_headers_values)
}
::std::string* CCloud_BeginHTTPUpload_Request::add_request_headers_values() {
  // @@protoc_insertion_point(field_add_mutable:proto.steam.CCloud_BeginHTTPUpload_Request.request_headers_values)
  return request_headers_values_.Add();
}
void CCloud_BeginHTTPUpload_Request::add_request_headers_values(const ::std::string& value) {
  request_headers_values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto.steam.CCloud_BeginHTTPUpload_Request.request_headers_values)
}
#if LANG_CXX11
void CCloud_BeginHTTPUpload_Request::add_request_headers_values(::std::string&& value) {
  request_headers_values_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:proto.steam.CCloud_BeginHTTPUpload_Request.request_headers_values)
}
#endif
void CCloud_BeginHTTPUpload_Request::add_request_headers_values(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  request_headers_values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto.steam.CCloud_BeginHTTPUpload_Request.request_headers_values)
}
void CCloud_BeginHTTPUpload_Request::add_request_headers_values(const char* value, size_t size) {
  request_headers_values_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto.steam.CCloud_BeginHTTPUpload_Request.request_headers_values)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
CCloud_BeginHTTPUpload_Request::request_headers_values() const {
  // @@protoc_insertion_point(field_list:proto.steam.CCloud_BeginHTTPUpload_Request.request_headers_values)
  return request_headers_values_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
CCloud_BeginHTTPUpload_Request::mutable_request_headers_values() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CCloud_BeginHTTPUpload_Request.request_headers_values)
  return &request_headers_values_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCloud_BeginHTTPUpload_Response_HTTPHeaders::kNameFieldNumber;
const int CCloud_BeginHTTPUpload_Response_HTTPHeaders::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCloud_BeginHTTPUpload_Response_HTTPHeaders::CCloud_BeginHTTPUpload_Response_HTTPHeaders()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fcloud_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CCloud_BeginHTTPUpload_Response.HTTPHeaders)
}
CCloud_BeginHTTPUpload_Response_HTTPHeaders::CCloud_BeginHTTPUpload_Response_HTTPHeaders(const CCloud_BeginHTTPUpload_Response_HTTPHeaders& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.steam.CCloud_BeginHTTPUpload_Response.HTTPHeaders)
}

void CCloud_BeginHTTPUpload_Response_HTTPHeaders::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CCloud_BeginHTTPUpload_Response_HTTPHeaders::~CCloud_BeginHTTPUpload_Response_HTTPHeaders() {
  // @@protoc_insertion_point(destructor:proto.steam.CCloud_BeginHTTPUpload_Response.HTTPHeaders)
  SharedDtor();
}

void CCloud_BeginHTTPUpload_Response_HTTPHeaders::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CCloud_BeginHTTPUpload_Response_HTTPHeaders::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCloud_BeginHTTPUpload_Response_HTTPHeaders::descriptor() {
  protobuf_steammessages_5fcloud_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fcloud_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CCloud_BeginHTTPUpload_Response_HTTPHeaders& CCloud_BeginHTTPUpload_Response_HTTPHeaders::default_instance() {
  protobuf_steammessages_5fcloud_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CCloud_BeginHTTPUpload_Response_HTTPHeaders* CCloud_BeginHTTPUpload_Response_HTTPHeaders::New(::google::protobuf::Arena* arena) const {
  CCloud_BeginHTTPUpload_Response_HTTPHeaders* n = new CCloud_BeginHTTPUpload_Response_HTTPHeaders;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CCloud_BeginHTTPUpload_Response_HTTPHeaders::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CCloud_BeginHTTPUpload_Response.HTTPHeaders)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_value()) {
      GOOGLE_DCHECK(!value_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*value_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CCloud_BeginHTTPUpload_Response_HTTPHeaders::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CCloud_BeginHTTPUpload_Response.HTTPHeaders)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CCloud_BeginHTTPUpload_Response.HTTPHeaders.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CCloud_BeginHTTPUpload_Response.HTTPHeaders.value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CCloud_BeginHTTPUpload_Response.HTTPHeaders)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CCloud_BeginHTTPUpload_Response.HTTPHeaders)
  return false;
#undef DO_
}

void CCloud_BeginHTTPUpload_Response_HTTPHeaders::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CCloud_BeginHTTPUpload_Response.HTTPHeaders)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCloud_BeginHTTPUpload_Response.HTTPHeaders.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCloud_BeginHTTPUpload_Response.HTTPHeaders.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CCloud_BeginHTTPUpload_Response.HTTPHeaders)
}

::google::protobuf::uint8* CCloud_BeginHTTPUpload_Response_HTTPHeaders::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CCloud_BeginHTTPUpload_Response.HTTPHeaders)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCloud_BeginHTTPUpload_Response.HTTPHeaders.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCloud_BeginHTTPUpload_Response.HTTPHeaders.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CCloud_BeginHTTPUpload_Response.HTTPHeaders)
  return target;
}

size_t CCloud_BeginHTTPUpload_Response_HTTPHeaders::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CCloud_BeginHTTPUpload_Response.HTTPHeaders)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCloud_BeginHTTPUpload_Response_HTTPHeaders::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CCloud_BeginHTTPUpload_Response.HTTPHeaders)
  GOOGLE_DCHECK_NE(&from, this);
  const CCloud_BeginHTTPUpload_Response_HTTPHeaders* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CCloud_BeginHTTPUpload_Response_HTTPHeaders>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CCloud_BeginHTTPUpload_Response.HTTPHeaders)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CCloud_BeginHTTPUpload_Response.HTTPHeaders)
    MergeFrom(*source);
  }
}

void CCloud_BeginHTTPUpload_Response_HTTPHeaders::MergeFrom(const CCloud_BeginHTTPUpload_Response_HTTPHeaders& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CCloud_BeginHTTPUpload_Response.HTTPHeaders)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
}

void CCloud_BeginHTTPUpload_Response_HTTPHeaders::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CCloud_BeginHTTPUpload_Response.HTTPHeaders)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCloud_BeginHTTPUpload_Response_HTTPHeaders::CopyFrom(const CCloud_BeginHTTPUpload_Response_HTTPHeaders& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CCloud_BeginHTTPUpload_Response.HTTPHeaders)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_BeginHTTPUpload_Response_HTTPHeaders::IsInitialized() const {
  return true;
}

void CCloud_BeginHTTPUpload_Response_HTTPHeaders::Swap(CCloud_BeginHTTPUpload_Response_HTTPHeaders* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCloud_BeginHTTPUpload_Response_HTTPHeaders::InternalSwap(CCloud_BeginHTTPUpload_Response_HTTPHeaders* other) {
  name_.Swap(&other->name_);
  value_.Swap(&other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CCloud_BeginHTTPUpload_Response_HTTPHeaders::GetMetadata() const {
  protobuf_steammessages_5fcloud_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fcloud_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CCloud_BeginHTTPUpload_Response_HTTPHeaders

// optional string name = 1;
bool CCloud_BeginHTTPUpload_Response_HTTPHeaders::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CCloud_BeginHTTPUpload_Response_HTTPHeaders::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CCloud_BeginHTTPUpload_Response_HTTPHeaders::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CCloud_BeginHTTPUpload_Response_HTTPHeaders::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& CCloud_BeginHTTPUpload_Response_HTTPHeaders::name() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_BeginHTTPUpload_Response.HTTPHeaders.name)
  return name_.GetNoArena();
}
void CCloud_BeginHTTPUpload_Response_HTTPHeaders::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_BeginHTTPUpload_Response.HTTPHeaders.name)
}
#if LANG_CXX11
void CCloud_BeginHTTPUpload_Response_HTTPHeaders::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CCloud_BeginHTTPUpload_Response.HTTPHeaders.name)
}
#endif
void CCloud_BeginHTTPUpload_Response_HTTPHeaders::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CCloud_BeginHTTPUpload_Response.HTTPHeaders.name)
}
void CCloud_BeginHTTPUpload_Response_HTTPHeaders::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CCloud_BeginHTTPUpload_Response.HTTPHeaders.name)
}
::std::string* CCloud_BeginHTTPUpload_Response_HTTPHeaders::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:proto.steam.CCloud_BeginHTTPUpload_Response.HTTPHeaders.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CCloud_BeginHTTPUpload_Response_HTTPHeaders::release_name() {
  // @@protoc_insertion_point(field_release:proto.steam.CCloud_BeginHTTPUpload_Response.HTTPHeaders.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CCloud_BeginHTTPUpload_Response_HTTPHeaders::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CCloud_BeginHTTPUpload_Response.HTTPHeaders.name)
}

// optional string value = 2;
bool CCloud_BeginHTTPUpload_Response_HTTPHeaders::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CCloud_BeginHTTPUpload_Response_HTTPHeaders::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void CCloud_BeginHTTPUpload_Response_HTTPHeaders::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void CCloud_BeginHTTPUpload_Response_HTTPHeaders::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
const ::std::string& CCloud_BeginHTTPUpload_Response_HTTPHeaders::value() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_BeginHTTPUpload_Response.HTTPHeaders.value)
  return value_.GetNoArena();
}
void CCloud_BeginHTTPUpload_Response_HTTPHeaders::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_BeginHTTPUpload_Response.HTTPHeaders.value)
}
#if LANG_CXX11
void CCloud_BeginHTTPUpload_Response_HTTPHeaders::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CCloud_BeginHTTPUpload_Response.HTTPHeaders.value)
}
#endif
void CCloud_BeginHTTPUpload_Response_HTTPHeaders::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CCloud_BeginHTTPUpload_Response.HTTPHeaders.value)
}
void CCloud_BeginHTTPUpload_Response_HTTPHeaders::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CCloud_BeginHTTPUpload_Response.HTTPHeaders.value)
}
::std::string* CCloud_BeginHTTPUpload_Response_HTTPHeaders::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:proto.steam.CCloud_BeginHTTPUpload_Response.HTTPHeaders.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CCloud_BeginHTTPUpload_Response_HTTPHeaders::release_value() {
  // @@protoc_insertion_point(field_release:proto.steam.CCloud_BeginHTTPUpload_Response.HTTPHeaders.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CCloud_BeginHTTPUpload_Response_HTTPHeaders::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CCloud_BeginHTTPUpload_Response.HTTPHeaders.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCloud_BeginHTTPUpload_Response::kUgcidFieldNumber;
const int CCloud_BeginHTTPUpload_Response::kTimestampFieldNumber;
const int CCloud_BeginHTTPUpload_Response::kUrlHostFieldNumber;
const int CCloud_BeginHTTPUpload_Response::kUrlPathFieldNumber;
const int CCloud_BeginHTTPUpload_Response::kUseHttpsFieldNumber;
const int CCloud_BeginHTTPUpload_Response::kRequestHeadersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCloud_BeginHTTPUpload_Response::CCloud_BeginHTTPUpload_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fcloud_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CCloud_BeginHTTPUpload_Response)
}
CCloud_BeginHTTPUpload_Response::CCloud_BeginHTTPUpload_Response(const CCloud_BeginHTTPUpload_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      request_headers_(from.request_headers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url_host()) {
    url_host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_host_);
  }
  url_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url_path()) {
    url_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_path_);
  }
  ::memcpy(&ugcid_, &from.ugcid_,
    reinterpret_cast<char*>(&use_https_) -
    reinterpret_cast<char*>(&ugcid_) + sizeof(use_https_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CCloud_BeginHTTPUpload_Response)
}

void CCloud_BeginHTTPUpload_Response::SharedCtor() {
  _cached_size_ = 0;
  url_host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ugcid_, 0, reinterpret_cast<char*>(&use_https_) -
    reinterpret_cast<char*>(&ugcid_) + sizeof(use_https_));
}

CCloud_BeginHTTPUpload_Response::~CCloud_BeginHTTPUpload_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CCloud_BeginHTTPUpload_Response)
  SharedDtor();
}

void CCloud_BeginHTTPUpload_Response::SharedDtor() {
  url_host_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CCloud_BeginHTTPUpload_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCloud_BeginHTTPUpload_Response::descriptor() {
  protobuf_steammessages_5fcloud_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fcloud_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CCloud_BeginHTTPUpload_Response& CCloud_BeginHTTPUpload_Response::default_instance() {
  protobuf_steammessages_5fcloud_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CCloud_BeginHTTPUpload_Response* CCloud_BeginHTTPUpload_Response::New(::google::protobuf::Arena* arena) const {
  CCloud_BeginHTTPUpload_Response* n = new CCloud_BeginHTTPUpload_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CCloud_BeginHTTPUpload_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CCloud_BeginHTTPUpload_Response)
  request_headers_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_url_host()) {
      GOOGLE_DCHECK(!url_host_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_host_.UnsafeRawStringPointer())->clear();
    }
    if (has_url_path()) {
      GOOGLE_DCHECK(!url_path_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_path_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 28u) {
    ::memset(&ugcid_, 0, reinterpret_cast<char*>(&use_https_) -
      reinterpret_cast<char*>(&ugcid_) + sizeof(use_https_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CCloud_BeginHTTPUpload_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CCloud_BeginHTTPUpload_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 ugcid = 1 [(.proto.steam.description) = "UGC ID of the uploaded file."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_ugcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &ugcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 timestamp = 2 [(.proto.steam.description) = "Server timestamp of file."];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string url_host = 3 [(.proto.steam.description) = "Host name of server to which file should be uploaded via HTTP PUT."];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url_host().data(), this->url_host().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CCloud_BeginHTTPUpload_Response.url_host");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string url_path = 4 [(.proto.steam.description) = "Relative path on server to which file should be uploaded."];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url_path().data(), this->url_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CCloud_BeginHTTPUpload_Response.url_path");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_https = 5 [(.proto.steam.description) = "If true, use https, otherwise use http."];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_use_https();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_https_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CCloud_BeginHTTPUpload_Response.HTTPHeaders request_headers = 6 [(.proto.steam.description) = "Name-value pairs to be sent in HTTP PUT request."];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_request_headers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CCloud_BeginHTTPUpload_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CCloud_BeginHTTPUpload_Response)
  return false;
#undef DO_
}

void CCloud_BeginHTTPUpload_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CCloud_BeginHTTPUpload_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 ugcid = 1 [(.proto.steam.description) = "UGC ID of the uploaded file."];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->ugcid(), output);
  }

  // optional fixed32 timestamp = 2 [(.proto.steam.description) = "Server timestamp of file."];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->timestamp(), output);
  }

  // optional string url_host = 3 [(.proto.steam.description) = "Host name of server to which file should be uploaded via HTTP PUT."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url_host().data(), this->url_host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCloud_BeginHTTPUpload_Response.url_host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->url_host(), output);
  }

  // optional string url_path = 4 [(.proto.steam.description) = "Relative path on server to which file should be uploaded."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url_path().data(), this->url_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCloud_BeginHTTPUpload_Response.url_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->url_path(), output);
  }

  // optional bool use_https = 5 [(.proto.steam.description) = "If true, use https, otherwise use http."];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->use_https(), output);
  }

  // repeated .proto.steam.CCloud_BeginHTTPUpload_Response.HTTPHeaders request_headers = 6 [(.proto.steam.description) = "Name-value pairs to be sent in HTTP PUT request."];
  for (unsigned int i = 0, n = this->request_headers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->request_headers(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CCloud_BeginHTTPUpload_Response)
}

::google::protobuf::uint8* CCloud_BeginHTTPUpload_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CCloud_BeginHTTPUpload_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 ugcid = 1 [(.proto.steam.description) = "UGC ID of the uploaded file."];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->ugcid(), target);
  }

  // optional fixed32 timestamp = 2 [(.proto.steam.description) = "Server timestamp of file."];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->timestamp(), target);
  }

  // optional string url_host = 3 [(.proto.steam.description) = "Host name of server to which file should be uploaded via HTTP PUT."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url_host().data(), this->url_host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCloud_BeginHTTPUpload_Response.url_host");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->url_host(), target);
  }

  // optional string url_path = 4 [(.proto.steam.description) = "Relative path on server to which file should be uploaded."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url_path().data(), this->url_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCloud_BeginHTTPUpload_Response.url_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->url_path(), target);
  }

  // optional bool use_https = 5 [(.proto.steam.description) = "If true, use https, otherwise use http."];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->use_https(), target);
  }

  // repeated .proto.steam.CCloud_BeginHTTPUpload_Response.HTTPHeaders request_headers = 6 [(.proto.steam.description) = "Name-value pairs to be sent in HTTP PUT request."];
  for (unsigned int i = 0, n = this->request_headers_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->request_headers(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CCloud_BeginHTTPUpload_Response)
  return target;
}

size_t CCloud_BeginHTTPUpload_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CCloud_BeginHTTPUpload_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.steam.CCloud_BeginHTTPUpload_Response.HTTPHeaders request_headers = 6 [(.proto.steam.description) = "Name-value pairs to be sent in HTTP PUT request."];
  {
    unsigned int count = this->request_headers_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->request_headers(i));
    }
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional string url_host = 3 [(.proto.steam.description) = "Host name of server to which file should be uploaded via HTTP PUT."];
    if (has_url_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url_host());
    }

    // optional string url_path = 4 [(.proto.steam.description) = "Relative path on server to which file should be uploaded."];
    if (has_url_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url_path());
    }

    // optional fixed64 ugcid = 1 [(.proto.steam.description) = "UGC ID of the uploaded file."];
    if (has_ugcid()) {
      total_size += 1 + 8;
    }

    // optional fixed32 timestamp = 2 [(.proto.steam.description) = "Server timestamp of file."];
    if (has_timestamp()) {
      total_size += 1 + 4;
    }

    // optional bool use_https = 5 [(.proto.steam.description) = "If true, use https, otherwise use http."];
    if (has_use_https()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCloud_BeginHTTPUpload_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CCloud_BeginHTTPUpload_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CCloud_BeginHTTPUpload_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CCloud_BeginHTTPUpload_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CCloud_BeginHTTPUpload_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CCloud_BeginHTTPUpload_Response)
    MergeFrom(*source);
  }
}

void CCloud_BeginHTTPUpload_Response::MergeFrom(const CCloud_BeginHTTPUpload_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CCloud_BeginHTTPUpload_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  request_headers_.MergeFrom(from.request_headers_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url_host();
      url_host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_host_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_url_path();
      url_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_path_);
    }
    if (cached_has_bits & 0x00000004u) {
      ugcid_ = from.ugcid_;
    }
    if (cached_has_bits & 0x00000008u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000010u) {
      use_https_ = from.use_https_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CCloud_BeginHTTPUpload_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CCloud_BeginHTTPUpload_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCloud_BeginHTTPUpload_Response::CopyFrom(const CCloud_BeginHTTPUpload_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CCloud_BeginHTTPUpload_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_BeginHTTPUpload_Response::IsInitialized() const {
  return true;
}

void CCloud_BeginHTTPUpload_Response::Swap(CCloud_BeginHTTPUpload_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCloud_BeginHTTPUpload_Response::InternalSwap(CCloud_BeginHTTPUpload_Response* other) {
  request_headers_.InternalSwap(&other->request_headers_);
  url_host_.Swap(&other->url_host_);
  url_path_.Swap(&other->url_path_);
  std::swap(ugcid_, other->ugcid_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(use_https_, other->use_https_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CCloud_BeginHTTPUpload_Response::GetMetadata() const {
  protobuf_steammessages_5fcloud_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fcloud_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CCloud_BeginHTTPUpload_Response

// optional fixed64 ugcid = 1 [(.proto.steam.description) = "UGC ID of the uploaded file."];
bool CCloud_BeginHTTPUpload_Response::has_ugcid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CCloud_BeginHTTPUpload_Response::set_has_ugcid() {
  _has_bits_[0] |= 0x00000004u;
}
void CCloud_BeginHTTPUpload_Response::clear_has_ugcid() {
  _has_bits_[0] &= ~0x00000004u;
}
void CCloud_BeginHTTPUpload_Response::clear_ugcid() {
  ugcid_ = GOOGLE_ULONGLONG(0);
  clear_has_ugcid();
}
::google::protobuf::uint64 CCloud_BeginHTTPUpload_Response::ugcid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_BeginHTTPUpload_Response.ugcid)
  return ugcid_;
}
void CCloud_BeginHTTPUpload_Response::set_ugcid(::google::protobuf::uint64 value) {
  set_has_ugcid();
  ugcid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_BeginHTTPUpload_Response.ugcid)
}

// optional fixed32 timestamp = 2 [(.proto.steam.description) = "Server timestamp of file."];
bool CCloud_BeginHTTPUpload_Response::has_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CCloud_BeginHTTPUpload_Response::set_has_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
void CCloud_BeginHTTPUpload_Response::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
void CCloud_BeginHTTPUpload_Response::clear_timestamp() {
  timestamp_ = 0u;
  clear_has_timestamp();
}
::google::protobuf::uint32 CCloud_BeginHTTPUpload_Response::timestamp() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_BeginHTTPUpload_Response.timestamp)
  return timestamp_;
}
void CCloud_BeginHTTPUpload_Response::set_timestamp(::google::protobuf::uint32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_BeginHTTPUpload_Response.timestamp)
}

// optional string url_host = 3 [(.proto.steam.description) = "Host name of server to which file should be uploaded via HTTP PUT."];
bool CCloud_BeginHTTPUpload_Response::has_url_host() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CCloud_BeginHTTPUpload_Response::set_has_url_host() {
  _has_bits_[0] |= 0x00000001u;
}
void CCloud_BeginHTTPUpload_Response::clear_has_url_host() {
  _has_bits_[0] &= ~0x00000001u;
}
void CCloud_BeginHTTPUpload_Response::clear_url_host() {
  url_host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url_host();
}
const ::std::string& CCloud_BeginHTTPUpload_Response::url_host() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_BeginHTTPUpload_Response.url_host)
  return url_host_.GetNoArena();
}
void CCloud_BeginHTTPUpload_Response::set_url_host(const ::std::string& value) {
  set_has_url_host();
  url_host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_BeginHTTPUpload_Response.url_host)
}
#if LANG_CXX11
void CCloud_BeginHTTPUpload_Response::set_url_host(::std::string&& value) {
  set_has_url_host();
  url_host_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CCloud_BeginHTTPUpload_Response.url_host)
}
#endif
void CCloud_BeginHTTPUpload_Response::set_url_host(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url_host();
  url_host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CCloud_BeginHTTPUpload_Response.url_host)
}
void CCloud_BeginHTTPUpload_Response::set_url_host(const char* value, size_t size) {
  set_has_url_host();
  url_host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CCloud_BeginHTTPUpload_Response.url_host)
}
::std::string* CCloud_BeginHTTPUpload_Response::mutable_url_host() {
  set_has_url_host();
  // @@protoc_insertion_point(field_mutable:proto.steam.CCloud_BeginHTTPUpload_Response.url_host)
  return url_host_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CCloud_BeginHTTPUpload_Response::release_url_host() {
  // @@protoc_insertion_point(field_release:proto.steam.CCloud_BeginHTTPUpload_Response.url_host)
  clear_has_url_host();
  return url_host_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CCloud_BeginHTTPUpload_Response::set_allocated_url_host(::std::string* url_host) {
  if (url_host != NULL) {
    set_has_url_host();
  } else {
    clear_has_url_host();
  }
  url_host_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url_host);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CCloud_BeginHTTPUpload_Response.url_host)
}

// optional string url_path = 4 [(.proto.steam.description) = "Relative path on server to which file should be uploaded."];
bool CCloud_BeginHTTPUpload_Response::has_url_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CCloud_BeginHTTPUpload_Response::set_has_url_path() {
  _has_bits_[0] |= 0x00000002u;
}
void CCloud_BeginHTTPUpload_Response::clear_has_url_path() {
  _has_bits_[0] &= ~0x00000002u;
}
void CCloud_BeginHTTPUpload_Response::clear_url_path() {
  url_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url_path();
}
const ::std::string& CCloud_BeginHTTPUpload_Response::url_path() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_BeginHTTPUpload_Response.url_path)
  return url_path_.GetNoArena();
}
void CCloud_BeginHTTPUpload_Response::set_url_path(const ::std::string& value) {
  set_has_url_path();
  url_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_BeginHTTPUpload_Response.url_path)
}
#if LANG_CXX11
void CCloud_BeginHTTPUpload_Response::set_url_path(::std::string&& value) {
  set_has_url_path();
  url_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CCloud_BeginHTTPUpload_Response.url_path)
}
#endif
void CCloud_BeginHTTPUpload_Response::set_url_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url_path();
  url_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CCloud_BeginHTTPUpload_Response.url_path)
}
void CCloud_BeginHTTPUpload_Response::set_url_path(const char* value, size_t size) {
  set_has_url_path();
  url_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CCloud_BeginHTTPUpload_Response.url_path)
}
::std::string* CCloud_BeginHTTPUpload_Response::mutable_url_path() {
  set_has_url_path();
  // @@protoc_insertion_point(field_mutable:proto.steam.CCloud_BeginHTTPUpload_Response.url_path)
  return url_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CCloud_BeginHTTPUpload_Response::release_url_path() {
  // @@protoc_insertion_point(field_release:proto.steam.CCloud_BeginHTTPUpload_Response.url_path)
  clear_has_url_path();
  return url_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CCloud_BeginHTTPUpload_Response::set_allocated_url_path(::std::string* url_path) {
  if (url_path != NULL) {
    set_has_url_path();
  } else {
    clear_has_url_path();
  }
  url_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url_path);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CCloud_BeginHTTPUpload_Response.url_path)
}

// optional bool use_https = 5 [(.proto.steam.description) = "If true, use https, otherwise use http."];
bool CCloud_BeginHTTPUpload_Response::has_use_https() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CCloud_BeginHTTPUpload_Response::set_has_use_https() {
  _has_bits_[0] |= 0x00000010u;
}
void CCloud_BeginHTTPUpload_Response::clear_has_use_https() {
  _has_bits_[0] &= ~0x00000010u;
}
void CCloud_BeginHTTPUpload_Response::clear_use_https() {
  use_https_ = false;
  clear_has_use_https();
}
bool CCloud_BeginHTTPUpload_Response::use_https() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_BeginHTTPUpload_Response.use_https)
  return use_https_;
}
void CCloud_BeginHTTPUpload_Response::set_use_https(bool value) {
  set_has_use_https();
  use_https_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_BeginHTTPUpload_Response.use_https)
}

// repeated .proto.steam.CCloud_BeginHTTPUpload_Response.HTTPHeaders request_headers = 6 [(.proto.steam.description) = "Name-value pairs to be sent in HTTP PUT request."];
int CCloud_BeginHTTPUpload_Response::request_headers_size() const {
  return request_headers_.size();
}
void CCloud_BeginHTTPUpload_Response::clear_request_headers() {
  request_headers_.Clear();
}
const ::proto::steam::CCloud_BeginHTTPUpload_Response_HTTPHeaders& CCloud_BeginHTTPUpload_Response::request_headers(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_BeginHTTPUpload_Response.request_headers)
  return request_headers_.Get(index);
}
::proto::steam::CCloud_BeginHTTPUpload_Response_HTTPHeaders* CCloud_BeginHTTPUpload_Response::mutable_request_headers(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CCloud_BeginHTTPUpload_Response.request_headers)
  return request_headers_.Mutable(index);
}
::proto::steam::CCloud_BeginHTTPUpload_Response_HTTPHeaders* CCloud_BeginHTTPUpload_Response::add_request_headers() {
  // @@protoc_insertion_point(field_add:proto.steam.CCloud_BeginHTTPUpload_Response.request_headers)
  return request_headers_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::CCloud_BeginHTTPUpload_Response_HTTPHeaders >*
CCloud_BeginHTTPUpload_Response::mutable_request_headers() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CCloud_BeginHTTPUpload_Response.request_headers)
  return &request_headers_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::CCloud_BeginHTTPUpload_Response_HTTPHeaders >&
CCloud_BeginHTTPUpload_Response::request_headers() const {
  // @@protoc_insertion_point(field_list:proto.steam.CCloud_BeginHTTPUpload_Response.request_headers)
  return request_headers_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCloud_CommitHTTPUpload_Request::kTransferSucceededFieldNumber;
const int CCloud_CommitHTTPUpload_Request::kAppidFieldNumber;
const int CCloud_CommitHTTPUpload_Request::kFileShaFieldNumber;
const int CCloud_CommitHTTPUpload_Request::kFilenameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCloud_CommitHTTPUpload_Request::CCloud_CommitHTTPUpload_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fcloud_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CCloud_CommitHTTPUpload_Request)
}
CCloud_CommitHTTPUpload_Request::CCloud_CommitHTTPUpload_Request(const CCloud_CommitHTTPUpload_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_sha_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_file_sha()) {
    file_sha_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_sha_);
  }
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_filename()) {
    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  ::memcpy(&transfer_succeeded_, &from.transfer_succeeded_,
    reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&transfer_succeeded_) + sizeof(appid_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CCloud_CommitHTTPUpload_Request)
}

void CCloud_CommitHTTPUpload_Request::SharedCtor() {
  _cached_size_ = 0;
  file_sha_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&transfer_succeeded_, 0, reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&transfer_succeeded_) + sizeof(appid_));
}

CCloud_CommitHTTPUpload_Request::~CCloud_CommitHTTPUpload_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CCloud_CommitHTTPUpload_Request)
  SharedDtor();
}

void CCloud_CommitHTTPUpload_Request::SharedDtor() {
  file_sha_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CCloud_CommitHTTPUpload_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCloud_CommitHTTPUpload_Request::descriptor() {
  protobuf_steammessages_5fcloud_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fcloud_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CCloud_CommitHTTPUpload_Request& CCloud_CommitHTTPUpload_Request::default_instance() {
  protobuf_steammessages_5fcloud_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CCloud_CommitHTTPUpload_Request* CCloud_CommitHTTPUpload_Request::New(::google::protobuf::Arena* arena) const {
  CCloud_CommitHTTPUpload_Request* n = new CCloud_CommitHTTPUpload_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CCloud_CommitHTTPUpload_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CCloud_CommitHTTPUpload_Request)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_file_sha()) {
      GOOGLE_DCHECK(!file_sha_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*file_sha_.UnsafeRawStringPointer())->clear();
    }
    if (has_filename()) {
      GOOGLE_DCHECK(!filename_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*filename_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&transfer_succeeded_, 0, reinterpret_cast<char*>(&appid_) -
      reinterpret_cast<char*>(&transfer_succeeded_) + sizeof(appid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CCloud_CommitHTTPUpload_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CCloud_CommitHTTPUpload_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool transfer_succeeded = 1 [(.proto.steam.description) = "True if the HTTP PUT to the upload URL succeeded (URL provided in response to Cloud.BeginHTTPUpload), false if a failure occurred."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_transfer_succeeded();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &transfer_succeeded_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 appid = 2 [(.proto.steam.description) = "App ID for which the file is being uploaded. Must match the app ID provided to Cloud.BeginHTTPUpload."];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string file_sha = 3 [(.proto.steam.description) = "Hex string (40 digits) representing the SHA1 digest of the file. Must match the SHA1 digest provided to Cloud.BeginHTTPUpload."];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_sha()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file_sha().data(), this->file_sha().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CCloud_CommitHTTPUpload_Request.file_sha");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string filename = 4 [(.proto.steam.description) = "Filename as specified in the Cloud.BeginHTTPUpload request."];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CCloud_CommitHTTPUpload_Request.filename");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CCloud_CommitHTTPUpload_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CCloud_CommitHTTPUpload_Request)
  return false;
#undef DO_
}

void CCloud_CommitHTTPUpload_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CCloud_CommitHTTPUpload_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool transfer_succeeded = 1 [(.proto.steam.description) = "True if the HTTP PUT to the upload URL succeeded (URL provided in response to Cloud.BeginHTTPUpload), false if a failure occurred."];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->transfer_succeeded(), output);
  }

  // optional uint32 appid = 2 [(.proto.steam.description) = "App ID for which the file is being uploaded. Must match the app ID provided to Cloud.BeginHTTPUpload."];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->appid(), output);
  }

  // optional string file_sha = 3 [(.proto.steam.description) = "Hex string (40 digits) representing the SHA1 digest of the file. Must match the SHA1 digest provided to Cloud.BeginHTTPUpload."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_sha().data(), this->file_sha().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCloud_CommitHTTPUpload_Request.file_sha");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->file_sha(), output);
  }

  // optional string filename = 4 [(.proto.steam.description) = "Filename as specified in the Cloud.BeginHTTPUpload request."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCloud_CommitHTTPUpload_Request.filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->filename(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CCloud_CommitHTTPUpload_Request)
}

::google::protobuf::uint8* CCloud_CommitHTTPUpload_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CCloud_CommitHTTPUpload_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool transfer_succeeded = 1 [(.proto.steam.description) = "True if the HTTP PUT to the upload URL succeeded (URL provided in response to Cloud.BeginHTTPUpload), false if a failure occurred."];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->transfer_succeeded(), target);
  }

  // optional uint32 appid = 2 [(.proto.steam.description) = "App ID for which the file is being uploaded. Must match the app ID provided to Cloud.BeginHTTPUpload."];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->appid(), target);
  }

  // optional string file_sha = 3 [(.proto.steam.description) = "Hex string (40 digits) representing the SHA1 digest of the file. Must match the SHA1 digest provided to Cloud.BeginHTTPUpload."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_sha().data(), this->file_sha().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCloud_CommitHTTPUpload_Request.file_sha");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->file_sha(), target);
  }

  // optional string filename = 4 [(.proto.steam.description) = "Filename as specified in the Cloud.BeginHTTPUpload request."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCloud_CommitHTTPUpload_Request.filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->filename(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CCloud_CommitHTTPUpload_Request)
  return target;
}

size_t CCloud_CommitHTTPUpload_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CCloud_CommitHTTPUpload_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string file_sha = 3 [(.proto.steam.description) = "Hex string (40 digits) representing the SHA1 digest of the file. Must match the SHA1 digest provided to Cloud.BeginHTTPUpload."];
    if (has_file_sha()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_sha());
    }

    // optional string filename = 4 [(.proto.steam.description) = "Filename as specified in the Cloud.BeginHTTPUpload request."];
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional bool transfer_succeeded = 1 [(.proto.steam.description) = "True if the HTTP PUT to the upload URL succeeded (URL provided in response to Cloud.BeginHTTPUpload), false if a failure occurred."];
    if (has_transfer_succeeded()) {
      total_size += 1 + 1;
    }

    // optional uint32 appid = 2 [(.proto.steam.description) = "App ID for which the file is being uploaded. Must match the app ID provided to Cloud.BeginHTTPUpload."];
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCloud_CommitHTTPUpload_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CCloud_CommitHTTPUpload_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CCloud_CommitHTTPUpload_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CCloud_CommitHTTPUpload_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CCloud_CommitHTTPUpload_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CCloud_CommitHTTPUpload_Request)
    MergeFrom(*source);
  }
}

void CCloud_CommitHTTPUpload_Request::MergeFrom(const CCloud_CommitHTTPUpload_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CCloud_CommitHTTPUpload_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_file_sha();
      file_sha_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_sha_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_filename();
      filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
    }
    if (cached_has_bits & 0x00000004u) {
      transfer_succeeded_ = from.transfer_succeeded_;
    }
    if (cached_has_bits & 0x00000008u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CCloud_CommitHTTPUpload_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CCloud_CommitHTTPUpload_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCloud_CommitHTTPUpload_Request::CopyFrom(const CCloud_CommitHTTPUpload_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CCloud_CommitHTTPUpload_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_CommitHTTPUpload_Request::IsInitialized() const {
  return true;
}

void CCloud_CommitHTTPUpload_Request::Swap(CCloud_CommitHTTPUpload_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCloud_CommitHTTPUpload_Request::InternalSwap(CCloud_CommitHTTPUpload_Request* other) {
  file_sha_.Swap(&other->file_sha_);
  filename_.Swap(&other->filename_);
  std::swap(transfer_succeeded_, other->transfer_succeeded_);
  std::swap(appid_, other->appid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CCloud_CommitHTTPUpload_Request::GetMetadata() const {
  protobuf_steammessages_5fcloud_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fcloud_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CCloud_CommitHTTPUpload_Request

// optional bool transfer_succeeded = 1 [(.proto.steam.description) = "True if the HTTP PUT to the upload URL succeeded (URL provided in response to Cloud.BeginHTTPUpload), false if a failure occurred."];
bool CCloud_CommitHTTPUpload_Request::has_transfer_succeeded() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CCloud_CommitHTTPUpload_Request::set_has_transfer_succeeded() {
  _has_bits_[0] |= 0x00000004u;
}
void CCloud_CommitHTTPUpload_Request::clear_has_transfer_succeeded() {
  _has_bits_[0] &= ~0x00000004u;
}
void CCloud_CommitHTTPUpload_Request::clear_transfer_succeeded() {
  transfer_succeeded_ = false;
  clear_has_transfer_succeeded();
}
bool CCloud_CommitHTTPUpload_Request::transfer_succeeded() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_CommitHTTPUpload_Request.transfer_succeeded)
  return transfer_succeeded_;
}
void CCloud_CommitHTTPUpload_Request::set_transfer_succeeded(bool value) {
  set_has_transfer_succeeded();
  transfer_succeeded_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_CommitHTTPUpload_Request.transfer_succeeded)
}

// optional uint32 appid = 2 [(.proto.steam.description) = "App ID for which the file is being uploaded. Must match the app ID provided to Cloud.BeginHTTPUpload."];
bool CCloud_CommitHTTPUpload_Request::has_appid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CCloud_CommitHTTPUpload_Request::set_has_appid() {
  _has_bits_[0] |= 0x00000008u;
}
void CCloud_CommitHTTPUpload_Request::clear_has_appid() {
  _has_bits_[0] &= ~0x00000008u;
}
void CCloud_CommitHTTPUpload_Request::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
::google::protobuf::uint32 CCloud_CommitHTTPUpload_Request::appid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_CommitHTTPUpload_Request.appid)
  return appid_;
}
void CCloud_CommitHTTPUpload_Request::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_CommitHTTPUpload_Request.appid)
}

// optional string file_sha = 3 [(.proto.steam.description) = "Hex string (40 digits) representing the SHA1 digest of the file. Must match the SHA1 digest provided to Cloud.BeginHTTPUpload."];
bool CCloud_CommitHTTPUpload_Request::has_file_sha() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CCloud_CommitHTTPUpload_Request::set_has_file_sha() {
  _has_bits_[0] |= 0x00000001u;
}
void CCloud_CommitHTTPUpload_Request::clear_has_file_sha() {
  _has_bits_[0] &= ~0x00000001u;
}
void CCloud_CommitHTTPUpload_Request::clear_file_sha() {
  file_sha_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_sha();
}
const ::std::string& CCloud_CommitHTTPUpload_Request::file_sha() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_CommitHTTPUpload_Request.file_sha)
  return file_sha_.GetNoArena();
}
void CCloud_CommitHTTPUpload_Request::set_file_sha(const ::std::string& value) {
  set_has_file_sha();
  file_sha_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_CommitHTTPUpload_Request.file_sha)
}
#if LANG_CXX11
void CCloud_CommitHTTPUpload_Request::set_file_sha(::std::string&& value) {
  set_has_file_sha();
  file_sha_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CCloud_CommitHTTPUpload_Request.file_sha)
}
#endif
void CCloud_CommitHTTPUpload_Request::set_file_sha(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_file_sha();
  file_sha_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CCloud_CommitHTTPUpload_Request.file_sha)
}
void CCloud_CommitHTTPUpload_Request::set_file_sha(const char* value, size_t size) {
  set_has_file_sha();
  file_sha_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CCloud_CommitHTTPUpload_Request.file_sha)
}
::std::string* CCloud_CommitHTTPUpload_Request::mutable_file_sha() {
  set_has_file_sha();
  // @@protoc_insertion_point(field_mutable:proto.steam.CCloud_CommitHTTPUpload_Request.file_sha)
  return file_sha_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CCloud_CommitHTTPUpload_Request::release_file_sha() {
  // @@protoc_insertion_point(field_release:proto.steam.CCloud_CommitHTTPUpload_Request.file_sha)
  clear_has_file_sha();
  return file_sha_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CCloud_CommitHTTPUpload_Request::set_allocated_file_sha(::std::string* file_sha) {
  if (file_sha != NULL) {
    set_has_file_sha();
  } else {
    clear_has_file_sha();
  }
  file_sha_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_sha);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CCloud_CommitHTTPUpload_Request.file_sha)
}

// optional string filename = 4 [(.proto.steam.description) = "Filename as specified in the Cloud.BeginHTTPUpload request."];
bool CCloud_CommitHTTPUpload_Request::has_filename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CCloud_CommitHTTPUpload_Request::set_has_filename() {
  _has_bits_[0] |= 0x00000002u;
}
void CCloud_CommitHTTPUpload_Request::clear_has_filename() {
  _has_bits_[0] &= ~0x00000002u;
}
void CCloud_CommitHTTPUpload_Request::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_filename();
}
const ::std::string& CCloud_CommitHTTPUpload_Request::filename() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_CommitHTTPUpload_Request.filename)
  return filename_.GetNoArena();
}
void CCloud_CommitHTTPUpload_Request::set_filename(const ::std::string& value) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_CommitHTTPUpload_Request.filename)
}
#if LANG_CXX11
void CCloud_CommitHTTPUpload_Request::set_filename(::std::string&& value) {
  set_has_filename();
  filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CCloud_CommitHTTPUpload_Request.filename)
}
#endif
void CCloud_CommitHTTPUpload_Request::set_filename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CCloud_CommitHTTPUpload_Request.filename)
}
void CCloud_CommitHTTPUpload_Request::set_filename(const char* value, size_t size) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CCloud_CommitHTTPUpload_Request.filename)
}
::std::string* CCloud_CommitHTTPUpload_Request::mutable_filename() {
  set_has_filename();
  // @@protoc_insertion_point(field_mutable:proto.steam.CCloud_CommitHTTPUpload_Request.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CCloud_CommitHTTPUpload_Request::release_filename() {
  // @@protoc_insertion_point(field_release:proto.steam.CCloud_CommitHTTPUpload_Request.filename)
  clear_has_filename();
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CCloud_CommitHTTPUpload_Request::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    set_has_filename();
  } else {
    clear_has_filename();
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CCloud_CommitHTTPUpload_Request.filename)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCloud_CommitHTTPUpload_Response::kFileCommittedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCloud_CommitHTTPUpload_Response::CCloud_CommitHTTPUpload_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fcloud_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CCloud_CommitHTTPUpload_Response)
}
CCloud_CommitHTTPUpload_Response::CCloud_CommitHTTPUpload_Response(const CCloud_CommitHTTPUpload_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_committed_ = from.file_committed_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CCloud_CommitHTTPUpload_Response)
}

void CCloud_CommitHTTPUpload_Response::SharedCtor() {
  _cached_size_ = 0;
  file_committed_ = false;
}

CCloud_CommitHTTPUpload_Response::~CCloud_CommitHTTPUpload_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CCloud_CommitHTTPUpload_Response)
  SharedDtor();
}

void CCloud_CommitHTTPUpload_Response::SharedDtor() {
}

void CCloud_CommitHTTPUpload_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCloud_CommitHTTPUpload_Response::descriptor() {
  protobuf_steammessages_5fcloud_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fcloud_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CCloud_CommitHTTPUpload_Response& CCloud_CommitHTTPUpload_Response::default_instance() {
  protobuf_steammessages_5fcloud_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CCloud_CommitHTTPUpload_Response* CCloud_CommitHTTPUpload_Response::New(::google::protobuf::Arena* arena) const {
  CCloud_CommitHTTPUpload_Response* n = new CCloud_CommitHTTPUpload_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CCloud_CommitHTTPUpload_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CCloud_CommitHTTPUpload_Response)
  file_committed_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CCloud_CommitHTTPUpload_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CCloud_CommitHTTPUpload_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool file_committed = 1 [(.proto.steam.description) = "True if the file was successfully committed, false otherwise."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_file_committed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &file_committed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CCloud_CommitHTTPUpload_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CCloud_CommitHTTPUpload_Response)
  return false;
#undef DO_
}

void CCloud_CommitHTTPUpload_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CCloud_CommitHTTPUpload_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool file_committed = 1 [(.proto.steam.description) = "True if the file was successfully committed, false otherwise."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->file_committed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CCloud_CommitHTTPUpload_Response)
}

::google::protobuf::uint8* CCloud_CommitHTTPUpload_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CCloud_CommitHTTPUpload_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool file_committed = 1 [(.proto.steam.description) = "True if the file was successfully committed, false otherwise."];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->file_committed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CCloud_CommitHTTPUpload_Response)
  return target;
}

size_t CCloud_CommitHTTPUpload_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CCloud_CommitHTTPUpload_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional bool file_committed = 1 [(.proto.steam.description) = "True if the file was successfully committed, false otherwise."];
  if (has_file_committed()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCloud_CommitHTTPUpload_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CCloud_CommitHTTPUpload_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CCloud_CommitHTTPUpload_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CCloud_CommitHTTPUpload_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CCloud_CommitHTTPUpload_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CCloud_CommitHTTPUpload_Response)
    MergeFrom(*source);
  }
}

void CCloud_CommitHTTPUpload_Response::MergeFrom(const CCloud_CommitHTTPUpload_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CCloud_CommitHTTPUpload_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_file_committed()) {
    set_file_committed(from.file_committed());
  }
}

void CCloud_CommitHTTPUpload_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CCloud_CommitHTTPUpload_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCloud_CommitHTTPUpload_Response::CopyFrom(const CCloud_CommitHTTPUpload_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CCloud_CommitHTTPUpload_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_CommitHTTPUpload_Response::IsInitialized() const {
  return true;
}

void CCloud_CommitHTTPUpload_Response::Swap(CCloud_CommitHTTPUpload_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCloud_CommitHTTPUpload_Response::InternalSwap(CCloud_CommitHTTPUpload_Response* other) {
  std::swap(file_committed_, other->file_committed_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CCloud_CommitHTTPUpload_Response::GetMetadata() const {
  protobuf_steammessages_5fcloud_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fcloud_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CCloud_CommitHTTPUpload_Response

// optional bool file_committed = 1 [(.proto.steam.description) = "True if the file was successfully committed, false otherwise."];
bool CCloud_CommitHTTPUpload_Response::has_file_committed() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CCloud_CommitHTTPUpload_Response::set_has_file_committed() {
  _has_bits_[0] |= 0x00000001u;
}
void CCloud_CommitHTTPUpload_Response::clear_has_file_committed() {
  _has_bits_[0] &= ~0x00000001u;
}
void CCloud_CommitHTTPUpload_Response::clear_file_committed() {
  file_committed_ = false;
  clear_has_file_committed();
}
bool CCloud_CommitHTTPUpload_Response::file_committed() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_CommitHTTPUpload_Response.file_committed)
  return file_committed_;
}
void CCloud_CommitHTTPUpload_Response::set_file_committed(bool value) {
  set_has_file_committed();
  file_committed_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_CommitHTTPUpload_Response.file_committed)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCloud_GetFileDetails_Request::kUgcidFieldNumber;
const int CCloud_GetFileDetails_Request::kAppidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCloud_GetFileDetails_Request::CCloud_GetFileDetails_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fcloud_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CCloud_GetFileDetails_Request)
}
CCloud_GetFileDetails_Request::CCloud_GetFileDetails_Request(const CCloud_GetFileDetails_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ugcid_, &from.ugcid_,
    reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&ugcid_) + sizeof(appid_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CCloud_GetFileDetails_Request)
}

void CCloud_GetFileDetails_Request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&ugcid_, 0, reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&ugcid_) + sizeof(appid_));
}

CCloud_GetFileDetails_Request::~CCloud_GetFileDetails_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CCloud_GetFileDetails_Request)
  SharedDtor();
}

void CCloud_GetFileDetails_Request::SharedDtor() {
}

void CCloud_GetFileDetails_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCloud_GetFileDetails_Request::descriptor() {
  protobuf_steammessages_5fcloud_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fcloud_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CCloud_GetFileDetails_Request& CCloud_GetFileDetails_Request::default_instance() {
  protobuf_steammessages_5fcloud_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CCloud_GetFileDetails_Request* CCloud_GetFileDetails_Request::New(::google::protobuf::Arena* arena) const {
  CCloud_GetFileDetails_Request* n = new CCloud_GetFileDetails_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CCloud_GetFileDetails_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CCloud_GetFileDetails_Request)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&ugcid_, 0, reinterpret_cast<char*>(&appid_) -
      reinterpret_cast<char*>(&ugcid_) + sizeof(appid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CCloud_GetFileDetails_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CCloud_GetFileDetails_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 ugcid = 1 [(.proto.steam.description) = "ID of the Cloud file to get details for."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_ugcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ugcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 appid = 2 [(.proto.steam.description) = "App ID the file belongs to."];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CCloud_GetFileDetails_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CCloud_GetFileDetails_Request)
  return false;
#undef DO_
}

void CCloud_GetFileDetails_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CCloud_GetFileDetails_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 ugcid = 1 [(.proto.steam.description) = "ID of the Cloud file to get details for."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->ugcid(), output);
  }

  // optional uint32 appid = 2 [(.proto.steam.description) = "App ID the file belongs to."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->appid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CCloud_GetFileDetails_Request)
}

::google::protobuf::uint8* CCloud_GetFileDetails_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CCloud_GetFileDetails_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 ugcid = 1 [(.proto.steam.description) = "ID of the Cloud file to get details for."];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->ugcid(), target);
  }

  // optional uint32 appid = 2 [(.proto.steam.description) = "App ID the file belongs to."];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->appid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CCloud_GetFileDetails_Request)
  return target;
}

size_t CCloud_GetFileDetails_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CCloud_GetFileDetails_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 ugcid = 1 [(.proto.steam.description) = "ID of the Cloud file to get details for."];
    if (has_ugcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ugcid());
    }

    // optional uint32 appid = 2 [(.proto.steam.description) = "App ID the file belongs to."];
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCloud_GetFileDetails_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CCloud_GetFileDetails_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CCloud_GetFileDetails_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CCloud_GetFileDetails_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CCloud_GetFileDetails_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CCloud_GetFileDetails_Request)
    MergeFrom(*source);
  }
}

void CCloud_GetFileDetails_Request::MergeFrom(const CCloud_GetFileDetails_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CCloud_GetFileDetails_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      ugcid_ = from.ugcid_;
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CCloud_GetFileDetails_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CCloud_GetFileDetails_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCloud_GetFileDetails_Request::CopyFrom(const CCloud_GetFileDetails_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CCloud_GetFileDetails_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_GetFileDetails_Request::IsInitialized() const {
  return true;
}

void CCloud_GetFileDetails_Request::Swap(CCloud_GetFileDetails_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCloud_GetFileDetails_Request::InternalSwap(CCloud_GetFileDetails_Request* other) {
  std::swap(ugcid_, other->ugcid_);
  std::swap(appid_, other->appid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CCloud_GetFileDetails_Request::GetMetadata() const {
  protobuf_steammessages_5fcloud_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fcloud_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CCloud_GetFileDetails_Request

// optional uint64 ugcid = 1 [(.proto.steam.description) = "ID of the Cloud file to get details for."];
bool CCloud_GetFileDetails_Request::has_ugcid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CCloud_GetFileDetails_Request::set_has_ugcid() {
  _has_bits_[0] |= 0x00000001u;
}
void CCloud_GetFileDetails_Request::clear_has_ugcid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CCloud_GetFileDetails_Request::clear_ugcid() {
  ugcid_ = GOOGLE_ULONGLONG(0);
  clear_has_ugcid();
}
::google::protobuf::uint64 CCloud_GetFileDetails_Request::ugcid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_GetFileDetails_Request.ugcid)
  return ugcid_;
}
void CCloud_GetFileDetails_Request::set_ugcid(::google::protobuf::uint64 value) {
  set_has_ugcid();
  ugcid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_GetFileDetails_Request.ugcid)
}

// optional uint32 appid = 2 [(.proto.steam.description) = "App ID the file belongs to."];
bool CCloud_GetFileDetails_Request::has_appid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CCloud_GetFileDetails_Request::set_has_appid() {
  _has_bits_[0] |= 0x00000002u;
}
void CCloud_GetFileDetails_Request::clear_has_appid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CCloud_GetFileDetails_Request::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
::google::protobuf::uint32 CCloud_GetFileDetails_Request::appid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_GetFileDetails_Request.appid)
  return appid_;
}
void CCloud_GetFileDetails_Request::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_GetFileDetails_Request.appid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCloud_UserFile::kAppidFieldNumber;
const int CCloud_UserFile::kUgcidFieldNumber;
const int CCloud_UserFile::kFilenameFieldNumber;
const int CCloud_UserFile::kTimestampFieldNumber;
const int CCloud_UserFile::kFileSizeFieldNumber;
const int CCloud_UserFile::kUrlFieldNumber;
const int CCloud_UserFile::kSteamidCreatorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCloud_UserFile::CCloud_UserFile()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fcloud_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CCloud_UserFile)
}
CCloud_UserFile::CCloud_UserFile(const CCloud_UserFile& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_filename()) {
    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  ::memcpy(&ugcid_, &from.ugcid_,
    reinterpret_cast<char*>(&steamid_creator_) -
    reinterpret_cast<char*>(&ugcid_) + sizeof(steamid_creator_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CCloud_UserFile)
}

void CCloud_UserFile::SharedCtor() {
  _cached_size_ = 0;
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ugcid_, 0, reinterpret_cast<char*>(&steamid_creator_) -
    reinterpret_cast<char*>(&ugcid_) + sizeof(steamid_creator_));
}

CCloud_UserFile::~CCloud_UserFile() {
  // @@protoc_insertion_point(destructor:proto.steam.CCloud_UserFile)
  SharedDtor();
}

void CCloud_UserFile::SharedDtor() {
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CCloud_UserFile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCloud_UserFile::descriptor() {
  protobuf_steammessages_5fcloud_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fcloud_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CCloud_UserFile& CCloud_UserFile::default_instance() {
  protobuf_steammessages_5fcloud_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CCloud_UserFile* CCloud_UserFile::New(::google::protobuf::Arena* arena) const {
  CCloud_UserFile* n = new CCloud_UserFile;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CCloud_UserFile::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CCloud_UserFile)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_filename()) {
      GOOGLE_DCHECK(!filename_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*filename_.UnsafeRawStringPointer())->clear();
    }
    if (has_url()) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 124u) {
    ::memset(&ugcid_, 0, reinterpret_cast<char*>(&steamid_creator_) -
      reinterpret_cast<char*>(&ugcid_) + sizeof(steamid_creator_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CCloud_UserFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CCloud_UserFile)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 ugcid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_ugcid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ugcid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string filename = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CCloud_UserFile.filename");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 timestamp = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 file_size = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_file_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &file_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string url = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CCloud_UserFile.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steamid_creator = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u)) {
          set_has_steamid_creator();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_creator_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CCloud_UserFile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CCloud_UserFile)
  return false;
#undef DO_
}

void CCloud_UserFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CCloud_UserFile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional uint64 ugcid = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->ugcid(), output);
  }

  // optional string filename = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCloud_UserFile.filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->filename(), output);
  }

  // optional uint64 timestamp = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->timestamp(), output);
  }

  // optional uint32 file_size = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->file_size(), output);
  }

  // optional string url = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCloud_UserFile.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->url(), output);
  }

  // optional fixed64 steamid_creator = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(7, this->steamid_creator(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CCloud_UserFile)
}

::google::protobuf::uint8* CCloud_UserFile::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CCloud_UserFile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional uint64 ugcid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->ugcid(), target);
  }

  // optional string filename = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCloud_UserFile.filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->filename(), target);
  }

  // optional uint64 timestamp = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->timestamp(), target);
  }

  // optional uint32 file_size = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->file_size(), target);
  }

  // optional string url = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCloud_UserFile.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->url(), target);
  }

  // optional fixed64 steamid_creator = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(7, this->steamid_creator(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CCloud_UserFile)
  return target;
}

size_t CCloud_UserFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CCloud_UserFile)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional string filename = 3;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional string url = 6;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional uint64 ugcid = 2;
    if (has_ugcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ugcid());
    }

    // optional uint32 appid = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional uint32 file_size = 5;
    if (has_file_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->file_size());
    }

    // optional uint64 timestamp = 4;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

    // optional fixed64 steamid_creator = 7;
    if (has_steamid_creator()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCloud_UserFile::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CCloud_UserFile)
  GOOGLE_DCHECK_NE(&from, this);
  const CCloud_UserFile* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CCloud_UserFile>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CCloud_UserFile)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CCloud_UserFile)
    MergeFrom(*source);
  }
}

void CCloud_UserFile::MergeFrom(const CCloud_UserFile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CCloud_UserFile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_filename();
      filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000004u) {
      ugcid_ = from.ugcid_;
    }
    if (cached_has_bits & 0x00000008u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000010u) {
      file_size_ = from.file_size_;
    }
    if (cached_has_bits & 0x00000020u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000040u) {
      steamid_creator_ = from.steamid_creator_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CCloud_UserFile::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CCloud_UserFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCloud_UserFile::CopyFrom(const CCloud_UserFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CCloud_UserFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_UserFile::IsInitialized() const {
  return true;
}

void CCloud_UserFile::Swap(CCloud_UserFile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCloud_UserFile::InternalSwap(CCloud_UserFile* other) {
  filename_.Swap(&other->filename_);
  url_.Swap(&other->url_);
  std::swap(ugcid_, other->ugcid_);
  std::swap(appid_, other->appid_);
  std::swap(file_size_, other->file_size_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(steamid_creator_, other->steamid_creator_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CCloud_UserFile::GetMetadata() const {
  protobuf_steammessages_5fcloud_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fcloud_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CCloud_UserFile

// optional uint32 appid = 1;
bool CCloud_UserFile::has_appid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CCloud_UserFile::set_has_appid() {
  _has_bits_[0] |= 0x00000008u;
}
void CCloud_UserFile::clear_has_appid() {
  _has_bits_[0] &= ~0x00000008u;
}
void CCloud_UserFile::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
::google::protobuf::uint32 CCloud_UserFile::appid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_UserFile.appid)
  return appid_;
}
void CCloud_UserFile::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_UserFile.appid)
}

// optional uint64 ugcid = 2;
bool CCloud_UserFile::has_ugcid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CCloud_UserFile::set_has_ugcid() {
  _has_bits_[0] |= 0x00000004u;
}
void CCloud_UserFile::clear_has_ugcid() {
  _has_bits_[0] &= ~0x00000004u;
}
void CCloud_UserFile::clear_ugcid() {
  ugcid_ = GOOGLE_ULONGLONG(0);
  clear_has_ugcid();
}
::google::protobuf::uint64 CCloud_UserFile::ugcid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_UserFile.ugcid)
  return ugcid_;
}
void CCloud_UserFile::set_ugcid(::google::protobuf::uint64 value) {
  set_has_ugcid();
  ugcid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_UserFile.ugcid)
}

// optional string filename = 3;
bool CCloud_UserFile::has_filename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CCloud_UserFile::set_has_filename() {
  _has_bits_[0] |= 0x00000001u;
}
void CCloud_UserFile::clear_has_filename() {
  _has_bits_[0] &= ~0x00000001u;
}
void CCloud_UserFile::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_filename();
}
const ::std::string& CCloud_UserFile::filename() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_UserFile.filename)
  return filename_.GetNoArena();
}
void CCloud_UserFile::set_filename(const ::std::string& value) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_UserFile.filename)
}
#if LANG_CXX11
void CCloud_UserFile::set_filename(::std::string&& value) {
  set_has_filename();
  filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CCloud_UserFile.filename)
}
#endif
void CCloud_UserFile::set_filename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CCloud_UserFile.filename)
}
void CCloud_UserFile::set_filename(const char* value, size_t size) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CCloud_UserFile.filename)
}
::std::string* CCloud_UserFile::mutable_filename() {
  set_has_filename();
  // @@protoc_insertion_point(field_mutable:proto.steam.CCloud_UserFile.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CCloud_UserFile::release_filename() {
  // @@protoc_insertion_point(field_release:proto.steam.CCloud_UserFile.filename)
  clear_has_filename();
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CCloud_UserFile::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    set_has_filename();
  } else {
    clear_has_filename();
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CCloud_UserFile.filename)
}

// optional uint64 timestamp = 4;
bool CCloud_UserFile::has_timestamp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CCloud_UserFile::set_has_timestamp() {
  _has_bits_[0] |= 0x00000020u;
}
void CCloud_UserFile::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000020u;
}
void CCloud_UserFile::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
::google::protobuf::uint64 CCloud_UserFile::timestamp() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_UserFile.timestamp)
  return timestamp_;
}
void CCloud_UserFile::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_UserFile.timestamp)
}

// optional uint32 file_size = 5;
bool CCloud_UserFile::has_file_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CCloud_UserFile::set_has_file_size() {
  _has_bits_[0] |= 0x00000010u;
}
void CCloud_UserFile::clear_has_file_size() {
  _has_bits_[0] &= ~0x00000010u;
}
void CCloud_UserFile::clear_file_size() {
  file_size_ = 0u;
  clear_has_file_size();
}
::google::protobuf::uint32 CCloud_UserFile::file_size() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_UserFile.file_size)
  return file_size_;
}
void CCloud_UserFile::set_file_size(::google::protobuf::uint32 value) {
  set_has_file_size();
  file_size_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_UserFile.file_size)
}

// optional string url = 6;
bool CCloud_UserFile::has_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CCloud_UserFile::set_has_url() {
  _has_bits_[0] |= 0x00000002u;
}
void CCloud_UserFile::clear_has_url() {
  _has_bits_[0] &= ~0x00000002u;
}
void CCloud_UserFile::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& CCloud_UserFile::url() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_UserFile.url)
  return url_.GetNoArena();
}
void CCloud_UserFile::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_UserFile.url)
}
#if LANG_CXX11
void CCloud_UserFile::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CCloud_UserFile.url)
}
#endif
void CCloud_UserFile::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CCloud_UserFile.url)
}
void CCloud_UserFile::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CCloud_UserFile.url)
}
::std::string* CCloud_UserFile::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:proto.steam.CCloud_UserFile.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CCloud_UserFile::release_url() {
  // @@protoc_insertion_point(field_release:proto.steam.CCloud_UserFile.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CCloud_UserFile::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CCloud_UserFile.url)
}

// optional fixed64 steamid_creator = 7;
bool CCloud_UserFile::has_steamid_creator() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CCloud_UserFile::set_has_steamid_creator() {
  _has_bits_[0] |= 0x00000040u;
}
void CCloud_UserFile::clear_has_steamid_creator() {
  _has_bits_[0] &= ~0x00000040u;
}
void CCloud_UserFile::clear_steamid_creator() {
  steamid_creator_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid_creator();
}
::google::protobuf::uint64 CCloud_UserFile::steamid_creator() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_UserFile.steamid_creator)
  return steamid_creator_;
}
void CCloud_UserFile::set_steamid_creator(::google::protobuf::uint64 value) {
  set_has_steamid_creator();
  steamid_creator_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_UserFile.steamid_creator)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCloud_GetFileDetails_Response::kDetailsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCloud_GetFileDetails_Response::CCloud_GetFileDetails_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fcloud_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CCloud_GetFileDetails_Response)
}
CCloud_GetFileDetails_Response::CCloud_GetFileDetails_Response(const CCloud_GetFileDetails_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_details()) {
    details_ = new ::proto::steam::CCloud_UserFile(*from.details_);
  } else {
    details_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:proto.steam.CCloud_GetFileDetails_Response)
}

void CCloud_GetFileDetails_Response::SharedCtor() {
  _cached_size_ = 0;
  details_ = NULL;
}

CCloud_GetFileDetails_Response::~CCloud_GetFileDetails_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CCloud_GetFileDetails_Response)
  SharedDtor();
}

void CCloud_GetFileDetails_Response::SharedDtor() {
  if (this != internal_default_instance()) {
    delete details_;
  }
}

void CCloud_GetFileDetails_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCloud_GetFileDetails_Response::descriptor() {
  protobuf_steammessages_5fcloud_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fcloud_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CCloud_GetFileDetails_Response& CCloud_GetFileDetails_Response::default_instance() {
  protobuf_steammessages_5fcloud_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CCloud_GetFileDetails_Response* CCloud_GetFileDetails_Response::New(::google::protobuf::Arena* arena) const {
  CCloud_GetFileDetails_Response* n = new CCloud_GetFileDetails_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CCloud_GetFileDetails_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CCloud_GetFileDetails_Response)
  if (has_details()) {
    GOOGLE_DCHECK(details_ != NULL);
    details_->::proto::steam::CCloud_UserFile::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CCloud_GetFileDetails_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CCloud_GetFileDetails_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.steam.CCloud_UserFile details = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_details()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CCloud_GetFileDetails_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CCloud_GetFileDetails_Response)
  return false;
#undef DO_
}

void CCloud_GetFileDetails_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CCloud_GetFileDetails_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.steam.CCloud_UserFile details = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->details_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CCloud_GetFileDetails_Response)
}

::google::protobuf::uint8* CCloud_GetFileDetails_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CCloud_GetFileDetails_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.steam.CCloud_UserFile details = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->details_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CCloud_GetFileDetails_Response)
  return target;
}

size_t CCloud_GetFileDetails_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CCloud_GetFileDetails_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .proto.steam.CCloud_UserFile details = 1;
  if (has_details()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->details_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCloud_GetFileDetails_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CCloud_GetFileDetails_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CCloud_GetFileDetails_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CCloud_GetFileDetails_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CCloud_GetFileDetails_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CCloud_GetFileDetails_Response)
    MergeFrom(*source);
  }
}

void CCloud_GetFileDetails_Response::MergeFrom(const CCloud_GetFileDetails_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CCloud_GetFileDetails_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_details()) {
    mutable_details()->::proto::steam::CCloud_UserFile::MergeFrom(from.details());
  }
}

void CCloud_GetFileDetails_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CCloud_GetFileDetails_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCloud_GetFileDetails_Response::CopyFrom(const CCloud_GetFileDetails_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CCloud_GetFileDetails_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_GetFileDetails_Response::IsInitialized() const {
  return true;
}

void CCloud_GetFileDetails_Response::Swap(CCloud_GetFileDetails_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCloud_GetFileDetails_Response::InternalSwap(CCloud_GetFileDetails_Response* other) {
  std::swap(details_, other->details_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CCloud_GetFileDetails_Response::GetMetadata() const {
  protobuf_steammessages_5fcloud_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fcloud_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CCloud_GetFileDetails_Response

// optional .proto.steam.CCloud_UserFile details = 1;
bool CCloud_GetFileDetails_Response::has_details() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CCloud_GetFileDetails_Response::set_has_details() {
  _has_bits_[0] |= 0x00000001u;
}
void CCloud_GetFileDetails_Response::clear_has_details() {
  _has_bits_[0] &= ~0x00000001u;
}
void CCloud_GetFileDetails_Response::clear_details() {
  if (details_ != NULL) details_->::proto::steam::CCloud_UserFile::Clear();
  clear_has_details();
}
const ::proto::steam::CCloud_UserFile& CCloud_GetFileDetails_Response::details() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_GetFileDetails_Response.details)
  return details_ != NULL ? *details_
                         : *::proto::steam::CCloud_UserFile::internal_default_instance();
}
::proto::steam::CCloud_UserFile* CCloud_GetFileDetails_Response::mutable_details() {
  set_has_details();
  if (details_ == NULL) {
    details_ = new ::proto::steam::CCloud_UserFile;
  }
  // @@protoc_insertion_point(field_mutable:proto.steam.CCloud_GetFileDetails_Response.details)
  return details_;
}
::proto::steam::CCloud_UserFile* CCloud_GetFileDetails_Response::release_details() {
  // @@protoc_insertion_point(field_release:proto.steam.CCloud_GetFileDetails_Response.details)
  clear_has_details();
  ::proto::steam::CCloud_UserFile* temp = details_;
  details_ = NULL;
  return temp;
}
void CCloud_GetFileDetails_Response::set_allocated_details(::proto::steam::CCloud_UserFile* details) {
  delete details_;
  details_ = details;
  if (details) {
    set_has_details();
  } else {
    clear_has_details();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CCloud_GetFileDetails_Response.details)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCloud_EnumerateUserFiles_Request::kAppidFieldNumber;
const int CCloud_EnumerateUserFiles_Request::kExtendedDetailsFieldNumber;
const int CCloud_EnumerateUserFiles_Request::kCountFieldNumber;
const int CCloud_EnumerateUserFiles_Request::kStartIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCloud_EnumerateUserFiles_Request::CCloud_EnumerateUserFiles_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fcloud_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CCloud_EnumerateUserFiles_Request)
}
CCloud_EnumerateUserFiles_Request::CCloud_EnumerateUserFiles_Request(const CCloud_EnumerateUserFiles_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&appid_, &from.appid_,
    reinterpret_cast<char*>(&start_index_) -
    reinterpret_cast<char*>(&appid_) + sizeof(start_index_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CCloud_EnumerateUserFiles_Request)
}

void CCloud_EnumerateUserFiles_Request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&appid_, 0, reinterpret_cast<char*>(&start_index_) -
    reinterpret_cast<char*>(&appid_) + sizeof(start_index_));
}

CCloud_EnumerateUserFiles_Request::~CCloud_EnumerateUserFiles_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CCloud_EnumerateUserFiles_Request)
  SharedDtor();
}

void CCloud_EnumerateUserFiles_Request::SharedDtor() {
}

void CCloud_EnumerateUserFiles_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCloud_EnumerateUserFiles_Request::descriptor() {
  protobuf_steammessages_5fcloud_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fcloud_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CCloud_EnumerateUserFiles_Request& CCloud_EnumerateUserFiles_Request::default_instance() {
  protobuf_steammessages_5fcloud_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CCloud_EnumerateUserFiles_Request* CCloud_EnumerateUserFiles_Request::New(::google::protobuf::Arena* arena) const {
  CCloud_EnumerateUserFiles_Request* n = new CCloud_EnumerateUserFiles_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CCloud_EnumerateUserFiles_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CCloud_EnumerateUserFiles_Request)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&appid_, 0, reinterpret_cast<char*>(&start_index_) -
      reinterpret_cast<char*>(&appid_) + sizeof(start_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CCloud_EnumerateUserFiles_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CCloud_EnumerateUserFiles_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1 [(.proto.steam.description) = "App ID to enumerate the files of."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool extended_details = 2 [(.proto.steam.description) = "(Optional) Get extended details back on the files found. Defaults to only returned the app Id and UGC Id of the files found."];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_extended_details();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &extended_details_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 count = 3 [(.proto.steam.description) = "(Optional) Maximum number of results to return on this call. Defaults to a maximum of 500 files returned."];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 start_index = 4 [(.proto.steam.description) = "(Optional) Starting index to begin enumeration at. Defaults to the beginning of the list."];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_start_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CCloud_EnumerateUserFiles_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CCloud_EnumerateUserFiles_Request)
  return false;
#undef DO_
}

void CCloud_EnumerateUserFiles_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CCloud_EnumerateUserFiles_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1 [(.proto.steam.description) = "App ID to enumerate the files of."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional bool extended_details = 2 [(.proto.steam.description) = "(Optional) Get extended details back on the files found. Defaults to only returned the app Id and UGC Id of the files found."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->extended_details(), output);
  }

  // optional uint32 count = 3 [(.proto.steam.description) = "(Optional) Maximum number of results to return on this call. Defaults to a maximum of 500 files returned."];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->count(), output);
  }

  // optional uint32 start_index = 4 [(.proto.steam.description) = "(Optional) Starting index to begin enumeration at. Defaults to the beginning of the list."];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->start_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CCloud_EnumerateUserFiles_Request)
}

::google::protobuf::uint8* CCloud_EnumerateUserFiles_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CCloud_EnumerateUserFiles_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1 [(.proto.steam.description) = "App ID to enumerate the files of."];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional bool extended_details = 2 [(.proto.steam.description) = "(Optional) Get extended details back on the files found. Defaults to only returned the app Id and UGC Id of the files found."];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->extended_details(), target);
  }

  // optional uint32 count = 3 [(.proto.steam.description) = "(Optional) Maximum number of results to return on this call. Defaults to a maximum of 500 files returned."];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->count(), target);
  }

  // optional uint32 start_index = 4 [(.proto.steam.description) = "(Optional) Starting index to begin enumeration at. Defaults to the beginning of the list."];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->start_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CCloud_EnumerateUserFiles_Request)
  return target;
}

size_t CCloud_EnumerateUserFiles_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CCloud_EnumerateUserFiles_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional uint32 appid = 1 [(.proto.steam.description) = "App ID to enumerate the files of."];
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional bool extended_details = 2 [(.proto.steam.description) = "(Optional) Get extended details back on the files found. Defaults to only returned the app Id and UGC Id of the files found."];
    if (has_extended_details()) {
      total_size += 1 + 1;
    }

    // optional uint32 count = 3 [(.proto.steam.description) = "(Optional) Maximum number of results to return on this call. Defaults to a maximum of 500 files returned."];
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // optional uint32 start_index = 4 [(.proto.steam.description) = "(Optional) Starting index to begin enumeration at. Defaults to the beginning of the list."];
    if (has_start_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_index());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCloud_EnumerateUserFiles_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CCloud_EnumerateUserFiles_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CCloud_EnumerateUserFiles_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CCloud_EnumerateUserFiles_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CCloud_EnumerateUserFiles_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CCloud_EnumerateUserFiles_Request)
    MergeFrom(*source);
  }
}

void CCloud_EnumerateUserFiles_Request::MergeFrom(const CCloud_EnumerateUserFiles_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CCloud_EnumerateUserFiles_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000002u) {
      extended_details_ = from.extended_details_;
    }
    if (cached_has_bits & 0x00000004u) {
      count_ = from.count_;
    }
    if (cached_has_bits & 0x00000008u) {
      start_index_ = from.start_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CCloud_EnumerateUserFiles_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CCloud_EnumerateUserFiles_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCloud_EnumerateUserFiles_Request::CopyFrom(const CCloud_EnumerateUserFiles_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CCloud_EnumerateUserFiles_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_EnumerateUserFiles_Request::IsInitialized() const {
  return true;
}

void CCloud_EnumerateUserFiles_Request::Swap(CCloud_EnumerateUserFiles_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCloud_EnumerateUserFiles_Request::InternalSwap(CCloud_EnumerateUserFiles_Request* other) {
  std::swap(appid_, other->appid_);
  std::swap(extended_details_, other->extended_details_);
  std::swap(count_, other->count_);
  std::swap(start_index_, other->start_index_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CCloud_EnumerateUserFiles_Request::GetMetadata() const {
  protobuf_steammessages_5fcloud_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fcloud_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CCloud_EnumerateUserFiles_Request

// optional uint32 appid = 1 [(.proto.steam.description) = "App ID to enumerate the files of."];
bool CCloud_EnumerateUserFiles_Request::has_appid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CCloud_EnumerateUserFiles_Request::set_has_appid() {
  _has_bits_[0] |= 0x00000001u;
}
void CCloud_EnumerateUserFiles_Request::clear_has_appid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CCloud_EnumerateUserFiles_Request::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
::google::protobuf::uint32 CCloud_EnumerateUserFiles_Request::appid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_EnumerateUserFiles_Request.appid)
  return appid_;
}
void CCloud_EnumerateUserFiles_Request::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_EnumerateUserFiles_Request.appid)
}

// optional bool extended_details = 2 [(.proto.steam.description) = "(Optional) Get extended details back on the files found. Defaults to only returned the app Id and UGC Id of the files found."];
bool CCloud_EnumerateUserFiles_Request::has_extended_details() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CCloud_EnumerateUserFiles_Request::set_has_extended_details() {
  _has_bits_[0] |= 0x00000002u;
}
void CCloud_EnumerateUserFiles_Request::clear_has_extended_details() {
  _has_bits_[0] &= ~0x00000002u;
}
void CCloud_EnumerateUserFiles_Request::clear_extended_details() {
  extended_details_ = false;
  clear_has_extended_details();
}
bool CCloud_EnumerateUserFiles_Request::extended_details() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_EnumerateUserFiles_Request.extended_details)
  return extended_details_;
}
void CCloud_EnumerateUserFiles_Request::set_extended_details(bool value) {
  set_has_extended_details();
  extended_details_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_EnumerateUserFiles_Request.extended_details)
}

// optional uint32 count = 3 [(.proto.steam.description) = "(Optional) Maximum number of results to return on this call. Defaults to a maximum of 500 files returned."];
bool CCloud_EnumerateUserFiles_Request::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CCloud_EnumerateUserFiles_Request::set_has_count() {
  _has_bits_[0] |= 0x00000004u;
}
void CCloud_EnumerateUserFiles_Request::clear_has_count() {
  _has_bits_[0] &= ~0x00000004u;
}
void CCloud_EnumerateUserFiles_Request::clear_count() {
  count_ = 0u;
  clear_has_count();
}
::google::protobuf::uint32 CCloud_EnumerateUserFiles_Request::count() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_EnumerateUserFiles_Request.count)
  return count_;
}
void CCloud_EnumerateUserFiles_Request::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_EnumerateUserFiles_Request.count)
}

// optional uint32 start_index = 4 [(.proto.steam.description) = "(Optional) Starting index to begin enumeration at. Defaults to the beginning of the list."];
bool CCloud_EnumerateUserFiles_Request::has_start_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CCloud_EnumerateUserFiles_Request::set_has_start_index() {
  _has_bits_[0] |= 0x00000008u;
}
void CCloud_EnumerateUserFiles_Request::clear_has_start_index() {
  _has_bits_[0] &= ~0x00000008u;
}
void CCloud_EnumerateUserFiles_Request::clear_start_index() {
  start_index_ = 0u;
  clear_has_start_index();
}
::google::protobuf::uint32 CCloud_EnumerateUserFiles_Request::start_index() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_EnumerateUserFiles_Request.start_index)
  return start_index_;
}
void CCloud_EnumerateUserFiles_Request::set_start_index(::google::protobuf::uint32 value) {
  set_has_start_index();
  start_index_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_EnumerateUserFiles_Request.start_index)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCloud_EnumerateUserFiles_Response::kFilesFieldNumber;
const int CCloud_EnumerateUserFiles_Response::kTotalFilesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCloud_EnumerateUserFiles_Response::CCloud_EnumerateUserFiles_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fcloud_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CCloud_EnumerateUserFiles_Response)
}
CCloud_EnumerateUserFiles_Response::CCloud_EnumerateUserFiles_Response(const CCloud_EnumerateUserFiles_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      files_(from.files_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  total_files_ = from.total_files_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CCloud_EnumerateUserFiles_Response)
}

void CCloud_EnumerateUserFiles_Response::SharedCtor() {
  _cached_size_ = 0;
  total_files_ = 0u;
}

CCloud_EnumerateUserFiles_Response::~CCloud_EnumerateUserFiles_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CCloud_EnumerateUserFiles_Response)
  SharedDtor();
}

void CCloud_EnumerateUserFiles_Response::SharedDtor() {
}

void CCloud_EnumerateUserFiles_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCloud_EnumerateUserFiles_Response::descriptor() {
  protobuf_steammessages_5fcloud_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fcloud_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CCloud_EnumerateUserFiles_Response& CCloud_EnumerateUserFiles_Response::default_instance() {
  protobuf_steammessages_5fcloud_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CCloud_EnumerateUserFiles_Response* CCloud_EnumerateUserFiles_Response::New(::google::protobuf::Arena* arena) const {
  CCloud_EnumerateUserFiles_Response* n = new CCloud_EnumerateUserFiles_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CCloud_EnumerateUserFiles_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CCloud_EnumerateUserFiles_Response)
  files_.Clear();
  total_files_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CCloud_EnumerateUserFiles_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CCloud_EnumerateUserFiles_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.steam.CCloud_UserFile files = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_files()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 total_files = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_total_files();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_files_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CCloud_EnumerateUserFiles_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CCloud_EnumerateUserFiles_Response)
  return false;
#undef DO_
}

void CCloud_EnumerateUserFiles_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CCloud_EnumerateUserFiles_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CCloud_UserFile files = 1;
  for (unsigned int i = 0, n = this->files_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->files(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 total_files = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->total_files(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CCloud_EnumerateUserFiles_Response)
}

::google::protobuf::uint8* CCloud_EnumerateUserFiles_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CCloud_EnumerateUserFiles_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CCloud_UserFile files = 1;
  for (unsigned int i = 0, n = this->files_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->files(i), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 total_files = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->total_files(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CCloud_EnumerateUserFiles_Response)
  return target;
}

size_t CCloud_EnumerateUserFiles_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CCloud_EnumerateUserFiles_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.steam.CCloud_UserFile files = 1;
  {
    unsigned int count = this->files_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->files(i));
    }
  }

  // optional uint32 total_files = 2;
  if (has_total_files()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->total_files());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCloud_EnumerateUserFiles_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CCloud_EnumerateUserFiles_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CCloud_EnumerateUserFiles_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CCloud_EnumerateUserFiles_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CCloud_EnumerateUserFiles_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CCloud_EnumerateUserFiles_Response)
    MergeFrom(*source);
  }
}

void CCloud_EnumerateUserFiles_Response::MergeFrom(const CCloud_EnumerateUserFiles_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CCloud_EnumerateUserFiles_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  files_.MergeFrom(from.files_);
  if (from.has_total_files()) {
    set_total_files(from.total_files());
  }
}

void CCloud_EnumerateUserFiles_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CCloud_EnumerateUserFiles_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCloud_EnumerateUserFiles_Response::CopyFrom(const CCloud_EnumerateUserFiles_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CCloud_EnumerateUserFiles_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_EnumerateUserFiles_Response::IsInitialized() const {
  return true;
}

void CCloud_EnumerateUserFiles_Response::Swap(CCloud_EnumerateUserFiles_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCloud_EnumerateUserFiles_Response::InternalSwap(CCloud_EnumerateUserFiles_Response* other) {
  files_.InternalSwap(&other->files_);
  std::swap(total_files_, other->total_files_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CCloud_EnumerateUserFiles_Response::GetMetadata() const {
  protobuf_steammessages_5fcloud_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fcloud_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CCloud_EnumerateUserFiles_Response

// repeated .proto.steam.CCloud_UserFile files = 1;
int CCloud_EnumerateUserFiles_Response::files_size() const {
  return files_.size();
}
void CCloud_EnumerateUserFiles_Response::clear_files() {
  files_.Clear();
}
const ::proto::steam::CCloud_UserFile& CCloud_EnumerateUserFiles_Response::files(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_EnumerateUserFiles_Response.files)
  return files_.Get(index);
}
::proto::steam::CCloud_UserFile* CCloud_EnumerateUserFiles_Response::mutable_files(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CCloud_EnumerateUserFiles_Response.files)
  return files_.Mutable(index);
}
::proto::steam::CCloud_UserFile* CCloud_EnumerateUserFiles_Response::add_files() {
  // @@protoc_insertion_point(field_add:proto.steam.CCloud_EnumerateUserFiles_Response.files)
  return files_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::CCloud_UserFile >*
CCloud_EnumerateUserFiles_Response::mutable_files() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CCloud_EnumerateUserFiles_Response.files)
  return &files_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::CCloud_UserFile >&
CCloud_EnumerateUserFiles_Response::files() const {
  // @@protoc_insertion_point(field_list:proto.steam.CCloud_EnumerateUserFiles_Response.files)
  return files_;
}

// optional uint32 total_files = 2;
bool CCloud_EnumerateUserFiles_Response::has_total_files() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CCloud_EnumerateUserFiles_Response::set_has_total_files() {
  _has_bits_[0] |= 0x00000001u;
}
void CCloud_EnumerateUserFiles_Response::clear_has_total_files() {
  _has_bits_[0] &= ~0x00000001u;
}
void CCloud_EnumerateUserFiles_Response::clear_total_files() {
  total_files_ = 0u;
  clear_has_total_files();
}
::google::protobuf::uint32 CCloud_EnumerateUserFiles_Response::total_files() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_EnumerateUserFiles_Response.total_files)
  return total_files_;
}
void CCloud_EnumerateUserFiles_Response::set_total_files(::google::protobuf::uint32 value) {
  set_has_total_files();
  total_files_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_EnumerateUserFiles_Response.total_files)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCloud_Delete_Request::kFilenameFieldNumber;
const int CCloud_Delete_Request::kAppidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCloud_Delete_Request::CCloud_Delete_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fcloud_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CCloud_Delete_Request)
}
CCloud_Delete_Request::CCloud_Delete_Request(const CCloud_Delete_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_filename()) {
    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  appid_ = from.appid_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CCloud_Delete_Request)
}

void CCloud_Delete_Request::SharedCtor() {
  _cached_size_ = 0;
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appid_ = 0u;
}

CCloud_Delete_Request::~CCloud_Delete_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CCloud_Delete_Request)
  SharedDtor();
}

void CCloud_Delete_Request::SharedDtor() {
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CCloud_Delete_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCloud_Delete_Request::descriptor() {
  protobuf_steammessages_5fcloud_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fcloud_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CCloud_Delete_Request& CCloud_Delete_Request::default_instance() {
  protobuf_steammessages_5fcloud_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CCloud_Delete_Request* CCloud_Delete_Request::New(::google::protobuf::Arena* arena) const {
  CCloud_Delete_Request* n = new CCloud_Delete_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CCloud_Delete_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CCloud_Delete_Request)
  if (has_filename()) {
    GOOGLE_DCHECK(!filename_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*filename_.UnsafeRawStringPointer())->clear();
  }
  appid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CCloud_Delete_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CCloud_Delete_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string filename = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CCloud_Delete_Request.filename");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 appid = 2 [(.proto.steam.description) = "App ID the file belongs to."];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CCloud_Delete_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CCloud_Delete_Request)
  return false;
#undef DO_
}

void CCloud_Delete_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CCloud_Delete_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string filename = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCloud_Delete_Request.filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->filename(), output);
  }

  // optional uint32 appid = 2 [(.proto.steam.description) = "App ID the file belongs to."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->appid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CCloud_Delete_Request)
}

::google::protobuf::uint8* CCloud_Delete_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CCloud_Delete_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string filename = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCloud_Delete_Request.filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->filename(), target);
  }

  // optional uint32 appid = 2 [(.proto.steam.description) = "App ID the file belongs to."];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->appid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CCloud_Delete_Request)
  return target;
}

size_t CCloud_Delete_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CCloud_Delete_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string filename = 1;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional uint32 appid = 2 [(.proto.steam.description) = "App ID the file belongs to."];
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCloud_Delete_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CCloud_Delete_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CCloud_Delete_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CCloud_Delete_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CCloud_Delete_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CCloud_Delete_Request)
    MergeFrom(*source);
  }
}

void CCloud_Delete_Request::MergeFrom(const CCloud_Delete_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CCloud_Delete_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_filename();
      filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CCloud_Delete_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CCloud_Delete_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCloud_Delete_Request::CopyFrom(const CCloud_Delete_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CCloud_Delete_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_Delete_Request::IsInitialized() const {
  return true;
}

void CCloud_Delete_Request::Swap(CCloud_Delete_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCloud_Delete_Request::InternalSwap(CCloud_Delete_Request* other) {
  filename_.Swap(&other->filename_);
  std::swap(appid_, other->appid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CCloud_Delete_Request::GetMetadata() const {
  protobuf_steammessages_5fcloud_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fcloud_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CCloud_Delete_Request

// optional string filename = 1;
bool CCloud_Delete_Request::has_filename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CCloud_Delete_Request::set_has_filename() {
  _has_bits_[0] |= 0x00000001u;
}
void CCloud_Delete_Request::clear_has_filename() {
  _has_bits_[0] &= ~0x00000001u;
}
void CCloud_Delete_Request::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_filename();
}
const ::std::string& CCloud_Delete_Request::filename() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_Delete_Request.filename)
  return filename_.GetNoArena();
}
void CCloud_Delete_Request::set_filename(const ::std::string& value) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_Delete_Request.filename)
}
#if LANG_CXX11
void CCloud_Delete_Request::set_filename(::std::string&& value) {
  set_has_filename();
  filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CCloud_Delete_Request.filename)
}
#endif
void CCloud_Delete_Request::set_filename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CCloud_Delete_Request.filename)
}
void CCloud_Delete_Request::set_filename(const char* value, size_t size) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CCloud_Delete_Request.filename)
}
::std::string* CCloud_Delete_Request::mutable_filename() {
  set_has_filename();
  // @@protoc_insertion_point(field_mutable:proto.steam.CCloud_Delete_Request.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CCloud_Delete_Request::release_filename() {
  // @@protoc_insertion_point(field_release:proto.steam.CCloud_Delete_Request.filename)
  clear_has_filename();
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CCloud_Delete_Request::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    set_has_filename();
  } else {
    clear_has_filename();
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CCloud_Delete_Request.filename)
}

// optional uint32 appid = 2 [(.proto.steam.description) = "App ID the file belongs to."];
bool CCloud_Delete_Request::has_appid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CCloud_Delete_Request::set_has_appid() {
  _has_bits_[0] |= 0x00000002u;
}
void CCloud_Delete_Request::clear_has_appid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CCloud_Delete_Request::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
::google::protobuf::uint32 CCloud_Delete_Request::appid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_Delete_Request.appid)
  return appid_;
}
void CCloud_Delete_Request::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_Delete_Request.appid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCloud_Delete_Response::CCloud_Delete_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fcloud_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CCloud_Delete_Response)
}
CCloud_Delete_Response::CCloud_Delete_Response(const CCloud_Delete_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CCloud_Delete_Response)
}

void CCloud_Delete_Response::SharedCtor() {
  _cached_size_ = 0;
}

CCloud_Delete_Response::~CCloud_Delete_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CCloud_Delete_Response)
  SharedDtor();
}

void CCloud_Delete_Response::SharedDtor() {
}

void CCloud_Delete_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCloud_Delete_Response::descriptor() {
  protobuf_steammessages_5fcloud_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fcloud_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CCloud_Delete_Response& CCloud_Delete_Response::default_instance() {
  protobuf_steammessages_5fcloud_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CCloud_Delete_Response* CCloud_Delete_Response::New(::google::protobuf::Arena* arena) const {
  CCloud_Delete_Response* n = new CCloud_Delete_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CCloud_Delete_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CCloud_Delete_Response)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CCloud_Delete_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CCloud_Delete_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CCloud_Delete_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CCloud_Delete_Response)
  return false;
#undef DO_
}

void CCloud_Delete_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CCloud_Delete_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CCloud_Delete_Response)
}

::google::protobuf::uint8* CCloud_Delete_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CCloud_Delete_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CCloud_Delete_Response)
  return target;
}

size_t CCloud_Delete_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CCloud_Delete_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCloud_Delete_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CCloud_Delete_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CCloud_Delete_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CCloud_Delete_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CCloud_Delete_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CCloud_Delete_Response)
    MergeFrom(*source);
  }
}

void CCloud_Delete_Response::MergeFrom(const CCloud_Delete_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CCloud_Delete_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CCloud_Delete_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CCloud_Delete_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCloud_Delete_Response::CopyFrom(const CCloud_Delete_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CCloud_Delete_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_Delete_Response::IsInitialized() const {
  return true;
}

void CCloud_Delete_Response::Swap(CCloud_Delete_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCloud_Delete_Response::InternalSwap(CCloud_Delete_Response* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CCloud_Delete_Response::GetMetadata() const {
  protobuf_steammessages_5fcloud_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fcloud_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CCloud_Delete_Response

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCloud_GetClientEncryptionKey_Request::CCloud_GetClientEncryptionKey_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fcloud_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CCloud_GetClientEncryptionKey_Request)
}
CCloud_GetClientEncryptionKey_Request::CCloud_GetClientEncryptionKey_Request(const CCloud_GetClientEncryptionKey_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CCloud_GetClientEncryptionKey_Request)
}

void CCloud_GetClientEncryptionKey_Request::SharedCtor() {
  _cached_size_ = 0;
}

CCloud_GetClientEncryptionKey_Request::~CCloud_GetClientEncryptionKey_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CCloud_GetClientEncryptionKey_Request)
  SharedDtor();
}

void CCloud_GetClientEncryptionKey_Request::SharedDtor() {
}

void CCloud_GetClientEncryptionKey_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCloud_GetClientEncryptionKey_Request::descriptor() {
  protobuf_steammessages_5fcloud_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fcloud_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CCloud_GetClientEncryptionKey_Request& CCloud_GetClientEncryptionKey_Request::default_instance() {
  protobuf_steammessages_5fcloud_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CCloud_GetClientEncryptionKey_Request* CCloud_GetClientEncryptionKey_Request::New(::google::protobuf::Arena* arena) const {
  CCloud_GetClientEncryptionKey_Request* n = new CCloud_GetClientEncryptionKey_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CCloud_GetClientEncryptionKey_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CCloud_GetClientEncryptionKey_Request)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CCloud_GetClientEncryptionKey_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CCloud_GetClientEncryptionKey_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CCloud_GetClientEncryptionKey_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CCloud_GetClientEncryptionKey_Request)
  return false;
#undef DO_
}

void CCloud_GetClientEncryptionKey_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CCloud_GetClientEncryptionKey_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CCloud_GetClientEncryptionKey_Request)
}

::google::protobuf::uint8* CCloud_GetClientEncryptionKey_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CCloud_GetClientEncryptionKey_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CCloud_GetClientEncryptionKey_Request)
  return target;
}

size_t CCloud_GetClientEncryptionKey_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CCloud_GetClientEncryptionKey_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCloud_GetClientEncryptionKey_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CCloud_GetClientEncryptionKey_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CCloud_GetClientEncryptionKey_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CCloud_GetClientEncryptionKey_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CCloud_GetClientEncryptionKey_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CCloud_GetClientEncryptionKey_Request)
    MergeFrom(*source);
  }
}

void CCloud_GetClientEncryptionKey_Request::MergeFrom(const CCloud_GetClientEncryptionKey_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CCloud_GetClientEncryptionKey_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CCloud_GetClientEncryptionKey_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CCloud_GetClientEncryptionKey_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCloud_GetClientEncryptionKey_Request::CopyFrom(const CCloud_GetClientEncryptionKey_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CCloud_GetClientEncryptionKey_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_GetClientEncryptionKey_Request::IsInitialized() const {
  return true;
}

void CCloud_GetClientEncryptionKey_Request::Swap(CCloud_GetClientEncryptionKey_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCloud_GetClientEncryptionKey_Request::InternalSwap(CCloud_GetClientEncryptionKey_Request* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CCloud_GetClientEncryptionKey_Request::GetMetadata() const {
  protobuf_steammessages_5fcloud_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fcloud_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CCloud_GetClientEncryptionKey_Request

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCloud_GetClientEncryptionKey_Response::kKeyFieldNumber;
const int CCloud_GetClientEncryptionKey_Response::kCrcFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCloud_GetClientEncryptionKey_Response::CCloud_GetClientEncryptionKey_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fcloud_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CCloud_GetClientEncryptionKey_Response)
}
CCloud_GetClientEncryptionKey_Response::CCloud_GetClientEncryptionKey_Response(const CCloud_GetClientEncryptionKey_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_key()) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  crc_ = from.crc_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CCloud_GetClientEncryptionKey_Response)
}

void CCloud_GetClientEncryptionKey_Response::SharedCtor() {
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  crc_ = 0;
}

CCloud_GetClientEncryptionKey_Response::~CCloud_GetClientEncryptionKey_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CCloud_GetClientEncryptionKey_Response)
  SharedDtor();
}

void CCloud_GetClientEncryptionKey_Response::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CCloud_GetClientEncryptionKey_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCloud_GetClientEncryptionKey_Response::descriptor() {
  protobuf_steammessages_5fcloud_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fcloud_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CCloud_GetClientEncryptionKey_Response& CCloud_GetClientEncryptionKey_Response::default_instance() {
  protobuf_steammessages_5fcloud_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CCloud_GetClientEncryptionKey_Response* CCloud_GetClientEncryptionKey_Response::New(::google::protobuf::Arena* arena) const {
  CCloud_GetClientEncryptionKey_Response* n = new CCloud_GetClientEncryptionKey_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CCloud_GetClientEncryptionKey_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CCloud_GetClientEncryptionKey_Response)
  if (has_key()) {
    GOOGLE_DCHECK(!key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*key_.UnsafeRawStringPointer())->clear();
  }
  crc_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CCloud_GetClientEncryptionKey_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CCloud_GetClientEncryptionKey_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes key = 1 [(.proto.steam.description) = "AES-256 encryption key"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 crc = 2 [(.proto.steam.description) = "CRC of key"];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_crc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &crc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CCloud_GetClientEncryptionKey_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CCloud_GetClientEncryptionKey_Response)
  return false;
#undef DO_
}

void CCloud_GetClientEncryptionKey_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CCloud_GetClientEncryptionKey_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes key = 1 [(.proto.steam.description) = "AES-256 encryption key"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // optional int32 crc = 2 [(.proto.steam.description) = "CRC of key"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->crc(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CCloud_GetClientEncryptionKey_Response)
}

::google::protobuf::uint8* CCloud_GetClientEncryptionKey_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CCloud_GetClientEncryptionKey_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes key = 1 [(.proto.steam.description) = "AES-256 encryption key"];
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // optional int32 crc = 2 [(.proto.steam.description) = "CRC of key"];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->crc(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CCloud_GetClientEncryptionKey_Response)
  return target;
}

size_t CCloud_GetClientEncryptionKey_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CCloud_GetClientEncryptionKey_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes key = 1 [(.proto.steam.description) = "AES-256 encryption key"];
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // optional int32 crc = 2 [(.proto.steam.description) = "CRC of key"];
    if (has_crc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->crc());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCloud_GetClientEncryptionKey_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CCloud_GetClientEncryptionKey_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CCloud_GetClientEncryptionKey_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CCloud_GetClientEncryptionKey_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CCloud_GetClientEncryptionKey_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CCloud_GetClientEncryptionKey_Response)
    MergeFrom(*source);
  }
}

void CCloud_GetClientEncryptionKey_Response::MergeFrom(const CCloud_GetClientEncryptionKey_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CCloud_GetClientEncryptionKey_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (cached_has_bits & 0x00000002u) {
      crc_ = from.crc_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CCloud_GetClientEncryptionKey_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CCloud_GetClientEncryptionKey_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCloud_GetClientEncryptionKey_Response::CopyFrom(const CCloud_GetClientEncryptionKey_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CCloud_GetClientEncryptionKey_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_GetClientEncryptionKey_Response::IsInitialized() const {
  return true;
}

void CCloud_GetClientEncryptionKey_Response::Swap(CCloud_GetClientEncryptionKey_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCloud_GetClientEncryptionKey_Response::InternalSwap(CCloud_GetClientEncryptionKey_Response* other) {
  key_.Swap(&other->key_);
  std::swap(crc_, other->crc_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CCloud_GetClientEncryptionKey_Response::GetMetadata() const {
  protobuf_steammessages_5fcloud_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fcloud_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CCloud_GetClientEncryptionKey_Response

// optional bytes key = 1 [(.proto.steam.description) = "AES-256 encryption key"];
bool CCloud_GetClientEncryptionKey_Response::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CCloud_GetClientEncryptionKey_Response::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void CCloud_GetClientEncryptionKey_Response::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void CCloud_GetClientEncryptionKey_Response::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
const ::std::string& CCloud_GetClientEncryptionKey_Response::key() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_GetClientEncryptionKey_Response.key)
  return key_.GetNoArena();
}
void CCloud_GetClientEncryptionKey_Response::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_GetClientEncryptionKey_Response.key)
}
#if LANG_CXX11
void CCloud_GetClientEncryptionKey_Response::set_key(::std::string&& value) {
  set_has_key();
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CCloud_GetClientEncryptionKey_Response.key)
}
#endif
void CCloud_GetClientEncryptionKey_Response::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CCloud_GetClientEncryptionKey_Response.key)
}
void CCloud_GetClientEncryptionKey_Response::set_key(const void* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CCloud_GetClientEncryptionKey_Response.key)
}
::std::string* CCloud_GetClientEncryptionKey_Response::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:proto.steam.CCloud_GetClientEncryptionKey_Response.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CCloud_GetClientEncryptionKey_Response::release_key() {
  // @@protoc_insertion_point(field_release:proto.steam.CCloud_GetClientEncryptionKey_Response.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CCloud_GetClientEncryptionKey_Response::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CCloud_GetClientEncryptionKey_Response.key)
}

// optional int32 crc = 2 [(.proto.steam.description) = "CRC of key"];
bool CCloud_GetClientEncryptionKey_Response::has_crc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CCloud_GetClientEncryptionKey_Response::set_has_crc() {
  _has_bits_[0] |= 0x00000002u;
}
void CCloud_GetClientEncryptionKey_Response::clear_has_crc() {
  _has_bits_[0] &= ~0x00000002u;
}
void CCloud_GetClientEncryptionKey_Response::clear_crc() {
  crc_ = 0;
  clear_has_crc();
}
::google::protobuf::int32 CCloud_GetClientEncryptionKey_Response::crc() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_GetClientEncryptionKey_Response.crc)
  return crc_;
}
void CCloud_GetClientEncryptionKey_Response::set_crc(::google::protobuf::int32 value) {
  set_has_crc();
  crc_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_GetClientEncryptionKey_Response.crc)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCloud_CDNReport_Notification::kSteamidFieldNumber;
const int CCloud_CDNReport_Notification::kUrlFieldNumber;
const int CCloud_CDNReport_Notification::kSuccessFieldNumber;
const int CCloud_CDNReport_Notification::kHttpStatusCodeFieldNumber;
const int CCloud_CDNReport_Notification::kExpectedBytesFieldNumber;
const int CCloud_CDNReport_Notification::kReceivedBytesFieldNumber;
const int CCloud_CDNReport_Notification::kDurationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCloud_CDNReport_Notification::CCloud_CDNReport_Notification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fcloud_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CCloud_CDNReport_Notification)
}
CCloud_CDNReport_Notification::CCloud_CDNReport_Notification(const CCloud_CDNReport_Notification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  ::memcpy(&steamid_, &from.steamid_,
    reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&steamid_) + sizeof(duration_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CCloud_CDNReport_Notification)
}

void CCloud_CDNReport_Notification::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&steamid_, 0, reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&steamid_) + sizeof(duration_));
}

CCloud_CDNReport_Notification::~CCloud_CDNReport_Notification() {
  // @@protoc_insertion_point(destructor:proto.steam.CCloud_CDNReport_Notification)
  SharedDtor();
}

void CCloud_CDNReport_Notification::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CCloud_CDNReport_Notification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCloud_CDNReport_Notification::descriptor() {
  protobuf_steammessages_5fcloud_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fcloud_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CCloud_CDNReport_Notification& CCloud_CDNReport_Notification::default_instance() {
  protobuf_steammessages_5fcloud_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CCloud_CDNReport_Notification* CCloud_CDNReport_Notification::New(::google::protobuf::Arena* arena) const {
  CCloud_CDNReport_Notification* n = new CCloud_CDNReport_Notification;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CCloud_CDNReport_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CCloud_CDNReport_Notification)
  if (has_url()) {
    GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*url_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 126u) {
    ::memset(&steamid_, 0, reinterpret_cast<char*>(&duration_) -
      reinterpret_cast<char*>(&steamid_) + sizeof(duration_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CCloud_CDNReport_Notification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CCloud_CDNReport_Notification)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string url = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CCloud_CDNReport_Notification.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool success = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_success();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 http_status_code = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_http_status_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &http_status_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 expected_bytes = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_expected_bytes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &expected_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 received_bytes = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_received_bytes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &received_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 duration = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_duration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CCloud_CDNReport_Notification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CCloud_CDNReport_Notification)
  return false;
#undef DO_
}

void CCloud_CDNReport_Notification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CCloud_CDNReport_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCloud_CDNReport_Notification.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->url(), output);
  }

  // optional bool success = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->success(), output);
  }

  // optional uint32 http_status_code = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->http_status_code(), output);
  }

  // optional uint64 expected_bytes = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->expected_bytes(), output);
  }

  // optional uint64 received_bytes = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->received_bytes(), output);
  }

  // optional uint32 duration = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->duration(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CCloud_CDNReport_Notification)
}

::google::protobuf::uint8* CCloud_CDNReport_Notification::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CCloud_CDNReport_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCloud_CDNReport_Notification.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->url(), target);
  }

  // optional bool success = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->success(), target);
  }

  // optional uint32 http_status_code = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->http_status_code(), target);
  }

  // optional uint64 expected_bytes = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->expected_bytes(), target);
  }

  // optional uint64 received_bytes = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->received_bytes(), target);
  }

  // optional uint32 duration = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->duration(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CCloud_CDNReport_Notification)
  return target;
}

size_t CCloud_CDNReport_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CCloud_CDNReport_Notification)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional string url = 2;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional fixed64 steamid = 1;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional bool success = 3;
    if (has_success()) {
      total_size += 1 + 1;
    }

    // optional uint32 http_status_code = 4;
    if (has_http_status_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->http_status_code());
    }

    // optional uint64 expected_bytes = 5;
    if (has_expected_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->expected_bytes());
    }

    // optional uint64 received_bytes = 6;
    if (has_received_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->received_bytes());
    }

    // optional uint32 duration = 7;
    if (has_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duration());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCloud_CDNReport_Notification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CCloud_CDNReport_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CCloud_CDNReport_Notification* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CCloud_CDNReport_Notification>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CCloud_CDNReport_Notification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CCloud_CDNReport_Notification)
    MergeFrom(*source);
  }
}

void CCloud_CDNReport_Notification::MergeFrom(const CCloud_CDNReport_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CCloud_CDNReport_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000004u) {
      success_ = from.success_;
    }
    if (cached_has_bits & 0x00000008u) {
      http_status_code_ = from.http_status_code_;
    }
    if (cached_has_bits & 0x00000010u) {
      expected_bytes_ = from.expected_bytes_;
    }
    if (cached_has_bits & 0x00000020u) {
      received_bytes_ = from.received_bytes_;
    }
    if (cached_has_bits & 0x00000040u) {
      duration_ = from.duration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CCloud_CDNReport_Notification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CCloud_CDNReport_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCloud_CDNReport_Notification::CopyFrom(const CCloud_CDNReport_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CCloud_CDNReport_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_CDNReport_Notification::IsInitialized() const {
  return true;
}

void CCloud_CDNReport_Notification::Swap(CCloud_CDNReport_Notification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCloud_CDNReport_Notification::InternalSwap(CCloud_CDNReport_Notification* other) {
  url_.Swap(&other->url_);
  std::swap(steamid_, other->steamid_);
  std::swap(success_, other->success_);
  std::swap(http_status_code_, other->http_status_code_);
  std::swap(expected_bytes_, other->expected_bytes_);
  std::swap(received_bytes_, other->received_bytes_);
  std::swap(duration_, other->duration_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CCloud_CDNReport_Notification::GetMetadata() const {
  protobuf_steammessages_5fcloud_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fcloud_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CCloud_CDNReport_Notification

// optional fixed64 steamid = 1;
bool CCloud_CDNReport_Notification::has_steamid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CCloud_CDNReport_Notification::set_has_steamid() {
  _has_bits_[0] |= 0x00000002u;
}
void CCloud_CDNReport_Notification::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CCloud_CDNReport_Notification::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
::google::protobuf::uint64 CCloud_CDNReport_Notification::steamid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_CDNReport_Notification.steamid)
  return steamid_;
}
void CCloud_CDNReport_Notification::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_CDNReport_Notification.steamid)
}

// optional string url = 2;
bool CCloud_CDNReport_Notification::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CCloud_CDNReport_Notification::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void CCloud_CDNReport_Notification::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void CCloud_CDNReport_Notification::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& CCloud_CDNReport_Notification::url() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_CDNReport_Notification.url)
  return url_.GetNoArena();
}
void CCloud_CDNReport_Notification::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_CDNReport_Notification.url)
}
#if LANG_CXX11
void CCloud_CDNReport_Notification::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CCloud_CDNReport_Notification.url)
}
#endif
void CCloud_CDNReport_Notification::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CCloud_CDNReport_Notification.url)
}
void CCloud_CDNReport_Notification::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CCloud_CDNReport_Notification.url)
}
::std::string* CCloud_CDNReport_Notification::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:proto.steam.CCloud_CDNReport_Notification.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CCloud_CDNReport_Notification::release_url() {
  // @@protoc_insertion_point(field_release:proto.steam.CCloud_CDNReport_Notification.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CCloud_CDNReport_Notification::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CCloud_CDNReport_Notification.url)
}

// optional bool success = 3;
bool CCloud_CDNReport_Notification::has_success() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CCloud_CDNReport_Notification::set_has_success() {
  _has_bits_[0] |= 0x00000004u;
}
void CCloud_CDNReport_Notification::clear_has_success() {
  _has_bits_[0] &= ~0x00000004u;
}
void CCloud_CDNReport_Notification::clear_success() {
  success_ = false;
  clear_has_success();
}
bool CCloud_CDNReport_Notification::success() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_CDNReport_Notification.success)
  return success_;
}
void CCloud_CDNReport_Notification::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_CDNReport_Notification.success)
}

// optional uint32 http_status_code = 4;
bool CCloud_CDNReport_Notification::has_http_status_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CCloud_CDNReport_Notification::set_has_http_status_code() {
  _has_bits_[0] |= 0x00000008u;
}
void CCloud_CDNReport_Notification::clear_has_http_status_code() {
  _has_bits_[0] &= ~0x00000008u;
}
void CCloud_CDNReport_Notification::clear_http_status_code() {
  http_status_code_ = 0u;
  clear_has_http_status_code();
}
::google::protobuf::uint32 CCloud_CDNReport_Notification::http_status_code() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_CDNReport_Notification.http_status_code)
  return http_status_code_;
}
void CCloud_CDNReport_Notification::set_http_status_code(::google::protobuf::uint32 value) {
  set_has_http_status_code();
  http_status_code_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_CDNReport_Notification.http_status_code)
}

// optional uint64 expected_bytes = 5;
bool CCloud_CDNReport_Notification::has_expected_bytes() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CCloud_CDNReport_Notification::set_has_expected_bytes() {
  _has_bits_[0] |= 0x00000010u;
}
void CCloud_CDNReport_Notification::clear_has_expected_bytes() {
  _has_bits_[0] &= ~0x00000010u;
}
void CCloud_CDNReport_Notification::clear_expected_bytes() {
  expected_bytes_ = GOOGLE_ULONGLONG(0);
  clear_has_expected_bytes();
}
::google::protobuf::uint64 CCloud_CDNReport_Notification::expected_bytes() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_CDNReport_Notification.expected_bytes)
  return expected_bytes_;
}
void CCloud_CDNReport_Notification::set_expected_bytes(::google::protobuf::uint64 value) {
  set_has_expected_bytes();
  expected_bytes_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_CDNReport_Notification.expected_bytes)
}

// optional uint64 received_bytes = 6;
bool CCloud_CDNReport_Notification::has_received_bytes() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CCloud_CDNReport_Notification::set_has_received_bytes() {
  _has_bits_[0] |= 0x00000020u;
}
void CCloud_CDNReport_Notification::clear_has_received_bytes() {
  _has_bits_[0] &= ~0x00000020u;
}
void CCloud_CDNReport_Notification::clear_received_bytes() {
  received_bytes_ = GOOGLE_ULONGLONG(0);
  clear_has_received_bytes();
}
::google::protobuf::uint64 CCloud_CDNReport_Notification::received_bytes() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_CDNReport_Notification.received_bytes)
  return received_bytes_;
}
void CCloud_CDNReport_Notification::set_received_bytes(::google::protobuf::uint64 value) {
  set_has_received_bytes();
  received_bytes_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_CDNReport_Notification.received_bytes)
}

// optional uint32 duration = 7;
bool CCloud_CDNReport_Notification::has_duration() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CCloud_CDNReport_Notification::set_has_duration() {
  _has_bits_[0] |= 0x00000040u;
}
void CCloud_CDNReport_Notification::clear_has_duration() {
  _has_bits_[0] &= ~0x00000040u;
}
void CCloud_CDNReport_Notification::clear_duration() {
  duration_ = 0u;
  clear_has_duration();
}
::google::protobuf::uint32 CCloud_CDNReport_Notification::duration() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_CDNReport_Notification.duration)
  return duration_;
}
void CCloud_CDNReport_Notification::set_duration(::google::protobuf::uint32 value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_CDNReport_Notification.duration)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCloud_ExternalStorageTransferReport_Notification::kHostFieldNumber;
const int CCloud_ExternalStorageTransferReport_Notification::kPathFieldNumber;
const int CCloud_ExternalStorageTransferReport_Notification::kIsUploadFieldNumber;
const int CCloud_ExternalStorageTransferReport_Notification::kSuccessFieldNumber;
const int CCloud_ExternalStorageTransferReport_Notification::kHttpStatusCodeFieldNumber;
const int CCloud_ExternalStorageTransferReport_Notification::kBytesExpectedFieldNumber;
const int CCloud_ExternalStorageTransferReport_Notification::kBytesActualFieldNumber;
const int CCloud_ExternalStorageTransferReport_Notification::kDurationMsFieldNumber;
const int CCloud_ExternalStorageTransferReport_Notification::kCellidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCloud_ExternalStorageTransferReport_Notification::CCloud_ExternalStorageTransferReport_Notification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fcloud_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CCloud_ExternalStorageTransferReport_Notification)
}
CCloud_ExternalStorageTransferReport_Notification::CCloud_ExternalStorageTransferReport_Notification(const CCloud_ExternalStorageTransferReport_Notification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_host()) {
    host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_);
  }
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_path()) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  ::memcpy(&is_upload_, &from.is_upload_,
    reinterpret_cast<char*>(&cellid_) -
    reinterpret_cast<char*>(&is_upload_) + sizeof(cellid_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CCloud_ExternalStorageTransferReport_Notification)
}

void CCloud_ExternalStorageTransferReport_Notification::SharedCtor() {
  _cached_size_ = 0;
  host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&is_upload_, 0, reinterpret_cast<char*>(&cellid_) -
    reinterpret_cast<char*>(&is_upload_) + sizeof(cellid_));
}

CCloud_ExternalStorageTransferReport_Notification::~CCloud_ExternalStorageTransferReport_Notification() {
  // @@protoc_insertion_point(destructor:proto.steam.CCloud_ExternalStorageTransferReport_Notification)
  SharedDtor();
}

void CCloud_ExternalStorageTransferReport_Notification::SharedDtor() {
  host_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CCloud_ExternalStorageTransferReport_Notification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCloud_ExternalStorageTransferReport_Notification::descriptor() {
  protobuf_steammessages_5fcloud_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fcloud_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CCloud_ExternalStorageTransferReport_Notification& CCloud_ExternalStorageTransferReport_Notification::default_instance() {
  protobuf_steammessages_5fcloud_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CCloud_ExternalStorageTransferReport_Notification* CCloud_ExternalStorageTransferReport_Notification::New(::google::protobuf::Arena* arena) const {
  CCloud_ExternalStorageTransferReport_Notification* n = new CCloud_ExternalStorageTransferReport_Notification;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CCloud_ExternalStorageTransferReport_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CCloud_ExternalStorageTransferReport_Notification)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_host()) {
      GOOGLE_DCHECK(!host_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*host_.UnsafeRawStringPointer())->clear();
    }
    if (has_path()) {
      GOOGLE_DCHECK(!path_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*path_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 252u) {
    ::memset(&is_upload_, 0, reinterpret_cast<char*>(&duration_ms_) -
      reinterpret_cast<char*>(&is_upload_) + sizeof(duration_ms_));
  }
  cellid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CCloud_ExternalStorageTransferReport_Notification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CCloud_ExternalStorageTransferReport_Notification)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string host = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->host().data(), this->host().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CCloud_ExternalStorageTransferReport_Notification.host");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string path = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CCloud_ExternalStorageTransferReport_Notification.path");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_upload = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_is_upload();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_upload_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool success = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_success();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 http_status_code = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_http_status_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &http_status_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 bytes_expected = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_bytes_expected();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bytes_expected_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 bytes_actual = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_bytes_actual();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bytes_actual_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 duration_ms = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_duration_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duration_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cellid = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_cellid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cellid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CCloud_ExternalStorageTransferReport_Notification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CCloud_ExternalStorageTransferReport_Notification)
  return false;
#undef DO_
}

void CCloud_ExternalStorageTransferReport_Notification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CCloud_ExternalStorageTransferReport_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string host = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCloud_ExternalStorageTransferReport_Notification.host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->host(), output);
  }

  // optional string path = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCloud_ExternalStorageTransferReport_Notification.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->path(), output);
  }

  // optional bool is_upload = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_upload(), output);
  }

  // optional bool success = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->success(), output);
  }

  // optional uint32 http_status_code = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->http_status_code(), output);
  }

  // optional uint64 bytes_expected = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->bytes_expected(), output);
  }

  // optional uint64 bytes_actual = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->bytes_actual(), output);
  }

  // optional uint32 duration_ms = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->duration_ms(), output);
  }

  // optional uint32 cellid = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->cellid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CCloud_ExternalStorageTransferReport_Notification)
}

::google::protobuf::uint8* CCloud_ExternalStorageTransferReport_Notification::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CCloud_ExternalStorageTransferReport_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string host = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCloud_ExternalStorageTransferReport_Notification.host");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->host(), target);
  }

  // optional string path = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCloud_ExternalStorageTransferReport_Notification.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path(), target);
  }

  // optional bool is_upload = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_upload(), target);
  }

  // optional bool success = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->success(), target);
  }

  // optional uint32 http_status_code = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->http_status_code(), target);
  }

  // optional uint64 bytes_expected = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->bytes_expected(), target);
  }

  // optional uint64 bytes_actual = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->bytes_actual(), target);
  }

  // optional uint32 duration_ms = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->duration_ms(), target);
  }

  // optional uint32 cellid = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->cellid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CCloud_ExternalStorageTransferReport_Notification)
  return target;
}

size_t CCloud_ExternalStorageTransferReport_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CCloud_ExternalStorageTransferReport_Notification)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string host = 1;
    if (has_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host());
    }

    // optional string path = 2;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

    // optional bool is_upload = 3;
    if (has_is_upload()) {
      total_size += 1 + 1;
    }

    // optional bool success = 4;
    if (has_success()) {
      total_size += 1 + 1;
    }

    // optional uint32 http_status_code = 5;
    if (has_http_status_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->http_status_code());
    }

    // optional uint64 bytes_expected = 6;
    if (has_bytes_expected()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bytes_expected());
    }

    // optional uint64 bytes_actual = 7;
    if (has_bytes_actual()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bytes_actual());
    }

    // optional uint32 duration_ms = 8;
    if (has_duration_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duration_ms());
    }

  }
  // optional uint32 cellid = 9;
  if (has_cellid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cellid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCloud_ExternalStorageTransferReport_Notification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CCloud_ExternalStorageTransferReport_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CCloud_ExternalStorageTransferReport_Notification* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CCloud_ExternalStorageTransferReport_Notification>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CCloud_ExternalStorageTransferReport_Notification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CCloud_ExternalStorageTransferReport_Notification)
    MergeFrom(*source);
  }
}

void CCloud_ExternalStorageTransferReport_Notification::MergeFrom(const CCloud_ExternalStorageTransferReport_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CCloud_ExternalStorageTransferReport_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_host();
      host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_path();
      path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
    }
    if (cached_has_bits & 0x00000004u) {
      is_upload_ = from.is_upload_;
    }
    if (cached_has_bits & 0x00000008u) {
      success_ = from.success_;
    }
    if (cached_has_bits & 0x00000010u) {
      http_status_code_ = from.http_status_code_;
    }
    if (cached_has_bits & 0x00000020u) {
      bytes_expected_ = from.bytes_expected_;
    }
    if (cached_has_bits & 0x00000040u) {
      bytes_actual_ = from.bytes_actual_;
    }
    if (cached_has_bits & 0x00000080u) {
      duration_ms_ = from.duration_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_cellid(from.cellid());
  }
}

void CCloud_ExternalStorageTransferReport_Notification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CCloud_ExternalStorageTransferReport_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCloud_ExternalStorageTransferReport_Notification::CopyFrom(const CCloud_ExternalStorageTransferReport_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CCloud_ExternalStorageTransferReport_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_ExternalStorageTransferReport_Notification::IsInitialized() const {
  return true;
}

void CCloud_ExternalStorageTransferReport_Notification::Swap(CCloud_ExternalStorageTransferReport_Notification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCloud_ExternalStorageTransferReport_Notification::InternalSwap(CCloud_ExternalStorageTransferReport_Notification* other) {
  host_.Swap(&other->host_);
  path_.Swap(&other->path_);
  std::swap(is_upload_, other->is_upload_);
  std::swap(success_, other->success_);
  std::swap(http_status_code_, other->http_status_code_);
  std::swap(bytes_expected_, other->bytes_expected_);
  std::swap(bytes_actual_, other->bytes_actual_);
  std::swap(duration_ms_, other->duration_ms_);
  std::swap(cellid_, other->cellid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CCloud_ExternalStorageTransferReport_Notification::GetMetadata() const {
  protobuf_steammessages_5fcloud_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fcloud_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CCloud_ExternalStorageTransferReport_Notification

// optional string host = 1;
bool CCloud_ExternalStorageTransferReport_Notification::has_host() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CCloud_ExternalStorageTransferReport_Notification::set_has_host() {
  _has_bits_[0] |= 0x00000001u;
}
void CCloud_ExternalStorageTransferReport_Notification::clear_has_host() {
  _has_bits_[0] &= ~0x00000001u;
}
void CCloud_ExternalStorageTransferReport_Notification::clear_host() {
  host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_host();
}
const ::std::string& CCloud_ExternalStorageTransferReport_Notification::host() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_ExternalStorageTransferReport_Notification.host)
  return host_.GetNoArena();
}
void CCloud_ExternalStorageTransferReport_Notification::set_host(const ::std::string& value) {
  set_has_host();
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_ExternalStorageTransferReport_Notification.host)
}
#if LANG_CXX11
void CCloud_ExternalStorageTransferReport_Notification::set_host(::std::string&& value) {
  set_has_host();
  host_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CCloud_ExternalStorageTransferReport_Notification.host)
}
#endif
void CCloud_ExternalStorageTransferReport_Notification::set_host(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_host();
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CCloud_ExternalStorageTransferReport_Notification.host)
}
void CCloud_ExternalStorageTransferReport_Notification::set_host(const char* value, size_t size) {
  set_has_host();
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CCloud_ExternalStorageTransferReport_Notification.host)
}
::std::string* CCloud_ExternalStorageTransferReport_Notification::mutable_host() {
  set_has_host();
  // @@protoc_insertion_point(field_mutable:proto.steam.CCloud_ExternalStorageTransferReport_Notification.host)
  return host_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CCloud_ExternalStorageTransferReport_Notification::release_host() {
  // @@protoc_insertion_point(field_release:proto.steam.CCloud_ExternalStorageTransferReport_Notification.host)
  clear_has_host();
  return host_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CCloud_ExternalStorageTransferReport_Notification::set_allocated_host(::std::string* host) {
  if (host != NULL) {
    set_has_host();
  } else {
    clear_has_host();
  }
  host_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CCloud_ExternalStorageTransferReport_Notification.host)
}

// optional string path = 2;
bool CCloud_ExternalStorageTransferReport_Notification::has_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CCloud_ExternalStorageTransferReport_Notification::set_has_path() {
  _has_bits_[0] |= 0x00000002u;
}
void CCloud_ExternalStorageTransferReport_Notification::clear_has_path() {
  _has_bits_[0] &= ~0x00000002u;
}
void CCloud_ExternalStorageTransferReport_Notification::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_path();
}
const ::std::string& CCloud_ExternalStorageTransferReport_Notification::path() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_ExternalStorageTransferReport_Notification.path)
  return path_.GetNoArena();
}
void CCloud_ExternalStorageTransferReport_Notification::set_path(const ::std::string& value) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_ExternalStorageTransferReport_Notification.path)
}
#if LANG_CXX11
void CCloud_ExternalStorageTransferReport_Notification::set_path(::std::string&& value) {
  set_has_path();
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CCloud_ExternalStorageTransferReport_Notification.path)
}
#endif
void CCloud_ExternalStorageTransferReport_Notification::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CCloud_ExternalStorageTransferReport_Notification.path)
}
void CCloud_ExternalStorageTransferReport_Notification::set_path(const char* value, size_t size) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CCloud_ExternalStorageTransferReport_Notification.path)
}
::std::string* CCloud_ExternalStorageTransferReport_Notification::mutable_path() {
  set_has_path();
  // @@protoc_insertion_point(field_mutable:proto.steam.CCloud_ExternalStorageTransferReport_Notification.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CCloud_ExternalStorageTransferReport_Notification::release_path() {
  // @@protoc_insertion_point(field_release:proto.steam.CCloud_ExternalStorageTransferReport_Notification.path)
  clear_has_path();
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CCloud_ExternalStorageTransferReport_Notification::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    set_has_path();
  } else {
    clear_has_path();
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CCloud_ExternalStorageTransferReport_Notification.path)
}

// optional bool is_upload = 3;
bool CCloud_ExternalStorageTransferReport_Notification::has_is_upload() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CCloud_ExternalStorageTransferReport_Notification::set_has_is_upload() {
  _has_bits_[0] |= 0x00000004u;
}
void CCloud_ExternalStorageTransferReport_Notification::clear_has_is_upload() {
  _has_bits_[0] &= ~0x00000004u;
}
void CCloud_ExternalStorageTransferReport_Notification::clear_is_upload() {
  is_upload_ = false;
  clear_has_is_upload();
}
bool CCloud_ExternalStorageTransferReport_Notification::is_upload() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_ExternalStorageTransferReport_Notification.is_upload)
  return is_upload_;
}
void CCloud_ExternalStorageTransferReport_Notification::set_is_upload(bool value) {
  set_has_is_upload();
  is_upload_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_ExternalStorageTransferReport_Notification.is_upload)
}

// optional bool success = 4;
bool CCloud_ExternalStorageTransferReport_Notification::has_success() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CCloud_ExternalStorageTransferReport_Notification::set_has_success() {
  _has_bits_[0] |= 0x00000008u;
}
void CCloud_ExternalStorageTransferReport_Notification::clear_has_success() {
  _has_bits_[0] &= ~0x00000008u;
}
void CCloud_ExternalStorageTransferReport_Notification::clear_success() {
  success_ = false;
  clear_has_success();
}
bool CCloud_ExternalStorageTransferReport_Notification::success() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_ExternalStorageTransferReport_Notification.success)
  return success_;
}
void CCloud_ExternalStorageTransferReport_Notification::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_ExternalStorageTransferReport_Notification.success)
}

// optional uint32 http_status_code = 5;
bool CCloud_ExternalStorageTransferReport_Notification::has_http_status_code() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CCloud_ExternalStorageTransferReport_Notification::set_has_http_status_code() {
  _has_bits_[0] |= 0x00000010u;
}
void CCloud_ExternalStorageTransferReport_Notification::clear_has_http_status_code() {
  _has_bits_[0] &= ~0x00000010u;
}
void CCloud_ExternalStorageTransferReport_Notification::clear_http_status_code() {
  http_status_code_ = 0u;
  clear_has_http_status_code();
}
::google::protobuf::uint32 CCloud_ExternalStorageTransferReport_Notification::http_status_code() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_ExternalStorageTransferReport_Notification.http_status_code)
  return http_status_code_;
}
void CCloud_ExternalStorageTransferReport_Notification::set_http_status_code(::google::protobuf::uint32 value) {
  set_has_http_status_code();
  http_status_code_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_ExternalStorageTransferReport_Notification.http_status_code)
}

// optional uint64 bytes_expected = 6;
bool CCloud_ExternalStorageTransferReport_Notification::has_bytes_expected() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CCloud_ExternalStorageTransferReport_Notification::set_has_bytes_expected() {
  _has_bits_[0] |= 0x00000020u;
}
void CCloud_ExternalStorageTransferReport_Notification::clear_has_bytes_expected() {
  _has_bits_[0] &= ~0x00000020u;
}
void CCloud_ExternalStorageTransferReport_Notification::clear_bytes_expected() {
  bytes_expected_ = GOOGLE_ULONGLONG(0);
  clear_has_bytes_expected();
}
::google::protobuf::uint64 CCloud_ExternalStorageTransferReport_Notification::bytes_expected() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_ExternalStorageTransferReport_Notification.bytes_expected)
  return bytes_expected_;
}
void CCloud_ExternalStorageTransferReport_Notification::set_bytes_expected(::google::protobuf::uint64 value) {
  set_has_bytes_expected();
  bytes_expected_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_ExternalStorageTransferReport_Notification.bytes_expected)
}

// optional uint64 bytes_actual = 7;
bool CCloud_ExternalStorageTransferReport_Notification::has_bytes_actual() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CCloud_ExternalStorageTransferReport_Notification::set_has_bytes_actual() {
  _has_bits_[0] |= 0x00000040u;
}
void CCloud_ExternalStorageTransferReport_Notification::clear_has_bytes_actual() {
  _has_bits_[0] &= ~0x00000040u;
}
void CCloud_ExternalStorageTransferReport_Notification::clear_bytes_actual() {
  bytes_actual_ = GOOGLE_ULONGLONG(0);
  clear_has_bytes_actual();
}
::google::protobuf::uint64 CCloud_ExternalStorageTransferReport_Notification::bytes_actual() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_ExternalStorageTransferReport_Notification.bytes_actual)
  return bytes_actual_;
}
void CCloud_ExternalStorageTransferReport_Notification::set_bytes_actual(::google::protobuf::uint64 value) {
  set_has_bytes_actual();
  bytes_actual_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_ExternalStorageTransferReport_Notification.bytes_actual)
}

// optional uint32 duration_ms = 8;
bool CCloud_ExternalStorageTransferReport_Notification::has_duration_ms() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CCloud_ExternalStorageTransferReport_Notification::set_has_duration_ms() {
  _has_bits_[0] |= 0x00000080u;
}
void CCloud_ExternalStorageTransferReport_Notification::clear_has_duration_ms() {
  _has_bits_[0] &= ~0x00000080u;
}
void CCloud_ExternalStorageTransferReport_Notification::clear_duration_ms() {
  duration_ms_ = 0u;
  clear_has_duration_ms();
}
::google::protobuf::uint32 CCloud_ExternalStorageTransferReport_Notification::duration_ms() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_ExternalStorageTransferReport_Notification.duration_ms)
  return duration_ms_;
}
void CCloud_ExternalStorageTransferReport_Notification::set_duration_ms(::google::protobuf::uint32 value) {
  set_has_duration_ms();
  duration_ms_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_ExternalStorageTransferReport_Notification.duration_ms)
}

// optional uint32 cellid = 9;
bool CCloud_ExternalStorageTransferReport_Notification::has_cellid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CCloud_ExternalStorageTransferReport_Notification::set_has_cellid() {
  _has_bits_[0] |= 0x00000100u;
}
void CCloud_ExternalStorageTransferReport_Notification::clear_has_cellid() {
  _has_bits_[0] &= ~0x00000100u;
}
void CCloud_ExternalStorageTransferReport_Notification::clear_cellid() {
  cellid_ = 0u;
  clear_has_cellid();
}
::google::protobuf::uint32 CCloud_ExternalStorageTransferReport_Notification::cellid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_ExternalStorageTransferReport_Notification.cellid)
  return cellid_;
}
void CCloud_ExternalStorageTransferReport_Notification::set_cellid(::google::protobuf::uint32 value) {
  set_has_cellid();
  cellid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_ExternalStorageTransferReport_Notification.cellid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCloud_ClientBeginFileUpload_Request::kAppidFieldNumber;
const int CCloud_ClientBeginFileUpload_Request::kFileSizeFieldNumber;
const int CCloud_ClientBeginFileUpload_Request::kRawFileSizeFieldNumber;
const int CCloud_ClientBeginFileUpload_Request::kFileShaFieldNumber;
const int CCloud_ClientBeginFileUpload_Request::kTimeStampFieldNumber;
const int CCloud_ClientBeginFileUpload_Request::kFilenameFieldNumber;
const int CCloud_ClientBeginFileUpload_Request::kPlatformsToSyncFieldNumber;
const int CCloud_ClientBeginFileUpload_Request::kCellIdFieldNumber;
const int CCloud_ClientBeginFileUpload_Request::kCanEncryptFieldNumber;
const int CCloud_ClientBeginFileUpload_Request::kIsSharedFileFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCloud_ClientBeginFileUpload_Request::CCloud_ClientBeginFileUpload_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fcloud_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CCloud_ClientBeginFileUpload_Request)
}
CCloud_ClientBeginFileUpload_Request::CCloud_ClientBeginFileUpload_Request(const CCloud_ClientBeginFileUpload_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_sha_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_file_sha()) {
    file_sha_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_sha_);
  }
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_filename()) {
    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  ::memcpy(&appid_, &from.appid_,
    reinterpret_cast<char*>(&platforms_to_sync_) -
    reinterpret_cast<char*>(&appid_) + sizeof(platforms_to_sync_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CCloud_ClientBeginFileUpload_Request)
}

void CCloud_ClientBeginFileUpload_Request::SharedCtor() {
  _cached_size_ = 0;
  file_sha_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&appid_, 0, reinterpret_cast<char*>(&is_shared_file_) -
    reinterpret_cast<char*>(&appid_) + sizeof(is_shared_file_));
  platforms_to_sync_ = 4294967295u;
}

CCloud_ClientBeginFileUpload_Request::~CCloud_ClientBeginFileUpload_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CCloud_ClientBeginFileUpload_Request)
  SharedDtor();
}

void CCloud_ClientBeginFileUpload_Request::SharedDtor() {
  file_sha_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CCloud_ClientBeginFileUpload_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCloud_ClientBeginFileUpload_Request::descriptor() {
  protobuf_steammessages_5fcloud_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fcloud_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CCloud_ClientBeginFileUpload_Request& CCloud_ClientBeginFileUpload_Request::default_instance() {
  protobuf_steammessages_5fcloud_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CCloud_ClientBeginFileUpload_Request* CCloud_ClientBeginFileUpload_Request::New(::google::protobuf::Arena* arena) const {
  CCloud_ClientBeginFileUpload_Request* n = new CCloud_ClientBeginFileUpload_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CCloud_ClientBeginFileUpload_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CCloud_ClientBeginFileUpload_Request)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_file_sha()) {
      GOOGLE_DCHECK(!file_sha_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*file_sha_.UnsafeRawStringPointer())->clear();
    }
    if (has_filename()) {
      GOOGLE_DCHECK(!filename_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*filename_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 252u) {
    ::memset(&appid_, 0, reinterpret_cast<char*>(&can_encrypt_) -
      reinterpret_cast<char*>(&appid_) + sizeof(can_encrypt_));
  }
  if (_has_bits_[8 / 32] & 768u) {
    is_shared_file_ = false;
    platforms_to_sync_ = 4294967295u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CCloud_ClientBeginFileUpload_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CCloud_ClientBeginFileUpload_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1 [(.proto.steam.description) = "App ID for which the file is being uploaded."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 file_size = 2 [(.proto.steam.description) = "file size as transmitted and stored in Cloud."];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_file_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &file_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 raw_file_size = 3 [(.proto.steam.description) = "file size before any compression and/or encryption."];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_raw_file_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raw_file_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes file_sha = 4 [(.proto.steam.description) = "SHA-1 of raw file."];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_file_sha()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 time_stamp = 5 [(.proto.steam.description) = "Timestamp of file."];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_time_stamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_stamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string filename = 6 [(.proto.steam.description) = "Name of the file to store in the cloud."];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CCloud_ClientBeginFileUpload_Request.filename");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 platforms_to_sync = 7 [default = 4294967295];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_platforms_to_sync();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &platforms_to_sync_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cell_id = 9 [(.proto.steam.description) = "Client\'s cell ID so we can pick storage location."];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_cell_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cell_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool can_encrypt = 10 [(.proto.steam.description) = "if true, client can encrypt the file before uploading it"];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_can_encrypt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_encrypt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_shared_file = 11 [(.proto.steam.description) = "if true, this is going to be UGC or a screenshot or some other shared file"];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_is_shared_file();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_shared_file_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CCloud_ClientBeginFileUpload_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CCloud_ClientBeginFileUpload_Request)
  return false;
#undef DO_
}

void CCloud_ClientBeginFileUpload_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CCloud_ClientBeginFileUpload_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1 [(.proto.steam.description) = "App ID for which the file is being uploaded."];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional uint32 file_size = 2 [(.proto.steam.description) = "file size as transmitted and stored in Cloud."];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->file_size(), output);
  }

  // optional uint32 raw_file_size = 3 [(.proto.steam.description) = "file size before any compression and/or encryption."];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->raw_file_size(), output);
  }

  // optional bytes file_sha = 4 [(.proto.steam.description) = "SHA-1 of raw file."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->file_sha(), output);
  }

  // optional uint64 time_stamp = 5 [(.proto.steam.description) = "Timestamp of file."];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->time_stamp(), output);
  }

  // optional string filename = 6 [(.proto.steam.description) = "Name of the file to store in the cloud."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCloud_ClientBeginFileUpload_Request.filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->filename(), output);
  }

  // optional uint32 platforms_to_sync = 7 [default = 4294967295];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->platforms_to_sync(), output);
  }

  // optional uint32 cell_id = 9 [(.proto.steam.description) = "Client\'s cell ID so we can pick storage location."];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->cell_id(), output);
  }

  // optional bool can_encrypt = 10 [(.proto.steam.description) = "if true, client can encrypt the file before uploading it"];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->can_encrypt(), output);
  }

  // optional bool is_shared_file = 11 [(.proto.steam.description) = "if true, this is going to be UGC or a screenshot or some other shared file"];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->is_shared_file(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CCloud_ClientBeginFileUpload_Request)
}

::google::protobuf::uint8* CCloud_ClientBeginFileUpload_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CCloud_ClientBeginFileUpload_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1 [(.proto.steam.description) = "App ID for which the file is being uploaded."];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional uint32 file_size = 2 [(.proto.steam.description) = "file size as transmitted and stored in Cloud."];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->file_size(), target);
  }

  // optional uint32 raw_file_size = 3 [(.proto.steam.description) = "file size before any compression and/or encryption."];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->raw_file_size(), target);
  }

  // optional bytes file_sha = 4 [(.proto.steam.description) = "SHA-1 of raw file."];
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->file_sha(), target);
  }

  // optional uint64 time_stamp = 5 [(.proto.steam.description) = "Timestamp of file."];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->time_stamp(), target);
  }

  // optional string filename = 6 [(.proto.steam.description) = "Name of the file to store in the cloud."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCloud_ClientBeginFileUpload_Request.filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->filename(), target);
  }

  // optional uint32 platforms_to_sync = 7 [default = 4294967295];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->platforms_to_sync(), target);
  }

  // optional uint32 cell_id = 9 [(.proto.steam.description) = "Client\'s cell ID so we can pick storage location."];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->cell_id(), target);
  }

  // optional bool can_encrypt = 10 [(.proto.steam.description) = "if true, client can encrypt the file before uploading it"];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->can_encrypt(), target);
  }

  // optional bool is_shared_file = 11 [(.proto.steam.description) = "if true, this is going to be UGC or a screenshot or some other shared file"];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->is_shared_file(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CCloud_ClientBeginFileUpload_Request)
  return target;
}

size_t CCloud_ClientBeginFileUpload_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CCloud_ClientBeginFileUpload_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional bytes file_sha = 4 [(.proto.steam.description) = "SHA-1 of raw file."];
    if (has_file_sha()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->file_sha());
    }

    // optional string filename = 6 [(.proto.steam.description) = "Name of the file to store in the cloud."];
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional uint32 appid = 1 [(.proto.steam.description) = "App ID for which the file is being uploaded."];
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional uint32 file_size = 2 [(.proto.steam.description) = "file size as transmitted and stored in Cloud."];
    if (has_file_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->file_size());
    }

    // optional uint64 time_stamp = 5 [(.proto.steam.description) = "Timestamp of file."];
    if (has_time_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time_stamp());
    }

    // optional uint32 raw_file_size = 3 [(.proto.steam.description) = "file size before any compression and/or encryption."];
    if (has_raw_file_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->raw_file_size());
    }

    // optional uint32 cell_id = 9 [(.proto.steam.description) = "Client\'s cell ID so we can pick storage location."];
    if (has_cell_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cell_id());
    }

    // optional bool can_encrypt = 10 [(.proto.steam.description) = "if true, client can encrypt the file before uploading it"];
    if (has_can_encrypt()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional bool is_shared_file = 11 [(.proto.steam.description) = "if true, this is going to be UGC or a screenshot or some other shared file"];
    if (has_is_shared_file()) {
      total_size += 1 + 1;
    }

    // optional uint32 platforms_to_sync = 7 [default = 4294967295];
    if (has_platforms_to_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->platforms_to_sync());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCloud_ClientBeginFileUpload_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CCloud_ClientBeginFileUpload_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CCloud_ClientBeginFileUpload_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CCloud_ClientBeginFileUpload_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CCloud_ClientBeginFileUpload_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CCloud_ClientBeginFileUpload_Request)
    MergeFrom(*source);
  }
}

void CCloud_ClientBeginFileUpload_Request::MergeFrom(const CCloud_ClientBeginFileUpload_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CCloud_ClientBeginFileUpload_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_file_sha();
      file_sha_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_sha_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_filename();
      filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
    }
    if (cached_has_bits & 0x00000004u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000008u) {
      file_size_ = from.file_size_;
    }
    if (cached_has_bits & 0x00000010u) {
      time_stamp_ = from.time_stamp_;
    }
    if (cached_has_bits & 0x00000020u) {
      raw_file_size_ = from.raw_file_size_;
    }
    if (cached_has_bits & 0x00000040u) {
      cell_id_ = from.cell_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      can_encrypt_ = from.can_encrypt_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      is_shared_file_ = from.is_shared_file_;
    }
    if (cached_has_bits & 0x00000200u) {
      platforms_to_sync_ = from.platforms_to_sync_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CCloud_ClientBeginFileUpload_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CCloud_ClientBeginFileUpload_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCloud_ClientBeginFileUpload_Request::CopyFrom(const CCloud_ClientBeginFileUpload_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CCloud_ClientBeginFileUpload_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_ClientBeginFileUpload_Request::IsInitialized() const {
  return true;
}

void CCloud_ClientBeginFileUpload_Request::Swap(CCloud_ClientBeginFileUpload_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCloud_ClientBeginFileUpload_Request::InternalSwap(CCloud_ClientBeginFileUpload_Request* other) {
  file_sha_.Swap(&other->file_sha_);
  filename_.Swap(&other->filename_);
  std::swap(appid_, other->appid_);
  std::swap(file_size_, other->file_size_);
  std::swap(time_stamp_, other->time_stamp_);
  std::swap(raw_file_size_, other->raw_file_size_);
  std::swap(cell_id_, other->cell_id_);
  std::swap(can_encrypt_, other->can_encrypt_);
  std::swap(is_shared_file_, other->is_shared_file_);
  std::swap(platforms_to_sync_, other->platforms_to_sync_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CCloud_ClientBeginFileUpload_Request::GetMetadata() const {
  protobuf_steammessages_5fcloud_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fcloud_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CCloud_ClientBeginFileUpload_Request

// optional uint32 appid = 1 [(.proto.steam.description) = "App ID for which the file is being uploaded."];
bool CCloud_ClientBeginFileUpload_Request::has_appid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CCloud_ClientBeginFileUpload_Request::set_has_appid() {
  _has_bits_[0] |= 0x00000004u;
}
void CCloud_ClientBeginFileUpload_Request::clear_has_appid() {
  _has_bits_[0] &= ~0x00000004u;
}
void CCloud_ClientBeginFileUpload_Request::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
::google::protobuf::uint32 CCloud_ClientBeginFileUpload_Request::appid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_ClientBeginFileUpload_Request.appid)
  return appid_;
}
void CCloud_ClientBeginFileUpload_Request::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_ClientBeginFileUpload_Request.appid)
}

// optional uint32 file_size = 2 [(.proto.steam.description) = "file size as transmitted and stored in Cloud."];
bool CCloud_ClientBeginFileUpload_Request::has_file_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CCloud_ClientBeginFileUpload_Request::set_has_file_size() {
  _has_bits_[0] |= 0x00000008u;
}
void CCloud_ClientBeginFileUpload_Request::clear_has_file_size() {
  _has_bits_[0] &= ~0x00000008u;
}
void CCloud_ClientBeginFileUpload_Request::clear_file_size() {
  file_size_ = 0u;
  clear_has_file_size();
}
::google::protobuf::uint32 CCloud_ClientBeginFileUpload_Request::file_size() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_ClientBeginFileUpload_Request.file_size)
  return file_size_;
}
void CCloud_ClientBeginFileUpload_Request::set_file_size(::google::protobuf::uint32 value) {
  set_has_file_size();
  file_size_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_ClientBeginFileUpload_Request.file_size)
}

// optional uint32 raw_file_size = 3 [(.proto.steam.description) = "file size before any compression and/or encryption."];
bool CCloud_ClientBeginFileUpload_Request::has_raw_file_size() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CCloud_ClientBeginFileUpload_Request::set_has_raw_file_size() {
  _has_bits_[0] |= 0x00000020u;
}
void CCloud_ClientBeginFileUpload_Request::clear_has_raw_file_size() {
  _has_bits_[0] &= ~0x00000020u;
}
void CCloud_ClientBeginFileUpload_Request::clear_raw_file_size() {
  raw_file_size_ = 0u;
  clear_has_raw_file_size();
}
::google::protobuf::uint32 CCloud_ClientBeginFileUpload_Request::raw_file_size() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_ClientBeginFileUpload_Request.raw_file_size)
  return raw_file_size_;
}
void CCloud_ClientBeginFileUpload_Request::set_raw_file_size(::google::protobuf::uint32 value) {
  set_has_raw_file_size();
  raw_file_size_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_ClientBeginFileUpload_Request.raw_file_size)
}

// optional bytes file_sha = 4 [(.proto.steam.description) = "SHA-1 of raw file."];
bool CCloud_ClientBeginFileUpload_Request::has_file_sha() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CCloud_ClientBeginFileUpload_Request::set_has_file_sha() {
  _has_bits_[0] |= 0x00000001u;
}
void CCloud_ClientBeginFileUpload_Request::clear_has_file_sha() {
  _has_bits_[0] &= ~0x00000001u;
}
void CCloud_ClientBeginFileUpload_Request::clear_file_sha() {
  file_sha_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_sha();
}
const ::std::string& CCloud_ClientBeginFileUpload_Request::file_sha() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_ClientBeginFileUpload_Request.file_sha)
  return file_sha_.GetNoArena();
}
void CCloud_ClientBeginFileUpload_Request::set_file_sha(const ::std::string& value) {
  set_has_file_sha();
  file_sha_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_ClientBeginFileUpload_Request.file_sha)
}
#if LANG_CXX11
void CCloud_ClientBeginFileUpload_Request::set_file_sha(::std::string&& value) {
  set_has_file_sha();
  file_sha_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CCloud_ClientBeginFileUpload_Request.file_sha)
}
#endif
void CCloud_ClientBeginFileUpload_Request::set_file_sha(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_file_sha();
  file_sha_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CCloud_ClientBeginFileUpload_Request.file_sha)
}
void CCloud_ClientBeginFileUpload_Request::set_file_sha(const void* value, size_t size) {
  set_has_file_sha();
  file_sha_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CCloud_ClientBeginFileUpload_Request.file_sha)
}
::std::string* CCloud_ClientBeginFileUpload_Request::mutable_file_sha() {
  set_has_file_sha();
  // @@protoc_insertion_point(field_mutable:proto.steam.CCloud_ClientBeginFileUpload_Request.file_sha)
  return file_sha_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CCloud_ClientBeginFileUpload_Request::release_file_sha() {
  // @@protoc_insertion_point(field_release:proto.steam.CCloud_ClientBeginFileUpload_Request.file_sha)
  clear_has_file_sha();
  return file_sha_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CCloud_ClientBeginFileUpload_Request::set_allocated_file_sha(::std::string* file_sha) {
  if (file_sha != NULL) {
    set_has_file_sha();
  } else {
    clear_has_file_sha();
  }
  file_sha_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_sha);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CCloud_ClientBeginFileUpload_Request.file_sha)
}

// optional uint64 time_stamp = 5 [(.proto.steam.description) = "Timestamp of file."];
bool CCloud_ClientBeginFileUpload_Request::has_time_stamp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CCloud_ClientBeginFileUpload_Request::set_has_time_stamp() {
  _has_bits_[0] |= 0x00000010u;
}
void CCloud_ClientBeginFileUpload_Request::clear_has_time_stamp() {
  _has_bits_[0] &= ~0x00000010u;
}
void CCloud_ClientBeginFileUpload_Request::clear_time_stamp() {
  time_stamp_ = GOOGLE_ULONGLONG(0);
  clear_has_time_stamp();
}
::google::protobuf::uint64 CCloud_ClientBeginFileUpload_Request::time_stamp() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_ClientBeginFileUpload_Request.time_stamp)
  return time_stamp_;
}
void CCloud_ClientBeginFileUpload_Request::set_time_stamp(::google::protobuf::uint64 value) {
  set_has_time_stamp();
  time_stamp_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_ClientBeginFileUpload_Request.time_stamp)
}

// optional string filename = 6 [(.proto.steam.description) = "Name of the file to store in the cloud."];
bool CCloud_ClientBeginFileUpload_Request::has_filename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CCloud_ClientBeginFileUpload_Request::set_has_filename() {
  _has_bits_[0] |= 0x00000002u;
}
void CCloud_ClientBeginFileUpload_Request::clear_has_filename() {
  _has_bits_[0] &= ~0x00000002u;
}
void CCloud_ClientBeginFileUpload_Request::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_filename();
}
const ::std::string& CCloud_ClientBeginFileUpload_Request::filename() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_ClientBeginFileUpload_Request.filename)
  return filename_.GetNoArena();
}
void CCloud_ClientBeginFileUpload_Request::set_filename(const ::std::string& value) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_ClientBeginFileUpload_Request.filename)
}
#if LANG_CXX11
void CCloud_ClientBeginFileUpload_Request::set_filename(::std::string&& value) {
  set_has_filename();
  filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CCloud_ClientBeginFileUpload_Request.filename)
}
#endif
void CCloud_ClientBeginFileUpload_Request::set_filename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CCloud_ClientBeginFileUpload_Request.filename)
}
void CCloud_ClientBeginFileUpload_Request::set_filename(const char* value, size_t size) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CCloud_ClientBeginFileUpload_Request.filename)
}
::std::string* CCloud_ClientBeginFileUpload_Request::mutable_filename() {
  set_has_filename();
  // @@protoc_insertion_point(field_mutable:proto.steam.CCloud_ClientBeginFileUpload_Request.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CCloud_ClientBeginFileUpload_Request::release_filename() {
  // @@protoc_insertion_point(field_release:proto.steam.CCloud_ClientBeginFileUpload_Request.filename)
  clear_has_filename();
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CCloud_ClientBeginFileUpload_Request::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    set_has_filename();
  } else {
    clear_has_filename();
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CCloud_ClientBeginFileUpload_Request.filename)
}

// optional uint32 platforms_to_sync = 7 [default = 4294967295];
bool CCloud_ClientBeginFileUpload_Request::has_platforms_to_sync() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CCloud_ClientBeginFileUpload_Request::set_has_platforms_to_sync() {
  _has_bits_[0] |= 0x00000200u;
}
void CCloud_ClientBeginFileUpload_Request::clear_has_platforms_to_sync() {
  _has_bits_[0] &= ~0x00000200u;
}
void CCloud_ClientBeginFileUpload_Request::clear_platforms_to_sync() {
  platforms_to_sync_ = 4294967295u;
  clear_has_platforms_to_sync();
}
::google::protobuf::uint32 CCloud_ClientBeginFileUpload_Request::platforms_to_sync() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_ClientBeginFileUpload_Request.platforms_to_sync)
  return platforms_to_sync_;
}
void CCloud_ClientBeginFileUpload_Request::set_platforms_to_sync(::google::protobuf::uint32 value) {
  set_has_platforms_to_sync();
  platforms_to_sync_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_ClientBeginFileUpload_Request.platforms_to_sync)
}

// optional uint32 cell_id = 9 [(.proto.steam.description) = "Client\'s cell ID so we can pick storage location."];
bool CCloud_ClientBeginFileUpload_Request::has_cell_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CCloud_ClientBeginFileUpload_Request::set_has_cell_id() {
  _has_bits_[0] |= 0x00000040u;
}
void CCloud_ClientBeginFileUpload_Request::clear_has_cell_id() {
  _has_bits_[0] &= ~0x00000040u;
}
void CCloud_ClientBeginFileUpload_Request::clear_cell_id() {
  cell_id_ = 0u;
  clear_has_cell_id();
}
::google::protobuf::uint32 CCloud_ClientBeginFileUpload_Request::cell_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_ClientBeginFileUpload_Request.cell_id)
  return cell_id_;
}
void CCloud_ClientBeginFileUpload_Request::set_cell_id(::google::protobuf::uint32 value) {
  set_has_cell_id();
  cell_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_ClientBeginFileUpload_Request.cell_id)
}

// optional bool can_encrypt = 10 [(.proto.steam.description) = "if true, client can encrypt the file before uploading it"];
bool CCloud_ClientBeginFileUpload_Request::has_can_encrypt() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CCloud_ClientBeginFileUpload_Request::set_has_can_encrypt() {
  _has_bits_[0] |= 0x00000080u;
}
void CCloud_ClientBeginFileUpload_Request::clear_has_can_encrypt() {
  _has_bits_[0] &= ~0x00000080u;
}
void CCloud_ClientBeginFileUpload_Request::clear_can_encrypt() {
  can_encrypt_ = false;
  clear_has_can_encrypt();
}
bool CCloud_ClientBeginFileUpload_Request::can_encrypt() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_ClientBeginFileUpload_Request.can_encrypt)
  return can_encrypt_;
}
void CCloud_ClientBeginFileUpload_Request::set_can_encrypt(bool value) {
  set_has_can_encrypt();
  can_encrypt_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_ClientBeginFileUpload_Request.can_encrypt)
}

// optional bool is_shared_file = 11 [(.proto.steam.description) = "if true, this is going to be UGC or a screenshot or some other shared file"];
bool CCloud_ClientBeginFileUpload_Request::has_is_shared_file() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CCloud_ClientBeginFileUpload_Request::set_has_is_shared_file() {
  _has_bits_[0] |= 0x00000100u;
}
void CCloud_ClientBeginFileUpload_Request::clear_has_is_shared_file() {
  _has_bits_[0] &= ~0x00000100u;
}
void CCloud_ClientBeginFileUpload_Request::clear_is_shared_file() {
  is_shared_file_ = false;
  clear_has_is_shared_file();
}
bool CCloud_ClientBeginFileUpload_Request::is_shared_file() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_ClientBeginFileUpload_Request.is_shared_file)
  return is_shared_file_;
}
void CCloud_ClientBeginFileUpload_Request::set_is_shared_file(bool value) {
  set_has_is_shared_file();
  is_shared_file_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_ClientBeginFileUpload_Request.is_shared_file)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientCloudFileUploadBlockDetails_HTTPHeaders::kNameFieldNumber;
const int ClientCloudFileUploadBlockDetails_HTTPHeaders::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientCloudFileUploadBlockDetails_HTTPHeaders::ClientCloudFileUploadBlockDetails_HTTPHeaders()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fcloud_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.ClientCloudFileUploadBlockDetails.HTTPHeaders)
}
ClientCloudFileUploadBlockDetails_HTTPHeaders::ClientCloudFileUploadBlockDetails_HTTPHeaders(const ClientCloudFileUploadBlockDetails_HTTPHeaders& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.steam.ClientCloudFileUploadBlockDetails.HTTPHeaders)
}

void ClientCloudFileUploadBlockDetails_HTTPHeaders::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ClientCloudFileUploadBlockDetails_HTTPHeaders::~ClientCloudFileUploadBlockDetails_HTTPHeaders() {
  // @@protoc_insertion_point(destructor:proto.steam.ClientCloudFileUploadBlockDetails.HTTPHeaders)
  SharedDtor();
}

void ClientCloudFileUploadBlockDetails_HTTPHeaders::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ClientCloudFileUploadBlockDetails_HTTPHeaders::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientCloudFileUploadBlockDetails_HTTPHeaders::descriptor() {
  protobuf_steammessages_5fcloud_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fcloud_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ClientCloudFileUploadBlockDetails_HTTPHeaders& ClientCloudFileUploadBlockDetails_HTTPHeaders::default_instance() {
  protobuf_steammessages_5fcloud_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

ClientCloudFileUploadBlockDetails_HTTPHeaders* ClientCloudFileUploadBlockDetails_HTTPHeaders::New(::google::protobuf::Arena* arena) const {
  ClientCloudFileUploadBlockDetails_HTTPHeaders* n = new ClientCloudFileUploadBlockDetails_HTTPHeaders;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClientCloudFileUploadBlockDetails_HTTPHeaders::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.ClientCloudFileUploadBlockDetails.HTTPHeaders)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_value()) {
      GOOGLE_DCHECK(!value_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*value_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ClientCloudFileUploadBlockDetails_HTTPHeaders::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.ClientCloudFileUploadBlockDetails.HTTPHeaders)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.ClientCloudFileUploadBlockDetails.HTTPHeaders.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.ClientCloudFileUploadBlockDetails.HTTPHeaders.value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.ClientCloudFileUploadBlockDetails.HTTPHeaders)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.ClientCloudFileUploadBlockDetails.HTTPHeaders)
  return false;
#undef DO_
}

void ClientCloudFileUploadBlockDetails_HTTPHeaders::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.ClientCloudFileUploadBlockDetails.HTTPHeaders)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.ClientCloudFileUploadBlockDetails.HTTPHeaders.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.ClientCloudFileUploadBlockDetails.HTTPHeaders.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.ClientCloudFileUploadBlockDetails.HTTPHeaders)
}

::google::protobuf::uint8* ClientCloudFileUploadBlockDetails_HTTPHeaders::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.ClientCloudFileUploadBlockDetails.HTTPHeaders)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.ClientCloudFileUploadBlockDetails.HTTPHeaders.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.ClientCloudFileUploadBlockDetails.HTTPHeaders.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.ClientCloudFileUploadBlockDetails.HTTPHeaders)
  return target;
}

size_t ClientCloudFileUploadBlockDetails_HTTPHeaders::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.ClientCloudFileUploadBlockDetails.HTTPHeaders)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientCloudFileUploadBlockDetails_HTTPHeaders::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.ClientCloudFileUploadBlockDetails.HTTPHeaders)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientCloudFileUploadBlockDetails_HTTPHeaders* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClientCloudFileUploadBlockDetails_HTTPHeaders>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.ClientCloudFileUploadBlockDetails.HTTPHeaders)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.ClientCloudFileUploadBlockDetails.HTTPHeaders)
    MergeFrom(*source);
  }
}

void ClientCloudFileUploadBlockDetails_HTTPHeaders::MergeFrom(const ClientCloudFileUploadBlockDetails_HTTPHeaders& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.ClientCloudFileUploadBlockDetails.HTTPHeaders)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
}

void ClientCloudFileUploadBlockDetails_HTTPHeaders::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.ClientCloudFileUploadBlockDetails.HTTPHeaders)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientCloudFileUploadBlockDetails_HTTPHeaders::CopyFrom(const ClientCloudFileUploadBlockDetails_HTTPHeaders& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.ClientCloudFileUploadBlockDetails.HTTPHeaders)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientCloudFileUploadBlockDetails_HTTPHeaders::IsInitialized() const {
  return true;
}

void ClientCloudFileUploadBlockDetails_HTTPHeaders::Swap(ClientCloudFileUploadBlockDetails_HTTPHeaders* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientCloudFileUploadBlockDetails_HTTPHeaders::InternalSwap(ClientCloudFileUploadBlockDetails_HTTPHeaders* other) {
  name_.Swap(&other->name_);
  value_.Swap(&other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClientCloudFileUploadBlockDetails_HTTPHeaders::GetMetadata() const {
  protobuf_steammessages_5fcloud_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fcloud_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClientCloudFileUploadBlockDetails_HTTPHeaders

// optional string name = 1;
bool ClientCloudFileUploadBlockDetails_HTTPHeaders::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ClientCloudFileUploadBlockDetails_HTTPHeaders::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void ClientCloudFileUploadBlockDetails_HTTPHeaders::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void ClientCloudFileUploadBlockDetails_HTTPHeaders::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& ClientCloudFileUploadBlockDetails_HTTPHeaders::name() const {
  // @@protoc_insertion_point(field_get:proto.steam.ClientCloudFileUploadBlockDetails.HTTPHeaders.name)
  return name_.GetNoArena();
}
void ClientCloudFileUploadBlockDetails_HTTPHeaders::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.ClientCloudFileUploadBlockDetails.HTTPHeaders.name)
}
#if LANG_CXX11
void ClientCloudFileUploadBlockDetails_HTTPHeaders::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.ClientCloudFileUploadBlockDetails.HTTPHeaders.name)
}
#endif
void ClientCloudFileUploadBlockDetails_HTTPHeaders::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.ClientCloudFileUploadBlockDetails.HTTPHeaders.name)
}
void ClientCloudFileUploadBlockDetails_HTTPHeaders::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.ClientCloudFileUploadBlockDetails.HTTPHeaders.name)
}
::std::string* ClientCloudFileUploadBlockDetails_HTTPHeaders::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:proto.steam.ClientCloudFileUploadBlockDetails.HTTPHeaders.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ClientCloudFileUploadBlockDetails_HTTPHeaders::release_name() {
  // @@protoc_insertion_point(field_release:proto.steam.ClientCloudFileUploadBlockDetails.HTTPHeaders.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ClientCloudFileUploadBlockDetails_HTTPHeaders::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.ClientCloudFileUploadBlockDetails.HTTPHeaders.name)
}

// optional string value = 2;
bool ClientCloudFileUploadBlockDetails_HTTPHeaders::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ClientCloudFileUploadBlockDetails_HTTPHeaders::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void ClientCloudFileUploadBlockDetails_HTTPHeaders::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void ClientCloudFileUploadBlockDetails_HTTPHeaders::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
const ::std::string& ClientCloudFileUploadBlockDetails_HTTPHeaders::value() const {
  // @@protoc_insertion_point(field_get:proto.steam.ClientCloudFileUploadBlockDetails.HTTPHeaders.value)
  return value_.GetNoArena();
}
void ClientCloudFileUploadBlockDetails_HTTPHeaders::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.ClientCloudFileUploadBlockDetails.HTTPHeaders.value)
}
#if LANG_CXX11
void ClientCloudFileUploadBlockDetails_HTTPHeaders::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.ClientCloudFileUploadBlockDetails.HTTPHeaders.value)
}
#endif
void ClientCloudFileUploadBlockDetails_HTTPHeaders::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.ClientCloudFileUploadBlockDetails.HTTPHeaders.value)
}
void ClientCloudFileUploadBlockDetails_HTTPHeaders::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.ClientCloudFileUploadBlockDetails.HTTPHeaders.value)
}
::std::string* ClientCloudFileUploadBlockDetails_HTTPHeaders::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:proto.steam.ClientCloudFileUploadBlockDetails.HTTPHeaders.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ClientCloudFileUploadBlockDetails_HTTPHeaders::release_value() {
  // @@protoc_insertion_point(field_release:proto.steam.ClientCloudFileUploadBlockDetails.HTTPHeaders.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ClientCloudFileUploadBlockDetails_HTTPHeaders::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.ClientCloudFileUploadBlockDetails.HTTPHeaders.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientCloudFileUploadBlockDetails::kUrlHostFieldNumber;
const int ClientCloudFileUploadBlockDetails::kUrlPathFieldNumber;
const int ClientCloudFileUploadBlockDetails::kUseHttpsFieldNumber;
const int ClientCloudFileUploadBlockDetails::kHttpMethodFieldNumber;
const int ClientCloudFileUploadBlockDetails::kRequestHeadersFieldNumber;
const int ClientCloudFileUploadBlockDetails::kBlockOffsetFieldNumber;
const int ClientCloudFileUploadBlockDetails::kBlockLengthFieldNumber;
const int ClientCloudFileUploadBlockDetails::kExplicitBodyDataFieldNumber;
const int ClientCloudFileUploadBlockDetails::kMayParallelizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientCloudFileUploadBlockDetails::ClientCloudFileUploadBlockDetails()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fcloud_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.ClientCloudFileUploadBlockDetails)
}
ClientCloudFileUploadBlockDetails::ClientCloudFileUploadBlockDetails(const ClientCloudFileUploadBlockDetails& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      request_headers_(from.request_headers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url_host()) {
    url_host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_host_);
  }
  url_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url_path()) {
    url_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_path_);
  }
  explicit_body_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_explicit_body_data()) {
    explicit_body_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.explicit_body_data_);
  }
  ::memcpy(&http_method_, &from.http_method_,
    reinterpret_cast<char*>(&block_length_) -
    reinterpret_cast<char*>(&http_method_) + sizeof(block_length_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.ClientCloudFileUploadBlockDetails)
}

void ClientCloudFileUploadBlockDetails::SharedCtor() {
  _cached_size_ = 0;
  url_host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  explicit_body_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&http_method_, 0, reinterpret_cast<char*>(&block_length_) -
    reinterpret_cast<char*>(&http_method_) + sizeof(block_length_));
}

ClientCloudFileUploadBlockDetails::~ClientCloudFileUploadBlockDetails() {
  // @@protoc_insertion_point(destructor:proto.steam.ClientCloudFileUploadBlockDetails)
  SharedDtor();
}

void ClientCloudFileUploadBlockDetails::SharedDtor() {
  url_host_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  explicit_body_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ClientCloudFileUploadBlockDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientCloudFileUploadBlockDetails::descriptor() {
  protobuf_steammessages_5fcloud_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fcloud_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ClientCloudFileUploadBlockDetails& ClientCloudFileUploadBlockDetails::default_instance() {
  protobuf_steammessages_5fcloud_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

ClientCloudFileUploadBlockDetails* ClientCloudFileUploadBlockDetails::New(::google::protobuf::Arena* arena) const {
  ClientCloudFileUploadBlockDetails* n = new ClientCloudFileUploadBlockDetails;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClientCloudFileUploadBlockDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.ClientCloudFileUploadBlockDetails)
  request_headers_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    if (has_url_host()) {
      GOOGLE_DCHECK(!url_host_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_host_.UnsafeRawStringPointer())->clear();
    }
    if (has_url_path()) {
      GOOGLE_DCHECK(!url_path_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_path_.UnsafeRawStringPointer())->clear();
    }
    if (has_explicit_body_data()) {
      GOOGLE_DCHECK(!explicit_body_data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*explicit_body_data_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 248u) {
    ::memset(&http_method_, 0, reinterpret_cast<char*>(&block_length_) -
      reinterpret_cast<char*>(&http_method_) + sizeof(block_length_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ClientCloudFileUploadBlockDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.ClientCloudFileUploadBlockDetails)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string url_host = 1 [(.proto.steam.description) = "Host name of server to which file should be uploaded via HTTP PUT."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url_host().data(), this->url_host().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.ClientCloudFileUploadBlockDetails.url_host");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string url_path = 2 [(.proto.steam.description) = "Relative path on server to which file should be uploaded."];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url_path().data(), this->url_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.ClientCloudFileUploadBlockDetails.url_path");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_https = 3 [(.proto.steam.description) = "If true, use https, otherwise use http."];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_use_https();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_https_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 http_method = 4 [(.proto.steam.description) = "EHTTPMethod to use for this block."];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_http_method();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &http_method_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.ClientCloudFileUploadBlockDetails.HTTPHeaders request_headers = 5 [(.proto.steam.description) = "Name-value pairs to be sent in HTTP PUT request."];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_request_headers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 block_offset = 6 [(.proto.steam.description) = "offset of file block to upload"];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_block_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &block_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 block_length = 7 [(.proto.steam.description) = "length of file block to upload - if zero, no part of the file is part of this block"];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_block_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &block_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes explicit_body_data = 8 [(.proto.steam.description) = "explicit body data to use, instead of file data, for this block"];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_explicit_body_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool may_parallelize = 9 [(.proto.steam.description) = "if true, this request may be done in parallel with other similarly-marked requests"];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_may_parallelize();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &may_parallelize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.ClientCloudFileUploadBlockDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.ClientCloudFileUploadBlockDetails)
  return false;
#undef DO_
}

void ClientCloudFileUploadBlockDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.ClientCloudFileUploadBlockDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string url_host = 1 [(.proto.steam.description) = "Host name of server to which file should be uploaded via HTTP PUT."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url_host().data(), this->url_host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.ClientCloudFileUploadBlockDetails.url_host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url_host(), output);
  }

  // optional string url_path = 2 [(.proto.steam.description) = "Relative path on server to which file should be uploaded."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url_path().data(), this->url_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.ClientCloudFileUploadBlockDetails.url_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->url_path(), output);
  }

  // optional bool use_https = 3 [(.proto.steam.description) = "If true, use https, otherwise use http."];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->use_https(), output);
  }

  // optional int32 http_method = 4 [(.proto.steam.description) = "EHTTPMethod to use for this block."];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->http_method(), output);
  }

  // repeated .proto.steam.ClientCloudFileUploadBlockDetails.HTTPHeaders request_headers = 5 [(.proto.steam.description) = "Name-value pairs to be sent in HTTP PUT request."];
  for (unsigned int i = 0, n = this->request_headers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->request_headers(i), output);
  }

  // optional uint64 block_offset = 6 [(.proto.steam.description) = "offset of file block to upload"];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->block_offset(), output);
  }

  // optional uint32 block_length = 7 [(.proto.steam.description) = "length of file block to upload - if zero, no part of the file is part of this block"];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->block_length(), output);
  }

  // optional bytes explicit_body_data = 8 [(.proto.steam.description) = "explicit body data to use, instead of file data, for this block"];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->explicit_body_data(), output);
  }

  // optional bool may_parallelize = 9 [(.proto.steam.description) = "if true, this request may be done in parallel with other similarly-marked requests"];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->may_parallelize(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.ClientCloudFileUploadBlockDetails)
}

::google::protobuf::uint8* ClientCloudFileUploadBlockDetails::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.ClientCloudFileUploadBlockDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string url_host = 1 [(.proto.steam.description) = "Host name of server to which file should be uploaded via HTTP PUT."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url_host().data(), this->url_host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.ClientCloudFileUploadBlockDetails.url_host");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->url_host(), target);
  }

  // optional string url_path = 2 [(.proto.steam.description) = "Relative path on server to which file should be uploaded."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url_path().data(), this->url_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.ClientCloudFileUploadBlockDetails.url_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->url_path(), target);
  }

  // optional bool use_https = 3 [(.proto.steam.description) = "If true, use https, otherwise use http."];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->use_https(), target);
  }

  // optional int32 http_method = 4 [(.proto.steam.description) = "EHTTPMethod to use for this block."];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->http_method(), target);
  }

  // repeated .proto.steam.ClientCloudFileUploadBlockDetails.HTTPHeaders request_headers = 5 [(.proto.steam.description) = "Name-value pairs to be sent in HTTP PUT request."];
  for (unsigned int i = 0, n = this->request_headers_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->request_headers(i), deterministic, target);
  }

  // optional uint64 block_offset = 6 [(.proto.steam.description) = "offset of file block to upload"];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->block_offset(), target);
  }

  // optional uint32 block_length = 7 [(.proto.steam.description) = "length of file block to upload - if zero, no part of the file is part of this block"];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->block_length(), target);
  }

  // optional bytes explicit_body_data = 8 [(.proto.steam.description) = "explicit body data to use, instead of file data, for this block"];
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->explicit_body_data(), target);
  }

  // optional bool may_parallelize = 9 [(.proto.steam.description) = "if true, this request may be done in parallel with other similarly-marked requests"];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->may_parallelize(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.ClientCloudFileUploadBlockDetails)
  return target;
}

size_t ClientCloudFileUploadBlockDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.ClientCloudFileUploadBlockDetails)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.steam.ClientCloudFileUploadBlockDetails.HTTPHeaders request_headers = 5 [(.proto.steam.description) = "Name-value pairs to be sent in HTTP PUT request."];
  {
    unsigned int count = this->request_headers_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->request_headers(i));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string url_host = 1 [(.proto.steam.description) = "Host name of server to which file should be uploaded via HTTP PUT."];
    if (has_url_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url_host());
    }

    // optional string url_path = 2 [(.proto.steam.description) = "Relative path on server to which file should be uploaded."];
    if (has_url_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url_path());
    }

    // optional bytes explicit_body_data = 8 [(.proto.steam.description) = "explicit body data to use, instead of file data, for this block"];
    if (has_explicit_body_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->explicit_body_data());
    }

    // optional int32 http_method = 4 [(.proto.steam.description) = "EHTTPMethod to use for this block."];
    if (has_http_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->http_method());
    }

    // optional bool use_https = 3 [(.proto.steam.description) = "If true, use https, otherwise use http."];
    if (has_use_https()) {
      total_size += 1 + 1;
    }

    // optional bool may_parallelize = 9 [(.proto.steam.description) = "if true, this request may be done in parallel with other similarly-marked requests"];
    if (has_may_parallelize()) {
      total_size += 1 + 1;
    }

    // optional uint64 block_offset = 6 [(.proto.steam.description) = "offset of file block to upload"];
    if (has_block_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->block_offset());
    }

    // optional uint32 block_length = 7 [(.proto.steam.description) = "length of file block to upload - if zero, no part of the file is part of this block"];
    if (has_block_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->block_length());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientCloudFileUploadBlockDetails::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.ClientCloudFileUploadBlockDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientCloudFileUploadBlockDetails* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClientCloudFileUploadBlockDetails>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.ClientCloudFileUploadBlockDetails)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.ClientCloudFileUploadBlockDetails)
    MergeFrom(*source);
  }
}

void ClientCloudFileUploadBlockDetails::MergeFrom(const ClientCloudFileUploadBlockDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.ClientCloudFileUploadBlockDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  request_headers_.MergeFrom(from.request_headers_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url_host();
      url_host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_host_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_url_path();
      url_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_path_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_explicit_body_data();
      explicit_body_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.explicit_body_data_);
    }
    if (cached_has_bits & 0x00000008u) {
      http_method_ = from.http_method_;
    }
    if (cached_has_bits & 0x00000010u) {
      use_https_ = from.use_https_;
    }
    if (cached_has_bits & 0x00000020u) {
      may_parallelize_ = from.may_parallelize_;
    }
    if (cached_has_bits & 0x00000040u) {
      block_offset_ = from.block_offset_;
    }
    if (cached_has_bits & 0x00000080u) {
      block_length_ = from.block_length_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ClientCloudFileUploadBlockDetails::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.ClientCloudFileUploadBlockDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientCloudFileUploadBlockDetails::CopyFrom(const ClientCloudFileUploadBlockDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.ClientCloudFileUploadBlockDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientCloudFileUploadBlockDetails::IsInitialized() const {
  return true;
}

void ClientCloudFileUploadBlockDetails::Swap(ClientCloudFileUploadBlockDetails* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientCloudFileUploadBlockDetails::InternalSwap(ClientCloudFileUploadBlockDetails* other) {
  request_headers_.InternalSwap(&other->request_headers_);
  url_host_.Swap(&other->url_host_);
  url_path_.Swap(&other->url_path_);
  explicit_body_data_.Swap(&other->explicit_body_data_);
  std::swap(http_method_, other->http_method_);
  std::swap(use_https_, other->use_https_);
  std::swap(may_parallelize_, other->may_parallelize_);
  std::swap(block_offset_, other->block_offset_);
  std::swap(block_length_, other->block_length_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClientCloudFileUploadBlockDetails::GetMetadata() const {
  protobuf_steammessages_5fcloud_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fcloud_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClientCloudFileUploadBlockDetails

// optional string url_host = 1 [(.proto.steam.description) = "Host name of server to which file should be uploaded via HTTP PUT."];
bool ClientCloudFileUploadBlockDetails::has_url_host() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ClientCloudFileUploadBlockDetails::set_has_url_host() {
  _has_bits_[0] |= 0x00000001u;
}
void ClientCloudFileUploadBlockDetails::clear_has_url_host() {
  _has_bits_[0] &= ~0x00000001u;
}
void ClientCloudFileUploadBlockDetails::clear_url_host() {
  url_host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url_host();
}
const ::std::string& ClientCloudFileUploadBlockDetails::url_host() const {
  // @@protoc_insertion_point(field_get:proto.steam.ClientCloudFileUploadBlockDetails.url_host)
  return url_host_.GetNoArena();
}
void ClientCloudFileUploadBlockDetails::set_url_host(const ::std::string& value) {
  set_has_url_host();
  url_host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.ClientCloudFileUploadBlockDetails.url_host)
}
#if LANG_CXX11
void ClientCloudFileUploadBlockDetails::set_url_host(::std::string&& value) {
  set_has_url_host();
  url_host_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.ClientCloudFileUploadBlockDetails.url_host)
}
#endif
void ClientCloudFileUploadBlockDetails::set_url_host(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url_host();
  url_host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.ClientCloudFileUploadBlockDetails.url_host)
}
void ClientCloudFileUploadBlockDetails::set_url_host(const char* value, size_t size) {
  set_has_url_host();
  url_host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.ClientCloudFileUploadBlockDetails.url_host)
}
::std::string* ClientCloudFileUploadBlockDetails::mutable_url_host() {
  set_has_url_host();
  // @@protoc_insertion_point(field_mutable:proto.steam.ClientCloudFileUploadBlockDetails.url_host)
  return url_host_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ClientCloudFileUploadBlockDetails::release_url_host() {
  // @@protoc_insertion_point(field_release:proto.steam.ClientCloudFileUploadBlockDetails.url_host)
  clear_has_url_host();
  return url_host_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ClientCloudFileUploadBlockDetails::set_allocated_url_host(::std::string* url_host) {
  if (url_host != NULL) {
    set_has_url_host();
  } else {
    clear_has_url_host();
  }
  url_host_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url_host);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.ClientCloudFileUploadBlockDetails.url_host)
}

// optional string url_path = 2 [(.proto.steam.description) = "Relative path on server to which file should be uploaded."];
bool ClientCloudFileUploadBlockDetails::has_url_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ClientCloudFileUploadBlockDetails::set_has_url_path() {
  _has_bits_[0] |= 0x00000002u;
}
void ClientCloudFileUploadBlockDetails::clear_has_url_path() {
  _has_bits_[0] &= ~0x00000002u;
}
void ClientCloudFileUploadBlockDetails::clear_url_path() {
  url_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url_path();
}
const ::std::string& ClientCloudFileUploadBlockDetails::url_path() const {
  // @@protoc_insertion_point(field_get:proto.steam.ClientCloudFileUploadBlockDetails.url_path)
  return url_path_.GetNoArena();
}
void ClientCloudFileUploadBlockDetails::set_url_path(const ::std::string& value) {
  set_has_url_path();
  url_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.ClientCloudFileUploadBlockDetails.url_path)
}
#if LANG_CXX11
void ClientCloudFileUploadBlockDetails::set_url_path(::std::string&& value) {
  set_has_url_path();
  url_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.ClientCloudFileUploadBlockDetails.url_path)
}
#endif
void ClientCloudFileUploadBlockDetails::set_url_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url_path();
  url_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.ClientCloudFileUploadBlockDetails.url_path)
}
void ClientCloudFileUploadBlockDetails::set_url_path(const char* value, size_t size) {
  set_has_url_path();
  url_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.ClientCloudFileUploadBlockDetails.url_path)
}
::std::string* ClientCloudFileUploadBlockDetails::mutable_url_path() {
  set_has_url_path();
  // @@protoc_insertion_point(field_mutable:proto.steam.ClientCloudFileUploadBlockDetails.url_path)
  return url_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ClientCloudFileUploadBlockDetails::release_url_path() {
  // @@protoc_insertion_point(field_release:proto.steam.ClientCloudFileUploadBlockDetails.url_path)
  clear_has_url_path();
  return url_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ClientCloudFileUploadBlockDetails::set_allocated_url_path(::std::string* url_path) {
  if (url_path != NULL) {
    set_has_url_path();
  } else {
    clear_has_url_path();
  }
  url_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url_path);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.ClientCloudFileUploadBlockDetails.url_path)
}

// optional bool use_https = 3 [(.proto.steam.description) = "If true, use https, otherwise use http."];
bool ClientCloudFileUploadBlockDetails::has_use_https() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ClientCloudFileUploadBlockDetails::set_has_use_https() {
  _has_bits_[0] |= 0x00000010u;
}
void ClientCloudFileUploadBlockDetails::clear_has_use_https() {
  _has_bits_[0] &= ~0x00000010u;
}
void ClientCloudFileUploadBlockDetails::clear_use_https() {
  use_https_ = false;
  clear_has_use_https();
}
bool ClientCloudFileUploadBlockDetails::use_https() const {
  // @@protoc_insertion_point(field_get:proto.steam.ClientCloudFileUploadBlockDetails.use_https)
  return use_https_;
}
void ClientCloudFileUploadBlockDetails::set_use_https(bool value) {
  set_has_use_https();
  use_https_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.ClientCloudFileUploadBlockDetails.use_https)
}

// optional int32 http_method = 4 [(.proto.steam.description) = "EHTTPMethod to use for this block."];
bool ClientCloudFileUploadBlockDetails::has_http_method() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ClientCloudFileUploadBlockDetails::set_has_http_method() {
  _has_bits_[0] |= 0x00000008u;
}
void ClientCloudFileUploadBlockDetails::clear_has_http_method() {
  _has_bits_[0] &= ~0x00000008u;
}
void ClientCloudFileUploadBlockDetails::clear_http_method() {
  http_method_ = 0;
  clear_has_http_method();
}
::google::protobuf::int32 ClientCloudFileUploadBlockDetails::http_method() const {
  // @@protoc_insertion_point(field_get:proto.steam.ClientCloudFileUploadBlockDetails.http_method)
  return http_method_;
}
void ClientCloudFileUploadBlockDetails::set_http_method(::google::protobuf::int32 value) {
  set_has_http_method();
  http_method_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.ClientCloudFileUploadBlockDetails.http_method)
}

// repeated .proto.steam.ClientCloudFileUploadBlockDetails.HTTPHeaders request_headers = 5 [(.proto.steam.description) = "Name-value pairs to be sent in HTTP PUT request."];
int ClientCloudFileUploadBlockDetails::request_headers_size() const {
  return request_headers_.size();
}
void ClientCloudFileUploadBlockDetails::clear_request_headers() {
  request_headers_.Clear();
}
const ::proto::steam::ClientCloudFileUploadBlockDetails_HTTPHeaders& ClientCloudFileUploadBlockDetails::request_headers(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.ClientCloudFileUploadBlockDetails.request_headers)
  return request_headers_.Get(index);
}
::proto::steam::ClientCloudFileUploadBlockDetails_HTTPHeaders* ClientCloudFileUploadBlockDetails::mutable_request_headers(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.ClientCloudFileUploadBlockDetails.request_headers)
  return request_headers_.Mutable(index);
}
::proto::steam::ClientCloudFileUploadBlockDetails_HTTPHeaders* ClientCloudFileUploadBlockDetails::add_request_headers() {
  // @@protoc_insertion_point(field_add:proto.steam.ClientCloudFileUploadBlockDetails.request_headers)
  return request_headers_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::ClientCloudFileUploadBlockDetails_HTTPHeaders >*
ClientCloudFileUploadBlockDetails::mutable_request_headers() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.ClientCloudFileUploadBlockDetails.request_headers)
  return &request_headers_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::ClientCloudFileUploadBlockDetails_HTTPHeaders >&
ClientCloudFileUploadBlockDetails::request_headers() const {
  // @@protoc_insertion_point(field_list:proto.steam.ClientCloudFileUploadBlockDetails.request_headers)
  return request_headers_;
}

// optional uint64 block_offset = 6 [(.proto.steam.description) = "offset of file block to upload"];
bool ClientCloudFileUploadBlockDetails::has_block_offset() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ClientCloudFileUploadBlockDetails::set_has_block_offset() {
  _has_bits_[0] |= 0x00000040u;
}
void ClientCloudFileUploadBlockDetails::clear_has_block_offset() {
  _has_bits_[0] &= ~0x00000040u;
}
void ClientCloudFileUploadBlockDetails::clear_block_offset() {
  block_offset_ = GOOGLE_ULONGLONG(0);
  clear_has_block_offset();
}
::google::protobuf::uint64 ClientCloudFileUploadBlockDetails::block_offset() const {
  // @@protoc_insertion_point(field_get:proto.steam.ClientCloudFileUploadBlockDetails.block_offset)
  return block_offset_;
}
void ClientCloudFileUploadBlockDetails::set_block_offset(::google::protobuf::uint64 value) {
  set_has_block_offset();
  block_offset_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.ClientCloudFileUploadBlockDetails.block_offset)
}

// optional uint32 block_length = 7 [(.proto.steam.description) = "length of file block to upload - if zero, no part of the file is part of this block"];
bool ClientCloudFileUploadBlockDetails::has_block_length() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ClientCloudFileUploadBlockDetails::set_has_block_length() {
  _has_bits_[0] |= 0x00000080u;
}
void ClientCloudFileUploadBlockDetails::clear_has_block_length() {
  _has_bits_[0] &= ~0x00000080u;
}
void ClientCloudFileUploadBlockDetails::clear_block_length() {
  block_length_ = 0u;
  clear_has_block_length();
}
::google::protobuf::uint32 ClientCloudFileUploadBlockDetails::block_length() const {
  // @@protoc_insertion_point(field_get:proto.steam.ClientCloudFileUploadBlockDetails.block_length)
  return block_length_;
}
void ClientCloudFileUploadBlockDetails::set_block_length(::google::protobuf::uint32 value) {
  set_has_block_length();
  block_length_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.ClientCloudFileUploadBlockDetails.block_length)
}

// optional bytes explicit_body_data = 8 [(.proto.steam.description) = "explicit body data to use, instead of file data, for this block"];
bool ClientCloudFileUploadBlockDetails::has_explicit_body_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ClientCloudFileUploadBlockDetails::set_has_explicit_body_data() {
  _has_bits_[0] |= 0x00000004u;
}
void ClientCloudFileUploadBlockDetails::clear_has_explicit_body_data() {
  _has_bits_[0] &= ~0x00000004u;
}
void ClientCloudFileUploadBlockDetails::clear_explicit_body_data() {
  explicit_body_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_explicit_body_data();
}
const ::std::string& ClientCloudFileUploadBlockDetails::explicit_body_data() const {
  // @@protoc_insertion_point(field_get:proto.steam.ClientCloudFileUploadBlockDetails.explicit_body_data)
  return explicit_body_data_.GetNoArena();
}
void ClientCloudFileUploadBlockDetails::set_explicit_body_data(const ::std::string& value) {
  set_has_explicit_body_data();
  explicit_body_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.ClientCloudFileUploadBlockDetails.explicit_body_data)
}
#if LANG_CXX11
void ClientCloudFileUploadBlockDetails::set_explicit_body_data(::std::string&& value) {
  set_has_explicit_body_data();
  explicit_body_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.ClientCloudFileUploadBlockDetails.explicit_body_data)
}
#endif
void ClientCloudFileUploadBlockDetails::set_explicit_body_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_explicit_body_data();
  explicit_body_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.ClientCloudFileUploadBlockDetails.explicit_body_data)
}
void ClientCloudFileUploadBlockDetails::set_explicit_body_data(const void* value, size_t size) {
  set_has_explicit_body_data();
  explicit_body_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.ClientCloudFileUploadBlockDetails.explicit_body_data)
}
::std::string* ClientCloudFileUploadBlockDetails::mutable_explicit_body_data() {
  set_has_explicit_body_data();
  // @@protoc_insertion_point(field_mutable:proto.steam.ClientCloudFileUploadBlockDetails.explicit_body_data)
  return explicit_body_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ClientCloudFileUploadBlockDetails::release_explicit_body_data() {
  // @@protoc_insertion_point(field_release:proto.steam.ClientCloudFileUploadBlockDetails.explicit_body_data)
  clear_has_explicit_body_data();
  return explicit_body_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ClientCloudFileUploadBlockDetails::set_allocated_explicit_body_data(::std::string* explicit_body_data) {
  if (explicit_body_data != NULL) {
    set_has_explicit_body_data();
  } else {
    clear_has_explicit_body_data();
  }
  explicit_body_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), explicit_body_data);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.ClientCloudFileUploadBlockDetails.explicit_body_data)
}

// optional bool may_parallelize = 9 [(.proto.steam.description) = "if true, this request may be done in parallel with other similarly-marked requests"];
bool ClientCloudFileUploadBlockDetails::has_may_parallelize() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ClientCloudFileUploadBlockDetails::set_has_may_parallelize() {
  _has_bits_[0] |= 0x00000020u;
}
void ClientCloudFileUploadBlockDetails::clear_has_may_parallelize() {
  _has_bits_[0] &= ~0x00000020u;
}
void ClientCloudFileUploadBlockDetails::clear_may_parallelize() {
  may_parallelize_ = false;
  clear_has_may_parallelize();
}
bool ClientCloudFileUploadBlockDetails::may_parallelize() const {
  // @@protoc_insertion_point(field_get:proto.steam.ClientCloudFileUploadBlockDetails.may_parallelize)
  return may_parallelize_;
}
void ClientCloudFileUploadBlockDetails::set_may_parallelize(bool value) {
  set_has_may_parallelize();
  may_parallelize_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.ClientCloudFileUploadBlockDetails.may_parallelize)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCloud_ClientBeginFileUpload_Response::kEncryptFileFieldNumber;
const int CCloud_ClientBeginFileUpload_Response::kBlockRequestsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCloud_ClientBeginFileUpload_Response::CCloud_ClientBeginFileUpload_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fcloud_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CCloud_ClientBeginFileUpload_Response)
}
CCloud_ClientBeginFileUpload_Response::CCloud_ClientBeginFileUpload_Response(const CCloud_ClientBeginFileUpload_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      block_requests_(from.block_requests_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  encrypt_file_ = from.encrypt_file_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CCloud_ClientBeginFileUpload_Response)
}

void CCloud_ClientBeginFileUpload_Response::SharedCtor() {
  _cached_size_ = 0;
  encrypt_file_ = false;
}

CCloud_ClientBeginFileUpload_Response::~CCloud_ClientBeginFileUpload_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CCloud_ClientBeginFileUpload_Response)
  SharedDtor();
}

void CCloud_ClientBeginFileUpload_Response::SharedDtor() {
}

void CCloud_ClientBeginFileUpload_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCloud_ClientBeginFileUpload_Response::descriptor() {
  protobuf_steammessages_5fcloud_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fcloud_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CCloud_ClientBeginFileUpload_Response& CCloud_ClientBeginFileUpload_Response::default_instance() {
  protobuf_steammessages_5fcloud_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CCloud_ClientBeginFileUpload_Response* CCloud_ClientBeginFileUpload_Response::New(::google::protobuf::Arena* arena) const {
  CCloud_ClientBeginFileUpload_Response* n = new CCloud_ClientBeginFileUpload_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CCloud_ClientBeginFileUpload_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CCloud_ClientBeginFileUpload_Response)
  block_requests_.Clear();
  encrypt_file_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CCloud_ClientBeginFileUpload_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CCloud_ClientBeginFileUpload_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool encrypt_file = 1 [(.proto.steam.description) = "If true, the file should be encrypted by the client before upload"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_encrypt_file();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encrypt_file_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.ClientCloudFileUploadBlockDetails block_requests = 2 [(.proto.steam.description) = "HTTP requests to make to perform upload"];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_block_requests()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CCloud_ClientBeginFileUpload_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CCloud_ClientBeginFileUpload_Response)
  return false;
#undef DO_
}

void CCloud_ClientBeginFileUpload_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CCloud_ClientBeginFileUpload_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool encrypt_file = 1 [(.proto.steam.description) = "If true, the file should be encrypted by the client before upload"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->encrypt_file(), output);
  }

  // repeated .proto.steam.ClientCloudFileUploadBlockDetails block_requests = 2 [(.proto.steam.description) = "HTTP requests to make to perform upload"];
  for (unsigned int i = 0, n = this->block_requests_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->block_requests(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CCloud_ClientBeginFileUpload_Response)
}

::google::protobuf::uint8* CCloud_ClientBeginFileUpload_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CCloud_ClientBeginFileUpload_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool encrypt_file = 1 [(.proto.steam.description) = "If true, the file should be encrypted by the client before upload"];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->encrypt_file(), target);
  }

  // repeated .proto.steam.ClientCloudFileUploadBlockDetails block_requests = 2 [(.proto.steam.description) = "HTTP requests to make to perform upload"];
  for (unsigned int i = 0, n = this->block_requests_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->block_requests(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CCloud_ClientBeginFileUpload_Response)
  return target;
}

size_t CCloud_ClientBeginFileUpload_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CCloud_ClientBeginFileUpload_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.steam.ClientCloudFileUploadBlockDetails block_requests = 2 [(.proto.steam.description) = "HTTP requests to make to perform upload"];
  {
    unsigned int count = this->block_requests_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->block_requests(i));
    }
  }

  // optional bool encrypt_file = 1 [(.proto.steam.description) = "If true, the file should be encrypted by the client before upload"];
  if (has_encrypt_file()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCloud_ClientBeginFileUpload_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CCloud_ClientBeginFileUpload_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CCloud_ClientBeginFileUpload_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CCloud_ClientBeginFileUpload_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CCloud_ClientBeginFileUpload_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CCloud_ClientBeginFileUpload_Response)
    MergeFrom(*source);
  }
}

void CCloud_ClientBeginFileUpload_Response::MergeFrom(const CCloud_ClientBeginFileUpload_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CCloud_ClientBeginFileUpload_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  block_requests_.MergeFrom(from.block_requests_);
  if (from.has_encrypt_file()) {
    set_encrypt_file(from.encrypt_file());
  }
}

void CCloud_ClientBeginFileUpload_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CCloud_ClientBeginFileUpload_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCloud_ClientBeginFileUpload_Response::CopyFrom(const CCloud_ClientBeginFileUpload_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CCloud_ClientBeginFileUpload_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_ClientBeginFileUpload_Response::IsInitialized() const {
  return true;
}

void CCloud_ClientBeginFileUpload_Response::Swap(CCloud_ClientBeginFileUpload_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCloud_ClientBeginFileUpload_Response::InternalSwap(CCloud_ClientBeginFileUpload_Response* other) {
  block_requests_.InternalSwap(&other->block_requests_);
  std::swap(encrypt_file_, other->encrypt_file_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CCloud_ClientBeginFileUpload_Response::GetMetadata() const {
  protobuf_steammessages_5fcloud_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fcloud_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CCloud_ClientBeginFileUpload_Response

// optional bool encrypt_file = 1 [(.proto.steam.description) = "If true, the file should be encrypted by the client before upload"];
bool CCloud_ClientBeginFileUpload_Response::has_encrypt_file() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CCloud_ClientBeginFileUpload_Response::set_has_encrypt_file() {
  _has_bits_[0] |= 0x00000001u;
}
void CCloud_ClientBeginFileUpload_Response::clear_has_encrypt_file() {
  _has_bits_[0] &= ~0x00000001u;
}
void CCloud_ClientBeginFileUpload_Response::clear_encrypt_file() {
  encrypt_file_ = false;
  clear_has_encrypt_file();
}
bool CCloud_ClientBeginFileUpload_Response::encrypt_file() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_ClientBeginFileUpload_Response.encrypt_file)
  return encrypt_file_;
}
void CCloud_ClientBeginFileUpload_Response::set_encrypt_file(bool value) {
  set_has_encrypt_file();
  encrypt_file_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_ClientBeginFileUpload_Response.encrypt_file)
}

// repeated .proto.steam.ClientCloudFileUploadBlockDetails block_requests = 2 [(.proto.steam.description) = "HTTP requests to make to perform upload"];
int CCloud_ClientBeginFileUpload_Response::block_requests_size() const {
  return block_requests_.size();
}
void CCloud_ClientBeginFileUpload_Response::clear_block_requests() {
  block_requests_.Clear();
}
const ::proto::steam::ClientCloudFileUploadBlockDetails& CCloud_ClientBeginFileUpload_Response::block_requests(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_ClientBeginFileUpload_Response.block_requests)
  return block_requests_.Get(index);
}
::proto::steam::ClientCloudFileUploadBlockDetails* CCloud_ClientBeginFileUpload_Response::mutable_block_requests(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CCloud_ClientBeginFileUpload_Response.block_requests)
  return block_requests_.Mutable(index);
}
::proto::steam::ClientCloudFileUploadBlockDetails* CCloud_ClientBeginFileUpload_Response::add_block_requests() {
  // @@protoc_insertion_point(field_add:proto.steam.CCloud_ClientBeginFileUpload_Response.block_requests)
  return block_requests_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::ClientCloudFileUploadBlockDetails >*
CCloud_ClientBeginFileUpload_Response::mutable_block_requests() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CCloud_ClientBeginFileUpload_Response.block_requests)
  return &block_requests_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::ClientCloudFileUploadBlockDetails >&
CCloud_ClientBeginFileUpload_Response::block_requests() const {
  // @@protoc_insertion_point(field_list:proto.steam.CCloud_ClientBeginFileUpload_Response.block_requests)
  return block_requests_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCloud_ClientCommitFileUpload_Request::kTransferSucceededFieldNumber;
const int CCloud_ClientCommitFileUpload_Request::kAppidFieldNumber;
const int CCloud_ClientCommitFileUpload_Request::kFileShaFieldNumber;
const int CCloud_ClientCommitFileUpload_Request::kFilenameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCloud_ClientCommitFileUpload_Request::CCloud_ClientCommitFileUpload_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fcloud_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CCloud_ClientCommitFileUpload_Request)
}
CCloud_ClientCommitFileUpload_Request::CCloud_ClientCommitFileUpload_Request(const CCloud_ClientCommitFileUpload_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_sha_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_file_sha()) {
    file_sha_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_sha_);
  }
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_filename()) {
    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  ::memcpy(&transfer_succeeded_, &from.transfer_succeeded_,
    reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&transfer_succeeded_) + sizeof(appid_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CCloud_ClientCommitFileUpload_Request)
}

void CCloud_ClientCommitFileUpload_Request::SharedCtor() {
  _cached_size_ = 0;
  file_sha_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&transfer_succeeded_, 0, reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&transfer_succeeded_) + sizeof(appid_));
}

CCloud_ClientCommitFileUpload_Request::~CCloud_ClientCommitFileUpload_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CCloud_ClientCommitFileUpload_Request)
  SharedDtor();
}

void CCloud_ClientCommitFileUpload_Request::SharedDtor() {
  file_sha_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CCloud_ClientCommitFileUpload_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCloud_ClientCommitFileUpload_Request::descriptor() {
  protobuf_steammessages_5fcloud_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fcloud_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CCloud_ClientCommitFileUpload_Request& CCloud_ClientCommitFileUpload_Request::default_instance() {
  protobuf_steammessages_5fcloud_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CCloud_ClientCommitFileUpload_Request* CCloud_ClientCommitFileUpload_Request::New(::google::protobuf::Arena* arena) const {
  CCloud_ClientCommitFileUpload_Request* n = new CCloud_ClientCommitFileUpload_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CCloud_ClientCommitFileUpload_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CCloud_ClientCommitFileUpload_Request)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_file_sha()) {
      GOOGLE_DCHECK(!file_sha_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*file_sha_.UnsafeRawStringPointer())->clear();
    }
    if (has_filename()) {
      GOOGLE_DCHECK(!filename_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*filename_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&transfer_succeeded_, 0, reinterpret_cast<char*>(&appid_) -
      reinterpret_cast<char*>(&transfer_succeeded_) + sizeof(appid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CCloud_ClientCommitFileUpload_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CCloud_ClientCommitFileUpload_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool transfer_succeeded = 1 [(.proto.steam.description) = "True if all block uploads succeeded, false if any of them failed."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_transfer_succeeded();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &transfer_succeeded_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 appid = 2 [(.proto.steam.description) = "App ID for which the file is being uploaded. Must match the app ID provided to Cloud.BeginFileUpload."];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes file_sha = 3 [(.proto.steam.description) = "SHA1 digest of the raw file. Must match the SHA1 digest provided to Cloud.BeginFileUpload."];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_file_sha()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string filename = 4 [(.proto.steam.description) = "Filename as specified in the Cloud.BeginFileUpload request."];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CCloud_ClientCommitFileUpload_Request.filename");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CCloud_ClientCommitFileUpload_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CCloud_ClientCommitFileUpload_Request)
  return false;
#undef DO_
}

void CCloud_ClientCommitFileUpload_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CCloud_ClientCommitFileUpload_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool transfer_succeeded = 1 [(.proto.steam.description) = "True if all block uploads succeeded, false if any of them failed."];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->transfer_succeeded(), output);
  }

  // optional uint32 appid = 2 [(.proto.steam.description) = "App ID for which the file is being uploaded. Must match the app ID provided to Cloud.BeginFileUpload."];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->appid(), output);
  }

  // optional bytes file_sha = 3 [(.proto.steam.description) = "SHA1 digest of the raw file. Must match the SHA1 digest provided to Cloud.BeginFileUpload."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->file_sha(), output);
  }

  // optional string filename = 4 [(.proto.steam.description) = "Filename as specified in the Cloud.BeginFileUpload request."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCloud_ClientCommitFileUpload_Request.filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->filename(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CCloud_ClientCommitFileUpload_Request)
}

::google::protobuf::uint8* CCloud_ClientCommitFileUpload_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CCloud_ClientCommitFileUpload_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool transfer_succeeded = 1 [(.proto.steam.description) = "True if all block uploads succeeded, false if any of them failed."];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->transfer_succeeded(), target);
  }

  // optional uint32 appid = 2 [(.proto.steam.description) = "App ID for which the file is being uploaded. Must match the app ID provided to Cloud.BeginFileUpload."];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->appid(), target);
  }

  // optional bytes file_sha = 3 [(.proto.steam.description) = "SHA1 digest of the raw file. Must match the SHA1 digest provided to Cloud.BeginFileUpload."];
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->file_sha(), target);
  }

  // optional string filename = 4 [(.proto.steam.description) = "Filename as specified in the Cloud.BeginFileUpload request."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCloud_ClientCommitFileUpload_Request.filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->filename(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CCloud_ClientCommitFileUpload_Request)
  return target;
}

size_t CCloud_ClientCommitFileUpload_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CCloud_ClientCommitFileUpload_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional bytes file_sha = 3 [(.proto.steam.description) = "SHA1 digest of the raw file. Must match the SHA1 digest provided to Cloud.BeginFileUpload."];
    if (has_file_sha()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->file_sha());
    }

    // optional string filename = 4 [(.proto.steam.description) = "Filename as specified in the Cloud.BeginFileUpload request."];
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional bool transfer_succeeded = 1 [(.proto.steam.description) = "True if all block uploads succeeded, false if any of them failed."];
    if (has_transfer_succeeded()) {
      total_size += 1 + 1;
    }

    // optional uint32 appid = 2 [(.proto.steam.description) = "App ID for which the file is being uploaded. Must match the app ID provided to Cloud.BeginFileUpload."];
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCloud_ClientCommitFileUpload_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CCloud_ClientCommitFileUpload_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CCloud_ClientCommitFileUpload_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CCloud_ClientCommitFileUpload_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CCloud_ClientCommitFileUpload_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CCloud_ClientCommitFileUpload_Request)
    MergeFrom(*source);
  }
}

void CCloud_ClientCommitFileUpload_Request::MergeFrom(const CCloud_ClientCommitFileUpload_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CCloud_ClientCommitFileUpload_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_file_sha();
      file_sha_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_sha_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_filename();
      filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
    }
    if (cached_has_bits & 0x00000004u) {
      transfer_succeeded_ = from.transfer_succeeded_;
    }
    if (cached_has_bits & 0x00000008u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CCloud_ClientCommitFileUpload_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CCloud_ClientCommitFileUpload_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCloud_ClientCommitFileUpload_Request::CopyFrom(const CCloud_ClientCommitFileUpload_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CCloud_ClientCommitFileUpload_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_ClientCommitFileUpload_Request::IsInitialized() const {
  return true;
}

void CCloud_ClientCommitFileUpload_Request::Swap(CCloud_ClientCommitFileUpload_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCloud_ClientCommitFileUpload_Request::InternalSwap(CCloud_ClientCommitFileUpload_Request* other) {
  file_sha_.Swap(&other->file_sha_);
  filename_.Swap(&other->filename_);
  std::swap(transfer_succeeded_, other->transfer_succeeded_);
  std::swap(appid_, other->appid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CCloud_ClientCommitFileUpload_Request::GetMetadata() const {
  protobuf_steammessages_5fcloud_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fcloud_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CCloud_ClientCommitFileUpload_Request

// optional bool transfer_succeeded = 1 [(.proto.steam.description) = "True if all block uploads succeeded, false if any of them failed."];
bool CCloud_ClientCommitFileUpload_Request::has_transfer_succeeded() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CCloud_ClientCommitFileUpload_Request::set_has_transfer_succeeded() {
  _has_bits_[0] |= 0x00000004u;
}
void CCloud_ClientCommitFileUpload_Request::clear_has_transfer_succeeded() {
  _has_bits_[0] &= ~0x00000004u;
}
void CCloud_ClientCommitFileUpload_Request::clear_transfer_succeeded() {
  transfer_succeeded_ = false;
  clear_has_transfer_succeeded();
}
bool CCloud_ClientCommitFileUpload_Request::transfer_succeeded() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_ClientCommitFileUpload_Request.transfer_succeeded)
  return transfer_succeeded_;
}
void CCloud_ClientCommitFileUpload_Request::set_transfer_succeeded(bool value) {
  set_has_transfer_succeeded();
  transfer_succeeded_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_ClientCommitFileUpload_Request.transfer_succeeded)
}

// optional uint32 appid = 2 [(.proto.steam.description) = "App ID for which the file is being uploaded. Must match the app ID provided to Cloud.BeginFileUpload."];
bool CCloud_ClientCommitFileUpload_Request::has_appid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CCloud_ClientCommitFileUpload_Request::set_has_appid() {
  _has_bits_[0] |= 0x00000008u;
}
void CCloud_ClientCommitFileUpload_Request::clear_has_appid() {
  _has_bits_[0] &= ~0x00000008u;
}
void CCloud_ClientCommitFileUpload_Request::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
::google::protobuf::uint32 CCloud_ClientCommitFileUpload_Request::appid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_ClientCommitFileUpload_Request.appid)
  return appid_;
}
void CCloud_ClientCommitFileUpload_Request::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_ClientCommitFileUpload_Request.appid)
}

// optional bytes file_sha = 3 [(.proto.steam.description) = "SHA1 digest of the raw file. Must match the SHA1 digest provided to Cloud.BeginFileUpload."];
bool CCloud_ClientCommitFileUpload_Request::has_file_sha() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CCloud_ClientCommitFileUpload_Request::set_has_file_sha() {
  _has_bits_[0] |= 0x00000001u;
}
void CCloud_ClientCommitFileUpload_Request::clear_has_file_sha() {
  _has_bits_[0] &= ~0x00000001u;
}
void CCloud_ClientCommitFileUpload_Request::clear_file_sha() {
  file_sha_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_sha();
}
const ::std::string& CCloud_ClientCommitFileUpload_Request::file_sha() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_ClientCommitFileUpload_Request.file_sha)
  return file_sha_.GetNoArena();
}
void CCloud_ClientCommitFileUpload_Request::set_file_sha(const ::std::string& value) {
  set_has_file_sha();
  file_sha_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_ClientCommitFileUpload_Request.file_sha)
}
#if LANG_CXX11
void CCloud_ClientCommitFileUpload_Request::set_file_sha(::std::string&& value) {
  set_has_file_sha();
  file_sha_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CCloud_ClientCommitFileUpload_Request.file_sha)
}
#endif
void CCloud_ClientCommitFileUpload_Request::set_file_sha(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_file_sha();
  file_sha_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CCloud_ClientCommitFileUpload_Request.file_sha)
}
void CCloud_ClientCommitFileUpload_Request::set_file_sha(const void* value, size_t size) {
  set_has_file_sha();
  file_sha_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CCloud_ClientCommitFileUpload_Request.file_sha)
}
::std::string* CCloud_ClientCommitFileUpload_Request::mutable_file_sha() {
  set_has_file_sha();
  // @@protoc_insertion_point(field_mutable:proto.steam.CCloud_ClientCommitFileUpload_Request.file_sha)
  return file_sha_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CCloud_ClientCommitFileUpload_Request::release_file_sha() {
  // @@protoc_insertion_point(field_release:proto.steam.CCloud_ClientCommitFileUpload_Request.file_sha)
  clear_has_file_sha();
  return file_sha_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CCloud_ClientCommitFileUpload_Request::set_allocated_file_sha(::std::string* file_sha) {
  if (file_sha != NULL) {
    set_has_file_sha();
  } else {
    clear_has_file_sha();
  }
  file_sha_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_sha);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CCloud_ClientCommitFileUpload_Request.file_sha)
}

// optional string filename = 4 [(.proto.steam.description) = "Filename as specified in the Cloud.BeginFileUpload request."];
bool CCloud_ClientCommitFileUpload_Request::has_filename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CCloud_ClientCommitFileUpload_Request::set_has_filename() {
  _has_bits_[0] |= 0x00000002u;
}
void CCloud_ClientCommitFileUpload_Request::clear_has_filename() {
  _has_bits_[0] &= ~0x00000002u;
}
void CCloud_ClientCommitFileUpload_Request::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_filename();
}
const ::std::string& CCloud_ClientCommitFileUpload_Request::filename() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_ClientCommitFileUpload_Request.filename)
  return filename_.GetNoArena();
}
void CCloud_ClientCommitFileUpload_Request::set_filename(const ::std::string& value) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_ClientCommitFileUpload_Request.filename)
}
#if LANG_CXX11
void CCloud_ClientCommitFileUpload_Request::set_filename(::std::string&& value) {
  set_has_filename();
  filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CCloud_ClientCommitFileUpload_Request.filename)
}
#endif
void CCloud_ClientCommitFileUpload_Request::set_filename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CCloud_ClientCommitFileUpload_Request.filename)
}
void CCloud_ClientCommitFileUpload_Request::set_filename(const char* value, size_t size) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CCloud_ClientCommitFileUpload_Request.filename)
}
::std::string* CCloud_ClientCommitFileUpload_Request::mutable_filename() {
  set_has_filename();
  // @@protoc_insertion_point(field_mutable:proto.steam.CCloud_ClientCommitFileUpload_Request.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CCloud_ClientCommitFileUpload_Request::release_filename() {
  // @@protoc_insertion_point(field_release:proto.steam.CCloud_ClientCommitFileUpload_Request.filename)
  clear_has_filename();
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CCloud_ClientCommitFileUpload_Request::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    set_has_filename();
  } else {
    clear_has_filename();
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CCloud_ClientCommitFileUpload_Request.filename)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCloud_ClientCommitFileUpload_Response::kFileCommittedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCloud_ClientCommitFileUpload_Response::CCloud_ClientCommitFileUpload_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fcloud_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CCloud_ClientCommitFileUpload_Response)
}
CCloud_ClientCommitFileUpload_Response::CCloud_ClientCommitFileUpload_Response(const CCloud_ClientCommitFileUpload_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_committed_ = from.file_committed_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CCloud_ClientCommitFileUpload_Response)
}

void CCloud_ClientCommitFileUpload_Response::SharedCtor() {
  _cached_size_ = 0;
  file_committed_ = false;
}

CCloud_ClientCommitFileUpload_Response::~CCloud_ClientCommitFileUpload_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CCloud_ClientCommitFileUpload_Response)
  SharedDtor();
}

void CCloud_ClientCommitFileUpload_Response::SharedDtor() {
}

void CCloud_ClientCommitFileUpload_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCloud_ClientCommitFileUpload_Response::descriptor() {
  protobuf_steammessages_5fcloud_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fcloud_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CCloud_ClientCommitFileUpload_Response& CCloud_ClientCommitFileUpload_Response::default_instance() {
  protobuf_steammessages_5fcloud_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CCloud_ClientCommitFileUpload_Response* CCloud_ClientCommitFileUpload_Response::New(::google::protobuf::Arena* arena) const {
  CCloud_ClientCommitFileUpload_Response* n = new CCloud_ClientCommitFileUpload_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CCloud_ClientCommitFileUpload_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CCloud_ClientCommitFileUpload_Response)
  file_committed_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CCloud_ClientCommitFileUpload_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CCloud_ClientCommitFileUpload_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool file_committed = 1 [(.proto.steam.description) = "True if the file was successfully committed, false otherwise."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_file_committed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &file_committed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CCloud_ClientCommitFileUpload_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CCloud_ClientCommitFileUpload_Response)
  return false;
#undef DO_
}

void CCloud_ClientCommitFileUpload_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CCloud_ClientCommitFileUpload_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool file_committed = 1 [(.proto.steam.description) = "True if the file was successfully committed, false otherwise."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->file_committed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CCloud_ClientCommitFileUpload_Response)
}

::google::protobuf::uint8* CCloud_ClientCommitFileUpload_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CCloud_ClientCommitFileUpload_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool file_committed = 1 [(.proto.steam.description) = "True if the file was successfully committed, false otherwise."];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->file_committed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CCloud_ClientCommitFileUpload_Response)
  return target;
}

size_t CCloud_ClientCommitFileUpload_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CCloud_ClientCommitFileUpload_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional bool file_committed = 1 [(.proto.steam.description) = "True if the file was successfully committed, false otherwise."];
  if (has_file_committed()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCloud_ClientCommitFileUpload_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CCloud_ClientCommitFileUpload_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CCloud_ClientCommitFileUpload_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CCloud_ClientCommitFileUpload_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CCloud_ClientCommitFileUpload_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CCloud_ClientCommitFileUpload_Response)
    MergeFrom(*source);
  }
}

void CCloud_ClientCommitFileUpload_Response::MergeFrom(const CCloud_ClientCommitFileUpload_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CCloud_ClientCommitFileUpload_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_file_committed()) {
    set_file_committed(from.file_committed());
  }
}

void CCloud_ClientCommitFileUpload_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CCloud_ClientCommitFileUpload_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCloud_ClientCommitFileUpload_Response::CopyFrom(const CCloud_ClientCommitFileUpload_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CCloud_ClientCommitFileUpload_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_ClientCommitFileUpload_Response::IsInitialized() const {
  return true;
}

void CCloud_ClientCommitFileUpload_Response::Swap(CCloud_ClientCommitFileUpload_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCloud_ClientCommitFileUpload_Response::InternalSwap(CCloud_ClientCommitFileUpload_Response* other) {
  std::swap(file_committed_, other->file_committed_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CCloud_ClientCommitFileUpload_Response::GetMetadata() const {
  protobuf_steammessages_5fcloud_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fcloud_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CCloud_ClientCommitFileUpload_Response

// optional bool file_committed = 1 [(.proto.steam.description) = "True if the file was successfully committed, false otherwise."];
bool CCloud_ClientCommitFileUpload_Response::has_file_committed() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CCloud_ClientCommitFileUpload_Response::set_has_file_committed() {
  _has_bits_[0] |= 0x00000001u;
}
void CCloud_ClientCommitFileUpload_Response::clear_has_file_committed() {
  _has_bits_[0] &= ~0x00000001u;
}
void CCloud_ClientCommitFileUpload_Response::clear_file_committed() {
  file_committed_ = false;
  clear_has_file_committed();
}
bool CCloud_ClientCommitFileUpload_Response::file_committed() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_ClientCommitFileUpload_Response.file_committed)
  return file_committed_;
}
void CCloud_ClientCommitFileUpload_Response::set_file_committed(bool value) {
  set_has_file_committed();
  file_committed_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_ClientCommitFileUpload_Response.file_committed)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCloud_ClientFileDownload_Request::kAppidFieldNumber;
const int CCloud_ClientFileDownload_Request::kFilenameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCloud_ClientFileDownload_Request::CCloud_ClientFileDownload_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fcloud_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CCloud_ClientFileDownload_Request)
}
CCloud_ClientFileDownload_Request::CCloud_ClientFileDownload_Request(const CCloud_ClientFileDownload_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_filename()) {
    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  appid_ = from.appid_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CCloud_ClientFileDownload_Request)
}

void CCloud_ClientFileDownload_Request::SharedCtor() {
  _cached_size_ = 0;
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appid_ = 0u;
}

CCloud_ClientFileDownload_Request::~CCloud_ClientFileDownload_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CCloud_ClientFileDownload_Request)
  SharedDtor();
}

void CCloud_ClientFileDownload_Request::SharedDtor() {
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CCloud_ClientFileDownload_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCloud_ClientFileDownload_Request::descriptor() {
  protobuf_steammessages_5fcloud_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fcloud_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CCloud_ClientFileDownload_Request& CCloud_ClientFileDownload_Request::default_instance() {
  protobuf_steammessages_5fcloud_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CCloud_ClientFileDownload_Request* CCloud_ClientFileDownload_Request::New(::google::protobuf::Arena* arena) const {
  CCloud_ClientFileDownload_Request* n = new CCloud_ClientFileDownload_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CCloud_ClientFileDownload_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CCloud_ClientFileDownload_Request)
  if (has_filename()) {
    GOOGLE_DCHECK(!filename_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*filename_.UnsafeRawStringPointer())->clear();
  }
  appid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CCloud_ClientFileDownload_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CCloud_ClientFileDownload_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1 [(.proto.steam.description) = "App ID the file is part of."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string filename = 2 [(.proto.steam.description) = "Filename of the file."];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CCloud_ClientFileDownload_Request.filename");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CCloud_ClientFileDownload_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CCloud_ClientFileDownload_Request)
  return false;
#undef DO_
}

void CCloud_ClientFileDownload_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CCloud_ClientFileDownload_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1 [(.proto.steam.description) = "App ID the file is part of."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional string filename = 2 [(.proto.steam.description) = "Filename of the file."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCloud_ClientFileDownload_Request.filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->filename(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CCloud_ClientFileDownload_Request)
}

::google::protobuf::uint8* CCloud_ClientFileDownload_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CCloud_ClientFileDownload_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1 [(.proto.steam.description) = "App ID the file is part of."];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional string filename = 2 [(.proto.steam.description) = "Filename of the file."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCloud_ClientFileDownload_Request.filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->filename(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CCloud_ClientFileDownload_Request)
  return target;
}

size_t CCloud_ClientFileDownload_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CCloud_ClientFileDownload_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string filename = 2 [(.proto.steam.description) = "Filename of the file."];
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional uint32 appid = 1 [(.proto.steam.description) = "App ID the file is part of."];
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCloud_ClientFileDownload_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CCloud_ClientFileDownload_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CCloud_ClientFileDownload_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CCloud_ClientFileDownload_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CCloud_ClientFileDownload_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CCloud_ClientFileDownload_Request)
    MergeFrom(*source);
  }
}

void CCloud_ClientFileDownload_Request::MergeFrom(const CCloud_ClientFileDownload_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CCloud_ClientFileDownload_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_filename();
      filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CCloud_ClientFileDownload_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CCloud_ClientFileDownload_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCloud_ClientFileDownload_Request::CopyFrom(const CCloud_ClientFileDownload_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CCloud_ClientFileDownload_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_ClientFileDownload_Request::IsInitialized() const {
  return true;
}

void CCloud_ClientFileDownload_Request::Swap(CCloud_ClientFileDownload_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCloud_ClientFileDownload_Request::InternalSwap(CCloud_ClientFileDownload_Request* other) {
  filename_.Swap(&other->filename_);
  std::swap(appid_, other->appid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CCloud_ClientFileDownload_Request::GetMetadata() const {
  protobuf_steammessages_5fcloud_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fcloud_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CCloud_ClientFileDownload_Request

// optional uint32 appid = 1 [(.proto.steam.description) = "App ID the file is part of."];
bool CCloud_ClientFileDownload_Request::has_appid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CCloud_ClientFileDownload_Request::set_has_appid() {
  _has_bits_[0] |= 0x00000002u;
}
void CCloud_ClientFileDownload_Request::clear_has_appid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CCloud_ClientFileDownload_Request::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
::google::protobuf::uint32 CCloud_ClientFileDownload_Request::appid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_ClientFileDownload_Request.appid)
  return appid_;
}
void CCloud_ClientFileDownload_Request::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_ClientFileDownload_Request.appid)
}

// optional string filename = 2 [(.proto.steam.description) = "Filename of the file."];
bool CCloud_ClientFileDownload_Request::has_filename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CCloud_ClientFileDownload_Request::set_has_filename() {
  _has_bits_[0] |= 0x00000001u;
}
void CCloud_ClientFileDownload_Request::clear_has_filename() {
  _has_bits_[0] &= ~0x00000001u;
}
void CCloud_ClientFileDownload_Request::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_filename();
}
const ::std::string& CCloud_ClientFileDownload_Request::filename() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_ClientFileDownload_Request.filename)
  return filename_.GetNoArena();
}
void CCloud_ClientFileDownload_Request::set_filename(const ::std::string& value) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_ClientFileDownload_Request.filename)
}
#if LANG_CXX11
void CCloud_ClientFileDownload_Request::set_filename(::std::string&& value) {
  set_has_filename();
  filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CCloud_ClientFileDownload_Request.filename)
}
#endif
void CCloud_ClientFileDownload_Request::set_filename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CCloud_ClientFileDownload_Request.filename)
}
void CCloud_ClientFileDownload_Request::set_filename(const char* value, size_t size) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CCloud_ClientFileDownload_Request.filename)
}
::std::string* CCloud_ClientFileDownload_Request::mutable_filename() {
  set_has_filename();
  // @@protoc_insertion_point(field_mutable:proto.steam.CCloud_ClientFileDownload_Request.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CCloud_ClientFileDownload_Request::release_filename() {
  // @@protoc_insertion_point(field_release:proto.steam.CCloud_ClientFileDownload_Request.filename)
  clear_has_filename();
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CCloud_ClientFileDownload_Request::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    set_has_filename();
  } else {
    clear_has_filename();
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CCloud_ClientFileDownload_Request.filename)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCloud_ClientFileDownload_Response_HTTPHeaders::kNameFieldNumber;
const int CCloud_ClientFileDownload_Response_HTTPHeaders::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCloud_ClientFileDownload_Response_HTTPHeaders::CCloud_ClientFileDownload_Response_HTTPHeaders()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fcloud_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CCloud_ClientFileDownload_Response.HTTPHeaders)
}
CCloud_ClientFileDownload_Response_HTTPHeaders::CCloud_ClientFileDownload_Response_HTTPHeaders(const CCloud_ClientFileDownload_Response_HTTPHeaders& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.steam.CCloud_ClientFileDownload_Response.HTTPHeaders)
}

void CCloud_ClientFileDownload_Response_HTTPHeaders::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CCloud_ClientFileDownload_Response_HTTPHeaders::~CCloud_ClientFileDownload_Response_HTTPHeaders() {
  // @@protoc_insertion_point(destructor:proto.steam.CCloud_ClientFileDownload_Response.HTTPHeaders)
  SharedDtor();
}

void CCloud_ClientFileDownload_Response_HTTPHeaders::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CCloud_ClientFileDownload_Response_HTTPHeaders::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCloud_ClientFileDownload_Response_HTTPHeaders::descriptor() {
  protobuf_steammessages_5fcloud_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fcloud_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CCloud_ClientFileDownload_Response_HTTPHeaders& CCloud_ClientFileDownload_Response_HTTPHeaders::default_instance() {
  protobuf_steammessages_5fcloud_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CCloud_ClientFileDownload_Response_HTTPHeaders* CCloud_ClientFileDownload_Response_HTTPHeaders::New(::google::protobuf::Arena* arena) const {
  CCloud_ClientFileDownload_Response_HTTPHeaders* n = new CCloud_ClientFileDownload_Response_HTTPHeaders;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CCloud_ClientFileDownload_Response_HTTPHeaders::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CCloud_ClientFileDownload_Response.HTTPHeaders)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_value()) {
      GOOGLE_DCHECK(!value_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*value_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CCloud_ClientFileDownload_Response_HTTPHeaders::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CCloud_ClientFileDownload_Response.HTTPHeaders)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CCloud_ClientFileDownload_Response.HTTPHeaders.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CCloud_ClientFileDownload_Response.HTTPHeaders.value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CCloud_ClientFileDownload_Response.HTTPHeaders)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CCloud_ClientFileDownload_Response.HTTPHeaders)
  return false;
#undef DO_
}

void CCloud_ClientFileDownload_Response_HTTPHeaders::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CCloud_ClientFileDownload_Response.HTTPHeaders)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCloud_ClientFileDownload_Response.HTTPHeaders.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCloud_ClientFileDownload_Response.HTTPHeaders.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CCloud_ClientFileDownload_Response.HTTPHeaders)
}

::google::protobuf::uint8* CCloud_ClientFileDownload_Response_HTTPHeaders::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CCloud_ClientFileDownload_Response.HTTPHeaders)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCloud_ClientFileDownload_Response.HTTPHeaders.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCloud_ClientFileDownload_Response.HTTPHeaders.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CCloud_ClientFileDownload_Response.HTTPHeaders)
  return target;
}

size_t CCloud_ClientFileDownload_Response_HTTPHeaders::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CCloud_ClientFileDownload_Response.HTTPHeaders)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCloud_ClientFileDownload_Response_HTTPHeaders::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CCloud_ClientFileDownload_Response.HTTPHeaders)
  GOOGLE_DCHECK_NE(&from, this);
  const CCloud_ClientFileDownload_Response_HTTPHeaders* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CCloud_ClientFileDownload_Response_HTTPHeaders>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CCloud_ClientFileDownload_Response.HTTPHeaders)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CCloud_ClientFileDownload_Response.HTTPHeaders)
    MergeFrom(*source);
  }
}

void CCloud_ClientFileDownload_Response_HTTPHeaders::MergeFrom(const CCloud_ClientFileDownload_Response_HTTPHeaders& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CCloud_ClientFileDownload_Response.HTTPHeaders)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
}

void CCloud_ClientFileDownload_Response_HTTPHeaders::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CCloud_ClientFileDownload_Response.HTTPHeaders)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCloud_ClientFileDownload_Response_HTTPHeaders::CopyFrom(const CCloud_ClientFileDownload_Response_HTTPHeaders& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CCloud_ClientFileDownload_Response.HTTPHeaders)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_ClientFileDownload_Response_HTTPHeaders::IsInitialized() const {
  return true;
}

void CCloud_ClientFileDownload_Response_HTTPHeaders::Swap(CCloud_ClientFileDownload_Response_HTTPHeaders* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCloud_ClientFileDownload_Response_HTTPHeaders::InternalSwap(CCloud_ClientFileDownload_Response_HTTPHeaders* other) {
  name_.Swap(&other->name_);
  value_.Swap(&other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CCloud_ClientFileDownload_Response_HTTPHeaders::GetMetadata() const {
  protobuf_steammessages_5fcloud_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fcloud_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CCloud_ClientFileDownload_Response_HTTPHeaders

// optional string name = 1;
bool CCloud_ClientFileDownload_Response_HTTPHeaders::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CCloud_ClientFileDownload_Response_HTTPHeaders::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CCloud_ClientFileDownload_Response_HTTPHeaders::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CCloud_ClientFileDownload_Response_HTTPHeaders::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& CCloud_ClientFileDownload_Response_HTTPHeaders::name() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_ClientFileDownload_Response.HTTPHeaders.name)
  return name_.GetNoArena();
}
void CCloud_ClientFileDownload_Response_HTTPHeaders::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_ClientFileDownload_Response.HTTPHeaders.name)
}
#if LANG_CXX11
void CCloud_ClientFileDownload_Response_HTTPHeaders::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CCloud_ClientFileDownload_Response.HTTPHeaders.name)
}
#endif
void CCloud_ClientFileDownload_Response_HTTPHeaders::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CCloud_ClientFileDownload_Response.HTTPHeaders.name)
}
void CCloud_ClientFileDownload_Response_HTTPHeaders::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CCloud_ClientFileDownload_Response.HTTPHeaders.name)
}
::std::string* CCloud_ClientFileDownload_Response_HTTPHeaders::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:proto.steam.CCloud_ClientFileDownload_Response.HTTPHeaders.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CCloud_ClientFileDownload_Response_HTTPHeaders::release_name() {
  // @@protoc_insertion_point(field_release:proto.steam.CCloud_ClientFileDownload_Response.HTTPHeaders.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CCloud_ClientFileDownload_Response_HTTPHeaders::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CCloud_ClientFileDownload_Response.HTTPHeaders.name)
}

// optional string value = 2;
bool CCloud_ClientFileDownload_Response_HTTPHeaders::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CCloud_ClientFileDownload_Response_HTTPHeaders::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void CCloud_ClientFileDownload_Response_HTTPHeaders::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void CCloud_ClientFileDownload_Response_HTTPHeaders::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
const ::std::string& CCloud_ClientFileDownload_Response_HTTPHeaders::value() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_ClientFileDownload_Response.HTTPHeaders.value)
  return value_.GetNoArena();
}
void CCloud_ClientFileDownload_Response_HTTPHeaders::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_ClientFileDownload_Response.HTTPHeaders.value)
}
#if LANG_CXX11
void CCloud_ClientFileDownload_Response_HTTPHeaders::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CCloud_ClientFileDownload_Response.HTTPHeaders.value)
}
#endif
void CCloud_ClientFileDownload_Response_HTTPHeaders::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CCloud_ClientFileDownload_Response.HTTPHeaders.value)
}
void CCloud_ClientFileDownload_Response_HTTPHeaders::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CCloud_ClientFileDownload_Response.HTTPHeaders.value)
}
::std::string* CCloud_ClientFileDownload_Response_HTTPHeaders::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:proto.steam.CCloud_ClientFileDownload_Response.HTTPHeaders.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CCloud_ClientFileDownload_Response_HTTPHeaders::release_value() {
  // @@protoc_insertion_point(field_release:proto.steam.CCloud_ClientFileDownload_Response.HTTPHeaders.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CCloud_ClientFileDownload_Response_HTTPHeaders::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CCloud_ClientFileDownload_Response.HTTPHeaders.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCloud_ClientFileDownload_Response::kAppidFieldNumber;
const int CCloud_ClientFileDownload_Response::kFileSizeFieldNumber;
const int CCloud_ClientFileDownload_Response::kRawFileSizeFieldNumber;
const int CCloud_ClientFileDownload_Response::kShaFileFieldNumber;
const int CCloud_ClientFileDownload_Response::kTimeStampFieldNumber;
const int CCloud_ClientFileDownload_Response::kIsExplicitDeleteFieldNumber;
const int CCloud_ClientFileDownload_Response::kUrlHostFieldNumber;
const int CCloud_ClientFileDownload_Response::kUrlPathFieldNumber;
const int CCloud_ClientFileDownload_Response::kUseHttpsFieldNumber;
const int CCloud_ClientFileDownload_Response::kRequestHeadersFieldNumber;
const int CCloud_ClientFileDownload_Response::kEncryptedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCloud_ClientFileDownload_Response::CCloud_ClientFileDownload_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fcloud_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CCloud_ClientFileDownload_Response)
}
CCloud_ClientFileDownload_Response::CCloud_ClientFileDownload_Response(const CCloud_ClientFileDownload_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      request_headers_(from.request_headers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sha_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sha_file()) {
    sha_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha_file_);
  }
  url_host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url_host()) {
    url_host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_host_);
  }
  url_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url_path()) {
    url_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_path_);
  }
  ::memcpy(&appid_, &from.appid_,
    reinterpret_cast<char*>(&encrypted_) -
    reinterpret_cast<char*>(&appid_) + sizeof(encrypted_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CCloud_ClientFileDownload_Response)
}

void CCloud_ClientFileDownload_Response::SharedCtor() {
  _cached_size_ = 0;
  sha_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&appid_, 0, reinterpret_cast<char*>(&encrypted_) -
    reinterpret_cast<char*>(&appid_) + sizeof(encrypted_));
}

CCloud_ClientFileDownload_Response::~CCloud_ClientFileDownload_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CCloud_ClientFileDownload_Response)
  SharedDtor();
}

void CCloud_ClientFileDownload_Response::SharedDtor() {
  sha_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_host_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CCloud_ClientFileDownload_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCloud_ClientFileDownload_Response::descriptor() {
  protobuf_steammessages_5fcloud_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fcloud_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CCloud_ClientFileDownload_Response& CCloud_ClientFileDownload_Response::default_instance() {
  protobuf_steammessages_5fcloud_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CCloud_ClientFileDownload_Response* CCloud_ClientFileDownload_Response::New(::google::protobuf::Arena* arena) const {
  CCloud_ClientFileDownload_Response* n = new CCloud_ClientFileDownload_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CCloud_ClientFileDownload_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CCloud_ClientFileDownload_Response)
  request_headers_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    if (has_sha_file()) {
      GOOGLE_DCHECK(!sha_file_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*sha_file_.UnsafeRawStringPointer())->clear();
    }
    if (has_url_host()) {
      GOOGLE_DCHECK(!url_host_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_host_.UnsafeRawStringPointer())->clear();
    }
    if (has_url_path()) {
      GOOGLE_DCHECK(!url_path_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_path_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 248u) {
    ::memset(&appid_, 0, reinterpret_cast<char*>(&is_explicit_delete_) -
      reinterpret_cast<char*>(&appid_) + sizeof(is_explicit_delete_));
  }
  if (_has_bits_[8 / 32] & 768u) {
    ::memset(&use_https_, 0, reinterpret_cast<char*>(&encrypted_) -
      reinterpret_cast<char*>(&use_https_) + sizeof(encrypted_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CCloud_ClientFileDownload_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CCloud_ClientFileDownload_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1 [(.proto.steam.description) = "Application the file belongs to"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 file_size = 2 [(.proto.steam.description) = "file size as transmitted and stored in the Cloud"];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_file_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &file_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 raw_file_size = 3 [(.proto.steam.description) = "file size when decompressed and/or decrypted"];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_raw_file_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raw_file_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes sha_file = 4 [(.proto.steam.description) = "SHA of file"];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sha_file()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 time_stamp = 5 [(.proto.steam.description) = "Timestamp of file"];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_time_stamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_stamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_explicit_delete = 6 [(.proto.steam.description) = "True if this is an explicitly deleted file"];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_is_explicit_delete();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_explicit_delete_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string url_host = 7 [(.proto.steam.description) = "Host to GET the file from"];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url_host().data(), this->url_host().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CCloud_ClientFileDownload_Response.url_host");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string url_path = 8 [(.proto.steam.description) = "Path on that host to use, including URL parameters if any"];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url_path().data(), this->url_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CCloud_ClientFileDownload_Response.url_path");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_https = 9 [(.proto.steam.description) = "If set, use HTTPS, else use HTTP"];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_use_https();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_https_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CCloud_ClientFileDownload_Response.HTTPHeaders request_headers = 10 [(.proto.steam.description) = "Name-value pairs to be sent in HTTP GET request."];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_request_headers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool encrypted = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_encrypted();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encrypted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CCloud_ClientFileDownload_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CCloud_ClientFileDownload_Response)
  return false;
#undef DO_
}

void CCloud_ClientFileDownload_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CCloud_ClientFileDownload_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1 [(.proto.steam.description) = "Application the file belongs to"];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional uint32 file_size = 2 [(.proto.steam.description) = "file size as transmitted and stored in the Cloud"];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->file_size(), output);
  }

  // optional uint32 raw_file_size = 3 [(.proto.steam.description) = "file size when decompressed and/or decrypted"];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->raw_file_size(), output);
  }

  // optional bytes sha_file = 4 [(.proto.steam.description) = "SHA of file"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->sha_file(), output);
  }

  // optional uint64 time_stamp = 5 [(.proto.steam.description) = "Timestamp of file"];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->time_stamp(), output);
  }

  // optional bool is_explicit_delete = 6 [(.proto.steam.description) = "True if this is an explicitly deleted file"];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_explicit_delete(), output);
  }

  // optional string url_host = 7 [(.proto.steam.description) = "Host to GET the file from"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url_host().data(), this->url_host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCloud_ClientFileDownload_Response.url_host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->url_host(), output);
  }

  // optional string url_path = 8 [(.proto.steam.description) = "Path on that host to use, including URL parameters if any"];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url_path().data(), this->url_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCloud_ClientFileDownload_Response.url_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->url_path(), output);
  }

  // optional bool use_https = 9 [(.proto.steam.description) = "If set, use HTTPS, else use HTTP"];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->use_https(), output);
  }

  // repeated .proto.steam.CCloud_ClientFileDownload_Response.HTTPHeaders request_headers = 10 [(.proto.steam.description) = "Name-value pairs to be sent in HTTP GET request."];
  for (unsigned int i = 0, n = this->request_headers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->request_headers(i), output);
  }

  // optional bool encrypted = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->encrypted(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CCloud_ClientFileDownload_Response)
}

::google::protobuf::uint8* CCloud_ClientFileDownload_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CCloud_ClientFileDownload_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1 [(.proto.steam.description) = "Application the file belongs to"];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional uint32 file_size = 2 [(.proto.steam.description) = "file size as transmitted and stored in the Cloud"];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->file_size(), target);
  }

  // optional uint32 raw_file_size = 3 [(.proto.steam.description) = "file size when decompressed and/or decrypted"];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->raw_file_size(), target);
  }

  // optional bytes sha_file = 4 [(.proto.steam.description) = "SHA of file"];
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->sha_file(), target);
  }

  // optional uint64 time_stamp = 5 [(.proto.steam.description) = "Timestamp of file"];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->time_stamp(), target);
  }

  // optional bool is_explicit_delete = 6 [(.proto.steam.description) = "True if this is an explicitly deleted file"];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_explicit_delete(), target);
  }

  // optional string url_host = 7 [(.proto.steam.description) = "Host to GET the file from"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url_host().data(), this->url_host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCloud_ClientFileDownload_Response.url_host");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->url_host(), target);
  }

  // optional string url_path = 8 [(.proto.steam.description) = "Path on that host to use, including URL parameters if any"];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url_path().data(), this->url_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCloud_ClientFileDownload_Response.url_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->url_path(), target);
  }

  // optional bool use_https = 9 [(.proto.steam.description) = "If set, use HTTPS, else use HTTP"];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->use_https(), target);
  }

  // repeated .proto.steam.CCloud_ClientFileDownload_Response.HTTPHeaders request_headers = 10 [(.proto.steam.description) = "Name-value pairs to be sent in HTTP GET request."];
  for (unsigned int i = 0, n = this->request_headers_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, this->request_headers(i), deterministic, target);
  }

  // optional bool encrypted = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->encrypted(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CCloud_ClientFileDownload_Response)
  return target;
}

size_t CCloud_ClientFileDownload_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CCloud_ClientFileDownload_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.steam.CCloud_ClientFileDownload_Response.HTTPHeaders request_headers = 10 [(.proto.steam.description) = "Name-value pairs to be sent in HTTP GET request."];
  {
    unsigned int count = this->request_headers_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->request_headers(i));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional bytes sha_file = 4 [(.proto.steam.description) = "SHA of file"];
    if (has_sha_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sha_file());
    }

    // optional string url_host = 7 [(.proto.steam.description) = "Host to GET the file from"];
    if (has_url_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url_host());
    }

    // optional string url_path = 8 [(.proto.steam.description) = "Path on that host to use, including URL parameters if any"];
    if (has_url_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url_path());
    }

    // optional uint32 appid = 1 [(.proto.steam.description) = "Application the file belongs to"];
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional uint32 file_size = 2 [(.proto.steam.description) = "file size as transmitted and stored in the Cloud"];
    if (has_file_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->file_size());
    }

    // optional uint64 time_stamp = 5 [(.proto.steam.description) = "Timestamp of file"];
    if (has_time_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time_stamp());
    }

    // optional uint32 raw_file_size = 3 [(.proto.steam.description) = "file size when decompressed and/or decrypted"];
    if (has_raw_file_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->raw_file_size());
    }

    // optional bool is_explicit_delete = 6 [(.proto.steam.description) = "True if this is an explicitly deleted file"];
    if (has_is_explicit_delete()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional bool use_https = 9 [(.proto.steam.description) = "If set, use HTTPS, else use HTTP"];
    if (has_use_https()) {
      total_size += 1 + 1;
    }

    // optional bool encrypted = 11;
    if (has_encrypted()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCloud_ClientFileDownload_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CCloud_ClientFileDownload_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CCloud_ClientFileDownload_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CCloud_ClientFileDownload_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CCloud_ClientFileDownload_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CCloud_ClientFileDownload_Response)
    MergeFrom(*source);
  }
}

void CCloud_ClientFileDownload_Response::MergeFrom(const CCloud_ClientFileDownload_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CCloud_ClientFileDownload_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  request_headers_.MergeFrom(from.request_headers_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_sha_file();
      sha_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha_file_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_url_host();
      url_host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_host_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_url_path();
      url_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_path_);
    }
    if (cached_has_bits & 0x00000008u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000010u) {
      file_size_ = from.file_size_;
    }
    if (cached_has_bits & 0x00000020u) {
      time_stamp_ = from.time_stamp_;
    }
    if (cached_has_bits & 0x00000040u) {
      raw_file_size_ = from.raw_file_size_;
    }
    if (cached_has_bits & 0x00000080u) {
      is_explicit_delete_ = from.is_explicit_delete_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      use_https_ = from.use_https_;
    }
    if (cached_has_bits & 0x00000200u) {
      encrypted_ = from.encrypted_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CCloud_ClientFileDownload_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CCloud_ClientFileDownload_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCloud_ClientFileDownload_Response::CopyFrom(const CCloud_ClientFileDownload_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CCloud_ClientFileDownload_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_ClientFileDownload_Response::IsInitialized() const {
  return true;
}

void CCloud_ClientFileDownload_Response::Swap(CCloud_ClientFileDownload_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCloud_ClientFileDownload_Response::InternalSwap(CCloud_ClientFileDownload_Response* other) {
  request_headers_.InternalSwap(&other->request_headers_);
  sha_file_.Swap(&other->sha_file_);
  url_host_.Swap(&other->url_host_);
  url_path_.Swap(&other->url_path_);
  std::swap(appid_, other->appid_);
  std::swap(file_size_, other->file_size_);
  std::swap(time_stamp_, other->time_stamp_);
  std::swap(raw_file_size_, other->raw_file_size_);
  std::swap(is_explicit_delete_, other->is_explicit_delete_);
  std::swap(use_https_, other->use_https_);
  std::swap(encrypted_, other->encrypted_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CCloud_ClientFileDownload_Response::GetMetadata() const {
  protobuf_steammessages_5fcloud_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fcloud_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CCloud_ClientFileDownload_Response

// optional uint32 appid = 1 [(.proto.steam.description) = "Application the file belongs to"];
bool CCloud_ClientFileDownload_Response::has_appid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CCloud_ClientFileDownload_Response::set_has_appid() {
  _has_bits_[0] |= 0x00000008u;
}
void CCloud_ClientFileDownload_Response::clear_has_appid() {
  _has_bits_[0] &= ~0x00000008u;
}
void CCloud_ClientFileDownload_Response::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
::google::protobuf::uint32 CCloud_ClientFileDownload_Response::appid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_ClientFileDownload_Response.appid)
  return appid_;
}
void CCloud_ClientFileDownload_Response::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_ClientFileDownload_Response.appid)
}

// optional uint32 file_size = 2 [(.proto.steam.description) = "file size as transmitted and stored in the Cloud"];
bool CCloud_ClientFileDownload_Response::has_file_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CCloud_ClientFileDownload_Response::set_has_file_size() {
  _has_bits_[0] |= 0x00000010u;
}
void CCloud_ClientFileDownload_Response::clear_has_file_size() {
  _has_bits_[0] &= ~0x00000010u;
}
void CCloud_ClientFileDownload_Response::clear_file_size() {
  file_size_ = 0u;
  clear_has_file_size();
}
::google::protobuf::uint32 CCloud_ClientFileDownload_Response::file_size() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_ClientFileDownload_Response.file_size)
  return file_size_;
}
void CCloud_ClientFileDownload_Response::set_file_size(::google::protobuf::uint32 value) {
  set_has_file_size();
  file_size_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_ClientFileDownload_Response.file_size)
}

// optional uint32 raw_file_size = 3 [(.proto.steam.description) = "file size when decompressed and/or decrypted"];
bool CCloud_ClientFileDownload_Response::has_raw_file_size() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CCloud_ClientFileDownload_Response::set_has_raw_file_size() {
  _has_bits_[0] |= 0x00000040u;
}
void CCloud_ClientFileDownload_Response::clear_has_raw_file_size() {
  _has_bits_[0] &= ~0x00000040u;
}
void CCloud_ClientFileDownload_Response::clear_raw_file_size() {
  raw_file_size_ = 0u;
  clear_has_raw_file_size();
}
::google::protobuf::uint32 CCloud_ClientFileDownload_Response::raw_file_size() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_ClientFileDownload_Response.raw_file_size)
  return raw_file_size_;
}
void CCloud_ClientFileDownload_Response::set_raw_file_size(::google::protobuf::uint32 value) {
  set_has_raw_file_size();
  raw_file_size_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_ClientFileDownload_Response.raw_file_size)
}

// optional bytes sha_file = 4 [(.proto.steam.description) = "SHA of file"];
bool CCloud_ClientFileDownload_Response::has_sha_file() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CCloud_ClientFileDownload_Response::set_has_sha_file() {
  _has_bits_[0] |= 0x00000001u;
}
void CCloud_ClientFileDownload_Response::clear_has_sha_file() {
  _has_bits_[0] &= ~0x00000001u;
}
void CCloud_ClientFileDownload_Response::clear_sha_file() {
  sha_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sha_file();
}
const ::std::string& CCloud_ClientFileDownload_Response::sha_file() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_ClientFileDownload_Response.sha_file)
  return sha_file_.GetNoArena();
}
void CCloud_ClientFileDownload_Response::set_sha_file(const ::std::string& value) {
  set_has_sha_file();
  sha_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_ClientFileDownload_Response.sha_file)
}
#if LANG_CXX11
void CCloud_ClientFileDownload_Response::set_sha_file(::std::string&& value) {
  set_has_sha_file();
  sha_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CCloud_ClientFileDownload_Response.sha_file)
}
#endif
void CCloud_ClientFileDownload_Response::set_sha_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sha_file();
  sha_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CCloud_ClientFileDownload_Response.sha_file)
}
void CCloud_ClientFileDownload_Response::set_sha_file(const void* value, size_t size) {
  set_has_sha_file();
  sha_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CCloud_ClientFileDownload_Response.sha_file)
}
::std::string* CCloud_ClientFileDownload_Response::mutable_sha_file() {
  set_has_sha_file();
  // @@protoc_insertion_point(field_mutable:proto.steam.CCloud_ClientFileDownload_Response.sha_file)
  return sha_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CCloud_ClientFileDownload_Response::release_sha_file() {
  // @@protoc_insertion_point(field_release:proto.steam.CCloud_ClientFileDownload_Response.sha_file)
  clear_has_sha_file();
  return sha_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CCloud_ClientFileDownload_Response::set_allocated_sha_file(::std::string* sha_file) {
  if (sha_file != NULL) {
    set_has_sha_file();
  } else {
    clear_has_sha_file();
  }
  sha_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sha_file);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CCloud_ClientFileDownload_Response.sha_file)
}

// optional uint64 time_stamp = 5 [(.proto.steam.description) = "Timestamp of file"];
bool CCloud_ClientFileDownload_Response::has_time_stamp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CCloud_ClientFileDownload_Response::set_has_time_stamp() {
  _has_bits_[0] |= 0x00000020u;
}
void CCloud_ClientFileDownload_Response::clear_has_time_stamp() {
  _has_bits_[0] &= ~0x00000020u;
}
void CCloud_ClientFileDownload_Response::clear_time_stamp() {
  time_stamp_ = GOOGLE_ULONGLONG(0);
  clear_has_time_stamp();
}
::google::protobuf::uint64 CCloud_ClientFileDownload_Response::time_stamp() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_ClientFileDownload_Response.time_stamp)
  return time_stamp_;
}
void CCloud_ClientFileDownload_Response::set_time_stamp(::google::protobuf::uint64 value) {
  set_has_time_stamp();
  time_stamp_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_ClientFileDownload_Response.time_stamp)
}

// optional bool is_explicit_delete = 6 [(.proto.steam.description) = "True if this is an explicitly deleted file"];
bool CCloud_ClientFileDownload_Response::has_is_explicit_delete() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CCloud_ClientFileDownload_Response::set_has_is_explicit_delete() {
  _has_bits_[0] |= 0x00000080u;
}
void CCloud_ClientFileDownload_Response::clear_has_is_explicit_delete() {
  _has_bits_[0] &= ~0x00000080u;
}
void CCloud_ClientFileDownload_Response::clear_is_explicit_delete() {
  is_explicit_delete_ = false;
  clear_has_is_explicit_delete();
}
bool CCloud_ClientFileDownload_Response::is_explicit_delete() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_ClientFileDownload_Response.is_explicit_delete)
  return is_explicit_delete_;
}
void CCloud_ClientFileDownload_Response::set_is_explicit_delete(bool value) {
  set_has_is_explicit_delete();
  is_explicit_delete_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_ClientFileDownload_Response.is_explicit_delete)
}

// optional string url_host = 7 [(.proto.steam.description) = "Host to GET the file from"];
bool CCloud_ClientFileDownload_Response::has_url_host() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CCloud_ClientFileDownload_Response::set_has_url_host() {
  _has_bits_[0] |= 0x00000002u;
}
void CCloud_ClientFileDownload_Response::clear_has_url_host() {
  _has_bits_[0] &= ~0x00000002u;
}
void CCloud_ClientFileDownload_Response::clear_url_host() {
  url_host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url_host();
}
const ::std::string& CCloud_ClientFileDownload_Response::url_host() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_ClientFileDownload_Response.url_host)
  return url_host_.GetNoArena();
}
void CCloud_ClientFileDownload_Response::set_url_host(const ::std::string& value) {
  set_has_url_host();
  url_host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_ClientFileDownload_Response.url_host)
}
#if LANG_CXX11
void CCloud_ClientFileDownload_Response::set_url_host(::std::string&& value) {
  set_has_url_host();
  url_host_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CCloud_ClientFileDownload_Response.url_host)
}
#endif
void CCloud_ClientFileDownload_Response::set_url_host(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url_host();
  url_host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CCloud_ClientFileDownload_Response.url_host)
}
void CCloud_ClientFileDownload_Response::set_url_host(const char* value, size_t size) {
  set_has_url_host();
  url_host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CCloud_ClientFileDownload_Response.url_host)
}
::std::string* CCloud_ClientFileDownload_Response::mutable_url_host() {
  set_has_url_host();
  // @@protoc_insertion_point(field_mutable:proto.steam.CCloud_ClientFileDownload_Response.url_host)
  return url_host_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CCloud_ClientFileDownload_Response::release_url_host() {
  // @@protoc_insertion_point(field_release:proto.steam.CCloud_ClientFileDownload_Response.url_host)
  clear_has_url_host();
  return url_host_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CCloud_ClientFileDownload_Response::set_allocated_url_host(::std::string* url_host) {
  if (url_host != NULL) {
    set_has_url_host();
  } else {
    clear_has_url_host();
  }
  url_host_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url_host);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CCloud_ClientFileDownload_Response.url_host)
}

// optional string url_path = 8 [(.proto.steam.description) = "Path on that host to use, including URL parameters if any"];
bool CCloud_ClientFileDownload_Response::has_url_path() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CCloud_ClientFileDownload_Response::set_has_url_path() {
  _has_bits_[0] |= 0x00000004u;
}
void CCloud_ClientFileDownload_Response::clear_has_url_path() {
  _has_bits_[0] &= ~0x00000004u;
}
void CCloud_ClientFileDownload_Response::clear_url_path() {
  url_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url_path();
}
const ::std::string& CCloud_ClientFileDownload_Response::url_path() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_ClientFileDownload_Response.url_path)
  return url_path_.GetNoArena();
}
void CCloud_ClientFileDownload_Response::set_url_path(const ::std::string& value) {
  set_has_url_path();
  url_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_ClientFileDownload_Response.url_path)
}
#if LANG_CXX11
void CCloud_ClientFileDownload_Response::set_url_path(::std::string&& value) {
  set_has_url_path();
  url_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CCloud_ClientFileDownload_Response.url_path)
}
#endif
void CCloud_ClientFileDownload_Response::set_url_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url_path();
  url_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CCloud_ClientFileDownload_Response.url_path)
}
void CCloud_ClientFileDownload_Response::set_url_path(const char* value, size_t size) {
  set_has_url_path();
  url_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CCloud_ClientFileDownload_Response.url_path)
}
::std::string* CCloud_ClientFileDownload_Response::mutable_url_path() {
  set_has_url_path();
  // @@protoc_insertion_point(field_mutable:proto.steam.CCloud_ClientFileDownload_Response.url_path)
  return url_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CCloud_ClientFileDownload_Response::release_url_path() {
  // @@protoc_insertion_point(field_release:proto.steam.CCloud_ClientFileDownload_Response.url_path)
  clear_has_url_path();
  return url_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CCloud_ClientFileDownload_Response::set_allocated_url_path(::std::string* url_path) {
  if (url_path != NULL) {
    set_has_url_path();
  } else {
    clear_has_url_path();
  }
  url_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url_path);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CCloud_ClientFileDownload_Response.url_path)
}

// optional bool use_https = 9 [(.proto.steam.description) = "If set, use HTTPS, else use HTTP"];
bool CCloud_ClientFileDownload_Response::has_use_https() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CCloud_ClientFileDownload_Response::set_has_use_https() {
  _has_bits_[0] |= 0x00000100u;
}
void CCloud_ClientFileDownload_Response::clear_has_use_https() {
  _has_bits_[0] &= ~0x00000100u;
}
void CCloud_ClientFileDownload_Response::clear_use_https() {
  use_https_ = false;
  clear_has_use_https();
}
bool CCloud_ClientFileDownload_Response::use_https() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_ClientFileDownload_Response.use_https)
  return use_https_;
}
void CCloud_ClientFileDownload_Response::set_use_https(bool value) {
  set_has_use_https();
  use_https_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_ClientFileDownload_Response.use_https)
}

// repeated .proto.steam.CCloud_ClientFileDownload_Response.HTTPHeaders request_headers = 10 [(.proto.steam.description) = "Name-value pairs to be sent in HTTP GET request."];
int CCloud_ClientFileDownload_Response::request_headers_size() const {
  return request_headers_.size();
}
void CCloud_ClientFileDownload_Response::clear_request_headers() {
  request_headers_.Clear();
}
const ::proto::steam::CCloud_ClientFileDownload_Response_HTTPHeaders& CCloud_ClientFileDownload_Response::request_headers(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_ClientFileDownload_Response.request_headers)
  return request_headers_.Get(index);
}
::proto::steam::CCloud_ClientFileDownload_Response_HTTPHeaders* CCloud_ClientFileDownload_Response::mutable_request_headers(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CCloud_ClientFileDownload_Response.request_headers)
  return request_headers_.Mutable(index);
}
::proto::steam::CCloud_ClientFileDownload_Response_HTTPHeaders* CCloud_ClientFileDownload_Response::add_request_headers() {
  // @@protoc_insertion_point(field_add:proto.steam.CCloud_ClientFileDownload_Response.request_headers)
  return request_headers_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::CCloud_ClientFileDownload_Response_HTTPHeaders >*
CCloud_ClientFileDownload_Response::mutable_request_headers() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CCloud_ClientFileDownload_Response.request_headers)
  return &request_headers_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::CCloud_ClientFileDownload_Response_HTTPHeaders >&
CCloud_ClientFileDownload_Response::request_headers() const {
  // @@protoc_insertion_point(field_list:proto.steam.CCloud_ClientFileDownload_Response.request_headers)
  return request_headers_;
}

// optional bool encrypted = 11;
bool CCloud_ClientFileDownload_Response::has_encrypted() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CCloud_ClientFileDownload_Response::set_has_encrypted() {
  _has_bits_[0] |= 0x00000200u;
}
void CCloud_ClientFileDownload_Response::clear_has_encrypted() {
  _has_bits_[0] &= ~0x00000200u;
}
void CCloud_ClientFileDownload_Response::clear_encrypted() {
  encrypted_ = false;
  clear_has_encrypted();
}
bool CCloud_ClientFileDownload_Response::encrypted() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_ClientFileDownload_Response.encrypted)
  return encrypted_;
}
void CCloud_ClientFileDownload_Response::set_encrypted(bool value) {
  set_has_encrypted();
  encrypted_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_ClientFileDownload_Response.encrypted)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCloud_ClientDeleteFile_Request::kAppidFieldNumber;
const int CCloud_ClientDeleteFile_Request::kFilenameFieldNumber;
const int CCloud_ClientDeleteFile_Request::kIsExplicitDeleteFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCloud_ClientDeleteFile_Request::CCloud_ClientDeleteFile_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fcloud_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CCloud_ClientDeleteFile_Request)
}
CCloud_ClientDeleteFile_Request::CCloud_ClientDeleteFile_Request(const CCloud_ClientDeleteFile_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_filename()) {
    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  ::memcpy(&appid_, &from.appid_,
    reinterpret_cast<char*>(&is_explicit_delete_) -
    reinterpret_cast<char*>(&appid_) + sizeof(is_explicit_delete_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CCloud_ClientDeleteFile_Request)
}

void CCloud_ClientDeleteFile_Request::SharedCtor() {
  _cached_size_ = 0;
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&appid_, 0, reinterpret_cast<char*>(&is_explicit_delete_) -
    reinterpret_cast<char*>(&appid_) + sizeof(is_explicit_delete_));
}

CCloud_ClientDeleteFile_Request::~CCloud_ClientDeleteFile_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CCloud_ClientDeleteFile_Request)
  SharedDtor();
}

void CCloud_ClientDeleteFile_Request::SharedDtor() {
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CCloud_ClientDeleteFile_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCloud_ClientDeleteFile_Request::descriptor() {
  protobuf_steammessages_5fcloud_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fcloud_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CCloud_ClientDeleteFile_Request& CCloud_ClientDeleteFile_Request::default_instance() {
  protobuf_steammessages_5fcloud_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CCloud_ClientDeleteFile_Request* CCloud_ClientDeleteFile_Request::New(::google::protobuf::Arena* arena) const {
  CCloud_ClientDeleteFile_Request* n = new CCloud_ClientDeleteFile_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CCloud_ClientDeleteFile_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CCloud_ClientDeleteFile_Request)
  if (has_filename()) {
    GOOGLE_DCHECK(!filename_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*filename_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&appid_, 0, reinterpret_cast<char*>(&is_explicit_delete_) -
      reinterpret_cast<char*>(&appid_) + sizeof(is_explicit_delete_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CCloud_ClientDeleteFile_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CCloud_ClientDeleteFile_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1 [(.proto.steam.description) = "App ID for which the file is being deleted."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string filename = 2 [(.proto.steam.description) = "Filename of file."];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CCloud_ClientDeleteFile_Request.filename");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_explicit_delete = 3 [(.proto.steam.description) = "If true, this is a \'delete\'; if false, it is a \'forget\'"];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_is_explicit_delete();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_explicit_delete_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CCloud_ClientDeleteFile_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CCloud_ClientDeleteFile_Request)
  return false;
#undef DO_
}

void CCloud_ClientDeleteFile_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CCloud_ClientDeleteFile_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1 [(.proto.steam.description) = "App ID for which the file is being deleted."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional string filename = 2 [(.proto.steam.description) = "Filename of file."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCloud_ClientDeleteFile_Request.filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->filename(), output);
  }

  // optional bool is_explicit_delete = 3 [(.proto.steam.description) = "If true, this is a \'delete\'; if false, it is a \'forget\'"];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_explicit_delete(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CCloud_ClientDeleteFile_Request)
}

::google::protobuf::uint8* CCloud_ClientDeleteFile_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CCloud_ClientDeleteFile_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1 [(.proto.steam.description) = "App ID for which the file is being deleted."];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional string filename = 2 [(.proto.steam.description) = "Filename of file."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCloud_ClientDeleteFile_Request.filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->filename(), target);
  }

  // optional bool is_explicit_delete = 3 [(.proto.steam.description) = "If true, this is a \'delete\'; if false, it is a \'forget\'"];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_explicit_delete(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CCloud_ClientDeleteFile_Request)
  return target;
}

size_t CCloud_ClientDeleteFile_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CCloud_ClientDeleteFile_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string filename = 2 [(.proto.steam.description) = "Filename of file."];
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional uint32 appid = 1 [(.proto.steam.description) = "App ID for which the file is being deleted."];
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional bool is_explicit_delete = 3 [(.proto.steam.description) = "If true, this is a \'delete\'; if false, it is a \'forget\'"];
    if (has_is_explicit_delete()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCloud_ClientDeleteFile_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CCloud_ClientDeleteFile_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CCloud_ClientDeleteFile_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CCloud_ClientDeleteFile_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CCloud_ClientDeleteFile_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CCloud_ClientDeleteFile_Request)
    MergeFrom(*source);
  }
}

void CCloud_ClientDeleteFile_Request::MergeFrom(const CCloud_ClientDeleteFile_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CCloud_ClientDeleteFile_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_filename();
      filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_explicit_delete_ = from.is_explicit_delete_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CCloud_ClientDeleteFile_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CCloud_ClientDeleteFile_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCloud_ClientDeleteFile_Request::CopyFrom(const CCloud_ClientDeleteFile_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CCloud_ClientDeleteFile_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_ClientDeleteFile_Request::IsInitialized() const {
  return true;
}

void CCloud_ClientDeleteFile_Request::Swap(CCloud_ClientDeleteFile_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCloud_ClientDeleteFile_Request::InternalSwap(CCloud_ClientDeleteFile_Request* other) {
  filename_.Swap(&other->filename_);
  std::swap(appid_, other->appid_);
  std::swap(is_explicit_delete_, other->is_explicit_delete_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CCloud_ClientDeleteFile_Request::GetMetadata() const {
  protobuf_steammessages_5fcloud_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fcloud_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CCloud_ClientDeleteFile_Request

// optional uint32 appid = 1 [(.proto.steam.description) = "App ID for which the file is being deleted."];
bool CCloud_ClientDeleteFile_Request::has_appid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CCloud_ClientDeleteFile_Request::set_has_appid() {
  _has_bits_[0] |= 0x00000002u;
}
void CCloud_ClientDeleteFile_Request::clear_has_appid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CCloud_ClientDeleteFile_Request::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
::google::protobuf::uint32 CCloud_ClientDeleteFile_Request::appid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_ClientDeleteFile_Request.appid)
  return appid_;
}
void CCloud_ClientDeleteFile_Request::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_ClientDeleteFile_Request.appid)
}

// optional string filename = 2 [(.proto.steam.description) = "Filename of file."];
bool CCloud_ClientDeleteFile_Request::has_filename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CCloud_ClientDeleteFile_Request::set_has_filename() {
  _has_bits_[0] |= 0x00000001u;
}
void CCloud_ClientDeleteFile_Request::clear_has_filename() {
  _has_bits_[0] &= ~0x00000001u;
}
void CCloud_ClientDeleteFile_Request::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_filename();
}
const ::std::string& CCloud_ClientDeleteFile_Request::filename() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_ClientDeleteFile_Request.filename)
  return filename_.GetNoArena();
}
void CCloud_ClientDeleteFile_Request::set_filename(const ::std::string& value) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_ClientDeleteFile_Request.filename)
}
#if LANG_CXX11
void CCloud_ClientDeleteFile_Request::set_filename(::std::string&& value) {
  set_has_filename();
  filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CCloud_ClientDeleteFile_Request.filename)
}
#endif
void CCloud_ClientDeleteFile_Request::set_filename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CCloud_ClientDeleteFile_Request.filename)
}
void CCloud_ClientDeleteFile_Request::set_filename(const char* value, size_t size) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CCloud_ClientDeleteFile_Request.filename)
}
::std::string* CCloud_ClientDeleteFile_Request::mutable_filename() {
  set_has_filename();
  // @@protoc_insertion_point(field_mutable:proto.steam.CCloud_ClientDeleteFile_Request.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CCloud_ClientDeleteFile_Request::release_filename() {
  // @@protoc_insertion_point(field_release:proto.steam.CCloud_ClientDeleteFile_Request.filename)
  clear_has_filename();
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CCloud_ClientDeleteFile_Request::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    set_has_filename();
  } else {
    clear_has_filename();
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CCloud_ClientDeleteFile_Request.filename)
}

// optional bool is_explicit_delete = 3 [(.proto.steam.description) = "If true, this is a \'delete\'; if false, it is a \'forget\'"];
bool CCloud_ClientDeleteFile_Request::has_is_explicit_delete() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CCloud_ClientDeleteFile_Request::set_has_is_explicit_delete() {
  _has_bits_[0] |= 0x00000004u;
}
void CCloud_ClientDeleteFile_Request::clear_has_is_explicit_delete() {
  _has_bits_[0] &= ~0x00000004u;
}
void CCloud_ClientDeleteFile_Request::clear_is_explicit_delete() {
  is_explicit_delete_ = false;
  clear_has_is_explicit_delete();
}
bool CCloud_ClientDeleteFile_Request::is_explicit_delete() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_ClientDeleteFile_Request.is_explicit_delete)
  return is_explicit_delete_;
}
void CCloud_ClientDeleteFile_Request::set_is_explicit_delete(bool value) {
  set_has_is_explicit_delete();
  is_explicit_delete_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_ClientDeleteFile_Request.is_explicit_delete)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCloud_ClientDeleteFile_Response::CCloud_ClientDeleteFile_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fcloud_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CCloud_ClientDeleteFile_Response)
}
CCloud_ClientDeleteFile_Response::CCloud_ClientDeleteFile_Response(const CCloud_ClientDeleteFile_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CCloud_ClientDeleteFile_Response)
}

void CCloud_ClientDeleteFile_Response::SharedCtor() {
  _cached_size_ = 0;
}

CCloud_ClientDeleteFile_Response::~CCloud_ClientDeleteFile_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CCloud_ClientDeleteFile_Response)
  SharedDtor();
}

void CCloud_ClientDeleteFile_Response::SharedDtor() {
}

void CCloud_ClientDeleteFile_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCloud_ClientDeleteFile_Response::descriptor() {
  protobuf_steammessages_5fcloud_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fcloud_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CCloud_ClientDeleteFile_Response& CCloud_ClientDeleteFile_Response::default_instance() {
  protobuf_steammessages_5fcloud_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CCloud_ClientDeleteFile_Response* CCloud_ClientDeleteFile_Response::New(::google::protobuf::Arena* arena) const {
  CCloud_ClientDeleteFile_Response* n = new CCloud_ClientDeleteFile_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CCloud_ClientDeleteFile_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CCloud_ClientDeleteFile_Response)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CCloud_ClientDeleteFile_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CCloud_ClientDeleteFile_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CCloud_ClientDeleteFile_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CCloud_ClientDeleteFile_Response)
  return false;
#undef DO_
}

void CCloud_ClientDeleteFile_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CCloud_ClientDeleteFile_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CCloud_ClientDeleteFile_Response)
}

::google::protobuf::uint8* CCloud_ClientDeleteFile_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CCloud_ClientDeleteFile_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CCloud_ClientDeleteFile_Response)
  return target;
}

size_t CCloud_ClientDeleteFile_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CCloud_ClientDeleteFile_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCloud_ClientDeleteFile_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CCloud_ClientDeleteFile_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CCloud_ClientDeleteFile_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CCloud_ClientDeleteFile_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CCloud_ClientDeleteFile_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CCloud_ClientDeleteFile_Response)
    MergeFrom(*source);
  }
}

void CCloud_ClientDeleteFile_Response::MergeFrom(const CCloud_ClientDeleteFile_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CCloud_ClientDeleteFile_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CCloud_ClientDeleteFile_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CCloud_ClientDeleteFile_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCloud_ClientDeleteFile_Response::CopyFrom(const CCloud_ClientDeleteFile_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CCloud_ClientDeleteFile_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_ClientDeleteFile_Response::IsInitialized() const {
  return true;
}

void CCloud_ClientDeleteFile_Response::Swap(CCloud_ClientDeleteFile_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCloud_ClientDeleteFile_Response::InternalSwap(CCloud_ClientDeleteFile_Response* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CCloud_ClientDeleteFile_Response::GetMetadata() const {
  protobuf_steammessages_5fcloud_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fcloud_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CCloud_ClientDeleteFile_Response

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCloud_ClientConflictResolution_Notification::kAppidFieldNumber;
const int CCloud_ClientConflictResolution_Notification::kChoseLocalFilesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCloud_ClientConflictResolution_Notification::CCloud_ClientConflictResolution_Notification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fcloud_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CCloud_ClientConflictResolution_Notification)
}
CCloud_ClientConflictResolution_Notification::CCloud_ClientConflictResolution_Notification(const CCloud_ClientConflictResolution_Notification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&appid_, &from.appid_,
    reinterpret_cast<char*>(&chose_local_files_) -
    reinterpret_cast<char*>(&appid_) + sizeof(chose_local_files_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CCloud_ClientConflictResolution_Notification)
}

void CCloud_ClientConflictResolution_Notification::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&appid_, 0, reinterpret_cast<char*>(&chose_local_files_) -
    reinterpret_cast<char*>(&appid_) + sizeof(chose_local_files_));
}

CCloud_ClientConflictResolution_Notification::~CCloud_ClientConflictResolution_Notification() {
  // @@protoc_insertion_point(destructor:proto.steam.CCloud_ClientConflictResolution_Notification)
  SharedDtor();
}

void CCloud_ClientConflictResolution_Notification::SharedDtor() {
}

void CCloud_ClientConflictResolution_Notification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCloud_ClientConflictResolution_Notification::descriptor() {
  protobuf_steammessages_5fcloud_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fcloud_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CCloud_ClientConflictResolution_Notification& CCloud_ClientConflictResolution_Notification::default_instance() {
  protobuf_steammessages_5fcloud_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CCloud_ClientConflictResolution_Notification* CCloud_ClientConflictResolution_Notification::New(::google::protobuf::Arena* arena) const {
  CCloud_ClientConflictResolution_Notification* n = new CCloud_ClientConflictResolution_Notification;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CCloud_ClientConflictResolution_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CCloud_ClientConflictResolution_Notification)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&appid_, 0, reinterpret_cast<char*>(&chose_local_files_) -
      reinterpret_cast<char*>(&appid_) + sizeof(chose_local_files_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CCloud_ClientConflictResolution_Notification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CCloud_ClientConflictResolution_Notification)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1 [(.proto.steam.description) = "App ID for which the conflict was resolved."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool chose_local_files = 2 [(.proto.steam.description) = "Did the user choose to keep the files local to the machine they are on right now?"];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_chose_local_files();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &chose_local_files_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CCloud_ClientConflictResolution_Notification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CCloud_ClientConflictResolution_Notification)
  return false;
#undef DO_
}

void CCloud_ClientConflictResolution_Notification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CCloud_ClientConflictResolution_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1 [(.proto.steam.description) = "App ID for which the conflict was resolved."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional bool chose_local_files = 2 [(.proto.steam.description) = "Did the user choose to keep the files local to the machine they are on right now?"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->chose_local_files(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CCloud_ClientConflictResolution_Notification)
}

::google::protobuf::uint8* CCloud_ClientConflictResolution_Notification::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CCloud_ClientConflictResolution_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1 [(.proto.steam.description) = "App ID for which the conflict was resolved."];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional bool chose_local_files = 2 [(.proto.steam.description) = "Did the user choose to keep the files local to the machine they are on right now?"];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->chose_local_files(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CCloud_ClientConflictResolution_Notification)
  return target;
}

size_t CCloud_ClientConflictResolution_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CCloud_ClientConflictResolution_Notification)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 appid = 1 [(.proto.steam.description) = "App ID for which the conflict was resolved."];
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional bool chose_local_files = 2 [(.proto.steam.description) = "Did the user choose to keep the files local to the machine they are on right now?"];
    if (has_chose_local_files()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCloud_ClientConflictResolution_Notification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CCloud_ClientConflictResolution_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CCloud_ClientConflictResolution_Notification* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CCloud_ClientConflictResolution_Notification>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CCloud_ClientConflictResolution_Notification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CCloud_ClientConflictResolution_Notification)
    MergeFrom(*source);
  }
}

void CCloud_ClientConflictResolution_Notification::MergeFrom(const CCloud_ClientConflictResolution_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CCloud_ClientConflictResolution_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000002u) {
      chose_local_files_ = from.chose_local_files_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CCloud_ClientConflictResolution_Notification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CCloud_ClientConflictResolution_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCloud_ClientConflictResolution_Notification::CopyFrom(const CCloud_ClientConflictResolution_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CCloud_ClientConflictResolution_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCloud_ClientConflictResolution_Notification::IsInitialized() const {
  return true;
}

void CCloud_ClientConflictResolution_Notification::Swap(CCloud_ClientConflictResolution_Notification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCloud_ClientConflictResolution_Notification::InternalSwap(CCloud_ClientConflictResolution_Notification* other) {
  std::swap(appid_, other->appid_);
  std::swap(chose_local_files_, other->chose_local_files_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CCloud_ClientConflictResolution_Notification::GetMetadata() const {
  protobuf_steammessages_5fcloud_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fcloud_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CCloud_ClientConflictResolution_Notification

// optional uint32 appid = 1 [(.proto.steam.description) = "App ID for which the conflict was resolved."];
bool CCloud_ClientConflictResolution_Notification::has_appid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CCloud_ClientConflictResolution_Notification::set_has_appid() {
  _has_bits_[0] |= 0x00000001u;
}
void CCloud_ClientConflictResolution_Notification::clear_has_appid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CCloud_ClientConflictResolution_Notification::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
::google::protobuf::uint32 CCloud_ClientConflictResolution_Notification::appid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_ClientConflictResolution_Notification.appid)
  return appid_;
}
void CCloud_ClientConflictResolution_Notification::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_ClientConflictResolution_Notification.appid)
}

// optional bool chose_local_files = 2 [(.proto.steam.description) = "Did the user choose to keep the files local to the machine they are on right now?"];
bool CCloud_ClientConflictResolution_Notification::has_chose_local_files() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CCloud_ClientConflictResolution_Notification::set_has_chose_local_files() {
  _has_bits_[0] |= 0x00000002u;
}
void CCloud_ClientConflictResolution_Notification::clear_has_chose_local_files() {
  _has_bits_[0] &= ~0x00000002u;
}
void CCloud_ClientConflictResolution_Notification::clear_chose_local_files() {
  chose_local_files_ = false;
  clear_has_chose_local_files();
}
bool CCloud_ClientConflictResolution_Notification::chose_local_files() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCloud_ClientConflictResolution_Notification.chose_local_files)
  return chose_local_files_;
}
void CCloud_ClientConflictResolution_Notification::set_chose_local_files(bool value) {
  set_has_chose_local_files();
  chose_local_files_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCloud_ClientConflictResolution_Notification.chose_local_files)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

Cloud::~Cloud() {}

const ::google::protobuf::ServiceDescriptor* Cloud::descriptor() {
  protobuf_steammessages_5fcloud_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fcloud_2esteamclient_2eproto::file_level_service_descriptors[0];
}

const ::google::protobuf::ServiceDescriptor* Cloud::GetDescriptor() {
  return descriptor();
}

void Cloud::GetUploadServerInfo(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CCloud_GetUploadServerInfo_Request*,
                         ::proto::steam::CCloud_GetUploadServerInfo_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetUploadServerInfo() not implemented.");
  done->Run();
}

void Cloud::BeginHTTPUpload(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CCloud_BeginHTTPUpload_Request*,
                         ::proto::steam::CCloud_BeginHTTPUpload_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method BeginHTTPUpload() not implemented.");
  done->Run();
}

void Cloud::CommitHTTPUpload(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CCloud_CommitHTTPUpload_Request*,
                         ::proto::steam::CCloud_CommitHTTPUpload_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method CommitHTTPUpload() not implemented.");
  done->Run();
}

void Cloud::GetFileDetails(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CCloud_GetFileDetails_Request*,
                         ::proto::steam::CCloud_GetFileDetails_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetFileDetails() not implemented.");
  done->Run();
}

void Cloud::EnumerateUserFiles(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CCloud_EnumerateUserFiles_Request*,
                         ::proto::steam::CCloud_EnumerateUserFiles_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method EnumerateUserFiles() not implemented.");
  done->Run();
}

void Cloud::Delete(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CCloud_Delete_Request*,
                         ::proto::steam::CCloud_Delete_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Delete() not implemented.");
  done->Run();
}

void Cloud::GetClientEncryptionKey(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CCloud_GetClientEncryptionKey_Request*,
                         ::proto::steam::CCloud_GetClientEncryptionKey_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetClientEncryptionKey() not implemented.");
  done->Run();
}

void Cloud::CDNReport(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CCloud_CDNReport_Notification*,
                         ::proto::steam::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method CDNReport() not implemented.");
  done->Run();
}

void Cloud::ExternalStorageTransferReport(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CCloud_ExternalStorageTransferReport_Notification*,
                         ::proto::steam::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ExternalStorageTransferReport() not implemented.");
  done->Run();
}

void Cloud::ClientBeginFileUpload(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CCloud_ClientBeginFileUpload_Request*,
                         ::proto::steam::CCloud_ClientBeginFileUpload_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ClientBeginFileUpload() not implemented.");
  done->Run();
}

void Cloud::ClientCommitFileUpload(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CCloud_ClientCommitFileUpload_Request*,
                         ::proto::steam::CCloud_ClientCommitFileUpload_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ClientCommitFileUpload() not implemented.");
  done->Run();
}

void Cloud::ClientFileDownload(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CCloud_ClientFileDownload_Request*,
                         ::proto::steam::CCloud_ClientFileDownload_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ClientFileDownload() not implemented.");
  done->Run();
}

void Cloud::ClientDeleteFile(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CCloud_ClientDeleteFile_Request*,
                         ::proto::steam::CCloud_ClientDeleteFile_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ClientDeleteFile() not implemented.");
  done->Run();
}

void Cloud::ClientConflictResolution(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CCloud_ClientConflictResolution_Notification*,
                         ::proto::steam::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ClientConflictResolution() not implemented.");
  done->Run();
}

void Cloud::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), protobuf_steammessages_5fcloud_2esteamclient_2eproto::file_level_service_descriptors[0]);
  switch(method->index()) {
    case 0:
      GetUploadServerInfo(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CCloud_GetUploadServerInfo_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CCloud_GetUploadServerInfo_Response*>(response),
             done);
      break;
    case 1:
      BeginHTTPUpload(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CCloud_BeginHTTPUpload_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CCloud_BeginHTTPUpload_Response*>(response),
             done);
      break;
    case 2:
      CommitHTTPUpload(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CCloud_CommitHTTPUpload_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CCloud_CommitHTTPUpload_Response*>(response),
             done);
      break;
    case 3:
      GetFileDetails(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CCloud_GetFileDetails_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CCloud_GetFileDetails_Response*>(response),
             done);
      break;
    case 4:
      EnumerateUserFiles(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CCloud_EnumerateUserFiles_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CCloud_EnumerateUserFiles_Response*>(response),
             done);
      break;
    case 5:
      Delete(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CCloud_Delete_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CCloud_Delete_Response*>(response),
             done);
      break;
    case 6:
      GetClientEncryptionKey(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CCloud_GetClientEncryptionKey_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CCloud_GetClientEncryptionKey_Response*>(response),
             done);
      break;
    case 7:
      CDNReport(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CCloud_CDNReport_Notification*>(request),
             ::google::protobuf::down_cast< ::proto::steam::NoResponse*>(response),
             done);
      break;
    case 8:
      ExternalStorageTransferReport(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CCloud_ExternalStorageTransferReport_Notification*>(request),
             ::google::protobuf::down_cast< ::proto::steam::NoResponse*>(response),
             done);
      break;
    case 9:
      ClientBeginFileUpload(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CCloud_ClientBeginFileUpload_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CCloud_ClientBeginFileUpload_Response*>(response),
             done);
      break;
    case 10:
      ClientCommitFileUpload(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CCloud_ClientCommitFileUpload_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CCloud_ClientCommitFileUpload_Response*>(response),
             done);
      break;
    case 11:
      ClientFileDownload(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CCloud_ClientFileDownload_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CCloud_ClientFileDownload_Response*>(response),
             done);
      break;
    case 12:
      ClientDeleteFile(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CCloud_ClientDeleteFile_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CCloud_ClientDeleteFile_Response*>(response),
             done);
      break;
    case 13:
      ClientConflictResolution(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CCloud_ClientConflictResolution_Notification*>(request),
             ::google::protobuf::down_cast< ::proto::steam::NoResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& Cloud::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::steam::CCloud_GetUploadServerInfo_Request::default_instance();
    case 1:
      return ::proto::steam::CCloud_BeginHTTPUpload_Request::default_instance();
    case 2:
      return ::proto::steam::CCloud_CommitHTTPUpload_Request::default_instance();
    case 3:
      return ::proto::steam::CCloud_GetFileDetails_Request::default_instance();
    case 4:
      return ::proto::steam::CCloud_EnumerateUserFiles_Request::default_instance();
    case 5:
      return ::proto::steam::CCloud_Delete_Request::default_instance();
    case 6:
      return ::proto::steam::CCloud_GetClientEncryptionKey_Request::default_instance();
    case 7:
      return ::proto::steam::CCloud_CDNReport_Notification::default_instance();
    case 8:
      return ::proto::steam::CCloud_ExternalStorageTransferReport_Notification::default_instance();
    case 9:
      return ::proto::steam::CCloud_ClientBeginFileUpload_Request::default_instance();
    case 10:
      return ::proto::steam::CCloud_ClientCommitFileUpload_Request::default_instance();
    case 11:
      return ::proto::steam::CCloud_ClientFileDownload_Request::default_instance();
    case 12:
      return ::proto::steam::CCloud_ClientDeleteFile_Request::default_instance();
    case 13:
      return ::proto::steam::CCloud_ClientConflictResolution_Notification::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& Cloud::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::steam::CCloud_GetUploadServerInfo_Response::default_instance();
    case 1:
      return ::proto::steam::CCloud_BeginHTTPUpload_Response::default_instance();
    case 2:
      return ::proto::steam::CCloud_CommitHTTPUpload_Response::default_instance();
    case 3:
      return ::proto::steam::CCloud_GetFileDetails_Response::default_instance();
    case 4:
      return ::proto::steam::CCloud_EnumerateUserFiles_Response::default_instance();
    case 5:
      return ::proto::steam::CCloud_Delete_Response::default_instance();
    case 6:
      return ::proto::steam::CCloud_GetClientEncryptionKey_Response::default_instance();
    case 7:
      return ::proto::steam::NoResponse::default_instance();
    case 8:
      return ::proto::steam::NoResponse::default_instance();
    case 9:
      return ::proto::steam::CCloud_ClientBeginFileUpload_Response::default_instance();
    case 10:
      return ::proto::steam::CCloud_ClientCommitFileUpload_Response::default_instance();
    case 11:
      return ::proto::steam::CCloud_ClientFileDownload_Response::default_instance();
    case 12:
      return ::proto::steam::CCloud_ClientDeleteFile_Response::default_instance();
    case 13:
      return ::proto::steam::NoResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

Cloud_Stub::Cloud_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
Cloud_Stub::Cloud_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
Cloud_Stub::~Cloud_Stub() {
  if (owns_channel_) delete channel_;
}

void Cloud_Stub::GetUploadServerInfo(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CCloud_GetUploadServerInfo_Request* request,
                              ::proto::steam::CCloud_GetUploadServerInfo_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void Cloud_Stub::BeginHTTPUpload(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CCloud_BeginHTTPUpload_Request* request,
                              ::proto::steam::CCloud_BeginHTTPUpload_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void Cloud_Stub::CommitHTTPUpload(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CCloud_CommitHTTPUpload_Request* request,
                              ::proto::steam::CCloud_CommitHTTPUpload_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void Cloud_Stub::GetFileDetails(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CCloud_GetFileDetails_Request* request,
                              ::proto::steam::CCloud_GetFileDetails_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void Cloud_Stub::EnumerateUserFiles(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CCloud_EnumerateUserFiles_Request* request,
                              ::proto::steam::CCloud_EnumerateUserFiles_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void Cloud_Stub::Delete(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CCloud_Delete_Request* request,
                              ::proto::steam::CCloud_Delete_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}
void Cloud_Stub::GetClientEncryptionKey(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CCloud_GetClientEncryptionKey_Request* request,
                              ::proto::steam::CCloud_GetClientEncryptionKey_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(6),
                       controller, request, response, done);
}
void Cloud_Stub::CDNReport(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CCloud_CDNReport_Notification* request,
                              ::proto::steam::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(7),
                       controller, request, response, done);
}
void Cloud_Stub::ExternalStorageTransferReport(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CCloud_ExternalStorageTransferReport_Notification* request,
                              ::proto::steam::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(8),
                       controller, request, response, done);
}
void Cloud_Stub::ClientBeginFileUpload(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CCloud_ClientBeginFileUpload_Request* request,
                              ::proto::steam::CCloud_ClientBeginFileUpload_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(9),
                       controller, request, response, done);
}
void Cloud_Stub::ClientCommitFileUpload(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CCloud_ClientCommitFileUpload_Request* request,
                              ::proto::steam::CCloud_ClientCommitFileUpload_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(10),
                       controller, request, response, done);
}
void Cloud_Stub::ClientFileDownload(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CCloud_ClientFileDownload_Request* request,
                              ::proto::steam::CCloud_ClientFileDownload_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(11),
                       controller, request, response, done);
}
void Cloud_Stub::ClientDeleteFile(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CCloud_ClientDeleteFile_Request* request,
                              ::proto::steam::CCloud_ClientDeleteFile_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(12),
                       controller, request, response, done);
}
void Cloud_Stub::ClientConflictResolution(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CCloud_ClientConflictResolution_Notification* request,
                              ::proto::steam::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(13),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace steam
}  // namespace proto

// @@protoc_insertion_point(global_scope)
