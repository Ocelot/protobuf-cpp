// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_hiddevices.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "steammessages_hiddevices.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace steam {
class CHIDDeviceInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CHIDDeviceInfo> {
} _CHIDDeviceInfo_default_instance_;
class CHIDDeviceInputReportDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CHIDDeviceInputReport> {
} _CHIDDeviceInputReport_default_instance_;
class CHIDMessageToRemote_DeviceOpenDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CHIDMessageToRemote_DeviceOpen> {
} _CHIDMessageToRemote_DeviceOpen_default_instance_;
class CHIDMessageToRemote_DeviceCloseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CHIDMessageToRemote_DeviceClose> {
} _CHIDMessageToRemote_DeviceClose_default_instance_;
class CHIDMessageToRemote_DeviceWriteDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CHIDMessageToRemote_DeviceWrite> {
} _CHIDMessageToRemote_DeviceWrite_default_instance_;
class CHIDMessageToRemote_DeviceReadDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CHIDMessageToRemote_DeviceRead> {
} _CHIDMessageToRemote_DeviceRead_default_instance_;
class CHIDMessageToRemote_DeviceSendFeatureReportDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CHIDMessageToRemote_DeviceSendFeatureReport> {
} _CHIDMessageToRemote_DeviceSendFeatureReport_default_instance_;
class CHIDMessageToRemote_DeviceGetFeatureReportDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CHIDMessageToRemote_DeviceGetFeatureReport> {
} _CHIDMessageToRemote_DeviceGetFeatureReport_default_instance_;
class CHIDMessageToRemote_DeviceGetVendorStringDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CHIDMessageToRemote_DeviceGetVendorString> {
} _CHIDMessageToRemote_DeviceGetVendorString_default_instance_;
class CHIDMessageToRemote_DeviceGetProductStringDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CHIDMessageToRemote_DeviceGetProductString> {
} _CHIDMessageToRemote_DeviceGetProductString_default_instance_;
class CHIDMessageToRemote_DeviceGetSerialNumberStringDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CHIDMessageToRemote_DeviceGetSerialNumberString> {
} _CHIDMessageToRemote_DeviceGetSerialNumberString_default_instance_;
class CHIDMessageToRemote_DeviceStartInputReportsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CHIDMessageToRemote_DeviceStartInputReports> {
} _CHIDMessageToRemote_DeviceStartInputReports_default_instance_;
class CHIDMessageToRemote_DeviceRequestFullReportDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CHIDMessageToRemote_DeviceRequestFullReport> {
} _CHIDMessageToRemote_DeviceRequestFullReport_default_instance_;
class CHIDMessageToRemote_DeviceDisconnectDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CHIDMessageToRemote_DeviceDisconnect> {
} _CHIDMessageToRemote_DeviceDisconnect_default_instance_;
class CHIDMessageToRemoteDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CHIDMessageToRemote> {
  public:
  const ::proto::steam::CHIDMessageToRemote_DeviceOpen* device_open_;
  const ::proto::steam::CHIDMessageToRemote_DeviceClose* device_close_;
  const ::proto::steam::CHIDMessageToRemote_DeviceWrite* device_write_;
  const ::proto::steam::CHIDMessageToRemote_DeviceRead* device_read_;
  const ::proto::steam::CHIDMessageToRemote_DeviceSendFeatureReport* device_send_feature_report_;
  const ::proto::steam::CHIDMessageToRemote_DeviceGetFeatureReport* device_get_feature_report_;
  const ::proto::steam::CHIDMessageToRemote_DeviceGetVendorString* device_get_vendor_string_;
  const ::proto::steam::CHIDMessageToRemote_DeviceGetProductString* device_get_product_string_;
  const ::proto::steam::CHIDMessageToRemote_DeviceGetSerialNumberString* device_get_serial_number_string_;
  const ::proto::steam::CHIDMessageToRemote_DeviceStartInputReports* device_start_input_reports_;
  const ::proto::steam::CHIDMessageToRemote_DeviceRequestFullReport* device_request_full_report_;
  const ::proto::steam::CHIDMessageToRemote_DeviceDisconnect* device_disconnect_;
} _CHIDMessageToRemote_default_instance_;
class CHIDMessageFromRemote_UpdateDeviceListDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CHIDMessageFromRemote_UpdateDeviceList> {
} _CHIDMessageFromRemote_UpdateDeviceList_default_instance_;
class CHIDMessageFromRemote_RequestResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CHIDMessageFromRemote_RequestResponse> {
} _CHIDMessageFromRemote_RequestResponse_default_instance_;
class CHIDMessageFromRemote_DeviceInputReports_DeviceInputReportDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport> {
} _CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport_default_instance_;
class CHIDMessageFromRemote_DeviceInputReportsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CHIDMessageFromRemote_DeviceInputReports> {
} _CHIDMessageFromRemote_DeviceInputReports_default_instance_;
class CHIDMessageFromRemote_CloseDeviceDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CHIDMessageFromRemote_CloseDevice> {
} _CHIDMessageFromRemote_CloseDevice_default_instance_;
class CHIDMessageFromRemote_CloseAllDevicesDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CHIDMessageFromRemote_CloseAllDevices> {
} _CHIDMessageFromRemote_CloseAllDevices_default_instance_;
class CHIDMessageFromRemoteDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CHIDMessageFromRemote> {
  public:
  const ::proto::steam::CHIDMessageFromRemote_UpdateDeviceList* update_device_list_;
  const ::proto::steam::CHIDMessageFromRemote_RequestResponse* response_;
  const ::proto::steam::CHIDMessageFromRemote_DeviceInputReports* reports_;
  const ::proto::steam::CHIDMessageFromRemote_CloseDevice* close_device_;
  const ::proto::steam::CHIDMessageFromRemote_CloseAllDevices* close_all_devices_;
} _CHIDMessageFromRemote_default_instance_;

namespace protobuf_steammessages_5fhiddevices_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[22];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHIDDeviceInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHIDDeviceInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHIDDeviceInfo, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHIDDeviceInfo, path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHIDDeviceInfo, vendor_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHIDDeviceInfo, product_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHIDDeviceInfo, serial_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHIDDeviceInfo, release_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHIDDeviceInfo, manufacturer_string_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHIDDeviceInfo, product_string_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHIDDeviceInfo, usage_page_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHIDDeviceInfo, usage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHIDDeviceInfo, interface_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHIDDeviceInfo, ostype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHIDDeviceInfo, is_generic_gamepad_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHIDDeviceInfo, is_generic_joystick_),
  4,
  0,
  5,
  6,
  1,
  7,
  2,
  3,
  8,
  9,
  12,
  13,
  10,
  11,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHIDDeviceInputReport, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHIDDeviceInputReport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHIDDeviceInputReport, full_report_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHIDDeviceInputReport, delta_report_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHIDDeviceInputReport, delta_report_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHIDDeviceInputReport, delta_report_crc_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHIDMessageToRemote_DeviceOpen, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHIDMessageToRemote_DeviceOpen, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHIDMessageToRemote_DeviceOpen, info_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHIDMessageToRemote_DeviceClose, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHIDMessageToRemote_DeviceClose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHIDMessageToRemote_DeviceClose, device_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHIDMessageToRemote_DeviceWrite, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHIDMessageToRemote_DeviceWrite, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHIDMessageToRemote_DeviceWrite, device_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHIDMessageToRemote_DeviceWrite, data_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHIDMessageToRemote_DeviceRead, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHIDMessageToRemote_DeviceRead, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHIDMessageToRemote_DeviceRead, device_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHIDMessageToRemote_DeviceRead, length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHIDMessageToRemote_DeviceRead, timeout_ms_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHIDMessageToRemote_DeviceSendFeatureReport, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHIDMessageToRemote_DeviceSendFeatureReport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHIDMessageToRemote_DeviceSendFeatureReport, device_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHIDMessageToRemote_DeviceSendFeatureReport, data_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHIDMessageToRemote_DeviceGetFeatureReport, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHIDMessageToRemote_DeviceGetFeatureReport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHIDMessageToRemote_DeviceGetFeatureReport, device_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHIDMessageToRemote_DeviceGetFeatureReport, report_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHIDMessageToRemote_DeviceGetFeatureReport, length_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHIDMessageToRemote_DeviceGetVendorString, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHIDMessageToRemote_DeviceGetVendorString, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHIDMessageToRemote_DeviceGetVendorString, device_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHIDMessageToRemote_DeviceGetProductString, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHIDMessageToRemote_DeviceGetProductString, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHIDMessageToRemote_DeviceGetProductString, device_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHIDMessageToRemote_DeviceGetSerialNumberString, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHIDMessageToRemote_DeviceGetSerialNumberString, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHIDMessageToRemote_DeviceGetSerialNumberString, device_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHIDMessageToRemote_DeviceStartInputReports, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHIDMessageToRemote_DeviceStartInputReports, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHIDMessageToRemote_DeviceStartInputReports, device_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHIDMessageToRemote_DeviceStartInputReports, length_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHIDMessageToRemote_DeviceRequestFullReport, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHIDMessageToRemote_DeviceRequestFullReport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHIDMessageToRemote_DeviceRequestFullReport, device_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHIDMessageToRemote_DeviceDisconnect, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHIDMessageToRemote_DeviceDisconnect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHIDMessageToRemote_DeviceDisconnect, device_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHIDMessageToRemote_DeviceDisconnect, disconnectmethod_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHIDMessageToRemote_DeviceDisconnect, data_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHIDMessageToRemote, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHIDMessageToRemote, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHIDMessageToRemote, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHIDMessageToRemote, request_id_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_CHIDMessageToRemote_default_instance_), device_open_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_CHIDMessageToRemote_default_instance_), device_close_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_CHIDMessageToRemote_default_instance_), device_write_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_CHIDMessageToRemote_default_instance_), device_read_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_CHIDMessageToRemote_default_instance_), device_send_feature_report_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_CHIDMessageToRemote_default_instance_), device_get_feature_report_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_CHIDMessageToRemote_default_instance_), device_get_vendor_string_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_CHIDMessageToRemote_default_instance_), device_get_product_string_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_CHIDMessageToRemote_default_instance_), device_get_serial_number_string_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_CHIDMessageToRemote_default_instance_), device_start_input_reports_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_CHIDMessageToRemote_default_instance_), device_request_full_report_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_CHIDMessageToRemote_default_instance_), device_disconnect_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHIDMessageToRemote, command_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHIDMessageFromRemote_UpdateDeviceList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHIDMessageFromRemote_UpdateDeviceList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHIDMessageFromRemote_UpdateDeviceList, devices_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHIDMessageFromRemote_RequestResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHIDMessageFromRemote_RequestResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHIDMessageFromRemote_RequestResponse, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHIDMessageFromRemote_RequestResponse, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHIDMessageFromRemote_RequestResponse, data_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport, device_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport, reports_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHIDMessageFromRemote_DeviceInputReports, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHIDMessageFromRemote_DeviceInputReports, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHIDMessageFromRemote_DeviceInputReports, device_reports_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHIDMessageFromRemote_CloseDevice, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHIDMessageFromRemote_CloseDevice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHIDMessageFromRemote_CloseDevice, device_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHIDMessageFromRemote_CloseAllDevices, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHIDMessageFromRemote_CloseAllDevices, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHIDMessageFromRemote, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHIDMessageFromRemote, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHIDMessageFromRemote, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_CHIDMessageFromRemote_default_instance_), update_device_list_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_CHIDMessageFromRemote_default_instance_), response_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_CHIDMessageFromRemote_default_instance_), reports_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_CHIDMessageFromRemote_default_instance_), close_device_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_CHIDMessageFromRemote_default_instance_), close_all_devices_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CHIDMessageFromRemote, command_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 19, sizeof(CHIDDeviceInfo)},
  { 33, 42, sizeof(CHIDDeviceInputReport)},
  { 46, 52, sizeof(CHIDMessageToRemote_DeviceOpen)},
  { 53, 59, sizeof(CHIDMessageToRemote_DeviceClose)},
  { 60, 67, sizeof(CHIDMessageToRemote_DeviceWrite)},
  { 69, 77, sizeof(CHIDMessageToRemote_DeviceRead)},
  { 80, 87, sizeof(CHIDMessageToRemote_DeviceSendFeatureReport)},
  { 89, 97, sizeof(CHIDMessageToRemote_DeviceGetFeatureReport)},
  { 100, 106, sizeof(CHIDMessageToRemote_DeviceGetVendorString)},
  { 107, 113, sizeof(CHIDMessageToRemote_DeviceGetProductString)},
  { 114, 120, sizeof(CHIDMessageToRemote_DeviceGetSerialNumberString)},
  { 121, 128, sizeof(CHIDMessageToRemote_DeviceStartInputReports)},
  { 130, 136, sizeof(CHIDMessageToRemote_DeviceRequestFullReport)},
  { 137, 145, sizeof(CHIDMessageToRemote_DeviceDisconnect)},
  { 148, 167, sizeof(CHIDMessageToRemote)},
  { 180, 186, sizeof(CHIDMessageFromRemote_UpdateDeviceList)},
  { 187, 195, sizeof(CHIDMessageFromRemote_RequestResponse)},
  { 198, 205, sizeof(CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport)},
  { 207, 213, sizeof(CHIDMessageFromRemote_DeviceInputReports)},
  { 214, 220, sizeof(CHIDMessageFromRemote_CloseDevice)},
  { 221, 226, sizeof(CHIDMessageFromRemote_CloseAllDevices)},
  { 226, 237, sizeof(CHIDMessageFromRemote)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CHIDDeviceInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CHIDDeviceInputReport_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CHIDMessageToRemote_DeviceOpen_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CHIDMessageToRemote_DeviceClose_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CHIDMessageToRemote_DeviceWrite_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CHIDMessageToRemote_DeviceRead_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CHIDMessageToRemote_DeviceSendFeatureReport_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CHIDMessageToRemote_DeviceGetFeatureReport_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CHIDMessageToRemote_DeviceGetVendorString_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CHIDMessageToRemote_DeviceGetProductString_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CHIDMessageToRemote_DeviceGetSerialNumberString_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CHIDMessageToRemote_DeviceStartInputReports_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CHIDMessageToRemote_DeviceRequestFullReport_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CHIDMessageToRemote_DeviceDisconnect_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CHIDMessageToRemote_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CHIDMessageFromRemote_UpdateDeviceList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CHIDMessageFromRemote_RequestResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CHIDMessageFromRemote_DeviceInputReports_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CHIDMessageFromRemote_CloseDevice_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CHIDMessageFromRemote_CloseAllDevices_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CHIDMessageFromRemote_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "steammessages_hiddevices.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 22);
}

}  // namespace

void TableStruct::Shutdown() {
  _CHIDDeviceInfo_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _CHIDDeviceInputReport_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _CHIDMessageToRemote_DeviceOpen_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _CHIDMessageToRemote_DeviceClose_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _CHIDMessageToRemote_DeviceWrite_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _CHIDMessageToRemote_DeviceRead_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _CHIDMessageToRemote_DeviceSendFeatureReport_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _CHIDMessageToRemote_DeviceGetFeatureReport_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _CHIDMessageToRemote_DeviceGetVendorString_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _CHIDMessageToRemote_DeviceGetProductString_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _CHIDMessageToRemote_DeviceGetSerialNumberString_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _CHIDMessageToRemote_DeviceStartInputReports_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _CHIDMessageToRemote_DeviceRequestFullReport_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _CHIDMessageToRemote_DeviceDisconnect_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _CHIDMessageToRemote_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _CHIDMessageFromRemote_UpdateDeviceList_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _CHIDMessageFromRemote_RequestResponse_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _CHIDMessageFromRemote_DeviceInputReports_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _CHIDMessageFromRemote_CloseDevice_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _CHIDMessageFromRemote_CloseAllDevices_default_instance_.Shutdown();
  delete file_level_metadata[20].reflection;
  _CHIDMessageFromRemote_default_instance_.Shutdown();
  delete file_level_metadata[21].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _CHIDDeviceInfo_default_instance_.DefaultConstruct();
  _CHIDDeviceInputReport_default_instance_.DefaultConstruct();
  _CHIDMessageToRemote_DeviceOpen_default_instance_.DefaultConstruct();
  _CHIDMessageToRemote_DeviceClose_default_instance_.DefaultConstruct();
  _CHIDMessageToRemote_DeviceWrite_default_instance_.DefaultConstruct();
  _CHIDMessageToRemote_DeviceRead_default_instance_.DefaultConstruct();
  _CHIDMessageToRemote_DeviceSendFeatureReport_default_instance_.DefaultConstruct();
  _CHIDMessageToRemote_DeviceGetFeatureReport_default_instance_.DefaultConstruct();
  _CHIDMessageToRemote_DeviceGetVendorString_default_instance_.DefaultConstruct();
  _CHIDMessageToRemote_DeviceGetProductString_default_instance_.DefaultConstruct();
  _CHIDMessageToRemote_DeviceGetSerialNumberString_default_instance_.DefaultConstruct();
  _CHIDMessageToRemote_DeviceStartInputReports_default_instance_.DefaultConstruct();
  _CHIDMessageToRemote_DeviceRequestFullReport_default_instance_.DefaultConstruct();
  _CHIDMessageToRemote_DeviceDisconnect_default_instance_.DefaultConstruct();
  _CHIDMessageToRemote_default_instance_.DefaultConstruct();
  _CHIDMessageFromRemote_UpdateDeviceList_default_instance_.DefaultConstruct();
  _CHIDMessageFromRemote_RequestResponse_default_instance_.DefaultConstruct();
  _CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport_default_instance_.DefaultConstruct();
  _CHIDMessageFromRemote_DeviceInputReports_default_instance_.DefaultConstruct();
  _CHIDMessageFromRemote_CloseDevice_default_instance_.DefaultConstruct();
  _CHIDMessageFromRemote_CloseAllDevices_default_instance_.DefaultConstruct();
  _CHIDMessageFromRemote_default_instance_.DefaultConstruct();
  _CHIDMessageToRemote_DeviceOpen_default_instance_.get_mutable()->info_ = const_cast< ::proto::steam::CHIDDeviceInfo*>(
      ::proto::steam::CHIDDeviceInfo::internal_default_instance());
  _CHIDMessageToRemote_default_instance_.device_open_ = const_cast< ::proto::steam::CHIDMessageToRemote_DeviceOpen*>(
      ::proto::steam::CHIDMessageToRemote_DeviceOpen::internal_default_instance());
  _CHIDMessageToRemote_default_instance_.device_close_ = const_cast< ::proto::steam::CHIDMessageToRemote_DeviceClose*>(
      ::proto::steam::CHIDMessageToRemote_DeviceClose::internal_default_instance());
  _CHIDMessageToRemote_default_instance_.device_write_ = const_cast< ::proto::steam::CHIDMessageToRemote_DeviceWrite*>(
      ::proto::steam::CHIDMessageToRemote_DeviceWrite::internal_default_instance());
  _CHIDMessageToRemote_default_instance_.device_read_ = const_cast< ::proto::steam::CHIDMessageToRemote_DeviceRead*>(
      ::proto::steam::CHIDMessageToRemote_DeviceRead::internal_default_instance());
  _CHIDMessageToRemote_default_instance_.device_send_feature_report_ = const_cast< ::proto::steam::CHIDMessageToRemote_DeviceSendFeatureReport*>(
      ::proto::steam::CHIDMessageToRemote_DeviceSendFeatureReport::internal_default_instance());
  _CHIDMessageToRemote_default_instance_.device_get_feature_report_ = const_cast< ::proto::steam::CHIDMessageToRemote_DeviceGetFeatureReport*>(
      ::proto::steam::CHIDMessageToRemote_DeviceGetFeatureReport::internal_default_instance());
  _CHIDMessageToRemote_default_instance_.device_get_vendor_string_ = const_cast< ::proto::steam::CHIDMessageToRemote_DeviceGetVendorString*>(
      ::proto::steam::CHIDMessageToRemote_DeviceGetVendorString::internal_default_instance());
  _CHIDMessageToRemote_default_instance_.device_get_product_string_ = const_cast< ::proto::steam::CHIDMessageToRemote_DeviceGetProductString*>(
      ::proto::steam::CHIDMessageToRemote_DeviceGetProductString::internal_default_instance());
  _CHIDMessageToRemote_default_instance_.device_get_serial_number_string_ = const_cast< ::proto::steam::CHIDMessageToRemote_DeviceGetSerialNumberString*>(
      ::proto::steam::CHIDMessageToRemote_DeviceGetSerialNumberString::internal_default_instance());
  _CHIDMessageToRemote_default_instance_.device_start_input_reports_ = const_cast< ::proto::steam::CHIDMessageToRemote_DeviceStartInputReports*>(
      ::proto::steam::CHIDMessageToRemote_DeviceStartInputReports::internal_default_instance());
  _CHIDMessageToRemote_default_instance_.device_request_full_report_ = const_cast< ::proto::steam::CHIDMessageToRemote_DeviceRequestFullReport*>(
      ::proto::steam::CHIDMessageToRemote_DeviceRequestFullReport::internal_default_instance());
  _CHIDMessageToRemote_default_instance_.device_disconnect_ = const_cast< ::proto::steam::CHIDMessageToRemote_DeviceDisconnect*>(
      ::proto::steam::CHIDMessageToRemote_DeviceDisconnect::internal_default_instance());
  _CHIDMessageFromRemote_default_instance_.update_device_list_ = const_cast< ::proto::steam::CHIDMessageFromRemote_UpdateDeviceList*>(
      ::proto::steam::CHIDMessageFromRemote_UpdateDeviceList::internal_default_instance());
  _CHIDMessageFromRemote_default_instance_.response_ = const_cast< ::proto::steam::CHIDMessageFromRemote_RequestResponse*>(
      ::proto::steam::CHIDMessageFromRemote_RequestResponse::internal_default_instance());
  _CHIDMessageFromRemote_default_instance_.reports_ = const_cast< ::proto::steam::CHIDMessageFromRemote_DeviceInputReports*>(
      ::proto::steam::CHIDMessageFromRemote_DeviceInputReports::internal_default_instance());
  _CHIDMessageFromRemote_default_instance_.close_device_ = const_cast< ::proto::steam::CHIDMessageFromRemote_CloseDevice*>(
      ::proto::steam::CHIDMessageFromRemote_CloseDevice::internal_default_instance());
  _CHIDMessageFromRemote_default_instance_.close_all_devices_ = const_cast< ::proto::steam::CHIDMessageFromRemote_CloseAllDevices*>(
      ::proto::steam::CHIDMessageFromRemote_CloseAllDevices::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\036steammessages_hiddevices.proto\022\013proto."
      "steam\"\202\003\n\016CHIDDeviceInfo\022I\n\010location\030\001 \001"
      "(\0162\037.proto.steam.EHIDDeviceLocation:\026k_E"
      "DeviceLocationLocal\022\014\n\004path\030\002 \001(\t\022\021\n\tven"
      "dor_id\030\003 \001(\r\022\022\n\nproduct_id\030\004 \001(\r\022\025\n\rseri"
      "al_number\030\005 \001(\t\022\026\n\016release_number\030\006 \001(\r\022"
      "\033\n\023manufacturer_string\030\007 \001(\t\022\026\n\016product_"
      "string\030\010 \001(\t\022\022\n\nusage_page\030\t \001(\r\022\r\n\005usag"
      "e\030\n \001(\r\022\034\n\020interface_number\030\013 \001(\005:\002-1\022\022\n"
      "\006ostype\030\014 \001(\005:\002-1\022\032\n\022is_generic_gamepad\030"
      "\r \001(\010\022\033\n\023is_generic_joystick\030\016 \001(\010\"w\n\025CH"
      "IDDeviceInputReport\022\023\n\013full_report\030\001 \001(\014"
      "\022\024\n\014delta_report\030\002 \001(\014\022\031\n\021delta_report_s"
      "ize\030\003 \001(\r\022\030\n\020delta_report_crc\030\004 \001(\r\"\212\016\n\023"
      "CHIDMessageToRemote\022\022\n\nrequest_id\030\001 \001(\r\022"
      "B\n\013device_open\030\002 \001(\0132+.proto.steam.CHIDM"
      "essageToRemote.DeviceOpenH\000\022D\n\014device_cl"
      "ose\030\003 \001(\0132,.proto.steam.CHIDMessageToRem"
      "ote.DeviceCloseH\000\022D\n\014device_write\030\004 \001(\0132"
      ",.proto.steam.CHIDMessageToRemote.Device"
      "WriteH\000\022B\n\013device_read\030\005 \001(\0132+.proto.ste"
      "am.CHIDMessageToRemote.DeviceReadH\000\022^\n\032d"
      "evice_send_feature_report\030\006 \001(\01328.proto."
      "steam.CHIDMessageToRemote.DeviceSendFeat"
      "ureReportH\000\022\\\n\031device_get_feature_report"
      "\030\007 \001(\01327.proto.steam.CHIDMessageToRemote"
      ".DeviceGetFeatureReportH\000\022Z\n\030device_get_"
      "vendor_string\030\010 \001(\01326.proto.steam.CHIDMe"
      "ssageToRemote.DeviceGetVendorStringH\000\022\\\n"
      "\031device_get_product_string\030\t \001(\01327.proto"
      ".steam.CHIDMessageToRemote.DeviceGetProd"
      "uctStringH\000\022g\n\037device_get_serial_number_"
      "string\030\n \001(\0132<.proto.steam.CHIDMessageTo"
      "Remote.DeviceGetSerialNumberStringH\000\022^\n\032"
      "device_start_input_reports\030\013 \001(\01328.proto"
      ".steam.CHIDMessageToRemote.DeviceStartIn"
      "putReportsH\000\022^\n\032device_request_full_repo"
      "rt\030\014 \001(\01328.proto.steam.CHIDMessageToRemo"
      "te.DeviceRequestFullReportH\000\022N\n\021device_d"
      "isconnect\030\r \001(\01321.proto.steam.CHIDMessag"
      "eToRemote.DeviceDisconnectH\000\0327\n\nDeviceOp"
      "en\022)\n\004info\030\001 \001(\0132\033.proto.steam.CHIDDevic"
      "eInfo\032\035\n\013DeviceClose\022\016\n\006device\030\001 \001(\r\032+\n\013"
      "DeviceWrite\022\016\n\006device\030\001 \001(\r\022\014\n\004data\030\002 \001("
      "\014\032@\n\nDeviceRead\022\016\n\006device\030\001 \001(\r\022\016\n\006lengt"
      "h\030\002 \001(\r\022\022\n\ntimeout_ms\030\003 \001(\005\0327\n\027DeviceSen"
      "dFeatureReport\022\016\n\006device\030\001 \001(\r\022\014\n\004data\030\002"
      " \001(\014\032O\n\026DeviceGetFeatureReport\022\016\n\006device"
      "\030\001 \001(\r\022\025\n\rreport_number\030\002 \001(\014\022\016\n\006length\030"
      "\003 \001(\r\032\'\n\025DeviceGetVendorString\022\016\n\006device"
      "\030\001 \001(\r\032(\n\026DeviceGetProductString\022\016\n\006devi"
      "ce\030\001 \001(\r\032-\n\033DeviceGetSerialNumberString\022"
      "\016\n\006device\030\001 \001(\r\0329\n\027DeviceStartInputRepor"
      "ts\022\016\n\006device\030\001 \001(\r\022\016\n\006length\030\002 \001(\r\032)\n\027De"
      "viceRequestFullReport\022\016\n\006device\030\001 \001(\r\032\225\001"
      "\n\020DeviceDisconnect\022\016\n\006device\030\001 \001(\r\022c\n\020di"
      "sconnectMethod\030\002 \001(\0162\'.proto.steam.EHIDD"
      "eviceDisconnectMethod: k_EDeviceDisconne"
      "ctMethodUnknown\022\014\n\004data\030\003 \001(\014B\t\n\007command"
      "\"\253\006\n\025CHIDMessageFromRemote\022Q\n\022update_dev"
      "ice_list\030\001 \001(\01323.proto.steam.CHIDMessage"
      "FromRemote.UpdateDeviceListH\000\022F\n\010respons"
      "e\030\002 \001(\01322.proto.steam.CHIDMessageFromRem"
      "ote.RequestResponseH\000\022H\n\007reports\030\003 \001(\01325"
      ".proto.steam.CHIDMessageFromRemote.Devic"
      "eInputReportsH\000\022F\n\014close_device\030\004 \001(\0132.."
      "proto.steam.CHIDMessageFromRemote.CloseD"
      "eviceH\000\022O\n\021close_all_devices\030\005 \001(\01322.pro"
      "to.steam.CHIDMessageFromRemote.CloseAllD"
      "evicesH\000\032@\n\020UpdateDeviceList\022,\n\007devices\030"
      "\001 \003(\0132\033.proto.steam.CHIDDeviceInfo\032C\n\017Re"
      "questResponse\022\022\n\nrequest_id\030\001 \001(\r\022\016\n\006res"
      "ult\030\002 \001(\005\022\014\n\004data\030\003 \001(\014\032\317\001\n\022DeviceInputR"
      "eports\022_\n\016device_reports\030\001 \003(\0132G.proto.s"
      "team.CHIDMessageFromRemote.DeviceInputRe"
      "ports.DeviceInputReport\032X\n\021DeviceInputRe"
      "port\022\016\n\006device\030\001 \001(\r\0223\n\007reports\030\002 \003(\0132\"."
      "proto.steam.CHIDDeviceInputReport\032\035\n\013Clo"
      "seDevice\022\016\n\006device\030\001 \001(\r\032\021\n\017CloseAllDevi"
      "cesB\t\n\007command*g\n\022EHIDDeviceLocation\022\032\n\026"
      "k_EDeviceLocationLocal\020\000\022\033\n\027k_EDeviceLoc"
      "ationRemote\020\002\022\030\n\024k_EDeviceLocationAny\020\003*"
      "\226\001\n\032EHIDDeviceDisconnectMethod\022$\n k_EDev"
      "iceDisconnectMethodUnknown\020\000\022&\n\"k_EDevic"
      "eDisconnectMethodBluetooth\020\001\022*\n&k_EDevic"
      "eDisconnectMethodFeatureReport\020\002B\005H\001\200\001\000"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3439);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "steammessages_hiddevices.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_steammessages_5fhiddevices_2eproto

const ::google::protobuf::EnumDescriptor* EHIDDeviceLocation_descriptor() {
  protobuf_steammessages_5fhiddevices_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fhiddevices_2eproto::file_level_enum_descriptors[0];
}
bool EHIDDeviceLocation_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EHIDDeviceDisconnectMethod_descriptor() {
  protobuf_steammessages_5fhiddevices_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fhiddevices_2eproto::file_level_enum_descriptors[1];
}
bool EHIDDeviceDisconnectMethod_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CHIDDeviceInfo::kLocationFieldNumber;
const int CHIDDeviceInfo::kPathFieldNumber;
const int CHIDDeviceInfo::kVendorIdFieldNumber;
const int CHIDDeviceInfo::kProductIdFieldNumber;
const int CHIDDeviceInfo::kSerialNumberFieldNumber;
const int CHIDDeviceInfo::kReleaseNumberFieldNumber;
const int CHIDDeviceInfo::kManufacturerStringFieldNumber;
const int CHIDDeviceInfo::kProductStringFieldNumber;
const int CHIDDeviceInfo::kUsagePageFieldNumber;
const int CHIDDeviceInfo::kUsageFieldNumber;
const int CHIDDeviceInfo::kInterfaceNumberFieldNumber;
const int CHIDDeviceInfo::kOstypeFieldNumber;
const int CHIDDeviceInfo::kIsGenericGamepadFieldNumber;
const int CHIDDeviceInfo::kIsGenericJoystickFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CHIDDeviceInfo::CHIDDeviceInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fhiddevices_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CHIDDeviceInfo)
}
CHIDDeviceInfo::CHIDDeviceInfo(const CHIDDeviceInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_path()) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_serial_number()) {
    serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
  }
  manufacturer_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_manufacturer_string()) {
    manufacturer_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.manufacturer_string_);
  }
  product_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_product_string()) {
    product_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.product_string_);
  }
  ::memcpy(&location_, &from.location_,
    reinterpret_cast<char*>(&ostype_) -
    reinterpret_cast<char*>(&location_) + sizeof(ostype_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CHIDDeviceInfo)
}

void CHIDDeviceInfo::SharedCtor() {
  _cached_size_ = 0;
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  manufacturer_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  product_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&location_, 0, reinterpret_cast<char*>(&is_generic_joystick_) -
    reinterpret_cast<char*>(&location_) + sizeof(is_generic_joystick_));
  interface_number_ = -1;
  ostype_ = -1;
}

CHIDDeviceInfo::~CHIDDeviceInfo() {
  // @@protoc_insertion_point(destructor:proto.steam.CHIDDeviceInfo)
  SharedDtor();
}

void CHIDDeviceInfo::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  manufacturer_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  product_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CHIDDeviceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CHIDDeviceInfo::descriptor() {
  protobuf_steammessages_5fhiddevices_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fhiddevices_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CHIDDeviceInfo& CHIDDeviceInfo::default_instance() {
  protobuf_steammessages_5fhiddevices_2eproto::InitDefaults();
  return *internal_default_instance();
}

CHIDDeviceInfo* CHIDDeviceInfo::New(::google::protobuf::Arena* arena) const {
  CHIDDeviceInfo* n = new CHIDDeviceInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CHIDDeviceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CHIDDeviceInfo)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_path()) {
      GOOGLE_DCHECK(!path_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*path_.UnsafeRawStringPointer())->clear();
    }
    if (has_serial_number()) {
      GOOGLE_DCHECK(!serial_number_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*serial_number_.UnsafeRawStringPointer())->clear();
    }
    if (has_manufacturer_string()) {
      GOOGLE_DCHECK(!manufacturer_string_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*manufacturer_string_.UnsafeRawStringPointer())->clear();
    }
    if (has_product_string()) {
      GOOGLE_DCHECK(!product_string_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*product_string_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 240u) {
    ::memset(&location_, 0, reinterpret_cast<char*>(&release_number_) -
      reinterpret_cast<char*>(&location_) + sizeof(release_number_));
  }
  if (_has_bits_[8 / 32] & 16128u) {
    ::memset(&usage_page_, 0, reinterpret_cast<char*>(&is_generic_joystick_) -
      reinterpret_cast<char*>(&usage_page_) + sizeof(is_generic_joystick_));
    interface_number_ = -1;
    ostype_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CHIDDeviceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CHIDDeviceInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.steam.EHIDDeviceLocation location = 1 [default = k_EDeviceLocationLocal];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::steam::EHIDDeviceLocation_IsValid(value)) {
            set_location(static_cast< ::proto::steam::EHIDDeviceLocation >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string path = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CHIDDeviceInfo.path");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 vendor_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_vendor_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vendor_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 product_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_product_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &product_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string serial_number = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serial_number()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serial_number().data(), this->serial_number().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CHIDDeviceInfo.serial_number");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 release_number = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_release_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &release_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string manufacturer_string = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_manufacturer_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->manufacturer_string().data(), this->manufacturer_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CHIDDeviceInfo.manufacturer_string");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string product_string = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_product_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->product_string().data(), this->product_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CHIDDeviceInfo.product_string");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 usage_page = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_usage_page();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usage_page_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 usage = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_usage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 interface_number = 11 [default = -1];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_interface_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &interface_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ostype = 12 [default = -1];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_ostype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ostype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_generic_gamepad = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_is_generic_gamepad();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_generic_gamepad_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_generic_joystick = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_is_generic_joystick();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_generic_joystick_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CHIDDeviceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CHIDDeviceInfo)
  return false;
#undef DO_
}

void CHIDDeviceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CHIDDeviceInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.steam.EHIDDeviceLocation location = 1 [default = k_EDeviceLocationLocal];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->location(), output);
  }

  // optional string path = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CHIDDeviceInfo.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->path(), output);
  }

  // optional uint32 vendor_id = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->vendor_id(), output);
  }

  // optional uint32 product_id = 4;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->product_id(), output);
  }

  // optional string serial_number = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serial_number().data(), this->serial_number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CHIDDeviceInfo.serial_number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->serial_number(), output);
  }

  // optional uint32 release_number = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->release_number(), output);
  }

  // optional string manufacturer_string = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->manufacturer_string().data(), this->manufacturer_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CHIDDeviceInfo.manufacturer_string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->manufacturer_string(), output);
  }

  // optional string product_string = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->product_string().data(), this->product_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CHIDDeviceInfo.product_string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->product_string(), output);
  }

  // optional uint32 usage_page = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->usage_page(), output);
  }

  // optional uint32 usage = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->usage(), output);
  }

  // optional int32 interface_number = 11 [default = -1];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->interface_number(), output);
  }

  // optional int32 ostype = 12 [default = -1];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->ostype(), output);
  }

  // optional bool is_generic_gamepad = 13;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->is_generic_gamepad(), output);
  }

  // optional bool is_generic_joystick = 14;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->is_generic_joystick(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CHIDDeviceInfo)
}

::google::protobuf::uint8* CHIDDeviceInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CHIDDeviceInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.steam.EHIDDeviceLocation location = 1 [default = k_EDeviceLocationLocal];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->location(), target);
  }

  // optional string path = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CHIDDeviceInfo.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path(), target);
  }

  // optional uint32 vendor_id = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->vendor_id(), target);
  }

  // optional uint32 product_id = 4;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->product_id(), target);
  }

  // optional string serial_number = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serial_number().data(), this->serial_number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CHIDDeviceInfo.serial_number");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->serial_number(), target);
  }

  // optional uint32 release_number = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->release_number(), target);
  }

  // optional string manufacturer_string = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->manufacturer_string().data(), this->manufacturer_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CHIDDeviceInfo.manufacturer_string");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->manufacturer_string(), target);
  }

  // optional string product_string = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->product_string().data(), this->product_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CHIDDeviceInfo.product_string");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->product_string(), target);
  }

  // optional uint32 usage_page = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->usage_page(), target);
  }

  // optional uint32 usage = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->usage(), target);
  }

  // optional int32 interface_number = 11 [default = -1];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->interface_number(), target);
  }

  // optional int32 ostype = 12 [default = -1];
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->ostype(), target);
  }

  // optional bool is_generic_gamepad = 13;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->is_generic_gamepad(), target);
  }

  // optional bool is_generic_joystick = 14;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->is_generic_joystick(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CHIDDeviceInfo)
  return target;
}

size_t CHIDDeviceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CHIDDeviceInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string path = 2;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

    // optional string serial_number = 5;
    if (has_serial_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serial_number());
    }

    // optional string manufacturer_string = 7;
    if (has_manufacturer_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->manufacturer_string());
    }

    // optional string product_string = 8;
    if (has_product_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->product_string());
    }

    // optional .proto.steam.EHIDDeviceLocation location = 1 [default = k_EDeviceLocationLocal];
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->location());
    }

    // optional uint32 vendor_id = 3;
    if (has_vendor_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vendor_id());
    }

    // optional uint32 product_id = 4;
    if (has_product_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->product_id());
    }

    // optional uint32 release_number = 6;
    if (has_release_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->release_number());
    }

  }
  if (_has_bits_[8 / 32] & 16128u) {
    // optional uint32 usage_page = 9;
    if (has_usage_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usage_page());
    }

    // optional uint32 usage = 10;
    if (has_usage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usage());
    }

    // optional bool is_generic_gamepad = 13;
    if (has_is_generic_gamepad()) {
      total_size += 1 + 1;
    }

    // optional bool is_generic_joystick = 14;
    if (has_is_generic_joystick()) {
      total_size += 1 + 1;
    }

    // optional int32 interface_number = 11 [default = -1];
    if (has_interface_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->interface_number());
    }

    // optional int32 ostype = 12 [default = -1];
    if (has_ostype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ostype());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CHIDDeviceInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CHIDDeviceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CHIDDeviceInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CHIDDeviceInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CHIDDeviceInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CHIDDeviceInfo)
    MergeFrom(*source);
  }
}

void CHIDDeviceInfo::MergeFrom(const CHIDDeviceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CHIDDeviceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_path();
      path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_serial_number();
      serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_manufacturer_string();
      manufacturer_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.manufacturer_string_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_product_string();
      product_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.product_string_);
    }
    if (cached_has_bits & 0x00000010u) {
      location_ = from.location_;
    }
    if (cached_has_bits & 0x00000020u) {
      vendor_id_ = from.vendor_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      product_id_ = from.product_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      release_number_ = from.release_number_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16128u) {
    if (cached_has_bits & 0x00000100u) {
      usage_page_ = from.usage_page_;
    }
    if (cached_has_bits & 0x00000200u) {
      usage_ = from.usage_;
    }
    if (cached_has_bits & 0x00000400u) {
      is_generic_gamepad_ = from.is_generic_gamepad_;
    }
    if (cached_has_bits & 0x00000800u) {
      is_generic_joystick_ = from.is_generic_joystick_;
    }
    if (cached_has_bits & 0x00001000u) {
      interface_number_ = from.interface_number_;
    }
    if (cached_has_bits & 0x00002000u) {
      ostype_ = from.ostype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CHIDDeviceInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CHIDDeviceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CHIDDeviceInfo::CopyFrom(const CHIDDeviceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CHIDDeviceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHIDDeviceInfo::IsInitialized() const {
  return true;
}

void CHIDDeviceInfo::Swap(CHIDDeviceInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CHIDDeviceInfo::InternalSwap(CHIDDeviceInfo* other) {
  path_.Swap(&other->path_);
  serial_number_.Swap(&other->serial_number_);
  manufacturer_string_.Swap(&other->manufacturer_string_);
  product_string_.Swap(&other->product_string_);
  std::swap(location_, other->location_);
  std::swap(vendor_id_, other->vendor_id_);
  std::swap(product_id_, other->product_id_);
  std::swap(release_number_, other->release_number_);
  std::swap(usage_page_, other->usage_page_);
  std::swap(usage_, other->usage_);
  std::swap(is_generic_gamepad_, other->is_generic_gamepad_);
  std::swap(is_generic_joystick_, other->is_generic_joystick_);
  std::swap(interface_number_, other->interface_number_);
  std::swap(ostype_, other->ostype_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CHIDDeviceInfo::GetMetadata() const {
  protobuf_steammessages_5fhiddevices_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fhiddevices_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CHIDDeviceInfo

// optional .proto.steam.EHIDDeviceLocation location = 1 [default = k_EDeviceLocationLocal];
bool CHIDDeviceInfo::has_location() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CHIDDeviceInfo::set_has_location() {
  _has_bits_[0] |= 0x00000010u;
}
void CHIDDeviceInfo::clear_has_location() {
  _has_bits_[0] &= ~0x00000010u;
}
void CHIDDeviceInfo::clear_location() {
  location_ = 0;
  clear_has_location();
}
::proto::steam::EHIDDeviceLocation CHIDDeviceInfo::location() const {
  // @@protoc_insertion_point(field_get:proto.steam.CHIDDeviceInfo.location)
  return static_cast< ::proto::steam::EHIDDeviceLocation >(location_);
}
void CHIDDeviceInfo::set_location(::proto::steam::EHIDDeviceLocation value) {
  assert(::proto::steam::EHIDDeviceLocation_IsValid(value));
  set_has_location();
  location_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CHIDDeviceInfo.location)
}

// optional string path = 2;
bool CHIDDeviceInfo::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CHIDDeviceInfo::set_has_path() {
  _has_bits_[0] |= 0x00000001u;
}
void CHIDDeviceInfo::clear_has_path() {
  _has_bits_[0] &= ~0x00000001u;
}
void CHIDDeviceInfo::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_path();
}
const ::std::string& CHIDDeviceInfo::path() const {
  // @@protoc_insertion_point(field_get:proto.steam.CHIDDeviceInfo.path)
  return path_.GetNoArena();
}
void CHIDDeviceInfo::set_path(const ::std::string& value) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CHIDDeviceInfo.path)
}
#if LANG_CXX11
void CHIDDeviceInfo::set_path(::std::string&& value) {
  set_has_path();
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CHIDDeviceInfo.path)
}
#endif
void CHIDDeviceInfo::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CHIDDeviceInfo.path)
}
void CHIDDeviceInfo::set_path(const char* value, size_t size) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CHIDDeviceInfo.path)
}
::std::string* CHIDDeviceInfo::mutable_path() {
  set_has_path();
  // @@protoc_insertion_point(field_mutable:proto.steam.CHIDDeviceInfo.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CHIDDeviceInfo::release_path() {
  // @@protoc_insertion_point(field_release:proto.steam.CHIDDeviceInfo.path)
  clear_has_path();
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CHIDDeviceInfo::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    set_has_path();
  } else {
    clear_has_path();
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CHIDDeviceInfo.path)
}

// optional uint32 vendor_id = 3;
bool CHIDDeviceInfo::has_vendor_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CHIDDeviceInfo::set_has_vendor_id() {
  _has_bits_[0] |= 0x00000020u;
}
void CHIDDeviceInfo::clear_has_vendor_id() {
  _has_bits_[0] &= ~0x00000020u;
}
void CHIDDeviceInfo::clear_vendor_id() {
  vendor_id_ = 0u;
  clear_has_vendor_id();
}
::google::protobuf::uint32 CHIDDeviceInfo::vendor_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CHIDDeviceInfo.vendor_id)
  return vendor_id_;
}
void CHIDDeviceInfo::set_vendor_id(::google::protobuf::uint32 value) {
  set_has_vendor_id();
  vendor_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CHIDDeviceInfo.vendor_id)
}

// optional uint32 product_id = 4;
bool CHIDDeviceInfo::has_product_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CHIDDeviceInfo::set_has_product_id() {
  _has_bits_[0] |= 0x00000040u;
}
void CHIDDeviceInfo::clear_has_product_id() {
  _has_bits_[0] &= ~0x00000040u;
}
void CHIDDeviceInfo::clear_product_id() {
  product_id_ = 0u;
  clear_has_product_id();
}
::google::protobuf::uint32 CHIDDeviceInfo::product_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CHIDDeviceInfo.product_id)
  return product_id_;
}
void CHIDDeviceInfo::set_product_id(::google::protobuf::uint32 value) {
  set_has_product_id();
  product_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CHIDDeviceInfo.product_id)
}

// optional string serial_number = 5;
bool CHIDDeviceInfo::has_serial_number() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CHIDDeviceInfo::set_has_serial_number() {
  _has_bits_[0] |= 0x00000002u;
}
void CHIDDeviceInfo::clear_has_serial_number() {
  _has_bits_[0] &= ~0x00000002u;
}
void CHIDDeviceInfo::clear_serial_number() {
  serial_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_serial_number();
}
const ::std::string& CHIDDeviceInfo::serial_number() const {
  // @@protoc_insertion_point(field_get:proto.steam.CHIDDeviceInfo.serial_number)
  return serial_number_.GetNoArena();
}
void CHIDDeviceInfo::set_serial_number(const ::std::string& value) {
  set_has_serial_number();
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CHIDDeviceInfo.serial_number)
}
#if LANG_CXX11
void CHIDDeviceInfo::set_serial_number(::std::string&& value) {
  set_has_serial_number();
  serial_number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CHIDDeviceInfo.serial_number)
}
#endif
void CHIDDeviceInfo::set_serial_number(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_serial_number();
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CHIDDeviceInfo.serial_number)
}
void CHIDDeviceInfo::set_serial_number(const char* value, size_t size) {
  set_has_serial_number();
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CHIDDeviceInfo.serial_number)
}
::std::string* CHIDDeviceInfo::mutable_serial_number() {
  set_has_serial_number();
  // @@protoc_insertion_point(field_mutable:proto.steam.CHIDDeviceInfo.serial_number)
  return serial_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CHIDDeviceInfo::release_serial_number() {
  // @@protoc_insertion_point(field_release:proto.steam.CHIDDeviceInfo.serial_number)
  clear_has_serial_number();
  return serial_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CHIDDeviceInfo::set_allocated_serial_number(::std::string* serial_number) {
  if (serial_number != NULL) {
    set_has_serial_number();
  } else {
    clear_has_serial_number();
  }
  serial_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serial_number);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CHIDDeviceInfo.serial_number)
}

// optional uint32 release_number = 6;
bool CHIDDeviceInfo::has_release_number() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CHIDDeviceInfo::set_has_release_number() {
  _has_bits_[0] |= 0x00000080u;
}
void CHIDDeviceInfo::clear_has_release_number() {
  _has_bits_[0] &= ~0x00000080u;
}
void CHIDDeviceInfo::clear_release_number() {
  release_number_ = 0u;
  clear_has_release_number();
}
::google::protobuf::uint32 CHIDDeviceInfo::release_number() const {
  // @@protoc_insertion_point(field_get:proto.steam.CHIDDeviceInfo.release_number)
  return release_number_;
}
void CHIDDeviceInfo::set_release_number(::google::protobuf::uint32 value) {
  set_has_release_number();
  release_number_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CHIDDeviceInfo.release_number)
}

// optional string manufacturer_string = 7;
bool CHIDDeviceInfo::has_manufacturer_string() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CHIDDeviceInfo::set_has_manufacturer_string() {
  _has_bits_[0] |= 0x00000004u;
}
void CHIDDeviceInfo::clear_has_manufacturer_string() {
  _has_bits_[0] &= ~0x00000004u;
}
void CHIDDeviceInfo::clear_manufacturer_string() {
  manufacturer_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_manufacturer_string();
}
const ::std::string& CHIDDeviceInfo::manufacturer_string() const {
  // @@protoc_insertion_point(field_get:proto.steam.CHIDDeviceInfo.manufacturer_string)
  return manufacturer_string_.GetNoArena();
}
void CHIDDeviceInfo::set_manufacturer_string(const ::std::string& value) {
  set_has_manufacturer_string();
  manufacturer_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CHIDDeviceInfo.manufacturer_string)
}
#if LANG_CXX11
void CHIDDeviceInfo::set_manufacturer_string(::std::string&& value) {
  set_has_manufacturer_string();
  manufacturer_string_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CHIDDeviceInfo.manufacturer_string)
}
#endif
void CHIDDeviceInfo::set_manufacturer_string(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_manufacturer_string();
  manufacturer_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CHIDDeviceInfo.manufacturer_string)
}
void CHIDDeviceInfo::set_manufacturer_string(const char* value, size_t size) {
  set_has_manufacturer_string();
  manufacturer_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CHIDDeviceInfo.manufacturer_string)
}
::std::string* CHIDDeviceInfo::mutable_manufacturer_string() {
  set_has_manufacturer_string();
  // @@protoc_insertion_point(field_mutable:proto.steam.CHIDDeviceInfo.manufacturer_string)
  return manufacturer_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CHIDDeviceInfo::release_manufacturer_string() {
  // @@protoc_insertion_point(field_release:proto.steam.CHIDDeviceInfo.manufacturer_string)
  clear_has_manufacturer_string();
  return manufacturer_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CHIDDeviceInfo::set_allocated_manufacturer_string(::std::string* manufacturer_string) {
  if (manufacturer_string != NULL) {
    set_has_manufacturer_string();
  } else {
    clear_has_manufacturer_string();
  }
  manufacturer_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), manufacturer_string);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CHIDDeviceInfo.manufacturer_string)
}

// optional string product_string = 8;
bool CHIDDeviceInfo::has_product_string() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CHIDDeviceInfo::set_has_product_string() {
  _has_bits_[0] |= 0x00000008u;
}
void CHIDDeviceInfo::clear_has_product_string() {
  _has_bits_[0] &= ~0x00000008u;
}
void CHIDDeviceInfo::clear_product_string() {
  product_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_product_string();
}
const ::std::string& CHIDDeviceInfo::product_string() const {
  // @@protoc_insertion_point(field_get:proto.steam.CHIDDeviceInfo.product_string)
  return product_string_.GetNoArena();
}
void CHIDDeviceInfo::set_product_string(const ::std::string& value) {
  set_has_product_string();
  product_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CHIDDeviceInfo.product_string)
}
#if LANG_CXX11
void CHIDDeviceInfo::set_product_string(::std::string&& value) {
  set_has_product_string();
  product_string_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CHIDDeviceInfo.product_string)
}
#endif
void CHIDDeviceInfo::set_product_string(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_product_string();
  product_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CHIDDeviceInfo.product_string)
}
void CHIDDeviceInfo::set_product_string(const char* value, size_t size) {
  set_has_product_string();
  product_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CHIDDeviceInfo.product_string)
}
::std::string* CHIDDeviceInfo::mutable_product_string() {
  set_has_product_string();
  // @@protoc_insertion_point(field_mutable:proto.steam.CHIDDeviceInfo.product_string)
  return product_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CHIDDeviceInfo::release_product_string() {
  // @@protoc_insertion_point(field_release:proto.steam.CHIDDeviceInfo.product_string)
  clear_has_product_string();
  return product_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CHIDDeviceInfo::set_allocated_product_string(::std::string* product_string) {
  if (product_string != NULL) {
    set_has_product_string();
  } else {
    clear_has_product_string();
  }
  product_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), product_string);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CHIDDeviceInfo.product_string)
}

// optional uint32 usage_page = 9;
bool CHIDDeviceInfo::has_usage_page() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CHIDDeviceInfo::set_has_usage_page() {
  _has_bits_[0] |= 0x00000100u;
}
void CHIDDeviceInfo::clear_has_usage_page() {
  _has_bits_[0] &= ~0x00000100u;
}
void CHIDDeviceInfo::clear_usage_page() {
  usage_page_ = 0u;
  clear_has_usage_page();
}
::google::protobuf::uint32 CHIDDeviceInfo::usage_page() const {
  // @@protoc_insertion_point(field_get:proto.steam.CHIDDeviceInfo.usage_page)
  return usage_page_;
}
void CHIDDeviceInfo::set_usage_page(::google::protobuf::uint32 value) {
  set_has_usage_page();
  usage_page_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CHIDDeviceInfo.usage_page)
}

// optional uint32 usage = 10;
bool CHIDDeviceInfo::has_usage() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CHIDDeviceInfo::set_has_usage() {
  _has_bits_[0] |= 0x00000200u;
}
void CHIDDeviceInfo::clear_has_usage() {
  _has_bits_[0] &= ~0x00000200u;
}
void CHIDDeviceInfo::clear_usage() {
  usage_ = 0u;
  clear_has_usage();
}
::google::protobuf::uint32 CHIDDeviceInfo::usage() const {
  // @@protoc_insertion_point(field_get:proto.steam.CHIDDeviceInfo.usage)
  return usage_;
}
void CHIDDeviceInfo::set_usage(::google::protobuf::uint32 value) {
  set_has_usage();
  usage_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CHIDDeviceInfo.usage)
}

// optional int32 interface_number = 11 [default = -1];
bool CHIDDeviceInfo::has_interface_number() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void CHIDDeviceInfo::set_has_interface_number() {
  _has_bits_[0] |= 0x00001000u;
}
void CHIDDeviceInfo::clear_has_interface_number() {
  _has_bits_[0] &= ~0x00001000u;
}
void CHIDDeviceInfo::clear_interface_number() {
  interface_number_ = -1;
  clear_has_interface_number();
}
::google::protobuf::int32 CHIDDeviceInfo::interface_number() const {
  // @@protoc_insertion_point(field_get:proto.steam.CHIDDeviceInfo.interface_number)
  return interface_number_;
}
void CHIDDeviceInfo::set_interface_number(::google::protobuf::int32 value) {
  set_has_interface_number();
  interface_number_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CHIDDeviceInfo.interface_number)
}

// optional int32 ostype = 12 [default = -1];
bool CHIDDeviceInfo::has_ostype() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void CHIDDeviceInfo::set_has_ostype() {
  _has_bits_[0] |= 0x00002000u;
}
void CHIDDeviceInfo::clear_has_ostype() {
  _has_bits_[0] &= ~0x00002000u;
}
void CHIDDeviceInfo::clear_ostype() {
  ostype_ = -1;
  clear_has_ostype();
}
::google::protobuf::int32 CHIDDeviceInfo::ostype() const {
  // @@protoc_insertion_point(field_get:proto.steam.CHIDDeviceInfo.ostype)
  return ostype_;
}
void CHIDDeviceInfo::set_ostype(::google::protobuf::int32 value) {
  set_has_ostype();
  ostype_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CHIDDeviceInfo.ostype)
}

// optional bool is_generic_gamepad = 13;
bool CHIDDeviceInfo::has_is_generic_gamepad() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CHIDDeviceInfo::set_has_is_generic_gamepad() {
  _has_bits_[0] |= 0x00000400u;
}
void CHIDDeviceInfo::clear_has_is_generic_gamepad() {
  _has_bits_[0] &= ~0x00000400u;
}
void CHIDDeviceInfo::clear_is_generic_gamepad() {
  is_generic_gamepad_ = false;
  clear_has_is_generic_gamepad();
}
bool CHIDDeviceInfo::is_generic_gamepad() const {
  // @@protoc_insertion_point(field_get:proto.steam.CHIDDeviceInfo.is_generic_gamepad)
  return is_generic_gamepad_;
}
void CHIDDeviceInfo::set_is_generic_gamepad(bool value) {
  set_has_is_generic_gamepad();
  is_generic_gamepad_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CHIDDeviceInfo.is_generic_gamepad)
}

// optional bool is_generic_joystick = 14;
bool CHIDDeviceInfo::has_is_generic_joystick() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CHIDDeviceInfo::set_has_is_generic_joystick() {
  _has_bits_[0] |= 0x00000800u;
}
void CHIDDeviceInfo::clear_has_is_generic_joystick() {
  _has_bits_[0] &= ~0x00000800u;
}
void CHIDDeviceInfo::clear_is_generic_joystick() {
  is_generic_joystick_ = false;
  clear_has_is_generic_joystick();
}
bool CHIDDeviceInfo::is_generic_joystick() const {
  // @@protoc_insertion_point(field_get:proto.steam.CHIDDeviceInfo.is_generic_joystick)
  return is_generic_joystick_;
}
void CHIDDeviceInfo::set_is_generic_joystick(bool value) {
  set_has_is_generic_joystick();
  is_generic_joystick_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CHIDDeviceInfo.is_generic_joystick)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CHIDDeviceInputReport::kFullReportFieldNumber;
const int CHIDDeviceInputReport::kDeltaReportFieldNumber;
const int CHIDDeviceInputReport::kDeltaReportSizeFieldNumber;
const int CHIDDeviceInputReport::kDeltaReportCrcFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CHIDDeviceInputReport::CHIDDeviceInputReport()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fhiddevices_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CHIDDeviceInputReport)
}
CHIDDeviceInputReport::CHIDDeviceInputReport(const CHIDDeviceInputReport& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  full_report_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_full_report()) {
    full_report_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.full_report_);
  }
  delta_report_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_delta_report()) {
    delta_report_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.delta_report_);
  }
  ::memcpy(&delta_report_size_, &from.delta_report_size_,
    reinterpret_cast<char*>(&delta_report_crc_) -
    reinterpret_cast<char*>(&delta_report_size_) + sizeof(delta_report_crc_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CHIDDeviceInputReport)
}

void CHIDDeviceInputReport::SharedCtor() {
  _cached_size_ = 0;
  full_report_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  delta_report_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&delta_report_size_, 0, reinterpret_cast<char*>(&delta_report_crc_) -
    reinterpret_cast<char*>(&delta_report_size_) + sizeof(delta_report_crc_));
}

CHIDDeviceInputReport::~CHIDDeviceInputReport() {
  // @@protoc_insertion_point(destructor:proto.steam.CHIDDeviceInputReport)
  SharedDtor();
}

void CHIDDeviceInputReport::SharedDtor() {
  full_report_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  delta_report_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CHIDDeviceInputReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CHIDDeviceInputReport::descriptor() {
  protobuf_steammessages_5fhiddevices_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fhiddevices_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CHIDDeviceInputReport& CHIDDeviceInputReport::default_instance() {
  protobuf_steammessages_5fhiddevices_2eproto::InitDefaults();
  return *internal_default_instance();
}

CHIDDeviceInputReport* CHIDDeviceInputReport::New(::google::protobuf::Arena* arena) const {
  CHIDDeviceInputReport* n = new CHIDDeviceInputReport;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CHIDDeviceInputReport::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CHIDDeviceInputReport)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_full_report()) {
      GOOGLE_DCHECK(!full_report_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*full_report_.UnsafeRawStringPointer())->clear();
    }
    if (has_delta_report()) {
      GOOGLE_DCHECK(!delta_report_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*delta_report_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&delta_report_size_, 0, reinterpret_cast<char*>(&delta_report_crc_) -
      reinterpret_cast<char*>(&delta_report_size_) + sizeof(delta_report_crc_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CHIDDeviceInputReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CHIDDeviceInputReport)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes full_report = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_full_report()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes delta_report = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_delta_report()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 delta_report_size = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_delta_report_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &delta_report_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 delta_report_crc = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_delta_report_crc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &delta_report_crc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CHIDDeviceInputReport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CHIDDeviceInputReport)
  return false;
#undef DO_
}

void CHIDDeviceInputReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CHIDDeviceInputReport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes full_report = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->full_report(), output);
  }

  // optional bytes delta_report = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->delta_report(), output);
  }

  // optional uint32 delta_report_size = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->delta_report_size(), output);
  }

  // optional uint32 delta_report_crc = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->delta_report_crc(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CHIDDeviceInputReport)
}

::google::protobuf::uint8* CHIDDeviceInputReport::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CHIDDeviceInputReport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes full_report = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->full_report(), target);
  }

  // optional bytes delta_report = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->delta_report(), target);
  }

  // optional uint32 delta_report_size = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->delta_report_size(), target);
  }

  // optional uint32 delta_report_crc = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->delta_report_crc(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CHIDDeviceInputReport)
  return target;
}

size_t CHIDDeviceInputReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CHIDDeviceInputReport)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional bytes full_report = 1;
    if (has_full_report()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->full_report());
    }

    // optional bytes delta_report = 2;
    if (has_delta_report()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->delta_report());
    }

    // optional uint32 delta_report_size = 3;
    if (has_delta_report_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->delta_report_size());
    }

    // optional uint32 delta_report_crc = 4;
    if (has_delta_report_crc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->delta_report_crc());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CHIDDeviceInputReport::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CHIDDeviceInputReport)
  GOOGLE_DCHECK_NE(&from, this);
  const CHIDDeviceInputReport* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CHIDDeviceInputReport>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CHIDDeviceInputReport)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CHIDDeviceInputReport)
    MergeFrom(*source);
  }
}

void CHIDDeviceInputReport::MergeFrom(const CHIDDeviceInputReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CHIDDeviceInputReport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_full_report();
      full_report_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.full_report_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_delta_report();
      delta_report_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.delta_report_);
    }
    if (cached_has_bits & 0x00000004u) {
      delta_report_size_ = from.delta_report_size_;
    }
    if (cached_has_bits & 0x00000008u) {
      delta_report_crc_ = from.delta_report_crc_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CHIDDeviceInputReport::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CHIDDeviceInputReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CHIDDeviceInputReport::CopyFrom(const CHIDDeviceInputReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CHIDDeviceInputReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHIDDeviceInputReport::IsInitialized() const {
  return true;
}

void CHIDDeviceInputReport::Swap(CHIDDeviceInputReport* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CHIDDeviceInputReport::InternalSwap(CHIDDeviceInputReport* other) {
  full_report_.Swap(&other->full_report_);
  delta_report_.Swap(&other->delta_report_);
  std::swap(delta_report_size_, other->delta_report_size_);
  std::swap(delta_report_crc_, other->delta_report_crc_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CHIDDeviceInputReport::GetMetadata() const {
  protobuf_steammessages_5fhiddevices_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fhiddevices_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CHIDDeviceInputReport

// optional bytes full_report = 1;
bool CHIDDeviceInputReport::has_full_report() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CHIDDeviceInputReport::set_has_full_report() {
  _has_bits_[0] |= 0x00000001u;
}
void CHIDDeviceInputReport::clear_has_full_report() {
  _has_bits_[0] &= ~0x00000001u;
}
void CHIDDeviceInputReport::clear_full_report() {
  full_report_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_full_report();
}
const ::std::string& CHIDDeviceInputReport::full_report() const {
  // @@protoc_insertion_point(field_get:proto.steam.CHIDDeviceInputReport.full_report)
  return full_report_.GetNoArena();
}
void CHIDDeviceInputReport::set_full_report(const ::std::string& value) {
  set_has_full_report();
  full_report_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CHIDDeviceInputReport.full_report)
}
#if LANG_CXX11
void CHIDDeviceInputReport::set_full_report(::std::string&& value) {
  set_has_full_report();
  full_report_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CHIDDeviceInputReport.full_report)
}
#endif
void CHIDDeviceInputReport::set_full_report(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_full_report();
  full_report_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CHIDDeviceInputReport.full_report)
}
void CHIDDeviceInputReport::set_full_report(const void* value, size_t size) {
  set_has_full_report();
  full_report_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CHIDDeviceInputReport.full_report)
}
::std::string* CHIDDeviceInputReport::mutable_full_report() {
  set_has_full_report();
  // @@protoc_insertion_point(field_mutable:proto.steam.CHIDDeviceInputReport.full_report)
  return full_report_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CHIDDeviceInputReport::release_full_report() {
  // @@protoc_insertion_point(field_release:proto.steam.CHIDDeviceInputReport.full_report)
  clear_has_full_report();
  return full_report_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CHIDDeviceInputReport::set_allocated_full_report(::std::string* full_report) {
  if (full_report != NULL) {
    set_has_full_report();
  } else {
    clear_has_full_report();
  }
  full_report_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), full_report);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CHIDDeviceInputReport.full_report)
}

// optional bytes delta_report = 2;
bool CHIDDeviceInputReport::has_delta_report() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CHIDDeviceInputReport::set_has_delta_report() {
  _has_bits_[0] |= 0x00000002u;
}
void CHIDDeviceInputReport::clear_has_delta_report() {
  _has_bits_[0] &= ~0x00000002u;
}
void CHIDDeviceInputReport::clear_delta_report() {
  delta_report_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_delta_report();
}
const ::std::string& CHIDDeviceInputReport::delta_report() const {
  // @@protoc_insertion_point(field_get:proto.steam.CHIDDeviceInputReport.delta_report)
  return delta_report_.GetNoArena();
}
void CHIDDeviceInputReport::set_delta_report(const ::std::string& value) {
  set_has_delta_report();
  delta_report_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CHIDDeviceInputReport.delta_report)
}
#if LANG_CXX11
void CHIDDeviceInputReport::set_delta_report(::std::string&& value) {
  set_has_delta_report();
  delta_report_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CHIDDeviceInputReport.delta_report)
}
#endif
void CHIDDeviceInputReport::set_delta_report(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_delta_report();
  delta_report_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CHIDDeviceInputReport.delta_report)
}
void CHIDDeviceInputReport::set_delta_report(const void* value, size_t size) {
  set_has_delta_report();
  delta_report_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CHIDDeviceInputReport.delta_report)
}
::std::string* CHIDDeviceInputReport::mutable_delta_report() {
  set_has_delta_report();
  // @@protoc_insertion_point(field_mutable:proto.steam.CHIDDeviceInputReport.delta_report)
  return delta_report_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CHIDDeviceInputReport::release_delta_report() {
  // @@protoc_insertion_point(field_release:proto.steam.CHIDDeviceInputReport.delta_report)
  clear_has_delta_report();
  return delta_report_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CHIDDeviceInputReport::set_allocated_delta_report(::std::string* delta_report) {
  if (delta_report != NULL) {
    set_has_delta_report();
  } else {
    clear_has_delta_report();
  }
  delta_report_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), delta_report);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CHIDDeviceInputReport.delta_report)
}

// optional uint32 delta_report_size = 3;
bool CHIDDeviceInputReport::has_delta_report_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CHIDDeviceInputReport::set_has_delta_report_size() {
  _has_bits_[0] |= 0x00000004u;
}
void CHIDDeviceInputReport::clear_has_delta_report_size() {
  _has_bits_[0] &= ~0x00000004u;
}
void CHIDDeviceInputReport::clear_delta_report_size() {
  delta_report_size_ = 0u;
  clear_has_delta_report_size();
}
::google::protobuf::uint32 CHIDDeviceInputReport::delta_report_size() const {
  // @@protoc_insertion_point(field_get:proto.steam.CHIDDeviceInputReport.delta_report_size)
  return delta_report_size_;
}
void CHIDDeviceInputReport::set_delta_report_size(::google::protobuf::uint32 value) {
  set_has_delta_report_size();
  delta_report_size_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CHIDDeviceInputReport.delta_report_size)
}

// optional uint32 delta_report_crc = 4;
bool CHIDDeviceInputReport::has_delta_report_crc() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CHIDDeviceInputReport::set_has_delta_report_crc() {
  _has_bits_[0] |= 0x00000008u;
}
void CHIDDeviceInputReport::clear_has_delta_report_crc() {
  _has_bits_[0] &= ~0x00000008u;
}
void CHIDDeviceInputReport::clear_delta_report_crc() {
  delta_report_crc_ = 0u;
  clear_has_delta_report_crc();
}
::google::protobuf::uint32 CHIDDeviceInputReport::delta_report_crc() const {
  // @@protoc_insertion_point(field_get:proto.steam.CHIDDeviceInputReport.delta_report_crc)
  return delta_report_crc_;
}
void CHIDDeviceInputReport::set_delta_report_crc(::google::protobuf::uint32 value) {
  set_has_delta_report_crc();
  delta_report_crc_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CHIDDeviceInputReport.delta_report_crc)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CHIDMessageToRemote_DeviceOpen::kInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CHIDMessageToRemote_DeviceOpen::CHIDMessageToRemote_DeviceOpen()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fhiddevices_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CHIDMessageToRemote.DeviceOpen)
}
CHIDMessageToRemote_DeviceOpen::CHIDMessageToRemote_DeviceOpen(const CHIDMessageToRemote_DeviceOpen& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_info()) {
    info_ = new ::proto::steam::CHIDDeviceInfo(*from.info_);
  } else {
    info_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:proto.steam.CHIDMessageToRemote.DeviceOpen)
}

void CHIDMessageToRemote_DeviceOpen::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
}

CHIDMessageToRemote_DeviceOpen::~CHIDMessageToRemote_DeviceOpen() {
  // @@protoc_insertion_point(destructor:proto.steam.CHIDMessageToRemote.DeviceOpen)
  SharedDtor();
}

void CHIDMessageToRemote_DeviceOpen::SharedDtor() {
  if (this != internal_default_instance()) {
    delete info_;
  }
}

void CHIDMessageToRemote_DeviceOpen::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CHIDMessageToRemote_DeviceOpen::descriptor() {
  protobuf_steammessages_5fhiddevices_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fhiddevices_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CHIDMessageToRemote_DeviceOpen& CHIDMessageToRemote_DeviceOpen::default_instance() {
  protobuf_steammessages_5fhiddevices_2eproto::InitDefaults();
  return *internal_default_instance();
}

CHIDMessageToRemote_DeviceOpen* CHIDMessageToRemote_DeviceOpen::New(::google::protobuf::Arena* arena) const {
  CHIDMessageToRemote_DeviceOpen* n = new CHIDMessageToRemote_DeviceOpen;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CHIDMessageToRemote_DeviceOpen::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CHIDMessageToRemote.DeviceOpen)
  if (has_info()) {
    GOOGLE_DCHECK(info_ != NULL);
    info_->::proto::steam::CHIDDeviceInfo::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CHIDMessageToRemote_DeviceOpen::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CHIDMessageToRemote.DeviceOpen)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.steam.CHIDDeviceInfo info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CHIDMessageToRemote.DeviceOpen)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CHIDMessageToRemote.DeviceOpen)
  return false;
#undef DO_
}

void CHIDMessageToRemote_DeviceOpen::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CHIDMessageToRemote.DeviceOpen)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.steam.CHIDDeviceInfo info = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->info_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CHIDMessageToRemote.DeviceOpen)
}

::google::protobuf::uint8* CHIDMessageToRemote_DeviceOpen::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CHIDMessageToRemote.DeviceOpen)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.steam.CHIDDeviceInfo info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->info_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CHIDMessageToRemote.DeviceOpen)
  return target;
}

size_t CHIDMessageToRemote_DeviceOpen::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CHIDMessageToRemote.DeviceOpen)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .proto.steam.CHIDDeviceInfo info = 1;
  if (has_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->info_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CHIDMessageToRemote_DeviceOpen::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CHIDMessageToRemote.DeviceOpen)
  GOOGLE_DCHECK_NE(&from, this);
  const CHIDMessageToRemote_DeviceOpen* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CHIDMessageToRemote_DeviceOpen>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CHIDMessageToRemote.DeviceOpen)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CHIDMessageToRemote.DeviceOpen)
    MergeFrom(*source);
  }
}

void CHIDMessageToRemote_DeviceOpen::MergeFrom(const CHIDMessageToRemote_DeviceOpen& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CHIDMessageToRemote.DeviceOpen)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_info()) {
    mutable_info()->::proto::steam::CHIDDeviceInfo::MergeFrom(from.info());
  }
}

void CHIDMessageToRemote_DeviceOpen::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CHIDMessageToRemote.DeviceOpen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CHIDMessageToRemote_DeviceOpen::CopyFrom(const CHIDMessageToRemote_DeviceOpen& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CHIDMessageToRemote.DeviceOpen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHIDMessageToRemote_DeviceOpen::IsInitialized() const {
  return true;
}

void CHIDMessageToRemote_DeviceOpen::Swap(CHIDMessageToRemote_DeviceOpen* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CHIDMessageToRemote_DeviceOpen::InternalSwap(CHIDMessageToRemote_DeviceOpen* other) {
  std::swap(info_, other->info_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CHIDMessageToRemote_DeviceOpen::GetMetadata() const {
  protobuf_steammessages_5fhiddevices_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fhiddevices_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CHIDMessageToRemote_DeviceOpen

// optional .proto.steam.CHIDDeviceInfo info = 1;
bool CHIDMessageToRemote_DeviceOpen::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CHIDMessageToRemote_DeviceOpen::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
void CHIDMessageToRemote_DeviceOpen::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
void CHIDMessageToRemote_DeviceOpen::clear_info() {
  if (info_ != NULL) info_->::proto::steam::CHIDDeviceInfo::Clear();
  clear_has_info();
}
const ::proto::steam::CHIDDeviceInfo& CHIDMessageToRemote_DeviceOpen::info() const {
  // @@protoc_insertion_point(field_get:proto.steam.CHIDMessageToRemote.DeviceOpen.info)
  return info_ != NULL ? *info_
                         : *::proto::steam::CHIDDeviceInfo::internal_default_instance();
}
::proto::steam::CHIDDeviceInfo* CHIDMessageToRemote_DeviceOpen::mutable_info() {
  set_has_info();
  if (info_ == NULL) {
    info_ = new ::proto::steam::CHIDDeviceInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.steam.CHIDMessageToRemote.DeviceOpen.info)
  return info_;
}
::proto::steam::CHIDDeviceInfo* CHIDMessageToRemote_DeviceOpen::release_info() {
  // @@protoc_insertion_point(field_release:proto.steam.CHIDMessageToRemote.DeviceOpen.info)
  clear_has_info();
  ::proto::steam::CHIDDeviceInfo* temp = info_;
  info_ = NULL;
  return temp;
}
void CHIDMessageToRemote_DeviceOpen::set_allocated_info(::proto::steam::CHIDDeviceInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CHIDMessageToRemote.DeviceOpen.info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CHIDMessageToRemote_DeviceClose::kDeviceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CHIDMessageToRemote_DeviceClose::CHIDMessageToRemote_DeviceClose()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fhiddevices_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CHIDMessageToRemote.DeviceClose)
}
CHIDMessageToRemote_DeviceClose::CHIDMessageToRemote_DeviceClose(const CHIDMessageToRemote_DeviceClose& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  device_ = from.device_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CHIDMessageToRemote.DeviceClose)
}

void CHIDMessageToRemote_DeviceClose::SharedCtor() {
  _cached_size_ = 0;
  device_ = 0u;
}

CHIDMessageToRemote_DeviceClose::~CHIDMessageToRemote_DeviceClose() {
  // @@protoc_insertion_point(destructor:proto.steam.CHIDMessageToRemote.DeviceClose)
  SharedDtor();
}

void CHIDMessageToRemote_DeviceClose::SharedDtor() {
}

void CHIDMessageToRemote_DeviceClose::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CHIDMessageToRemote_DeviceClose::descriptor() {
  protobuf_steammessages_5fhiddevices_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fhiddevices_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CHIDMessageToRemote_DeviceClose& CHIDMessageToRemote_DeviceClose::default_instance() {
  protobuf_steammessages_5fhiddevices_2eproto::InitDefaults();
  return *internal_default_instance();
}

CHIDMessageToRemote_DeviceClose* CHIDMessageToRemote_DeviceClose::New(::google::protobuf::Arena* arena) const {
  CHIDMessageToRemote_DeviceClose* n = new CHIDMessageToRemote_DeviceClose;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CHIDMessageToRemote_DeviceClose::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CHIDMessageToRemote.DeviceClose)
  device_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CHIDMessageToRemote_DeviceClose::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CHIDMessageToRemote.DeviceClose)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 device = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_device();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &device_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CHIDMessageToRemote.DeviceClose)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CHIDMessageToRemote.DeviceClose)
  return false;
#undef DO_
}

void CHIDMessageToRemote_DeviceClose::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CHIDMessageToRemote.DeviceClose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 device = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->device(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CHIDMessageToRemote.DeviceClose)
}

::google::protobuf::uint8* CHIDMessageToRemote_DeviceClose::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CHIDMessageToRemote.DeviceClose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 device = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->device(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CHIDMessageToRemote.DeviceClose)
  return target;
}

size_t CHIDMessageToRemote_DeviceClose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CHIDMessageToRemote.DeviceClose)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 device = 1;
  if (has_device()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->device());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CHIDMessageToRemote_DeviceClose::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CHIDMessageToRemote.DeviceClose)
  GOOGLE_DCHECK_NE(&from, this);
  const CHIDMessageToRemote_DeviceClose* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CHIDMessageToRemote_DeviceClose>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CHIDMessageToRemote.DeviceClose)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CHIDMessageToRemote.DeviceClose)
    MergeFrom(*source);
  }
}

void CHIDMessageToRemote_DeviceClose::MergeFrom(const CHIDMessageToRemote_DeviceClose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CHIDMessageToRemote.DeviceClose)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_device()) {
    set_device(from.device());
  }
}

void CHIDMessageToRemote_DeviceClose::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CHIDMessageToRemote.DeviceClose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CHIDMessageToRemote_DeviceClose::CopyFrom(const CHIDMessageToRemote_DeviceClose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CHIDMessageToRemote.DeviceClose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHIDMessageToRemote_DeviceClose::IsInitialized() const {
  return true;
}

void CHIDMessageToRemote_DeviceClose::Swap(CHIDMessageToRemote_DeviceClose* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CHIDMessageToRemote_DeviceClose::InternalSwap(CHIDMessageToRemote_DeviceClose* other) {
  std::swap(device_, other->device_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CHIDMessageToRemote_DeviceClose::GetMetadata() const {
  protobuf_steammessages_5fhiddevices_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fhiddevices_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CHIDMessageToRemote_DeviceClose

// optional uint32 device = 1;
bool CHIDMessageToRemote_DeviceClose::has_device() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CHIDMessageToRemote_DeviceClose::set_has_device() {
  _has_bits_[0] |= 0x00000001u;
}
void CHIDMessageToRemote_DeviceClose::clear_has_device() {
  _has_bits_[0] &= ~0x00000001u;
}
void CHIDMessageToRemote_DeviceClose::clear_device() {
  device_ = 0u;
  clear_has_device();
}
::google::protobuf::uint32 CHIDMessageToRemote_DeviceClose::device() const {
  // @@protoc_insertion_point(field_get:proto.steam.CHIDMessageToRemote.DeviceClose.device)
  return device_;
}
void CHIDMessageToRemote_DeviceClose::set_device(::google::protobuf::uint32 value) {
  set_has_device();
  device_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CHIDMessageToRemote.DeviceClose.device)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CHIDMessageToRemote_DeviceWrite::kDeviceFieldNumber;
const int CHIDMessageToRemote_DeviceWrite::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CHIDMessageToRemote_DeviceWrite::CHIDMessageToRemote_DeviceWrite()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fhiddevices_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CHIDMessageToRemote.DeviceWrite)
}
CHIDMessageToRemote_DeviceWrite::CHIDMessageToRemote_DeviceWrite(const CHIDMessageToRemote_DeviceWrite& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  device_ = from.device_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CHIDMessageToRemote.DeviceWrite)
}

void CHIDMessageToRemote_DeviceWrite::SharedCtor() {
  _cached_size_ = 0;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_ = 0u;
}

CHIDMessageToRemote_DeviceWrite::~CHIDMessageToRemote_DeviceWrite() {
  // @@protoc_insertion_point(destructor:proto.steam.CHIDMessageToRemote.DeviceWrite)
  SharedDtor();
}

void CHIDMessageToRemote_DeviceWrite::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CHIDMessageToRemote_DeviceWrite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CHIDMessageToRemote_DeviceWrite::descriptor() {
  protobuf_steammessages_5fhiddevices_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fhiddevices_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CHIDMessageToRemote_DeviceWrite& CHIDMessageToRemote_DeviceWrite::default_instance() {
  protobuf_steammessages_5fhiddevices_2eproto::InitDefaults();
  return *internal_default_instance();
}

CHIDMessageToRemote_DeviceWrite* CHIDMessageToRemote_DeviceWrite::New(::google::protobuf::Arena* arena) const {
  CHIDMessageToRemote_DeviceWrite* n = new CHIDMessageToRemote_DeviceWrite;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CHIDMessageToRemote_DeviceWrite::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CHIDMessageToRemote.DeviceWrite)
  if (has_data()) {
    GOOGLE_DCHECK(!data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*data_.UnsafeRawStringPointer())->clear();
  }
  device_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CHIDMessageToRemote_DeviceWrite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CHIDMessageToRemote.DeviceWrite)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 device = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_device();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &device_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CHIDMessageToRemote.DeviceWrite)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CHIDMessageToRemote.DeviceWrite)
  return false;
#undef DO_
}

void CHIDMessageToRemote_DeviceWrite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CHIDMessageToRemote.DeviceWrite)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 device = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->device(), output);
  }

  // optional bytes data = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CHIDMessageToRemote.DeviceWrite)
}

::google::protobuf::uint8* CHIDMessageToRemote_DeviceWrite::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CHIDMessageToRemote.DeviceWrite)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 device = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->device(), target);
  }

  // optional bytes data = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CHIDMessageToRemote.DeviceWrite)
  return target;
}

size_t CHIDMessageToRemote_DeviceWrite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CHIDMessageToRemote.DeviceWrite)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional uint32 device = 1;
    if (has_device()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->device());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CHIDMessageToRemote_DeviceWrite::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CHIDMessageToRemote.DeviceWrite)
  GOOGLE_DCHECK_NE(&from, this);
  const CHIDMessageToRemote_DeviceWrite* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CHIDMessageToRemote_DeviceWrite>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CHIDMessageToRemote.DeviceWrite)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CHIDMessageToRemote.DeviceWrite)
    MergeFrom(*source);
  }
}

void CHIDMessageToRemote_DeviceWrite::MergeFrom(const CHIDMessageToRemote_DeviceWrite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CHIDMessageToRemote.DeviceWrite)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000002u) {
      device_ = from.device_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CHIDMessageToRemote_DeviceWrite::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CHIDMessageToRemote.DeviceWrite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CHIDMessageToRemote_DeviceWrite::CopyFrom(const CHIDMessageToRemote_DeviceWrite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CHIDMessageToRemote.DeviceWrite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHIDMessageToRemote_DeviceWrite::IsInitialized() const {
  return true;
}

void CHIDMessageToRemote_DeviceWrite::Swap(CHIDMessageToRemote_DeviceWrite* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CHIDMessageToRemote_DeviceWrite::InternalSwap(CHIDMessageToRemote_DeviceWrite* other) {
  data_.Swap(&other->data_);
  std::swap(device_, other->device_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CHIDMessageToRemote_DeviceWrite::GetMetadata() const {
  protobuf_steammessages_5fhiddevices_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fhiddevices_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CHIDMessageToRemote_DeviceWrite

// optional uint32 device = 1;
bool CHIDMessageToRemote_DeviceWrite::has_device() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CHIDMessageToRemote_DeviceWrite::set_has_device() {
  _has_bits_[0] |= 0x00000002u;
}
void CHIDMessageToRemote_DeviceWrite::clear_has_device() {
  _has_bits_[0] &= ~0x00000002u;
}
void CHIDMessageToRemote_DeviceWrite::clear_device() {
  device_ = 0u;
  clear_has_device();
}
::google::protobuf::uint32 CHIDMessageToRemote_DeviceWrite::device() const {
  // @@protoc_insertion_point(field_get:proto.steam.CHIDMessageToRemote.DeviceWrite.device)
  return device_;
}
void CHIDMessageToRemote_DeviceWrite::set_device(::google::protobuf::uint32 value) {
  set_has_device();
  device_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CHIDMessageToRemote.DeviceWrite.device)
}

// optional bytes data = 2;
bool CHIDMessageToRemote_DeviceWrite::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CHIDMessageToRemote_DeviceWrite::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
void CHIDMessageToRemote_DeviceWrite::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void CHIDMessageToRemote_DeviceWrite::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
const ::std::string& CHIDMessageToRemote_DeviceWrite::data() const {
  // @@protoc_insertion_point(field_get:proto.steam.CHIDMessageToRemote.DeviceWrite.data)
  return data_.GetNoArena();
}
void CHIDMessageToRemote_DeviceWrite::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CHIDMessageToRemote.DeviceWrite.data)
}
#if LANG_CXX11
void CHIDMessageToRemote_DeviceWrite::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CHIDMessageToRemote.DeviceWrite.data)
}
#endif
void CHIDMessageToRemote_DeviceWrite::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CHIDMessageToRemote.DeviceWrite.data)
}
void CHIDMessageToRemote_DeviceWrite::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CHIDMessageToRemote.DeviceWrite.data)
}
::std::string* CHIDMessageToRemote_DeviceWrite::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:proto.steam.CHIDMessageToRemote.DeviceWrite.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CHIDMessageToRemote_DeviceWrite::release_data() {
  // @@protoc_insertion_point(field_release:proto.steam.CHIDMessageToRemote.DeviceWrite.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CHIDMessageToRemote_DeviceWrite::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CHIDMessageToRemote.DeviceWrite.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CHIDMessageToRemote_DeviceRead::kDeviceFieldNumber;
const int CHIDMessageToRemote_DeviceRead::kLengthFieldNumber;
const int CHIDMessageToRemote_DeviceRead::kTimeoutMsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CHIDMessageToRemote_DeviceRead::CHIDMessageToRemote_DeviceRead()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fhiddevices_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CHIDMessageToRemote.DeviceRead)
}
CHIDMessageToRemote_DeviceRead::CHIDMessageToRemote_DeviceRead(const CHIDMessageToRemote_DeviceRead& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&device_, &from.device_,
    reinterpret_cast<char*>(&timeout_ms_) -
    reinterpret_cast<char*>(&device_) + sizeof(timeout_ms_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CHIDMessageToRemote.DeviceRead)
}

void CHIDMessageToRemote_DeviceRead::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&device_, 0, reinterpret_cast<char*>(&timeout_ms_) -
    reinterpret_cast<char*>(&device_) + sizeof(timeout_ms_));
}

CHIDMessageToRemote_DeviceRead::~CHIDMessageToRemote_DeviceRead() {
  // @@protoc_insertion_point(destructor:proto.steam.CHIDMessageToRemote.DeviceRead)
  SharedDtor();
}

void CHIDMessageToRemote_DeviceRead::SharedDtor() {
}

void CHIDMessageToRemote_DeviceRead::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CHIDMessageToRemote_DeviceRead::descriptor() {
  protobuf_steammessages_5fhiddevices_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fhiddevices_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CHIDMessageToRemote_DeviceRead& CHIDMessageToRemote_DeviceRead::default_instance() {
  protobuf_steammessages_5fhiddevices_2eproto::InitDefaults();
  return *internal_default_instance();
}

CHIDMessageToRemote_DeviceRead* CHIDMessageToRemote_DeviceRead::New(::google::protobuf::Arena* arena) const {
  CHIDMessageToRemote_DeviceRead* n = new CHIDMessageToRemote_DeviceRead;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CHIDMessageToRemote_DeviceRead::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CHIDMessageToRemote.DeviceRead)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&device_, 0, reinterpret_cast<char*>(&timeout_ms_) -
      reinterpret_cast<char*>(&device_) + sizeof(timeout_ms_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CHIDMessageToRemote_DeviceRead::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CHIDMessageToRemote.DeviceRead)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 device = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_device();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &device_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 length = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 timeout_ms = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_timeout_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timeout_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CHIDMessageToRemote.DeviceRead)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CHIDMessageToRemote.DeviceRead)
  return false;
#undef DO_
}

void CHIDMessageToRemote_DeviceRead::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CHIDMessageToRemote.DeviceRead)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 device = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->device(), output);
  }

  // optional uint32 length = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->length(), output);
  }

  // optional int32 timeout_ms = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->timeout_ms(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CHIDMessageToRemote.DeviceRead)
}

::google::protobuf::uint8* CHIDMessageToRemote_DeviceRead::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CHIDMessageToRemote.DeviceRead)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 device = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->device(), target);
  }

  // optional uint32 length = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->length(), target);
  }

  // optional int32 timeout_ms = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->timeout_ms(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CHIDMessageToRemote.DeviceRead)
  return target;
}

size_t CHIDMessageToRemote_DeviceRead::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CHIDMessageToRemote.DeviceRead)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 device = 1;
    if (has_device()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->device());
    }

    // optional uint32 length = 2;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->length());
    }

    // optional int32 timeout_ms = 3;
    if (has_timeout_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timeout_ms());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CHIDMessageToRemote_DeviceRead::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CHIDMessageToRemote.DeviceRead)
  GOOGLE_DCHECK_NE(&from, this);
  const CHIDMessageToRemote_DeviceRead* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CHIDMessageToRemote_DeviceRead>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CHIDMessageToRemote.DeviceRead)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CHIDMessageToRemote.DeviceRead)
    MergeFrom(*source);
  }
}

void CHIDMessageToRemote_DeviceRead::MergeFrom(const CHIDMessageToRemote_DeviceRead& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CHIDMessageToRemote.DeviceRead)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      device_ = from.device_;
    }
    if (cached_has_bits & 0x00000002u) {
      length_ = from.length_;
    }
    if (cached_has_bits & 0x00000004u) {
      timeout_ms_ = from.timeout_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CHIDMessageToRemote_DeviceRead::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CHIDMessageToRemote.DeviceRead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CHIDMessageToRemote_DeviceRead::CopyFrom(const CHIDMessageToRemote_DeviceRead& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CHIDMessageToRemote.DeviceRead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHIDMessageToRemote_DeviceRead::IsInitialized() const {
  return true;
}

void CHIDMessageToRemote_DeviceRead::Swap(CHIDMessageToRemote_DeviceRead* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CHIDMessageToRemote_DeviceRead::InternalSwap(CHIDMessageToRemote_DeviceRead* other) {
  std::swap(device_, other->device_);
  std::swap(length_, other->length_);
  std::swap(timeout_ms_, other->timeout_ms_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CHIDMessageToRemote_DeviceRead::GetMetadata() const {
  protobuf_steammessages_5fhiddevices_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fhiddevices_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CHIDMessageToRemote_DeviceRead

// optional uint32 device = 1;
bool CHIDMessageToRemote_DeviceRead::has_device() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CHIDMessageToRemote_DeviceRead::set_has_device() {
  _has_bits_[0] |= 0x00000001u;
}
void CHIDMessageToRemote_DeviceRead::clear_has_device() {
  _has_bits_[0] &= ~0x00000001u;
}
void CHIDMessageToRemote_DeviceRead::clear_device() {
  device_ = 0u;
  clear_has_device();
}
::google::protobuf::uint32 CHIDMessageToRemote_DeviceRead::device() const {
  // @@protoc_insertion_point(field_get:proto.steam.CHIDMessageToRemote.DeviceRead.device)
  return device_;
}
void CHIDMessageToRemote_DeviceRead::set_device(::google::protobuf::uint32 value) {
  set_has_device();
  device_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CHIDMessageToRemote.DeviceRead.device)
}

// optional uint32 length = 2;
bool CHIDMessageToRemote_DeviceRead::has_length() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CHIDMessageToRemote_DeviceRead::set_has_length() {
  _has_bits_[0] |= 0x00000002u;
}
void CHIDMessageToRemote_DeviceRead::clear_has_length() {
  _has_bits_[0] &= ~0x00000002u;
}
void CHIDMessageToRemote_DeviceRead::clear_length() {
  length_ = 0u;
  clear_has_length();
}
::google::protobuf::uint32 CHIDMessageToRemote_DeviceRead::length() const {
  // @@protoc_insertion_point(field_get:proto.steam.CHIDMessageToRemote.DeviceRead.length)
  return length_;
}
void CHIDMessageToRemote_DeviceRead::set_length(::google::protobuf::uint32 value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CHIDMessageToRemote.DeviceRead.length)
}

// optional int32 timeout_ms = 3;
bool CHIDMessageToRemote_DeviceRead::has_timeout_ms() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CHIDMessageToRemote_DeviceRead::set_has_timeout_ms() {
  _has_bits_[0] |= 0x00000004u;
}
void CHIDMessageToRemote_DeviceRead::clear_has_timeout_ms() {
  _has_bits_[0] &= ~0x00000004u;
}
void CHIDMessageToRemote_DeviceRead::clear_timeout_ms() {
  timeout_ms_ = 0;
  clear_has_timeout_ms();
}
::google::protobuf::int32 CHIDMessageToRemote_DeviceRead::timeout_ms() const {
  // @@protoc_insertion_point(field_get:proto.steam.CHIDMessageToRemote.DeviceRead.timeout_ms)
  return timeout_ms_;
}
void CHIDMessageToRemote_DeviceRead::set_timeout_ms(::google::protobuf::int32 value) {
  set_has_timeout_ms();
  timeout_ms_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CHIDMessageToRemote.DeviceRead.timeout_ms)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CHIDMessageToRemote_DeviceSendFeatureReport::kDeviceFieldNumber;
const int CHIDMessageToRemote_DeviceSendFeatureReport::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CHIDMessageToRemote_DeviceSendFeatureReport::CHIDMessageToRemote_DeviceSendFeatureReport()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fhiddevices_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CHIDMessageToRemote.DeviceSendFeatureReport)
}
CHIDMessageToRemote_DeviceSendFeatureReport::CHIDMessageToRemote_DeviceSendFeatureReport(const CHIDMessageToRemote_DeviceSendFeatureReport& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  device_ = from.device_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CHIDMessageToRemote.DeviceSendFeatureReport)
}

void CHIDMessageToRemote_DeviceSendFeatureReport::SharedCtor() {
  _cached_size_ = 0;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_ = 0u;
}

CHIDMessageToRemote_DeviceSendFeatureReport::~CHIDMessageToRemote_DeviceSendFeatureReport() {
  // @@protoc_insertion_point(destructor:proto.steam.CHIDMessageToRemote.DeviceSendFeatureReport)
  SharedDtor();
}

void CHIDMessageToRemote_DeviceSendFeatureReport::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CHIDMessageToRemote_DeviceSendFeatureReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CHIDMessageToRemote_DeviceSendFeatureReport::descriptor() {
  protobuf_steammessages_5fhiddevices_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fhiddevices_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CHIDMessageToRemote_DeviceSendFeatureReport& CHIDMessageToRemote_DeviceSendFeatureReport::default_instance() {
  protobuf_steammessages_5fhiddevices_2eproto::InitDefaults();
  return *internal_default_instance();
}

CHIDMessageToRemote_DeviceSendFeatureReport* CHIDMessageToRemote_DeviceSendFeatureReport::New(::google::protobuf::Arena* arena) const {
  CHIDMessageToRemote_DeviceSendFeatureReport* n = new CHIDMessageToRemote_DeviceSendFeatureReport;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CHIDMessageToRemote_DeviceSendFeatureReport::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CHIDMessageToRemote.DeviceSendFeatureReport)
  if (has_data()) {
    GOOGLE_DCHECK(!data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*data_.UnsafeRawStringPointer())->clear();
  }
  device_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CHIDMessageToRemote_DeviceSendFeatureReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CHIDMessageToRemote.DeviceSendFeatureReport)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 device = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_device();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &device_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CHIDMessageToRemote.DeviceSendFeatureReport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CHIDMessageToRemote.DeviceSendFeatureReport)
  return false;
#undef DO_
}

void CHIDMessageToRemote_DeviceSendFeatureReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CHIDMessageToRemote.DeviceSendFeatureReport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 device = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->device(), output);
  }

  // optional bytes data = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CHIDMessageToRemote.DeviceSendFeatureReport)
}

::google::protobuf::uint8* CHIDMessageToRemote_DeviceSendFeatureReport::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CHIDMessageToRemote.DeviceSendFeatureReport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 device = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->device(), target);
  }

  // optional bytes data = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CHIDMessageToRemote.DeviceSendFeatureReport)
  return target;
}

size_t CHIDMessageToRemote_DeviceSendFeatureReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CHIDMessageToRemote.DeviceSendFeatureReport)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional uint32 device = 1;
    if (has_device()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->device());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CHIDMessageToRemote_DeviceSendFeatureReport::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CHIDMessageToRemote.DeviceSendFeatureReport)
  GOOGLE_DCHECK_NE(&from, this);
  const CHIDMessageToRemote_DeviceSendFeatureReport* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CHIDMessageToRemote_DeviceSendFeatureReport>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CHIDMessageToRemote.DeviceSendFeatureReport)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CHIDMessageToRemote.DeviceSendFeatureReport)
    MergeFrom(*source);
  }
}

void CHIDMessageToRemote_DeviceSendFeatureReport::MergeFrom(const CHIDMessageToRemote_DeviceSendFeatureReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CHIDMessageToRemote.DeviceSendFeatureReport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000002u) {
      device_ = from.device_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CHIDMessageToRemote_DeviceSendFeatureReport::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CHIDMessageToRemote.DeviceSendFeatureReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CHIDMessageToRemote_DeviceSendFeatureReport::CopyFrom(const CHIDMessageToRemote_DeviceSendFeatureReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CHIDMessageToRemote.DeviceSendFeatureReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHIDMessageToRemote_DeviceSendFeatureReport::IsInitialized() const {
  return true;
}

void CHIDMessageToRemote_DeviceSendFeatureReport::Swap(CHIDMessageToRemote_DeviceSendFeatureReport* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CHIDMessageToRemote_DeviceSendFeatureReport::InternalSwap(CHIDMessageToRemote_DeviceSendFeatureReport* other) {
  data_.Swap(&other->data_);
  std::swap(device_, other->device_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CHIDMessageToRemote_DeviceSendFeatureReport::GetMetadata() const {
  protobuf_steammessages_5fhiddevices_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fhiddevices_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CHIDMessageToRemote_DeviceSendFeatureReport

// optional uint32 device = 1;
bool CHIDMessageToRemote_DeviceSendFeatureReport::has_device() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CHIDMessageToRemote_DeviceSendFeatureReport::set_has_device() {
  _has_bits_[0] |= 0x00000002u;
}
void CHIDMessageToRemote_DeviceSendFeatureReport::clear_has_device() {
  _has_bits_[0] &= ~0x00000002u;
}
void CHIDMessageToRemote_DeviceSendFeatureReport::clear_device() {
  device_ = 0u;
  clear_has_device();
}
::google::protobuf::uint32 CHIDMessageToRemote_DeviceSendFeatureReport::device() const {
  // @@protoc_insertion_point(field_get:proto.steam.CHIDMessageToRemote.DeviceSendFeatureReport.device)
  return device_;
}
void CHIDMessageToRemote_DeviceSendFeatureReport::set_device(::google::protobuf::uint32 value) {
  set_has_device();
  device_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CHIDMessageToRemote.DeviceSendFeatureReport.device)
}

// optional bytes data = 2;
bool CHIDMessageToRemote_DeviceSendFeatureReport::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CHIDMessageToRemote_DeviceSendFeatureReport::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
void CHIDMessageToRemote_DeviceSendFeatureReport::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void CHIDMessageToRemote_DeviceSendFeatureReport::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
const ::std::string& CHIDMessageToRemote_DeviceSendFeatureReport::data() const {
  // @@protoc_insertion_point(field_get:proto.steam.CHIDMessageToRemote.DeviceSendFeatureReport.data)
  return data_.GetNoArena();
}
void CHIDMessageToRemote_DeviceSendFeatureReport::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CHIDMessageToRemote.DeviceSendFeatureReport.data)
}
#if LANG_CXX11
void CHIDMessageToRemote_DeviceSendFeatureReport::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CHIDMessageToRemote.DeviceSendFeatureReport.data)
}
#endif
void CHIDMessageToRemote_DeviceSendFeatureReport::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CHIDMessageToRemote.DeviceSendFeatureReport.data)
}
void CHIDMessageToRemote_DeviceSendFeatureReport::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CHIDMessageToRemote.DeviceSendFeatureReport.data)
}
::std::string* CHIDMessageToRemote_DeviceSendFeatureReport::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:proto.steam.CHIDMessageToRemote.DeviceSendFeatureReport.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CHIDMessageToRemote_DeviceSendFeatureReport::release_data() {
  // @@protoc_insertion_point(field_release:proto.steam.CHIDMessageToRemote.DeviceSendFeatureReport.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CHIDMessageToRemote_DeviceSendFeatureReport::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CHIDMessageToRemote.DeviceSendFeatureReport.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CHIDMessageToRemote_DeviceGetFeatureReport::kDeviceFieldNumber;
const int CHIDMessageToRemote_DeviceGetFeatureReport::kReportNumberFieldNumber;
const int CHIDMessageToRemote_DeviceGetFeatureReport::kLengthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CHIDMessageToRemote_DeviceGetFeatureReport::CHIDMessageToRemote_DeviceGetFeatureReport()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fhiddevices_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CHIDMessageToRemote.DeviceGetFeatureReport)
}
CHIDMessageToRemote_DeviceGetFeatureReport::CHIDMessageToRemote_DeviceGetFeatureReport(const CHIDMessageToRemote_DeviceGetFeatureReport& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  report_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_report_number()) {
    report_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.report_number_);
  }
  ::memcpy(&device_, &from.device_,
    reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&device_) + sizeof(length_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CHIDMessageToRemote.DeviceGetFeatureReport)
}

void CHIDMessageToRemote_DeviceGetFeatureReport::SharedCtor() {
  _cached_size_ = 0;
  report_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&device_, 0, reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&device_) + sizeof(length_));
}

CHIDMessageToRemote_DeviceGetFeatureReport::~CHIDMessageToRemote_DeviceGetFeatureReport() {
  // @@protoc_insertion_point(destructor:proto.steam.CHIDMessageToRemote.DeviceGetFeatureReport)
  SharedDtor();
}

void CHIDMessageToRemote_DeviceGetFeatureReport::SharedDtor() {
  report_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CHIDMessageToRemote_DeviceGetFeatureReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CHIDMessageToRemote_DeviceGetFeatureReport::descriptor() {
  protobuf_steammessages_5fhiddevices_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fhiddevices_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CHIDMessageToRemote_DeviceGetFeatureReport& CHIDMessageToRemote_DeviceGetFeatureReport::default_instance() {
  protobuf_steammessages_5fhiddevices_2eproto::InitDefaults();
  return *internal_default_instance();
}

CHIDMessageToRemote_DeviceGetFeatureReport* CHIDMessageToRemote_DeviceGetFeatureReport::New(::google::protobuf::Arena* arena) const {
  CHIDMessageToRemote_DeviceGetFeatureReport* n = new CHIDMessageToRemote_DeviceGetFeatureReport;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CHIDMessageToRemote_DeviceGetFeatureReport::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CHIDMessageToRemote.DeviceGetFeatureReport)
  if (has_report_number()) {
    GOOGLE_DCHECK(!report_number_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*report_number_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&device_, 0, reinterpret_cast<char*>(&length_) -
      reinterpret_cast<char*>(&device_) + sizeof(length_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CHIDMessageToRemote_DeviceGetFeatureReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CHIDMessageToRemote.DeviceGetFeatureReport)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 device = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_device();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &device_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes report_number = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_report_number()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 length = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CHIDMessageToRemote.DeviceGetFeatureReport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CHIDMessageToRemote.DeviceGetFeatureReport)
  return false;
#undef DO_
}

void CHIDMessageToRemote_DeviceGetFeatureReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CHIDMessageToRemote.DeviceGetFeatureReport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 device = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->device(), output);
  }

  // optional bytes report_number = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->report_number(), output);
  }

  // optional uint32 length = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->length(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CHIDMessageToRemote.DeviceGetFeatureReport)
}

::google::protobuf::uint8* CHIDMessageToRemote_DeviceGetFeatureReport::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CHIDMessageToRemote.DeviceGetFeatureReport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 device = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->device(), target);
  }

  // optional bytes report_number = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->report_number(), target);
  }

  // optional uint32 length = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->length(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CHIDMessageToRemote.DeviceGetFeatureReport)
  return target;
}

size_t CHIDMessageToRemote_DeviceGetFeatureReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CHIDMessageToRemote.DeviceGetFeatureReport)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional bytes report_number = 2;
    if (has_report_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->report_number());
    }

    // optional uint32 device = 1;
    if (has_device()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->device());
    }

    // optional uint32 length = 3;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->length());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CHIDMessageToRemote_DeviceGetFeatureReport::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CHIDMessageToRemote.DeviceGetFeatureReport)
  GOOGLE_DCHECK_NE(&from, this);
  const CHIDMessageToRemote_DeviceGetFeatureReport* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CHIDMessageToRemote_DeviceGetFeatureReport>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CHIDMessageToRemote.DeviceGetFeatureReport)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CHIDMessageToRemote.DeviceGetFeatureReport)
    MergeFrom(*source);
  }
}

void CHIDMessageToRemote_DeviceGetFeatureReport::MergeFrom(const CHIDMessageToRemote_DeviceGetFeatureReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CHIDMessageToRemote.DeviceGetFeatureReport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_report_number();
      report_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.report_number_);
    }
    if (cached_has_bits & 0x00000002u) {
      device_ = from.device_;
    }
    if (cached_has_bits & 0x00000004u) {
      length_ = from.length_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CHIDMessageToRemote_DeviceGetFeatureReport::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CHIDMessageToRemote.DeviceGetFeatureReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CHIDMessageToRemote_DeviceGetFeatureReport::CopyFrom(const CHIDMessageToRemote_DeviceGetFeatureReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CHIDMessageToRemote.DeviceGetFeatureReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHIDMessageToRemote_DeviceGetFeatureReport::IsInitialized() const {
  return true;
}

void CHIDMessageToRemote_DeviceGetFeatureReport::Swap(CHIDMessageToRemote_DeviceGetFeatureReport* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CHIDMessageToRemote_DeviceGetFeatureReport::InternalSwap(CHIDMessageToRemote_DeviceGetFeatureReport* other) {
  report_number_.Swap(&other->report_number_);
  std::swap(device_, other->device_);
  std::swap(length_, other->length_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CHIDMessageToRemote_DeviceGetFeatureReport::GetMetadata() const {
  protobuf_steammessages_5fhiddevices_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fhiddevices_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CHIDMessageToRemote_DeviceGetFeatureReport

// optional uint32 device = 1;
bool CHIDMessageToRemote_DeviceGetFeatureReport::has_device() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CHIDMessageToRemote_DeviceGetFeatureReport::set_has_device() {
  _has_bits_[0] |= 0x00000002u;
}
void CHIDMessageToRemote_DeviceGetFeatureReport::clear_has_device() {
  _has_bits_[0] &= ~0x00000002u;
}
void CHIDMessageToRemote_DeviceGetFeatureReport::clear_device() {
  device_ = 0u;
  clear_has_device();
}
::google::protobuf::uint32 CHIDMessageToRemote_DeviceGetFeatureReport::device() const {
  // @@protoc_insertion_point(field_get:proto.steam.CHIDMessageToRemote.DeviceGetFeatureReport.device)
  return device_;
}
void CHIDMessageToRemote_DeviceGetFeatureReport::set_device(::google::protobuf::uint32 value) {
  set_has_device();
  device_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CHIDMessageToRemote.DeviceGetFeatureReport.device)
}

// optional bytes report_number = 2;
bool CHIDMessageToRemote_DeviceGetFeatureReport::has_report_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CHIDMessageToRemote_DeviceGetFeatureReport::set_has_report_number() {
  _has_bits_[0] |= 0x00000001u;
}
void CHIDMessageToRemote_DeviceGetFeatureReport::clear_has_report_number() {
  _has_bits_[0] &= ~0x00000001u;
}
void CHIDMessageToRemote_DeviceGetFeatureReport::clear_report_number() {
  report_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_report_number();
}
const ::std::string& CHIDMessageToRemote_DeviceGetFeatureReport::report_number() const {
  // @@protoc_insertion_point(field_get:proto.steam.CHIDMessageToRemote.DeviceGetFeatureReport.report_number)
  return report_number_.GetNoArena();
}
void CHIDMessageToRemote_DeviceGetFeatureReport::set_report_number(const ::std::string& value) {
  set_has_report_number();
  report_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CHIDMessageToRemote.DeviceGetFeatureReport.report_number)
}
#if LANG_CXX11
void CHIDMessageToRemote_DeviceGetFeatureReport::set_report_number(::std::string&& value) {
  set_has_report_number();
  report_number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CHIDMessageToRemote.DeviceGetFeatureReport.report_number)
}
#endif
void CHIDMessageToRemote_DeviceGetFeatureReport::set_report_number(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_report_number();
  report_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CHIDMessageToRemote.DeviceGetFeatureReport.report_number)
}
void CHIDMessageToRemote_DeviceGetFeatureReport::set_report_number(const void* value, size_t size) {
  set_has_report_number();
  report_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CHIDMessageToRemote.DeviceGetFeatureReport.report_number)
}
::std::string* CHIDMessageToRemote_DeviceGetFeatureReport::mutable_report_number() {
  set_has_report_number();
  // @@protoc_insertion_point(field_mutable:proto.steam.CHIDMessageToRemote.DeviceGetFeatureReport.report_number)
  return report_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CHIDMessageToRemote_DeviceGetFeatureReport::release_report_number() {
  // @@protoc_insertion_point(field_release:proto.steam.CHIDMessageToRemote.DeviceGetFeatureReport.report_number)
  clear_has_report_number();
  return report_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CHIDMessageToRemote_DeviceGetFeatureReport::set_allocated_report_number(::std::string* report_number) {
  if (report_number != NULL) {
    set_has_report_number();
  } else {
    clear_has_report_number();
  }
  report_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), report_number);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CHIDMessageToRemote.DeviceGetFeatureReport.report_number)
}

// optional uint32 length = 3;
bool CHIDMessageToRemote_DeviceGetFeatureReport::has_length() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CHIDMessageToRemote_DeviceGetFeatureReport::set_has_length() {
  _has_bits_[0] |= 0x00000004u;
}
void CHIDMessageToRemote_DeviceGetFeatureReport::clear_has_length() {
  _has_bits_[0] &= ~0x00000004u;
}
void CHIDMessageToRemote_DeviceGetFeatureReport::clear_length() {
  length_ = 0u;
  clear_has_length();
}
::google::protobuf::uint32 CHIDMessageToRemote_DeviceGetFeatureReport::length() const {
  // @@protoc_insertion_point(field_get:proto.steam.CHIDMessageToRemote.DeviceGetFeatureReport.length)
  return length_;
}
void CHIDMessageToRemote_DeviceGetFeatureReport::set_length(::google::protobuf::uint32 value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CHIDMessageToRemote.DeviceGetFeatureReport.length)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CHIDMessageToRemote_DeviceGetVendorString::kDeviceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CHIDMessageToRemote_DeviceGetVendorString::CHIDMessageToRemote_DeviceGetVendorString()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fhiddevices_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CHIDMessageToRemote.DeviceGetVendorString)
}
CHIDMessageToRemote_DeviceGetVendorString::CHIDMessageToRemote_DeviceGetVendorString(const CHIDMessageToRemote_DeviceGetVendorString& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  device_ = from.device_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CHIDMessageToRemote.DeviceGetVendorString)
}

void CHIDMessageToRemote_DeviceGetVendorString::SharedCtor() {
  _cached_size_ = 0;
  device_ = 0u;
}

CHIDMessageToRemote_DeviceGetVendorString::~CHIDMessageToRemote_DeviceGetVendorString() {
  // @@protoc_insertion_point(destructor:proto.steam.CHIDMessageToRemote.DeviceGetVendorString)
  SharedDtor();
}

void CHIDMessageToRemote_DeviceGetVendorString::SharedDtor() {
}

void CHIDMessageToRemote_DeviceGetVendorString::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CHIDMessageToRemote_DeviceGetVendorString::descriptor() {
  protobuf_steammessages_5fhiddevices_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fhiddevices_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CHIDMessageToRemote_DeviceGetVendorString& CHIDMessageToRemote_DeviceGetVendorString::default_instance() {
  protobuf_steammessages_5fhiddevices_2eproto::InitDefaults();
  return *internal_default_instance();
}

CHIDMessageToRemote_DeviceGetVendorString* CHIDMessageToRemote_DeviceGetVendorString::New(::google::protobuf::Arena* arena) const {
  CHIDMessageToRemote_DeviceGetVendorString* n = new CHIDMessageToRemote_DeviceGetVendorString;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CHIDMessageToRemote_DeviceGetVendorString::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CHIDMessageToRemote.DeviceGetVendorString)
  device_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CHIDMessageToRemote_DeviceGetVendorString::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CHIDMessageToRemote.DeviceGetVendorString)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 device = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_device();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &device_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CHIDMessageToRemote.DeviceGetVendorString)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CHIDMessageToRemote.DeviceGetVendorString)
  return false;
#undef DO_
}

void CHIDMessageToRemote_DeviceGetVendorString::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CHIDMessageToRemote.DeviceGetVendorString)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 device = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->device(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CHIDMessageToRemote.DeviceGetVendorString)
}

::google::protobuf::uint8* CHIDMessageToRemote_DeviceGetVendorString::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CHIDMessageToRemote.DeviceGetVendorString)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 device = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->device(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CHIDMessageToRemote.DeviceGetVendorString)
  return target;
}

size_t CHIDMessageToRemote_DeviceGetVendorString::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CHIDMessageToRemote.DeviceGetVendorString)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 device = 1;
  if (has_device()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->device());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CHIDMessageToRemote_DeviceGetVendorString::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CHIDMessageToRemote.DeviceGetVendorString)
  GOOGLE_DCHECK_NE(&from, this);
  const CHIDMessageToRemote_DeviceGetVendorString* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CHIDMessageToRemote_DeviceGetVendorString>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CHIDMessageToRemote.DeviceGetVendorString)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CHIDMessageToRemote.DeviceGetVendorString)
    MergeFrom(*source);
  }
}

void CHIDMessageToRemote_DeviceGetVendorString::MergeFrom(const CHIDMessageToRemote_DeviceGetVendorString& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CHIDMessageToRemote.DeviceGetVendorString)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_device()) {
    set_device(from.device());
  }
}

void CHIDMessageToRemote_DeviceGetVendorString::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CHIDMessageToRemote.DeviceGetVendorString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CHIDMessageToRemote_DeviceGetVendorString::CopyFrom(const CHIDMessageToRemote_DeviceGetVendorString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CHIDMessageToRemote.DeviceGetVendorString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHIDMessageToRemote_DeviceGetVendorString::IsInitialized() const {
  return true;
}

void CHIDMessageToRemote_DeviceGetVendorString::Swap(CHIDMessageToRemote_DeviceGetVendorString* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CHIDMessageToRemote_DeviceGetVendorString::InternalSwap(CHIDMessageToRemote_DeviceGetVendorString* other) {
  std::swap(device_, other->device_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CHIDMessageToRemote_DeviceGetVendorString::GetMetadata() const {
  protobuf_steammessages_5fhiddevices_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fhiddevices_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CHIDMessageToRemote_DeviceGetVendorString

// optional uint32 device = 1;
bool CHIDMessageToRemote_DeviceGetVendorString::has_device() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CHIDMessageToRemote_DeviceGetVendorString::set_has_device() {
  _has_bits_[0] |= 0x00000001u;
}
void CHIDMessageToRemote_DeviceGetVendorString::clear_has_device() {
  _has_bits_[0] &= ~0x00000001u;
}
void CHIDMessageToRemote_DeviceGetVendorString::clear_device() {
  device_ = 0u;
  clear_has_device();
}
::google::protobuf::uint32 CHIDMessageToRemote_DeviceGetVendorString::device() const {
  // @@protoc_insertion_point(field_get:proto.steam.CHIDMessageToRemote.DeviceGetVendorString.device)
  return device_;
}
void CHIDMessageToRemote_DeviceGetVendorString::set_device(::google::protobuf::uint32 value) {
  set_has_device();
  device_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CHIDMessageToRemote.DeviceGetVendorString.device)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CHIDMessageToRemote_DeviceGetProductString::kDeviceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CHIDMessageToRemote_DeviceGetProductString::CHIDMessageToRemote_DeviceGetProductString()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fhiddevices_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CHIDMessageToRemote.DeviceGetProductString)
}
CHIDMessageToRemote_DeviceGetProductString::CHIDMessageToRemote_DeviceGetProductString(const CHIDMessageToRemote_DeviceGetProductString& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  device_ = from.device_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CHIDMessageToRemote.DeviceGetProductString)
}

void CHIDMessageToRemote_DeviceGetProductString::SharedCtor() {
  _cached_size_ = 0;
  device_ = 0u;
}

CHIDMessageToRemote_DeviceGetProductString::~CHIDMessageToRemote_DeviceGetProductString() {
  // @@protoc_insertion_point(destructor:proto.steam.CHIDMessageToRemote.DeviceGetProductString)
  SharedDtor();
}

void CHIDMessageToRemote_DeviceGetProductString::SharedDtor() {
}

void CHIDMessageToRemote_DeviceGetProductString::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CHIDMessageToRemote_DeviceGetProductString::descriptor() {
  protobuf_steammessages_5fhiddevices_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fhiddevices_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CHIDMessageToRemote_DeviceGetProductString& CHIDMessageToRemote_DeviceGetProductString::default_instance() {
  protobuf_steammessages_5fhiddevices_2eproto::InitDefaults();
  return *internal_default_instance();
}

CHIDMessageToRemote_DeviceGetProductString* CHIDMessageToRemote_DeviceGetProductString::New(::google::protobuf::Arena* arena) const {
  CHIDMessageToRemote_DeviceGetProductString* n = new CHIDMessageToRemote_DeviceGetProductString;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CHIDMessageToRemote_DeviceGetProductString::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CHIDMessageToRemote.DeviceGetProductString)
  device_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CHIDMessageToRemote_DeviceGetProductString::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CHIDMessageToRemote.DeviceGetProductString)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 device = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_device();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &device_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CHIDMessageToRemote.DeviceGetProductString)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CHIDMessageToRemote.DeviceGetProductString)
  return false;
#undef DO_
}

void CHIDMessageToRemote_DeviceGetProductString::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CHIDMessageToRemote.DeviceGetProductString)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 device = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->device(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CHIDMessageToRemote.DeviceGetProductString)
}

::google::protobuf::uint8* CHIDMessageToRemote_DeviceGetProductString::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CHIDMessageToRemote.DeviceGetProductString)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 device = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->device(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CHIDMessageToRemote.DeviceGetProductString)
  return target;
}

size_t CHIDMessageToRemote_DeviceGetProductString::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CHIDMessageToRemote.DeviceGetProductString)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 device = 1;
  if (has_device()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->device());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CHIDMessageToRemote_DeviceGetProductString::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CHIDMessageToRemote.DeviceGetProductString)
  GOOGLE_DCHECK_NE(&from, this);
  const CHIDMessageToRemote_DeviceGetProductString* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CHIDMessageToRemote_DeviceGetProductString>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CHIDMessageToRemote.DeviceGetProductString)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CHIDMessageToRemote.DeviceGetProductString)
    MergeFrom(*source);
  }
}

void CHIDMessageToRemote_DeviceGetProductString::MergeFrom(const CHIDMessageToRemote_DeviceGetProductString& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CHIDMessageToRemote.DeviceGetProductString)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_device()) {
    set_device(from.device());
  }
}

void CHIDMessageToRemote_DeviceGetProductString::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CHIDMessageToRemote.DeviceGetProductString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CHIDMessageToRemote_DeviceGetProductString::CopyFrom(const CHIDMessageToRemote_DeviceGetProductString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CHIDMessageToRemote.DeviceGetProductString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHIDMessageToRemote_DeviceGetProductString::IsInitialized() const {
  return true;
}

void CHIDMessageToRemote_DeviceGetProductString::Swap(CHIDMessageToRemote_DeviceGetProductString* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CHIDMessageToRemote_DeviceGetProductString::InternalSwap(CHIDMessageToRemote_DeviceGetProductString* other) {
  std::swap(device_, other->device_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CHIDMessageToRemote_DeviceGetProductString::GetMetadata() const {
  protobuf_steammessages_5fhiddevices_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fhiddevices_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CHIDMessageToRemote_DeviceGetProductString

// optional uint32 device = 1;
bool CHIDMessageToRemote_DeviceGetProductString::has_device() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CHIDMessageToRemote_DeviceGetProductString::set_has_device() {
  _has_bits_[0] |= 0x00000001u;
}
void CHIDMessageToRemote_DeviceGetProductString::clear_has_device() {
  _has_bits_[0] &= ~0x00000001u;
}
void CHIDMessageToRemote_DeviceGetProductString::clear_device() {
  device_ = 0u;
  clear_has_device();
}
::google::protobuf::uint32 CHIDMessageToRemote_DeviceGetProductString::device() const {
  // @@protoc_insertion_point(field_get:proto.steam.CHIDMessageToRemote.DeviceGetProductString.device)
  return device_;
}
void CHIDMessageToRemote_DeviceGetProductString::set_device(::google::protobuf::uint32 value) {
  set_has_device();
  device_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CHIDMessageToRemote.DeviceGetProductString.device)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CHIDMessageToRemote_DeviceGetSerialNumberString::kDeviceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CHIDMessageToRemote_DeviceGetSerialNumberString::CHIDMessageToRemote_DeviceGetSerialNumberString()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fhiddevices_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CHIDMessageToRemote.DeviceGetSerialNumberString)
}
CHIDMessageToRemote_DeviceGetSerialNumberString::CHIDMessageToRemote_DeviceGetSerialNumberString(const CHIDMessageToRemote_DeviceGetSerialNumberString& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  device_ = from.device_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CHIDMessageToRemote.DeviceGetSerialNumberString)
}

void CHIDMessageToRemote_DeviceGetSerialNumberString::SharedCtor() {
  _cached_size_ = 0;
  device_ = 0u;
}

CHIDMessageToRemote_DeviceGetSerialNumberString::~CHIDMessageToRemote_DeviceGetSerialNumberString() {
  // @@protoc_insertion_point(destructor:proto.steam.CHIDMessageToRemote.DeviceGetSerialNumberString)
  SharedDtor();
}

void CHIDMessageToRemote_DeviceGetSerialNumberString::SharedDtor() {
}

void CHIDMessageToRemote_DeviceGetSerialNumberString::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CHIDMessageToRemote_DeviceGetSerialNumberString::descriptor() {
  protobuf_steammessages_5fhiddevices_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fhiddevices_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CHIDMessageToRemote_DeviceGetSerialNumberString& CHIDMessageToRemote_DeviceGetSerialNumberString::default_instance() {
  protobuf_steammessages_5fhiddevices_2eproto::InitDefaults();
  return *internal_default_instance();
}

CHIDMessageToRemote_DeviceGetSerialNumberString* CHIDMessageToRemote_DeviceGetSerialNumberString::New(::google::protobuf::Arena* arena) const {
  CHIDMessageToRemote_DeviceGetSerialNumberString* n = new CHIDMessageToRemote_DeviceGetSerialNumberString;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CHIDMessageToRemote_DeviceGetSerialNumberString::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CHIDMessageToRemote.DeviceGetSerialNumberString)
  device_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CHIDMessageToRemote_DeviceGetSerialNumberString::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CHIDMessageToRemote.DeviceGetSerialNumberString)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 device = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_device();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &device_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CHIDMessageToRemote.DeviceGetSerialNumberString)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CHIDMessageToRemote.DeviceGetSerialNumberString)
  return false;
#undef DO_
}

void CHIDMessageToRemote_DeviceGetSerialNumberString::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CHIDMessageToRemote.DeviceGetSerialNumberString)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 device = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->device(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CHIDMessageToRemote.DeviceGetSerialNumberString)
}

::google::protobuf::uint8* CHIDMessageToRemote_DeviceGetSerialNumberString::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CHIDMessageToRemote.DeviceGetSerialNumberString)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 device = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->device(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CHIDMessageToRemote.DeviceGetSerialNumberString)
  return target;
}

size_t CHIDMessageToRemote_DeviceGetSerialNumberString::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CHIDMessageToRemote.DeviceGetSerialNumberString)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 device = 1;
  if (has_device()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->device());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CHIDMessageToRemote_DeviceGetSerialNumberString::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CHIDMessageToRemote.DeviceGetSerialNumberString)
  GOOGLE_DCHECK_NE(&from, this);
  const CHIDMessageToRemote_DeviceGetSerialNumberString* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CHIDMessageToRemote_DeviceGetSerialNumberString>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CHIDMessageToRemote.DeviceGetSerialNumberString)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CHIDMessageToRemote.DeviceGetSerialNumberString)
    MergeFrom(*source);
  }
}

void CHIDMessageToRemote_DeviceGetSerialNumberString::MergeFrom(const CHIDMessageToRemote_DeviceGetSerialNumberString& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CHIDMessageToRemote.DeviceGetSerialNumberString)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_device()) {
    set_device(from.device());
  }
}

void CHIDMessageToRemote_DeviceGetSerialNumberString::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CHIDMessageToRemote.DeviceGetSerialNumberString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CHIDMessageToRemote_DeviceGetSerialNumberString::CopyFrom(const CHIDMessageToRemote_DeviceGetSerialNumberString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CHIDMessageToRemote.DeviceGetSerialNumberString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHIDMessageToRemote_DeviceGetSerialNumberString::IsInitialized() const {
  return true;
}

void CHIDMessageToRemote_DeviceGetSerialNumberString::Swap(CHIDMessageToRemote_DeviceGetSerialNumberString* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CHIDMessageToRemote_DeviceGetSerialNumberString::InternalSwap(CHIDMessageToRemote_DeviceGetSerialNumberString* other) {
  std::swap(device_, other->device_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CHIDMessageToRemote_DeviceGetSerialNumberString::GetMetadata() const {
  protobuf_steammessages_5fhiddevices_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fhiddevices_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CHIDMessageToRemote_DeviceGetSerialNumberString

// optional uint32 device = 1;
bool CHIDMessageToRemote_DeviceGetSerialNumberString::has_device() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CHIDMessageToRemote_DeviceGetSerialNumberString::set_has_device() {
  _has_bits_[0] |= 0x00000001u;
}
void CHIDMessageToRemote_DeviceGetSerialNumberString::clear_has_device() {
  _has_bits_[0] &= ~0x00000001u;
}
void CHIDMessageToRemote_DeviceGetSerialNumberString::clear_device() {
  device_ = 0u;
  clear_has_device();
}
::google::protobuf::uint32 CHIDMessageToRemote_DeviceGetSerialNumberString::device() const {
  // @@protoc_insertion_point(field_get:proto.steam.CHIDMessageToRemote.DeviceGetSerialNumberString.device)
  return device_;
}
void CHIDMessageToRemote_DeviceGetSerialNumberString::set_device(::google::protobuf::uint32 value) {
  set_has_device();
  device_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CHIDMessageToRemote.DeviceGetSerialNumberString.device)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CHIDMessageToRemote_DeviceStartInputReports::kDeviceFieldNumber;
const int CHIDMessageToRemote_DeviceStartInputReports::kLengthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CHIDMessageToRemote_DeviceStartInputReports::CHIDMessageToRemote_DeviceStartInputReports()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fhiddevices_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CHIDMessageToRemote.DeviceStartInputReports)
}
CHIDMessageToRemote_DeviceStartInputReports::CHIDMessageToRemote_DeviceStartInputReports(const CHIDMessageToRemote_DeviceStartInputReports& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&device_, &from.device_,
    reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&device_) + sizeof(length_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CHIDMessageToRemote.DeviceStartInputReports)
}

void CHIDMessageToRemote_DeviceStartInputReports::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&device_, 0, reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&device_) + sizeof(length_));
}

CHIDMessageToRemote_DeviceStartInputReports::~CHIDMessageToRemote_DeviceStartInputReports() {
  // @@protoc_insertion_point(destructor:proto.steam.CHIDMessageToRemote.DeviceStartInputReports)
  SharedDtor();
}

void CHIDMessageToRemote_DeviceStartInputReports::SharedDtor() {
}

void CHIDMessageToRemote_DeviceStartInputReports::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CHIDMessageToRemote_DeviceStartInputReports::descriptor() {
  protobuf_steammessages_5fhiddevices_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fhiddevices_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CHIDMessageToRemote_DeviceStartInputReports& CHIDMessageToRemote_DeviceStartInputReports::default_instance() {
  protobuf_steammessages_5fhiddevices_2eproto::InitDefaults();
  return *internal_default_instance();
}

CHIDMessageToRemote_DeviceStartInputReports* CHIDMessageToRemote_DeviceStartInputReports::New(::google::protobuf::Arena* arena) const {
  CHIDMessageToRemote_DeviceStartInputReports* n = new CHIDMessageToRemote_DeviceStartInputReports;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CHIDMessageToRemote_DeviceStartInputReports::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CHIDMessageToRemote.DeviceStartInputReports)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&device_, 0, reinterpret_cast<char*>(&length_) -
      reinterpret_cast<char*>(&device_) + sizeof(length_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CHIDMessageToRemote_DeviceStartInputReports::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CHIDMessageToRemote.DeviceStartInputReports)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 device = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_device();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &device_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 length = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CHIDMessageToRemote.DeviceStartInputReports)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CHIDMessageToRemote.DeviceStartInputReports)
  return false;
#undef DO_
}

void CHIDMessageToRemote_DeviceStartInputReports::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CHIDMessageToRemote.DeviceStartInputReports)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 device = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->device(), output);
  }

  // optional uint32 length = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->length(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CHIDMessageToRemote.DeviceStartInputReports)
}

::google::protobuf::uint8* CHIDMessageToRemote_DeviceStartInputReports::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CHIDMessageToRemote.DeviceStartInputReports)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 device = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->device(), target);
  }

  // optional uint32 length = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->length(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CHIDMessageToRemote.DeviceStartInputReports)
  return target;
}

size_t CHIDMessageToRemote_DeviceStartInputReports::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CHIDMessageToRemote.DeviceStartInputReports)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 device = 1;
    if (has_device()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->device());
    }

    // optional uint32 length = 2;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->length());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CHIDMessageToRemote_DeviceStartInputReports::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CHIDMessageToRemote.DeviceStartInputReports)
  GOOGLE_DCHECK_NE(&from, this);
  const CHIDMessageToRemote_DeviceStartInputReports* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CHIDMessageToRemote_DeviceStartInputReports>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CHIDMessageToRemote.DeviceStartInputReports)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CHIDMessageToRemote.DeviceStartInputReports)
    MergeFrom(*source);
  }
}

void CHIDMessageToRemote_DeviceStartInputReports::MergeFrom(const CHIDMessageToRemote_DeviceStartInputReports& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CHIDMessageToRemote.DeviceStartInputReports)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      device_ = from.device_;
    }
    if (cached_has_bits & 0x00000002u) {
      length_ = from.length_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CHIDMessageToRemote_DeviceStartInputReports::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CHIDMessageToRemote.DeviceStartInputReports)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CHIDMessageToRemote_DeviceStartInputReports::CopyFrom(const CHIDMessageToRemote_DeviceStartInputReports& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CHIDMessageToRemote.DeviceStartInputReports)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHIDMessageToRemote_DeviceStartInputReports::IsInitialized() const {
  return true;
}

void CHIDMessageToRemote_DeviceStartInputReports::Swap(CHIDMessageToRemote_DeviceStartInputReports* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CHIDMessageToRemote_DeviceStartInputReports::InternalSwap(CHIDMessageToRemote_DeviceStartInputReports* other) {
  std::swap(device_, other->device_);
  std::swap(length_, other->length_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CHIDMessageToRemote_DeviceStartInputReports::GetMetadata() const {
  protobuf_steammessages_5fhiddevices_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fhiddevices_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CHIDMessageToRemote_DeviceStartInputReports

// optional uint32 device = 1;
bool CHIDMessageToRemote_DeviceStartInputReports::has_device() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CHIDMessageToRemote_DeviceStartInputReports::set_has_device() {
  _has_bits_[0] |= 0x00000001u;
}
void CHIDMessageToRemote_DeviceStartInputReports::clear_has_device() {
  _has_bits_[0] &= ~0x00000001u;
}
void CHIDMessageToRemote_DeviceStartInputReports::clear_device() {
  device_ = 0u;
  clear_has_device();
}
::google::protobuf::uint32 CHIDMessageToRemote_DeviceStartInputReports::device() const {
  // @@protoc_insertion_point(field_get:proto.steam.CHIDMessageToRemote.DeviceStartInputReports.device)
  return device_;
}
void CHIDMessageToRemote_DeviceStartInputReports::set_device(::google::protobuf::uint32 value) {
  set_has_device();
  device_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CHIDMessageToRemote.DeviceStartInputReports.device)
}

// optional uint32 length = 2;
bool CHIDMessageToRemote_DeviceStartInputReports::has_length() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CHIDMessageToRemote_DeviceStartInputReports::set_has_length() {
  _has_bits_[0] |= 0x00000002u;
}
void CHIDMessageToRemote_DeviceStartInputReports::clear_has_length() {
  _has_bits_[0] &= ~0x00000002u;
}
void CHIDMessageToRemote_DeviceStartInputReports::clear_length() {
  length_ = 0u;
  clear_has_length();
}
::google::protobuf::uint32 CHIDMessageToRemote_DeviceStartInputReports::length() const {
  // @@protoc_insertion_point(field_get:proto.steam.CHIDMessageToRemote.DeviceStartInputReports.length)
  return length_;
}
void CHIDMessageToRemote_DeviceStartInputReports::set_length(::google::protobuf::uint32 value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CHIDMessageToRemote.DeviceStartInputReports.length)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CHIDMessageToRemote_DeviceRequestFullReport::kDeviceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CHIDMessageToRemote_DeviceRequestFullReport::CHIDMessageToRemote_DeviceRequestFullReport()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fhiddevices_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CHIDMessageToRemote.DeviceRequestFullReport)
}
CHIDMessageToRemote_DeviceRequestFullReport::CHIDMessageToRemote_DeviceRequestFullReport(const CHIDMessageToRemote_DeviceRequestFullReport& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  device_ = from.device_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CHIDMessageToRemote.DeviceRequestFullReport)
}

void CHIDMessageToRemote_DeviceRequestFullReport::SharedCtor() {
  _cached_size_ = 0;
  device_ = 0u;
}

CHIDMessageToRemote_DeviceRequestFullReport::~CHIDMessageToRemote_DeviceRequestFullReport() {
  // @@protoc_insertion_point(destructor:proto.steam.CHIDMessageToRemote.DeviceRequestFullReport)
  SharedDtor();
}

void CHIDMessageToRemote_DeviceRequestFullReport::SharedDtor() {
}

void CHIDMessageToRemote_DeviceRequestFullReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CHIDMessageToRemote_DeviceRequestFullReport::descriptor() {
  protobuf_steammessages_5fhiddevices_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fhiddevices_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CHIDMessageToRemote_DeviceRequestFullReport& CHIDMessageToRemote_DeviceRequestFullReport::default_instance() {
  protobuf_steammessages_5fhiddevices_2eproto::InitDefaults();
  return *internal_default_instance();
}

CHIDMessageToRemote_DeviceRequestFullReport* CHIDMessageToRemote_DeviceRequestFullReport::New(::google::protobuf::Arena* arena) const {
  CHIDMessageToRemote_DeviceRequestFullReport* n = new CHIDMessageToRemote_DeviceRequestFullReport;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CHIDMessageToRemote_DeviceRequestFullReport::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CHIDMessageToRemote.DeviceRequestFullReport)
  device_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CHIDMessageToRemote_DeviceRequestFullReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CHIDMessageToRemote.DeviceRequestFullReport)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 device = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_device();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &device_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CHIDMessageToRemote.DeviceRequestFullReport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CHIDMessageToRemote.DeviceRequestFullReport)
  return false;
#undef DO_
}

void CHIDMessageToRemote_DeviceRequestFullReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CHIDMessageToRemote.DeviceRequestFullReport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 device = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->device(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CHIDMessageToRemote.DeviceRequestFullReport)
}

::google::protobuf::uint8* CHIDMessageToRemote_DeviceRequestFullReport::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CHIDMessageToRemote.DeviceRequestFullReport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 device = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->device(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CHIDMessageToRemote.DeviceRequestFullReport)
  return target;
}

size_t CHIDMessageToRemote_DeviceRequestFullReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CHIDMessageToRemote.DeviceRequestFullReport)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 device = 1;
  if (has_device()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->device());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CHIDMessageToRemote_DeviceRequestFullReport::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CHIDMessageToRemote.DeviceRequestFullReport)
  GOOGLE_DCHECK_NE(&from, this);
  const CHIDMessageToRemote_DeviceRequestFullReport* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CHIDMessageToRemote_DeviceRequestFullReport>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CHIDMessageToRemote.DeviceRequestFullReport)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CHIDMessageToRemote.DeviceRequestFullReport)
    MergeFrom(*source);
  }
}

void CHIDMessageToRemote_DeviceRequestFullReport::MergeFrom(const CHIDMessageToRemote_DeviceRequestFullReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CHIDMessageToRemote.DeviceRequestFullReport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_device()) {
    set_device(from.device());
  }
}

void CHIDMessageToRemote_DeviceRequestFullReport::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CHIDMessageToRemote.DeviceRequestFullReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CHIDMessageToRemote_DeviceRequestFullReport::CopyFrom(const CHIDMessageToRemote_DeviceRequestFullReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CHIDMessageToRemote.DeviceRequestFullReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHIDMessageToRemote_DeviceRequestFullReport::IsInitialized() const {
  return true;
}

void CHIDMessageToRemote_DeviceRequestFullReport::Swap(CHIDMessageToRemote_DeviceRequestFullReport* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CHIDMessageToRemote_DeviceRequestFullReport::InternalSwap(CHIDMessageToRemote_DeviceRequestFullReport* other) {
  std::swap(device_, other->device_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CHIDMessageToRemote_DeviceRequestFullReport::GetMetadata() const {
  protobuf_steammessages_5fhiddevices_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fhiddevices_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CHIDMessageToRemote_DeviceRequestFullReport

// optional uint32 device = 1;
bool CHIDMessageToRemote_DeviceRequestFullReport::has_device() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CHIDMessageToRemote_DeviceRequestFullReport::set_has_device() {
  _has_bits_[0] |= 0x00000001u;
}
void CHIDMessageToRemote_DeviceRequestFullReport::clear_has_device() {
  _has_bits_[0] &= ~0x00000001u;
}
void CHIDMessageToRemote_DeviceRequestFullReport::clear_device() {
  device_ = 0u;
  clear_has_device();
}
::google::protobuf::uint32 CHIDMessageToRemote_DeviceRequestFullReport::device() const {
  // @@protoc_insertion_point(field_get:proto.steam.CHIDMessageToRemote.DeviceRequestFullReport.device)
  return device_;
}
void CHIDMessageToRemote_DeviceRequestFullReport::set_device(::google::protobuf::uint32 value) {
  set_has_device();
  device_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CHIDMessageToRemote.DeviceRequestFullReport.device)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CHIDMessageToRemote_DeviceDisconnect::kDeviceFieldNumber;
const int CHIDMessageToRemote_DeviceDisconnect::kDisconnectMethodFieldNumber;
const int CHIDMessageToRemote_DeviceDisconnect::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CHIDMessageToRemote_DeviceDisconnect::CHIDMessageToRemote_DeviceDisconnect()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fhiddevices_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CHIDMessageToRemote.DeviceDisconnect)
}
CHIDMessageToRemote_DeviceDisconnect::CHIDMessageToRemote_DeviceDisconnect(const CHIDMessageToRemote_DeviceDisconnect& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&device_, &from.device_,
    reinterpret_cast<char*>(&disconnectmethod_) -
    reinterpret_cast<char*>(&device_) + sizeof(disconnectmethod_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CHIDMessageToRemote.DeviceDisconnect)
}

void CHIDMessageToRemote_DeviceDisconnect::SharedCtor() {
  _cached_size_ = 0;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&device_, 0, reinterpret_cast<char*>(&disconnectmethod_) -
    reinterpret_cast<char*>(&device_) + sizeof(disconnectmethod_));
}

CHIDMessageToRemote_DeviceDisconnect::~CHIDMessageToRemote_DeviceDisconnect() {
  // @@protoc_insertion_point(destructor:proto.steam.CHIDMessageToRemote.DeviceDisconnect)
  SharedDtor();
}

void CHIDMessageToRemote_DeviceDisconnect::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CHIDMessageToRemote_DeviceDisconnect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CHIDMessageToRemote_DeviceDisconnect::descriptor() {
  protobuf_steammessages_5fhiddevices_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fhiddevices_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CHIDMessageToRemote_DeviceDisconnect& CHIDMessageToRemote_DeviceDisconnect::default_instance() {
  protobuf_steammessages_5fhiddevices_2eproto::InitDefaults();
  return *internal_default_instance();
}

CHIDMessageToRemote_DeviceDisconnect* CHIDMessageToRemote_DeviceDisconnect::New(::google::protobuf::Arena* arena) const {
  CHIDMessageToRemote_DeviceDisconnect* n = new CHIDMessageToRemote_DeviceDisconnect;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CHIDMessageToRemote_DeviceDisconnect::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CHIDMessageToRemote.DeviceDisconnect)
  if (has_data()) {
    GOOGLE_DCHECK(!data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*data_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&device_, 0, reinterpret_cast<char*>(&disconnectmethod_) -
      reinterpret_cast<char*>(&device_) + sizeof(disconnectmethod_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CHIDMessageToRemote_DeviceDisconnect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CHIDMessageToRemote.DeviceDisconnect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 device = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_device();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &device_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.steam.EHIDDeviceDisconnectMethod disconnectMethod = 2 [default = k_EDeviceDisconnectMethodUnknown];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::steam::EHIDDeviceDisconnectMethod_IsValid(value)) {
            set_disconnectmethod(static_cast< ::proto::steam::EHIDDeviceDisconnectMethod >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CHIDMessageToRemote.DeviceDisconnect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CHIDMessageToRemote.DeviceDisconnect)
  return false;
#undef DO_
}

void CHIDMessageToRemote_DeviceDisconnect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CHIDMessageToRemote.DeviceDisconnect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 device = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->device(), output);
  }

  // optional .proto.steam.EHIDDeviceDisconnectMethod disconnectMethod = 2 [default = k_EDeviceDisconnectMethodUnknown];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->disconnectmethod(), output);
  }

  // optional bytes data = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CHIDMessageToRemote.DeviceDisconnect)
}

::google::protobuf::uint8* CHIDMessageToRemote_DeviceDisconnect::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CHIDMessageToRemote.DeviceDisconnect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 device = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->device(), target);
  }

  // optional .proto.steam.EHIDDeviceDisconnectMethod disconnectMethod = 2 [default = k_EDeviceDisconnectMethodUnknown];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->disconnectmethod(), target);
  }

  // optional bytes data = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CHIDMessageToRemote.DeviceDisconnect)
  return target;
}

size_t CHIDMessageToRemote_DeviceDisconnect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CHIDMessageToRemote.DeviceDisconnect)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional bytes data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional uint32 device = 1;
    if (has_device()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->device());
    }

    // optional .proto.steam.EHIDDeviceDisconnectMethod disconnectMethod = 2 [default = k_EDeviceDisconnectMethodUnknown];
    if (has_disconnectmethod()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->disconnectmethod());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CHIDMessageToRemote_DeviceDisconnect::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CHIDMessageToRemote.DeviceDisconnect)
  GOOGLE_DCHECK_NE(&from, this);
  const CHIDMessageToRemote_DeviceDisconnect* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CHIDMessageToRemote_DeviceDisconnect>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CHIDMessageToRemote.DeviceDisconnect)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CHIDMessageToRemote.DeviceDisconnect)
    MergeFrom(*source);
  }
}

void CHIDMessageToRemote_DeviceDisconnect::MergeFrom(const CHIDMessageToRemote_DeviceDisconnect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CHIDMessageToRemote.DeviceDisconnect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000002u) {
      device_ = from.device_;
    }
    if (cached_has_bits & 0x00000004u) {
      disconnectmethod_ = from.disconnectmethod_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CHIDMessageToRemote_DeviceDisconnect::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CHIDMessageToRemote.DeviceDisconnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CHIDMessageToRemote_DeviceDisconnect::CopyFrom(const CHIDMessageToRemote_DeviceDisconnect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CHIDMessageToRemote.DeviceDisconnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHIDMessageToRemote_DeviceDisconnect::IsInitialized() const {
  return true;
}

void CHIDMessageToRemote_DeviceDisconnect::Swap(CHIDMessageToRemote_DeviceDisconnect* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CHIDMessageToRemote_DeviceDisconnect::InternalSwap(CHIDMessageToRemote_DeviceDisconnect* other) {
  data_.Swap(&other->data_);
  std::swap(device_, other->device_);
  std::swap(disconnectmethod_, other->disconnectmethod_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CHIDMessageToRemote_DeviceDisconnect::GetMetadata() const {
  protobuf_steammessages_5fhiddevices_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fhiddevices_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CHIDMessageToRemote_DeviceDisconnect

// optional uint32 device = 1;
bool CHIDMessageToRemote_DeviceDisconnect::has_device() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CHIDMessageToRemote_DeviceDisconnect::set_has_device() {
  _has_bits_[0] |= 0x00000002u;
}
void CHIDMessageToRemote_DeviceDisconnect::clear_has_device() {
  _has_bits_[0] &= ~0x00000002u;
}
void CHIDMessageToRemote_DeviceDisconnect::clear_device() {
  device_ = 0u;
  clear_has_device();
}
::google::protobuf::uint32 CHIDMessageToRemote_DeviceDisconnect::device() const {
  // @@protoc_insertion_point(field_get:proto.steam.CHIDMessageToRemote.DeviceDisconnect.device)
  return device_;
}
void CHIDMessageToRemote_DeviceDisconnect::set_device(::google::protobuf::uint32 value) {
  set_has_device();
  device_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CHIDMessageToRemote.DeviceDisconnect.device)
}

// optional .proto.steam.EHIDDeviceDisconnectMethod disconnectMethod = 2 [default = k_EDeviceDisconnectMethodUnknown];
bool CHIDMessageToRemote_DeviceDisconnect::has_disconnectmethod() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CHIDMessageToRemote_DeviceDisconnect::set_has_disconnectmethod() {
  _has_bits_[0] |= 0x00000004u;
}
void CHIDMessageToRemote_DeviceDisconnect::clear_has_disconnectmethod() {
  _has_bits_[0] &= ~0x00000004u;
}
void CHIDMessageToRemote_DeviceDisconnect::clear_disconnectmethod() {
  disconnectmethod_ = 0;
  clear_has_disconnectmethod();
}
::proto::steam::EHIDDeviceDisconnectMethod CHIDMessageToRemote_DeviceDisconnect::disconnectmethod() const {
  // @@protoc_insertion_point(field_get:proto.steam.CHIDMessageToRemote.DeviceDisconnect.disconnectMethod)
  return static_cast< ::proto::steam::EHIDDeviceDisconnectMethod >(disconnectmethod_);
}
void CHIDMessageToRemote_DeviceDisconnect::set_disconnectmethod(::proto::steam::EHIDDeviceDisconnectMethod value) {
  assert(::proto::steam::EHIDDeviceDisconnectMethod_IsValid(value));
  set_has_disconnectmethod();
  disconnectmethod_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CHIDMessageToRemote.DeviceDisconnect.disconnectMethod)
}

// optional bytes data = 3;
bool CHIDMessageToRemote_DeviceDisconnect::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CHIDMessageToRemote_DeviceDisconnect::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
void CHIDMessageToRemote_DeviceDisconnect::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void CHIDMessageToRemote_DeviceDisconnect::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
const ::std::string& CHIDMessageToRemote_DeviceDisconnect::data() const {
  // @@protoc_insertion_point(field_get:proto.steam.CHIDMessageToRemote.DeviceDisconnect.data)
  return data_.GetNoArena();
}
void CHIDMessageToRemote_DeviceDisconnect::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CHIDMessageToRemote.DeviceDisconnect.data)
}
#if LANG_CXX11
void CHIDMessageToRemote_DeviceDisconnect::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CHIDMessageToRemote.DeviceDisconnect.data)
}
#endif
void CHIDMessageToRemote_DeviceDisconnect::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CHIDMessageToRemote.DeviceDisconnect.data)
}
void CHIDMessageToRemote_DeviceDisconnect::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CHIDMessageToRemote.DeviceDisconnect.data)
}
::std::string* CHIDMessageToRemote_DeviceDisconnect::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:proto.steam.CHIDMessageToRemote.DeviceDisconnect.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CHIDMessageToRemote_DeviceDisconnect::release_data() {
  // @@protoc_insertion_point(field_release:proto.steam.CHIDMessageToRemote.DeviceDisconnect.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CHIDMessageToRemote_DeviceDisconnect::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CHIDMessageToRemote.DeviceDisconnect.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CHIDMessageToRemote::kRequestIdFieldNumber;
const int CHIDMessageToRemote::kDeviceOpenFieldNumber;
const int CHIDMessageToRemote::kDeviceCloseFieldNumber;
const int CHIDMessageToRemote::kDeviceWriteFieldNumber;
const int CHIDMessageToRemote::kDeviceReadFieldNumber;
const int CHIDMessageToRemote::kDeviceSendFeatureReportFieldNumber;
const int CHIDMessageToRemote::kDeviceGetFeatureReportFieldNumber;
const int CHIDMessageToRemote::kDeviceGetVendorStringFieldNumber;
const int CHIDMessageToRemote::kDeviceGetProductStringFieldNumber;
const int CHIDMessageToRemote::kDeviceGetSerialNumberStringFieldNumber;
const int CHIDMessageToRemote::kDeviceStartInputReportsFieldNumber;
const int CHIDMessageToRemote::kDeviceRequestFullReportFieldNumber;
const int CHIDMessageToRemote::kDeviceDisconnectFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CHIDMessageToRemote::CHIDMessageToRemote()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fhiddevices_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CHIDMessageToRemote)
}
CHIDMessageToRemote::CHIDMessageToRemote(const CHIDMessageToRemote& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_id_ = from.request_id_;
  clear_has_command();
  switch (from.command_case()) {
    case kDeviceOpen: {
      mutable_device_open()->::proto::steam::CHIDMessageToRemote_DeviceOpen::MergeFrom(from.device_open());
      break;
    }
    case kDeviceClose: {
      mutable_device_close()->::proto::steam::CHIDMessageToRemote_DeviceClose::MergeFrom(from.device_close());
      break;
    }
    case kDeviceWrite: {
      mutable_device_write()->::proto::steam::CHIDMessageToRemote_DeviceWrite::MergeFrom(from.device_write());
      break;
    }
    case kDeviceRead: {
      mutable_device_read()->::proto::steam::CHIDMessageToRemote_DeviceRead::MergeFrom(from.device_read());
      break;
    }
    case kDeviceSendFeatureReport: {
      mutable_device_send_feature_report()->::proto::steam::CHIDMessageToRemote_DeviceSendFeatureReport::MergeFrom(from.device_send_feature_report());
      break;
    }
    case kDeviceGetFeatureReport: {
      mutable_device_get_feature_report()->::proto::steam::CHIDMessageToRemote_DeviceGetFeatureReport::MergeFrom(from.device_get_feature_report());
      break;
    }
    case kDeviceGetVendorString: {
      mutable_device_get_vendor_string()->::proto::steam::CHIDMessageToRemote_DeviceGetVendorString::MergeFrom(from.device_get_vendor_string());
      break;
    }
    case kDeviceGetProductString: {
      mutable_device_get_product_string()->::proto::steam::CHIDMessageToRemote_DeviceGetProductString::MergeFrom(from.device_get_product_string());
      break;
    }
    case kDeviceGetSerialNumberString: {
      mutable_device_get_serial_number_string()->::proto::steam::CHIDMessageToRemote_DeviceGetSerialNumberString::MergeFrom(from.device_get_serial_number_string());
      break;
    }
    case kDeviceStartInputReports: {
      mutable_device_start_input_reports()->::proto::steam::CHIDMessageToRemote_DeviceStartInputReports::MergeFrom(from.device_start_input_reports());
      break;
    }
    case kDeviceRequestFullReport: {
      mutable_device_request_full_report()->::proto::steam::CHIDMessageToRemote_DeviceRequestFullReport::MergeFrom(from.device_request_full_report());
      break;
    }
    case kDeviceDisconnect: {
      mutable_device_disconnect()->::proto::steam::CHIDMessageToRemote_DeviceDisconnect::MergeFrom(from.device_disconnect());
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:proto.steam.CHIDMessageToRemote)
}

void CHIDMessageToRemote::SharedCtor() {
  _cached_size_ = 0;
  request_id_ = 0u;
  clear_has_command();
}

CHIDMessageToRemote::~CHIDMessageToRemote() {
  // @@protoc_insertion_point(destructor:proto.steam.CHIDMessageToRemote)
  SharedDtor();
}

void CHIDMessageToRemote::SharedDtor() {
  if (has_command()) {
    clear_command();
  }
}

void CHIDMessageToRemote::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CHIDMessageToRemote::descriptor() {
  protobuf_steammessages_5fhiddevices_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fhiddevices_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CHIDMessageToRemote& CHIDMessageToRemote::default_instance() {
  protobuf_steammessages_5fhiddevices_2eproto::InitDefaults();
  return *internal_default_instance();
}

CHIDMessageToRemote* CHIDMessageToRemote::New(::google::protobuf::Arena* arena) const {
  CHIDMessageToRemote* n = new CHIDMessageToRemote;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CHIDMessageToRemote::clear_command() {
// @@protoc_insertion_point(one_of_clear_start:proto.steam.CHIDMessageToRemote)
  switch (command_case()) {
    case kDeviceOpen: {
      delete command_.device_open_;
      break;
    }
    case kDeviceClose: {
      delete command_.device_close_;
      break;
    }
    case kDeviceWrite: {
      delete command_.device_write_;
      break;
    }
    case kDeviceRead: {
      delete command_.device_read_;
      break;
    }
    case kDeviceSendFeatureReport: {
      delete command_.device_send_feature_report_;
      break;
    }
    case kDeviceGetFeatureReport: {
      delete command_.device_get_feature_report_;
      break;
    }
    case kDeviceGetVendorString: {
      delete command_.device_get_vendor_string_;
      break;
    }
    case kDeviceGetProductString: {
      delete command_.device_get_product_string_;
      break;
    }
    case kDeviceGetSerialNumberString: {
      delete command_.device_get_serial_number_string_;
      break;
    }
    case kDeviceStartInputReports: {
      delete command_.device_start_input_reports_;
      break;
    }
    case kDeviceRequestFullReport: {
      delete command_.device_request_full_report_;
      break;
    }
    case kDeviceDisconnect: {
      delete command_.device_disconnect_;
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = COMMAND_NOT_SET;
}


void CHIDMessageToRemote::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CHIDMessageToRemote)
  request_id_ = 0u;
  clear_command();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CHIDMessageToRemote::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CHIDMessageToRemote)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 request_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_request_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &request_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.steam.CHIDMessageToRemote.DeviceOpen device_open = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_device_open()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.steam.CHIDMessageToRemote.DeviceClose device_close = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_device_close()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.steam.CHIDMessageToRemote.DeviceWrite device_write = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_device_write()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.steam.CHIDMessageToRemote.DeviceRead device_read = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_device_read()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.steam.CHIDMessageToRemote.DeviceSendFeatureReport device_send_feature_report = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_device_send_feature_report()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.steam.CHIDMessageToRemote.DeviceGetFeatureReport device_get_feature_report = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_device_get_feature_report()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.steam.CHIDMessageToRemote.DeviceGetVendorString device_get_vendor_string = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_device_get_vendor_string()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.steam.CHIDMessageToRemote.DeviceGetProductString device_get_product_string = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_device_get_product_string()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.steam.CHIDMessageToRemote.DeviceGetSerialNumberString device_get_serial_number_string = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_device_get_serial_number_string()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.steam.CHIDMessageToRemote.DeviceStartInputReports device_start_input_reports = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_device_start_input_reports()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.steam.CHIDMessageToRemote.DeviceRequestFullReport device_request_full_report = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_device_request_full_report()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.steam.CHIDMessageToRemote.DeviceDisconnect device_disconnect = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_device_disconnect()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CHIDMessageToRemote)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CHIDMessageToRemote)
  return false;
#undef DO_
}

void CHIDMessageToRemote::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CHIDMessageToRemote)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 request_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->request_id(), output);
  }

  switch (command_case()) {
    case kDeviceOpen:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, *command_.device_open_, output);
      break;
    case kDeviceClose:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        3, *command_.device_close_, output);
      break;
    case kDeviceWrite:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        4, *command_.device_write_, output);
      break;
    case kDeviceRead:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        5, *command_.device_read_, output);
      break;
    case kDeviceSendFeatureReport:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        6, *command_.device_send_feature_report_, output);
      break;
    case kDeviceGetFeatureReport:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        7, *command_.device_get_feature_report_, output);
      break;
    case kDeviceGetVendorString:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        8, *command_.device_get_vendor_string_, output);
      break;
    case kDeviceGetProductString:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        9, *command_.device_get_product_string_, output);
      break;
    case kDeviceGetSerialNumberString:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        10, *command_.device_get_serial_number_string_, output);
      break;
    case kDeviceStartInputReports:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        11, *command_.device_start_input_reports_, output);
      break;
    case kDeviceRequestFullReport:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        12, *command_.device_request_full_report_, output);
      break;
    case kDeviceDisconnect:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        13, *command_.device_disconnect_, output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CHIDMessageToRemote)
}

::google::protobuf::uint8* CHIDMessageToRemote::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CHIDMessageToRemote)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 request_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->request_id(), target);
  }

  switch (command_case()) {
    case kDeviceOpen:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          2, *command_.device_open_, deterministic, target);
      break;
    case kDeviceClose:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          3, *command_.device_close_, deterministic, target);
      break;
    case kDeviceWrite:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          4, *command_.device_write_, deterministic, target);
      break;
    case kDeviceRead:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          5, *command_.device_read_, deterministic, target);
      break;
    case kDeviceSendFeatureReport:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          6, *command_.device_send_feature_report_, deterministic, target);
      break;
    case kDeviceGetFeatureReport:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          7, *command_.device_get_feature_report_, deterministic, target);
      break;
    case kDeviceGetVendorString:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          8, *command_.device_get_vendor_string_, deterministic, target);
      break;
    case kDeviceGetProductString:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          9, *command_.device_get_product_string_, deterministic, target);
      break;
    case kDeviceGetSerialNumberString:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          10, *command_.device_get_serial_number_string_, deterministic, target);
      break;
    case kDeviceStartInputReports:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          11, *command_.device_start_input_reports_, deterministic, target);
      break;
    case kDeviceRequestFullReport:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          12, *command_.device_request_full_report_, deterministic, target);
      break;
    case kDeviceDisconnect:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          13, *command_.device_disconnect_, deterministic, target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CHIDMessageToRemote)
  return target;
}

size_t CHIDMessageToRemote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CHIDMessageToRemote)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 request_id = 1;
  if (has_request_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->request_id());
  }

  switch (command_case()) {
    // optional .proto.steam.CHIDMessageToRemote.DeviceOpen device_open = 2;
    case kDeviceOpen: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *command_.device_open_);
      break;
    }
    // optional .proto.steam.CHIDMessageToRemote.DeviceClose device_close = 3;
    case kDeviceClose: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *command_.device_close_);
      break;
    }
    // optional .proto.steam.CHIDMessageToRemote.DeviceWrite device_write = 4;
    case kDeviceWrite: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *command_.device_write_);
      break;
    }
    // optional .proto.steam.CHIDMessageToRemote.DeviceRead device_read = 5;
    case kDeviceRead: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *command_.device_read_);
      break;
    }
    // optional .proto.steam.CHIDMessageToRemote.DeviceSendFeatureReport device_send_feature_report = 6;
    case kDeviceSendFeatureReport: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *command_.device_send_feature_report_);
      break;
    }
    // optional .proto.steam.CHIDMessageToRemote.DeviceGetFeatureReport device_get_feature_report = 7;
    case kDeviceGetFeatureReport: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *command_.device_get_feature_report_);
      break;
    }
    // optional .proto.steam.CHIDMessageToRemote.DeviceGetVendorString device_get_vendor_string = 8;
    case kDeviceGetVendorString: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *command_.device_get_vendor_string_);
      break;
    }
    // optional .proto.steam.CHIDMessageToRemote.DeviceGetProductString device_get_product_string = 9;
    case kDeviceGetProductString: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *command_.device_get_product_string_);
      break;
    }
    // optional .proto.steam.CHIDMessageToRemote.DeviceGetSerialNumberString device_get_serial_number_string = 10;
    case kDeviceGetSerialNumberString: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *command_.device_get_serial_number_string_);
      break;
    }
    // optional .proto.steam.CHIDMessageToRemote.DeviceStartInputReports device_start_input_reports = 11;
    case kDeviceStartInputReports: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *command_.device_start_input_reports_);
      break;
    }
    // optional .proto.steam.CHIDMessageToRemote.DeviceRequestFullReport device_request_full_report = 12;
    case kDeviceRequestFullReport: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *command_.device_request_full_report_);
      break;
    }
    // optional .proto.steam.CHIDMessageToRemote.DeviceDisconnect device_disconnect = 13;
    case kDeviceDisconnect: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *command_.device_disconnect_);
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CHIDMessageToRemote::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CHIDMessageToRemote)
  GOOGLE_DCHECK_NE(&from, this);
  const CHIDMessageToRemote* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CHIDMessageToRemote>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CHIDMessageToRemote)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CHIDMessageToRemote)
    MergeFrom(*source);
  }
}

void CHIDMessageToRemote::MergeFrom(const CHIDMessageToRemote& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CHIDMessageToRemote)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_request_id()) {
    set_request_id(from.request_id());
  }
  switch (from.command_case()) {
    case kDeviceOpen: {
      mutable_device_open()->::proto::steam::CHIDMessageToRemote_DeviceOpen::MergeFrom(from.device_open());
      break;
    }
    case kDeviceClose: {
      mutable_device_close()->::proto::steam::CHIDMessageToRemote_DeviceClose::MergeFrom(from.device_close());
      break;
    }
    case kDeviceWrite: {
      mutable_device_write()->::proto::steam::CHIDMessageToRemote_DeviceWrite::MergeFrom(from.device_write());
      break;
    }
    case kDeviceRead: {
      mutable_device_read()->::proto::steam::CHIDMessageToRemote_DeviceRead::MergeFrom(from.device_read());
      break;
    }
    case kDeviceSendFeatureReport: {
      mutable_device_send_feature_report()->::proto::steam::CHIDMessageToRemote_DeviceSendFeatureReport::MergeFrom(from.device_send_feature_report());
      break;
    }
    case kDeviceGetFeatureReport: {
      mutable_device_get_feature_report()->::proto::steam::CHIDMessageToRemote_DeviceGetFeatureReport::MergeFrom(from.device_get_feature_report());
      break;
    }
    case kDeviceGetVendorString: {
      mutable_device_get_vendor_string()->::proto::steam::CHIDMessageToRemote_DeviceGetVendorString::MergeFrom(from.device_get_vendor_string());
      break;
    }
    case kDeviceGetProductString: {
      mutable_device_get_product_string()->::proto::steam::CHIDMessageToRemote_DeviceGetProductString::MergeFrom(from.device_get_product_string());
      break;
    }
    case kDeviceGetSerialNumberString: {
      mutable_device_get_serial_number_string()->::proto::steam::CHIDMessageToRemote_DeviceGetSerialNumberString::MergeFrom(from.device_get_serial_number_string());
      break;
    }
    case kDeviceStartInputReports: {
      mutable_device_start_input_reports()->::proto::steam::CHIDMessageToRemote_DeviceStartInputReports::MergeFrom(from.device_start_input_reports());
      break;
    }
    case kDeviceRequestFullReport: {
      mutable_device_request_full_report()->::proto::steam::CHIDMessageToRemote_DeviceRequestFullReport::MergeFrom(from.device_request_full_report());
      break;
    }
    case kDeviceDisconnect: {
      mutable_device_disconnect()->::proto::steam::CHIDMessageToRemote_DeviceDisconnect::MergeFrom(from.device_disconnect());
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
}

void CHIDMessageToRemote::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CHIDMessageToRemote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CHIDMessageToRemote::CopyFrom(const CHIDMessageToRemote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CHIDMessageToRemote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHIDMessageToRemote::IsInitialized() const {
  return true;
}

void CHIDMessageToRemote::Swap(CHIDMessageToRemote* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CHIDMessageToRemote::InternalSwap(CHIDMessageToRemote* other) {
  std::swap(request_id_, other->request_id_);
  std::swap(command_, other->command_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CHIDMessageToRemote::GetMetadata() const {
  protobuf_steammessages_5fhiddevices_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fhiddevices_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CHIDMessageToRemote

// optional uint32 request_id = 1;
bool CHIDMessageToRemote::has_request_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CHIDMessageToRemote::set_has_request_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CHIDMessageToRemote::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CHIDMessageToRemote::clear_request_id() {
  request_id_ = 0u;
  clear_has_request_id();
}
::google::protobuf::uint32 CHIDMessageToRemote::request_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CHIDMessageToRemote.request_id)
  return request_id_;
}
void CHIDMessageToRemote::set_request_id(::google::protobuf::uint32 value) {
  set_has_request_id();
  request_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CHIDMessageToRemote.request_id)
}

// optional .proto.steam.CHIDMessageToRemote.DeviceOpen device_open = 2;
bool CHIDMessageToRemote::has_device_open() const {
  return command_case() == kDeviceOpen;
}
void CHIDMessageToRemote::set_has_device_open() {
  _oneof_case_[0] = kDeviceOpen;
}
void CHIDMessageToRemote::clear_device_open() {
  if (has_device_open()) {
    delete command_.device_open_;
    clear_has_command();
  }
}
 const ::proto::steam::CHIDMessageToRemote_DeviceOpen& CHIDMessageToRemote::device_open() const {
  // @@protoc_insertion_point(field_get:proto.steam.CHIDMessageToRemote.device_open)
  return has_device_open()
      ? *command_.device_open_
      : ::proto::steam::CHIDMessageToRemote_DeviceOpen::default_instance();
}
::proto::steam::CHIDMessageToRemote_DeviceOpen* CHIDMessageToRemote::mutable_device_open() {
  if (!has_device_open()) {
    clear_command();
    set_has_device_open();
    command_.device_open_ = new ::proto::steam::CHIDMessageToRemote_DeviceOpen;
  }
  // @@protoc_insertion_point(field_mutable:proto.steam.CHIDMessageToRemote.device_open)
  return command_.device_open_;
}
::proto::steam::CHIDMessageToRemote_DeviceOpen* CHIDMessageToRemote::release_device_open() {
  // @@protoc_insertion_point(field_release:proto.steam.CHIDMessageToRemote.device_open)
  if (has_device_open()) {
    clear_has_command();
    ::proto::steam::CHIDMessageToRemote_DeviceOpen* temp = command_.device_open_;
    command_.device_open_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void CHIDMessageToRemote::set_allocated_device_open(::proto::steam::CHIDMessageToRemote_DeviceOpen* device_open) {
  clear_command();
  if (device_open) {
    set_has_device_open();
    command_.device_open_ = device_open;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CHIDMessageToRemote.device_open)
}

// optional .proto.steam.CHIDMessageToRemote.DeviceClose device_close = 3;
bool CHIDMessageToRemote::has_device_close() const {
  return command_case() == kDeviceClose;
}
void CHIDMessageToRemote::set_has_device_close() {
  _oneof_case_[0] = kDeviceClose;
}
void CHIDMessageToRemote::clear_device_close() {
  if (has_device_close()) {
    delete command_.device_close_;
    clear_has_command();
  }
}
 const ::proto::steam::CHIDMessageToRemote_DeviceClose& CHIDMessageToRemote::device_close() const {
  // @@protoc_insertion_point(field_get:proto.steam.CHIDMessageToRemote.device_close)
  return has_device_close()
      ? *command_.device_close_
      : ::proto::steam::CHIDMessageToRemote_DeviceClose::default_instance();
}
::proto::steam::CHIDMessageToRemote_DeviceClose* CHIDMessageToRemote::mutable_device_close() {
  if (!has_device_close()) {
    clear_command();
    set_has_device_close();
    command_.device_close_ = new ::proto::steam::CHIDMessageToRemote_DeviceClose;
  }
  // @@protoc_insertion_point(field_mutable:proto.steam.CHIDMessageToRemote.device_close)
  return command_.device_close_;
}
::proto::steam::CHIDMessageToRemote_DeviceClose* CHIDMessageToRemote::release_device_close() {
  // @@protoc_insertion_point(field_release:proto.steam.CHIDMessageToRemote.device_close)
  if (has_device_close()) {
    clear_has_command();
    ::proto::steam::CHIDMessageToRemote_DeviceClose* temp = command_.device_close_;
    command_.device_close_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void CHIDMessageToRemote::set_allocated_device_close(::proto::steam::CHIDMessageToRemote_DeviceClose* device_close) {
  clear_command();
  if (device_close) {
    set_has_device_close();
    command_.device_close_ = device_close;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CHIDMessageToRemote.device_close)
}

// optional .proto.steam.CHIDMessageToRemote.DeviceWrite device_write = 4;
bool CHIDMessageToRemote::has_device_write() const {
  return command_case() == kDeviceWrite;
}
void CHIDMessageToRemote::set_has_device_write() {
  _oneof_case_[0] = kDeviceWrite;
}
void CHIDMessageToRemote::clear_device_write() {
  if (has_device_write()) {
    delete command_.device_write_;
    clear_has_command();
  }
}
 const ::proto::steam::CHIDMessageToRemote_DeviceWrite& CHIDMessageToRemote::device_write() const {
  // @@protoc_insertion_point(field_get:proto.steam.CHIDMessageToRemote.device_write)
  return has_device_write()
      ? *command_.device_write_
      : ::proto::steam::CHIDMessageToRemote_DeviceWrite::default_instance();
}
::proto::steam::CHIDMessageToRemote_DeviceWrite* CHIDMessageToRemote::mutable_device_write() {
  if (!has_device_write()) {
    clear_command();
    set_has_device_write();
    command_.device_write_ = new ::proto::steam::CHIDMessageToRemote_DeviceWrite;
  }
  // @@protoc_insertion_point(field_mutable:proto.steam.CHIDMessageToRemote.device_write)
  return command_.device_write_;
}
::proto::steam::CHIDMessageToRemote_DeviceWrite* CHIDMessageToRemote::release_device_write() {
  // @@protoc_insertion_point(field_release:proto.steam.CHIDMessageToRemote.device_write)
  if (has_device_write()) {
    clear_has_command();
    ::proto::steam::CHIDMessageToRemote_DeviceWrite* temp = command_.device_write_;
    command_.device_write_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void CHIDMessageToRemote::set_allocated_device_write(::proto::steam::CHIDMessageToRemote_DeviceWrite* device_write) {
  clear_command();
  if (device_write) {
    set_has_device_write();
    command_.device_write_ = device_write;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CHIDMessageToRemote.device_write)
}

// optional .proto.steam.CHIDMessageToRemote.DeviceRead device_read = 5;
bool CHIDMessageToRemote::has_device_read() const {
  return command_case() == kDeviceRead;
}
void CHIDMessageToRemote::set_has_device_read() {
  _oneof_case_[0] = kDeviceRead;
}
void CHIDMessageToRemote::clear_device_read() {
  if (has_device_read()) {
    delete command_.device_read_;
    clear_has_command();
  }
}
 const ::proto::steam::CHIDMessageToRemote_DeviceRead& CHIDMessageToRemote::device_read() const {
  // @@protoc_insertion_point(field_get:proto.steam.CHIDMessageToRemote.device_read)
  return has_device_read()
      ? *command_.device_read_
      : ::proto::steam::CHIDMessageToRemote_DeviceRead::default_instance();
}
::proto::steam::CHIDMessageToRemote_DeviceRead* CHIDMessageToRemote::mutable_device_read() {
  if (!has_device_read()) {
    clear_command();
    set_has_device_read();
    command_.device_read_ = new ::proto::steam::CHIDMessageToRemote_DeviceRead;
  }
  // @@protoc_insertion_point(field_mutable:proto.steam.CHIDMessageToRemote.device_read)
  return command_.device_read_;
}
::proto::steam::CHIDMessageToRemote_DeviceRead* CHIDMessageToRemote::release_device_read() {
  // @@protoc_insertion_point(field_release:proto.steam.CHIDMessageToRemote.device_read)
  if (has_device_read()) {
    clear_has_command();
    ::proto::steam::CHIDMessageToRemote_DeviceRead* temp = command_.device_read_;
    command_.device_read_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void CHIDMessageToRemote::set_allocated_device_read(::proto::steam::CHIDMessageToRemote_DeviceRead* device_read) {
  clear_command();
  if (device_read) {
    set_has_device_read();
    command_.device_read_ = device_read;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CHIDMessageToRemote.device_read)
}

// optional .proto.steam.CHIDMessageToRemote.DeviceSendFeatureReport device_send_feature_report = 6;
bool CHIDMessageToRemote::has_device_send_feature_report() const {
  return command_case() == kDeviceSendFeatureReport;
}
void CHIDMessageToRemote::set_has_device_send_feature_report() {
  _oneof_case_[0] = kDeviceSendFeatureReport;
}
void CHIDMessageToRemote::clear_device_send_feature_report() {
  if (has_device_send_feature_report()) {
    delete command_.device_send_feature_report_;
    clear_has_command();
  }
}
 const ::proto::steam::CHIDMessageToRemote_DeviceSendFeatureReport& CHIDMessageToRemote::device_send_feature_report() const {
  // @@protoc_insertion_point(field_get:proto.steam.CHIDMessageToRemote.device_send_feature_report)
  return has_device_send_feature_report()
      ? *command_.device_send_feature_report_
      : ::proto::steam::CHIDMessageToRemote_DeviceSendFeatureReport::default_instance();
}
::proto::steam::CHIDMessageToRemote_DeviceSendFeatureReport* CHIDMessageToRemote::mutable_device_send_feature_report() {
  if (!has_device_send_feature_report()) {
    clear_command();
    set_has_device_send_feature_report();
    command_.device_send_feature_report_ = new ::proto::steam::CHIDMessageToRemote_DeviceSendFeatureReport;
  }
  // @@protoc_insertion_point(field_mutable:proto.steam.CHIDMessageToRemote.device_send_feature_report)
  return command_.device_send_feature_report_;
}
::proto::steam::CHIDMessageToRemote_DeviceSendFeatureReport* CHIDMessageToRemote::release_device_send_feature_report() {
  // @@protoc_insertion_point(field_release:proto.steam.CHIDMessageToRemote.device_send_feature_report)
  if (has_device_send_feature_report()) {
    clear_has_command();
    ::proto::steam::CHIDMessageToRemote_DeviceSendFeatureReport* temp = command_.device_send_feature_report_;
    command_.device_send_feature_report_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void CHIDMessageToRemote::set_allocated_device_send_feature_report(::proto::steam::CHIDMessageToRemote_DeviceSendFeatureReport* device_send_feature_report) {
  clear_command();
  if (device_send_feature_report) {
    set_has_device_send_feature_report();
    command_.device_send_feature_report_ = device_send_feature_report;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CHIDMessageToRemote.device_send_feature_report)
}

// optional .proto.steam.CHIDMessageToRemote.DeviceGetFeatureReport device_get_feature_report = 7;
bool CHIDMessageToRemote::has_device_get_feature_report() const {
  return command_case() == kDeviceGetFeatureReport;
}
void CHIDMessageToRemote::set_has_device_get_feature_report() {
  _oneof_case_[0] = kDeviceGetFeatureReport;
}
void CHIDMessageToRemote::clear_device_get_feature_report() {
  if (has_device_get_feature_report()) {
    delete command_.device_get_feature_report_;
    clear_has_command();
  }
}
 const ::proto::steam::CHIDMessageToRemote_DeviceGetFeatureReport& CHIDMessageToRemote::device_get_feature_report() const {
  // @@protoc_insertion_point(field_get:proto.steam.CHIDMessageToRemote.device_get_feature_report)
  return has_device_get_feature_report()
      ? *command_.device_get_feature_report_
      : ::proto::steam::CHIDMessageToRemote_DeviceGetFeatureReport::default_instance();
}
::proto::steam::CHIDMessageToRemote_DeviceGetFeatureReport* CHIDMessageToRemote::mutable_device_get_feature_report() {
  if (!has_device_get_feature_report()) {
    clear_command();
    set_has_device_get_feature_report();
    command_.device_get_feature_report_ = new ::proto::steam::CHIDMessageToRemote_DeviceGetFeatureReport;
  }
  // @@protoc_insertion_point(field_mutable:proto.steam.CHIDMessageToRemote.device_get_feature_report)
  return command_.device_get_feature_report_;
}
::proto::steam::CHIDMessageToRemote_DeviceGetFeatureReport* CHIDMessageToRemote::release_device_get_feature_report() {
  // @@protoc_insertion_point(field_release:proto.steam.CHIDMessageToRemote.device_get_feature_report)
  if (has_device_get_feature_report()) {
    clear_has_command();
    ::proto::steam::CHIDMessageToRemote_DeviceGetFeatureReport* temp = command_.device_get_feature_report_;
    command_.device_get_feature_report_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void CHIDMessageToRemote::set_allocated_device_get_feature_report(::proto::steam::CHIDMessageToRemote_DeviceGetFeatureReport* device_get_feature_report) {
  clear_command();
  if (device_get_feature_report) {
    set_has_device_get_feature_report();
    command_.device_get_feature_report_ = device_get_feature_report;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CHIDMessageToRemote.device_get_feature_report)
}

// optional .proto.steam.CHIDMessageToRemote.DeviceGetVendorString device_get_vendor_string = 8;
bool CHIDMessageToRemote::has_device_get_vendor_string() const {
  return command_case() == kDeviceGetVendorString;
}
void CHIDMessageToRemote::set_has_device_get_vendor_string() {
  _oneof_case_[0] = kDeviceGetVendorString;
}
void CHIDMessageToRemote::clear_device_get_vendor_string() {
  if (has_device_get_vendor_string()) {
    delete command_.device_get_vendor_string_;
    clear_has_command();
  }
}
 const ::proto::steam::CHIDMessageToRemote_DeviceGetVendorString& CHIDMessageToRemote::device_get_vendor_string() const {
  // @@protoc_insertion_point(field_get:proto.steam.CHIDMessageToRemote.device_get_vendor_string)
  return has_device_get_vendor_string()
      ? *command_.device_get_vendor_string_
      : ::proto::steam::CHIDMessageToRemote_DeviceGetVendorString::default_instance();
}
::proto::steam::CHIDMessageToRemote_DeviceGetVendorString* CHIDMessageToRemote::mutable_device_get_vendor_string() {
  if (!has_device_get_vendor_string()) {
    clear_command();
    set_has_device_get_vendor_string();
    command_.device_get_vendor_string_ = new ::proto::steam::CHIDMessageToRemote_DeviceGetVendorString;
  }
  // @@protoc_insertion_point(field_mutable:proto.steam.CHIDMessageToRemote.device_get_vendor_string)
  return command_.device_get_vendor_string_;
}
::proto::steam::CHIDMessageToRemote_DeviceGetVendorString* CHIDMessageToRemote::release_device_get_vendor_string() {
  // @@protoc_insertion_point(field_release:proto.steam.CHIDMessageToRemote.device_get_vendor_string)
  if (has_device_get_vendor_string()) {
    clear_has_command();
    ::proto::steam::CHIDMessageToRemote_DeviceGetVendorString* temp = command_.device_get_vendor_string_;
    command_.device_get_vendor_string_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void CHIDMessageToRemote::set_allocated_device_get_vendor_string(::proto::steam::CHIDMessageToRemote_DeviceGetVendorString* device_get_vendor_string) {
  clear_command();
  if (device_get_vendor_string) {
    set_has_device_get_vendor_string();
    command_.device_get_vendor_string_ = device_get_vendor_string;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CHIDMessageToRemote.device_get_vendor_string)
}

// optional .proto.steam.CHIDMessageToRemote.DeviceGetProductString device_get_product_string = 9;
bool CHIDMessageToRemote::has_device_get_product_string() const {
  return command_case() == kDeviceGetProductString;
}
void CHIDMessageToRemote::set_has_device_get_product_string() {
  _oneof_case_[0] = kDeviceGetProductString;
}
void CHIDMessageToRemote::clear_device_get_product_string() {
  if (has_device_get_product_string()) {
    delete command_.device_get_product_string_;
    clear_has_command();
  }
}
 const ::proto::steam::CHIDMessageToRemote_DeviceGetProductString& CHIDMessageToRemote::device_get_product_string() const {
  // @@protoc_insertion_point(field_get:proto.steam.CHIDMessageToRemote.device_get_product_string)
  return has_device_get_product_string()
      ? *command_.device_get_product_string_
      : ::proto::steam::CHIDMessageToRemote_DeviceGetProductString::default_instance();
}
::proto::steam::CHIDMessageToRemote_DeviceGetProductString* CHIDMessageToRemote::mutable_device_get_product_string() {
  if (!has_device_get_product_string()) {
    clear_command();
    set_has_device_get_product_string();
    command_.device_get_product_string_ = new ::proto::steam::CHIDMessageToRemote_DeviceGetProductString;
  }
  // @@protoc_insertion_point(field_mutable:proto.steam.CHIDMessageToRemote.device_get_product_string)
  return command_.device_get_product_string_;
}
::proto::steam::CHIDMessageToRemote_DeviceGetProductString* CHIDMessageToRemote::release_device_get_product_string() {
  // @@protoc_insertion_point(field_release:proto.steam.CHIDMessageToRemote.device_get_product_string)
  if (has_device_get_product_string()) {
    clear_has_command();
    ::proto::steam::CHIDMessageToRemote_DeviceGetProductString* temp = command_.device_get_product_string_;
    command_.device_get_product_string_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void CHIDMessageToRemote::set_allocated_device_get_product_string(::proto::steam::CHIDMessageToRemote_DeviceGetProductString* device_get_product_string) {
  clear_command();
  if (device_get_product_string) {
    set_has_device_get_product_string();
    command_.device_get_product_string_ = device_get_product_string;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CHIDMessageToRemote.device_get_product_string)
}

// optional .proto.steam.CHIDMessageToRemote.DeviceGetSerialNumberString device_get_serial_number_string = 10;
bool CHIDMessageToRemote::has_device_get_serial_number_string() const {
  return command_case() == kDeviceGetSerialNumberString;
}
void CHIDMessageToRemote::set_has_device_get_serial_number_string() {
  _oneof_case_[0] = kDeviceGetSerialNumberString;
}
void CHIDMessageToRemote::clear_device_get_serial_number_string() {
  if (has_device_get_serial_number_string()) {
    delete command_.device_get_serial_number_string_;
    clear_has_command();
  }
}
 const ::proto::steam::CHIDMessageToRemote_DeviceGetSerialNumberString& CHIDMessageToRemote::device_get_serial_number_string() const {
  // @@protoc_insertion_point(field_get:proto.steam.CHIDMessageToRemote.device_get_serial_number_string)
  return has_device_get_serial_number_string()
      ? *command_.device_get_serial_number_string_
      : ::proto::steam::CHIDMessageToRemote_DeviceGetSerialNumberString::default_instance();
}
::proto::steam::CHIDMessageToRemote_DeviceGetSerialNumberString* CHIDMessageToRemote::mutable_device_get_serial_number_string() {
  if (!has_device_get_serial_number_string()) {
    clear_command();
    set_has_device_get_serial_number_string();
    command_.device_get_serial_number_string_ = new ::proto::steam::CHIDMessageToRemote_DeviceGetSerialNumberString;
  }
  // @@protoc_insertion_point(field_mutable:proto.steam.CHIDMessageToRemote.device_get_serial_number_string)
  return command_.device_get_serial_number_string_;
}
::proto::steam::CHIDMessageToRemote_DeviceGetSerialNumberString* CHIDMessageToRemote::release_device_get_serial_number_string() {
  // @@protoc_insertion_point(field_release:proto.steam.CHIDMessageToRemote.device_get_serial_number_string)
  if (has_device_get_serial_number_string()) {
    clear_has_command();
    ::proto::steam::CHIDMessageToRemote_DeviceGetSerialNumberString* temp = command_.device_get_serial_number_string_;
    command_.device_get_serial_number_string_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void CHIDMessageToRemote::set_allocated_device_get_serial_number_string(::proto::steam::CHIDMessageToRemote_DeviceGetSerialNumberString* device_get_serial_number_string) {
  clear_command();
  if (device_get_serial_number_string) {
    set_has_device_get_serial_number_string();
    command_.device_get_serial_number_string_ = device_get_serial_number_string;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CHIDMessageToRemote.device_get_serial_number_string)
}

// optional .proto.steam.CHIDMessageToRemote.DeviceStartInputReports device_start_input_reports = 11;
bool CHIDMessageToRemote::has_device_start_input_reports() const {
  return command_case() == kDeviceStartInputReports;
}
void CHIDMessageToRemote::set_has_device_start_input_reports() {
  _oneof_case_[0] = kDeviceStartInputReports;
}
void CHIDMessageToRemote::clear_device_start_input_reports() {
  if (has_device_start_input_reports()) {
    delete command_.device_start_input_reports_;
    clear_has_command();
  }
}
 const ::proto::steam::CHIDMessageToRemote_DeviceStartInputReports& CHIDMessageToRemote::device_start_input_reports() const {
  // @@protoc_insertion_point(field_get:proto.steam.CHIDMessageToRemote.device_start_input_reports)
  return has_device_start_input_reports()
      ? *command_.device_start_input_reports_
      : ::proto::steam::CHIDMessageToRemote_DeviceStartInputReports::default_instance();
}
::proto::steam::CHIDMessageToRemote_DeviceStartInputReports* CHIDMessageToRemote::mutable_device_start_input_reports() {
  if (!has_device_start_input_reports()) {
    clear_command();
    set_has_device_start_input_reports();
    command_.device_start_input_reports_ = new ::proto::steam::CHIDMessageToRemote_DeviceStartInputReports;
  }
  // @@protoc_insertion_point(field_mutable:proto.steam.CHIDMessageToRemote.device_start_input_reports)
  return command_.device_start_input_reports_;
}
::proto::steam::CHIDMessageToRemote_DeviceStartInputReports* CHIDMessageToRemote::release_device_start_input_reports() {
  // @@protoc_insertion_point(field_release:proto.steam.CHIDMessageToRemote.device_start_input_reports)
  if (has_device_start_input_reports()) {
    clear_has_command();
    ::proto::steam::CHIDMessageToRemote_DeviceStartInputReports* temp = command_.device_start_input_reports_;
    command_.device_start_input_reports_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void CHIDMessageToRemote::set_allocated_device_start_input_reports(::proto::steam::CHIDMessageToRemote_DeviceStartInputReports* device_start_input_reports) {
  clear_command();
  if (device_start_input_reports) {
    set_has_device_start_input_reports();
    command_.device_start_input_reports_ = device_start_input_reports;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CHIDMessageToRemote.device_start_input_reports)
}

// optional .proto.steam.CHIDMessageToRemote.DeviceRequestFullReport device_request_full_report = 12;
bool CHIDMessageToRemote::has_device_request_full_report() const {
  return command_case() == kDeviceRequestFullReport;
}
void CHIDMessageToRemote::set_has_device_request_full_report() {
  _oneof_case_[0] = kDeviceRequestFullReport;
}
void CHIDMessageToRemote::clear_device_request_full_report() {
  if (has_device_request_full_report()) {
    delete command_.device_request_full_report_;
    clear_has_command();
  }
}
 const ::proto::steam::CHIDMessageToRemote_DeviceRequestFullReport& CHIDMessageToRemote::device_request_full_report() const {
  // @@protoc_insertion_point(field_get:proto.steam.CHIDMessageToRemote.device_request_full_report)
  return has_device_request_full_report()
      ? *command_.device_request_full_report_
      : ::proto::steam::CHIDMessageToRemote_DeviceRequestFullReport::default_instance();
}
::proto::steam::CHIDMessageToRemote_DeviceRequestFullReport* CHIDMessageToRemote::mutable_device_request_full_report() {
  if (!has_device_request_full_report()) {
    clear_command();
    set_has_device_request_full_report();
    command_.device_request_full_report_ = new ::proto::steam::CHIDMessageToRemote_DeviceRequestFullReport;
  }
  // @@protoc_insertion_point(field_mutable:proto.steam.CHIDMessageToRemote.device_request_full_report)
  return command_.device_request_full_report_;
}
::proto::steam::CHIDMessageToRemote_DeviceRequestFullReport* CHIDMessageToRemote::release_device_request_full_report() {
  // @@protoc_insertion_point(field_release:proto.steam.CHIDMessageToRemote.device_request_full_report)
  if (has_device_request_full_report()) {
    clear_has_command();
    ::proto::steam::CHIDMessageToRemote_DeviceRequestFullReport* temp = command_.device_request_full_report_;
    command_.device_request_full_report_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void CHIDMessageToRemote::set_allocated_device_request_full_report(::proto::steam::CHIDMessageToRemote_DeviceRequestFullReport* device_request_full_report) {
  clear_command();
  if (device_request_full_report) {
    set_has_device_request_full_report();
    command_.device_request_full_report_ = device_request_full_report;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CHIDMessageToRemote.device_request_full_report)
}

// optional .proto.steam.CHIDMessageToRemote.DeviceDisconnect device_disconnect = 13;
bool CHIDMessageToRemote::has_device_disconnect() const {
  return command_case() == kDeviceDisconnect;
}
void CHIDMessageToRemote::set_has_device_disconnect() {
  _oneof_case_[0] = kDeviceDisconnect;
}
void CHIDMessageToRemote::clear_device_disconnect() {
  if (has_device_disconnect()) {
    delete command_.device_disconnect_;
    clear_has_command();
  }
}
 const ::proto::steam::CHIDMessageToRemote_DeviceDisconnect& CHIDMessageToRemote::device_disconnect() const {
  // @@protoc_insertion_point(field_get:proto.steam.CHIDMessageToRemote.device_disconnect)
  return has_device_disconnect()
      ? *command_.device_disconnect_
      : ::proto::steam::CHIDMessageToRemote_DeviceDisconnect::default_instance();
}
::proto::steam::CHIDMessageToRemote_DeviceDisconnect* CHIDMessageToRemote::mutable_device_disconnect() {
  if (!has_device_disconnect()) {
    clear_command();
    set_has_device_disconnect();
    command_.device_disconnect_ = new ::proto::steam::CHIDMessageToRemote_DeviceDisconnect;
  }
  // @@protoc_insertion_point(field_mutable:proto.steam.CHIDMessageToRemote.device_disconnect)
  return command_.device_disconnect_;
}
::proto::steam::CHIDMessageToRemote_DeviceDisconnect* CHIDMessageToRemote::release_device_disconnect() {
  // @@protoc_insertion_point(field_release:proto.steam.CHIDMessageToRemote.device_disconnect)
  if (has_device_disconnect()) {
    clear_has_command();
    ::proto::steam::CHIDMessageToRemote_DeviceDisconnect* temp = command_.device_disconnect_;
    command_.device_disconnect_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void CHIDMessageToRemote::set_allocated_device_disconnect(::proto::steam::CHIDMessageToRemote_DeviceDisconnect* device_disconnect) {
  clear_command();
  if (device_disconnect) {
    set_has_device_disconnect();
    command_.device_disconnect_ = device_disconnect;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CHIDMessageToRemote.device_disconnect)
}

bool CHIDMessageToRemote::has_command() const {
  return command_case() != COMMAND_NOT_SET;
}
void CHIDMessageToRemote::clear_has_command() {
  _oneof_case_[0] = COMMAND_NOT_SET;
}
CHIDMessageToRemote::CommandCase CHIDMessageToRemote::command_case() const {
  return CHIDMessageToRemote::CommandCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CHIDMessageFromRemote_UpdateDeviceList::kDevicesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CHIDMessageFromRemote_UpdateDeviceList::CHIDMessageFromRemote_UpdateDeviceList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fhiddevices_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CHIDMessageFromRemote.UpdateDeviceList)
}
CHIDMessageFromRemote_UpdateDeviceList::CHIDMessageFromRemote_UpdateDeviceList(const CHIDMessageFromRemote_UpdateDeviceList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      devices_(from.devices_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CHIDMessageFromRemote.UpdateDeviceList)
}

void CHIDMessageFromRemote_UpdateDeviceList::SharedCtor() {
  _cached_size_ = 0;
}

CHIDMessageFromRemote_UpdateDeviceList::~CHIDMessageFromRemote_UpdateDeviceList() {
  // @@protoc_insertion_point(destructor:proto.steam.CHIDMessageFromRemote.UpdateDeviceList)
  SharedDtor();
}

void CHIDMessageFromRemote_UpdateDeviceList::SharedDtor() {
}

void CHIDMessageFromRemote_UpdateDeviceList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CHIDMessageFromRemote_UpdateDeviceList::descriptor() {
  protobuf_steammessages_5fhiddevices_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fhiddevices_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CHIDMessageFromRemote_UpdateDeviceList& CHIDMessageFromRemote_UpdateDeviceList::default_instance() {
  protobuf_steammessages_5fhiddevices_2eproto::InitDefaults();
  return *internal_default_instance();
}

CHIDMessageFromRemote_UpdateDeviceList* CHIDMessageFromRemote_UpdateDeviceList::New(::google::protobuf::Arena* arena) const {
  CHIDMessageFromRemote_UpdateDeviceList* n = new CHIDMessageFromRemote_UpdateDeviceList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CHIDMessageFromRemote_UpdateDeviceList::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CHIDMessageFromRemote.UpdateDeviceList)
  devices_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CHIDMessageFromRemote_UpdateDeviceList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CHIDMessageFromRemote.UpdateDeviceList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.steam.CHIDDeviceInfo devices = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_devices()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CHIDMessageFromRemote.UpdateDeviceList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CHIDMessageFromRemote.UpdateDeviceList)
  return false;
#undef DO_
}

void CHIDMessageFromRemote_UpdateDeviceList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CHIDMessageFromRemote.UpdateDeviceList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CHIDDeviceInfo devices = 1;
  for (unsigned int i = 0, n = this->devices_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->devices(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CHIDMessageFromRemote.UpdateDeviceList)
}

::google::protobuf::uint8* CHIDMessageFromRemote_UpdateDeviceList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CHIDMessageFromRemote.UpdateDeviceList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CHIDDeviceInfo devices = 1;
  for (unsigned int i = 0, n = this->devices_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->devices(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CHIDMessageFromRemote.UpdateDeviceList)
  return target;
}

size_t CHIDMessageFromRemote_UpdateDeviceList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CHIDMessageFromRemote.UpdateDeviceList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.steam.CHIDDeviceInfo devices = 1;
  {
    unsigned int count = this->devices_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->devices(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CHIDMessageFromRemote_UpdateDeviceList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CHIDMessageFromRemote.UpdateDeviceList)
  GOOGLE_DCHECK_NE(&from, this);
  const CHIDMessageFromRemote_UpdateDeviceList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CHIDMessageFromRemote_UpdateDeviceList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CHIDMessageFromRemote.UpdateDeviceList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CHIDMessageFromRemote.UpdateDeviceList)
    MergeFrom(*source);
  }
}

void CHIDMessageFromRemote_UpdateDeviceList::MergeFrom(const CHIDMessageFromRemote_UpdateDeviceList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CHIDMessageFromRemote.UpdateDeviceList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  devices_.MergeFrom(from.devices_);
}

void CHIDMessageFromRemote_UpdateDeviceList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CHIDMessageFromRemote.UpdateDeviceList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CHIDMessageFromRemote_UpdateDeviceList::CopyFrom(const CHIDMessageFromRemote_UpdateDeviceList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CHIDMessageFromRemote.UpdateDeviceList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHIDMessageFromRemote_UpdateDeviceList::IsInitialized() const {
  return true;
}

void CHIDMessageFromRemote_UpdateDeviceList::Swap(CHIDMessageFromRemote_UpdateDeviceList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CHIDMessageFromRemote_UpdateDeviceList::InternalSwap(CHIDMessageFromRemote_UpdateDeviceList* other) {
  devices_.InternalSwap(&other->devices_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CHIDMessageFromRemote_UpdateDeviceList::GetMetadata() const {
  protobuf_steammessages_5fhiddevices_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fhiddevices_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CHIDMessageFromRemote_UpdateDeviceList

// repeated .proto.steam.CHIDDeviceInfo devices = 1;
int CHIDMessageFromRemote_UpdateDeviceList::devices_size() const {
  return devices_.size();
}
void CHIDMessageFromRemote_UpdateDeviceList::clear_devices() {
  devices_.Clear();
}
const ::proto::steam::CHIDDeviceInfo& CHIDMessageFromRemote_UpdateDeviceList::devices(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CHIDMessageFromRemote.UpdateDeviceList.devices)
  return devices_.Get(index);
}
::proto::steam::CHIDDeviceInfo* CHIDMessageFromRemote_UpdateDeviceList::mutable_devices(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CHIDMessageFromRemote.UpdateDeviceList.devices)
  return devices_.Mutable(index);
}
::proto::steam::CHIDDeviceInfo* CHIDMessageFromRemote_UpdateDeviceList::add_devices() {
  // @@protoc_insertion_point(field_add:proto.steam.CHIDMessageFromRemote.UpdateDeviceList.devices)
  return devices_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::CHIDDeviceInfo >*
CHIDMessageFromRemote_UpdateDeviceList::mutable_devices() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CHIDMessageFromRemote.UpdateDeviceList.devices)
  return &devices_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::CHIDDeviceInfo >&
CHIDMessageFromRemote_UpdateDeviceList::devices() const {
  // @@protoc_insertion_point(field_list:proto.steam.CHIDMessageFromRemote.UpdateDeviceList.devices)
  return devices_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CHIDMessageFromRemote_RequestResponse::kRequestIdFieldNumber;
const int CHIDMessageFromRemote_RequestResponse::kResultFieldNumber;
const int CHIDMessageFromRemote_RequestResponse::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CHIDMessageFromRemote_RequestResponse::CHIDMessageFromRemote_RequestResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fhiddevices_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CHIDMessageFromRemote.RequestResponse)
}
CHIDMessageFromRemote_RequestResponse::CHIDMessageFromRemote_RequestResponse(const CHIDMessageFromRemote_RequestResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&request_id_, &from.request_id_,
    reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&request_id_) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CHIDMessageFromRemote.RequestResponse)
}

void CHIDMessageFromRemote_RequestResponse::SharedCtor() {
  _cached_size_ = 0;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&request_id_, 0, reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&request_id_) + sizeof(result_));
}

CHIDMessageFromRemote_RequestResponse::~CHIDMessageFromRemote_RequestResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CHIDMessageFromRemote.RequestResponse)
  SharedDtor();
}

void CHIDMessageFromRemote_RequestResponse::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CHIDMessageFromRemote_RequestResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CHIDMessageFromRemote_RequestResponse::descriptor() {
  protobuf_steammessages_5fhiddevices_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fhiddevices_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CHIDMessageFromRemote_RequestResponse& CHIDMessageFromRemote_RequestResponse::default_instance() {
  protobuf_steammessages_5fhiddevices_2eproto::InitDefaults();
  return *internal_default_instance();
}

CHIDMessageFromRemote_RequestResponse* CHIDMessageFromRemote_RequestResponse::New(::google::protobuf::Arena* arena) const {
  CHIDMessageFromRemote_RequestResponse* n = new CHIDMessageFromRemote_RequestResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CHIDMessageFromRemote_RequestResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CHIDMessageFromRemote.RequestResponse)
  if (has_data()) {
    GOOGLE_DCHECK(!data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*data_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&request_id_, 0, reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&request_id_) + sizeof(result_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CHIDMessageFromRemote_RequestResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CHIDMessageFromRemote.RequestResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 request_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_request_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &request_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 result = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CHIDMessageFromRemote.RequestResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CHIDMessageFromRemote.RequestResponse)
  return false;
#undef DO_
}

void CHIDMessageFromRemote_RequestResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CHIDMessageFromRemote.RequestResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 request_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->request_id(), output);
  }

  // optional int32 result = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // optional bytes data = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CHIDMessageFromRemote.RequestResponse)
}

::google::protobuf::uint8* CHIDMessageFromRemote_RequestResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CHIDMessageFromRemote.RequestResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 request_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->request_id(), target);
  }

  // optional int32 result = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // optional bytes data = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CHIDMessageFromRemote.RequestResponse)
  return target;
}

size_t CHIDMessageFromRemote_RequestResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CHIDMessageFromRemote.RequestResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional bytes data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional uint32 request_id = 1;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->request_id());
    }

    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CHIDMessageFromRemote_RequestResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CHIDMessageFromRemote.RequestResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CHIDMessageFromRemote_RequestResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CHIDMessageFromRemote_RequestResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CHIDMessageFromRemote.RequestResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CHIDMessageFromRemote.RequestResponse)
    MergeFrom(*source);
  }
}

void CHIDMessageFromRemote_RequestResponse::MergeFrom(const CHIDMessageFromRemote_RequestResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CHIDMessageFromRemote.RequestResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000002u) {
      request_id_ = from.request_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CHIDMessageFromRemote_RequestResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CHIDMessageFromRemote.RequestResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CHIDMessageFromRemote_RequestResponse::CopyFrom(const CHIDMessageFromRemote_RequestResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CHIDMessageFromRemote.RequestResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHIDMessageFromRemote_RequestResponse::IsInitialized() const {
  return true;
}

void CHIDMessageFromRemote_RequestResponse::Swap(CHIDMessageFromRemote_RequestResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CHIDMessageFromRemote_RequestResponse::InternalSwap(CHIDMessageFromRemote_RequestResponse* other) {
  data_.Swap(&other->data_);
  std::swap(request_id_, other->request_id_);
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CHIDMessageFromRemote_RequestResponse::GetMetadata() const {
  protobuf_steammessages_5fhiddevices_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fhiddevices_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CHIDMessageFromRemote_RequestResponse

// optional uint32 request_id = 1;
bool CHIDMessageFromRemote_RequestResponse::has_request_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CHIDMessageFromRemote_RequestResponse::set_has_request_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CHIDMessageFromRemote_RequestResponse::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CHIDMessageFromRemote_RequestResponse::clear_request_id() {
  request_id_ = 0u;
  clear_has_request_id();
}
::google::protobuf::uint32 CHIDMessageFromRemote_RequestResponse::request_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CHIDMessageFromRemote.RequestResponse.request_id)
  return request_id_;
}
void CHIDMessageFromRemote_RequestResponse::set_request_id(::google::protobuf::uint32 value) {
  set_has_request_id();
  request_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CHIDMessageFromRemote.RequestResponse.request_id)
}

// optional int32 result = 2;
bool CHIDMessageFromRemote_RequestResponse::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CHIDMessageFromRemote_RequestResponse::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
void CHIDMessageFromRemote_RequestResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
void CHIDMessageFromRemote_RequestResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
::google::protobuf::int32 CHIDMessageFromRemote_RequestResponse::result() const {
  // @@protoc_insertion_point(field_get:proto.steam.CHIDMessageFromRemote.RequestResponse.result)
  return result_;
}
void CHIDMessageFromRemote_RequestResponse::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CHIDMessageFromRemote.RequestResponse.result)
}

// optional bytes data = 3;
bool CHIDMessageFromRemote_RequestResponse::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CHIDMessageFromRemote_RequestResponse::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
void CHIDMessageFromRemote_RequestResponse::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void CHIDMessageFromRemote_RequestResponse::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
const ::std::string& CHIDMessageFromRemote_RequestResponse::data() const {
  // @@protoc_insertion_point(field_get:proto.steam.CHIDMessageFromRemote.RequestResponse.data)
  return data_.GetNoArena();
}
void CHIDMessageFromRemote_RequestResponse::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CHIDMessageFromRemote.RequestResponse.data)
}
#if LANG_CXX11
void CHIDMessageFromRemote_RequestResponse::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CHIDMessageFromRemote.RequestResponse.data)
}
#endif
void CHIDMessageFromRemote_RequestResponse::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CHIDMessageFromRemote.RequestResponse.data)
}
void CHIDMessageFromRemote_RequestResponse::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CHIDMessageFromRemote.RequestResponse.data)
}
::std::string* CHIDMessageFromRemote_RequestResponse::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:proto.steam.CHIDMessageFromRemote.RequestResponse.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CHIDMessageFromRemote_RequestResponse::release_data() {
  // @@protoc_insertion_point(field_release:proto.steam.CHIDMessageFromRemote.RequestResponse.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CHIDMessageFromRemote_RequestResponse::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CHIDMessageFromRemote.RequestResponse.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport::kDeviceFieldNumber;
const int CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport::kReportsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport::CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fhiddevices_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CHIDMessageFromRemote.DeviceInputReports.DeviceInputReport)
}
CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport::CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport(const CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      reports_(from.reports_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  device_ = from.device_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CHIDMessageFromRemote.DeviceInputReports.DeviceInputReport)
}

void CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport::SharedCtor() {
  _cached_size_ = 0;
  device_ = 0u;
}

CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport::~CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport() {
  // @@protoc_insertion_point(destructor:proto.steam.CHIDMessageFromRemote.DeviceInputReports.DeviceInputReport)
  SharedDtor();
}

void CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport::SharedDtor() {
}

void CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport::descriptor() {
  protobuf_steammessages_5fhiddevices_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fhiddevices_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport& CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport::default_instance() {
  protobuf_steammessages_5fhiddevices_2eproto::InitDefaults();
  return *internal_default_instance();
}

CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport* CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport::New(::google::protobuf::Arena* arena) const {
  CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport* n = new CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CHIDMessageFromRemote.DeviceInputReports.DeviceInputReport)
  reports_.Clear();
  device_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CHIDMessageFromRemote.DeviceInputReports.DeviceInputReport)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 device = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_device();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &device_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CHIDDeviceInputReport reports = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reports()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CHIDMessageFromRemote.DeviceInputReports.DeviceInputReport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CHIDMessageFromRemote.DeviceInputReports.DeviceInputReport)
  return false;
#undef DO_
}

void CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CHIDMessageFromRemote.DeviceInputReports.DeviceInputReport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 device = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->device(), output);
  }

  // repeated .proto.steam.CHIDDeviceInputReport reports = 2;
  for (unsigned int i = 0, n = this->reports_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reports(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CHIDMessageFromRemote.DeviceInputReports.DeviceInputReport)
}

::google::protobuf::uint8* CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CHIDMessageFromRemote.DeviceInputReports.DeviceInputReport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 device = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->device(), target);
  }

  // repeated .proto.steam.CHIDDeviceInputReport reports = 2;
  for (unsigned int i = 0, n = this->reports_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->reports(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CHIDMessageFromRemote.DeviceInputReports.DeviceInputReport)
  return target;
}

size_t CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CHIDMessageFromRemote.DeviceInputReports.DeviceInputReport)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.steam.CHIDDeviceInputReport reports = 2;
  {
    unsigned int count = this->reports_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reports(i));
    }
  }

  // optional uint32 device = 1;
  if (has_device()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->device());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CHIDMessageFromRemote.DeviceInputReports.DeviceInputReport)
  GOOGLE_DCHECK_NE(&from, this);
  const CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CHIDMessageFromRemote.DeviceInputReports.DeviceInputReport)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CHIDMessageFromRemote.DeviceInputReports.DeviceInputReport)
    MergeFrom(*source);
  }
}

void CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport::MergeFrom(const CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CHIDMessageFromRemote.DeviceInputReports.DeviceInputReport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  reports_.MergeFrom(from.reports_);
  if (from.has_device()) {
    set_device(from.device());
  }
}

void CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CHIDMessageFromRemote.DeviceInputReports.DeviceInputReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport::CopyFrom(const CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CHIDMessageFromRemote.DeviceInputReports.DeviceInputReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport::IsInitialized() const {
  return true;
}

void CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport::Swap(CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport::InternalSwap(CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport* other) {
  reports_.InternalSwap(&other->reports_);
  std::swap(device_, other->device_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport::GetMetadata() const {
  protobuf_steammessages_5fhiddevices_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fhiddevices_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport

// optional uint32 device = 1;
bool CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport::has_device() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport::set_has_device() {
  _has_bits_[0] |= 0x00000001u;
}
void CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport::clear_has_device() {
  _has_bits_[0] &= ~0x00000001u;
}
void CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport::clear_device() {
  device_ = 0u;
  clear_has_device();
}
::google::protobuf::uint32 CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport::device() const {
  // @@protoc_insertion_point(field_get:proto.steam.CHIDMessageFromRemote.DeviceInputReports.DeviceInputReport.device)
  return device_;
}
void CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport::set_device(::google::protobuf::uint32 value) {
  set_has_device();
  device_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CHIDMessageFromRemote.DeviceInputReports.DeviceInputReport.device)
}

// repeated .proto.steam.CHIDDeviceInputReport reports = 2;
int CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport::reports_size() const {
  return reports_.size();
}
void CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport::clear_reports() {
  reports_.Clear();
}
const ::proto::steam::CHIDDeviceInputReport& CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport::reports(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CHIDMessageFromRemote.DeviceInputReports.DeviceInputReport.reports)
  return reports_.Get(index);
}
::proto::steam::CHIDDeviceInputReport* CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport::mutable_reports(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CHIDMessageFromRemote.DeviceInputReports.DeviceInputReport.reports)
  return reports_.Mutable(index);
}
::proto::steam::CHIDDeviceInputReport* CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport::add_reports() {
  // @@protoc_insertion_point(field_add:proto.steam.CHIDMessageFromRemote.DeviceInputReports.DeviceInputReport.reports)
  return reports_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::CHIDDeviceInputReport >*
CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport::mutable_reports() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CHIDMessageFromRemote.DeviceInputReports.DeviceInputReport.reports)
  return &reports_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::CHIDDeviceInputReport >&
CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport::reports() const {
  // @@protoc_insertion_point(field_list:proto.steam.CHIDMessageFromRemote.DeviceInputReports.DeviceInputReport.reports)
  return reports_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CHIDMessageFromRemote_DeviceInputReports::kDeviceReportsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CHIDMessageFromRemote_DeviceInputReports::CHIDMessageFromRemote_DeviceInputReports()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fhiddevices_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CHIDMessageFromRemote.DeviceInputReports)
}
CHIDMessageFromRemote_DeviceInputReports::CHIDMessageFromRemote_DeviceInputReports(const CHIDMessageFromRemote_DeviceInputReports& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      device_reports_(from.device_reports_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CHIDMessageFromRemote.DeviceInputReports)
}

void CHIDMessageFromRemote_DeviceInputReports::SharedCtor() {
  _cached_size_ = 0;
}

CHIDMessageFromRemote_DeviceInputReports::~CHIDMessageFromRemote_DeviceInputReports() {
  // @@protoc_insertion_point(destructor:proto.steam.CHIDMessageFromRemote.DeviceInputReports)
  SharedDtor();
}

void CHIDMessageFromRemote_DeviceInputReports::SharedDtor() {
}

void CHIDMessageFromRemote_DeviceInputReports::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CHIDMessageFromRemote_DeviceInputReports::descriptor() {
  protobuf_steammessages_5fhiddevices_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fhiddevices_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CHIDMessageFromRemote_DeviceInputReports& CHIDMessageFromRemote_DeviceInputReports::default_instance() {
  protobuf_steammessages_5fhiddevices_2eproto::InitDefaults();
  return *internal_default_instance();
}

CHIDMessageFromRemote_DeviceInputReports* CHIDMessageFromRemote_DeviceInputReports::New(::google::protobuf::Arena* arena) const {
  CHIDMessageFromRemote_DeviceInputReports* n = new CHIDMessageFromRemote_DeviceInputReports;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CHIDMessageFromRemote_DeviceInputReports::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CHIDMessageFromRemote.DeviceInputReports)
  device_reports_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CHIDMessageFromRemote_DeviceInputReports::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CHIDMessageFromRemote.DeviceInputReports)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.steam.CHIDMessageFromRemote.DeviceInputReports.DeviceInputReport device_reports = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_device_reports()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CHIDMessageFromRemote.DeviceInputReports)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CHIDMessageFromRemote.DeviceInputReports)
  return false;
#undef DO_
}

void CHIDMessageFromRemote_DeviceInputReports::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CHIDMessageFromRemote.DeviceInputReports)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CHIDMessageFromRemote.DeviceInputReports.DeviceInputReport device_reports = 1;
  for (unsigned int i = 0, n = this->device_reports_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->device_reports(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CHIDMessageFromRemote.DeviceInputReports)
}

::google::protobuf::uint8* CHIDMessageFromRemote_DeviceInputReports::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CHIDMessageFromRemote.DeviceInputReports)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CHIDMessageFromRemote.DeviceInputReports.DeviceInputReport device_reports = 1;
  for (unsigned int i = 0, n = this->device_reports_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->device_reports(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CHIDMessageFromRemote.DeviceInputReports)
  return target;
}

size_t CHIDMessageFromRemote_DeviceInputReports::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CHIDMessageFromRemote.DeviceInputReports)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.steam.CHIDMessageFromRemote.DeviceInputReports.DeviceInputReport device_reports = 1;
  {
    unsigned int count = this->device_reports_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->device_reports(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CHIDMessageFromRemote_DeviceInputReports::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CHIDMessageFromRemote.DeviceInputReports)
  GOOGLE_DCHECK_NE(&from, this);
  const CHIDMessageFromRemote_DeviceInputReports* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CHIDMessageFromRemote_DeviceInputReports>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CHIDMessageFromRemote.DeviceInputReports)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CHIDMessageFromRemote.DeviceInputReports)
    MergeFrom(*source);
  }
}

void CHIDMessageFromRemote_DeviceInputReports::MergeFrom(const CHIDMessageFromRemote_DeviceInputReports& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CHIDMessageFromRemote.DeviceInputReports)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  device_reports_.MergeFrom(from.device_reports_);
}

void CHIDMessageFromRemote_DeviceInputReports::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CHIDMessageFromRemote.DeviceInputReports)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CHIDMessageFromRemote_DeviceInputReports::CopyFrom(const CHIDMessageFromRemote_DeviceInputReports& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CHIDMessageFromRemote.DeviceInputReports)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHIDMessageFromRemote_DeviceInputReports::IsInitialized() const {
  return true;
}

void CHIDMessageFromRemote_DeviceInputReports::Swap(CHIDMessageFromRemote_DeviceInputReports* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CHIDMessageFromRemote_DeviceInputReports::InternalSwap(CHIDMessageFromRemote_DeviceInputReports* other) {
  device_reports_.InternalSwap(&other->device_reports_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CHIDMessageFromRemote_DeviceInputReports::GetMetadata() const {
  protobuf_steammessages_5fhiddevices_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fhiddevices_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CHIDMessageFromRemote_DeviceInputReports

// repeated .proto.steam.CHIDMessageFromRemote.DeviceInputReports.DeviceInputReport device_reports = 1;
int CHIDMessageFromRemote_DeviceInputReports::device_reports_size() const {
  return device_reports_.size();
}
void CHIDMessageFromRemote_DeviceInputReports::clear_device_reports() {
  device_reports_.Clear();
}
const ::proto::steam::CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport& CHIDMessageFromRemote_DeviceInputReports::device_reports(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CHIDMessageFromRemote.DeviceInputReports.device_reports)
  return device_reports_.Get(index);
}
::proto::steam::CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport* CHIDMessageFromRemote_DeviceInputReports::mutable_device_reports(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CHIDMessageFromRemote.DeviceInputReports.device_reports)
  return device_reports_.Mutable(index);
}
::proto::steam::CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport* CHIDMessageFromRemote_DeviceInputReports::add_device_reports() {
  // @@protoc_insertion_point(field_add:proto.steam.CHIDMessageFromRemote.DeviceInputReports.device_reports)
  return device_reports_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport >*
CHIDMessageFromRemote_DeviceInputReports::mutable_device_reports() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CHIDMessageFromRemote.DeviceInputReports.device_reports)
  return &device_reports_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::CHIDMessageFromRemote_DeviceInputReports_DeviceInputReport >&
CHIDMessageFromRemote_DeviceInputReports::device_reports() const {
  // @@protoc_insertion_point(field_list:proto.steam.CHIDMessageFromRemote.DeviceInputReports.device_reports)
  return device_reports_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CHIDMessageFromRemote_CloseDevice::kDeviceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CHIDMessageFromRemote_CloseDevice::CHIDMessageFromRemote_CloseDevice()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fhiddevices_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CHIDMessageFromRemote.CloseDevice)
}
CHIDMessageFromRemote_CloseDevice::CHIDMessageFromRemote_CloseDevice(const CHIDMessageFromRemote_CloseDevice& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  device_ = from.device_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CHIDMessageFromRemote.CloseDevice)
}

void CHIDMessageFromRemote_CloseDevice::SharedCtor() {
  _cached_size_ = 0;
  device_ = 0u;
}

CHIDMessageFromRemote_CloseDevice::~CHIDMessageFromRemote_CloseDevice() {
  // @@protoc_insertion_point(destructor:proto.steam.CHIDMessageFromRemote.CloseDevice)
  SharedDtor();
}

void CHIDMessageFromRemote_CloseDevice::SharedDtor() {
}

void CHIDMessageFromRemote_CloseDevice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CHIDMessageFromRemote_CloseDevice::descriptor() {
  protobuf_steammessages_5fhiddevices_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fhiddevices_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CHIDMessageFromRemote_CloseDevice& CHIDMessageFromRemote_CloseDevice::default_instance() {
  protobuf_steammessages_5fhiddevices_2eproto::InitDefaults();
  return *internal_default_instance();
}

CHIDMessageFromRemote_CloseDevice* CHIDMessageFromRemote_CloseDevice::New(::google::protobuf::Arena* arena) const {
  CHIDMessageFromRemote_CloseDevice* n = new CHIDMessageFromRemote_CloseDevice;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CHIDMessageFromRemote_CloseDevice::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CHIDMessageFromRemote.CloseDevice)
  device_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CHIDMessageFromRemote_CloseDevice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CHIDMessageFromRemote.CloseDevice)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 device = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_device();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &device_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CHIDMessageFromRemote.CloseDevice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CHIDMessageFromRemote.CloseDevice)
  return false;
#undef DO_
}

void CHIDMessageFromRemote_CloseDevice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CHIDMessageFromRemote.CloseDevice)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 device = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->device(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CHIDMessageFromRemote.CloseDevice)
}

::google::protobuf::uint8* CHIDMessageFromRemote_CloseDevice::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CHIDMessageFromRemote.CloseDevice)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 device = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->device(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CHIDMessageFromRemote.CloseDevice)
  return target;
}

size_t CHIDMessageFromRemote_CloseDevice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CHIDMessageFromRemote.CloseDevice)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 device = 1;
  if (has_device()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->device());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CHIDMessageFromRemote_CloseDevice::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CHIDMessageFromRemote.CloseDevice)
  GOOGLE_DCHECK_NE(&from, this);
  const CHIDMessageFromRemote_CloseDevice* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CHIDMessageFromRemote_CloseDevice>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CHIDMessageFromRemote.CloseDevice)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CHIDMessageFromRemote.CloseDevice)
    MergeFrom(*source);
  }
}

void CHIDMessageFromRemote_CloseDevice::MergeFrom(const CHIDMessageFromRemote_CloseDevice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CHIDMessageFromRemote.CloseDevice)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_device()) {
    set_device(from.device());
  }
}

void CHIDMessageFromRemote_CloseDevice::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CHIDMessageFromRemote.CloseDevice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CHIDMessageFromRemote_CloseDevice::CopyFrom(const CHIDMessageFromRemote_CloseDevice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CHIDMessageFromRemote.CloseDevice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHIDMessageFromRemote_CloseDevice::IsInitialized() const {
  return true;
}

void CHIDMessageFromRemote_CloseDevice::Swap(CHIDMessageFromRemote_CloseDevice* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CHIDMessageFromRemote_CloseDevice::InternalSwap(CHIDMessageFromRemote_CloseDevice* other) {
  std::swap(device_, other->device_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CHIDMessageFromRemote_CloseDevice::GetMetadata() const {
  protobuf_steammessages_5fhiddevices_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fhiddevices_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CHIDMessageFromRemote_CloseDevice

// optional uint32 device = 1;
bool CHIDMessageFromRemote_CloseDevice::has_device() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CHIDMessageFromRemote_CloseDevice::set_has_device() {
  _has_bits_[0] |= 0x00000001u;
}
void CHIDMessageFromRemote_CloseDevice::clear_has_device() {
  _has_bits_[0] &= ~0x00000001u;
}
void CHIDMessageFromRemote_CloseDevice::clear_device() {
  device_ = 0u;
  clear_has_device();
}
::google::protobuf::uint32 CHIDMessageFromRemote_CloseDevice::device() const {
  // @@protoc_insertion_point(field_get:proto.steam.CHIDMessageFromRemote.CloseDevice.device)
  return device_;
}
void CHIDMessageFromRemote_CloseDevice::set_device(::google::protobuf::uint32 value) {
  set_has_device();
  device_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CHIDMessageFromRemote.CloseDevice.device)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CHIDMessageFromRemote_CloseAllDevices::CHIDMessageFromRemote_CloseAllDevices()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fhiddevices_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CHIDMessageFromRemote.CloseAllDevices)
}
CHIDMessageFromRemote_CloseAllDevices::CHIDMessageFromRemote_CloseAllDevices(const CHIDMessageFromRemote_CloseAllDevices& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CHIDMessageFromRemote.CloseAllDevices)
}

void CHIDMessageFromRemote_CloseAllDevices::SharedCtor() {
  _cached_size_ = 0;
}

CHIDMessageFromRemote_CloseAllDevices::~CHIDMessageFromRemote_CloseAllDevices() {
  // @@protoc_insertion_point(destructor:proto.steam.CHIDMessageFromRemote.CloseAllDevices)
  SharedDtor();
}

void CHIDMessageFromRemote_CloseAllDevices::SharedDtor() {
}

void CHIDMessageFromRemote_CloseAllDevices::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CHIDMessageFromRemote_CloseAllDevices::descriptor() {
  protobuf_steammessages_5fhiddevices_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fhiddevices_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CHIDMessageFromRemote_CloseAllDevices& CHIDMessageFromRemote_CloseAllDevices::default_instance() {
  protobuf_steammessages_5fhiddevices_2eproto::InitDefaults();
  return *internal_default_instance();
}

CHIDMessageFromRemote_CloseAllDevices* CHIDMessageFromRemote_CloseAllDevices::New(::google::protobuf::Arena* arena) const {
  CHIDMessageFromRemote_CloseAllDevices* n = new CHIDMessageFromRemote_CloseAllDevices;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CHIDMessageFromRemote_CloseAllDevices::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CHIDMessageFromRemote.CloseAllDevices)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CHIDMessageFromRemote_CloseAllDevices::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CHIDMessageFromRemote.CloseAllDevices)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CHIDMessageFromRemote.CloseAllDevices)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CHIDMessageFromRemote.CloseAllDevices)
  return false;
#undef DO_
}

void CHIDMessageFromRemote_CloseAllDevices::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CHIDMessageFromRemote.CloseAllDevices)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CHIDMessageFromRemote.CloseAllDevices)
}

::google::protobuf::uint8* CHIDMessageFromRemote_CloseAllDevices::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CHIDMessageFromRemote.CloseAllDevices)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CHIDMessageFromRemote.CloseAllDevices)
  return target;
}

size_t CHIDMessageFromRemote_CloseAllDevices::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CHIDMessageFromRemote.CloseAllDevices)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CHIDMessageFromRemote_CloseAllDevices::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CHIDMessageFromRemote.CloseAllDevices)
  GOOGLE_DCHECK_NE(&from, this);
  const CHIDMessageFromRemote_CloseAllDevices* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CHIDMessageFromRemote_CloseAllDevices>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CHIDMessageFromRemote.CloseAllDevices)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CHIDMessageFromRemote.CloseAllDevices)
    MergeFrom(*source);
  }
}

void CHIDMessageFromRemote_CloseAllDevices::MergeFrom(const CHIDMessageFromRemote_CloseAllDevices& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CHIDMessageFromRemote.CloseAllDevices)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CHIDMessageFromRemote_CloseAllDevices::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CHIDMessageFromRemote.CloseAllDevices)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CHIDMessageFromRemote_CloseAllDevices::CopyFrom(const CHIDMessageFromRemote_CloseAllDevices& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CHIDMessageFromRemote.CloseAllDevices)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHIDMessageFromRemote_CloseAllDevices::IsInitialized() const {
  return true;
}

void CHIDMessageFromRemote_CloseAllDevices::Swap(CHIDMessageFromRemote_CloseAllDevices* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CHIDMessageFromRemote_CloseAllDevices::InternalSwap(CHIDMessageFromRemote_CloseAllDevices* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CHIDMessageFromRemote_CloseAllDevices::GetMetadata() const {
  protobuf_steammessages_5fhiddevices_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fhiddevices_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CHIDMessageFromRemote_CloseAllDevices

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CHIDMessageFromRemote::kUpdateDeviceListFieldNumber;
const int CHIDMessageFromRemote::kResponseFieldNumber;
const int CHIDMessageFromRemote::kReportsFieldNumber;
const int CHIDMessageFromRemote::kCloseDeviceFieldNumber;
const int CHIDMessageFromRemote::kCloseAllDevicesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CHIDMessageFromRemote::CHIDMessageFromRemote()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fhiddevices_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CHIDMessageFromRemote)
}
CHIDMessageFromRemote::CHIDMessageFromRemote(const CHIDMessageFromRemote& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_command();
  switch (from.command_case()) {
    case kUpdateDeviceList: {
      mutable_update_device_list()->::proto::steam::CHIDMessageFromRemote_UpdateDeviceList::MergeFrom(from.update_device_list());
      break;
    }
    case kResponse: {
      mutable_response()->::proto::steam::CHIDMessageFromRemote_RequestResponse::MergeFrom(from.response());
      break;
    }
    case kReports: {
      mutable_reports()->::proto::steam::CHIDMessageFromRemote_DeviceInputReports::MergeFrom(from.reports());
      break;
    }
    case kCloseDevice: {
      mutable_close_device()->::proto::steam::CHIDMessageFromRemote_CloseDevice::MergeFrom(from.close_device());
      break;
    }
    case kCloseAllDevices: {
      mutable_close_all_devices()->::proto::steam::CHIDMessageFromRemote_CloseAllDevices::MergeFrom(from.close_all_devices());
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:proto.steam.CHIDMessageFromRemote)
}

void CHIDMessageFromRemote::SharedCtor() {
  _cached_size_ = 0;
  clear_has_command();
}

CHIDMessageFromRemote::~CHIDMessageFromRemote() {
  // @@protoc_insertion_point(destructor:proto.steam.CHIDMessageFromRemote)
  SharedDtor();
}

void CHIDMessageFromRemote::SharedDtor() {
  if (has_command()) {
    clear_command();
  }
}

void CHIDMessageFromRemote::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CHIDMessageFromRemote::descriptor() {
  protobuf_steammessages_5fhiddevices_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fhiddevices_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CHIDMessageFromRemote& CHIDMessageFromRemote::default_instance() {
  protobuf_steammessages_5fhiddevices_2eproto::InitDefaults();
  return *internal_default_instance();
}

CHIDMessageFromRemote* CHIDMessageFromRemote::New(::google::protobuf::Arena* arena) const {
  CHIDMessageFromRemote* n = new CHIDMessageFromRemote;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CHIDMessageFromRemote::clear_command() {
// @@protoc_insertion_point(one_of_clear_start:proto.steam.CHIDMessageFromRemote)
  switch (command_case()) {
    case kUpdateDeviceList: {
      delete command_.update_device_list_;
      break;
    }
    case kResponse: {
      delete command_.response_;
      break;
    }
    case kReports: {
      delete command_.reports_;
      break;
    }
    case kCloseDevice: {
      delete command_.close_device_;
      break;
    }
    case kCloseAllDevices: {
      delete command_.close_all_devices_;
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = COMMAND_NOT_SET;
}


void CHIDMessageFromRemote::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CHIDMessageFromRemote)
  clear_command();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CHIDMessageFromRemote::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CHIDMessageFromRemote)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.steam.CHIDMessageFromRemote.UpdateDeviceList update_device_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update_device_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.steam.CHIDMessageFromRemote.RequestResponse response = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.steam.CHIDMessageFromRemote.DeviceInputReports reports = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reports()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.steam.CHIDMessageFromRemote.CloseDevice close_device = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_close_device()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.steam.CHIDMessageFromRemote.CloseAllDevices close_all_devices = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_close_all_devices()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CHIDMessageFromRemote)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CHIDMessageFromRemote)
  return false;
#undef DO_
}

void CHIDMessageFromRemote::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CHIDMessageFromRemote)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (command_case()) {
    case kUpdateDeviceList:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        1, *command_.update_device_list_, output);
      break;
    case kResponse:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, *command_.response_, output);
      break;
    case kReports:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        3, *command_.reports_, output);
      break;
    case kCloseDevice:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        4, *command_.close_device_, output);
      break;
    case kCloseAllDevices:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        5, *command_.close_all_devices_, output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CHIDMessageFromRemote)
}

::google::protobuf::uint8* CHIDMessageFromRemote::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CHIDMessageFromRemote)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (command_case()) {
    case kUpdateDeviceList:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          1, *command_.update_device_list_, deterministic, target);
      break;
    case kResponse:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          2, *command_.response_, deterministic, target);
      break;
    case kReports:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          3, *command_.reports_, deterministic, target);
      break;
    case kCloseDevice:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          4, *command_.close_device_, deterministic, target);
      break;
    case kCloseAllDevices:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          5, *command_.close_all_devices_, deterministic, target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CHIDMessageFromRemote)
  return target;
}

size_t CHIDMessageFromRemote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CHIDMessageFromRemote)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  switch (command_case()) {
    // optional .proto.steam.CHIDMessageFromRemote.UpdateDeviceList update_device_list = 1;
    case kUpdateDeviceList: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *command_.update_device_list_);
      break;
    }
    // optional .proto.steam.CHIDMessageFromRemote.RequestResponse response = 2;
    case kResponse: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *command_.response_);
      break;
    }
    // optional .proto.steam.CHIDMessageFromRemote.DeviceInputReports reports = 3;
    case kReports: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *command_.reports_);
      break;
    }
    // optional .proto.steam.CHIDMessageFromRemote.CloseDevice close_device = 4;
    case kCloseDevice: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *command_.close_device_);
      break;
    }
    // optional .proto.steam.CHIDMessageFromRemote.CloseAllDevices close_all_devices = 5;
    case kCloseAllDevices: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *command_.close_all_devices_);
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CHIDMessageFromRemote::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CHIDMessageFromRemote)
  GOOGLE_DCHECK_NE(&from, this);
  const CHIDMessageFromRemote* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CHIDMessageFromRemote>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CHIDMessageFromRemote)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CHIDMessageFromRemote)
    MergeFrom(*source);
  }
}

void CHIDMessageFromRemote::MergeFrom(const CHIDMessageFromRemote& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CHIDMessageFromRemote)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.command_case()) {
    case kUpdateDeviceList: {
      mutable_update_device_list()->::proto::steam::CHIDMessageFromRemote_UpdateDeviceList::MergeFrom(from.update_device_list());
      break;
    }
    case kResponse: {
      mutable_response()->::proto::steam::CHIDMessageFromRemote_RequestResponse::MergeFrom(from.response());
      break;
    }
    case kReports: {
      mutable_reports()->::proto::steam::CHIDMessageFromRemote_DeviceInputReports::MergeFrom(from.reports());
      break;
    }
    case kCloseDevice: {
      mutable_close_device()->::proto::steam::CHIDMessageFromRemote_CloseDevice::MergeFrom(from.close_device());
      break;
    }
    case kCloseAllDevices: {
      mutable_close_all_devices()->::proto::steam::CHIDMessageFromRemote_CloseAllDevices::MergeFrom(from.close_all_devices());
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
}

void CHIDMessageFromRemote::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CHIDMessageFromRemote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CHIDMessageFromRemote::CopyFrom(const CHIDMessageFromRemote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CHIDMessageFromRemote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHIDMessageFromRemote::IsInitialized() const {
  return true;
}

void CHIDMessageFromRemote::Swap(CHIDMessageFromRemote* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CHIDMessageFromRemote::InternalSwap(CHIDMessageFromRemote* other) {
  std::swap(command_, other->command_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CHIDMessageFromRemote::GetMetadata() const {
  protobuf_steammessages_5fhiddevices_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fhiddevices_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CHIDMessageFromRemote

// optional .proto.steam.CHIDMessageFromRemote.UpdateDeviceList update_device_list = 1;
bool CHIDMessageFromRemote::has_update_device_list() const {
  return command_case() == kUpdateDeviceList;
}
void CHIDMessageFromRemote::set_has_update_device_list() {
  _oneof_case_[0] = kUpdateDeviceList;
}
void CHIDMessageFromRemote::clear_update_device_list() {
  if (has_update_device_list()) {
    delete command_.update_device_list_;
    clear_has_command();
  }
}
 const ::proto::steam::CHIDMessageFromRemote_UpdateDeviceList& CHIDMessageFromRemote::update_device_list() const {
  // @@protoc_insertion_point(field_get:proto.steam.CHIDMessageFromRemote.update_device_list)
  return has_update_device_list()
      ? *command_.update_device_list_
      : ::proto::steam::CHIDMessageFromRemote_UpdateDeviceList::default_instance();
}
::proto::steam::CHIDMessageFromRemote_UpdateDeviceList* CHIDMessageFromRemote::mutable_update_device_list() {
  if (!has_update_device_list()) {
    clear_command();
    set_has_update_device_list();
    command_.update_device_list_ = new ::proto::steam::CHIDMessageFromRemote_UpdateDeviceList;
  }
  // @@protoc_insertion_point(field_mutable:proto.steam.CHIDMessageFromRemote.update_device_list)
  return command_.update_device_list_;
}
::proto::steam::CHIDMessageFromRemote_UpdateDeviceList* CHIDMessageFromRemote::release_update_device_list() {
  // @@protoc_insertion_point(field_release:proto.steam.CHIDMessageFromRemote.update_device_list)
  if (has_update_device_list()) {
    clear_has_command();
    ::proto::steam::CHIDMessageFromRemote_UpdateDeviceList* temp = command_.update_device_list_;
    command_.update_device_list_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void CHIDMessageFromRemote::set_allocated_update_device_list(::proto::steam::CHIDMessageFromRemote_UpdateDeviceList* update_device_list) {
  clear_command();
  if (update_device_list) {
    set_has_update_device_list();
    command_.update_device_list_ = update_device_list;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CHIDMessageFromRemote.update_device_list)
}

// optional .proto.steam.CHIDMessageFromRemote.RequestResponse response = 2;
bool CHIDMessageFromRemote::has_response() const {
  return command_case() == kResponse;
}
void CHIDMessageFromRemote::set_has_response() {
  _oneof_case_[0] = kResponse;
}
void CHIDMessageFromRemote::clear_response() {
  if (has_response()) {
    delete command_.response_;
    clear_has_command();
  }
}
 const ::proto::steam::CHIDMessageFromRemote_RequestResponse& CHIDMessageFromRemote::response() const {
  // @@protoc_insertion_point(field_get:proto.steam.CHIDMessageFromRemote.response)
  return has_response()
      ? *command_.response_
      : ::proto::steam::CHIDMessageFromRemote_RequestResponse::default_instance();
}
::proto::steam::CHIDMessageFromRemote_RequestResponse* CHIDMessageFromRemote::mutable_response() {
  if (!has_response()) {
    clear_command();
    set_has_response();
    command_.response_ = new ::proto::steam::CHIDMessageFromRemote_RequestResponse;
  }
  // @@protoc_insertion_point(field_mutable:proto.steam.CHIDMessageFromRemote.response)
  return command_.response_;
}
::proto::steam::CHIDMessageFromRemote_RequestResponse* CHIDMessageFromRemote::release_response() {
  // @@protoc_insertion_point(field_release:proto.steam.CHIDMessageFromRemote.response)
  if (has_response()) {
    clear_has_command();
    ::proto::steam::CHIDMessageFromRemote_RequestResponse* temp = command_.response_;
    command_.response_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void CHIDMessageFromRemote::set_allocated_response(::proto::steam::CHIDMessageFromRemote_RequestResponse* response) {
  clear_command();
  if (response) {
    set_has_response();
    command_.response_ = response;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CHIDMessageFromRemote.response)
}

// optional .proto.steam.CHIDMessageFromRemote.DeviceInputReports reports = 3;
bool CHIDMessageFromRemote::has_reports() const {
  return command_case() == kReports;
}
void CHIDMessageFromRemote::set_has_reports() {
  _oneof_case_[0] = kReports;
}
void CHIDMessageFromRemote::clear_reports() {
  if (has_reports()) {
    delete command_.reports_;
    clear_has_command();
  }
}
 const ::proto::steam::CHIDMessageFromRemote_DeviceInputReports& CHIDMessageFromRemote::reports() const {
  // @@protoc_insertion_point(field_get:proto.steam.CHIDMessageFromRemote.reports)
  return has_reports()
      ? *command_.reports_
      : ::proto::steam::CHIDMessageFromRemote_DeviceInputReports::default_instance();
}
::proto::steam::CHIDMessageFromRemote_DeviceInputReports* CHIDMessageFromRemote::mutable_reports() {
  if (!has_reports()) {
    clear_command();
    set_has_reports();
    command_.reports_ = new ::proto::steam::CHIDMessageFromRemote_DeviceInputReports;
  }
  // @@protoc_insertion_point(field_mutable:proto.steam.CHIDMessageFromRemote.reports)
  return command_.reports_;
}
::proto::steam::CHIDMessageFromRemote_DeviceInputReports* CHIDMessageFromRemote::release_reports() {
  // @@protoc_insertion_point(field_release:proto.steam.CHIDMessageFromRemote.reports)
  if (has_reports()) {
    clear_has_command();
    ::proto::steam::CHIDMessageFromRemote_DeviceInputReports* temp = command_.reports_;
    command_.reports_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void CHIDMessageFromRemote::set_allocated_reports(::proto::steam::CHIDMessageFromRemote_DeviceInputReports* reports) {
  clear_command();
  if (reports) {
    set_has_reports();
    command_.reports_ = reports;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CHIDMessageFromRemote.reports)
}

// optional .proto.steam.CHIDMessageFromRemote.CloseDevice close_device = 4;
bool CHIDMessageFromRemote::has_close_device() const {
  return command_case() == kCloseDevice;
}
void CHIDMessageFromRemote::set_has_close_device() {
  _oneof_case_[0] = kCloseDevice;
}
void CHIDMessageFromRemote::clear_close_device() {
  if (has_close_device()) {
    delete command_.close_device_;
    clear_has_command();
  }
}
 const ::proto::steam::CHIDMessageFromRemote_CloseDevice& CHIDMessageFromRemote::close_device() const {
  // @@protoc_insertion_point(field_get:proto.steam.CHIDMessageFromRemote.close_device)
  return has_close_device()
      ? *command_.close_device_
      : ::proto::steam::CHIDMessageFromRemote_CloseDevice::default_instance();
}
::proto::steam::CHIDMessageFromRemote_CloseDevice* CHIDMessageFromRemote::mutable_close_device() {
  if (!has_close_device()) {
    clear_command();
    set_has_close_device();
    command_.close_device_ = new ::proto::steam::CHIDMessageFromRemote_CloseDevice;
  }
  // @@protoc_insertion_point(field_mutable:proto.steam.CHIDMessageFromRemote.close_device)
  return command_.close_device_;
}
::proto::steam::CHIDMessageFromRemote_CloseDevice* CHIDMessageFromRemote::release_close_device() {
  // @@protoc_insertion_point(field_release:proto.steam.CHIDMessageFromRemote.close_device)
  if (has_close_device()) {
    clear_has_command();
    ::proto::steam::CHIDMessageFromRemote_CloseDevice* temp = command_.close_device_;
    command_.close_device_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void CHIDMessageFromRemote::set_allocated_close_device(::proto::steam::CHIDMessageFromRemote_CloseDevice* close_device) {
  clear_command();
  if (close_device) {
    set_has_close_device();
    command_.close_device_ = close_device;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CHIDMessageFromRemote.close_device)
}

// optional .proto.steam.CHIDMessageFromRemote.CloseAllDevices close_all_devices = 5;
bool CHIDMessageFromRemote::has_close_all_devices() const {
  return command_case() == kCloseAllDevices;
}
void CHIDMessageFromRemote::set_has_close_all_devices() {
  _oneof_case_[0] = kCloseAllDevices;
}
void CHIDMessageFromRemote::clear_close_all_devices() {
  if (has_close_all_devices()) {
    delete command_.close_all_devices_;
    clear_has_command();
  }
}
 const ::proto::steam::CHIDMessageFromRemote_CloseAllDevices& CHIDMessageFromRemote::close_all_devices() const {
  // @@protoc_insertion_point(field_get:proto.steam.CHIDMessageFromRemote.close_all_devices)
  return has_close_all_devices()
      ? *command_.close_all_devices_
      : ::proto::steam::CHIDMessageFromRemote_CloseAllDevices::default_instance();
}
::proto::steam::CHIDMessageFromRemote_CloseAllDevices* CHIDMessageFromRemote::mutable_close_all_devices() {
  if (!has_close_all_devices()) {
    clear_command();
    set_has_close_all_devices();
    command_.close_all_devices_ = new ::proto::steam::CHIDMessageFromRemote_CloseAllDevices;
  }
  // @@protoc_insertion_point(field_mutable:proto.steam.CHIDMessageFromRemote.close_all_devices)
  return command_.close_all_devices_;
}
::proto::steam::CHIDMessageFromRemote_CloseAllDevices* CHIDMessageFromRemote::release_close_all_devices() {
  // @@protoc_insertion_point(field_release:proto.steam.CHIDMessageFromRemote.close_all_devices)
  if (has_close_all_devices()) {
    clear_has_command();
    ::proto::steam::CHIDMessageFromRemote_CloseAllDevices* temp = command_.close_all_devices_;
    command_.close_all_devices_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void CHIDMessageFromRemote::set_allocated_close_all_devices(::proto::steam::CHIDMessageFromRemote_CloseAllDevices* close_all_devices) {
  clear_command();
  if (close_all_devices) {
    set_has_close_all_devices();
    command_.close_all_devices_ = close_all_devices;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CHIDMessageFromRemote.close_all_devices)
}

bool CHIDMessageFromRemote::has_command() const {
  return command_case() != COMMAND_NOT_SET;
}
void CHIDMessageFromRemote::clear_has_command() {
  _oneof_case_[0] = COMMAND_NOT_SET;
}
CHIDMessageFromRemote::CommandCase CHIDMessageFromRemote::command_case() const {
  return CHIDMessageFromRemote::CommandCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace steam
}  // namespace proto

// @@protoc_insertion_point(global_scope)
