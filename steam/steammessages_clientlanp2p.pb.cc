// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_clientlanp2p.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "steammessages_clientlanp2p.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace steam {
class CMsgClientLANP2PRequestChunks_ChunkKeyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientLANP2PRequestChunks_ChunkKey> {
} _CMsgClientLANP2PRequestChunks_ChunkKey_default_instance_;
class CMsgClientLANP2PRequestChunksDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientLANP2PRequestChunks> {
} _CMsgClientLANP2PRequestChunks_default_instance_;
class CMsgClientLANP2PRequestChunksResponse_ChunkDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientLANP2PRequestChunksResponse_ChunkData> {
} _CMsgClientLANP2PRequestChunksResponse_ChunkData_default_instance_;
class CMsgClientLANP2PRequestChunksResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientLANP2PRequestChunksResponse> {
} _CMsgClientLANP2PRequestChunksResponse_default_instance_;

namespace protobuf_steammessages_5fclientlanp2p_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[4];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLANP2PRequestChunks_ChunkKey, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLANP2PRequestChunks_ChunkKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLANP2PRequestChunks_ChunkKey, depot_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLANP2PRequestChunks_ChunkKey, sha_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLANP2PRequestChunks, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLANP2PRequestChunks, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLANP2PRequestChunks, chunk_keys_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLANP2PRequestChunksResponse_ChunkData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLANP2PRequestChunksResponse_ChunkData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLANP2PRequestChunksResponse_ChunkData, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLANP2PRequestChunksResponse_ChunkData, depot_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLANP2PRequestChunksResponse_ChunkData, sha_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLANP2PRequestChunksResponse_ChunkData, chunk_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLANP2PRequestChunksResponse_ChunkData, encrypted_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLANP2PRequestChunksResponse_ChunkData, compressed_),
  2,
  3,
  0,
  1,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLANP2PRequestChunksResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLANP2PRequestChunksResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientLANP2PRequestChunksResponse, chunk_responses_),
  ~0u,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 7, sizeof(CMsgClientLANP2PRequestChunks_ChunkKey)},
  { 9, 15, sizeof(CMsgClientLANP2PRequestChunks)},
  { 16, 27, sizeof(CMsgClientLANP2PRequestChunksResponse_ChunkData)},
  { 33, 39, sizeof(CMsgClientLANP2PRequestChunksResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientLANP2PRequestChunks_ChunkKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientLANP2PRequestChunks_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientLANP2PRequestChunksResponse_ChunkData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientLANP2PRequestChunksResponse_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "steammessages_clientlanp2p.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

}  // namespace

void TableStruct::Shutdown() {
  _CMsgClientLANP2PRequestChunks_ChunkKey_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _CMsgClientLANP2PRequestChunks_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _CMsgClientLANP2PRequestChunksResponse_ChunkData_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _CMsgClientLANP2PRequestChunksResponse_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::proto::steam::protobuf_steammessages_5fbase_2eproto::InitDefaults();
  _CMsgClientLANP2PRequestChunks_ChunkKey_default_instance_.DefaultConstruct();
  _CMsgClientLANP2PRequestChunks_default_instance_.DefaultConstruct();
  _CMsgClientLANP2PRequestChunksResponse_ChunkData_default_instance_.DefaultConstruct();
  _CMsgClientLANP2PRequestChunksResponse_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n steammessages_clientlanp2p.proto\022\013prot"
      "o.steam\032\030steammessages_base.proto\"\223\001\n\035CM"
      "sgClientLANP2PRequestChunks\022G\n\nchunk_key"
      "s\030\001 \003(\01323.proto.steam.CMsgClientLANP2PRe"
      "questChunks.ChunkKey\032)\n\010ChunkKey\022\020\n\010depo"
      "t_id\030\001 \001(\r\022\013\n\003sha\030\002 \001(\014\"\365\001\n%CMsgClientLA"
      "NP2PRequestChunksResponse\022U\n\017chunk_respo"
      "nses\030\001 \003(\0132<.proto.steam.CMsgClientLANP2"
      "PRequestChunksResponse.ChunkData\032u\n\tChun"
      "kData\022\016\n\006result\030\001 \001(\r\022\020\n\010depot_id\030\002 \001(\r\022"
      "\013\n\003sha\030\003 \001(\014\022\022\n\nchunk_data\030\004 \001(\014\022\021\n\tencr"
      "ypted\030\005 \001(\010\022\022\n\ncompressed\030\006 \001(\010B\005H\001\200\001\000"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 478);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "steammessages_clientlanp2p.proto", &protobuf_RegisterTypes);
  ::proto::steam::protobuf_steammessages_5fbase_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_steammessages_5fclientlanp2p_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientLANP2PRequestChunks_ChunkKey::kDepotIdFieldNumber;
const int CMsgClientLANP2PRequestChunks_ChunkKey::kShaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientLANP2PRequestChunks_ChunkKey::CMsgClientLANP2PRequestChunks_ChunkKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientlanp2p_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientLANP2PRequestChunks.ChunkKey)
}
CMsgClientLANP2PRequestChunks_ChunkKey::CMsgClientLANP2PRequestChunks_ChunkKey(const CMsgClientLANP2PRequestChunks_ChunkKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sha_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sha()) {
    sha_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha_);
  }
  depot_id_ = from.depot_id_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientLANP2PRequestChunks.ChunkKey)
}

void CMsgClientLANP2PRequestChunks_ChunkKey::SharedCtor() {
  _cached_size_ = 0;
  sha_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  depot_id_ = 0u;
}

CMsgClientLANP2PRequestChunks_ChunkKey::~CMsgClientLANP2PRequestChunks_ChunkKey() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientLANP2PRequestChunks.ChunkKey)
  SharedDtor();
}

void CMsgClientLANP2PRequestChunks_ChunkKey::SharedDtor() {
  sha_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientLANP2PRequestChunks_ChunkKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientLANP2PRequestChunks_ChunkKey::descriptor() {
  protobuf_steammessages_5fclientlanp2p_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientlanp2p_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientLANP2PRequestChunks_ChunkKey& CMsgClientLANP2PRequestChunks_ChunkKey::default_instance() {
  protobuf_steammessages_5fclientlanp2p_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientLANP2PRequestChunks_ChunkKey* CMsgClientLANP2PRequestChunks_ChunkKey::New(::google::protobuf::Arena* arena) const {
  CMsgClientLANP2PRequestChunks_ChunkKey* n = new CMsgClientLANP2PRequestChunks_ChunkKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientLANP2PRequestChunks_ChunkKey::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientLANP2PRequestChunks.ChunkKey)
  if (has_sha()) {
    GOOGLE_DCHECK(!sha_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*sha_.UnsafeRawStringPointer())->clear();
  }
  depot_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientLANP2PRequestChunks_ChunkKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientLANP2PRequestChunks.ChunkKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 depot_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_depot_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &depot_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes sha = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sha()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientLANP2PRequestChunks.ChunkKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientLANP2PRequestChunks.ChunkKey)
  return false;
#undef DO_
}

void CMsgClientLANP2PRequestChunks_ChunkKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientLANP2PRequestChunks.ChunkKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 depot_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->depot_id(), output);
  }

  // optional bytes sha = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->sha(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientLANP2PRequestChunks.ChunkKey)
}

::google::protobuf::uint8* CMsgClientLANP2PRequestChunks_ChunkKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientLANP2PRequestChunks.ChunkKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 depot_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->depot_id(), target);
  }

  // optional bytes sha = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->sha(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientLANP2PRequestChunks.ChunkKey)
  return target;
}

size_t CMsgClientLANP2PRequestChunks_ChunkKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientLANP2PRequestChunks.ChunkKey)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes sha = 2;
    if (has_sha()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sha());
    }

    // optional uint32 depot_id = 1;
    if (has_depot_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->depot_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientLANP2PRequestChunks_ChunkKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientLANP2PRequestChunks.ChunkKey)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientLANP2PRequestChunks_ChunkKey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientLANP2PRequestChunks_ChunkKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientLANP2PRequestChunks.ChunkKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientLANP2PRequestChunks.ChunkKey)
    MergeFrom(*source);
  }
}

void CMsgClientLANP2PRequestChunks_ChunkKey::MergeFrom(const CMsgClientLANP2PRequestChunks_ChunkKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientLANP2PRequestChunks.ChunkKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_sha();
      sha_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha_);
    }
    if (cached_has_bits & 0x00000002u) {
      depot_id_ = from.depot_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientLANP2PRequestChunks_ChunkKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientLANP2PRequestChunks.ChunkKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientLANP2PRequestChunks_ChunkKey::CopyFrom(const CMsgClientLANP2PRequestChunks_ChunkKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientLANP2PRequestChunks.ChunkKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientLANP2PRequestChunks_ChunkKey::IsInitialized() const {
  return true;
}

void CMsgClientLANP2PRequestChunks_ChunkKey::Swap(CMsgClientLANP2PRequestChunks_ChunkKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientLANP2PRequestChunks_ChunkKey::InternalSwap(CMsgClientLANP2PRequestChunks_ChunkKey* other) {
  sha_.Swap(&other->sha_);
  std::swap(depot_id_, other->depot_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientLANP2PRequestChunks_ChunkKey::GetMetadata() const {
  protobuf_steammessages_5fclientlanp2p_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientlanp2p_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientLANP2PRequestChunks_ChunkKey

// optional uint32 depot_id = 1;
bool CMsgClientLANP2PRequestChunks_ChunkKey::has_depot_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientLANP2PRequestChunks_ChunkKey::set_has_depot_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientLANP2PRequestChunks_ChunkKey::clear_has_depot_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientLANP2PRequestChunks_ChunkKey::clear_depot_id() {
  depot_id_ = 0u;
  clear_has_depot_id();
}
::google::protobuf::uint32 CMsgClientLANP2PRequestChunks_ChunkKey::depot_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLANP2PRequestChunks.ChunkKey.depot_id)
  return depot_id_;
}
void CMsgClientLANP2PRequestChunks_ChunkKey::set_depot_id(::google::protobuf::uint32 value) {
  set_has_depot_id();
  depot_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLANP2PRequestChunks.ChunkKey.depot_id)
}

// optional bytes sha = 2;
bool CMsgClientLANP2PRequestChunks_ChunkKey::has_sha() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientLANP2PRequestChunks_ChunkKey::set_has_sha() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientLANP2PRequestChunks_ChunkKey::clear_has_sha() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientLANP2PRequestChunks_ChunkKey::clear_sha() {
  sha_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sha();
}
const ::std::string& CMsgClientLANP2PRequestChunks_ChunkKey::sha() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLANP2PRequestChunks.ChunkKey.sha)
  return sha_.GetNoArena();
}
void CMsgClientLANP2PRequestChunks_ChunkKey::set_sha(const ::std::string& value) {
  set_has_sha();
  sha_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLANP2PRequestChunks.ChunkKey.sha)
}
#if LANG_CXX11
void CMsgClientLANP2PRequestChunks_ChunkKey::set_sha(::std::string&& value) {
  set_has_sha();
  sha_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientLANP2PRequestChunks.ChunkKey.sha)
}
#endif
void CMsgClientLANP2PRequestChunks_ChunkKey::set_sha(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sha();
  sha_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientLANP2PRequestChunks.ChunkKey.sha)
}
void CMsgClientLANP2PRequestChunks_ChunkKey::set_sha(const void* value, size_t size) {
  set_has_sha();
  sha_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientLANP2PRequestChunks.ChunkKey.sha)
}
::std::string* CMsgClientLANP2PRequestChunks_ChunkKey::mutable_sha() {
  set_has_sha();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientLANP2PRequestChunks.ChunkKey.sha)
  return sha_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientLANP2PRequestChunks_ChunkKey::release_sha() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientLANP2PRequestChunks.ChunkKey.sha)
  clear_has_sha();
  return sha_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientLANP2PRequestChunks_ChunkKey::set_allocated_sha(::std::string* sha) {
  if (sha != NULL) {
    set_has_sha();
  } else {
    clear_has_sha();
  }
  sha_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sha);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientLANP2PRequestChunks.ChunkKey.sha)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientLANP2PRequestChunks::kChunkKeysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientLANP2PRequestChunks::CMsgClientLANP2PRequestChunks()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientlanp2p_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientLANP2PRequestChunks)
}
CMsgClientLANP2PRequestChunks::CMsgClientLANP2PRequestChunks(const CMsgClientLANP2PRequestChunks& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      chunk_keys_(from.chunk_keys_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientLANP2PRequestChunks)
}

void CMsgClientLANP2PRequestChunks::SharedCtor() {
  _cached_size_ = 0;
}

CMsgClientLANP2PRequestChunks::~CMsgClientLANP2PRequestChunks() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientLANP2PRequestChunks)
  SharedDtor();
}

void CMsgClientLANP2PRequestChunks::SharedDtor() {
}

void CMsgClientLANP2PRequestChunks::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientLANP2PRequestChunks::descriptor() {
  protobuf_steammessages_5fclientlanp2p_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientlanp2p_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientLANP2PRequestChunks& CMsgClientLANP2PRequestChunks::default_instance() {
  protobuf_steammessages_5fclientlanp2p_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientLANP2PRequestChunks* CMsgClientLANP2PRequestChunks::New(::google::protobuf::Arena* arena) const {
  CMsgClientLANP2PRequestChunks* n = new CMsgClientLANP2PRequestChunks;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientLANP2PRequestChunks::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientLANP2PRequestChunks)
  chunk_keys_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientLANP2PRequestChunks::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientLANP2PRequestChunks)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.steam.CMsgClientLANP2PRequestChunks.ChunkKey chunk_keys = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chunk_keys()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientLANP2PRequestChunks)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientLANP2PRequestChunks)
  return false;
#undef DO_
}

void CMsgClientLANP2PRequestChunks::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientLANP2PRequestChunks)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientLANP2PRequestChunks.ChunkKey chunk_keys = 1;
  for (unsigned int i = 0, n = this->chunk_keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->chunk_keys(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientLANP2PRequestChunks)
}

::google::protobuf::uint8* CMsgClientLANP2PRequestChunks::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientLANP2PRequestChunks)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientLANP2PRequestChunks.ChunkKey chunk_keys = 1;
  for (unsigned int i = 0, n = this->chunk_keys_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->chunk_keys(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientLANP2PRequestChunks)
  return target;
}

size_t CMsgClientLANP2PRequestChunks::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientLANP2PRequestChunks)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.steam.CMsgClientLANP2PRequestChunks.ChunkKey chunk_keys = 1;
  {
    unsigned int count = this->chunk_keys_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chunk_keys(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientLANP2PRequestChunks::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientLANP2PRequestChunks)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientLANP2PRequestChunks* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientLANP2PRequestChunks>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientLANP2PRequestChunks)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientLANP2PRequestChunks)
    MergeFrom(*source);
  }
}

void CMsgClientLANP2PRequestChunks::MergeFrom(const CMsgClientLANP2PRequestChunks& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientLANP2PRequestChunks)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  chunk_keys_.MergeFrom(from.chunk_keys_);
}

void CMsgClientLANP2PRequestChunks::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientLANP2PRequestChunks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientLANP2PRequestChunks::CopyFrom(const CMsgClientLANP2PRequestChunks& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientLANP2PRequestChunks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientLANP2PRequestChunks::IsInitialized() const {
  return true;
}

void CMsgClientLANP2PRequestChunks::Swap(CMsgClientLANP2PRequestChunks* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientLANP2PRequestChunks::InternalSwap(CMsgClientLANP2PRequestChunks* other) {
  chunk_keys_.InternalSwap(&other->chunk_keys_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientLANP2PRequestChunks::GetMetadata() const {
  protobuf_steammessages_5fclientlanp2p_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientlanp2p_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientLANP2PRequestChunks

// repeated .proto.steam.CMsgClientLANP2PRequestChunks.ChunkKey chunk_keys = 1;
int CMsgClientLANP2PRequestChunks::chunk_keys_size() const {
  return chunk_keys_.size();
}
void CMsgClientLANP2PRequestChunks::clear_chunk_keys() {
  chunk_keys_.Clear();
}
const ::proto::steam::CMsgClientLANP2PRequestChunks_ChunkKey& CMsgClientLANP2PRequestChunks::chunk_keys(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLANP2PRequestChunks.chunk_keys)
  return chunk_keys_.Get(index);
}
::proto::steam::CMsgClientLANP2PRequestChunks_ChunkKey* CMsgClientLANP2PRequestChunks::mutable_chunk_keys(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientLANP2PRequestChunks.chunk_keys)
  return chunk_keys_.Mutable(index);
}
::proto::steam::CMsgClientLANP2PRequestChunks_ChunkKey* CMsgClientLANP2PRequestChunks::add_chunk_keys() {
  // @@protoc_insertion_point(field_add:proto.steam.CMsgClientLANP2PRequestChunks.chunk_keys)
  return chunk_keys_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientLANP2PRequestChunks_ChunkKey >*
CMsgClientLANP2PRequestChunks::mutable_chunk_keys() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgClientLANP2PRequestChunks.chunk_keys)
  return &chunk_keys_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientLANP2PRequestChunks_ChunkKey >&
CMsgClientLANP2PRequestChunks::chunk_keys() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgClientLANP2PRequestChunks.chunk_keys)
  return chunk_keys_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientLANP2PRequestChunksResponse_ChunkData::kResultFieldNumber;
const int CMsgClientLANP2PRequestChunksResponse_ChunkData::kDepotIdFieldNumber;
const int CMsgClientLANP2PRequestChunksResponse_ChunkData::kShaFieldNumber;
const int CMsgClientLANP2PRequestChunksResponse_ChunkData::kChunkDataFieldNumber;
const int CMsgClientLANP2PRequestChunksResponse_ChunkData::kEncryptedFieldNumber;
const int CMsgClientLANP2PRequestChunksResponse_ChunkData::kCompressedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientLANP2PRequestChunksResponse_ChunkData::CMsgClientLANP2PRequestChunksResponse_ChunkData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientlanp2p_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientLANP2PRequestChunksResponse.ChunkData)
}
CMsgClientLANP2PRequestChunksResponse_ChunkData::CMsgClientLANP2PRequestChunksResponse_ChunkData(const CMsgClientLANP2PRequestChunksResponse_ChunkData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sha_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sha()) {
    sha_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha_);
  }
  chunk_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_chunk_data()) {
    chunk_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chunk_data_);
  }
  ::memcpy(&result_, &from.result_,
    reinterpret_cast<char*>(&compressed_) -
    reinterpret_cast<char*>(&result_) + sizeof(compressed_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientLANP2PRequestChunksResponse.ChunkData)
}

void CMsgClientLANP2PRequestChunksResponse_ChunkData::SharedCtor() {
  _cached_size_ = 0;
  sha_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chunk_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&result_, 0, reinterpret_cast<char*>(&compressed_) -
    reinterpret_cast<char*>(&result_) + sizeof(compressed_));
}

CMsgClientLANP2PRequestChunksResponse_ChunkData::~CMsgClientLANP2PRequestChunksResponse_ChunkData() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientLANP2PRequestChunksResponse.ChunkData)
  SharedDtor();
}

void CMsgClientLANP2PRequestChunksResponse_ChunkData::SharedDtor() {
  sha_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chunk_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientLANP2PRequestChunksResponse_ChunkData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientLANP2PRequestChunksResponse_ChunkData::descriptor() {
  protobuf_steammessages_5fclientlanp2p_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientlanp2p_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientLANP2PRequestChunksResponse_ChunkData& CMsgClientLANP2PRequestChunksResponse_ChunkData::default_instance() {
  protobuf_steammessages_5fclientlanp2p_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientLANP2PRequestChunksResponse_ChunkData* CMsgClientLANP2PRequestChunksResponse_ChunkData::New(::google::protobuf::Arena* arena) const {
  CMsgClientLANP2PRequestChunksResponse_ChunkData* n = new CMsgClientLANP2PRequestChunksResponse_ChunkData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientLANP2PRequestChunksResponse_ChunkData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientLANP2PRequestChunksResponse.ChunkData)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_sha()) {
      GOOGLE_DCHECK(!sha_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*sha_.UnsafeRawStringPointer())->clear();
    }
    if (has_chunk_data()) {
      GOOGLE_DCHECK(!chunk_data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*chunk_data_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 60u) {
    ::memset(&result_, 0, reinterpret_cast<char*>(&compressed_) -
      reinterpret_cast<char*>(&result_) + sizeof(compressed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientLANP2PRequestChunksResponse_ChunkData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientLANP2PRequestChunksResponse.ChunkData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 depot_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_depot_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &depot_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes sha = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sha()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes chunk_data = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_chunk_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool encrypted = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_encrypted();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encrypted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool compressed = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_compressed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &compressed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientLANP2PRequestChunksResponse.ChunkData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientLANP2PRequestChunksResponse.ChunkData)
  return false;
#undef DO_
}

void CMsgClientLANP2PRequestChunksResponse_ChunkData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientLANP2PRequestChunksResponse.ChunkData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 result = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  // optional uint32 depot_id = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->depot_id(), output);
  }

  // optional bytes sha = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->sha(), output);
  }

  // optional bytes chunk_data = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->chunk_data(), output);
  }

  // optional bool encrypted = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->encrypted(), output);
  }

  // optional bool compressed = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->compressed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientLANP2PRequestChunksResponse.ChunkData)
}

::google::protobuf::uint8* CMsgClientLANP2PRequestChunksResponse_ChunkData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientLANP2PRequestChunksResponse.ChunkData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 result = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  // optional uint32 depot_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->depot_id(), target);
  }

  // optional bytes sha = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->sha(), target);
  }

  // optional bytes chunk_data = 4;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->chunk_data(), target);
  }

  // optional bool encrypted = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->encrypted(), target);
  }

  // optional bool compressed = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->compressed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientLANP2PRequestChunksResponse.ChunkData)
  return target;
}

size_t CMsgClientLANP2PRequestChunksResponse_ChunkData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientLANP2PRequestChunksResponse.ChunkData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional bytes sha = 3;
    if (has_sha()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sha());
    }

    // optional bytes chunk_data = 4;
    if (has_chunk_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->chunk_data());
    }

    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // optional uint32 depot_id = 2;
    if (has_depot_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->depot_id());
    }

    // optional bool encrypted = 5;
    if (has_encrypted()) {
      total_size += 1 + 1;
    }

    // optional bool compressed = 6;
    if (has_compressed()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientLANP2PRequestChunksResponse_ChunkData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientLANP2PRequestChunksResponse.ChunkData)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientLANP2PRequestChunksResponse_ChunkData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientLANP2PRequestChunksResponse_ChunkData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientLANP2PRequestChunksResponse.ChunkData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientLANP2PRequestChunksResponse.ChunkData)
    MergeFrom(*source);
  }
}

void CMsgClientLANP2PRequestChunksResponse_ChunkData::MergeFrom(const CMsgClientLANP2PRequestChunksResponse_ChunkData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientLANP2PRequestChunksResponse.ChunkData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_sha();
      sha_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_chunk_data();
      chunk_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chunk_data_);
    }
    if (cached_has_bits & 0x00000004u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000008u) {
      depot_id_ = from.depot_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      encrypted_ = from.encrypted_;
    }
    if (cached_has_bits & 0x00000020u) {
      compressed_ = from.compressed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientLANP2PRequestChunksResponse_ChunkData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientLANP2PRequestChunksResponse.ChunkData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientLANP2PRequestChunksResponse_ChunkData::CopyFrom(const CMsgClientLANP2PRequestChunksResponse_ChunkData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientLANP2PRequestChunksResponse.ChunkData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientLANP2PRequestChunksResponse_ChunkData::IsInitialized() const {
  return true;
}

void CMsgClientLANP2PRequestChunksResponse_ChunkData::Swap(CMsgClientLANP2PRequestChunksResponse_ChunkData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientLANP2PRequestChunksResponse_ChunkData::InternalSwap(CMsgClientLANP2PRequestChunksResponse_ChunkData* other) {
  sha_.Swap(&other->sha_);
  chunk_data_.Swap(&other->chunk_data_);
  std::swap(result_, other->result_);
  std::swap(depot_id_, other->depot_id_);
  std::swap(encrypted_, other->encrypted_);
  std::swap(compressed_, other->compressed_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientLANP2PRequestChunksResponse_ChunkData::GetMetadata() const {
  protobuf_steammessages_5fclientlanp2p_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientlanp2p_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientLANP2PRequestChunksResponse_ChunkData

// optional uint32 result = 1;
bool CMsgClientLANP2PRequestChunksResponse_ChunkData::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientLANP2PRequestChunksResponse_ChunkData::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientLANP2PRequestChunksResponse_ChunkData::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientLANP2PRequestChunksResponse_ChunkData::clear_result() {
  result_ = 0u;
  clear_has_result();
}
::google::protobuf::uint32 CMsgClientLANP2PRequestChunksResponse_ChunkData::result() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLANP2PRequestChunksResponse.ChunkData.result)
  return result_;
}
void CMsgClientLANP2PRequestChunksResponse_ChunkData::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLANP2PRequestChunksResponse.ChunkData.result)
}

// optional uint32 depot_id = 2;
bool CMsgClientLANP2PRequestChunksResponse_ChunkData::has_depot_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgClientLANP2PRequestChunksResponse_ChunkData::set_has_depot_id() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgClientLANP2PRequestChunksResponse_ChunkData::clear_has_depot_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgClientLANP2PRequestChunksResponse_ChunkData::clear_depot_id() {
  depot_id_ = 0u;
  clear_has_depot_id();
}
::google::protobuf::uint32 CMsgClientLANP2PRequestChunksResponse_ChunkData::depot_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLANP2PRequestChunksResponse.ChunkData.depot_id)
  return depot_id_;
}
void CMsgClientLANP2PRequestChunksResponse_ChunkData::set_depot_id(::google::protobuf::uint32 value) {
  set_has_depot_id();
  depot_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLANP2PRequestChunksResponse.ChunkData.depot_id)
}

// optional bytes sha = 3;
bool CMsgClientLANP2PRequestChunksResponse_ChunkData::has_sha() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientLANP2PRequestChunksResponse_ChunkData::set_has_sha() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientLANP2PRequestChunksResponse_ChunkData::clear_has_sha() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientLANP2PRequestChunksResponse_ChunkData::clear_sha() {
  sha_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sha();
}
const ::std::string& CMsgClientLANP2PRequestChunksResponse_ChunkData::sha() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLANP2PRequestChunksResponse.ChunkData.sha)
  return sha_.GetNoArena();
}
void CMsgClientLANP2PRequestChunksResponse_ChunkData::set_sha(const ::std::string& value) {
  set_has_sha();
  sha_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLANP2PRequestChunksResponse.ChunkData.sha)
}
#if LANG_CXX11
void CMsgClientLANP2PRequestChunksResponse_ChunkData::set_sha(::std::string&& value) {
  set_has_sha();
  sha_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientLANP2PRequestChunksResponse.ChunkData.sha)
}
#endif
void CMsgClientLANP2PRequestChunksResponse_ChunkData::set_sha(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sha();
  sha_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientLANP2PRequestChunksResponse.ChunkData.sha)
}
void CMsgClientLANP2PRequestChunksResponse_ChunkData::set_sha(const void* value, size_t size) {
  set_has_sha();
  sha_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientLANP2PRequestChunksResponse.ChunkData.sha)
}
::std::string* CMsgClientLANP2PRequestChunksResponse_ChunkData::mutable_sha() {
  set_has_sha();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientLANP2PRequestChunksResponse.ChunkData.sha)
  return sha_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientLANP2PRequestChunksResponse_ChunkData::release_sha() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientLANP2PRequestChunksResponse.ChunkData.sha)
  clear_has_sha();
  return sha_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientLANP2PRequestChunksResponse_ChunkData::set_allocated_sha(::std::string* sha) {
  if (sha != NULL) {
    set_has_sha();
  } else {
    clear_has_sha();
  }
  sha_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sha);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientLANP2PRequestChunksResponse.ChunkData.sha)
}

// optional bytes chunk_data = 4;
bool CMsgClientLANP2PRequestChunksResponse_ChunkData::has_chunk_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientLANP2PRequestChunksResponse_ChunkData::set_has_chunk_data() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientLANP2PRequestChunksResponse_ChunkData::clear_has_chunk_data() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientLANP2PRequestChunksResponse_ChunkData::clear_chunk_data() {
  chunk_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_chunk_data();
}
const ::std::string& CMsgClientLANP2PRequestChunksResponse_ChunkData::chunk_data() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLANP2PRequestChunksResponse.ChunkData.chunk_data)
  return chunk_data_.GetNoArena();
}
void CMsgClientLANP2PRequestChunksResponse_ChunkData::set_chunk_data(const ::std::string& value) {
  set_has_chunk_data();
  chunk_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLANP2PRequestChunksResponse.ChunkData.chunk_data)
}
#if LANG_CXX11
void CMsgClientLANP2PRequestChunksResponse_ChunkData::set_chunk_data(::std::string&& value) {
  set_has_chunk_data();
  chunk_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgClientLANP2PRequestChunksResponse.ChunkData.chunk_data)
}
#endif
void CMsgClientLANP2PRequestChunksResponse_ChunkData::set_chunk_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_chunk_data();
  chunk_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgClientLANP2PRequestChunksResponse.ChunkData.chunk_data)
}
void CMsgClientLANP2PRequestChunksResponse_ChunkData::set_chunk_data(const void* value, size_t size) {
  set_has_chunk_data();
  chunk_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgClientLANP2PRequestChunksResponse.ChunkData.chunk_data)
}
::std::string* CMsgClientLANP2PRequestChunksResponse_ChunkData::mutable_chunk_data() {
  set_has_chunk_data();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientLANP2PRequestChunksResponse.ChunkData.chunk_data)
  return chunk_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientLANP2PRequestChunksResponse_ChunkData::release_chunk_data() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgClientLANP2PRequestChunksResponse.ChunkData.chunk_data)
  clear_has_chunk_data();
  return chunk_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientLANP2PRequestChunksResponse_ChunkData::set_allocated_chunk_data(::std::string* chunk_data) {
  if (chunk_data != NULL) {
    set_has_chunk_data();
  } else {
    clear_has_chunk_data();
  }
  chunk_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chunk_data);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgClientLANP2PRequestChunksResponse.ChunkData.chunk_data)
}

// optional bool encrypted = 5;
bool CMsgClientLANP2PRequestChunksResponse_ChunkData::has_encrypted() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgClientLANP2PRequestChunksResponse_ChunkData::set_has_encrypted() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgClientLANP2PRequestChunksResponse_ChunkData::clear_has_encrypted() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgClientLANP2PRequestChunksResponse_ChunkData::clear_encrypted() {
  encrypted_ = false;
  clear_has_encrypted();
}
bool CMsgClientLANP2PRequestChunksResponse_ChunkData::encrypted() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLANP2PRequestChunksResponse.ChunkData.encrypted)
  return encrypted_;
}
void CMsgClientLANP2PRequestChunksResponse_ChunkData::set_encrypted(bool value) {
  set_has_encrypted();
  encrypted_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLANP2PRequestChunksResponse.ChunkData.encrypted)
}

// optional bool compressed = 6;
bool CMsgClientLANP2PRequestChunksResponse_ChunkData::has_compressed() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgClientLANP2PRequestChunksResponse_ChunkData::set_has_compressed() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgClientLANP2PRequestChunksResponse_ChunkData::clear_has_compressed() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgClientLANP2PRequestChunksResponse_ChunkData::clear_compressed() {
  compressed_ = false;
  clear_has_compressed();
}
bool CMsgClientLANP2PRequestChunksResponse_ChunkData::compressed() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLANP2PRequestChunksResponse.ChunkData.compressed)
  return compressed_;
}
void CMsgClientLANP2PRequestChunksResponse_ChunkData::set_compressed(bool value) {
  set_has_compressed();
  compressed_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgClientLANP2PRequestChunksResponse.ChunkData.compressed)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientLANP2PRequestChunksResponse::kChunkResponsesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientLANP2PRequestChunksResponse::CMsgClientLANP2PRequestChunksResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fclientlanp2p_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgClientLANP2PRequestChunksResponse)
}
CMsgClientLANP2PRequestChunksResponse::CMsgClientLANP2PRequestChunksResponse(const CMsgClientLANP2PRequestChunksResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      chunk_responses_(from.chunk_responses_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgClientLANP2PRequestChunksResponse)
}

void CMsgClientLANP2PRequestChunksResponse::SharedCtor() {
  _cached_size_ = 0;
}

CMsgClientLANP2PRequestChunksResponse::~CMsgClientLANP2PRequestChunksResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgClientLANP2PRequestChunksResponse)
  SharedDtor();
}

void CMsgClientLANP2PRequestChunksResponse::SharedDtor() {
}

void CMsgClientLANP2PRequestChunksResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientLANP2PRequestChunksResponse::descriptor() {
  protobuf_steammessages_5fclientlanp2p_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientlanp2p_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientLANP2PRequestChunksResponse& CMsgClientLANP2PRequestChunksResponse::default_instance() {
  protobuf_steammessages_5fclientlanp2p_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientLANP2PRequestChunksResponse* CMsgClientLANP2PRequestChunksResponse::New(::google::protobuf::Arena* arena) const {
  CMsgClientLANP2PRequestChunksResponse* n = new CMsgClientLANP2PRequestChunksResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientLANP2PRequestChunksResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgClientLANP2PRequestChunksResponse)
  chunk_responses_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientLANP2PRequestChunksResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgClientLANP2PRequestChunksResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.steam.CMsgClientLANP2PRequestChunksResponse.ChunkData chunk_responses = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chunk_responses()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgClientLANP2PRequestChunksResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgClientLANP2PRequestChunksResponse)
  return false;
#undef DO_
}

void CMsgClientLANP2PRequestChunksResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgClientLANP2PRequestChunksResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientLANP2PRequestChunksResponse.ChunkData chunk_responses = 1;
  for (unsigned int i = 0, n = this->chunk_responses_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->chunk_responses(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgClientLANP2PRequestChunksResponse)
}

::google::protobuf::uint8* CMsgClientLANP2PRequestChunksResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgClientLANP2PRequestChunksResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgClientLANP2PRequestChunksResponse.ChunkData chunk_responses = 1;
  for (unsigned int i = 0, n = this->chunk_responses_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->chunk_responses(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgClientLANP2PRequestChunksResponse)
  return target;
}

size_t CMsgClientLANP2PRequestChunksResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgClientLANP2PRequestChunksResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.steam.CMsgClientLANP2PRequestChunksResponse.ChunkData chunk_responses = 1;
  {
    unsigned int count = this->chunk_responses_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chunk_responses(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientLANP2PRequestChunksResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgClientLANP2PRequestChunksResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientLANP2PRequestChunksResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientLANP2PRequestChunksResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgClientLANP2PRequestChunksResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgClientLANP2PRequestChunksResponse)
    MergeFrom(*source);
  }
}

void CMsgClientLANP2PRequestChunksResponse::MergeFrom(const CMsgClientLANP2PRequestChunksResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgClientLANP2PRequestChunksResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  chunk_responses_.MergeFrom(from.chunk_responses_);
}

void CMsgClientLANP2PRequestChunksResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgClientLANP2PRequestChunksResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientLANP2PRequestChunksResponse::CopyFrom(const CMsgClientLANP2PRequestChunksResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgClientLANP2PRequestChunksResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientLANP2PRequestChunksResponse::IsInitialized() const {
  return true;
}

void CMsgClientLANP2PRequestChunksResponse::Swap(CMsgClientLANP2PRequestChunksResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientLANP2PRequestChunksResponse::InternalSwap(CMsgClientLANP2PRequestChunksResponse* other) {
  chunk_responses_.InternalSwap(&other->chunk_responses_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientLANP2PRequestChunksResponse::GetMetadata() const {
  protobuf_steammessages_5fclientlanp2p_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fclientlanp2p_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientLANP2PRequestChunksResponse

// repeated .proto.steam.CMsgClientLANP2PRequestChunksResponse.ChunkData chunk_responses = 1;
int CMsgClientLANP2PRequestChunksResponse::chunk_responses_size() const {
  return chunk_responses_.size();
}
void CMsgClientLANP2PRequestChunksResponse::clear_chunk_responses() {
  chunk_responses_.Clear();
}
const ::proto::steam::CMsgClientLANP2PRequestChunksResponse_ChunkData& CMsgClientLANP2PRequestChunksResponse::chunk_responses(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgClientLANP2PRequestChunksResponse.chunk_responses)
  return chunk_responses_.Get(index);
}
::proto::steam::CMsgClientLANP2PRequestChunksResponse_ChunkData* CMsgClientLANP2PRequestChunksResponse::mutable_chunk_responses(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgClientLANP2PRequestChunksResponse.chunk_responses)
  return chunk_responses_.Mutable(index);
}
::proto::steam::CMsgClientLANP2PRequestChunksResponse_ChunkData* CMsgClientLANP2PRequestChunksResponse::add_chunk_responses() {
  // @@protoc_insertion_point(field_add:proto.steam.CMsgClientLANP2PRequestChunksResponse.chunk_responses)
  return chunk_responses_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientLANP2PRequestChunksResponse_ChunkData >*
CMsgClientLANP2PRequestChunksResponse::mutable_chunk_responses() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgClientLANP2PRequestChunksResponse.chunk_responses)
  return &chunk_responses_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgClientLANP2PRequestChunksResponse_ChunkData >&
CMsgClientLANP2PRequestChunksResponse::chunk_responses() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgClientLANP2PRequestChunksResponse.chunk_responses)
  return chunk_responses_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace steam
}  // namespace proto

// @@protoc_insertion_point(global_scope)
