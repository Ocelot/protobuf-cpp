// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_remoteclient_discovery.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "steammessages_remoteclient_discovery.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace steam {
class CMsgRemoteClientBroadcastHeaderDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgRemoteClientBroadcastHeader> {
} _CMsgRemoteClientBroadcastHeader_default_instance_;
class CMsgRemoteClientBroadcastStatus_UserDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgRemoteClientBroadcastStatus_User> {
} _CMsgRemoteClientBroadcastStatus_User_default_instance_;
class CMsgRemoteClientBroadcastStatusDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgRemoteClientBroadcastStatus> {
} _CMsgRemoteClientBroadcastStatus_default_instance_;
class CMsgRemoteClientBroadcastDiscoveryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgRemoteClientBroadcastDiscovery> {
} _CMsgRemoteClientBroadcastDiscovery_default_instance_;
class CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_TicketDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket> {
} _CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket_default_instance_;
class CMsgRemoteDeviceAuthorizationRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgRemoteDeviceAuthorizationRequest> {
} _CMsgRemoteDeviceAuthorizationRequest_default_instance_;
class CMsgRemoteDeviceAuthorizationCancelRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgRemoteDeviceAuthorizationCancelRequest> {
} _CMsgRemoteDeviceAuthorizationCancelRequest_default_instance_;
class CMsgRemoteDeviceAuthorizationResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgRemoteDeviceAuthorizationResponse> {
} _CMsgRemoteDeviceAuthorizationResponse_default_instance_;
class CMsgRemoteDeviceStreamingRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgRemoteDeviceStreamingRequest> {
} _CMsgRemoteDeviceStreamingRequest_default_instance_;
class CMsgRemoteDeviceStreamingCancelRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgRemoteDeviceStreamingCancelRequest> {
} _CMsgRemoteDeviceStreamingCancelRequest_default_instance_;
class CMsgRemoteDeviceStreamingResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgRemoteDeviceStreamingResponse> {
} _CMsgRemoteDeviceStreamingResponse_default_instance_;
class CMsgRemoteDeviceProofRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgRemoteDeviceProofRequest> {
} _CMsgRemoteDeviceProofRequest_default_instance_;
class CMsgRemoteDeviceProofResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgRemoteDeviceProofResponse> {
} _CMsgRemoteDeviceProofResponse_default_instance_;

namespace protobuf_steammessages_5fremoteclient_5fdiscovery_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[13];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[5];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteClientBroadcastHeader, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteClientBroadcastHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteClientBroadcastHeader, client_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteClientBroadcastHeader, msg_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteClientBroadcastHeader, instance_id_),
  0,
  2,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteClientBroadcastStatus_User, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteClientBroadcastStatus_User, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteClientBroadcastStatus_User, steamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteClientBroadcastStatus_User, auth_key_id_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteClientBroadcastStatus, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteClientBroadcastStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteClientBroadcastStatus, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteClientBroadcastStatus, min_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteClientBroadcastStatus, connect_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteClientBroadcastStatus, hostname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteClientBroadcastStatus, enabled_services_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteClientBroadcastStatus, ostype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteClientBroadcastStatus, is64bit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteClientBroadcastStatus, users_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteClientBroadcastStatus, euniverse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteClientBroadcastStatus, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteClientBroadcastStatus, screen_locked_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteClientBroadcastStatus, games_running_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteClientBroadcastStatus, mac_addresses_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteClientBroadcastStatus, download_lan_peer_group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteClientBroadcastStatus, broadcasting_active_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteClientBroadcastStatus, vr_active_),
  1,
  2,
  3,
  0,
  4,
  5,
  8,
  ~0u,
  6,
  7,
  9,
  10,
  ~0u,
  12,
  11,
  13,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteClientBroadcastDiscovery, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteClientBroadcastDiscovery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteClientBroadcastDiscovery, seq_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteClientBroadcastDiscovery, client_ids_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket, password_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket, identifier_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket, payload_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket, usage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket, device_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket, device_model_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket, device_serial_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket, device_provisioning_id_),
  0,
  5,
  1,
  6,
  7,
  2,
  3,
  4,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteDeviceAuthorizationRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteDeviceAuthorizationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteDeviceAuthorizationRequest, device_token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteDeviceAuthorizationRequest, device_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteDeviceAuthorizationRequest, encrypted_request_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteDeviceAuthorizationCancelRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteDeviceAuthorizationCancelRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteDeviceAuthorizationResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteDeviceAuthorizationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteDeviceAuthorizationResponse, result_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteDeviceStreamingRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteDeviceStreamingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteDeviceStreamingRequest, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteDeviceStreamingRequest, maximum_resolution_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteDeviceStreamingRequest, maximum_resolution_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteDeviceStreamingRequest, audio_channel_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteDeviceStreamingRequest, device_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteDeviceStreamingRequest, stream_desktop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteDeviceStreamingRequest, device_token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteDeviceStreamingRequest, pin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteDeviceStreamingRequest, enable_video_streaming_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteDeviceStreamingRequest, enable_audio_streaming_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteDeviceStreamingRequest, enable_input_streaming_),
  3,
  4,
  5,
  7,
  0,
  6,
  1,
  2,
  8,
  9,
  10,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteDeviceStreamingCancelRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteDeviceStreamingCancelRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteDeviceStreamingCancelRequest, request_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteDeviceStreamingResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteDeviceStreamingResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteDeviceStreamingResponse, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteDeviceStreamingResponse, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteDeviceStreamingResponse, port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteDeviceStreamingResponse, encrypted_session_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteDeviceStreamingResponse, virtualhere_licensed_device_count_obsolete_),
  1,
  2,
  3,
  0,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteDeviceProofRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteDeviceProofRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteDeviceProofRequest, challenge_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteDeviceProofResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteDeviceProofResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteDeviceProofResponse, response_),
  0,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 8, sizeof(CMsgRemoteClientBroadcastHeader)},
  { 11, 18, sizeof(CMsgRemoteClientBroadcastStatus_User)},
  { 20, 41, sizeof(CMsgRemoteClientBroadcastStatus)},
  { 57, 64, sizeof(CMsgRemoteClientBroadcastDiscovery)},
  { 66, 80, sizeof(CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket)},
  { 89, 97, sizeof(CMsgRemoteDeviceAuthorizationRequest)},
  { 100, 105, sizeof(CMsgRemoteDeviceAuthorizationCancelRequest)},
  { 105, 111, sizeof(CMsgRemoteDeviceAuthorizationResponse)},
  { 112, 128, sizeof(CMsgRemoteDeviceStreamingRequest)},
  { 139, 145, sizeof(CMsgRemoteDeviceStreamingCancelRequest)},
  { 146, 156, sizeof(CMsgRemoteDeviceStreamingResponse)},
  { 161, 167, sizeof(CMsgRemoteDeviceProofRequest)},
  { 168, 174, sizeof(CMsgRemoteDeviceProofResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgRemoteClientBroadcastHeader_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgRemoteClientBroadcastStatus_User_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgRemoteClientBroadcastStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgRemoteClientBroadcastDiscovery_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgRemoteDeviceAuthorizationRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgRemoteDeviceAuthorizationCancelRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgRemoteDeviceAuthorizationResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgRemoteDeviceStreamingRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgRemoteDeviceStreamingCancelRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgRemoteDeviceStreamingResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgRemoteDeviceProofRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgRemoteDeviceProofResponse_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "steammessages_remoteclient_discovery.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 13);
}

}  // namespace

void TableStruct::Shutdown() {
  _CMsgRemoteClientBroadcastHeader_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _CMsgRemoteClientBroadcastStatus_User_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _CMsgRemoteClientBroadcastStatus_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _CMsgRemoteClientBroadcastDiscovery_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _CMsgRemoteDeviceAuthorizationRequest_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _CMsgRemoteDeviceAuthorizationCancelRequest_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _CMsgRemoteDeviceAuthorizationResponse_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _CMsgRemoteDeviceStreamingRequest_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _CMsgRemoteDeviceStreamingCancelRequest_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _CMsgRemoteDeviceStreamingResponse_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _CMsgRemoteDeviceProofRequest_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _CMsgRemoteDeviceProofResponse_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _CMsgRemoteClientBroadcastHeader_default_instance_.DefaultConstruct();
  _CMsgRemoteClientBroadcastStatus_User_default_instance_.DefaultConstruct();
  _CMsgRemoteClientBroadcastStatus_default_instance_.DefaultConstruct();
  _CMsgRemoteClientBroadcastDiscovery_default_instance_.DefaultConstruct();
  _CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket_default_instance_.DefaultConstruct();
  _CMsgRemoteDeviceAuthorizationRequest_default_instance_.DefaultConstruct();
  _CMsgRemoteDeviceAuthorizationCancelRequest_default_instance_.DefaultConstruct();
  _CMsgRemoteDeviceAuthorizationResponse_default_instance_.DefaultConstruct();
  _CMsgRemoteDeviceStreamingRequest_default_instance_.DefaultConstruct();
  _CMsgRemoteDeviceStreamingCancelRequest_default_instance_.DefaultConstruct();
  _CMsgRemoteDeviceStreamingResponse_default_instance_.DefaultConstruct();
  _CMsgRemoteDeviceProofRequest_default_instance_.DefaultConstruct();
  _CMsgRemoteDeviceProofResponse_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n*steammessages_remoteclient_discovery.p"
      "roto\022\013proto.steam\"\251\001\n\037CMsgRemoteClientBr"
      "oadcastHeader\022\021\n\tclient_id\030\001 \001(\004\022^\n\010msg_"
      "type\030\002 \001(\0162&.proto.steam.ERemoteClientBr"
      "oadcastMsg:$k_ERemoteClientBroadcastMsgD"
      "iscovery\022\023\n\013instance_id\030\003 \001(\004\"\340\003\n\037CMsgRe"
      "moteClientBroadcastStatus\022\017\n\007version\030\001 \001"
      "(\005\022\023\n\013min_version\030\002 \001(\005\022\024\n\014connect_port\030"
      "\003 \001(\r\022\020\n\010hostname\030\004 \001(\t\022\030\n\020enabled_servi"
      "ces\030\006 \001(\r\022\021\n\006ostype\030\007 \001(\005:\0010\022\026\n\007is64bit\030"
      "\010 \001(\010:\005false\022@\n\005users\030\t \003(\01321.proto.stea"
      "m.CMsgRemoteClientBroadcastStatus.User\022\021"
      "\n\teuniverse\030\013 \001(\005\022\021\n\ttimestamp\030\014 \001(\r\022\025\n\r"
      "screen_locked\030\r \001(\010\022\025\n\rgames_running\030\016 \001"
      "(\010\022\025\n\rmac_addresses\030\017 \003(\t\022\037\n\027download_la"
      "n_peer_group\030\020 \001(\r\022\033\n\023broadcasting_activ"
      "e\030\021 \001(\010\022\021\n\tvr_active\030\022 \001(\010\032,\n\004User\022\017\n\007st"
      "eamid\030\001 \001(\006\022\023\n\013auth_key_id\030\002 \001(\r\"I\n\"CMsg"
      "RemoteClientBroadcastDiscovery\022\017\n\007seq_nu"
      "m\030\001 \001(\r\022\022\n\nclient_ids\030\002 \003(\004\"\333\003\n$CMsgRemo"
      "teDeviceAuthorizationRequest\022\024\n\014device_t"
      "oken\030\001 \002(\014\022\023\n\013device_name\030\002 \001(\t\022\031\n\021encry"
      "pted_request\030\003 \002(\014\032\263\002\n\021CKeyEscrow_Ticket"
      "\022\020\n\010password\030\001 \001(\014\022\022\n\nidentifier\030\002 \001(\004\022\017"
      "\n\007payload\030\003 \001(\014\022\021\n\ttimestamp\030\004 \001(\r\022r\n\005us"
      "age\030\005 \001(\0162A.proto.steam.CMsgRemoteDevice"
      "AuthorizationRequest.EKeyEscrowUsage: k_"
      "EKeyEscrowUsageStreamingDevice\022\023\n\013device"
      "_name\030\006 \001(\t\022\024\n\014device_model\030\007 \001(\t\022\025\n\rdev"
      "ice_serial\030\010 \001(\t\022\036\n\026device_provisioning_"
      "id\030\t \001(\r\"7\n\017EKeyEscrowUsage\022$\n k_EKeyEsc"
      "rowUsageStreamingDevice\020\000\",\n*CMsgRemoteD"
      "eviceAuthorizationCancelRequest\"\213\001\n%CMsg"
      "RemoteDeviceAuthorizationResponse\022b\n\006res"
      "ult\030\001 \002(\0162-.proto.steam.ERemoteDeviceAut"
      "horizationResult:#k_ERemoteDeviceAuthori"
      "zationSuccess\"\327\002\n CMsgRemoteDeviceStream"
      "ingRequest\022\022\n\nrequest_id\030\001 \002(\r\022\034\n\024maximu"
      "m_resolution_x\030\002 \001(\005\022\034\n\024maximum_resoluti"
      "on_y\030\003 \001(\005\022\036\n\023audio_channel_count\030\004 \001(\005:"
      "\0012\022\026\n\016device_version\030\005 \001(\t\022\026\n\016stream_des"
      "ktop\030\006 \001(\010\022\024\n\014device_token\030\007 \001(\014\022\013\n\003pin\030"
      "\010 \001(\014\022$\n\026enable_video_streaming\030\t \001(\010:\004t"
      "rue\022$\n\026enable_audio_streaming\030\n \001(\010:\004tru"
      "e\022$\n\026enable_input_streaming\030\013 \001(\010:\004true\""
      "<\n&CMsgRemoteDeviceStreamingCancelReques"
      "t\022\022\n\nrequest_id\030\001 \002(\r\"\364\001\n!CMsgRemoteDevi"
      "ceStreamingResponse\022\022\n\nrequest_id\030\001 \002(\r\022"
      "Z\n\006result\030\002 \002(\0162).proto.steam.ERemoteDev"
      "iceStreamingResult:\037k_ERemoteDeviceStrea"
      "mingSuccess\022\014\n\004port\030\003 \001(\r\022\035\n\025encrypted_s"
      "ession_key\030\004 \001(\014\0222\n*virtualhere_licensed"
      "_device_count_OBSOLETE\030\005 \001(\005\"1\n\034CMsgRemo"
      "teDeviceProofRequest\022\021\n\tchallenge\030\001 \002(\014\""
      "1\n\035CMsgRemoteDeviceProofResponse\022\020\n\010resp"
      "onse\030\001 \002(\014*\317\003\n\031ERemoteClientBroadcastMsg"
      "\022(\n$k_ERemoteClientBroadcastMsgDiscovery"
      "\020\000\022%\n!k_ERemoteClientBroadcastMsgStatus\020"
      "\001\022&\n\"k_ERemoteClientBroadcastMsgOffline\020"
      "\002\022\'\n#k_ERemoteDeviceAuthorizationRequest"
      "\020\003\022(\n$k_ERemoteDeviceAuthorizationRespon"
      "se\020\004\022#\n\037k_ERemoteDeviceStreamingRequest\020"
      "\005\022$\n k_ERemoteDeviceStreamingResponse\020\006\022"
      "\037\n\033k_ERemoteDeviceProofRequest\020\007\022 \n\034k_ER"
      "emoteDeviceProofResponse\020\010\022-\n)k_ERemoteD"
      "eviceAuthorizationCancelRequest\020\t\022)\n%k_E"
      "RemoteDeviceStreamingCancelRequest\020\n*\257\001\n"
      "\024ERemoteClientService\022\036\n\032k_ERemoteClient"
      "ServiceNone\020\000\022\'\n#k_ERemoteClientServiceR"
      "emoteControl\020\001\022\'\n#k_ERemoteClientService"
      "GameStreaming\020\002\022%\n!k_ERemoteClientServic"
      "eSiteLicense\020\004*\227\003\n ERemoteDeviceAuthoriz"
      "ationResult\022\'\n#k_ERemoteDeviceAuthorizat"
      "ionSuccess\020\000\022&\n\"k_ERemoteDeviceAuthoriza"
      "tionDenied\020\001\022+\n\'k_ERemoteDeviceAuthoriza"
      "tionNotLoggedIn\020\002\022\'\n#k_ERemoteDeviceAuth"
      "orizationOffline\020\003\022$\n k_ERemoteDeviceAut"
      "horizationBusy\020\004\022*\n&k_ERemoteDeviceAutho"
      "rizationInProgress\020\005\022(\n$k_ERemoteDeviceA"
      "uthorizationTimedOut\020\006\022&\n\"k_ERemoteDevic"
      "eAuthorizationFailed\020\007\022(\n$k_ERemoteDevic"
      "eAuthorizationCanceled\020\010*\201\004\n\034ERemoteDevi"
      "ceStreamingResult\022#\n\037k_ERemoteDeviceStre"
      "amingSuccess\020\000\022(\n$k_ERemoteDeviceStreami"
      "ngUnauthorized\020\001\022(\n$k_ERemoteDeviceStrea"
      "mingScreenLocked\020\002\022\"\n\036k_ERemoteDeviceStr"
      "eamingFailed\020\003\022 \n\034k_ERemoteDeviceStreami"
      "ngBusy\020\004\022&\n\"k_ERemoteDeviceStreamingInPr"
      "ogress\020\005\022$\n k_ERemoteDeviceStreamingCanc"
      "eled\020\006\022/\n+k_ERemoteDeviceStreamingDriver"
      "sNotInstalled\020\007\022$\n k_ERemoteDeviceStream"
      "ingDisabled\020\010\022.\n*k_ERemoteDeviceStreamin"
      "gBroadcastingActive\020\t\022$\n k_ERemoteDevice"
      "StreamingVRActive\020\n\022\'\n#k_ERemoteDeviceSt"
      "reamingPINRequired\020\013B\002H\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3784);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "steammessages_remoteclient_discovery.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_steammessages_5fremoteclient_5fdiscovery_2eproto

const ::google::protobuf::EnumDescriptor* CMsgRemoteDeviceAuthorizationRequest_EKeyEscrowUsage_descriptor() {
  protobuf_steammessages_5fremoteclient_5fdiscovery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fremoteclient_5fdiscovery_2eproto::file_level_enum_descriptors[0];
}
bool CMsgRemoteDeviceAuthorizationRequest_EKeyEscrowUsage_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgRemoteDeviceAuthorizationRequest_EKeyEscrowUsage CMsgRemoteDeviceAuthorizationRequest::k_EKeyEscrowUsageStreamingDevice;
const CMsgRemoteDeviceAuthorizationRequest_EKeyEscrowUsage CMsgRemoteDeviceAuthorizationRequest::EKeyEscrowUsage_MIN;
const CMsgRemoteDeviceAuthorizationRequest_EKeyEscrowUsage CMsgRemoteDeviceAuthorizationRequest::EKeyEscrowUsage_MAX;
const int CMsgRemoteDeviceAuthorizationRequest::EKeyEscrowUsage_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ERemoteClientBroadcastMsg_descriptor() {
  protobuf_steammessages_5fremoteclient_5fdiscovery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fremoteclient_5fdiscovery_2eproto::file_level_enum_descriptors[1];
}
bool ERemoteClientBroadcastMsg_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ERemoteClientService_descriptor() {
  protobuf_steammessages_5fremoteclient_5fdiscovery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fremoteclient_5fdiscovery_2eproto::file_level_enum_descriptors[2];
}
bool ERemoteClientService_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ERemoteDeviceAuthorizationResult_descriptor() {
  protobuf_steammessages_5fremoteclient_5fdiscovery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fremoteclient_5fdiscovery_2eproto::file_level_enum_descriptors[3];
}
bool ERemoteDeviceAuthorizationResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ERemoteDeviceStreamingResult_descriptor() {
  protobuf_steammessages_5fremoteclient_5fdiscovery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fremoteclient_5fdiscovery_2eproto::file_level_enum_descriptors[4];
}
bool ERemoteDeviceStreamingResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgRemoteClientBroadcastHeader::kClientIdFieldNumber;
const int CMsgRemoteClientBroadcastHeader::kMsgTypeFieldNumber;
const int CMsgRemoteClientBroadcastHeader::kInstanceIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgRemoteClientBroadcastHeader::CMsgRemoteClientBroadcastHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fremoteclient_5fdiscovery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgRemoteClientBroadcastHeader)
}
CMsgRemoteClientBroadcastHeader::CMsgRemoteClientBroadcastHeader(const CMsgRemoteClientBroadcastHeader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&client_id_, &from.client_id_,
    reinterpret_cast<char*>(&msg_type_) -
    reinterpret_cast<char*>(&client_id_) + sizeof(msg_type_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgRemoteClientBroadcastHeader)
}

void CMsgRemoteClientBroadcastHeader::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&client_id_, 0, reinterpret_cast<char*>(&msg_type_) -
    reinterpret_cast<char*>(&client_id_) + sizeof(msg_type_));
}

CMsgRemoteClientBroadcastHeader::~CMsgRemoteClientBroadcastHeader() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgRemoteClientBroadcastHeader)
  SharedDtor();
}

void CMsgRemoteClientBroadcastHeader::SharedDtor() {
}

void CMsgRemoteClientBroadcastHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgRemoteClientBroadcastHeader::descriptor() {
  protobuf_steammessages_5fremoteclient_5fdiscovery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fremoteclient_5fdiscovery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgRemoteClientBroadcastHeader& CMsgRemoteClientBroadcastHeader::default_instance() {
  protobuf_steammessages_5fremoteclient_5fdiscovery_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgRemoteClientBroadcastHeader* CMsgRemoteClientBroadcastHeader::New(::google::protobuf::Arena* arena) const {
  CMsgRemoteClientBroadcastHeader* n = new CMsgRemoteClientBroadcastHeader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgRemoteClientBroadcastHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgRemoteClientBroadcastHeader)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&client_id_, 0, reinterpret_cast<char*>(&msg_type_) -
      reinterpret_cast<char*>(&client_id_) + sizeof(msg_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgRemoteClientBroadcastHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgRemoteClientBroadcastHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 client_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_client_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &client_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.steam.ERemoteClientBroadcastMsg msg_type = 2 [default = k_ERemoteClientBroadcastMsgDiscovery];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::steam::ERemoteClientBroadcastMsg_IsValid(value)) {
            set_msg_type(static_cast< ::proto::steam::ERemoteClientBroadcastMsg >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 instance_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_instance_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &instance_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgRemoteClientBroadcastHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgRemoteClientBroadcastHeader)
  return false;
#undef DO_
}

void CMsgRemoteClientBroadcastHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgRemoteClientBroadcastHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 client_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->client_id(), output);
  }

  // optional .proto.steam.ERemoteClientBroadcastMsg msg_type = 2 [default = k_ERemoteClientBroadcastMsgDiscovery];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->msg_type(), output);
  }

  // optional uint64 instance_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->instance_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgRemoteClientBroadcastHeader)
}

::google::protobuf::uint8* CMsgRemoteClientBroadcastHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgRemoteClientBroadcastHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 client_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->client_id(), target);
  }

  // optional .proto.steam.ERemoteClientBroadcastMsg msg_type = 2 [default = k_ERemoteClientBroadcastMsgDiscovery];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->msg_type(), target);
  }

  // optional uint64 instance_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->instance_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgRemoteClientBroadcastHeader)
  return target;
}

size_t CMsgRemoteClientBroadcastHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgRemoteClientBroadcastHeader)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint64 client_id = 1;
    if (has_client_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->client_id());
    }

    // optional uint64 instance_id = 3;
    if (has_instance_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->instance_id());
    }

    // optional .proto.steam.ERemoteClientBroadcastMsg msg_type = 2 [default = k_ERemoteClientBroadcastMsgDiscovery];
    if (has_msg_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgRemoteClientBroadcastHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgRemoteClientBroadcastHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgRemoteClientBroadcastHeader* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgRemoteClientBroadcastHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgRemoteClientBroadcastHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgRemoteClientBroadcastHeader)
    MergeFrom(*source);
  }
}

void CMsgRemoteClientBroadcastHeader::MergeFrom(const CMsgRemoteClientBroadcastHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgRemoteClientBroadcastHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      client_id_ = from.client_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      instance_id_ = from.instance_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      msg_type_ = from.msg_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgRemoteClientBroadcastHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgRemoteClientBroadcastHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRemoteClientBroadcastHeader::CopyFrom(const CMsgRemoteClientBroadcastHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgRemoteClientBroadcastHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRemoteClientBroadcastHeader::IsInitialized() const {
  return true;
}

void CMsgRemoteClientBroadcastHeader::Swap(CMsgRemoteClientBroadcastHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgRemoteClientBroadcastHeader::InternalSwap(CMsgRemoteClientBroadcastHeader* other) {
  std::swap(client_id_, other->client_id_);
  std::swap(instance_id_, other->instance_id_);
  std::swap(msg_type_, other->msg_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgRemoteClientBroadcastHeader::GetMetadata() const {
  protobuf_steammessages_5fremoteclient_5fdiscovery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fremoteclient_5fdiscovery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgRemoteClientBroadcastHeader

// optional uint64 client_id = 1;
bool CMsgRemoteClientBroadcastHeader::has_client_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgRemoteClientBroadcastHeader::set_has_client_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgRemoteClientBroadcastHeader::clear_has_client_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgRemoteClientBroadcastHeader::clear_client_id() {
  client_id_ = GOOGLE_ULONGLONG(0);
  clear_has_client_id();
}
::google::protobuf::uint64 CMsgRemoteClientBroadcastHeader::client_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteClientBroadcastHeader.client_id)
  return client_id_;
}
void CMsgRemoteClientBroadcastHeader::set_client_id(::google::protobuf::uint64 value) {
  set_has_client_id();
  client_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteClientBroadcastHeader.client_id)
}

// optional .proto.steam.ERemoteClientBroadcastMsg msg_type = 2 [default = k_ERemoteClientBroadcastMsgDiscovery];
bool CMsgRemoteClientBroadcastHeader::has_msg_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgRemoteClientBroadcastHeader::set_has_msg_type() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgRemoteClientBroadcastHeader::clear_has_msg_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgRemoteClientBroadcastHeader::clear_msg_type() {
  msg_type_ = 0;
  clear_has_msg_type();
}
::proto::steam::ERemoteClientBroadcastMsg CMsgRemoteClientBroadcastHeader::msg_type() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteClientBroadcastHeader.msg_type)
  return static_cast< ::proto::steam::ERemoteClientBroadcastMsg >(msg_type_);
}
void CMsgRemoteClientBroadcastHeader::set_msg_type(::proto::steam::ERemoteClientBroadcastMsg value) {
  assert(::proto::steam::ERemoteClientBroadcastMsg_IsValid(value));
  set_has_msg_type();
  msg_type_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteClientBroadcastHeader.msg_type)
}

// optional uint64 instance_id = 3;
bool CMsgRemoteClientBroadcastHeader::has_instance_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgRemoteClientBroadcastHeader::set_has_instance_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgRemoteClientBroadcastHeader::clear_has_instance_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgRemoteClientBroadcastHeader::clear_instance_id() {
  instance_id_ = GOOGLE_ULONGLONG(0);
  clear_has_instance_id();
}
::google::protobuf::uint64 CMsgRemoteClientBroadcastHeader::instance_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteClientBroadcastHeader.instance_id)
  return instance_id_;
}
void CMsgRemoteClientBroadcastHeader::set_instance_id(::google::protobuf::uint64 value) {
  set_has_instance_id();
  instance_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteClientBroadcastHeader.instance_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgRemoteClientBroadcastStatus_User::kSteamidFieldNumber;
const int CMsgRemoteClientBroadcastStatus_User::kAuthKeyIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgRemoteClientBroadcastStatus_User::CMsgRemoteClientBroadcastStatus_User()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fremoteclient_5fdiscovery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgRemoteClientBroadcastStatus.User)
}
CMsgRemoteClientBroadcastStatus_User::CMsgRemoteClientBroadcastStatus_User(const CMsgRemoteClientBroadcastStatus_User& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    reinterpret_cast<char*>(&auth_key_id_) -
    reinterpret_cast<char*>(&steamid_) + sizeof(auth_key_id_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgRemoteClientBroadcastStatus.User)
}

void CMsgRemoteClientBroadcastStatus_User::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&steamid_, 0, reinterpret_cast<char*>(&auth_key_id_) -
    reinterpret_cast<char*>(&steamid_) + sizeof(auth_key_id_));
}

CMsgRemoteClientBroadcastStatus_User::~CMsgRemoteClientBroadcastStatus_User() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgRemoteClientBroadcastStatus.User)
  SharedDtor();
}

void CMsgRemoteClientBroadcastStatus_User::SharedDtor() {
}

void CMsgRemoteClientBroadcastStatus_User::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgRemoteClientBroadcastStatus_User::descriptor() {
  protobuf_steammessages_5fremoteclient_5fdiscovery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fremoteclient_5fdiscovery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgRemoteClientBroadcastStatus_User& CMsgRemoteClientBroadcastStatus_User::default_instance() {
  protobuf_steammessages_5fremoteclient_5fdiscovery_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgRemoteClientBroadcastStatus_User* CMsgRemoteClientBroadcastStatus_User::New(::google::protobuf::Arena* arena) const {
  CMsgRemoteClientBroadcastStatus_User* n = new CMsgRemoteClientBroadcastStatus_User;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgRemoteClientBroadcastStatus_User::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgRemoteClientBroadcastStatus.User)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&steamid_, 0, reinterpret_cast<char*>(&auth_key_id_) -
      reinterpret_cast<char*>(&steamid_) + sizeof(auth_key_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgRemoteClientBroadcastStatus_User::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgRemoteClientBroadcastStatus.User)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 auth_key_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_auth_key_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &auth_key_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgRemoteClientBroadcastStatus.User)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgRemoteClientBroadcastStatus.User)
  return false;
#undef DO_
}

void CMsgRemoteClientBroadcastStatus_User::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgRemoteClientBroadcastStatus.User)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional uint32 auth_key_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->auth_key_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgRemoteClientBroadcastStatus.User)
}

::google::protobuf::uint8* CMsgRemoteClientBroadcastStatus_User::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgRemoteClientBroadcastStatus.User)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional uint32 auth_key_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->auth_key_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgRemoteClientBroadcastStatus.User)
  return target;
}

size_t CMsgRemoteClientBroadcastStatus_User::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgRemoteClientBroadcastStatus.User)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional fixed64 steamid = 1;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional uint32 auth_key_id = 2;
    if (has_auth_key_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->auth_key_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgRemoteClientBroadcastStatus_User::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgRemoteClientBroadcastStatus.User)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgRemoteClientBroadcastStatus_User* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgRemoteClientBroadcastStatus_User>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgRemoteClientBroadcastStatus.User)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgRemoteClientBroadcastStatus.User)
    MergeFrom(*source);
  }
}

void CMsgRemoteClientBroadcastStatus_User::MergeFrom(const CMsgRemoteClientBroadcastStatus_User& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgRemoteClientBroadcastStatus.User)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      auth_key_id_ = from.auth_key_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgRemoteClientBroadcastStatus_User::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgRemoteClientBroadcastStatus.User)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRemoteClientBroadcastStatus_User::CopyFrom(const CMsgRemoteClientBroadcastStatus_User& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgRemoteClientBroadcastStatus.User)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRemoteClientBroadcastStatus_User::IsInitialized() const {
  return true;
}

void CMsgRemoteClientBroadcastStatus_User::Swap(CMsgRemoteClientBroadcastStatus_User* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgRemoteClientBroadcastStatus_User::InternalSwap(CMsgRemoteClientBroadcastStatus_User* other) {
  std::swap(steamid_, other->steamid_);
  std::swap(auth_key_id_, other->auth_key_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgRemoteClientBroadcastStatus_User::GetMetadata() const {
  protobuf_steammessages_5fremoteclient_5fdiscovery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fremoteclient_5fdiscovery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgRemoteClientBroadcastStatus_User

// optional fixed64 steamid = 1;
bool CMsgRemoteClientBroadcastStatus_User::has_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgRemoteClientBroadcastStatus_User::set_has_steamid() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgRemoteClientBroadcastStatus_User::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgRemoteClientBroadcastStatus_User::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
::google::protobuf::uint64 CMsgRemoteClientBroadcastStatus_User::steamid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteClientBroadcastStatus.User.steamid)
  return steamid_;
}
void CMsgRemoteClientBroadcastStatus_User::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteClientBroadcastStatus.User.steamid)
}

// optional uint32 auth_key_id = 2;
bool CMsgRemoteClientBroadcastStatus_User::has_auth_key_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgRemoteClientBroadcastStatus_User::set_has_auth_key_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgRemoteClientBroadcastStatus_User::clear_has_auth_key_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgRemoteClientBroadcastStatus_User::clear_auth_key_id() {
  auth_key_id_ = 0u;
  clear_has_auth_key_id();
}
::google::protobuf::uint32 CMsgRemoteClientBroadcastStatus_User::auth_key_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteClientBroadcastStatus.User.auth_key_id)
  return auth_key_id_;
}
void CMsgRemoteClientBroadcastStatus_User::set_auth_key_id(::google::protobuf::uint32 value) {
  set_has_auth_key_id();
  auth_key_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteClientBroadcastStatus.User.auth_key_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgRemoteClientBroadcastStatus::kVersionFieldNumber;
const int CMsgRemoteClientBroadcastStatus::kMinVersionFieldNumber;
const int CMsgRemoteClientBroadcastStatus::kConnectPortFieldNumber;
const int CMsgRemoteClientBroadcastStatus::kHostnameFieldNumber;
const int CMsgRemoteClientBroadcastStatus::kEnabledServicesFieldNumber;
const int CMsgRemoteClientBroadcastStatus::kOstypeFieldNumber;
const int CMsgRemoteClientBroadcastStatus::kIs64BitFieldNumber;
const int CMsgRemoteClientBroadcastStatus::kUsersFieldNumber;
const int CMsgRemoteClientBroadcastStatus::kEuniverseFieldNumber;
const int CMsgRemoteClientBroadcastStatus::kTimestampFieldNumber;
const int CMsgRemoteClientBroadcastStatus::kScreenLockedFieldNumber;
const int CMsgRemoteClientBroadcastStatus::kGamesRunningFieldNumber;
const int CMsgRemoteClientBroadcastStatus::kMacAddressesFieldNumber;
const int CMsgRemoteClientBroadcastStatus::kDownloadLanPeerGroupFieldNumber;
const int CMsgRemoteClientBroadcastStatus::kBroadcastingActiveFieldNumber;
const int CMsgRemoteClientBroadcastStatus::kVrActiveFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgRemoteClientBroadcastStatus::CMsgRemoteClientBroadcastStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fremoteclient_5fdiscovery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgRemoteClientBroadcastStatus)
}
CMsgRemoteClientBroadcastStatus::CMsgRemoteClientBroadcastStatus(const CMsgRemoteClientBroadcastStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      users_(from.users_),
      mac_addresses_(from.mac_addresses_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hostname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_hostname()) {
    hostname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hostname_);
  }
  ::memcpy(&version_, &from.version_,
    reinterpret_cast<char*>(&vr_active_) -
    reinterpret_cast<char*>(&version_) + sizeof(vr_active_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgRemoteClientBroadcastStatus)
}

void CMsgRemoteClientBroadcastStatus::SharedCtor() {
  _cached_size_ = 0;
  hostname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&version_, 0, reinterpret_cast<char*>(&vr_active_) -
    reinterpret_cast<char*>(&version_) + sizeof(vr_active_));
}

CMsgRemoteClientBroadcastStatus::~CMsgRemoteClientBroadcastStatus() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgRemoteClientBroadcastStatus)
  SharedDtor();
}

void CMsgRemoteClientBroadcastStatus::SharedDtor() {
  hostname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgRemoteClientBroadcastStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgRemoteClientBroadcastStatus::descriptor() {
  protobuf_steammessages_5fremoteclient_5fdiscovery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fremoteclient_5fdiscovery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgRemoteClientBroadcastStatus& CMsgRemoteClientBroadcastStatus::default_instance() {
  protobuf_steammessages_5fremoteclient_5fdiscovery_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgRemoteClientBroadcastStatus* CMsgRemoteClientBroadcastStatus::New(::google::protobuf::Arena* arena) const {
  CMsgRemoteClientBroadcastStatus* n = new CMsgRemoteClientBroadcastStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgRemoteClientBroadcastStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgRemoteClientBroadcastStatus)
  users_.Clear();
  mac_addresses_.Clear();
  if (has_hostname()) {
    GOOGLE_DCHECK(!hostname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*hostname_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 254u) {
    ::memset(&version_, 0, reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&version_) + sizeof(timestamp_));
  }
  if (_has_bits_[8 / 32] & 16128u) {
    ::memset(&is64bit_, 0, reinterpret_cast<char*>(&vr_active_) -
      reinterpret_cast<char*>(&is64bit_) + sizeof(vr_active_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgRemoteClientBroadcastStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgRemoteClientBroadcastStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 min_version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_min_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 connect_port = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_connect_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &connect_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string hostname = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hostname().data(), this->hostname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgRemoteClientBroadcastStatus.hostname");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 enabled_services = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_enabled_services();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &enabled_services_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ostype = 7 [default = 0];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_ostype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ostype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is64bit = 8 [default = false];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_is64bit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is64bit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CMsgRemoteClientBroadcastStatus.User users = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_users()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 euniverse = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_euniverse();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &euniverse_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 timestamp = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool screen_locked = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_screen_locked();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &screen_locked_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool games_running = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_games_running();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &games_running_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string mac_addresses = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_mac_addresses()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mac_addresses(this->mac_addresses_size() - 1).data(),
            this->mac_addresses(this->mac_addresses_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgRemoteClientBroadcastStatus.mac_addresses");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 download_lan_peer_group = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u)) {
          set_has_download_lan_peer_group();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &download_lan_peer_group_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool broadcasting_active = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u)) {
          set_has_broadcasting_active();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &broadcasting_active_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool vr_active = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u)) {
          set_has_vr_active();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &vr_active_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgRemoteClientBroadcastStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgRemoteClientBroadcastStatus)
  return false;
#undef DO_
}

void CMsgRemoteClientBroadcastStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgRemoteClientBroadcastStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 version = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // optional int32 min_version = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->min_version(), output);
  }

  // optional uint32 connect_port = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->connect_port(), output);
  }

  // optional string hostname = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgRemoteClientBroadcastStatus.hostname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->hostname(), output);
  }

  // optional uint32 enabled_services = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->enabled_services(), output);
  }

  // optional int32 ostype = 7 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->ostype(), output);
  }

  // optional bool is64bit = 8 [default = false];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->is64bit(), output);
  }

  // repeated .proto.steam.CMsgRemoteClientBroadcastStatus.User users = 9;
  for (unsigned int i = 0, n = this->users_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->users(i), output);
  }

  // optional int32 euniverse = 11;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->euniverse(), output);
  }

  // optional uint32 timestamp = 12;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->timestamp(), output);
  }

  // optional bool screen_locked = 13;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->screen_locked(), output);
  }

  // optional bool games_running = 14;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->games_running(), output);
  }

  // repeated string mac_addresses = 15;
  for (int i = 0, n = this->mac_addresses_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mac_addresses(i).data(), this->mac_addresses(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgRemoteClientBroadcastStatus.mac_addresses");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->mac_addresses(i), output);
  }

  // optional uint32 download_lan_peer_group = 16;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->download_lan_peer_group(), output);
  }

  // optional bool broadcasting_active = 17;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->broadcasting_active(), output);
  }

  // optional bool vr_active = 18;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->vr_active(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgRemoteClientBroadcastStatus)
}

::google::protobuf::uint8* CMsgRemoteClientBroadcastStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgRemoteClientBroadcastStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 version = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->version(), target);
  }

  // optional int32 min_version = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->min_version(), target);
  }

  // optional uint32 connect_port = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->connect_port(), target);
  }

  // optional string hostname = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgRemoteClientBroadcastStatus.hostname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->hostname(), target);
  }

  // optional uint32 enabled_services = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->enabled_services(), target);
  }

  // optional int32 ostype = 7 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->ostype(), target);
  }

  // optional bool is64bit = 8 [default = false];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->is64bit(), target);
  }

  // repeated .proto.steam.CMsgRemoteClientBroadcastStatus.User users = 9;
  for (unsigned int i = 0, n = this->users_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, this->users(i), deterministic, target);
  }

  // optional int32 euniverse = 11;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->euniverse(), target);
  }

  // optional uint32 timestamp = 12;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->timestamp(), target);
  }

  // optional bool screen_locked = 13;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->screen_locked(), target);
  }

  // optional bool games_running = 14;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->games_running(), target);
  }

  // repeated string mac_addresses = 15;
  for (int i = 0, n = this->mac_addresses_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mac_addresses(i).data(), this->mac_addresses(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgRemoteClientBroadcastStatus.mac_addresses");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(15, this->mac_addresses(i), target);
  }

  // optional uint32 download_lan_peer_group = 16;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->download_lan_peer_group(), target);
  }

  // optional bool broadcasting_active = 17;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->broadcasting_active(), target);
  }

  // optional bool vr_active = 18;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->vr_active(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgRemoteClientBroadcastStatus)
  return target;
}

size_t CMsgRemoteClientBroadcastStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgRemoteClientBroadcastStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.steam.CMsgRemoteClientBroadcastStatus.User users = 9;
  {
    unsigned int count = this->users_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->users(i));
    }
  }

  // repeated string mac_addresses = 15;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->mac_addresses_size());
  for (int i = 0, n = this->mac_addresses_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->mac_addresses(i));
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string hostname = 4;
    if (has_hostname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hostname());
    }

    // optional int32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

    // optional int32 min_version = 2;
    if (has_min_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_version());
    }

    // optional uint32 connect_port = 3;
    if (has_connect_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->connect_port());
    }

    // optional uint32 enabled_services = 6;
    if (has_enabled_services()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->enabled_services());
    }

    // optional int32 ostype = 7 [default = 0];
    if (has_ostype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ostype());
    }

    // optional int32 euniverse = 11;
    if (has_euniverse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->euniverse());
    }

    // optional uint32 timestamp = 12;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

  }
  if (_has_bits_[8 / 32] & 16128u) {
    // optional bool is64bit = 8 [default = false];
    if (has_is64bit()) {
      total_size += 1 + 1;
    }

    // optional bool screen_locked = 13;
    if (has_screen_locked()) {
      total_size += 1 + 1;
    }

    // optional bool games_running = 14;
    if (has_games_running()) {
      total_size += 1 + 1;
    }

    // optional bool broadcasting_active = 17;
    if (has_broadcasting_active()) {
      total_size += 2 + 1;
    }

    // optional uint32 download_lan_peer_group = 16;
    if (has_download_lan_peer_group()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->download_lan_peer_group());
    }

    // optional bool vr_active = 18;
    if (has_vr_active()) {
      total_size += 2 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgRemoteClientBroadcastStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgRemoteClientBroadcastStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgRemoteClientBroadcastStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgRemoteClientBroadcastStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgRemoteClientBroadcastStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgRemoteClientBroadcastStatus)
    MergeFrom(*source);
  }
}

void CMsgRemoteClientBroadcastStatus::MergeFrom(const CMsgRemoteClientBroadcastStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgRemoteClientBroadcastStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  users_.MergeFrom(from.users_);
  mac_addresses_.MergeFrom(from.mac_addresses_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_hostname();
      hostname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hostname_);
    }
    if (cached_has_bits & 0x00000002u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000004u) {
      min_version_ = from.min_version_;
    }
    if (cached_has_bits & 0x00000008u) {
      connect_port_ = from.connect_port_;
    }
    if (cached_has_bits & 0x00000010u) {
      enabled_services_ = from.enabled_services_;
    }
    if (cached_has_bits & 0x00000020u) {
      ostype_ = from.ostype_;
    }
    if (cached_has_bits & 0x00000040u) {
      euniverse_ = from.euniverse_;
    }
    if (cached_has_bits & 0x00000080u) {
      timestamp_ = from.timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16128u) {
    if (cached_has_bits & 0x00000100u) {
      is64bit_ = from.is64bit_;
    }
    if (cached_has_bits & 0x00000200u) {
      screen_locked_ = from.screen_locked_;
    }
    if (cached_has_bits & 0x00000400u) {
      games_running_ = from.games_running_;
    }
    if (cached_has_bits & 0x00000800u) {
      broadcasting_active_ = from.broadcasting_active_;
    }
    if (cached_has_bits & 0x00001000u) {
      download_lan_peer_group_ = from.download_lan_peer_group_;
    }
    if (cached_has_bits & 0x00002000u) {
      vr_active_ = from.vr_active_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgRemoteClientBroadcastStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgRemoteClientBroadcastStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRemoteClientBroadcastStatus::CopyFrom(const CMsgRemoteClientBroadcastStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgRemoteClientBroadcastStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRemoteClientBroadcastStatus::IsInitialized() const {
  return true;
}

void CMsgRemoteClientBroadcastStatus::Swap(CMsgRemoteClientBroadcastStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgRemoteClientBroadcastStatus::InternalSwap(CMsgRemoteClientBroadcastStatus* other) {
  users_.InternalSwap(&other->users_);
  mac_addresses_.InternalSwap(&other->mac_addresses_);
  hostname_.Swap(&other->hostname_);
  std::swap(version_, other->version_);
  std::swap(min_version_, other->min_version_);
  std::swap(connect_port_, other->connect_port_);
  std::swap(enabled_services_, other->enabled_services_);
  std::swap(ostype_, other->ostype_);
  std::swap(euniverse_, other->euniverse_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(is64bit_, other->is64bit_);
  std::swap(screen_locked_, other->screen_locked_);
  std::swap(games_running_, other->games_running_);
  std::swap(broadcasting_active_, other->broadcasting_active_);
  std::swap(download_lan_peer_group_, other->download_lan_peer_group_);
  std::swap(vr_active_, other->vr_active_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgRemoteClientBroadcastStatus::GetMetadata() const {
  protobuf_steammessages_5fremoteclient_5fdiscovery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fremoteclient_5fdiscovery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgRemoteClientBroadcastStatus

// optional int32 version = 1;
bool CMsgRemoteClientBroadcastStatus::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgRemoteClientBroadcastStatus::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgRemoteClientBroadcastStatus::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgRemoteClientBroadcastStatus::clear_version() {
  version_ = 0;
  clear_has_version();
}
::google::protobuf::int32 CMsgRemoteClientBroadcastStatus::version() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteClientBroadcastStatus.version)
  return version_;
}
void CMsgRemoteClientBroadcastStatus::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteClientBroadcastStatus.version)
}

// optional int32 min_version = 2;
bool CMsgRemoteClientBroadcastStatus::has_min_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgRemoteClientBroadcastStatus::set_has_min_version() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgRemoteClientBroadcastStatus::clear_has_min_version() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgRemoteClientBroadcastStatus::clear_min_version() {
  min_version_ = 0;
  clear_has_min_version();
}
::google::protobuf::int32 CMsgRemoteClientBroadcastStatus::min_version() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteClientBroadcastStatus.min_version)
  return min_version_;
}
void CMsgRemoteClientBroadcastStatus::set_min_version(::google::protobuf::int32 value) {
  set_has_min_version();
  min_version_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteClientBroadcastStatus.min_version)
}

// optional uint32 connect_port = 3;
bool CMsgRemoteClientBroadcastStatus::has_connect_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgRemoteClientBroadcastStatus::set_has_connect_port() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgRemoteClientBroadcastStatus::clear_has_connect_port() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgRemoteClientBroadcastStatus::clear_connect_port() {
  connect_port_ = 0u;
  clear_has_connect_port();
}
::google::protobuf::uint32 CMsgRemoteClientBroadcastStatus::connect_port() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteClientBroadcastStatus.connect_port)
  return connect_port_;
}
void CMsgRemoteClientBroadcastStatus::set_connect_port(::google::protobuf::uint32 value) {
  set_has_connect_port();
  connect_port_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteClientBroadcastStatus.connect_port)
}

// optional string hostname = 4;
bool CMsgRemoteClientBroadcastStatus::has_hostname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgRemoteClientBroadcastStatus::set_has_hostname() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgRemoteClientBroadcastStatus::clear_has_hostname() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgRemoteClientBroadcastStatus::clear_hostname() {
  hostname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hostname();
}
const ::std::string& CMsgRemoteClientBroadcastStatus::hostname() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteClientBroadcastStatus.hostname)
  return hostname_.GetNoArena();
}
void CMsgRemoteClientBroadcastStatus::set_hostname(const ::std::string& value) {
  set_has_hostname();
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteClientBroadcastStatus.hostname)
}
#if LANG_CXX11
void CMsgRemoteClientBroadcastStatus::set_hostname(::std::string&& value) {
  set_has_hostname();
  hostname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgRemoteClientBroadcastStatus.hostname)
}
#endif
void CMsgRemoteClientBroadcastStatus::set_hostname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_hostname();
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgRemoteClientBroadcastStatus.hostname)
}
void CMsgRemoteClientBroadcastStatus::set_hostname(const char* value, size_t size) {
  set_has_hostname();
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgRemoteClientBroadcastStatus.hostname)
}
::std::string* CMsgRemoteClientBroadcastStatus::mutable_hostname() {
  set_has_hostname();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgRemoteClientBroadcastStatus.hostname)
  return hostname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgRemoteClientBroadcastStatus::release_hostname() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgRemoteClientBroadcastStatus.hostname)
  clear_has_hostname();
  return hostname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgRemoteClientBroadcastStatus::set_allocated_hostname(::std::string* hostname) {
  if (hostname != NULL) {
    set_has_hostname();
  } else {
    clear_has_hostname();
  }
  hostname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hostname);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgRemoteClientBroadcastStatus.hostname)
}

// optional uint32 enabled_services = 6;
bool CMsgRemoteClientBroadcastStatus::has_enabled_services() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgRemoteClientBroadcastStatus::set_has_enabled_services() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgRemoteClientBroadcastStatus::clear_has_enabled_services() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgRemoteClientBroadcastStatus::clear_enabled_services() {
  enabled_services_ = 0u;
  clear_has_enabled_services();
}
::google::protobuf::uint32 CMsgRemoteClientBroadcastStatus::enabled_services() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteClientBroadcastStatus.enabled_services)
  return enabled_services_;
}
void CMsgRemoteClientBroadcastStatus::set_enabled_services(::google::protobuf::uint32 value) {
  set_has_enabled_services();
  enabled_services_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteClientBroadcastStatus.enabled_services)
}

// optional int32 ostype = 7 [default = 0];
bool CMsgRemoteClientBroadcastStatus::has_ostype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgRemoteClientBroadcastStatus::set_has_ostype() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgRemoteClientBroadcastStatus::clear_has_ostype() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgRemoteClientBroadcastStatus::clear_ostype() {
  ostype_ = 0;
  clear_has_ostype();
}
::google::protobuf::int32 CMsgRemoteClientBroadcastStatus::ostype() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteClientBroadcastStatus.ostype)
  return ostype_;
}
void CMsgRemoteClientBroadcastStatus::set_ostype(::google::protobuf::int32 value) {
  set_has_ostype();
  ostype_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteClientBroadcastStatus.ostype)
}

// optional bool is64bit = 8 [default = false];
bool CMsgRemoteClientBroadcastStatus::has_is64bit() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CMsgRemoteClientBroadcastStatus::set_has_is64bit() {
  _has_bits_[0] |= 0x00000100u;
}
void CMsgRemoteClientBroadcastStatus::clear_has_is64bit() {
  _has_bits_[0] &= ~0x00000100u;
}
void CMsgRemoteClientBroadcastStatus::clear_is64bit() {
  is64bit_ = false;
  clear_has_is64bit();
}
bool CMsgRemoteClientBroadcastStatus::is64bit() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteClientBroadcastStatus.is64bit)
  return is64bit_;
}
void CMsgRemoteClientBroadcastStatus::set_is64bit(bool value) {
  set_has_is64bit();
  is64bit_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteClientBroadcastStatus.is64bit)
}

// repeated .proto.steam.CMsgRemoteClientBroadcastStatus.User users = 9;
int CMsgRemoteClientBroadcastStatus::users_size() const {
  return users_.size();
}
void CMsgRemoteClientBroadcastStatus::clear_users() {
  users_.Clear();
}
const ::proto::steam::CMsgRemoteClientBroadcastStatus_User& CMsgRemoteClientBroadcastStatus::users(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteClientBroadcastStatus.users)
  return users_.Get(index);
}
::proto::steam::CMsgRemoteClientBroadcastStatus_User* CMsgRemoteClientBroadcastStatus::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgRemoteClientBroadcastStatus.users)
  return users_.Mutable(index);
}
::proto::steam::CMsgRemoteClientBroadcastStatus_User* CMsgRemoteClientBroadcastStatus::add_users() {
  // @@protoc_insertion_point(field_add:proto.steam.CMsgRemoteClientBroadcastStatus.users)
  return users_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgRemoteClientBroadcastStatus_User >*
CMsgRemoteClientBroadcastStatus::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgRemoteClientBroadcastStatus.users)
  return &users_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgRemoteClientBroadcastStatus_User >&
CMsgRemoteClientBroadcastStatus::users() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgRemoteClientBroadcastStatus.users)
  return users_;
}

// optional int32 euniverse = 11;
bool CMsgRemoteClientBroadcastStatus::has_euniverse() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgRemoteClientBroadcastStatus::set_has_euniverse() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgRemoteClientBroadcastStatus::clear_has_euniverse() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgRemoteClientBroadcastStatus::clear_euniverse() {
  euniverse_ = 0;
  clear_has_euniverse();
}
::google::protobuf::int32 CMsgRemoteClientBroadcastStatus::euniverse() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteClientBroadcastStatus.euniverse)
  return euniverse_;
}
void CMsgRemoteClientBroadcastStatus::set_euniverse(::google::protobuf::int32 value) {
  set_has_euniverse();
  euniverse_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteClientBroadcastStatus.euniverse)
}

// optional uint32 timestamp = 12;
bool CMsgRemoteClientBroadcastStatus::has_timestamp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgRemoteClientBroadcastStatus::set_has_timestamp() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgRemoteClientBroadcastStatus::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgRemoteClientBroadcastStatus::clear_timestamp() {
  timestamp_ = 0u;
  clear_has_timestamp();
}
::google::protobuf::uint32 CMsgRemoteClientBroadcastStatus::timestamp() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteClientBroadcastStatus.timestamp)
  return timestamp_;
}
void CMsgRemoteClientBroadcastStatus::set_timestamp(::google::protobuf::uint32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteClientBroadcastStatus.timestamp)
}

// optional bool screen_locked = 13;
bool CMsgRemoteClientBroadcastStatus::has_screen_locked() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CMsgRemoteClientBroadcastStatus::set_has_screen_locked() {
  _has_bits_[0] |= 0x00000200u;
}
void CMsgRemoteClientBroadcastStatus::clear_has_screen_locked() {
  _has_bits_[0] &= ~0x00000200u;
}
void CMsgRemoteClientBroadcastStatus::clear_screen_locked() {
  screen_locked_ = false;
  clear_has_screen_locked();
}
bool CMsgRemoteClientBroadcastStatus::screen_locked() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteClientBroadcastStatus.screen_locked)
  return screen_locked_;
}
void CMsgRemoteClientBroadcastStatus::set_screen_locked(bool value) {
  set_has_screen_locked();
  screen_locked_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteClientBroadcastStatus.screen_locked)
}

// optional bool games_running = 14;
bool CMsgRemoteClientBroadcastStatus::has_games_running() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CMsgRemoteClientBroadcastStatus::set_has_games_running() {
  _has_bits_[0] |= 0x00000400u;
}
void CMsgRemoteClientBroadcastStatus::clear_has_games_running() {
  _has_bits_[0] &= ~0x00000400u;
}
void CMsgRemoteClientBroadcastStatus::clear_games_running() {
  games_running_ = false;
  clear_has_games_running();
}
bool CMsgRemoteClientBroadcastStatus::games_running() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteClientBroadcastStatus.games_running)
  return games_running_;
}
void CMsgRemoteClientBroadcastStatus::set_games_running(bool value) {
  set_has_games_running();
  games_running_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteClientBroadcastStatus.games_running)
}

// repeated string mac_addresses = 15;
int CMsgRemoteClientBroadcastStatus::mac_addresses_size() const {
  return mac_addresses_.size();
}
void CMsgRemoteClientBroadcastStatus::clear_mac_addresses() {
  mac_addresses_.Clear();
}
const ::std::string& CMsgRemoteClientBroadcastStatus::mac_addresses(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteClientBroadcastStatus.mac_addresses)
  return mac_addresses_.Get(index);
}
::std::string* CMsgRemoteClientBroadcastStatus::mutable_mac_addresses(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgRemoteClientBroadcastStatus.mac_addresses)
  return mac_addresses_.Mutable(index);
}
void CMsgRemoteClientBroadcastStatus::set_mac_addresses(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteClientBroadcastStatus.mac_addresses)
  mac_addresses_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void CMsgRemoteClientBroadcastStatus::set_mac_addresses(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteClientBroadcastStatus.mac_addresses)
  mac_addresses_.Mutable(index)->assign(std::move(value));
}
#endif
void CMsgRemoteClientBroadcastStatus::set_mac_addresses(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  mac_addresses_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgRemoteClientBroadcastStatus.mac_addresses)
}
void CMsgRemoteClientBroadcastStatus::set_mac_addresses(int index, const char* value, size_t size) {
  mac_addresses_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgRemoteClientBroadcastStatus.mac_addresses)
}
::std::string* CMsgRemoteClientBroadcastStatus::add_mac_addresses() {
  // @@protoc_insertion_point(field_add_mutable:proto.steam.CMsgRemoteClientBroadcastStatus.mac_addresses)
  return mac_addresses_.Add();
}
void CMsgRemoteClientBroadcastStatus::add_mac_addresses(const ::std::string& value) {
  mac_addresses_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto.steam.CMsgRemoteClientBroadcastStatus.mac_addresses)
}
#if LANG_CXX11
void CMsgRemoteClientBroadcastStatus::add_mac_addresses(::std::string&& value) {
  mac_addresses_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:proto.steam.CMsgRemoteClientBroadcastStatus.mac_addresses)
}
#endif
void CMsgRemoteClientBroadcastStatus::add_mac_addresses(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  mac_addresses_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto.steam.CMsgRemoteClientBroadcastStatus.mac_addresses)
}
void CMsgRemoteClientBroadcastStatus::add_mac_addresses(const char* value, size_t size) {
  mac_addresses_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto.steam.CMsgRemoteClientBroadcastStatus.mac_addresses)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
CMsgRemoteClientBroadcastStatus::mac_addresses() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgRemoteClientBroadcastStatus.mac_addresses)
  return mac_addresses_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
CMsgRemoteClientBroadcastStatus::mutable_mac_addresses() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgRemoteClientBroadcastStatus.mac_addresses)
  return &mac_addresses_;
}

// optional uint32 download_lan_peer_group = 16;
bool CMsgRemoteClientBroadcastStatus::has_download_lan_peer_group() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void CMsgRemoteClientBroadcastStatus::set_has_download_lan_peer_group() {
  _has_bits_[0] |= 0x00001000u;
}
void CMsgRemoteClientBroadcastStatus::clear_has_download_lan_peer_group() {
  _has_bits_[0] &= ~0x00001000u;
}
void CMsgRemoteClientBroadcastStatus::clear_download_lan_peer_group() {
  download_lan_peer_group_ = 0u;
  clear_has_download_lan_peer_group();
}
::google::protobuf::uint32 CMsgRemoteClientBroadcastStatus::download_lan_peer_group() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteClientBroadcastStatus.download_lan_peer_group)
  return download_lan_peer_group_;
}
void CMsgRemoteClientBroadcastStatus::set_download_lan_peer_group(::google::protobuf::uint32 value) {
  set_has_download_lan_peer_group();
  download_lan_peer_group_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteClientBroadcastStatus.download_lan_peer_group)
}

// optional bool broadcasting_active = 17;
bool CMsgRemoteClientBroadcastStatus::has_broadcasting_active() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CMsgRemoteClientBroadcastStatus::set_has_broadcasting_active() {
  _has_bits_[0] |= 0x00000800u;
}
void CMsgRemoteClientBroadcastStatus::clear_has_broadcasting_active() {
  _has_bits_[0] &= ~0x00000800u;
}
void CMsgRemoteClientBroadcastStatus::clear_broadcasting_active() {
  broadcasting_active_ = false;
  clear_has_broadcasting_active();
}
bool CMsgRemoteClientBroadcastStatus::broadcasting_active() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteClientBroadcastStatus.broadcasting_active)
  return broadcasting_active_;
}
void CMsgRemoteClientBroadcastStatus::set_broadcasting_active(bool value) {
  set_has_broadcasting_active();
  broadcasting_active_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteClientBroadcastStatus.broadcasting_active)
}

// optional bool vr_active = 18;
bool CMsgRemoteClientBroadcastStatus::has_vr_active() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void CMsgRemoteClientBroadcastStatus::set_has_vr_active() {
  _has_bits_[0] |= 0x00002000u;
}
void CMsgRemoteClientBroadcastStatus::clear_has_vr_active() {
  _has_bits_[0] &= ~0x00002000u;
}
void CMsgRemoteClientBroadcastStatus::clear_vr_active() {
  vr_active_ = false;
  clear_has_vr_active();
}
bool CMsgRemoteClientBroadcastStatus::vr_active() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteClientBroadcastStatus.vr_active)
  return vr_active_;
}
void CMsgRemoteClientBroadcastStatus::set_vr_active(bool value) {
  set_has_vr_active();
  vr_active_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteClientBroadcastStatus.vr_active)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgRemoteClientBroadcastDiscovery::kSeqNumFieldNumber;
const int CMsgRemoteClientBroadcastDiscovery::kClientIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgRemoteClientBroadcastDiscovery::CMsgRemoteClientBroadcastDiscovery()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fremoteclient_5fdiscovery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgRemoteClientBroadcastDiscovery)
}
CMsgRemoteClientBroadcastDiscovery::CMsgRemoteClientBroadcastDiscovery(const CMsgRemoteClientBroadcastDiscovery& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      client_ids_(from.client_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  seq_num_ = from.seq_num_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgRemoteClientBroadcastDiscovery)
}

void CMsgRemoteClientBroadcastDiscovery::SharedCtor() {
  _cached_size_ = 0;
  seq_num_ = 0u;
}

CMsgRemoteClientBroadcastDiscovery::~CMsgRemoteClientBroadcastDiscovery() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgRemoteClientBroadcastDiscovery)
  SharedDtor();
}

void CMsgRemoteClientBroadcastDiscovery::SharedDtor() {
}

void CMsgRemoteClientBroadcastDiscovery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgRemoteClientBroadcastDiscovery::descriptor() {
  protobuf_steammessages_5fremoteclient_5fdiscovery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fremoteclient_5fdiscovery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgRemoteClientBroadcastDiscovery& CMsgRemoteClientBroadcastDiscovery::default_instance() {
  protobuf_steammessages_5fremoteclient_5fdiscovery_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgRemoteClientBroadcastDiscovery* CMsgRemoteClientBroadcastDiscovery::New(::google::protobuf::Arena* arena) const {
  CMsgRemoteClientBroadcastDiscovery* n = new CMsgRemoteClientBroadcastDiscovery;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgRemoteClientBroadcastDiscovery::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgRemoteClientBroadcastDiscovery)
  client_ids_.Clear();
  seq_num_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgRemoteClientBroadcastDiscovery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgRemoteClientBroadcastDiscovery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 seq_num = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_seq_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 client_ids = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16u, input, this->mutable_client_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_client_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgRemoteClientBroadcastDiscovery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgRemoteClientBroadcastDiscovery)
  return false;
#undef DO_
}

void CMsgRemoteClientBroadcastDiscovery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgRemoteClientBroadcastDiscovery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 seq_num = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seq_num(), output);
  }

  // repeated uint64 client_ids = 2;
  for (int i = 0, n = this->client_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->client_ids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgRemoteClientBroadcastDiscovery)
}

::google::protobuf::uint8* CMsgRemoteClientBroadcastDiscovery::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgRemoteClientBroadcastDiscovery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 seq_num = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seq_num(), target);
  }

  // repeated uint64 client_ids = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(2, this->client_ids_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgRemoteClientBroadcastDiscovery)
  return target;
}

size_t CMsgRemoteClientBroadcastDiscovery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgRemoteClientBroadcastDiscovery)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint64 client_ids = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->client_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->client_ids_size());
    total_size += data_size;
  }

  // optional uint32 seq_num = 1;
  if (has_seq_num()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->seq_num());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgRemoteClientBroadcastDiscovery::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgRemoteClientBroadcastDiscovery)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgRemoteClientBroadcastDiscovery* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgRemoteClientBroadcastDiscovery>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgRemoteClientBroadcastDiscovery)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgRemoteClientBroadcastDiscovery)
    MergeFrom(*source);
  }
}

void CMsgRemoteClientBroadcastDiscovery::MergeFrom(const CMsgRemoteClientBroadcastDiscovery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgRemoteClientBroadcastDiscovery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  client_ids_.MergeFrom(from.client_ids_);
  if (from.has_seq_num()) {
    set_seq_num(from.seq_num());
  }
}

void CMsgRemoteClientBroadcastDiscovery::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgRemoteClientBroadcastDiscovery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRemoteClientBroadcastDiscovery::CopyFrom(const CMsgRemoteClientBroadcastDiscovery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgRemoteClientBroadcastDiscovery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRemoteClientBroadcastDiscovery::IsInitialized() const {
  return true;
}

void CMsgRemoteClientBroadcastDiscovery::Swap(CMsgRemoteClientBroadcastDiscovery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgRemoteClientBroadcastDiscovery::InternalSwap(CMsgRemoteClientBroadcastDiscovery* other) {
  client_ids_.InternalSwap(&other->client_ids_);
  std::swap(seq_num_, other->seq_num_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgRemoteClientBroadcastDiscovery::GetMetadata() const {
  protobuf_steammessages_5fremoteclient_5fdiscovery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fremoteclient_5fdiscovery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgRemoteClientBroadcastDiscovery

// optional uint32 seq_num = 1;
bool CMsgRemoteClientBroadcastDiscovery::has_seq_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgRemoteClientBroadcastDiscovery::set_has_seq_num() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgRemoteClientBroadcastDiscovery::clear_has_seq_num() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgRemoteClientBroadcastDiscovery::clear_seq_num() {
  seq_num_ = 0u;
  clear_has_seq_num();
}
::google::protobuf::uint32 CMsgRemoteClientBroadcastDiscovery::seq_num() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteClientBroadcastDiscovery.seq_num)
  return seq_num_;
}
void CMsgRemoteClientBroadcastDiscovery::set_seq_num(::google::protobuf::uint32 value) {
  set_has_seq_num();
  seq_num_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteClientBroadcastDiscovery.seq_num)
}

// repeated uint64 client_ids = 2;
int CMsgRemoteClientBroadcastDiscovery::client_ids_size() const {
  return client_ids_.size();
}
void CMsgRemoteClientBroadcastDiscovery::clear_client_ids() {
  client_ids_.Clear();
}
::google::protobuf::uint64 CMsgRemoteClientBroadcastDiscovery::client_ids(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteClientBroadcastDiscovery.client_ids)
  return client_ids_.Get(index);
}
void CMsgRemoteClientBroadcastDiscovery::set_client_ids(int index, ::google::protobuf::uint64 value) {
  client_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteClientBroadcastDiscovery.client_ids)
}
void CMsgRemoteClientBroadcastDiscovery::add_client_ids(::google::protobuf::uint64 value) {
  client_ids_.Add(value);
  // @@protoc_insertion_point(field_add:proto.steam.CMsgRemoteClientBroadcastDiscovery.client_ids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CMsgRemoteClientBroadcastDiscovery::client_ids() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgRemoteClientBroadcastDiscovery.client_ids)
  return client_ids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CMsgRemoteClientBroadcastDiscovery::mutable_client_ids() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgRemoteClientBroadcastDiscovery.client_ids)
  return &client_ids_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::kPasswordFieldNumber;
const int CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::kIdentifierFieldNumber;
const int CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::kPayloadFieldNumber;
const int CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::kTimestampFieldNumber;
const int CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::kUsageFieldNumber;
const int CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::kDeviceNameFieldNumber;
const int CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::kDeviceModelFieldNumber;
const int CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::kDeviceSerialFieldNumber;
const int CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::kDeviceProvisioningIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fremoteclient_5fdiscovery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket)
}
CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket(const CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_password()) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_payload()) {
    payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_);
  }
  device_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_device_name()) {
    device_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_name_);
  }
  device_model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_device_model()) {
    device_model_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_model_);
  }
  device_serial_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_device_serial()) {
    device_serial_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_serial_);
  }
  ::memcpy(&identifier_, &from.identifier_,
    reinterpret_cast<char*>(&device_provisioning_id_) -
    reinterpret_cast<char*>(&identifier_) + sizeof(device_provisioning_id_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket)
}

void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::SharedCtor() {
  _cached_size_ = 0;
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_serial_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&identifier_, 0, reinterpret_cast<char*>(&device_provisioning_id_) -
    reinterpret_cast<char*>(&identifier_) + sizeof(device_provisioning_id_));
}

CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::~CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket)
  SharedDtor();
}

void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::SharedDtor() {
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payload_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_model_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_serial_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::descriptor() {
  protobuf_steammessages_5fremoteclient_5fdiscovery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fremoteclient_5fdiscovery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket& CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::default_instance() {
  protobuf_steammessages_5fremoteclient_5fdiscovery_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket* CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::New(::google::protobuf::Arena* arena) const {
  CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket* n = new CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket)
  if (_has_bits_[0 / 32] & 31u) {
    if (has_password()) {
      GOOGLE_DCHECK(!password_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*password_.UnsafeRawStringPointer())->clear();
    }
    if (has_payload()) {
      GOOGLE_DCHECK(!payload_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*payload_.UnsafeRawStringPointer())->clear();
    }
    if (has_device_name()) {
      GOOGLE_DCHECK(!device_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*device_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_device_model()) {
      GOOGLE_DCHECK(!device_model_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*device_model_.UnsafeRawStringPointer())->clear();
    }
    if (has_device_serial()) {
      GOOGLE_DCHECK(!device_serial_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*device_serial_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 224u) {
    ::memset(&identifier_, 0, reinterpret_cast<char*>(&usage_) -
      reinterpret_cast<char*>(&identifier_) + sizeof(usage_));
  }
  device_provisioning_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes password = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_password()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 identifier = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_identifier();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &identifier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes payload = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 timestamp = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.steam.CMsgRemoteDeviceAuthorizationRequest.EKeyEscrowUsage usage = 5 [default = k_EKeyEscrowUsageStreamingDevice];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::steam::CMsgRemoteDeviceAuthorizationRequest_EKeyEscrowUsage_IsValid(value)) {
            set_usage(static_cast< ::proto::steam::CMsgRemoteDeviceAuthorizationRequest_EKeyEscrowUsage >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string device_name = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->device_name().data(), this->device_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.device_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string device_model = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_model()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->device_model().data(), this->device_model().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.device_model");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string device_serial = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_serial()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->device_serial().data(), this->device_serial().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.device_serial");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 device_provisioning_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_device_provisioning_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &device_provisioning_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket)
  return false;
#undef DO_
}

void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes password = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->password(), output);
  }

  // optional uint64 identifier = 2;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->identifier(), output);
  }

  // optional bytes payload = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->payload(), output);
  }

  // optional uint32 timestamp = 4;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->timestamp(), output);
  }

  // optional .proto.steam.CMsgRemoteDeviceAuthorizationRequest.EKeyEscrowUsage usage = 5 [default = k_EKeyEscrowUsageStreamingDevice];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->usage(), output);
  }

  // optional string device_name = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_name().data(), this->device_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.device_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->device_name(), output);
  }

  // optional string device_model = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_model().data(), this->device_model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.device_model");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->device_model(), output);
  }

  // optional string device_serial = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_serial().data(), this->device_serial().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.device_serial");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->device_serial(), output);
  }

  // optional uint32 device_provisioning_id = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->device_provisioning_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket)
}

::google::protobuf::uint8* CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes password = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->password(), target);
  }

  // optional uint64 identifier = 2;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->identifier(), target);
  }

  // optional bytes payload = 3;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->payload(), target);
  }

  // optional uint32 timestamp = 4;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->timestamp(), target);
  }

  // optional .proto.steam.CMsgRemoteDeviceAuthorizationRequest.EKeyEscrowUsage usage = 5 [default = k_EKeyEscrowUsageStreamingDevice];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->usage(), target);
  }

  // optional string device_name = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_name().data(), this->device_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.device_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->device_name(), target);
  }

  // optional string device_model = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_model().data(), this->device_model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.device_model");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->device_model(), target);
  }

  // optional string device_serial = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_serial().data(), this->device_serial().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.device_serial");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->device_serial(), target);
  }

  // optional uint32 device_provisioning_id = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->device_provisioning_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket)
  return target;
}

size_t CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional bytes password = 1;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->password());
    }

    // optional bytes payload = 3;
    if (has_payload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->payload());
    }

    // optional string device_name = 6;
    if (has_device_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_name());
    }

    // optional string device_model = 7;
    if (has_device_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_model());
    }

    // optional string device_serial = 8;
    if (has_device_serial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_serial());
    }

    // optional uint64 identifier = 2;
    if (has_identifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->identifier());
    }

    // optional uint32 timestamp = 4;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

    // optional .proto.steam.CMsgRemoteDeviceAuthorizationRequest.EKeyEscrowUsage usage = 5 [default = k_EKeyEscrowUsageStreamingDevice];
    if (has_usage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->usage());
    }

  }
  // optional uint32 device_provisioning_id = 9;
  if (has_device_provisioning_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->device_provisioning_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket)
    MergeFrom(*source);
  }
}

void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::MergeFrom(const CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_password();
      password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_payload();
      payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_device_name();
      device_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_name_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_device_model();
      device_model_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_model_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_device_serial();
      device_serial_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_serial_);
    }
    if (cached_has_bits & 0x00000020u) {
      identifier_ = from.identifier_;
    }
    if (cached_has_bits & 0x00000040u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000080u) {
      usage_ = from.usage_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_device_provisioning_id(from.device_provisioning_id());
  }
}

void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::CopyFrom(const CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::IsInitialized() const {
  return true;
}

void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::Swap(CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::InternalSwap(CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket* other) {
  password_.Swap(&other->password_);
  payload_.Swap(&other->payload_);
  device_name_.Swap(&other->device_name_);
  device_model_.Swap(&other->device_model_);
  device_serial_.Swap(&other->device_serial_);
  std::swap(identifier_, other->identifier_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(usage_, other->usage_);
  std::swap(device_provisioning_id_, other->device_provisioning_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::GetMetadata() const {
  protobuf_steammessages_5fremoteclient_5fdiscovery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fremoteclient_5fdiscovery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket

// optional bytes password = 1;
bool CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::has_password() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::set_has_password() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::clear_has_password() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
const ::std::string& CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::password() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.password)
  return password_.GetNoArena();
}
void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.password)
}
#if LANG_CXX11
void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::set_password(::std::string&& value) {
  set_has_password();
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.password)
}
#endif
void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.password)
}
void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::set_password(const void* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.password)
}
::std::string* CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::release_password() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.password)
  clear_has_password();
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.password)
}

// optional uint64 identifier = 2;
bool CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::has_identifier() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::set_has_identifier() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::clear_has_identifier() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::clear_identifier() {
  identifier_ = GOOGLE_ULONGLONG(0);
  clear_has_identifier();
}
::google::protobuf::uint64 CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::identifier() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.identifier)
  return identifier_;
}
void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::set_identifier(::google::protobuf::uint64 value) {
  set_has_identifier();
  identifier_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.identifier)
}

// optional bytes payload = 3;
bool CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::has_payload() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::set_has_payload() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::clear_has_payload() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::clear_payload() {
  payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_payload();
}
const ::std::string& CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::payload() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.payload)
  return payload_.GetNoArena();
}
void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::set_payload(const ::std::string& value) {
  set_has_payload();
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.payload)
}
#if LANG_CXX11
void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::set_payload(::std::string&& value) {
  set_has_payload();
  payload_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.payload)
}
#endif
void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::set_payload(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_payload();
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.payload)
}
void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::set_payload(const void* value, size_t size) {
  set_has_payload();
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.payload)
}
::std::string* CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::mutable_payload() {
  set_has_payload();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.payload)
  return payload_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::release_payload() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.payload)
  clear_has_payload();
  return payload_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::set_allocated_payload(::std::string* payload) {
  if (payload != NULL) {
    set_has_payload();
  } else {
    clear_has_payload();
  }
  payload_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payload);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.payload)
}

// optional uint32 timestamp = 4;
bool CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::has_timestamp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::set_has_timestamp() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::clear_timestamp() {
  timestamp_ = 0u;
  clear_has_timestamp();
}
::google::protobuf::uint32 CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::timestamp() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.timestamp)
  return timestamp_;
}
void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::set_timestamp(::google::protobuf::uint32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.timestamp)
}

// optional .proto.steam.CMsgRemoteDeviceAuthorizationRequest.EKeyEscrowUsage usage = 5 [default = k_EKeyEscrowUsageStreamingDevice];
bool CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::has_usage() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::set_has_usage() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::clear_has_usage() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::clear_usage() {
  usage_ = 0;
  clear_has_usage();
}
::proto::steam::CMsgRemoteDeviceAuthorizationRequest_EKeyEscrowUsage CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::usage() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.usage)
  return static_cast< ::proto::steam::CMsgRemoteDeviceAuthorizationRequest_EKeyEscrowUsage >(usage_);
}
void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::set_usage(::proto::steam::CMsgRemoteDeviceAuthorizationRequest_EKeyEscrowUsage value) {
  assert(::proto::steam::CMsgRemoteDeviceAuthorizationRequest_EKeyEscrowUsage_IsValid(value));
  set_has_usage();
  usage_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.usage)
}

// optional string device_name = 6;
bool CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::has_device_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::set_has_device_name() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::clear_has_device_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::clear_device_name() {
  device_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_device_name();
}
const ::std::string& CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::device_name() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.device_name)
  return device_name_.GetNoArena();
}
void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::set_device_name(const ::std::string& value) {
  set_has_device_name();
  device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.device_name)
}
#if LANG_CXX11
void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::set_device_name(::std::string&& value) {
  set_has_device_name();
  device_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.device_name)
}
#endif
void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::set_device_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_device_name();
  device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.device_name)
}
void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::set_device_name(const char* value, size_t size) {
  set_has_device_name();
  device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.device_name)
}
::std::string* CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::mutable_device_name() {
  set_has_device_name();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.device_name)
  return device_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::release_device_name() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.device_name)
  clear_has_device_name();
  return device_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::set_allocated_device_name(::std::string* device_name) {
  if (device_name != NULL) {
    set_has_device_name();
  } else {
    clear_has_device_name();
  }
  device_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_name);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.device_name)
}

// optional string device_model = 7;
bool CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::has_device_model() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::set_has_device_model() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::clear_has_device_model() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::clear_device_model() {
  device_model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_device_model();
}
const ::std::string& CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::device_model() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.device_model)
  return device_model_.GetNoArena();
}
void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::set_device_model(const ::std::string& value) {
  set_has_device_model();
  device_model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.device_model)
}
#if LANG_CXX11
void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::set_device_model(::std::string&& value) {
  set_has_device_model();
  device_model_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.device_model)
}
#endif
void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::set_device_model(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_device_model();
  device_model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.device_model)
}
void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::set_device_model(const char* value, size_t size) {
  set_has_device_model();
  device_model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.device_model)
}
::std::string* CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::mutable_device_model() {
  set_has_device_model();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.device_model)
  return device_model_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::release_device_model() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.device_model)
  clear_has_device_model();
  return device_model_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::set_allocated_device_model(::std::string* device_model) {
  if (device_model != NULL) {
    set_has_device_model();
  } else {
    clear_has_device_model();
  }
  device_model_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_model);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.device_model)
}

// optional string device_serial = 8;
bool CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::has_device_serial() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::set_has_device_serial() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::clear_has_device_serial() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::clear_device_serial() {
  device_serial_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_device_serial();
}
const ::std::string& CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::device_serial() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.device_serial)
  return device_serial_.GetNoArena();
}
void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::set_device_serial(const ::std::string& value) {
  set_has_device_serial();
  device_serial_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.device_serial)
}
#if LANG_CXX11
void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::set_device_serial(::std::string&& value) {
  set_has_device_serial();
  device_serial_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.device_serial)
}
#endif
void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::set_device_serial(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_device_serial();
  device_serial_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.device_serial)
}
void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::set_device_serial(const char* value, size_t size) {
  set_has_device_serial();
  device_serial_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.device_serial)
}
::std::string* CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::mutable_device_serial() {
  set_has_device_serial();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.device_serial)
  return device_serial_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::release_device_serial() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.device_serial)
  clear_has_device_serial();
  return device_serial_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::set_allocated_device_serial(::std::string* device_serial) {
  if (device_serial != NULL) {
    set_has_device_serial();
  } else {
    clear_has_device_serial();
  }
  device_serial_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_serial);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.device_serial)
}

// optional uint32 device_provisioning_id = 9;
bool CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::has_device_provisioning_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::set_has_device_provisioning_id() {
  _has_bits_[0] |= 0x00000100u;
}
void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::clear_has_device_provisioning_id() {
  _has_bits_[0] &= ~0x00000100u;
}
void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::clear_device_provisioning_id() {
  device_provisioning_id_ = 0u;
  clear_has_device_provisioning_id();
}
::google::protobuf::uint32 CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::device_provisioning_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.device_provisioning_id)
  return device_provisioning_id_;
}
void CMsgRemoteDeviceAuthorizationRequest_CKeyEscrow_Ticket::set_device_provisioning_id(::google::protobuf::uint32 value) {
  set_has_device_provisioning_id();
  device_provisioning_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteDeviceAuthorizationRequest.CKeyEscrow_Ticket.device_provisioning_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgRemoteDeviceAuthorizationRequest::kDeviceTokenFieldNumber;
const int CMsgRemoteDeviceAuthorizationRequest::kDeviceNameFieldNumber;
const int CMsgRemoteDeviceAuthorizationRequest::kEncryptedRequestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgRemoteDeviceAuthorizationRequest::CMsgRemoteDeviceAuthorizationRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fremoteclient_5fdiscovery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgRemoteDeviceAuthorizationRequest)
}
CMsgRemoteDeviceAuthorizationRequest::CMsgRemoteDeviceAuthorizationRequest(const CMsgRemoteDeviceAuthorizationRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  device_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_device_token()) {
    device_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_token_);
  }
  device_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_device_name()) {
    device_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_name_);
  }
  encrypted_request_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_encrypted_request()) {
    encrypted_request_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.encrypted_request_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgRemoteDeviceAuthorizationRequest)
}

void CMsgRemoteDeviceAuthorizationRequest::SharedCtor() {
  _cached_size_ = 0;
  device_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  encrypted_request_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CMsgRemoteDeviceAuthorizationRequest::~CMsgRemoteDeviceAuthorizationRequest() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgRemoteDeviceAuthorizationRequest)
  SharedDtor();
}

void CMsgRemoteDeviceAuthorizationRequest::SharedDtor() {
  device_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  encrypted_request_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgRemoteDeviceAuthorizationRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgRemoteDeviceAuthorizationRequest::descriptor() {
  protobuf_steammessages_5fremoteclient_5fdiscovery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fremoteclient_5fdiscovery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgRemoteDeviceAuthorizationRequest& CMsgRemoteDeviceAuthorizationRequest::default_instance() {
  protobuf_steammessages_5fremoteclient_5fdiscovery_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgRemoteDeviceAuthorizationRequest* CMsgRemoteDeviceAuthorizationRequest::New(::google::protobuf::Arena* arena) const {
  CMsgRemoteDeviceAuthorizationRequest* n = new CMsgRemoteDeviceAuthorizationRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgRemoteDeviceAuthorizationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgRemoteDeviceAuthorizationRequest)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_device_token()) {
      GOOGLE_DCHECK(!device_token_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*device_token_.UnsafeRawStringPointer())->clear();
    }
    if (has_device_name()) {
      GOOGLE_DCHECK(!device_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*device_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_encrypted_request()) {
      GOOGLE_DCHECK(!encrypted_request_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*encrypted_request_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgRemoteDeviceAuthorizationRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgRemoteDeviceAuthorizationRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes device_token = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_device_token()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string device_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->device_name().data(), this->device_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgRemoteDeviceAuthorizationRequest.device_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes encrypted_request = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_encrypted_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgRemoteDeviceAuthorizationRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgRemoteDeviceAuthorizationRequest)
  return false;
#undef DO_
}

void CMsgRemoteDeviceAuthorizationRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgRemoteDeviceAuthorizationRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes device_token = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->device_token(), output);
  }

  // optional string device_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_name().data(), this->device_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgRemoteDeviceAuthorizationRequest.device_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->device_name(), output);
  }

  // required bytes encrypted_request = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->encrypted_request(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgRemoteDeviceAuthorizationRequest)
}

::google::protobuf::uint8* CMsgRemoteDeviceAuthorizationRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgRemoteDeviceAuthorizationRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes device_token = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->device_token(), target);
  }

  // optional string device_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_name().data(), this->device_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgRemoteDeviceAuthorizationRequest.device_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->device_name(), target);
  }

  // required bytes encrypted_request = 3;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->encrypted_request(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgRemoteDeviceAuthorizationRequest)
  return target;
}

size_t CMsgRemoteDeviceAuthorizationRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:proto.steam.CMsgRemoteDeviceAuthorizationRequest)
  size_t total_size = 0;

  if (has_device_token()) {
    // required bytes device_token = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->device_token());
  }

  if (has_encrypted_request()) {
    // required bytes encrypted_request = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->encrypted_request());
  }

  return total_size;
}
size_t CMsgRemoteDeviceAuthorizationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgRemoteDeviceAuthorizationRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required bytes device_token = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->device_token());

    // required bytes encrypted_request = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->encrypted_request());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string device_name = 2;
  if (has_device_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->device_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgRemoteDeviceAuthorizationRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgRemoteDeviceAuthorizationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgRemoteDeviceAuthorizationRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgRemoteDeviceAuthorizationRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgRemoteDeviceAuthorizationRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgRemoteDeviceAuthorizationRequest)
    MergeFrom(*source);
  }
}

void CMsgRemoteDeviceAuthorizationRequest::MergeFrom(const CMsgRemoteDeviceAuthorizationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgRemoteDeviceAuthorizationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_device_token();
      device_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_token_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_device_name();
      device_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_encrypted_request();
      encrypted_request_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.encrypted_request_);
    }
  }
}

void CMsgRemoteDeviceAuthorizationRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgRemoteDeviceAuthorizationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRemoteDeviceAuthorizationRequest::CopyFrom(const CMsgRemoteDeviceAuthorizationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgRemoteDeviceAuthorizationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRemoteDeviceAuthorizationRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  return true;
}

void CMsgRemoteDeviceAuthorizationRequest::Swap(CMsgRemoteDeviceAuthorizationRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgRemoteDeviceAuthorizationRequest::InternalSwap(CMsgRemoteDeviceAuthorizationRequest* other) {
  device_token_.Swap(&other->device_token_);
  device_name_.Swap(&other->device_name_);
  encrypted_request_.Swap(&other->encrypted_request_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgRemoteDeviceAuthorizationRequest::GetMetadata() const {
  protobuf_steammessages_5fremoteclient_5fdiscovery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fremoteclient_5fdiscovery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgRemoteDeviceAuthorizationRequest

// required bytes device_token = 1;
bool CMsgRemoteDeviceAuthorizationRequest::has_device_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgRemoteDeviceAuthorizationRequest::set_has_device_token() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgRemoteDeviceAuthorizationRequest::clear_has_device_token() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgRemoteDeviceAuthorizationRequest::clear_device_token() {
  device_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_device_token();
}
const ::std::string& CMsgRemoteDeviceAuthorizationRequest::device_token() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteDeviceAuthorizationRequest.device_token)
  return device_token_.GetNoArena();
}
void CMsgRemoteDeviceAuthorizationRequest::set_device_token(const ::std::string& value) {
  set_has_device_token();
  device_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteDeviceAuthorizationRequest.device_token)
}
#if LANG_CXX11
void CMsgRemoteDeviceAuthorizationRequest::set_device_token(::std::string&& value) {
  set_has_device_token();
  device_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgRemoteDeviceAuthorizationRequest.device_token)
}
#endif
void CMsgRemoteDeviceAuthorizationRequest::set_device_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_device_token();
  device_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgRemoteDeviceAuthorizationRequest.device_token)
}
void CMsgRemoteDeviceAuthorizationRequest::set_device_token(const void* value, size_t size) {
  set_has_device_token();
  device_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgRemoteDeviceAuthorizationRequest.device_token)
}
::std::string* CMsgRemoteDeviceAuthorizationRequest::mutable_device_token() {
  set_has_device_token();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgRemoteDeviceAuthorizationRequest.device_token)
  return device_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgRemoteDeviceAuthorizationRequest::release_device_token() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgRemoteDeviceAuthorizationRequest.device_token)
  clear_has_device_token();
  return device_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgRemoteDeviceAuthorizationRequest::set_allocated_device_token(::std::string* device_token) {
  if (device_token != NULL) {
    set_has_device_token();
  } else {
    clear_has_device_token();
  }
  device_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_token);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgRemoteDeviceAuthorizationRequest.device_token)
}

// optional string device_name = 2;
bool CMsgRemoteDeviceAuthorizationRequest::has_device_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgRemoteDeviceAuthorizationRequest::set_has_device_name() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgRemoteDeviceAuthorizationRequest::clear_has_device_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgRemoteDeviceAuthorizationRequest::clear_device_name() {
  device_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_device_name();
}
const ::std::string& CMsgRemoteDeviceAuthorizationRequest::device_name() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteDeviceAuthorizationRequest.device_name)
  return device_name_.GetNoArena();
}
void CMsgRemoteDeviceAuthorizationRequest::set_device_name(const ::std::string& value) {
  set_has_device_name();
  device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteDeviceAuthorizationRequest.device_name)
}
#if LANG_CXX11
void CMsgRemoteDeviceAuthorizationRequest::set_device_name(::std::string&& value) {
  set_has_device_name();
  device_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgRemoteDeviceAuthorizationRequest.device_name)
}
#endif
void CMsgRemoteDeviceAuthorizationRequest::set_device_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_device_name();
  device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgRemoteDeviceAuthorizationRequest.device_name)
}
void CMsgRemoteDeviceAuthorizationRequest::set_device_name(const char* value, size_t size) {
  set_has_device_name();
  device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgRemoteDeviceAuthorizationRequest.device_name)
}
::std::string* CMsgRemoteDeviceAuthorizationRequest::mutable_device_name() {
  set_has_device_name();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgRemoteDeviceAuthorizationRequest.device_name)
  return device_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgRemoteDeviceAuthorizationRequest::release_device_name() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgRemoteDeviceAuthorizationRequest.device_name)
  clear_has_device_name();
  return device_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgRemoteDeviceAuthorizationRequest::set_allocated_device_name(::std::string* device_name) {
  if (device_name != NULL) {
    set_has_device_name();
  } else {
    clear_has_device_name();
  }
  device_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_name);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgRemoteDeviceAuthorizationRequest.device_name)
}

// required bytes encrypted_request = 3;
bool CMsgRemoteDeviceAuthorizationRequest::has_encrypted_request() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgRemoteDeviceAuthorizationRequest::set_has_encrypted_request() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgRemoteDeviceAuthorizationRequest::clear_has_encrypted_request() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgRemoteDeviceAuthorizationRequest::clear_encrypted_request() {
  encrypted_request_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_encrypted_request();
}
const ::std::string& CMsgRemoteDeviceAuthorizationRequest::encrypted_request() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteDeviceAuthorizationRequest.encrypted_request)
  return encrypted_request_.GetNoArena();
}
void CMsgRemoteDeviceAuthorizationRequest::set_encrypted_request(const ::std::string& value) {
  set_has_encrypted_request();
  encrypted_request_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteDeviceAuthorizationRequest.encrypted_request)
}
#if LANG_CXX11
void CMsgRemoteDeviceAuthorizationRequest::set_encrypted_request(::std::string&& value) {
  set_has_encrypted_request();
  encrypted_request_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgRemoteDeviceAuthorizationRequest.encrypted_request)
}
#endif
void CMsgRemoteDeviceAuthorizationRequest::set_encrypted_request(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_encrypted_request();
  encrypted_request_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgRemoteDeviceAuthorizationRequest.encrypted_request)
}
void CMsgRemoteDeviceAuthorizationRequest::set_encrypted_request(const void* value, size_t size) {
  set_has_encrypted_request();
  encrypted_request_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgRemoteDeviceAuthorizationRequest.encrypted_request)
}
::std::string* CMsgRemoteDeviceAuthorizationRequest::mutable_encrypted_request() {
  set_has_encrypted_request();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgRemoteDeviceAuthorizationRequest.encrypted_request)
  return encrypted_request_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgRemoteDeviceAuthorizationRequest::release_encrypted_request() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgRemoteDeviceAuthorizationRequest.encrypted_request)
  clear_has_encrypted_request();
  return encrypted_request_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgRemoteDeviceAuthorizationRequest::set_allocated_encrypted_request(::std::string* encrypted_request) {
  if (encrypted_request != NULL) {
    set_has_encrypted_request();
  } else {
    clear_has_encrypted_request();
  }
  encrypted_request_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), encrypted_request);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgRemoteDeviceAuthorizationRequest.encrypted_request)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgRemoteDeviceAuthorizationCancelRequest::CMsgRemoteDeviceAuthorizationCancelRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fremoteclient_5fdiscovery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgRemoteDeviceAuthorizationCancelRequest)
}
CMsgRemoteDeviceAuthorizationCancelRequest::CMsgRemoteDeviceAuthorizationCancelRequest(const CMsgRemoteDeviceAuthorizationCancelRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgRemoteDeviceAuthorizationCancelRequest)
}

void CMsgRemoteDeviceAuthorizationCancelRequest::SharedCtor() {
  _cached_size_ = 0;
}

CMsgRemoteDeviceAuthorizationCancelRequest::~CMsgRemoteDeviceAuthorizationCancelRequest() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgRemoteDeviceAuthorizationCancelRequest)
  SharedDtor();
}

void CMsgRemoteDeviceAuthorizationCancelRequest::SharedDtor() {
}

void CMsgRemoteDeviceAuthorizationCancelRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgRemoteDeviceAuthorizationCancelRequest::descriptor() {
  protobuf_steammessages_5fremoteclient_5fdiscovery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fremoteclient_5fdiscovery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgRemoteDeviceAuthorizationCancelRequest& CMsgRemoteDeviceAuthorizationCancelRequest::default_instance() {
  protobuf_steammessages_5fremoteclient_5fdiscovery_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgRemoteDeviceAuthorizationCancelRequest* CMsgRemoteDeviceAuthorizationCancelRequest::New(::google::protobuf::Arena* arena) const {
  CMsgRemoteDeviceAuthorizationCancelRequest* n = new CMsgRemoteDeviceAuthorizationCancelRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgRemoteDeviceAuthorizationCancelRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgRemoteDeviceAuthorizationCancelRequest)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgRemoteDeviceAuthorizationCancelRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgRemoteDeviceAuthorizationCancelRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgRemoteDeviceAuthorizationCancelRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgRemoteDeviceAuthorizationCancelRequest)
  return false;
#undef DO_
}

void CMsgRemoteDeviceAuthorizationCancelRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgRemoteDeviceAuthorizationCancelRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgRemoteDeviceAuthorizationCancelRequest)
}

::google::protobuf::uint8* CMsgRemoteDeviceAuthorizationCancelRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgRemoteDeviceAuthorizationCancelRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgRemoteDeviceAuthorizationCancelRequest)
  return target;
}

size_t CMsgRemoteDeviceAuthorizationCancelRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgRemoteDeviceAuthorizationCancelRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgRemoteDeviceAuthorizationCancelRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgRemoteDeviceAuthorizationCancelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgRemoteDeviceAuthorizationCancelRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgRemoteDeviceAuthorizationCancelRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgRemoteDeviceAuthorizationCancelRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgRemoteDeviceAuthorizationCancelRequest)
    MergeFrom(*source);
  }
}

void CMsgRemoteDeviceAuthorizationCancelRequest::MergeFrom(const CMsgRemoteDeviceAuthorizationCancelRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgRemoteDeviceAuthorizationCancelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgRemoteDeviceAuthorizationCancelRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgRemoteDeviceAuthorizationCancelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRemoteDeviceAuthorizationCancelRequest::CopyFrom(const CMsgRemoteDeviceAuthorizationCancelRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgRemoteDeviceAuthorizationCancelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRemoteDeviceAuthorizationCancelRequest::IsInitialized() const {
  return true;
}

void CMsgRemoteDeviceAuthorizationCancelRequest::Swap(CMsgRemoteDeviceAuthorizationCancelRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgRemoteDeviceAuthorizationCancelRequest::InternalSwap(CMsgRemoteDeviceAuthorizationCancelRequest* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgRemoteDeviceAuthorizationCancelRequest::GetMetadata() const {
  protobuf_steammessages_5fremoteclient_5fdiscovery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fremoteclient_5fdiscovery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgRemoteDeviceAuthorizationCancelRequest

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgRemoteDeviceAuthorizationResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgRemoteDeviceAuthorizationResponse::CMsgRemoteDeviceAuthorizationResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fremoteclient_5fdiscovery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgRemoteDeviceAuthorizationResponse)
}
CMsgRemoteDeviceAuthorizationResponse::CMsgRemoteDeviceAuthorizationResponse(const CMsgRemoteDeviceAuthorizationResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgRemoteDeviceAuthorizationResponse)
}

void CMsgRemoteDeviceAuthorizationResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
}

CMsgRemoteDeviceAuthorizationResponse::~CMsgRemoteDeviceAuthorizationResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgRemoteDeviceAuthorizationResponse)
  SharedDtor();
}

void CMsgRemoteDeviceAuthorizationResponse::SharedDtor() {
}

void CMsgRemoteDeviceAuthorizationResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgRemoteDeviceAuthorizationResponse::descriptor() {
  protobuf_steammessages_5fremoteclient_5fdiscovery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fremoteclient_5fdiscovery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgRemoteDeviceAuthorizationResponse& CMsgRemoteDeviceAuthorizationResponse::default_instance() {
  protobuf_steammessages_5fremoteclient_5fdiscovery_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgRemoteDeviceAuthorizationResponse* CMsgRemoteDeviceAuthorizationResponse::New(::google::protobuf::Arena* arena) const {
  CMsgRemoteDeviceAuthorizationResponse* n = new CMsgRemoteDeviceAuthorizationResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgRemoteDeviceAuthorizationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgRemoteDeviceAuthorizationResponse)
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgRemoteDeviceAuthorizationResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgRemoteDeviceAuthorizationResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .proto.steam.ERemoteDeviceAuthorizationResult result = 1 [default = k_ERemoteDeviceAuthorizationSuccess];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::steam::ERemoteDeviceAuthorizationResult_IsValid(value)) {
            set_result(static_cast< ::proto::steam::ERemoteDeviceAuthorizationResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgRemoteDeviceAuthorizationResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgRemoteDeviceAuthorizationResponse)
  return false;
#undef DO_
}

void CMsgRemoteDeviceAuthorizationResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgRemoteDeviceAuthorizationResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .proto.steam.ERemoteDeviceAuthorizationResult result = 1 [default = k_ERemoteDeviceAuthorizationSuccess];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgRemoteDeviceAuthorizationResponse)
}

::google::protobuf::uint8* CMsgRemoteDeviceAuthorizationResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgRemoteDeviceAuthorizationResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .proto.steam.ERemoteDeviceAuthorizationResult result = 1 [default = k_ERemoteDeviceAuthorizationSuccess];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgRemoteDeviceAuthorizationResponse)
  return target;
}

size_t CMsgRemoteDeviceAuthorizationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgRemoteDeviceAuthorizationResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .proto.steam.ERemoteDeviceAuthorizationResult result = 1 [default = k_ERemoteDeviceAuthorizationSuccess];
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgRemoteDeviceAuthorizationResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgRemoteDeviceAuthorizationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgRemoteDeviceAuthorizationResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgRemoteDeviceAuthorizationResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgRemoteDeviceAuthorizationResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgRemoteDeviceAuthorizationResponse)
    MergeFrom(*source);
  }
}

void CMsgRemoteDeviceAuthorizationResponse::MergeFrom(const CMsgRemoteDeviceAuthorizationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgRemoteDeviceAuthorizationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void CMsgRemoteDeviceAuthorizationResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgRemoteDeviceAuthorizationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRemoteDeviceAuthorizationResponse::CopyFrom(const CMsgRemoteDeviceAuthorizationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgRemoteDeviceAuthorizationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRemoteDeviceAuthorizationResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void CMsgRemoteDeviceAuthorizationResponse::Swap(CMsgRemoteDeviceAuthorizationResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgRemoteDeviceAuthorizationResponse::InternalSwap(CMsgRemoteDeviceAuthorizationResponse* other) {
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgRemoteDeviceAuthorizationResponse::GetMetadata() const {
  protobuf_steammessages_5fremoteclient_5fdiscovery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fremoteclient_5fdiscovery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgRemoteDeviceAuthorizationResponse

// required .proto.steam.ERemoteDeviceAuthorizationResult result = 1 [default = k_ERemoteDeviceAuthorizationSuccess];
bool CMsgRemoteDeviceAuthorizationResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgRemoteDeviceAuthorizationResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgRemoteDeviceAuthorizationResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgRemoteDeviceAuthorizationResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
::proto::steam::ERemoteDeviceAuthorizationResult CMsgRemoteDeviceAuthorizationResponse::result() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteDeviceAuthorizationResponse.result)
  return static_cast< ::proto::steam::ERemoteDeviceAuthorizationResult >(result_);
}
void CMsgRemoteDeviceAuthorizationResponse::set_result(::proto::steam::ERemoteDeviceAuthorizationResult value) {
  assert(::proto::steam::ERemoteDeviceAuthorizationResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteDeviceAuthorizationResponse.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgRemoteDeviceStreamingRequest::kRequestIdFieldNumber;
const int CMsgRemoteDeviceStreamingRequest::kMaximumResolutionXFieldNumber;
const int CMsgRemoteDeviceStreamingRequest::kMaximumResolutionYFieldNumber;
const int CMsgRemoteDeviceStreamingRequest::kAudioChannelCountFieldNumber;
const int CMsgRemoteDeviceStreamingRequest::kDeviceVersionFieldNumber;
const int CMsgRemoteDeviceStreamingRequest::kStreamDesktopFieldNumber;
const int CMsgRemoteDeviceStreamingRequest::kDeviceTokenFieldNumber;
const int CMsgRemoteDeviceStreamingRequest::kPinFieldNumber;
const int CMsgRemoteDeviceStreamingRequest::kEnableVideoStreamingFieldNumber;
const int CMsgRemoteDeviceStreamingRequest::kEnableAudioStreamingFieldNumber;
const int CMsgRemoteDeviceStreamingRequest::kEnableInputStreamingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgRemoteDeviceStreamingRequest::CMsgRemoteDeviceStreamingRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fremoteclient_5fdiscovery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgRemoteDeviceStreamingRequest)
}
CMsgRemoteDeviceStreamingRequest::CMsgRemoteDeviceStreamingRequest(const CMsgRemoteDeviceStreamingRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  device_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_device_version()) {
    device_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_version_);
  }
  device_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_device_token()) {
    device_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_token_);
  }
  pin_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pin()) {
    pin_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pin_);
  }
  ::memcpy(&request_id_, &from.request_id_,
    reinterpret_cast<char*>(&enable_input_streaming_) -
    reinterpret_cast<char*>(&request_id_) + sizeof(enable_input_streaming_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgRemoteDeviceStreamingRequest)
}

void CMsgRemoteDeviceStreamingRequest::SharedCtor() {
  _cached_size_ = 0;
  device_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pin_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&request_id_, 0, reinterpret_cast<char*>(&stream_desktop_) -
    reinterpret_cast<char*>(&request_id_) + sizeof(stream_desktop_));
  audio_channel_count_ = 2;
  enable_video_streaming_ = true;
  enable_audio_streaming_ = true;
  enable_input_streaming_ = true;
}

CMsgRemoteDeviceStreamingRequest::~CMsgRemoteDeviceStreamingRequest() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgRemoteDeviceStreamingRequest)
  SharedDtor();
}

void CMsgRemoteDeviceStreamingRequest::SharedDtor() {
  device_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pin_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgRemoteDeviceStreamingRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgRemoteDeviceStreamingRequest::descriptor() {
  protobuf_steammessages_5fremoteclient_5fdiscovery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fremoteclient_5fdiscovery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgRemoteDeviceStreamingRequest& CMsgRemoteDeviceStreamingRequest::default_instance() {
  protobuf_steammessages_5fremoteclient_5fdiscovery_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgRemoteDeviceStreamingRequest* CMsgRemoteDeviceStreamingRequest::New(::google::protobuf::Arena* arena) const {
  CMsgRemoteDeviceStreamingRequest* n = new CMsgRemoteDeviceStreamingRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgRemoteDeviceStreamingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgRemoteDeviceStreamingRequest)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_device_version()) {
      GOOGLE_DCHECK(!device_version_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*device_version_.UnsafeRawStringPointer())->clear();
    }
    if (has_device_token()) {
      GOOGLE_DCHECK(!device_token_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*device_token_.UnsafeRawStringPointer())->clear();
    }
    if (has_pin()) {
      GOOGLE_DCHECK(!pin_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*pin_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 248u) {
    ::memset(&request_id_, 0, reinterpret_cast<char*>(&stream_desktop_) -
      reinterpret_cast<char*>(&request_id_) + sizeof(stream_desktop_));
    audio_channel_count_ = 2;
  }
  if (_has_bits_[8 / 32] & 1792u) {
    enable_video_streaming_ = true;
    enable_audio_streaming_ = true;
    enable_input_streaming_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgRemoteDeviceStreamingRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgRemoteDeviceStreamingRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 request_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_request_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &request_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 maximum_resolution_x = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_maximum_resolution_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maximum_resolution_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 maximum_resolution_y = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_maximum_resolution_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maximum_resolution_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 audio_channel_count = 4 [default = 2];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_audio_channel_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &audio_channel_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string device_version = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->device_version().data(), this->device_version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgRemoteDeviceStreamingRequest.device_version");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool stream_desktop = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_stream_desktop();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &stream_desktop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes device_token = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_device_token()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes pin = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_video_streaming = 9 [default = true];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_enable_video_streaming();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_video_streaming_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_audio_streaming = 10 [default = true];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_enable_audio_streaming();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_audio_streaming_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_input_streaming = 11 [default = true];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_enable_input_streaming();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_input_streaming_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgRemoteDeviceStreamingRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgRemoteDeviceStreamingRequest)
  return false;
#undef DO_
}

void CMsgRemoteDeviceStreamingRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgRemoteDeviceStreamingRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 request_id = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->request_id(), output);
  }

  // optional int32 maximum_resolution_x = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->maximum_resolution_x(), output);
  }

  // optional int32 maximum_resolution_y = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->maximum_resolution_y(), output);
  }

  // optional int32 audio_channel_count = 4 [default = 2];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->audio_channel_count(), output);
  }

  // optional string device_version = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_version().data(), this->device_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgRemoteDeviceStreamingRequest.device_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->device_version(), output);
  }

  // optional bool stream_desktop = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->stream_desktop(), output);
  }

  // optional bytes device_token = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->device_token(), output);
  }

  // optional bytes pin = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->pin(), output);
  }

  // optional bool enable_video_streaming = 9 [default = true];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->enable_video_streaming(), output);
  }

  // optional bool enable_audio_streaming = 10 [default = true];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->enable_audio_streaming(), output);
  }

  // optional bool enable_input_streaming = 11 [default = true];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->enable_input_streaming(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgRemoteDeviceStreamingRequest)
}

::google::protobuf::uint8* CMsgRemoteDeviceStreamingRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgRemoteDeviceStreamingRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 request_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->request_id(), target);
  }

  // optional int32 maximum_resolution_x = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->maximum_resolution_x(), target);
  }

  // optional int32 maximum_resolution_y = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->maximum_resolution_y(), target);
  }

  // optional int32 audio_channel_count = 4 [default = 2];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->audio_channel_count(), target);
  }

  // optional string device_version = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_version().data(), this->device_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgRemoteDeviceStreamingRequest.device_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->device_version(), target);
  }

  // optional bool stream_desktop = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->stream_desktop(), target);
  }

  // optional bytes device_token = 7;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->device_token(), target);
  }

  // optional bytes pin = 8;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->pin(), target);
  }

  // optional bool enable_video_streaming = 9 [default = true];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->enable_video_streaming(), target);
  }

  // optional bool enable_audio_streaming = 10 [default = true];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->enable_audio_streaming(), target);
  }

  // optional bool enable_input_streaming = 11 [default = true];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->enable_input_streaming(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgRemoteDeviceStreamingRequest)
  return target;
}

size_t CMsgRemoteDeviceStreamingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgRemoteDeviceStreamingRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 request_id = 1;
  if (has_request_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->request_id());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string device_version = 5;
    if (has_device_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_version());
    }

    // optional bytes device_token = 7;
    if (has_device_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->device_token());
    }

    // optional bytes pin = 8;
    if (has_pin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->pin());
    }

  }
  if (_has_bits_[0 / 32] & 240u) {
    // optional int32 maximum_resolution_x = 2;
    if (has_maximum_resolution_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maximum_resolution_x());
    }

    // optional int32 maximum_resolution_y = 3;
    if (has_maximum_resolution_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maximum_resolution_y());
    }

    // optional bool stream_desktop = 6;
    if (has_stream_desktop()) {
      total_size += 1 + 1;
    }

    // optional int32 audio_channel_count = 4 [default = 2];
    if (has_audio_channel_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->audio_channel_count());
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional bool enable_video_streaming = 9 [default = true];
    if (has_enable_video_streaming()) {
      total_size += 1 + 1;
    }

    // optional bool enable_audio_streaming = 10 [default = true];
    if (has_enable_audio_streaming()) {
      total_size += 1 + 1;
    }

    // optional bool enable_input_streaming = 11 [default = true];
    if (has_enable_input_streaming()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgRemoteDeviceStreamingRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgRemoteDeviceStreamingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgRemoteDeviceStreamingRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgRemoteDeviceStreamingRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgRemoteDeviceStreamingRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgRemoteDeviceStreamingRequest)
    MergeFrom(*source);
  }
}

void CMsgRemoteDeviceStreamingRequest::MergeFrom(const CMsgRemoteDeviceStreamingRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgRemoteDeviceStreamingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_device_version();
      device_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_version_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_device_token();
      device_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_token_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_pin();
      pin_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pin_);
    }
    if (cached_has_bits & 0x00000008u) {
      request_id_ = from.request_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      maximum_resolution_x_ = from.maximum_resolution_x_;
    }
    if (cached_has_bits & 0x00000020u) {
      maximum_resolution_y_ = from.maximum_resolution_y_;
    }
    if (cached_has_bits & 0x00000040u) {
      stream_desktop_ = from.stream_desktop_;
    }
    if (cached_has_bits & 0x00000080u) {
      audio_channel_count_ = from.audio_channel_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      enable_video_streaming_ = from.enable_video_streaming_;
    }
    if (cached_has_bits & 0x00000200u) {
      enable_audio_streaming_ = from.enable_audio_streaming_;
    }
    if (cached_has_bits & 0x00000400u) {
      enable_input_streaming_ = from.enable_input_streaming_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgRemoteDeviceStreamingRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgRemoteDeviceStreamingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRemoteDeviceStreamingRequest::CopyFrom(const CMsgRemoteDeviceStreamingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgRemoteDeviceStreamingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRemoteDeviceStreamingRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;
  return true;
}

void CMsgRemoteDeviceStreamingRequest::Swap(CMsgRemoteDeviceStreamingRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgRemoteDeviceStreamingRequest::InternalSwap(CMsgRemoteDeviceStreamingRequest* other) {
  device_version_.Swap(&other->device_version_);
  device_token_.Swap(&other->device_token_);
  pin_.Swap(&other->pin_);
  std::swap(request_id_, other->request_id_);
  std::swap(maximum_resolution_x_, other->maximum_resolution_x_);
  std::swap(maximum_resolution_y_, other->maximum_resolution_y_);
  std::swap(stream_desktop_, other->stream_desktop_);
  std::swap(audio_channel_count_, other->audio_channel_count_);
  std::swap(enable_video_streaming_, other->enable_video_streaming_);
  std::swap(enable_audio_streaming_, other->enable_audio_streaming_);
  std::swap(enable_input_streaming_, other->enable_input_streaming_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgRemoteDeviceStreamingRequest::GetMetadata() const {
  protobuf_steammessages_5fremoteclient_5fdiscovery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fremoteclient_5fdiscovery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgRemoteDeviceStreamingRequest

// required uint32 request_id = 1;
bool CMsgRemoteDeviceStreamingRequest::has_request_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgRemoteDeviceStreamingRequest::set_has_request_id() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgRemoteDeviceStreamingRequest::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgRemoteDeviceStreamingRequest::clear_request_id() {
  request_id_ = 0u;
  clear_has_request_id();
}
::google::protobuf::uint32 CMsgRemoteDeviceStreamingRequest::request_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteDeviceStreamingRequest.request_id)
  return request_id_;
}
void CMsgRemoteDeviceStreamingRequest::set_request_id(::google::protobuf::uint32 value) {
  set_has_request_id();
  request_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteDeviceStreamingRequest.request_id)
}

// optional int32 maximum_resolution_x = 2;
bool CMsgRemoteDeviceStreamingRequest::has_maximum_resolution_x() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgRemoteDeviceStreamingRequest::set_has_maximum_resolution_x() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgRemoteDeviceStreamingRequest::clear_has_maximum_resolution_x() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgRemoteDeviceStreamingRequest::clear_maximum_resolution_x() {
  maximum_resolution_x_ = 0;
  clear_has_maximum_resolution_x();
}
::google::protobuf::int32 CMsgRemoteDeviceStreamingRequest::maximum_resolution_x() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteDeviceStreamingRequest.maximum_resolution_x)
  return maximum_resolution_x_;
}
void CMsgRemoteDeviceStreamingRequest::set_maximum_resolution_x(::google::protobuf::int32 value) {
  set_has_maximum_resolution_x();
  maximum_resolution_x_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteDeviceStreamingRequest.maximum_resolution_x)
}

// optional int32 maximum_resolution_y = 3;
bool CMsgRemoteDeviceStreamingRequest::has_maximum_resolution_y() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgRemoteDeviceStreamingRequest::set_has_maximum_resolution_y() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgRemoteDeviceStreamingRequest::clear_has_maximum_resolution_y() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgRemoteDeviceStreamingRequest::clear_maximum_resolution_y() {
  maximum_resolution_y_ = 0;
  clear_has_maximum_resolution_y();
}
::google::protobuf::int32 CMsgRemoteDeviceStreamingRequest::maximum_resolution_y() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteDeviceStreamingRequest.maximum_resolution_y)
  return maximum_resolution_y_;
}
void CMsgRemoteDeviceStreamingRequest::set_maximum_resolution_y(::google::protobuf::int32 value) {
  set_has_maximum_resolution_y();
  maximum_resolution_y_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteDeviceStreamingRequest.maximum_resolution_y)
}

// optional int32 audio_channel_count = 4 [default = 2];
bool CMsgRemoteDeviceStreamingRequest::has_audio_channel_count() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgRemoteDeviceStreamingRequest::set_has_audio_channel_count() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgRemoteDeviceStreamingRequest::clear_has_audio_channel_count() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgRemoteDeviceStreamingRequest::clear_audio_channel_count() {
  audio_channel_count_ = 2;
  clear_has_audio_channel_count();
}
::google::protobuf::int32 CMsgRemoteDeviceStreamingRequest::audio_channel_count() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteDeviceStreamingRequest.audio_channel_count)
  return audio_channel_count_;
}
void CMsgRemoteDeviceStreamingRequest::set_audio_channel_count(::google::protobuf::int32 value) {
  set_has_audio_channel_count();
  audio_channel_count_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteDeviceStreamingRequest.audio_channel_count)
}

// optional string device_version = 5;
bool CMsgRemoteDeviceStreamingRequest::has_device_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgRemoteDeviceStreamingRequest::set_has_device_version() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgRemoteDeviceStreamingRequest::clear_has_device_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgRemoteDeviceStreamingRequest::clear_device_version() {
  device_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_device_version();
}
const ::std::string& CMsgRemoteDeviceStreamingRequest::device_version() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteDeviceStreamingRequest.device_version)
  return device_version_.GetNoArena();
}
void CMsgRemoteDeviceStreamingRequest::set_device_version(const ::std::string& value) {
  set_has_device_version();
  device_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteDeviceStreamingRequest.device_version)
}
#if LANG_CXX11
void CMsgRemoteDeviceStreamingRequest::set_device_version(::std::string&& value) {
  set_has_device_version();
  device_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgRemoteDeviceStreamingRequest.device_version)
}
#endif
void CMsgRemoteDeviceStreamingRequest::set_device_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_device_version();
  device_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgRemoteDeviceStreamingRequest.device_version)
}
void CMsgRemoteDeviceStreamingRequest::set_device_version(const char* value, size_t size) {
  set_has_device_version();
  device_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgRemoteDeviceStreamingRequest.device_version)
}
::std::string* CMsgRemoteDeviceStreamingRequest::mutable_device_version() {
  set_has_device_version();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgRemoteDeviceStreamingRequest.device_version)
  return device_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgRemoteDeviceStreamingRequest::release_device_version() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgRemoteDeviceStreamingRequest.device_version)
  clear_has_device_version();
  return device_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgRemoteDeviceStreamingRequest::set_allocated_device_version(::std::string* device_version) {
  if (device_version != NULL) {
    set_has_device_version();
  } else {
    clear_has_device_version();
  }
  device_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_version);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgRemoteDeviceStreamingRequest.device_version)
}

// optional bool stream_desktop = 6;
bool CMsgRemoteDeviceStreamingRequest::has_stream_desktop() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgRemoteDeviceStreamingRequest::set_has_stream_desktop() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgRemoteDeviceStreamingRequest::clear_has_stream_desktop() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgRemoteDeviceStreamingRequest::clear_stream_desktop() {
  stream_desktop_ = false;
  clear_has_stream_desktop();
}
bool CMsgRemoteDeviceStreamingRequest::stream_desktop() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteDeviceStreamingRequest.stream_desktop)
  return stream_desktop_;
}
void CMsgRemoteDeviceStreamingRequest::set_stream_desktop(bool value) {
  set_has_stream_desktop();
  stream_desktop_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteDeviceStreamingRequest.stream_desktop)
}

// optional bytes device_token = 7;
bool CMsgRemoteDeviceStreamingRequest::has_device_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgRemoteDeviceStreamingRequest::set_has_device_token() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgRemoteDeviceStreamingRequest::clear_has_device_token() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgRemoteDeviceStreamingRequest::clear_device_token() {
  device_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_device_token();
}
const ::std::string& CMsgRemoteDeviceStreamingRequest::device_token() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteDeviceStreamingRequest.device_token)
  return device_token_.GetNoArena();
}
void CMsgRemoteDeviceStreamingRequest::set_device_token(const ::std::string& value) {
  set_has_device_token();
  device_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteDeviceStreamingRequest.device_token)
}
#if LANG_CXX11
void CMsgRemoteDeviceStreamingRequest::set_device_token(::std::string&& value) {
  set_has_device_token();
  device_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgRemoteDeviceStreamingRequest.device_token)
}
#endif
void CMsgRemoteDeviceStreamingRequest::set_device_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_device_token();
  device_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgRemoteDeviceStreamingRequest.device_token)
}
void CMsgRemoteDeviceStreamingRequest::set_device_token(const void* value, size_t size) {
  set_has_device_token();
  device_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgRemoteDeviceStreamingRequest.device_token)
}
::std::string* CMsgRemoteDeviceStreamingRequest::mutable_device_token() {
  set_has_device_token();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgRemoteDeviceStreamingRequest.device_token)
  return device_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgRemoteDeviceStreamingRequest::release_device_token() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgRemoteDeviceStreamingRequest.device_token)
  clear_has_device_token();
  return device_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgRemoteDeviceStreamingRequest::set_allocated_device_token(::std::string* device_token) {
  if (device_token != NULL) {
    set_has_device_token();
  } else {
    clear_has_device_token();
  }
  device_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_token);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgRemoteDeviceStreamingRequest.device_token)
}

// optional bytes pin = 8;
bool CMsgRemoteDeviceStreamingRequest::has_pin() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgRemoteDeviceStreamingRequest::set_has_pin() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgRemoteDeviceStreamingRequest::clear_has_pin() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgRemoteDeviceStreamingRequest::clear_pin() {
  pin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pin();
}
const ::std::string& CMsgRemoteDeviceStreamingRequest::pin() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteDeviceStreamingRequest.pin)
  return pin_.GetNoArena();
}
void CMsgRemoteDeviceStreamingRequest::set_pin(const ::std::string& value) {
  set_has_pin();
  pin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteDeviceStreamingRequest.pin)
}
#if LANG_CXX11
void CMsgRemoteDeviceStreamingRequest::set_pin(::std::string&& value) {
  set_has_pin();
  pin_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgRemoteDeviceStreamingRequest.pin)
}
#endif
void CMsgRemoteDeviceStreamingRequest::set_pin(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pin();
  pin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgRemoteDeviceStreamingRequest.pin)
}
void CMsgRemoteDeviceStreamingRequest::set_pin(const void* value, size_t size) {
  set_has_pin();
  pin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgRemoteDeviceStreamingRequest.pin)
}
::std::string* CMsgRemoteDeviceStreamingRequest::mutable_pin() {
  set_has_pin();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgRemoteDeviceStreamingRequest.pin)
  return pin_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgRemoteDeviceStreamingRequest::release_pin() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgRemoteDeviceStreamingRequest.pin)
  clear_has_pin();
  return pin_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgRemoteDeviceStreamingRequest::set_allocated_pin(::std::string* pin) {
  if (pin != NULL) {
    set_has_pin();
  } else {
    clear_has_pin();
  }
  pin_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pin);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgRemoteDeviceStreamingRequest.pin)
}

// optional bool enable_video_streaming = 9 [default = true];
bool CMsgRemoteDeviceStreamingRequest::has_enable_video_streaming() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CMsgRemoteDeviceStreamingRequest::set_has_enable_video_streaming() {
  _has_bits_[0] |= 0x00000100u;
}
void CMsgRemoteDeviceStreamingRequest::clear_has_enable_video_streaming() {
  _has_bits_[0] &= ~0x00000100u;
}
void CMsgRemoteDeviceStreamingRequest::clear_enable_video_streaming() {
  enable_video_streaming_ = true;
  clear_has_enable_video_streaming();
}
bool CMsgRemoteDeviceStreamingRequest::enable_video_streaming() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteDeviceStreamingRequest.enable_video_streaming)
  return enable_video_streaming_;
}
void CMsgRemoteDeviceStreamingRequest::set_enable_video_streaming(bool value) {
  set_has_enable_video_streaming();
  enable_video_streaming_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteDeviceStreamingRequest.enable_video_streaming)
}

// optional bool enable_audio_streaming = 10 [default = true];
bool CMsgRemoteDeviceStreamingRequest::has_enable_audio_streaming() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CMsgRemoteDeviceStreamingRequest::set_has_enable_audio_streaming() {
  _has_bits_[0] |= 0x00000200u;
}
void CMsgRemoteDeviceStreamingRequest::clear_has_enable_audio_streaming() {
  _has_bits_[0] &= ~0x00000200u;
}
void CMsgRemoteDeviceStreamingRequest::clear_enable_audio_streaming() {
  enable_audio_streaming_ = true;
  clear_has_enable_audio_streaming();
}
bool CMsgRemoteDeviceStreamingRequest::enable_audio_streaming() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteDeviceStreamingRequest.enable_audio_streaming)
  return enable_audio_streaming_;
}
void CMsgRemoteDeviceStreamingRequest::set_enable_audio_streaming(bool value) {
  set_has_enable_audio_streaming();
  enable_audio_streaming_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteDeviceStreamingRequest.enable_audio_streaming)
}

// optional bool enable_input_streaming = 11 [default = true];
bool CMsgRemoteDeviceStreamingRequest::has_enable_input_streaming() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CMsgRemoteDeviceStreamingRequest::set_has_enable_input_streaming() {
  _has_bits_[0] |= 0x00000400u;
}
void CMsgRemoteDeviceStreamingRequest::clear_has_enable_input_streaming() {
  _has_bits_[0] &= ~0x00000400u;
}
void CMsgRemoteDeviceStreamingRequest::clear_enable_input_streaming() {
  enable_input_streaming_ = true;
  clear_has_enable_input_streaming();
}
bool CMsgRemoteDeviceStreamingRequest::enable_input_streaming() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteDeviceStreamingRequest.enable_input_streaming)
  return enable_input_streaming_;
}
void CMsgRemoteDeviceStreamingRequest::set_enable_input_streaming(bool value) {
  set_has_enable_input_streaming();
  enable_input_streaming_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteDeviceStreamingRequest.enable_input_streaming)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgRemoteDeviceStreamingCancelRequest::kRequestIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgRemoteDeviceStreamingCancelRequest::CMsgRemoteDeviceStreamingCancelRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fremoteclient_5fdiscovery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgRemoteDeviceStreamingCancelRequest)
}
CMsgRemoteDeviceStreamingCancelRequest::CMsgRemoteDeviceStreamingCancelRequest(const CMsgRemoteDeviceStreamingCancelRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_id_ = from.request_id_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgRemoteDeviceStreamingCancelRequest)
}

void CMsgRemoteDeviceStreamingCancelRequest::SharedCtor() {
  _cached_size_ = 0;
  request_id_ = 0u;
}

CMsgRemoteDeviceStreamingCancelRequest::~CMsgRemoteDeviceStreamingCancelRequest() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgRemoteDeviceStreamingCancelRequest)
  SharedDtor();
}

void CMsgRemoteDeviceStreamingCancelRequest::SharedDtor() {
}

void CMsgRemoteDeviceStreamingCancelRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgRemoteDeviceStreamingCancelRequest::descriptor() {
  protobuf_steammessages_5fremoteclient_5fdiscovery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fremoteclient_5fdiscovery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgRemoteDeviceStreamingCancelRequest& CMsgRemoteDeviceStreamingCancelRequest::default_instance() {
  protobuf_steammessages_5fremoteclient_5fdiscovery_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgRemoteDeviceStreamingCancelRequest* CMsgRemoteDeviceStreamingCancelRequest::New(::google::protobuf::Arena* arena) const {
  CMsgRemoteDeviceStreamingCancelRequest* n = new CMsgRemoteDeviceStreamingCancelRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgRemoteDeviceStreamingCancelRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgRemoteDeviceStreamingCancelRequest)
  request_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgRemoteDeviceStreamingCancelRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgRemoteDeviceStreamingCancelRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 request_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_request_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &request_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgRemoteDeviceStreamingCancelRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgRemoteDeviceStreamingCancelRequest)
  return false;
#undef DO_
}

void CMsgRemoteDeviceStreamingCancelRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgRemoteDeviceStreamingCancelRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 request_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->request_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgRemoteDeviceStreamingCancelRequest)
}

::google::protobuf::uint8* CMsgRemoteDeviceStreamingCancelRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgRemoteDeviceStreamingCancelRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 request_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->request_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgRemoteDeviceStreamingCancelRequest)
  return target;
}

size_t CMsgRemoteDeviceStreamingCancelRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgRemoteDeviceStreamingCancelRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 request_id = 1;
  if (has_request_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->request_id());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgRemoteDeviceStreamingCancelRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgRemoteDeviceStreamingCancelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgRemoteDeviceStreamingCancelRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgRemoteDeviceStreamingCancelRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgRemoteDeviceStreamingCancelRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgRemoteDeviceStreamingCancelRequest)
    MergeFrom(*source);
  }
}

void CMsgRemoteDeviceStreamingCancelRequest::MergeFrom(const CMsgRemoteDeviceStreamingCancelRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgRemoteDeviceStreamingCancelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_request_id()) {
    set_request_id(from.request_id());
  }
}

void CMsgRemoteDeviceStreamingCancelRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgRemoteDeviceStreamingCancelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRemoteDeviceStreamingCancelRequest::CopyFrom(const CMsgRemoteDeviceStreamingCancelRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgRemoteDeviceStreamingCancelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRemoteDeviceStreamingCancelRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void CMsgRemoteDeviceStreamingCancelRequest::Swap(CMsgRemoteDeviceStreamingCancelRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgRemoteDeviceStreamingCancelRequest::InternalSwap(CMsgRemoteDeviceStreamingCancelRequest* other) {
  std::swap(request_id_, other->request_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgRemoteDeviceStreamingCancelRequest::GetMetadata() const {
  protobuf_steammessages_5fremoteclient_5fdiscovery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fremoteclient_5fdiscovery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgRemoteDeviceStreamingCancelRequest

// required uint32 request_id = 1;
bool CMsgRemoteDeviceStreamingCancelRequest::has_request_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgRemoteDeviceStreamingCancelRequest::set_has_request_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgRemoteDeviceStreamingCancelRequest::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgRemoteDeviceStreamingCancelRequest::clear_request_id() {
  request_id_ = 0u;
  clear_has_request_id();
}
::google::protobuf::uint32 CMsgRemoteDeviceStreamingCancelRequest::request_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteDeviceStreamingCancelRequest.request_id)
  return request_id_;
}
void CMsgRemoteDeviceStreamingCancelRequest::set_request_id(::google::protobuf::uint32 value) {
  set_has_request_id();
  request_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteDeviceStreamingCancelRequest.request_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgRemoteDeviceStreamingResponse::kRequestIdFieldNumber;
const int CMsgRemoteDeviceStreamingResponse::kResultFieldNumber;
const int CMsgRemoteDeviceStreamingResponse::kPortFieldNumber;
const int CMsgRemoteDeviceStreamingResponse::kEncryptedSessionKeyFieldNumber;
const int CMsgRemoteDeviceStreamingResponse::kVirtualhereLicensedDeviceCountOBSOLETEFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgRemoteDeviceStreamingResponse::CMsgRemoteDeviceStreamingResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fremoteclient_5fdiscovery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgRemoteDeviceStreamingResponse)
}
CMsgRemoteDeviceStreamingResponse::CMsgRemoteDeviceStreamingResponse(const CMsgRemoteDeviceStreamingResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  encrypted_session_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_encrypted_session_key()) {
    encrypted_session_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.encrypted_session_key_);
  }
  ::memcpy(&request_id_, &from.request_id_,
    reinterpret_cast<char*>(&virtualhere_licensed_device_count_obsolete_) -
    reinterpret_cast<char*>(&request_id_) + sizeof(virtualhere_licensed_device_count_obsolete_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgRemoteDeviceStreamingResponse)
}

void CMsgRemoteDeviceStreamingResponse::SharedCtor() {
  _cached_size_ = 0;
  encrypted_session_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&request_id_, 0, reinterpret_cast<char*>(&virtualhere_licensed_device_count_obsolete_) -
    reinterpret_cast<char*>(&request_id_) + sizeof(virtualhere_licensed_device_count_obsolete_));
}

CMsgRemoteDeviceStreamingResponse::~CMsgRemoteDeviceStreamingResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgRemoteDeviceStreamingResponse)
  SharedDtor();
}

void CMsgRemoteDeviceStreamingResponse::SharedDtor() {
  encrypted_session_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgRemoteDeviceStreamingResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgRemoteDeviceStreamingResponse::descriptor() {
  protobuf_steammessages_5fremoteclient_5fdiscovery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fremoteclient_5fdiscovery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgRemoteDeviceStreamingResponse& CMsgRemoteDeviceStreamingResponse::default_instance() {
  protobuf_steammessages_5fremoteclient_5fdiscovery_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgRemoteDeviceStreamingResponse* CMsgRemoteDeviceStreamingResponse::New(::google::protobuf::Arena* arena) const {
  CMsgRemoteDeviceStreamingResponse* n = new CMsgRemoteDeviceStreamingResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgRemoteDeviceStreamingResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgRemoteDeviceStreamingResponse)
  if (has_encrypted_session_key()) {
    GOOGLE_DCHECK(!encrypted_session_key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*encrypted_session_key_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 30u) {
    ::memset(&request_id_, 0, reinterpret_cast<char*>(&virtualhere_licensed_device_count_obsolete_) -
      reinterpret_cast<char*>(&request_id_) + sizeof(virtualhere_licensed_device_count_obsolete_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgRemoteDeviceStreamingResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgRemoteDeviceStreamingResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 request_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_request_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &request_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .proto.steam.ERemoteDeviceStreamingResult result = 2 [default = k_ERemoteDeviceStreamingSuccess];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::steam::ERemoteDeviceStreamingResult_IsValid(value)) {
            set_result(static_cast< ::proto::steam::ERemoteDeviceStreamingResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 port = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes encrypted_session_key = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_encrypted_session_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 virtualhere_licensed_device_count_OBSOLETE = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_virtualhere_licensed_device_count_obsolete();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &virtualhere_licensed_device_count_obsolete_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgRemoteDeviceStreamingResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgRemoteDeviceStreamingResponse)
  return false;
#undef DO_
}

void CMsgRemoteDeviceStreamingResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgRemoteDeviceStreamingResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 request_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->request_id(), output);
  }

  // required .proto.steam.ERemoteDeviceStreamingResult result = 2 [default = k_ERemoteDeviceStreamingSuccess];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // optional uint32 port = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->port(), output);
  }

  // optional bytes encrypted_session_key = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->encrypted_session_key(), output);
  }

  // optional int32 virtualhere_licensed_device_count_OBSOLETE = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->virtualhere_licensed_device_count_obsolete(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgRemoteDeviceStreamingResponse)
}

::google::protobuf::uint8* CMsgRemoteDeviceStreamingResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgRemoteDeviceStreamingResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 request_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->request_id(), target);
  }

  // required .proto.steam.ERemoteDeviceStreamingResult result = 2 [default = k_ERemoteDeviceStreamingSuccess];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // optional uint32 port = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->port(), target);
  }

  // optional bytes encrypted_session_key = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->encrypted_session_key(), target);
  }

  // optional int32 virtualhere_licensed_device_count_OBSOLETE = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->virtualhere_licensed_device_count_obsolete(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgRemoteDeviceStreamingResponse)
  return target;
}

size_t CMsgRemoteDeviceStreamingResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:proto.steam.CMsgRemoteDeviceStreamingResponse)
  size_t total_size = 0;

  if (has_request_id()) {
    // required uint32 request_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->request_id());
  }

  if (has_result()) {
    // required .proto.steam.ERemoteDeviceStreamingResult result = 2 [default = k_ERemoteDeviceStreamingSuccess];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  return total_size;
}
size_t CMsgRemoteDeviceStreamingResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgRemoteDeviceStreamingResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required uint32 request_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->request_id());

    // required .proto.steam.ERemoteDeviceStreamingResult result = 2 [default = k_ERemoteDeviceStreamingSuccess];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bytes encrypted_session_key = 4;
  if (has_encrypted_session_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->encrypted_session_key());
  }

  if (_has_bits_[0 / 32] & 24u) {
    // optional uint32 port = 3;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

    // optional int32 virtualhere_licensed_device_count_OBSOLETE = 5;
    if (has_virtualhere_licensed_device_count_obsolete()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->virtualhere_licensed_device_count_obsolete());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgRemoteDeviceStreamingResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgRemoteDeviceStreamingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgRemoteDeviceStreamingResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgRemoteDeviceStreamingResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgRemoteDeviceStreamingResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgRemoteDeviceStreamingResponse)
    MergeFrom(*source);
  }
}

void CMsgRemoteDeviceStreamingResponse::MergeFrom(const CMsgRemoteDeviceStreamingResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgRemoteDeviceStreamingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_encrypted_session_key();
      encrypted_session_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.encrypted_session_key_);
    }
    if (cached_has_bits & 0x00000002u) {
      request_id_ = from.request_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000008u) {
      port_ = from.port_;
    }
    if (cached_has_bits & 0x00000010u) {
      virtualhere_licensed_device_count_obsolete_ = from.virtualhere_licensed_device_count_obsolete_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgRemoteDeviceStreamingResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgRemoteDeviceStreamingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRemoteDeviceStreamingResponse::CopyFrom(const CMsgRemoteDeviceStreamingResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgRemoteDeviceStreamingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRemoteDeviceStreamingResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  return true;
}

void CMsgRemoteDeviceStreamingResponse::Swap(CMsgRemoteDeviceStreamingResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgRemoteDeviceStreamingResponse::InternalSwap(CMsgRemoteDeviceStreamingResponse* other) {
  encrypted_session_key_.Swap(&other->encrypted_session_key_);
  std::swap(request_id_, other->request_id_);
  std::swap(result_, other->result_);
  std::swap(port_, other->port_);
  std::swap(virtualhere_licensed_device_count_obsolete_, other->virtualhere_licensed_device_count_obsolete_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgRemoteDeviceStreamingResponse::GetMetadata() const {
  protobuf_steammessages_5fremoteclient_5fdiscovery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fremoteclient_5fdiscovery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgRemoteDeviceStreamingResponse

// required uint32 request_id = 1;
bool CMsgRemoteDeviceStreamingResponse::has_request_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgRemoteDeviceStreamingResponse::set_has_request_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgRemoteDeviceStreamingResponse::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgRemoteDeviceStreamingResponse::clear_request_id() {
  request_id_ = 0u;
  clear_has_request_id();
}
::google::protobuf::uint32 CMsgRemoteDeviceStreamingResponse::request_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteDeviceStreamingResponse.request_id)
  return request_id_;
}
void CMsgRemoteDeviceStreamingResponse::set_request_id(::google::protobuf::uint32 value) {
  set_has_request_id();
  request_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteDeviceStreamingResponse.request_id)
}

// required .proto.steam.ERemoteDeviceStreamingResult result = 2 [default = k_ERemoteDeviceStreamingSuccess];
bool CMsgRemoteDeviceStreamingResponse::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgRemoteDeviceStreamingResponse::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgRemoteDeviceStreamingResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgRemoteDeviceStreamingResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
::proto::steam::ERemoteDeviceStreamingResult CMsgRemoteDeviceStreamingResponse::result() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteDeviceStreamingResponse.result)
  return static_cast< ::proto::steam::ERemoteDeviceStreamingResult >(result_);
}
void CMsgRemoteDeviceStreamingResponse::set_result(::proto::steam::ERemoteDeviceStreamingResult value) {
  assert(::proto::steam::ERemoteDeviceStreamingResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteDeviceStreamingResponse.result)
}

// optional uint32 port = 3;
bool CMsgRemoteDeviceStreamingResponse::has_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgRemoteDeviceStreamingResponse::set_has_port() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgRemoteDeviceStreamingResponse::clear_has_port() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgRemoteDeviceStreamingResponse::clear_port() {
  port_ = 0u;
  clear_has_port();
}
::google::protobuf::uint32 CMsgRemoteDeviceStreamingResponse::port() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteDeviceStreamingResponse.port)
  return port_;
}
void CMsgRemoteDeviceStreamingResponse::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteDeviceStreamingResponse.port)
}

// optional bytes encrypted_session_key = 4;
bool CMsgRemoteDeviceStreamingResponse::has_encrypted_session_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgRemoteDeviceStreamingResponse::set_has_encrypted_session_key() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgRemoteDeviceStreamingResponse::clear_has_encrypted_session_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgRemoteDeviceStreamingResponse::clear_encrypted_session_key() {
  encrypted_session_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_encrypted_session_key();
}
const ::std::string& CMsgRemoteDeviceStreamingResponse::encrypted_session_key() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteDeviceStreamingResponse.encrypted_session_key)
  return encrypted_session_key_.GetNoArena();
}
void CMsgRemoteDeviceStreamingResponse::set_encrypted_session_key(const ::std::string& value) {
  set_has_encrypted_session_key();
  encrypted_session_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteDeviceStreamingResponse.encrypted_session_key)
}
#if LANG_CXX11
void CMsgRemoteDeviceStreamingResponse::set_encrypted_session_key(::std::string&& value) {
  set_has_encrypted_session_key();
  encrypted_session_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgRemoteDeviceStreamingResponse.encrypted_session_key)
}
#endif
void CMsgRemoteDeviceStreamingResponse::set_encrypted_session_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_encrypted_session_key();
  encrypted_session_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgRemoteDeviceStreamingResponse.encrypted_session_key)
}
void CMsgRemoteDeviceStreamingResponse::set_encrypted_session_key(const void* value, size_t size) {
  set_has_encrypted_session_key();
  encrypted_session_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgRemoteDeviceStreamingResponse.encrypted_session_key)
}
::std::string* CMsgRemoteDeviceStreamingResponse::mutable_encrypted_session_key() {
  set_has_encrypted_session_key();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgRemoteDeviceStreamingResponse.encrypted_session_key)
  return encrypted_session_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgRemoteDeviceStreamingResponse::release_encrypted_session_key() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgRemoteDeviceStreamingResponse.encrypted_session_key)
  clear_has_encrypted_session_key();
  return encrypted_session_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgRemoteDeviceStreamingResponse::set_allocated_encrypted_session_key(::std::string* encrypted_session_key) {
  if (encrypted_session_key != NULL) {
    set_has_encrypted_session_key();
  } else {
    clear_has_encrypted_session_key();
  }
  encrypted_session_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), encrypted_session_key);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgRemoteDeviceStreamingResponse.encrypted_session_key)
}

// optional int32 virtualhere_licensed_device_count_OBSOLETE = 5;
bool CMsgRemoteDeviceStreamingResponse::has_virtualhere_licensed_device_count_obsolete() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgRemoteDeviceStreamingResponse::set_has_virtualhere_licensed_device_count_obsolete() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgRemoteDeviceStreamingResponse::clear_has_virtualhere_licensed_device_count_obsolete() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgRemoteDeviceStreamingResponse::clear_virtualhere_licensed_device_count_obsolete() {
  virtualhere_licensed_device_count_obsolete_ = 0;
  clear_has_virtualhere_licensed_device_count_obsolete();
}
::google::protobuf::int32 CMsgRemoteDeviceStreamingResponse::virtualhere_licensed_device_count_obsolete() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteDeviceStreamingResponse.virtualhere_licensed_device_count_OBSOLETE)
  return virtualhere_licensed_device_count_obsolete_;
}
void CMsgRemoteDeviceStreamingResponse::set_virtualhere_licensed_device_count_obsolete(::google::protobuf::int32 value) {
  set_has_virtualhere_licensed_device_count_obsolete();
  virtualhere_licensed_device_count_obsolete_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteDeviceStreamingResponse.virtualhere_licensed_device_count_OBSOLETE)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgRemoteDeviceProofRequest::kChallengeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgRemoteDeviceProofRequest::CMsgRemoteDeviceProofRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fremoteclient_5fdiscovery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgRemoteDeviceProofRequest)
}
CMsgRemoteDeviceProofRequest::CMsgRemoteDeviceProofRequest(const CMsgRemoteDeviceProofRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  challenge_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_challenge()) {
    challenge_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.challenge_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgRemoteDeviceProofRequest)
}

void CMsgRemoteDeviceProofRequest::SharedCtor() {
  _cached_size_ = 0;
  challenge_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CMsgRemoteDeviceProofRequest::~CMsgRemoteDeviceProofRequest() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgRemoteDeviceProofRequest)
  SharedDtor();
}

void CMsgRemoteDeviceProofRequest::SharedDtor() {
  challenge_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgRemoteDeviceProofRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgRemoteDeviceProofRequest::descriptor() {
  protobuf_steammessages_5fremoteclient_5fdiscovery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fremoteclient_5fdiscovery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgRemoteDeviceProofRequest& CMsgRemoteDeviceProofRequest::default_instance() {
  protobuf_steammessages_5fremoteclient_5fdiscovery_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgRemoteDeviceProofRequest* CMsgRemoteDeviceProofRequest::New(::google::protobuf::Arena* arena) const {
  CMsgRemoteDeviceProofRequest* n = new CMsgRemoteDeviceProofRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgRemoteDeviceProofRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgRemoteDeviceProofRequest)
  if (has_challenge()) {
    GOOGLE_DCHECK(!challenge_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*challenge_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgRemoteDeviceProofRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgRemoteDeviceProofRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes challenge = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_challenge()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgRemoteDeviceProofRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgRemoteDeviceProofRequest)
  return false;
#undef DO_
}

void CMsgRemoteDeviceProofRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgRemoteDeviceProofRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes challenge = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->challenge(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgRemoteDeviceProofRequest)
}

::google::protobuf::uint8* CMsgRemoteDeviceProofRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgRemoteDeviceProofRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes challenge = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->challenge(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgRemoteDeviceProofRequest)
  return target;
}

size_t CMsgRemoteDeviceProofRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgRemoteDeviceProofRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required bytes challenge = 1;
  if (has_challenge()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->challenge());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgRemoteDeviceProofRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgRemoteDeviceProofRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgRemoteDeviceProofRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgRemoteDeviceProofRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgRemoteDeviceProofRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgRemoteDeviceProofRequest)
    MergeFrom(*source);
  }
}

void CMsgRemoteDeviceProofRequest::MergeFrom(const CMsgRemoteDeviceProofRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgRemoteDeviceProofRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_challenge()) {
    set_has_challenge();
    challenge_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.challenge_);
  }
}

void CMsgRemoteDeviceProofRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgRemoteDeviceProofRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRemoteDeviceProofRequest::CopyFrom(const CMsgRemoteDeviceProofRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgRemoteDeviceProofRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRemoteDeviceProofRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void CMsgRemoteDeviceProofRequest::Swap(CMsgRemoteDeviceProofRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgRemoteDeviceProofRequest::InternalSwap(CMsgRemoteDeviceProofRequest* other) {
  challenge_.Swap(&other->challenge_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgRemoteDeviceProofRequest::GetMetadata() const {
  protobuf_steammessages_5fremoteclient_5fdiscovery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fremoteclient_5fdiscovery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgRemoteDeviceProofRequest

// required bytes challenge = 1;
bool CMsgRemoteDeviceProofRequest::has_challenge() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgRemoteDeviceProofRequest::set_has_challenge() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgRemoteDeviceProofRequest::clear_has_challenge() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgRemoteDeviceProofRequest::clear_challenge() {
  challenge_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_challenge();
}
const ::std::string& CMsgRemoteDeviceProofRequest::challenge() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteDeviceProofRequest.challenge)
  return challenge_.GetNoArena();
}
void CMsgRemoteDeviceProofRequest::set_challenge(const ::std::string& value) {
  set_has_challenge();
  challenge_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteDeviceProofRequest.challenge)
}
#if LANG_CXX11
void CMsgRemoteDeviceProofRequest::set_challenge(::std::string&& value) {
  set_has_challenge();
  challenge_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgRemoteDeviceProofRequest.challenge)
}
#endif
void CMsgRemoteDeviceProofRequest::set_challenge(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_challenge();
  challenge_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgRemoteDeviceProofRequest.challenge)
}
void CMsgRemoteDeviceProofRequest::set_challenge(const void* value, size_t size) {
  set_has_challenge();
  challenge_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgRemoteDeviceProofRequest.challenge)
}
::std::string* CMsgRemoteDeviceProofRequest::mutable_challenge() {
  set_has_challenge();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgRemoteDeviceProofRequest.challenge)
  return challenge_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgRemoteDeviceProofRequest::release_challenge() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgRemoteDeviceProofRequest.challenge)
  clear_has_challenge();
  return challenge_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgRemoteDeviceProofRequest::set_allocated_challenge(::std::string* challenge) {
  if (challenge != NULL) {
    set_has_challenge();
  } else {
    clear_has_challenge();
  }
  challenge_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), challenge);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgRemoteDeviceProofRequest.challenge)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgRemoteDeviceProofResponse::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgRemoteDeviceProofResponse::CMsgRemoteDeviceProofResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fremoteclient_5fdiscovery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgRemoteDeviceProofResponse)
}
CMsgRemoteDeviceProofResponse::CMsgRemoteDeviceProofResponse(const CMsgRemoteDeviceProofResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  response_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_response()) {
    response_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.response_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgRemoteDeviceProofResponse)
}

void CMsgRemoteDeviceProofResponse::SharedCtor() {
  _cached_size_ = 0;
  response_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CMsgRemoteDeviceProofResponse::~CMsgRemoteDeviceProofResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgRemoteDeviceProofResponse)
  SharedDtor();
}

void CMsgRemoteDeviceProofResponse::SharedDtor() {
  response_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgRemoteDeviceProofResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgRemoteDeviceProofResponse::descriptor() {
  protobuf_steammessages_5fremoteclient_5fdiscovery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fremoteclient_5fdiscovery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgRemoteDeviceProofResponse& CMsgRemoteDeviceProofResponse::default_instance() {
  protobuf_steammessages_5fremoteclient_5fdiscovery_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgRemoteDeviceProofResponse* CMsgRemoteDeviceProofResponse::New(::google::protobuf::Arena* arena) const {
  CMsgRemoteDeviceProofResponse* n = new CMsgRemoteDeviceProofResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgRemoteDeviceProofResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgRemoteDeviceProofResponse)
  if (has_response()) {
    GOOGLE_DCHECK(!response_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*response_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgRemoteDeviceProofResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgRemoteDeviceProofResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes response = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgRemoteDeviceProofResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgRemoteDeviceProofResponse)
  return false;
#undef DO_
}

void CMsgRemoteDeviceProofResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgRemoteDeviceProofResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes response = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->response(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgRemoteDeviceProofResponse)
}

::google::protobuf::uint8* CMsgRemoteDeviceProofResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgRemoteDeviceProofResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes response = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->response(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgRemoteDeviceProofResponse)
  return target;
}

size_t CMsgRemoteDeviceProofResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgRemoteDeviceProofResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required bytes response = 1;
  if (has_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->response());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgRemoteDeviceProofResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgRemoteDeviceProofResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgRemoteDeviceProofResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgRemoteDeviceProofResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgRemoteDeviceProofResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgRemoteDeviceProofResponse)
    MergeFrom(*source);
  }
}

void CMsgRemoteDeviceProofResponse::MergeFrom(const CMsgRemoteDeviceProofResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgRemoteDeviceProofResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_response()) {
    set_has_response();
    response_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.response_);
  }
}

void CMsgRemoteDeviceProofResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgRemoteDeviceProofResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRemoteDeviceProofResponse::CopyFrom(const CMsgRemoteDeviceProofResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgRemoteDeviceProofResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRemoteDeviceProofResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void CMsgRemoteDeviceProofResponse::Swap(CMsgRemoteDeviceProofResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgRemoteDeviceProofResponse::InternalSwap(CMsgRemoteDeviceProofResponse* other) {
  response_.Swap(&other->response_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgRemoteDeviceProofResponse::GetMetadata() const {
  protobuf_steammessages_5fremoteclient_5fdiscovery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fremoteclient_5fdiscovery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgRemoteDeviceProofResponse

// required bytes response = 1;
bool CMsgRemoteDeviceProofResponse::has_response() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgRemoteDeviceProofResponse::set_has_response() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgRemoteDeviceProofResponse::clear_has_response() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgRemoteDeviceProofResponse::clear_response() {
  response_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_response();
}
const ::std::string& CMsgRemoteDeviceProofResponse::response() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteDeviceProofResponse.response)
  return response_.GetNoArena();
}
void CMsgRemoteDeviceProofResponse::set_response(const ::std::string& value) {
  set_has_response();
  response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteDeviceProofResponse.response)
}
#if LANG_CXX11
void CMsgRemoteDeviceProofResponse::set_response(::std::string&& value) {
  set_has_response();
  response_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgRemoteDeviceProofResponse.response)
}
#endif
void CMsgRemoteDeviceProofResponse::set_response(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_response();
  response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgRemoteDeviceProofResponse.response)
}
void CMsgRemoteDeviceProofResponse::set_response(const void* value, size_t size) {
  set_has_response();
  response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgRemoteDeviceProofResponse.response)
}
::std::string* CMsgRemoteDeviceProofResponse::mutable_response() {
  set_has_response();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgRemoteDeviceProofResponse.response)
  return response_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgRemoteDeviceProofResponse::release_response() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgRemoteDeviceProofResponse.response)
  clear_has_response();
  return response_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgRemoteDeviceProofResponse::set_allocated_response(::std::string* response) {
  if (response != NULL) {
    set_has_response();
  } else {
    clear_has_response();
  }
  response_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), response);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgRemoteDeviceProofResponse.response)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace steam
}  // namespace proto

// @@protoc_insertion_point(global_scope)
