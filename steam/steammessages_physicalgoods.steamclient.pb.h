// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_physicalgoods.steamclient.proto

#ifndef PROTOBUF_steammessages_5fphysicalgoods_2esteamclient_2eproto__INCLUDED
#define PROTOBUF_steammessages_5fphysicalgoods_2esteamclient_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "steammessages_unified_base.steamclient.pb.h"
// @@protoc_insertion_point(includes)
namespace proto {
namespace steam {
class CPhysicalGoods_CompleteSteamControllerRegistration_Request;
class CPhysicalGoods_CompleteSteamControllerRegistration_RequestDefaultTypeInternal;
extern CPhysicalGoods_CompleteSteamControllerRegistration_RequestDefaultTypeInternal _CPhysicalGoods_CompleteSteamControllerRegistration_Request_default_instance_;
class CPhysicalGoods_CompleteSteamControllerRegistration_Response;
class CPhysicalGoods_CompleteSteamControllerRegistration_ResponseDefaultTypeInternal;
extern CPhysicalGoods_CompleteSteamControllerRegistration_ResponseDefaultTypeInternal _CPhysicalGoods_CompleteSteamControllerRegistration_Response_default_instance_;
class CPhysicalGoods_DeRegisterSteamController_Request;
class CPhysicalGoods_DeRegisterSteamController_RequestDefaultTypeInternal;
extern CPhysicalGoods_DeRegisterSteamController_RequestDefaultTypeInternal _CPhysicalGoods_DeRegisterSteamController_Request_default_instance_;
class CPhysicalGoods_DeRegisterSteamController_Response;
class CPhysicalGoods_DeRegisterSteamController_ResponseDefaultTypeInternal;
extern CPhysicalGoods_DeRegisterSteamController_ResponseDefaultTypeInternal _CPhysicalGoods_DeRegisterSteamController_Response_default_instance_;
class CPhysicalGoods_GetPersonalizationFile_Request;
class CPhysicalGoods_GetPersonalizationFile_RequestDefaultTypeInternal;
extern CPhysicalGoods_GetPersonalizationFile_RequestDefaultTypeInternal _CPhysicalGoods_GetPersonalizationFile_Request_default_instance_;
class CPhysicalGoods_GetPersonalizationFile_Response;
class CPhysicalGoods_GetPersonalizationFile_ResponseDefaultTypeInternal;
extern CPhysicalGoods_GetPersonalizationFile_ResponseDefaultTypeInternal _CPhysicalGoods_GetPersonalizationFile_Response_default_instance_;
class CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts;
class CPhysicalGoods_QueryAccountsRegisteredToSerial_AccountsDefaultTypeInternal;
extern CPhysicalGoods_QueryAccountsRegisteredToSerial_AccountsDefaultTypeInternal _CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts_default_instance_;
class CPhysicalGoods_QueryAccountsRegisteredToSerial_Request;
class CPhysicalGoods_QueryAccountsRegisteredToSerial_RequestDefaultTypeInternal;
extern CPhysicalGoods_QueryAccountsRegisteredToSerial_RequestDefaultTypeInternal _CPhysicalGoods_QueryAccountsRegisteredToSerial_Request_default_instance_;
class CPhysicalGoods_QueryAccountsRegisteredToSerial_Response;
class CPhysicalGoods_QueryAccountsRegisteredToSerial_ResponseDefaultTypeInternal;
extern CPhysicalGoods_QueryAccountsRegisteredToSerial_ResponseDefaultTypeInternal _CPhysicalGoods_QueryAccountsRegisteredToSerial_Response_default_instance_;
class CPhysicalGoods_RegisterSteamController_Request;
class CPhysicalGoods_RegisterSteamController_RequestDefaultTypeInternal;
extern CPhysicalGoods_RegisterSteamController_RequestDefaultTypeInternal _CPhysicalGoods_RegisterSteamController_Request_default_instance_;
class CPhysicalGoods_RegisterSteamController_Response;
class CPhysicalGoods_RegisterSteamController_ResponseDefaultTypeInternal;
extern CPhysicalGoods_RegisterSteamController_ResponseDefaultTypeInternal _CPhysicalGoods_RegisterSteamController_Response_default_instance_;
class CPhysicalGoods_SetPersonalizationFile_Request;
class CPhysicalGoods_SetPersonalizationFile_RequestDefaultTypeInternal;
extern CPhysicalGoods_SetPersonalizationFile_RequestDefaultTypeInternal _CPhysicalGoods_SetPersonalizationFile_Request_default_instance_;
class CPhysicalGoods_SetPersonalizationFile_Response;
class CPhysicalGoods_SetPersonalizationFile_ResponseDefaultTypeInternal;
extern CPhysicalGoods_SetPersonalizationFile_ResponseDefaultTypeInternal _CPhysicalGoods_SetPersonalizationFile_Response_default_instance_;
class CPhysicalGoods_SteamControllerGetConfig_ControllerConfig;
class CPhysicalGoods_SteamControllerGetConfig_ControllerConfigDefaultTypeInternal;
extern CPhysicalGoods_SteamControllerGetConfig_ControllerConfigDefaultTypeInternal _CPhysicalGoods_SteamControllerGetConfig_ControllerConfig_default_instance_;
class CPhysicalGoods_SteamControllerGetConfig_Request;
class CPhysicalGoods_SteamControllerGetConfig_RequestDefaultTypeInternal;
extern CPhysicalGoods_SteamControllerGetConfig_RequestDefaultTypeInternal _CPhysicalGoods_SteamControllerGetConfig_Request_default_instance_;
class CPhysicalGoods_SteamControllerGetConfig_Response;
class CPhysicalGoods_SteamControllerGetConfig_ResponseDefaultTypeInternal;
extern CPhysicalGoods_SteamControllerGetConfig_ResponseDefaultTypeInternal _CPhysicalGoods_SteamControllerGetConfig_Response_default_instance_;
class CPhysicalGoods_SteamControllerSetConfig_ControllerConfig;
class CPhysicalGoods_SteamControllerSetConfig_ControllerConfigDefaultTypeInternal;
extern CPhysicalGoods_SteamControllerSetConfig_ControllerConfigDefaultTypeInternal _CPhysicalGoods_SteamControllerSetConfig_ControllerConfig_default_instance_;
class CPhysicalGoods_SteamControllerSetConfig_Request;
class CPhysicalGoods_SteamControllerSetConfig_RequestDefaultTypeInternal;
extern CPhysicalGoods_SteamControllerSetConfig_RequestDefaultTypeInternal _CPhysicalGoods_SteamControllerSetConfig_Request_default_instance_;
class CPhysicalGoods_SteamControllerSetConfig_Response;
class CPhysicalGoods_SteamControllerSetConfig_ResponseDefaultTypeInternal;
extern CPhysicalGoods_SteamControllerSetConfig_ResponseDefaultTypeInternal _CPhysicalGoods_SteamControllerSetConfig_Response_default_instance_;
class NoResponse;
class NoResponseDefaultTypeInternal;
extern NoResponseDefaultTypeInternal _NoResponse_default_instance_;
}  // namespace steam
}  // namespace proto

namespace proto {
namespace steam {

namespace protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto

// ===================================================================

class CPhysicalGoods_RegisterSteamController_Request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CPhysicalGoods_RegisterSteamController_Request) */ {
 public:
  CPhysicalGoods_RegisterSteamController_Request();
  virtual ~CPhysicalGoods_RegisterSteamController_Request();

  CPhysicalGoods_RegisterSteamController_Request(const CPhysicalGoods_RegisterSteamController_Request& from);

  inline CPhysicalGoods_RegisterSteamController_Request& operator=(const CPhysicalGoods_RegisterSteamController_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CPhysicalGoods_RegisterSteamController_Request& default_instance();

  static inline const CPhysicalGoods_RegisterSteamController_Request* internal_default_instance() {
    return reinterpret_cast<const CPhysicalGoods_RegisterSteamController_Request*>(
               &_CPhysicalGoods_RegisterSteamController_Request_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(CPhysicalGoods_RegisterSteamController_Request* other);

  // implements Message ----------------------------------------------

  inline CPhysicalGoods_RegisterSteamController_Request* New() const PROTOBUF_FINAL { return New(NULL); }

  CPhysicalGoods_RegisterSteamController_Request* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CPhysicalGoods_RegisterSteamController_Request& from);
  void MergeFrom(const CPhysicalGoods_RegisterSteamController_Request& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CPhysicalGoods_RegisterSteamController_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string serial_number = 1;
  bool has_serial_number() const;
  void clear_serial_number();
  static const int kSerialNumberFieldNumber = 1;
  const ::std::string& serial_number() const;
  void set_serial_number(const ::std::string& value);
  #if LANG_CXX11
  void set_serial_number(::std::string&& value);
  #endif
  void set_serial_number(const char* value);
  void set_serial_number(const char* value, size_t size);
  ::std::string* mutable_serial_number();
  ::std::string* release_serial_number();
  void set_allocated_serial_number(::std::string* serial_number);

  // optional string controller_code = 2;
  bool has_controller_code() const;
  void clear_controller_code();
  static const int kControllerCodeFieldNumber = 2;
  const ::std::string& controller_code() const;
  void set_controller_code(const ::std::string& value);
  #if LANG_CXX11
  void set_controller_code(::std::string&& value);
  #endif
  void set_controller_code(const char* value);
  void set_controller_code(const char* value, size_t size);
  ::std::string* mutable_controller_code();
  ::std::string* release_controller_code();
  void set_allocated_controller_code(::std::string* controller_code);

  // @@protoc_insertion_point(class_scope:proto.steam.CPhysicalGoods_RegisterSteamController_Request)
 private:
  void set_has_serial_number();
  void clear_has_serial_number();
  void set_has_controller_code();
  void clear_has_controller_code();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr serial_number_;
  ::google::protobuf::internal::ArenaStringPtr controller_code_;
  friend struct protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CPhysicalGoods_RegisterSteamController_Response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CPhysicalGoods_RegisterSteamController_Response) */ {
 public:
  CPhysicalGoods_RegisterSteamController_Response();
  virtual ~CPhysicalGoods_RegisterSteamController_Response();

  CPhysicalGoods_RegisterSteamController_Response(const CPhysicalGoods_RegisterSteamController_Response& from);

  inline CPhysicalGoods_RegisterSteamController_Response& operator=(const CPhysicalGoods_RegisterSteamController_Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CPhysicalGoods_RegisterSteamController_Response& default_instance();

  static inline const CPhysicalGoods_RegisterSteamController_Response* internal_default_instance() {
    return reinterpret_cast<const CPhysicalGoods_RegisterSteamController_Response*>(
               &_CPhysicalGoods_RegisterSteamController_Response_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(CPhysicalGoods_RegisterSteamController_Response* other);

  // implements Message ----------------------------------------------

  inline CPhysicalGoods_RegisterSteamController_Response* New() const PROTOBUF_FINAL { return New(NULL); }

  CPhysicalGoods_RegisterSteamController_Response* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CPhysicalGoods_RegisterSteamController_Response& from);
  void MergeFrom(const CPhysicalGoods_RegisterSteamController_Response& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CPhysicalGoods_RegisterSteamController_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.steam.CPhysicalGoods_RegisterSteamController_Response)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  friend struct protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CPhysicalGoods_CompleteSteamControllerRegistration_Request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CPhysicalGoods_CompleteSteamControllerRegistration_Request) */ {
 public:
  CPhysicalGoods_CompleteSteamControllerRegistration_Request();
  virtual ~CPhysicalGoods_CompleteSteamControllerRegistration_Request();

  CPhysicalGoods_CompleteSteamControllerRegistration_Request(const CPhysicalGoods_CompleteSteamControllerRegistration_Request& from);

  inline CPhysicalGoods_CompleteSteamControllerRegistration_Request& operator=(const CPhysicalGoods_CompleteSteamControllerRegistration_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CPhysicalGoods_CompleteSteamControllerRegistration_Request& default_instance();

  static inline const CPhysicalGoods_CompleteSteamControllerRegistration_Request* internal_default_instance() {
    return reinterpret_cast<const CPhysicalGoods_CompleteSteamControllerRegistration_Request*>(
               &_CPhysicalGoods_CompleteSteamControllerRegistration_Request_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(CPhysicalGoods_CompleteSteamControllerRegistration_Request* other);

  // implements Message ----------------------------------------------

  inline CPhysicalGoods_CompleteSteamControllerRegistration_Request* New() const PROTOBUF_FINAL { return New(NULL); }

  CPhysicalGoods_CompleteSteamControllerRegistration_Request* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CPhysicalGoods_CompleteSteamControllerRegistration_Request& from);
  void MergeFrom(const CPhysicalGoods_CompleteSteamControllerRegistration_Request& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CPhysicalGoods_CompleteSteamControllerRegistration_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string serial_number = 1;
  bool has_serial_number() const;
  void clear_serial_number();
  static const int kSerialNumberFieldNumber = 1;
  const ::std::string& serial_number() const;
  void set_serial_number(const ::std::string& value);
  #if LANG_CXX11
  void set_serial_number(::std::string&& value);
  #endif
  void set_serial_number(const char* value);
  void set_serial_number(const char* value, size_t size);
  ::std::string* mutable_serial_number();
  ::std::string* release_serial_number();
  void set_allocated_serial_number(::std::string* serial_number);

  // optional string controller_code = 2;
  bool has_controller_code() const;
  void clear_controller_code();
  static const int kControllerCodeFieldNumber = 2;
  const ::std::string& controller_code() const;
  void set_controller_code(const ::std::string& value);
  #if LANG_CXX11
  void set_controller_code(::std::string&& value);
  #endif
  void set_controller_code(const char* value);
  void set_controller_code(const char* value, size_t size);
  ::std::string* mutable_controller_code();
  ::std::string* release_controller_code();
  void set_allocated_controller_code(::std::string* controller_code);

  // @@protoc_insertion_point(class_scope:proto.steam.CPhysicalGoods_CompleteSteamControllerRegistration_Request)
 private:
  void set_has_serial_number();
  void clear_has_serial_number();
  void set_has_controller_code();
  void clear_has_controller_code();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr serial_number_;
  ::google::protobuf::internal::ArenaStringPtr controller_code_;
  friend struct protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CPhysicalGoods_CompleteSteamControllerRegistration_Response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CPhysicalGoods_CompleteSteamControllerRegistration_Response) */ {
 public:
  CPhysicalGoods_CompleteSteamControllerRegistration_Response();
  virtual ~CPhysicalGoods_CompleteSteamControllerRegistration_Response();

  CPhysicalGoods_CompleteSteamControllerRegistration_Response(const CPhysicalGoods_CompleteSteamControllerRegistration_Response& from);

  inline CPhysicalGoods_CompleteSteamControllerRegistration_Response& operator=(const CPhysicalGoods_CompleteSteamControllerRegistration_Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CPhysicalGoods_CompleteSteamControllerRegistration_Response& default_instance();

  static inline const CPhysicalGoods_CompleteSteamControllerRegistration_Response* internal_default_instance() {
    return reinterpret_cast<const CPhysicalGoods_CompleteSteamControllerRegistration_Response*>(
               &_CPhysicalGoods_CompleteSteamControllerRegistration_Response_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(CPhysicalGoods_CompleteSteamControllerRegistration_Response* other);

  // implements Message ----------------------------------------------

  inline CPhysicalGoods_CompleteSteamControllerRegistration_Response* New() const PROTOBUF_FINAL { return New(NULL); }

  CPhysicalGoods_CompleteSteamControllerRegistration_Response* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CPhysicalGoods_CompleteSteamControllerRegistration_Response& from);
  void MergeFrom(const CPhysicalGoods_CompleteSteamControllerRegistration_Response& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CPhysicalGoods_CompleteSteamControllerRegistration_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.steam.CPhysicalGoods_CompleteSteamControllerRegistration_Response)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  friend struct protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CPhysicalGoods_QueryAccountsRegisteredToSerial_Request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Request) */ {
 public:
  CPhysicalGoods_QueryAccountsRegisteredToSerial_Request();
  virtual ~CPhysicalGoods_QueryAccountsRegisteredToSerial_Request();

  CPhysicalGoods_QueryAccountsRegisteredToSerial_Request(const CPhysicalGoods_QueryAccountsRegisteredToSerial_Request& from);

  inline CPhysicalGoods_QueryAccountsRegisteredToSerial_Request& operator=(const CPhysicalGoods_QueryAccountsRegisteredToSerial_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CPhysicalGoods_QueryAccountsRegisteredToSerial_Request& default_instance();

  static inline const CPhysicalGoods_QueryAccountsRegisteredToSerial_Request* internal_default_instance() {
    return reinterpret_cast<const CPhysicalGoods_QueryAccountsRegisteredToSerial_Request*>(
               &_CPhysicalGoods_QueryAccountsRegisteredToSerial_Request_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(CPhysicalGoods_QueryAccountsRegisteredToSerial_Request* other);

  // implements Message ----------------------------------------------

  inline CPhysicalGoods_QueryAccountsRegisteredToSerial_Request* New() const PROTOBUF_FINAL { return New(NULL); }

  CPhysicalGoods_QueryAccountsRegisteredToSerial_Request* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CPhysicalGoods_QueryAccountsRegisteredToSerial_Request& from);
  void MergeFrom(const CPhysicalGoods_QueryAccountsRegisteredToSerial_Request& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CPhysicalGoods_QueryAccountsRegisteredToSerial_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string serial_number = 1;
  bool has_serial_number() const;
  void clear_serial_number();
  static const int kSerialNumberFieldNumber = 1;
  const ::std::string& serial_number() const;
  void set_serial_number(const ::std::string& value);
  #if LANG_CXX11
  void set_serial_number(::std::string&& value);
  #endif
  void set_serial_number(const char* value);
  void set_serial_number(const char* value, size_t size);
  ::std::string* mutable_serial_number();
  ::std::string* release_serial_number();
  void set_allocated_serial_number(::std::string* serial_number);

  // optional string controller_code = 2;
  bool has_controller_code() const;
  void clear_controller_code();
  static const int kControllerCodeFieldNumber = 2;
  const ::std::string& controller_code() const;
  void set_controller_code(const ::std::string& value);
  #if LANG_CXX11
  void set_controller_code(::std::string&& value);
  #endif
  void set_controller_code(const char* value);
  void set_controller_code(const char* value, size_t size);
  ::std::string* mutable_controller_code();
  ::std::string* release_controller_code();
  void set_allocated_controller_code(::std::string* controller_code);

  // @@protoc_insertion_point(class_scope:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Request)
 private:
  void set_has_serial_number();
  void clear_has_serial_number();
  void set_has_controller_code();
  void clear_has_controller_code();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr serial_number_;
  ::google::protobuf::internal::ArenaStringPtr controller_code_;
  friend struct protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts) */ {
 public:
  CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts();
  virtual ~CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts();

  CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts(const CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts& from);

  inline CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts& operator=(const CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts& default_instance();

  static inline const CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts* internal_default_instance() {
    return reinterpret_cast<const CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts*>(
               &_CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts* other);

  // implements Message ----------------------------------------------

  inline CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts* New() const PROTOBUF_FINAL { return New(NULL); }

  CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts& from);
  void MergeFrom(const CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 accountid = 1;
  bool has_accountid() const;
  void clear_accountid();
  static const int kAccountidFieldNumber = 1;
  ::google::protobuf::uint32 accountid() const;
  void set_accountid(::google::protobuf::uint32 value);

  // optional bool registration_complete = 2;
  bool has_registration_complete() const;
  void clear_registration_complete();
  static const int kRegistrationCompleteFieldNumber = 2;
  bool registration_complete() const;
  void set_registration_complete(bool value);

  // @@protoc_insertion_point(class_scope:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts)
 private:
  void set_has_accountid();
  void clear_has_accountid();
  void set_has_registration_complete();
  void clear_has_registration_complete();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 accountid_;
  bool registration_complete_;
  friend struct protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CPhysicalGoods_QueryAccountsRegisteredToSerial_Response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Response) */ {
 public:
  CPhysicalGoods_QueryAccountsRegisteredToSerial_Response();
  virtual ~CPhysicalGoods_QueryAccountsRegisteredToSerial_Response();

  CPhysicalGoods_QueryAccountsRegisteredToSerial_Response(const CPhysicalGoods_QueryAccountsRegisteredToSerial_Response& from);

  inline CPhysicalGoods_QueryAccountsRegisteredToSerial_Response& operator=(const CPhysicalGoods_QueryAccountsRegisteredToSerial_Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CPhysicalGoods_QueryAccountsRegisteredToSerial_Response& default_instance();

  static inline const CPhysicalGoods_QueryAccountsRegisteredToSerial_Response* internal_default_instance() {
    return reinterpret_cast<const CPhysicalGoods_QueryAccountsRegisteredToSerial_Response*>(
               &_CPhysicalGoods_QueryAccountsRegisteredToSerial_Response_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(CPhysicalGoods_QueryAccountsRegisteredToSerial_Response* other);

  // implements Message ----------------------------------------------

  inline CPhysicalGoods_QueryAccountsRegisteredToSerial_Response* New() const PROTOBUF_FINAL { return New(NULL); }

  CPhysicalGoods_QueryAccountsRegisteredToSerial_Response* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CPhysicalGoods_QueryAccountsRegisteredToSerial_Response& from);
  void MergeFrom(const CPhysicalGoods_QueryAccountsRegisteredToSerial_Response& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CPhysicalGoods_QueryAccountsRegisteredToSerial_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts accounts = 1;
  int accounts_size() const;
  void clear_accounts();
  static const int kAccountsFieldNumber = 1;
  const ::proto::steam::CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts& accounts(int index) const;
  ::proto::steam::CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts* mutable_accounts(int index);
  ::proto::steam::CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts* add_accounts();
  ::google::protobuf::RepeatedPtrField< ::proto::steam::CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts >*
      mutable_accounts();
  const ::google::protobuf::RepeatedPtrField< ::proto::steam::CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts >&
      accounts() const;

  // @@protoc_insertion_point(class_scope:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Response)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::steam::CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts > accounts_;
  friend struct protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CPhysicalGoods_SteamControllerSetConfig_ControllerConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CPhysicalGoods_SteamControllerSetConfig_ControllerConfig) */ {
 public:
  CPhysicalGoods_SteamControllerSetConfig_ControllerConfig();
  virtual ~CPhysicalGoods_SteamControllerSetConfig_ControllerConfig();

  CPhysicalGoods_SteamControllerSetConfig_ControllerConfig(const CPhysicalGoods_SteamControllerSetConfig_ControllerConfig& from);

  inline CPhysicalGoods_SteamControllerSetConfig_ControllerConfig& operator=(const CPhysicalGoods_SteamControllerSetConfig_ControllerConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CPhysicalGoods_SteamControllerSetConfig_ControllerConfig& default_instance();

  static inline const CPhysicalGoods_SteamControllerSetConfig_ControllerConfig* internal_default_instance() {
    return reinterpret_cast<const CPhysicalGoods_SteamControllerSetConfig_ControllerConfig*>(
               &_CPhysicalGoods_SteamControllerSetConfig_ControllerConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(CPhysicalGoods_SteamControllerSetConfig_ControllerConfig* other);

  // implements Message ----------------------------------------------

  inline CPhysicalGoods_SteamControllerSetConfig_ControllerConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  CPhysicalGoods_SteamControllerSetConfig_ControllerConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CPhysicalGoods_SteamControllerSetConfig_ControllerConfig& from);
  void MergeFrom(const CPhysicalGoods_SteamControllerSetConfig_ControllerConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CPhysicalGoods_SteamControllerSetConfig_ControllerConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string appidorname = 1;
  bool has_appidorname() const;
  void clear_appidorname();
  static const int kAppidornameFieldNumber = 1;
  const ::std::string& appidorname() const;
  void set_appidorname(const ::std::string& value);
  #if LANG_CXX11
  void set_appidorname(::std::string&& value);
  #endif
  void set_appidorname(const char* value);
  void set_appidorname(const char* value, size_t size);
  ::std::string* mutable_appidorname();
  ::std::string* release_appidorname();
  void set_allocated_appidorname(::std::string* appidorname);

  // optional string templatename = 3;
  bool has_templatename() const;
  void clear_templatename();
  static const int kTemplatenameFieldNumber = 3;
  const ::std::string& templatename() const;
  void set_templatename(const ::std::string& value);
  #if LANG_CXX11
  void set_templatename(::std::string&& value);
  #endif
  void set_templatename(const char* value);
  void set_templatename(const char* value, size_t size);
  ::std::string* mutable_templatename();
  ::std::string* release_templatename();
  void set_allocated_templatename(::std::string* templatename);

  // optional uint64 publishedfileid = 2;
  bool has_publishedfileid() const;
  void clear_publishedfileid();
  static const int kPublishedfileidFieldNumber = 2;
  ::google::protobuf::uint64 publishedfileid() const;
  void set_publishedfileid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CPhysicalGoods_SteamControllerSetConfig_ControllerConfig)
 private:
  void set_has_appidorname();
  void clear_has_appidorname();
  void set_has_publishedfileid();
  void clear_has_publishedfileid();
  void set_has_templatename();
  void clear_has_templatename();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr appidorname_;
  ::google::protobuf::internal::ArenaStringPtr templatename_;
  ::google::protobuf::uint64 publishedfileid_;
  friend struct protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CPhysicalGoods_SteamControllerSetConfig_Request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CPhysicalGoods_SteamControllerSetConfig_Request) */ {
 public:
  CPhysicalGoods_SteamControllerSetConfig_Request();
  virtual ~CPhysicalGoods_SteamControllerSetConfig_Request();

  CPhysicalGoods_SteamControllerSetConfig_Request(const CPhysicalGoods_SteamControllerSetConfig_Request& from);

  inline CPhysicalGoods_SteamControllerSetConfig_Request& operator=(const CPhysicalGoods_SteamControllerSetConfig_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CPhysicalGoods_SteamControllerSetConfig_Request& default_instance();

  static inline const CPhysicalGoods_SteamControllerSetConfig_Request* internal_default_instance() {
    return reinterpret_cast<const CPhysicalGoods_SteamControllerSetConfig_Request*>(
               &_CPhysicalGoods_SteamControllerSetConfig_Request_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(CPhysicalGoods_SteamControllerSetConfig_Request* other);

  // implements Message ----------------------------------------------

  inline CPhysicalGoods_SteamControllerSetConfig_Request* New() const PROTOBUF_FINAL { return New(NULL); }

  CPhysicalGoods_SteamControllerSetConfig_Request* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CPhysicalGoods_SteamControllerSetConfig_Request& from);
  void MergeFrom(const CPhysicalGoods_SteamControllerSetConfig_Request& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CPhysicalGoods_SteamControllerSetConfig_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.steam.CPhysicalGoods_SteamControllerSetConfig_ControllerConfig configurations = 4;
  int configurations_size() const;
  void clear_configurations();
  static const int kConfigurationsFieldNumber = 4;
  const ::proto::steam::CPhysicalGoods_SteamControllerSetConfig_ControllerConfig& configurations(int index) const;
  ::proto::steam::CPhysicalGoods_SteamControllerSetConfig_ControllerConfig* mutable_configurations(int index);
  ::proto::steam::CPhysicalGoods_SteamControllerSetConfig_ControllerConfig* add_configurations();
  ::google::protobuf::RepeatedPtrField< ::proto::steam::CPhysicalGoods_SteamControllerSetConfig_ControllerConfig >*
      mutable_configurations();
  const ::google::protobuf::RepeatedPtrField< ::proto::steam::CPhysicalGoods_SteamControllerSetConfig_ControllerConfig >&
      configurations() const;

  // optional string serial_number = 1;
  bool has_serial_number() const;
  void clear_serial_number();
  static const int kSerialNumberFieldNumber = 1;
  const ::std::string& serial_number() const;
  void set_serial_number(const ::std::string& value);
  #if LANG_CXX11
  void set_serial_number(::std::string&& value);
  #endif
  void set_serial_number(const char* value);
  void set_serial_number(const char* value, size_t size);
  ::std::string* mutable_serial_number();
  ::std::string* release_serial_number();
  void set_allocated_serial_number(::std::string* serial_number);

  // optional string controller_code = 2;
  bool has_controller_code() const;
  void clear_controller_code();
  static const int kControllerCodeFieldNumber = 2;
  const ::std::string& controller_code() const;
  void set_controller_code(const ::std::string& value);
  #if LANG_CXX11
  void set_controller_code(::std::string&& value);
  #endif
  void set_controller_code(const char* value);
  void set_controller_code(const char* value, size_t size);
  ::std::string* mutable_controller_code();
  ::std::string* release_controller_code();
  void set_allocated_controller_code(::std::string* controller_code);

  // optional uint32 accountid = 3;
  bool has_accountid() const;
  void clear_accountid();
  static const int kAccountidFieldNumber = 3;
  ::google::protobuf::uint32 accountid() const;
  void set_accountid(::google::protobuf::uint32 value);

  // optional bool only_for_this_serial = 6 [default = false];
  bool has_only_for_this_serial() const;
  void clear_only_for_this_serial();
  static const int kOnlyForThisSerialFieldNumber = 6;
  bool only_for_this_serial() const;
  void set_only_for_this_serial(bool value);

  // optional int32 controller_type = 5 [default = 2];
  bool has_controller_type() const;
  void clear_controller_type();
  static const int kControllerTypeFieldNumber = 5;
  ::google::protobuf::int32 controller_type() const;
  void set_controller_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CPhysicalGoods_SteamControllerSetConfig_Request)
 private:
  void set_has_serial_number();
  void clear_has_serial_number();
  void set_has_controller_code();
  void clear_has_controller_code();
  void set_has_accountid();
  void clear_has_accountid();
  void set_has_controller_type();
  void clear_has_controller_type();
  void set_has_only_for_this_serial();
  void clear_has_only_for_this_serial();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::steam::CPhysicalGoods_SteamControllerSetConfig_ControllerConfig > configurations_;
  ::google::protobuf::internal::ArenaStringPtr serial_number_;
  ::google::protobuf::internal::ArenaStringPtr controller_code_;
  ::google::protobuf::uint32 accountid_;
  bool only_for_this_serial_;
  ::google::protobuf::int32 controller_type_;
  friend struct protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CPhysicalGoods_SteamControllerSetConfig_Response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CPhysicalGoods_SteamControllerSetConfig_Response) */ {
 public:
  CPhysicalGoods_SteamControllerSetConfig_Response();
  virtual ~CPhysicalGoods_SteamControllerSetConfig_Response();

  CPhysicalGoods_SteamControllerSetConfig_Response(const CPhysicalGoods_SteamControllerSetConfig_Response& from);

  inline CPhysicalGoods_SteamControllerSetConfig_Response& operator=(const CPhysicalGoods_SteamControllerSetConfig_Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CPhysicalGoods_SteamControllerSetConfig_Response& default_instance();

  static inline const CPhysicalGoods_SteamControllerSetConfig_Response* internal_default_instance() {
    return reinterpret_cast<const CPhysicalGoods_SteamControllerSetConfig_Response*>(
               &_CPhysicalGoods_SteamControllerSetConfig_Response_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(CPhysicalGoods_SteamControllerSetConfig_Response* other);

  // implements Message ----------------------------------------------

  inline CPhysicalGoods_SteamControllerSetConfig_Response* New() const PROTOBUF_FINAL { return New(NULL); }

  CPhysicalGoods_SteamControllerSetConfig_Response* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CPhysicalGoods_SteamControllerSetConfig_Response& from);
  void MergeFrom(const CPhysicalGoods_SteamControllerSetConfig_Response& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CPhysicalGoods_SteamControllerSetConfig_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.steam.CPhysicalGoods_SteamControllerSetConfig_Response)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  friend struct protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CPhysicalGoods_SteamControllerGetConfig_Request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Request) */ {
 public:
  CPhysicalGoods_SteamControllerGetConfig_Request();
  virtual ~CPhysicalGoods_SteamControllerGetConfig_Request();

  CPhysicalGoods_SteamControllerGetConfig_Request(const CPhysicalGoods_SteamControllerGetConfig_Request& from);

  inline CPhysicalGoods_SteamControllerGetConfig_Request& operator=(const CPhysicalGoods_SteamControllerGetConfig_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CPhysicalGoods_SteamControllerGetConfig_Request& default_instance();

  static inline const CPhysicalGoods_SteamControllerGetConfig_Request* internal_default_instance() {
    return reinterpret_cast<const CPhysicalGoods_SteamControllerGetConfig_Request*>(
               &_CPhysicalGoods_SteamControllerGetConfig_Request_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(CPhysicalGoods_SteamControllerGetConfig_Request* other);

  // implements Message ----------------------------------------------

  inline CPhysicalGoods_SteamControllerGetConfig_Request* New() const PROTOBUF_FINAL { return New(NULL); }

  CPhysicalGoods_SteamControllerGetConfig_Request* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CPhysicalGoods_SteamControllerGetConfig_Request& from);
  void MergeFrom(const CPhysicalGoods_SteamControllerGetConfig_Request& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CPhysicalGoods_SteamControllerGetConfig_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string serial_number = 1;
  bool has_serial_number() const;
  void clear_serial_number();
  static const int kSerialNumberFieldNumber = 1;
  const ::std::string& serial_number() const;
  void set_serial_number(const ::std::string& value);
  #if LANG_CXX11
  void set_serial_number(::std::string&& value);
  #endif
  void set_serial_number(const char* value);
  void set_serial_number(const char* value, size_t size);
  ::std::string* mutable_serial_number();
  ::std::string* release_serial_number();
  void set_allocated_serial_number(::std::string* serial_number);

  // optional string controller_code = 2;
  bool has_controller_code() const;
  void clear_controller_code();
  static const int kControllerCodeFieldNumber = 2;
  const ::std::string& controller_code() const;
  void set_controller_code(const ::std::string& value);
  #if LANG_CXX11
  void set_controller_code(::std::string&& value);
  #endif
  void set_controller_code(const char* value);
  void set_controller_code(const char* value, size_t size);
  ::std::string* mutable_controller_code();
  ::std::string* release_controller_code();
  void set_allocated_controller_code(::std::string* controller_code);

  // optional string appidorname = 4;
  bool has_appidorname() const;
  void clear_appidorname();
  static const int kAppidornameFieldNumber = 4;
  const ::std::string& appidorname() const;
  void set_appidorname(const ::std::string& value);
  #if LANG_CXX11
  void set_appidorname(::std::string&& value);
  #endif
  void set_appidorname(const char* value);
  void set_appidorname(const char* value, size_t size);
  ::std::string* mutable_appidorname();
  ::std::string* release_appidorname();
  void set_allocated_appidorname(::std::string* appidorname);

  // optional uint32 accountid = 3;
  bool has_accountid() const;
  void clear_accountid();
  static const int kAccountidFieldNumber = 3;
  ::google::protobuf::uint32 accountid() const;
  void set_accountid(::google::protobuf::uint32 value);

  // optional bool only_for_this_serial = 6 [default = false];
  bool has_only_for_this_serial() const;
  void clear_only_for_this_serial();
  static const int kOnlyForThisSerialFieldNumber = 6;
  bool only_for_this_serial() const;
  void set_only_for_this_serial(bool value);

  // optional int32 controller_type = 5 [default = 2];
  bool has_controller_type() const;
  void clear_controller_type();
  static const int kControllerTypeFieldNumber = 5;
  ::google::protobuf::int32 controller_type() const;
  void set_controller_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Request)
 private:
  void set_has_serial_number();
  void clear_has_serial_number();
  void set_has_controller_code();
  void clear_has_controller_code();
  void set_has_accountid();
  void clear_has_accountid();
  void set_has_appidorname();
  void clear_has_appidorname();
  void set_has_controller_type();
  void clear_has_controller_type();
  void set_has_only_for_this_serial();
  void clear_has_only_for_this_serial();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr serial_number_;
  ::google::protobuf::internal::ArenaStringPtr controller_code_;
  ::google::protobuf::internal::ArenaStringPtr appidorname_;
  ::google::protobuf::uint32 accountid_;
  bool only_for_this_serial_;
  ::google::protobuf::int32 controller_type_;
  friend struct protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CPhysicalGoods_SteamControllerGetConfig_ControllerConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CPhysicalGoods_SteamControllerGetConfig_ControllerConfig) */ {
 public:
  CPhysicalGoods_SteamControllerGetConfig_ControllerConfig();
  virtual ~CPhysicalGoods_SteamControllerGetConfig_ControllerConfig();

  CPhysicalGoods_SteamControllerGetConfig_ControllerConfig(const CPhysicalGoods_SteamControllerGetConfig_ControllerConfig& from);

  inline CPhysicalGoods_SteamControllerGetConfig_ControllerConfig& operator=(const CPhysicalGoods_SteamControllerGetConfig_ControllerConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CPhysicalGoods_SteamControllerGetConfig_ControllerConfig& default_instance();

  static inline const CPhysicalGoods_SteamControllerGetConfig_ControllerConfig* internal_default_instance() {
    return reinterpret_cast<const CPhysicalGoods_SteamControllerGetConfig_ControllerConfig*>(
               &_CPhysicalGoods_SteamControllerGetConfig_ControllerConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(CPhysicalGoods_SteamControllerGetConfig_ControllerConfig* other);

  // implements Message ----------------------------------------------

  inline CPhysicalGoods_SteamControllerGetConfig_ControllerConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  CPhysicalGoods_SteamControllerGetConfig_ControllerConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CPhysicalGoods_SteamControllerGetConfig_ControllerConfig& from);
  void MergeFrom(const CPhysicalGoods_SteamControllerGetConfig_ControllerConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CPhysicalGoods_SteamControllerGetConfig_ControllerConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string appidorname = 1;
  bool has_appidorname() const;
  void clear_appidorname();
  static const int kAppidornameFieldNumber = 1;
  const ::std::string& appidorname() const;
  void set_appidorname(const ::std::string& value);
  #if LANG_CXX11
  void set_appidorname(::std::string&& value);
  #endif
  void set_appidorname(const char* value);
  void set_appidorname(const char* value, size_t size);
  ::std::string* mutable_appidorname();
  ::std::string* release_appidorname();
  void set_allocated_appidorname(::std::string* appidorname);

  // optional string templatename = 3;
  bool has_templatename() const;
  void clear_templatename();
  static const int kTemplatenameFieldNumber = 3;
  const ::std::string& templatename() const;
  void set_templatename(const ::std::string& value);
  #if LANG_CXX11
  void set_templatename(::std::string&& value);
  #endif
  void set_templatename(const char* value);
  void set_templatename(const char* value, size_t size);
  ::std::string* mutable_templatename();
  ::std::string* release_templatename();
  void set_allocated_templatename(::std::string* templatename);

  // optional string serial_number = 4;
  bool has_serial_number() const;
  void clear_serial_number();
  static const int kSerialNumberFieldNumber = 4;
  const ::std::string& serial_number() const;
  void set_serial_number(const ::std::string& value);
  #if LANG_CXX11
  void set_serial_number(::std::string&& value);
  #endif
  void set_serial_number(const char* value);
  void set_serial_number(const char* value, size_t size);
  ::std::string* mutable_serial_number();
  ::std::string* release_serial_number();
  void set_allocated_serial_number(::std::string* serial_number);

  // optional uint64 publishedfileid = 2;
  bool has_publishedfileid() const;
  void clear_publishedfileid();
  static const int kPublishedfileidFieldNumber = 2;
  ::google::protobuf::uint64 publishedfileid() const;
  void set_publishedfileid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CPhysicalGoods_SteamControllerGetConfig_ControllerConfig)
 private:
  void set_has_appidorname();
  void clear_has_appidorname();
  void set_has_publishedfileid();
  void clear_has_publishedfileid();
  void set_has_templatename();
  void clear_has_templatename();
  void set_has_serial_number();
  void clear_has_serial_number();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr appidorname_;
  ::google::protobuf::internal::ArenaStringPtr templatename_;
  ::google::protobuf::internal::ArenaStringPtr serial_number_;
  ::google::protobuf::uint64 publishedfileid_;
  friend struct protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CPhysicalGoods_SteamControllerGetConfig_Response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Response) */ {
 public:
  CPhysicalGoods_SteamControllerGetConfig_Response();
  virtual ~CPhysicalGoods_SteamControllerGetConfig_Response();

  CPhysicalGoods_SteamControllerGetConfig_Response(const CPhysicalGoods_SteamControllerGetConfig_Response& from);

  inline CPhysicalGoods_SteamControllerGetConfig_Response& operator=(const CPhysicalGoods_SteamControllerGetConfig_Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CPhysicalGoods_SteamControllerGetConfig_Response& default_instance();

  static inline const CPhysicalGoods_SteamControllerGetConfig_Response* internal_default_instance() {
    return reinterpret_cast<const CPhysicalGoods_SteamControllerGetConfig_Response*>(
               &_CPhysicalGoods_SteamControllerGetConfig_Response_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(CPhysicalGoods_SteamControllerGetConfig_Response* other);

  // implements Message ----------------------------------------------

  inline CPhysicalGoods_SteamControllerGetConfig_Response* New() const PROTOBUF_FINAL { return New(NULL); }

  CPhysicalGoods_SteamControllerGetConfig_Response* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CPhysicalGoods_SteamControllerGetConfig_Response& from);
  void MergeFrom(const CPhysicalGoods_SteamControllerGetConfig_Response& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CPhysicalGoods_SteamControllerGetConfig_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.steam.CPhysicalGoods_SteamControllerGetConfig_ControllerConfig configurations = 1;
  int configurations_size() const;
  void clear_configurations();
  static const int kConfigurationsFieldNumber = 1;
  const ::proto::steam::CPhysicalGoods_SteamControllerGetConfig_ControllerConfig& configurations(int index) const;
  ::proto::steam::CPhysicalGoods_SteamControllerGetConfig_ControllerConfig* mutable_configurations(int index);
  ::proto::steam::CPhysicalGoods_SteamControllerGetConfig_ControllerConfig* add_configurations();
  ::google::protobuf::RepeatedPtrField< ::proto::steam::CPhysicalGoods_SteamControllerGetConfig_ControllerConfig >*
      mutable_configurations();
  const ::google::protobuf::RepeatedPtrField< ::proto::steam::CPhysicalGoods_SteamControllerGetConfig_ControllerConfig >&
      configurations() const;

  // @@protoc_insertion_point(class_scope:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Response)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::steam::CPhysicalGoods_SteamControllerGetConfig_ControllerConfig > configurations_;
  friend struct protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CPhysicalGoods_DeRegisterSteamController_Request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CPhysicalGoods_DeRegisterSteamController_Request) */ {
 public:
  CPhysicalGoods_DeRegisterSteamController_Request();
  virtual ~CPhysicalGoods_DeRegisterSteamController_Request();

  CPhysicalGoods_DeRegisterSteamController_Request(const CPhysicalGoods_DeRegisterSteamController_Request& from);

  inline CPhysicalGoods_DeRegisterSteamController_Request& operator=(const CPhysicalGoods_DeRegisterSteamController_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CPhysicalGoods_DeRegisterSteamController_Request& default_instance();

  static inline const CPhysicalGoods_DeRegisterSteamController_Request* internal_default_instance() {
    return reinterpret_cast<const CPhysicalGoods_DeRegisterSteamController_Request*>(
               &_CPhysicalGoods_DeRegisterSteamController_Request_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(CPhysicalGoods_DeRegisterSteamController_Request* other);

  // implements Message ----------------------------------------------

  inline CPhysicalGoods_DeRegisterSteamController_Request* New() const PROTOBUF_FINAL { return New(NULL); }

  CPhysicalGoods_DeRegisterSteamController_Request* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CPhysicalGoods_DeRegisterSteamController_Request& from);
  void MergeFrom(const CPhysicalGoods_DeRegisterSteamController_Request& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CPhysicalGoods_DeRegisterSteamController_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string serial_number = 1;
  bool has_serial_number() const;
  void clear_serial_number();
  static const int kSerialNumberFieldNumber = 1;
  const ::std::string& serial_number() const;
  void set_serial_number(const ::std::string& value);
  #if LANG_CXX11
  void set_serial_number(::std::string&& value);
  #endif
  void set_serial_number(const char* value);
  void set_serial_number(const char* value, size_t size);
  ::std::string* mutable_serial_number();
  ::std::string* release_serial_number();
  void set_allocated_serial_number(::std::string* serial_number);

  // optional string controller_code = 2;
  bool has_controller_code() const;
  void clear_controller_code();
  static const int kControllerCodeFieldNumber = 2;
  const ::std::string& controller_code() const;
  void set_controller_code(const ::std::string& value);
  #if LANG_CXX11
  void set_controller_code(::std::string&& value);
  #endif
  void set_controller_code(const char* value);
  void set_controller_code(const char* value, size_t size);
  ::std::string* mutable_controller_code();
  ::std::string* release_controller_code();
  void set_allocated_controller_code(::std::string* controller_code);

  // optional uint32 accountid = 3;
  bool has_accountid() const;
  void clear_accountid();
  static const int kAccountidFieldNumber = 3;
  ::google::protobuf::uint32 accountid() const;
  void set_accountid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CPhysicalGoods_DeRegisterSteamController_Request)
 private:
  void set_has_serial_number();
  void clear_has_serial_number();
  void set_has_controller_code();
  void clear_has_controller_code();
  void set_has_accountid();
  void clear_has_accountid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr serial_number_;
  ::google::protobuf::internal::ArenaStringPtr controller_code_;
  ::google::protobuf::uint32 accountid_;
  friend struct protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CPhysicalGoods_DeRegisterSteamController_Response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CPhysicalGoods_DeRegisterSteamController_Response) */ {
 public:
  CPhysicalGoods_DeRegisterSteamController_Response();
  virtual ~CPhysicalGoods_DeRegisterSteamController_Response();

  CPhysicalGoods_DeRegisterSteamController_Response(const CPhysicalGoods_DeRegisterSteamController_Response& from);

  inline CPhysicalGoods_DeRegisterSteamController_Response& operator=(const CPhysicalGoods_DeRegisterSteamController_Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CPhysicalGoods_DeRegisterSteamController_Response& default_instance();

  static inline const CPhysicalGoods_DeRegisterSteamController_Response* internal_default_instance() {
    return reinterpret_cast<const CPhysicalGoods_DeRegisterSteamController_Response*>(
               &_CPhysicalGoods_DeRegisterSteamController_Response_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(CPhysicalGoods_DeRegisterSteamController_Response* other);

  // implements Message ----------------------------------------------

  inline CPhysicalGoods_DeRegisterSteamController_Response* New() const PROTOBUF_FINAL { return New(NULL); }

  CPhysicalGoods_DeRegisterSteamController_Response* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CPhysicalGoods_DeRegisterSteamController_Response& from);
  void MergeFrom(const CPhysicalGoods_DeRegisterSteamController_Response& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CPhysicalGoods_DeRegisterSteamController_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.steam.CPhysicalGoods_DeRegisterSteamController_Response)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  friend struct protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CPhysicalGoods_SetPersonalizationFile_Request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CPhysicalGoods_SetPersonalizationFile_Request) */ {
 public:
  CPhysicalGoods_SetPersonalizationFile_Request();
  virtual ~CPhysicalGoods_SetPersonalizationFile_Request();

  CPhysicalGoods_SetPersonalizationFile_Request(const CPhysicalGoods_SetPersonalizationFile_Request& from);

  inline CPhysicalGoods_SetPersonalizationFile_Request& operator=(const CPhysicalGoods_SetPersonalizationFile_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CPhysicalGoods_SetPersonalizationFile_Request& default_instance();

  static inline const CPhysicalGoods_SetPersonalizationFile_Request* internal_default_instance() {
    return reinterpret_cast<const CPhysicalGoods_SetPersonalizationFile_Request*>(
               &_CPhysicalGoods_SetPersonalizationFile_Request_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(CPhysicalGoods_SetPersonalizationFile_Request* other);

  // implements Message ----------------------------------------------

  inline CPhysicalGoods_SetPersonalizationFile_Request* New() const PROTOBUF_FINAL { return New(NULL); }

  CPhysicalGoods_SetPersonalizationFile_Request* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CPhysicalGoods_SetPersonalizationFile_Request& from);
  void MergeFrom(const CPhysicalGoods_SetPersonalizationFile_Request& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CPhysicalGoods_SetPersonalizationFile_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string serial_number = 1;
  bool has_serial_number() const;
  void clear_serial_number();
  static const int kSerialNumberFieldNumber = 1;
  const ::std::string& serial_number() const;
  void set_serial_number(const ::std::string& value);
  #if LANG_CXX11
  void set_serial_number(::std::string&& value);
  #endif
  void set_serial_number(const char* value);
  void set_serial_number(const char* value, size_t size);
  ::std::string* mutable_serial_number();
  ::std::string* release_serial_number();
  void set_allocated_serial_number(::std::string* serial_number);

  // optional uint64 publishedfileid = 2;
  bool has_publishedfileid() const;
  void clear_publishedfileid();
  static const int kPublishedfileidFieldNumber = 2;
  ::google::protobuf::uint64 publishedfileid() const;
  void set_publishedfileid(::google::protobuf::uint64 value);

  // optional uint32 accountid = 3;
  bool has_accountid() const;
  void clear_accountid();
  static const int kAccountidFieldNumber = 3;
  ::google::protobuf::uint32 accountid() const;
  void set_accountid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CPhysicalGoods_SetPersonalizationFile_Request)
 private:
  void set_has_serial_number();
  void clear_has_serial_number();
  void set_has_publishedfileid();
  void clear_has_publishedfileid();
  void set_has_accountid();
  void clear_has_accountid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr serial_number_;
  ::google::protobuf::uint64 publishedfileid_;
  ::google::protobuf::uint32 accountid_;
  friend struct protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CPhysicalGoods_SetPersonalizationFile_Response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CPhysicalGoods_SetPersonalizationFile_Response) */ {
 public:
  CPhysicalGoods_SetPersonalizationFile_Response();
  virtual ~CPhysicalGoods_SetPersonalizationFile_Response();

  CPhysicalGoods_SetPersonalizationFile_Response(const CPhysicalGoods_SetPersonalizationFile_Response& from);

  inline CPhysicalGoods_SetPersonalizationFile_Response& operator=(const CPhysicalGoods_SetPersonalizationFile_Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CPhysicalGoods_SetPersonalizationFile_Response& default_instance();

  static inline const CPhysicalGoods_SetPersonalizationFile_Response* internal_default_instance() {
    return reinterpret_cast<const CPhysicalGoods_SetPersonalizationFile_Response*>(
               &_CPhysicalGoods_SetPersonalizationFile_Response_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(CPhysicalGoods_SetPersonalizationFile_Response* other);

  // implements Message ----------------------------------------------

  inline CPhysicalGoods_SetPersonalizationFile_Response* New() const PROTOBUF_FINAL { return New(NULL); }

  CPhysicalGoods_SetPersonalizationFile_Response* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CPhysicalGoods_SetPersonalizationFile_Response& from);
  void MergeFrom(const CPhysicalGoods_SetPersonalizationFile_Response& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CPhysicalGoods_SetPersonalizationFile_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.steam.CPhysicalGoods_SetPersonalizationFile_Response)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  friend struct protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CPhysicalGoods_GetPersonalizationFile_Request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CPhysicalGoods_GetPersonalizationFile_Request) */ {
 public:
  CPhysicalGoods_GetPersonalizationFile_Request();
  virtual ~CPhysicalGoods_GetPersonalizationFile_Request();

  CPhysicalGoods_GetPersonalizationFile_Request(const CPhysicalGoods_GetPersonalizationFile_Request& from);

  inline CPhysicalGoods_GetPersonalizationFile_Request& operator=(const CPhysicalGoods_GetPersonalizationFile_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CPhysicalGoods_GetPersonalizationFile_Request& default_instance();

  static inline const CPhysicalGoods_GetPersonalizationFile_Request* internal_default_instance() {
    return reinterpret_cast<const CPhysicalGoods_GetPersonalizationFile_Request*>(
               &_CPhysicalGoods_GetPersonalizationFile_Request_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(CPhysicalGoods_GetPersonalizationFile_Request* other);

  // implements Message ----------------------------------------------

  inline CPhysicalGoods_GetPersonalizationFile_Request* New() const PROTOBUF_FINAL { return New(NULL); }

  CPhysicalGoods_GetPersonalizationFile_Request* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CPhysicalGoods_GetPersonalizationFile_Request& from);
  void MergeFrom(const CPhysicalGoods_GetPersonalizationFile_Request& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CPhysicalGoods_GetPersonalizationFile_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string serial_number = 1;
  bool has_serial_number() const;
  void clear_serial_number();
  static const int kSerialNumberFieldNumber = 1;
  const ::std::string& serial_number() const;
  void set_serial_number(const ::std::string& value);
  #if LANG_CXX11
  void set_serial_number(::std::string&& value);
  #endif
  void set_serial_number(const char* value);
  void set_serial_number(const char* value, size_t size);
  ::std::string* mutable_serial_number();
  ::std::string* release_serial_number();
  void set_allocated_serial_number(::std::string* serial_number);

  // optional uint32 accountid = 2;
  bool has_accountid() const;
  void clear_accountid();
  static const int kAccountidFieldNumber = 2;
  ::google::protobuf::uint32 accountid() const;
  void set_accountid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CPhysicalGoods_GetPersonalizationFile_Request)
 private:
  void set_has_serial_number();
  void clear_has_serial_number();
  void set_has_accountid();
  void clear_has_accountid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr serial_number_;
  ::google::protobuf::uint32 accountid_;
  friend struct protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CPhysicalGoods_GetPersonalizationFile_Response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CPhysicalGoods_GetPersonalizationFile_Response) */ {
 public:
  CPhysicalGoods_GetPersonalizationFile_Response();
  virtual ~CPhysicalGoods_GetPersonalizationFile_Response();

  CPhysicalGoods_GetPersonalizationFile_Response(const CPhysicalGoods_GetPersonalizationFile_Response& from);

  inline CPhysicalGoods_GetPersonalizationFile_Response& operator=(const CPhysicalGoods_GetPersonalizationFile_Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CPhysicalGoods_GetPersonalizationFile_Response& default_instance();

  static inline const CPhysicalGoods_GetPersonalizationFile_Response* internal_default_instance() {
    return reinterpret_cast<const CPhysicalGoods_GetPersonalizationFile_Response*>(
               &_CPhysicalGoods_GetPersonalizationFile_Response_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(CPhysicalGoods_GetPersonalizationFile_Response* other);

  // implements Message ----------------------------------------------

  inline CPhysicalGoods_GetPersonalizationFile_Response* New() const PROTOBUF_FINAL { return New(NULL); }

  CPhysicalGoods_GetPersonalizationFile_Response* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CPhysicalGoods_GetPersonalizationFile_Response& from);
  void MergeFrom(const CPhysicalGoods_GetPersonalizationFile_Response& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CPhysicalGoods_GetPersonalizationFile_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 publishedfileid = 1;
  bool has_publishedfileid() const;
  void clear_publishedfileid();
  static const int kPublishedfileidFieldNumber = 1;
  ::google::protobuf::uint64 publishedfileid() const;
  void set_publishedfileid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CPhysicalGoods_GetPersonalizationFile_Response)
 private:
  void set_has_publishedfileid();
  void clear_has_publishedfileid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint64 publishedfileid_;
  friend struct protobuf_steammessages_5fphysicalgoods_2esteamclient_2eproto::TableStruct;
};
// ===================================================================

class PhysicalGoods_Stub;

class PhysicalGoods : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline PhysicalGoods() {};
 public:
  virtual ~PhysicalGoods();

  typedef PhysicalGoods_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void RegisterSteamController(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CPhysicalGoods_RegisterSteamController_Request* request,
                       ::proto::steam::CPhysicalGoods_RegisterSteamController_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void CompleteSteamControllerRegistration(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CPhysicalGoods_CompleteSteamControllerRegistration_Request* request,
                       ::proto::steam::CPhysicalGoods_CompleteSteamControllerRegistration_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void QueryAccountsRegisteredToController(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CPhysicalGoods_QueryAccountsRegisteredToSerial_Request* request,
                       ::proto::steam::CPhysicalGoods_QueryAccountsRegisteredToSerial_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void SetDesiredControllerConfigForApp(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CPhysicalGoods_SteamControllerSetConfig_Request* request,
                       ::proto::steam::CPhysicalGoods_SteamControllerSetConfig_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetDesiredControllerConfigForApp(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CPhysicalGoods_SteamControllerGetConfig_Request* request,
                       ::proto::steam::CPhysicalGoods_SteamControllerGetConfig_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void DeRegisterSteamController(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CPhysicalGoods_DeRegisterSteamController_Request* request,
                       ::proto::steam::CPhysicalGoods_DeRegisterSteamController_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void SetControllerPersonalizationFile(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CPhysicalGoods_SetPersonalizationFile_Request* request,
                       ::proto::steam::CPhysicalGoods_SetPersonalizationFile_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetControllerPersonalizationFile(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CPhysicalGoods_GetPersonalizationFile_Request* request,
                       ::proto::steam::CPhysicalGoods_GetPersonalizationFile_Response* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(PhysicalGoods);
};

class PhysicalGoods_Stub : public PhysicalGoods {
 public:
  PhysicalGoods_Stub(::google::protobuf::RpcChannel* channel);
  PhysicalGoods_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~PhysicalGoods_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements PhysicalGoods ------------------------------------------

  void RegisterSteamController(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CPhysicalGoods_RegisterSteamController_Request* request,
                       ::proto::steam::CPhysicalGoods_RegisterSteamController_Response* response,
                       ::google::protobuf::Closure* done);
  void CompleteSteamControllerRegistration(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CPhysicalGoods_CompleteSteamControllerRegistration_Request* request,
                       ::proto::steam::CPhysicalGoods_CompleteSteamControllerRegistration_Response* response,
                       ::google::protobuf::Closure* done);
  void QueryAccountsRegisteredToController(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CPhysicalGoods_QueryAccountsRegisteredToSerial_Request* request,
                       ::proto::steam::CPhysicalGoods_QueryAccountsRegisteredToSerial_Response* response,
                       ::google::protobuf::Closure* done);
  void SetDesiredControllerConfigForApp(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CPhysicalGoods_SteamControllerSetConfig_Request* request,
                       ::proto::steam::CPhysicalGoods_SteamControllerSetConfig_Response* response,
                       ::google::protobuf::Closure* done);
  void GetDesiredControllerConfigForApp(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CPhysicalGoods_SteamControllerGetConfig_Request* request,
                       ::proto::steam::CPhysicalGoods_SteamControllerGetConfig_Response* response,
                       ::google::protobuf::Closure* done);
  void DeRegisterSteamController(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CPhysicalGoods_DeRegisterSteamController_Request* request,
                       ::proto::steam::CPhysicalGoods_DeRegisterSteamController_Response* response,
                       ::google::protobuf::Closure* done);
  void SetControllerPersonalizationFile(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CPhysicalGoods_SetPersonalizationFile_Request* request,
                       ::proto::steam::CPhysicalGoods_SetPersonalizationFile_Response* response,
                       ::google::protobuf::Closure* done);
  void GetControllerPersonalizationFile(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CPhysicalGoods_GetPersonalizationFile_Request* request,
                       ::proto::steam::CPhysicalGoods_GetPersonalizationFile_Response* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(PhysicalGoods_Stub);
};


// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// CPhysicalGoods_RegisterSteamController_Request

// optional string serial_number = 1;
inline bool CPhysicalGoods_RegisterSteamController_Request::has_serial_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CPhysicalGoods_RegisterSteamController_Request::set_has_serial_number() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CPhysicalGoods_RegisterSteamController_Request::clear_has_serial_number() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CPhysicalGoods_RegisterSteamController_Request::clear_serial_number() {
  serial_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_serial_number();
}
inline const ::std::string& CPhysicalGoods_RegisterSteamController_Request::serial_number() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPhysicalGoods_RegisterSteamController_Request.serial_number)
  return serial_number_.GetNoArena();
}
inline void CPhysicalGoods_RegisterSteamController_Request::set_serial_number(const ::std::string& value) {
  set_has_serial_number();
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CPhysicalGoods_RegisterSteamController_Request.serial_number)
}
#if LANG_CXX11
inline void CPhysicalGoods_RegisterSteamController_Request::set_serial_number(::std::string&& value) {
  set_has_serial_number();
  serial_number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CPhysicalGoods_RegisterSteamController_Request.serial_number)
}
#endif
inline void CPhysicalGoods_RegisterSteamController_Request::set_serial_number(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_serial_number();
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CPhysicalGoods_RegisterSteamController_Request.serial_number)
}
inline void CPhysicalGoods_RegisterSteamController_Request::set_serial_number(const char* value, size_t size) {
  set_has_serial_number();
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CPhysicalGoods_RegisterSteamController_Request.serial_number)
}
inline ::std::string* CPhysicalGoods_RegisterSteamController_Request::mutable_serial_number() {
  set_has_serial_number();
  // @@protoc_insertion_point(field_mutable:proto.steam.CPhysicalGoods_RegisterSteamController_Request.serial_number)
  return serial_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CPhysicalGoods_RegisterSteamController_Request::release_serial_number() {
  // @@protoc_insertion_point(field_release:proto.steam.CPhysicalGoods_RegisterSteamController_Request.serial_number)
  clear_has_serial_number();
  return serial_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CPhysicalGoods_RegisterSteamController_Request::set_allocated_serial_number(::std::string* serial_number) {
  if (serial_number != NULL) {
    set_has_serial_number();
  } else {
    clear_has_serial_number();
  }
  serial_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serial_number);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CPhysicalGoods_RegisterSteamController_Request.serial_number)
}

// optional string controller_code = 2;
inline bool CPhysicalGoods_RegisterSteamController_Request::has_controller_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CPhysicalGoods_RegisterSteamController_Request::set_has_controller_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CPhysicalGoods_RegisterSteamController_Request::clear_has_controller_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CPhysicalGoods_RegisterSteamController_Request::clear_controller_code() {
  controller_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_controller_code();
}
inline const ::std::string& CPhysicalGoods_RegisterSteamController_Request::controller_code() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPhysicalGoods_RegisterSteamController_Request.controller_code)
  return controller_code_.GetNoArena();
}
inline void CPhysicalGoods_RegisterSteamController_Request::set_controller_code(const ::std::string& value) {
  set_has_controller_code();
  controller_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CPhysicalGoods_RegisterSteamController_Request.controller_code)
}
#if LANG_CXX11
inline void CPhysicalGoods_RegisterSteamController_Request::set_controller_code(::std::string&& value) {
  set_has_controller_code();
  controller_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CPhysicalGoods_RegisterSteamController_Request.controller_code)
}
#endif
inline void CPhysicalGoods_RegisterSteamController_Request::set_controller_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_controller_code();
  controller_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CPhysicalGoods_RegisterSteamController_Request.controller_code)
}
inline void CPhysicalGoods_RegisterSteamController_Request::set_controller_code(const char* value, size_t size) {
  set_has_controller_code();
  controller_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CPhysicalGoods_RegisterSteamController_Request.controller_code)
}
inline ::std::string* CPhysicalGoods_RegisterSteamController_Request::mutable_controller_code() {
  set_has_controller_code();
  // @@protoc_insertion_point(field_mutable:proto.steam.CPhysicalGoods_RegisterSteamController_Request.controller_code)
  return controller_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CPhysicalGoods_RegisterSteamController_Request::release_controller_code() {
  // @@protoc_insertion_point(field_release:proto.steam.CPhysicalGoods_RegisterSteamController_Request.controller_code)
  clear_has_controller_code();
  return controller_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CPhysicalGoods_RegisterSteamController_Request::set_allocated_controller_code(::std::string* controller_code) {
  if (controller_code != NULL) {
    set_has_controller_code();
  } else {
    clear_has_controller_code();
  }
  controller_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), controller_code);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CPhysicalGoods_RegisterSteamController_Request.controller_code)
}

// -------------------------------------------------------------------

// CPhysicalGoods_RegisterSteamController_Response

// -------------------------------------------------------------------

// CPhysicalGoods_CompleteSteamControllerRegistration_Request

// optional string serial_number = 1;
inline bool CPhysicalGoods_CompleteSteamControllerRegistration_Request::has_serial_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CPhysicalGoods_CompleteSteamControllerRegistration_Request::set_has_serial_number() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CPhysicalGoods_CompleteSteamControllerRegistration_Request::clear_has_serial_number() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CPhysicalGoods_CompleteSteamControllerRegistration_Request::clear_serial_number() {
  serial_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_serial_number();
}
inline const ::std::string& CPhysicalGoods_CompleteSteamControllerRegistration_Request::serial_number() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPhysicalGoods_CompleteSteamControllerRegistration_Request.serial_number)
  return serial_number_.GetNoArena();
}
inline void CPhysicalGoods_CompleteSteamControllerRegistration_Request::set_serial_number(const ::std::string& value) {
  set_has_serial_number();
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CPhysicalGoods_CompleteSteamControllerRegistration_Request.serial_number)
}
#if LANG_CXX11
inline void CPhysicalGoods_CompleteSteamControllerRegistration_Request::set_serial_number(::std::string&& value) {
  set_has_serial_number();
  serial_number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CPhysicalGoods_CompleteSteamControllerRegistration_Request.serial_number)
}
#endif
inline void CPhysicalGoods_CompleteSteamControllerRegistration_Request::set_serial_number(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_serial_number();
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CPhysicalGoods_CompleteSteamControllerRegistration_Request.serial_number)
}
inline void CPhysicalGoods_CompleteSteamControllerRegistration_Request::set_serial_number(const char* value, size_t size) {
  set_has_serial_number();
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CPhysicalGoods_CompleteSteamControllerRegistration_Request.serial_number)
}
inline ::std::string* CPhysicalGoods_CompleteSteamControllerRegistration_Request::mutable_serial_number() {
  set_has_serial_number();
  // @@protoc_insertion_point(field_mutable:proto.steam.CPhysicalGoods_CompleteSteamControllerRegistration_Request.serial_number)
  return serial_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CPhysicalGoods_CompleteSteamControllerRegistration_Request::release_serial_number() {
  // @@protoc_insertion_point(field_release:proto.steam.CPhysicalGoods_CompleteSteamControllerRegistration_Request.serial_number)
  clear_has_serial_number();
  return serial_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CPhysicalGoods_CompleteSteamControllerRegistration_Request::set_allocated_serial_number(::std::string* serial_number) {
  if (serial_number != NULL) {
    set_has_serial_number();
  } else {
    clear_has_serial_number();
  }
  serial_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serial_number);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CPhysicalGoods_CompleteSteamControllerRegistration_Request.serial_number)
}

// optional string controller_code = 2;
inline bool CPhysicalGoods_CompleteSteamControllerRegistration_Request::has_controller_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CPhysicalGoods_CompleteSteamControllerRegistration_Request::set_has_controller_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CPhysicalGoods_CompleteSteamControllerRegistration_Request::clear_has_controller_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CPhysicalGoods_CompleteSteamControllerRegistration_Request::clear_controller_code() {
  controller_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_controller_code();
}
inline const ::std::string& CPhysicalGoods_CompleteSteamControllerRegistration_Request::controller_code() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPhysicalGoods_CompleteSteamControllerRegistration_Request.controller_code)
  return controller_code_.GetNoArena();
}
inline void CPhysicalGoods_CompleteSteamControllerRegistration_Request::set_controller_code(const ::std::string& value) {
  set_has_controller_code();
  controller_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CPhysicalGoods_CompleteSteamControllerRegistration_Request.controller_code)
}
#if LANG_CXX11
inline void CPhysicalGoods_CompleteSteamControllerRegistration_Request::set_controller_code(::std::string&& value) {
  set_has_controller_code();
  controller_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CPhysicalGoods_CompleteSteamControllerRegistration_Request.controller_code)
}
#endif
inline void CPhysicalGoods_CompleteSteamControllerRegistration_Request::set_controller_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_controller_code();
  controller_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CPhysicalGoods_CompleteSteamControllerRegistration_Request.controller_code)
}
inline void CPhysicalGoods_CompleteSteamControllerRegistration_Request::set_controller_code(const char* value, size_t size) {
  set_has_controller_code();
  controller_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CPhysicalGoods_CompleteSteamControllerRegistration_Request.controller_code)
}
inline ::std::string* CPhysicalGoods_CompleteSteamControllerRegistration_Request::mutable_controller_code() {
  set_has_controller_code();
  // @@protoc_insertion_point(field_mutable:proto.steam.CPhysicalGoods_CompleteSteamControllerRegistration_Request.controller_code)
  return controller_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CPhysicalGoods_CompleteSteamControllerRegistration_Request::release_controller_code() {
  // @@protoc_insertion_point(field_release:proto.steam.CPhysicalGoods_CompleteSteamControllerRegistration_Request.controller_code)
  clear_has_controller_code();
  return controller_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CPhysicalGoods_CompleteSteamControllerRegistration_Request::set_allocated_controller_code(::std::string* controller_code) {
  if (controller_code != NULL) {
    set_has_controller_code();
  } else {
    clear_has_controller_code();
  }
  controller_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), controller_code);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CPhysicalGoods_CompleteSteamControllerRegistration_Request.controller_code)
}

// -------------------------------------------------------------------

// CPhysicalGoods_CompleteSteamControllerRegistration_Response

// -------------------------------------------------------------------

// CPhysicalGoods_QueryAccountsRegisteredToSerial_Request

// optional string serial_number = 1;
inline bool CPhysicalGoods_QueryAccountsRegisteredToSerial_Request::has_serial_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CPhysicalGoods_QueryAccountsRegisteredToSerial_Request::set_has_serial_number() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CPhysicalGoods_QueryAccountsRegisteredToSerial_Request::clear_has_serial_number() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CPhysicalGoods_QueryAccountsRegisteredToSerial_Request::clear_serial_number() {
  serial_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_serial_number();
}
inline const ::std::string& CPhysicalGoods_QueryAccountsRegisteredToSerial_Request::serial_number() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Request.serial_number)
  return serial_number_.GetNoArena();
}
inline void CPhysicalGoods_QueryAccountsRegisteredToSerial_Request::set_serial_number(const ::std::string& value) {
  set_has_serial_number();
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Request.serial_number)
}
#if LANG_CXX11
inline void CPhysicalGoods_QueryAccountsRegisteredToSerial_Request::set_serial_number(::std::string&& value) {
  set_has_serial_number();
  serial_number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Request.serial_number)
}
#endif
inline void CPhysicalGoods_QueryAccountsRegisteredToSerial_Request::set_serial_number(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_serial_number();
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Request.serial_number)
}
inline void CPhysicalGoods_QueryAccountsRegisteredToSerial_Request::set_serial_number(const char* value, size_t size) {
  set_has_serial_number();
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Request.serial_number)
}
inline ::std::string* CPhysicalGoods_QueryAccountsRegisteredToSerial_Request::mutable_serial_number() {
  set_has_serial_number();
  // @@protoc_insertion_point(field_mutable:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Request.serial_number)
  return serial_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CPhysicalGoods_QueryAccountsRegisteredToSerial_Request::release_serial_number() {
  // @@protoc_insertion_point(field_release:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Request.serial_number)
  clear_has_serial_number();
  return serial_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CPhysicalGoods_QueryAccountsRegisteredToSerial_Request::set_allocated_serial_number(::std::string* serial_number) {
  if (serial_number != NULL) {
    set_has_serial_number();
  } else {
    clear_has_serial_number();
  }
  serial_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serial_number);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Request.serial_number)
}

// optional string controller_code = 2;
inline bool CPhysicalGoods_QueryAccountsRegisteredToSerial_Request::has_controller_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CPhysicalGoods_QueryAccountsRegisteredToSerial_Request::set_has_controller_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CPhysicalGoods_QueryAccountsRegisteredToSerial_Request::clear_has_controller_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CPhysicalGoods_QueryAccountsRegisteredToSerial_Request::clear_controller_code() {
  controller_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_controller_code();
}
inline const ::std::string& CPhysicalGoods_QueryAccountsRegisteredToSerial_Request::controller_code() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Request.controller_code)
  return controller_code_.GetNoArena();
}
inline void CPhysicalGoods_QueryAccountsRegisteredToSerial_Request::set_controller_code(const ::std::string& value) {
  set_has_controller_code();
  controller_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Request.controller_code)
}
#if LANG_CXX11
inline void CPhysicalGoods_QueryAccountsRegisteredToSerial_Request::set_controller_code(::std::string&& value) {
  set_has_controller_code();
  controller_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Request.controller_code)
}
#endif
inline void CPhysicalGoods_QueryAccountsRegisteredToSerial_Request::set_controller_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_controller_code();
  controller_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Request.controller_code)
}
inline void CPhysicalGoods_QueryAccountsRegisteredToSerial_Request::set_controller_code(const char* value, size_t size) {
  set_has_controller_code();
  controller_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Request.controller_code)
}
inline ::std::string* CPhysicalGoods_QueryAccountsRegisteredToSerial_Request::mutable_controller_code() {
  set_has_controller_code();
  // @@protoc_insertion_point(field_mutable:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Request.controller_code)
  return controller_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CPhysicalGoods_QueryAccountsRegisteredToSerial_Request::release_controller_code() {
  // @@protoc_insertion_point(field_release:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Request.controller_code)
  clear_has_controller_code();
  return controller_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CPhysicalGoods_QueryAccountsRegisteredToSerial_Request::set_allocated_controller_code(::std::string* controller_code) {
  if (controller_code != NULL) {
    set_has_controller_code();
  } else {
    clear_has_controller_code();
  }
  controller_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), controller_code);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Request.controller_code)
}

// -------------------------------------------------------------------

// CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts

// optional uint32 accountid = 1;
inline bool CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts::has_accountid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts::set_has_accountid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts::clear_has_accountid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts::clear_accountid() {
  accountid_ = 0u;
  clear_has_accountid();
}
inline ::google::protobuf::uint32 CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts::accountid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts.accountid)
  return accountid_;
}
inline void CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts::set_accountid(::google::protobuf::uint32 value) {
  set_has_accountid();
  accountid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts.accountid)
}

// optional bool registration_complete = 2;
inline bool CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts::has_registration_complete() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts::set_has_registration_complete() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts::clear_has_registration_complete() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts::clear_registration_complete() {
  registration_complete_ = false;
  clear_has_registration_complete();
}
inline bool CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts::registration_complete() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts.registration_complete)
  return registration_complete_;
}
inline void CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts::set_registration_complete(bool value) {
  set_has_registration_complete();
  registration_complete_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts.registration_complete)
}

// -------------------------------------------------------------------

// CPhysicalGoods_QueryAccountsRegisteredToSerial_Response

// repeated .proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts accounts = 1;
inline int CPhysicalGoods_QueryAccountsRegisteredToSerial_Response::accounts_size() const {
  return accounts_.size();
}
inline void CPhysicalGoods_QueryAccountsRegisteredToSerial_Response::clear_accounts() {
  accounts_.Clear();
}
inline const ::proto::steam::CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts& CPhysicalGoods_QueryAccountsRegisteredToSerial_Response::accounts(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Response.accounts)
  return accounts_.Get(index);
}
inline ::proto::steam::CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts* CPhysicalGoods_QueryAccountsRegisteredToSerial_Response::mutable_accounts(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Response.accounts)
  return accounts_.Mutable(index);
}
inline ::proto::steam::CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts* CPhysicalGoods_QueryAccountsRegisteredToSerial_Response::add_accounts() {
  // @@protoc_insertion_point(field_add:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Response.accounts)
  return accounts_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::steam::CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts >*
CPhysicalGoods_QueryAccountsRegisteredToSerial_Response::mutable_accounts() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Response.accounts)
  return &accounts_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::steam::CPhysicalGoods_QueryAccountsRegisteredToSerial_Accounts >&
CPhysicalGoods_QueryAccountsRegisteredToSerial_Response::accounts() const {
  // @@protoc_insertion_point(field_list:proto.steam.CPhysicalGoods_QueryAccountsRegisteredToSerial_Response.accounts)
  return accounts_;
}

// -------------------------------------------------------------------

// CPhysicalGoods_SteamControllerSetConfig_ControllerConfig

// optional string appidorname = 1;
inline bool CPhysicalGoods_SteamControllerSetConfig_ControllerConfig::has_appidorname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CPhysicalGoods_SteamControllerSetConfig_ControllerConfig::set_has_appidorname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CPhysicalGoods_SteamControllerSetConfig_ControllerConfig::clear_has_appidorname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CPhysicalGoods_SteamControllerSetConfig_ControllerConfig::clear_appidorname() {
  appidorname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_appidorname();
}
inline const ::std::string& CPhysicalGoods_SteamControllerSetConfig_ControllerConfig::appidorname() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPhysicalGoods_SteamControllerSetConfig_ControllerConfig.appidorname)
  return appidorname_.GetNoArena();
}
inline void CPhysicalGoods_SteamControllerSetConfig_ControllerConfig::set_appidorname(const ::std::string& value) {
  set_has_appidorname();
  appidorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CPhysicalGoods_SteamControllerSetConfig_ControllerConfig.appidorname)
}
#if LANG_CXX11
inline void CPhysicalGoods_SteamControllerSetConfig_ControllerConfig::set_appidorname(::std::string&& value) {
  set_has_appidorname();
  appidorname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CPhysicalGoods_SteamControllerSetConfig_ControllerConfig.appidorname)
}
#endif
inline void CPhysicalGoods_SteamControllerSetConfig_ControllerConfig::set_appidorname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_appidorname();
  appidorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CPhysicalGoods_SteamControllerSetConfig_ControllerConfig.appidorname)
}
inline void CPhysicalGoods_SteamControllerSetConfig_ControllerConfig::set_appidorname(const char* value, size_t size) {
  set_has_appidorname();
  appidorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CPhysicalGoods_SteamControllerSetConfig_ControllerConfig.appidorname)
}
inline ::std::string* CPhysicalGoods_SteamControllerSetConfig_ControllerConfig::mutable_appidorname() {
  set_has_appidorname();
  // @@protoc_insertion_point(field_mutable:proto.steam.CPhysicalGoods_SteamControllerSetConfig_ControllerConfig.appidorname)
  return appidorname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CPhysicalGoods_SteamControllerSetConfig_ControllerConfig::release_appidorname() {
  // @@protoc_insertion_point(field_release:proto.steam.CPhysicalGoods_SteamControllerSetConfig_ControllerConfig.appidorname)
  clear_has_appidorname();
  return appidorname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CPhysicalGoods_SteamControllerSetConfig_ControllerConfig::set_allocated_appidorname(::std::string* appidorname) {
  if (appidorname != NULL) {
    set_has_appidorname();
  } else {
    clear_has_appidorname();
  }
  appidorname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appidorname);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CPhysicalGoods_SteamControllerSetConfig_ControllerConfig.appidorname)
}

// optional uint64 publishedfileid = 2;
inline bool CPhysicalGoods_SteamControllerSetConfig_ControllerConfig::has_publishedfileid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CPhysicalGoods_SteamControllerSetConfig_ControllerConfig::set_has_publishedfileid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CPhysicalGoods_SteamControllerSetConfig_ControllerConfig::clear_has_publishedfileid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CPhysicalGoods_SteamControllerSetConfig_ControllerConfig::clear_publishedfileid() {
  publishedfileid_ = GOOGLE_ULONGLONG(0);
  clear_has_publishedfileid();
}
inline ::google::protobuf::uint64 CPhysicalGoods_SteamControllerSetConfig_ControllerConfig::publishedfileid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPhysicalGoods_SteamControllerSetConfig_ControllerConfig.publishedfileid)
  return publishedfileid_;
}
inline void CPhysicalGoods_SteamControllerSetConfig_ControllerConfig::set_publishedfileid(::google::protobuf::uint64 value) {
  set_has_publishedfileid();
  publishedfileid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPhysicalGoods_SteamControllerSetConfig_ControllerConfig.publishedfileid)
}

// optional string templatename = 3;
inline bool CPhysicalGoods_SteamControllerSetConfig_ControllerConfig::has_templatename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CPhysicalGoods_SteamControllerSetConfig_ControllerConfig::set_has_templatename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CPhysicalGoods_SteamControllerSetConfig_ControllerConfig::clear_has_templatename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CPhysicalGoods_SteamControllerSetConfig_ControllerConfig::clear_templatename() {
  templatename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_templatename();
}
inline const ::std::string& CPhysicalGoods_SteamControllerSetConfig_ControllerConfig::templatename() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPhysicalGoods_SteamControllerSetConfig_ControllerConfig.templatename)
  return templatename_.GetNoArena();
}
inline void CPhysicalGoods_SteamControllerSetConfig_ControllerConfig::set_templatename(const ::std::string& value) {
  set_has_templatename();
  templatename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CPhysicalGoods_SteamControllerSetConfig_ControllerConfig.templatename)
}
#if LANG_CXX11
inline void CPhysicalGoods_SteamControllerSetConfig_ControllerConfig::set_templatename(::std::string&& value) {
  set_has_templatename();
  templatename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CPhysicalGoods_SteamControllerSetConfig_ControllerConfig.templatename)
}
#endif
inline void CPhysicalGoods_SteamControllerSetConfig_ControllerConfig::set_templatename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_templatename();
  templatename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CPhysicalGoods_SteamControllerSetConfig_ControllerConfig.templatename)
}
inline void CPhysicalGoods_SteamControllerSetConfig_ControllerConfig::set_templatename(const char* value, size_t size) {
  set_has_templatename();
  templatename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CPhysicalGoods_SteamControllerSetConfig_ControllerConfig.templatename)
}
inline ::std::string* CPhysicalGoods_SteamControllerSetConfig_ControllerConfig::mutable_templatename() {
  set_has_templatename();
  // @@protoc_insertion_point(field_mutable:proto.steam.CPhysicalGoods_SteamControllerSetConfig_ControllerConfig.templatename)
  return templatename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CPhysicalGoods_SteamControllerSetConfig_ControllerConfig::release_templatename() {
  // @@protoc_insertion_point(field_release:proto.steam.CPhysicalGoods_SteamControllerSetConfig_ControllerConfig.templatename)
  clear_has_templatename();
  return templatename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CPhysicalGoods_SteamControllerSetConfig_ControllerConfig::set_allocated_templatename(::std::string* templatename) {
  if (templatename != NULL) {
    set_has_templatename();
  } else {
    clear_has_templatename();
  }
  templatename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), templatename);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CPhysicalGoods_SteamControllerSetConfig_ControllerConfig.templatename)
}

// -------------------------------------------------------------------

// CPhysicalGoods_SteamControllerSetConfig_Request

// optional string serial_number = 1;
inline bool CPhysicalGoods_SteamControllerSetConfig_Request::has_serial_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CPhysicalGoods_SteamControllerSetConfig_Request::set_has_serial_number() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CPhysicalGoods_SteamControllerSetConfig_Request::clear_has_serial_number() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CPhysicalGoods_SteamControllerSetConfig_Request::clear_serial_number() {
  serial_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_serial_number();
}
inline const ::std::string& CPhysicalGoods_SteamControllerSetConfig_Request::serial_number() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPhysicalGoods_SteamControllerSetConfig_Request.serial_number)
  return serial_number_.GetNoArena();
}
inline void CPhysicalGoods_SteamControllerSetConfig_Request::set_serial_number(const ::std::string& value) {
  set_has_serial_number();
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CPhysicalGoods_SteamControllerSetConfig_Request.serial_number)
}
#if LANG_CXX11
inline void CPhysicalGoods_SteamControllerSetConfig_Request::set_serial_number(::std::string&& value) {
  set_has_serial_number();
  serial_number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CPhysicalGoods_SteamControllerSetConfig_Request.serial_number)
}
#endif
inline void CPhysicalGoods_SteamControllerSetConfig_Request::set_serial_number(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_serial_number();
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CPhysicalGoods_SteamControllerSetConfig_Request.serial_number)
}
inline void CPhysicalGoods_SteamControllerSetConfig_Request::set_serial_number(const char* value, size_t size) {
  set_has_serial_number();
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CPhysicalGoods_SteamControllerSetConfig_Request.serial_number)
}
inline ::std::string* CPhysicalGoods_SteamControllerSetConfig_Request::mutable_serial_number() {
  set_has_serial_number();
  // @@protoc_insertion_point(field_mutable:proto.steam.CPhysicalGoods_SteamControllerSetConfig_Request.serial_number)
  return serial_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CPhysicalGoods_SteamControllerSetConfig_Request::release_serial_number() {
  // @@protoc_insertion_point(field_release:proto.steam.CPhysicalGoods_SteamControllerSetConfig_Request.serial_number)
  clear_has_serial_number();
  return serial_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CPhysicalGoods_SteamControllerSetConfig_Request::set_allocated_serial_number(::std::string* serial_number) {
  if (serial_number != NULL) {
    set_has_serial_number();
  } else {
    clear_has_serial_number();
  }
  serial_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serial_number);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CPhysicalGoods_SteamControllerSetConfig_Request.serial_number)
}

// optional string controller_code = 2;
inline bool CPhysicalGoods_SteamControllerSetConfig_Request::has_controller_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CPhysicalGoods_SteamControllerSetConfig_Request::set_has_controller_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CPhysicalGoods_SteamControllerSetConfig_Request::clear_has_controller_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CPhysicalGoods_SteamControllerSetConfig_Request::clear_controller_code() {
  controller_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_controller_code();
}
inline const ::std::string& CPhysicalGoods_SteamControllerSetConfig_Request::controller_code() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPhysicalGoods_SteamControllerSetConfig_Request.controller_code)
  return controller_code_.GetNoArena();
}
inline void CPhysicalGoods_SteamControllerSetConfig_Request::set_controller_code(const ::std::string& value) {
  set_has_controller_code();
  controller_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CPhysicalGoods_SteamControllerSetConfig_Request.controller_code)
}
#if LANG_CXX11
inline void CPhysicalGoods_SteamControllerSetConfig_Request::set_controller_code(::std::string&& value) {
  set_has_controller_code();
  controller_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CPhysicalGoods_SteamControllerSetConfig_Request.controller_code)
}
#endif
inline void CPhysicalGoods_SteamControllerSetConfig_Request::set_controller_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_controller_code();
  controller_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CPhysicalGoods_SteamControllerSetConfig_Request.controller_code)
}
inline void CPhysicalGoods_SteamControllerSetConfig_Request::set_controller_code(const char* value, size_t size) {
  set_has_controller_code();
  controller_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CPhysicalGoods_SteamControllerSetConfig_Request.controller_code)
}
inline ::std::string* CPhysicalGoods_SteamControllerSetConfig_Request::mutable_controller_code() {
  set_has_controller_code();
  // @@protoc_insertion_point(field_mutable:proto.steam.CPhysicalGoods_SteamControllerSetConfig_Request.controller_code)
  return controller_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CPhysicalGoods_SteamControllerSetConfig_Request::release_controller_code() {
  // @@protoc_insertion_point(field_release:proto.steam.CPhysicalGoods_SteamControllerSetConfig_Request.controller_code)
  clear_has_controller_code();
  return controller_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CPhysicalGoods_SteamControllerSetConfig_Request::set_allocated_controller_code(::std::string* controller_code) {
  if (controller_code != NULL) {
    set_has_controller_code();
  } else {
    clear_has_controller_code();
  }
  controller_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), controller_code);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CPhysicalGoods_SteamControllerSetConfig_Request.controller_code)
}

// optional uint32 accountid = 3;
inline bool CPhysicalGoods_SteamControllerSetConfig_Request::has_accountid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CPhysicalGoods_SteamControllerSetConfig_Request::set_has_accountid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CPhysicalGoods_SteamControllerSetConfig_Request::clear_has_accountid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CPhysicalGoods_SteamControllerSetConfig_Request::clear_accountid() {
  accountid_ = 0u;
  clear_has_accountid();
}
inline ::google::protobuf::uint32 CPhysicalGoods_SteamControllerSetConfig_Request::accountid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPhysicalGoods_SteamControllerSetConfig_Request.accountid)
  return accountid_;
}
inline void CPhysicalGoods_SteamControllerSetConfig_Request::set_accountid(::google::protobuf::uint32 value) {
  set_has_accountid();
  accountid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPhysicalGoods_SteamControllerSetConfig_Request.accountid)
}

// repeated .proto.steam.CPhysicalGoods_SteamControllerSetConfig_ControllerConfig configurations = 4;
inline int CPhysicalGoods_SteamControllerSetConfig_Request::configurations_size() const {
  return configurations_.size();
}
inline void CPhysicalGoods_SteamControllerSetConfig_Request::clear_configurations() {
  configurations_.Clear();
}
inline const ::proto::steam::CPhysicalGoods_SteamControllerSetConfig_ControllerConfig& CPhysicalGoods_SteamControllerSetConfig_Request::configurations(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CPhysicalGoods_SteamControllerSetConfig_Request.configurations)
  return configurations_.Get(index);
}
inline ::proto::steam::CPhysicalGoods_SteamControllerSetConfig_ControllerConfig* CPhysicalGoods_SteamControllerSetConfig_Request::mutable_configurations(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CPhysicalGoods_SteamControllerSetConfig_Request.configurations)
  return configurations_.Mutable(index);
}
inline ::proto::steam::CPhysicalGoods_SteamControllerSetConfig_ControllerConfig* CPhysicalGoods_SteamControllerSetConfig_Request::add_configurations() {
  // @@protoc_insertion_point(field_add:proto.steam.CPhysicalGoods_SteamControllerSetConfig_Request.configurations)
  return configurations_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::steam::CPhysicalGoods_SteamControllerSetConfig_ControllerConfig >*
CPhysicalGoods_SteamControllerSetConfig_Request::mutable_configurations() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CPhysicalGoods_SteamControllerSetConfig_Request.configurations)
  return &configurations_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::steam::CPhysicalGoods_SteamControllerSetConfig_ControllerConfig >&
CPhysicalGoods_SteamControllerSetConfig_Request::configurations() const {
  // @@protoc_insertion_point(field_list:proto.steam.CPhysicalGoods_SteamControllerSetConfig_Request.configurations)
  return configurations_;
}

// optional int32 controller_type = 5 [default = 2];
inline bool CPhysicalGoods_SteamControllerSetConfig_Request::has_controller_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CPhysicalGoods_SteamControllerSetConfig_Request::set_has_controller_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CPhysicalGoods_SteamControllerSetConfig_Request::clear_has_controller_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CPhysicalGoods_SteamControllerSetConfig_Request::clear_controller_type() {
  controller_type_ = 2;
  clear_has_controller_type();
}
inline ::google::protobuf::int32 CPhysicalGoods_SteamControllerSetConfig_Request::controller_type() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPhysicalGoods_SteamControllerSetConfig_Request.controller_type)
  return controller_type_;
}
inline void CPhysicalGoods_SteamControllerSetConfig_Request::set_controller_type(::google::protobuf::int32 value) {
  set_has_controller_type();
  controller_type_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPhysicalGoods_SteamControllerSetConfig_Request.controller_type)
}

// optional bool only_for_this_serial = 6 [default = false];
inline bool CPhysicalGoods_SteamControllerSetConfig_Request::has_only_for_this_serial() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CPhysicalGoods_SteamControllerSetConfig_Request::set_has_only_for_this_serial() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CPhysicalGoods_SteamControllerSetConfig_Request::clear_has_only_for_this_serial() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CPhysicalGoods_SteamControllerSetConfig_Request::clear_only_for_this_serial() {
  only_for_this_serial_ = false;
  clear_has_only_for_this_serial();
}
inline bool CPhysicalGoods_SteamControllerSetConfig_Request::only_for_this_serial() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPhysicalGoods_SteamControllerSetConfig_Request.only_for_this_serial)
  return only_for_this_serial_;
}
inline void CPhysicalGoods_SteamControllerSetConfig_Request::set_only_for_this_serial(bool value) {
  set_has_only_for_this_serial();
  only_for_this_serial_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPhysicalGoods_SteamControllerSetConfig_Request.only_for_this_serial)
}

// -------------------------------------------------------------------

// CPhysicalGoods_SteamControllerSetConfig_Response

// -------------------------------------------------------------------

// CPhysicalGoods_SteamControllerGetConfig_Request

// optional string serial_number = 1;
inline bool CPhysicalGoods_SteamControllerGetConfig_Request::has_serial_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CPhysicalGoods_SteamControllerGetConfig_Request::set_has_serial_number() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CPhysicalGoods_SteamControllerGetConfig_Request::clear_has_serial_number() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CPhysicalGoods_SteamControllerGetConfig_Request::clear_serial_number() {
  serial_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_serial_number();
}
inline const ::std::string& CPhysicalGoods_SteamControllerGetConfig_Request::serial_number() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Request.serial_number)
  return serial_number_.GetNoArena();
}
inline void CPhysicalGoods_SteamControllerGetConfig_Request::set_serial_number(const ::std::string& value) {
  set_has_serial_number();
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Request.serial_number)
}
#if LANG_CXX11
inline void CPhysicalGoods_SteamControllerGetConfig_Request::set_serial_number(::std::string&& value) {
  set_has_serial_number();
  serial_number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Request.serial_number)
}
#endif
inline void CPhysicalGoods_SteamControllerGetConfig_Request::set_serial_number(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_serial_number();
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Request.serial_number)
}
inline void CPhysicalGoods_SteamControllerGetConfig_Request::set_serial_number(const char* value, size_t size) {
  set_has_serial_number();
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Request.serial_number)
}
inline ::std::string* CPhysicalGoods_SteamControllerGetConfig_Request::mutable_serial_number() {
  set_has_serial_number();
  // @@protoc_insertion_point(field_mutable:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Request.serial_number)
  return serial_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CPhysicalGoods_SteamControllerGetConfig_Request::release_serial_number() {
  // @@protoc_insertion_point(field_release:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Request.serial_number)
  clear_has_serial_number();
  return serial_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CPhysicalGoods_SteamControllerGetConfig_Request::set_allocated_serial_number(::std::string* serial_number) {
  if (serial_number != NULL) {
    set_has_serial_number();
  } else {
    clear_has_serial_number();
  }
  serial_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serial_number);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Request.serial_number)
}

// optional string controller_code = 2;
inline bool CPhysicalGoods_SteamControllerGetConfig_Request::has_controller_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CPhysicalGoods_SteamControllerGetConfig_Request::set_has_controller_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CPhysicalGoods_SteamControllerGetConfig_Request::clear_has_controller_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CPhysicalGoods_SteamControllerGetConfig_Request::clear_controller_code() {
  controller_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_controller_code();
}
inline const ::std::string& CPhysicalGoods_SteamControllerGetConfig_Request::controller_code() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Request.controller_code)
  return controller_code_.GetNoArena();
}
inline void CPhysicalGoods_SteamControllerGetConfig_Request::set_controller_code(const ::std::string& value) {
  set_has_controller_code();
  controller_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Request.controller_code)
}
#if LANG_CXX11
inline void CPhysicalGoods_SteamControllerGetConfig_Request::set_controller_code(::std::string&& value) {
  set_has_controller_code();
  controller_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Request.controller_code)
}
#endif
inline void CPhysicalGoods_SteamControllerGetConfig_Request::set_controller_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_controller_code();
  controller_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Request.controller_code)
}
inline void CPhysicalGoods_SteamControllerGetConfig_Request::set_controller_code(const char* value, size_t size) {
  set_has_controller_code();
  controller_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Request.controller_code)
}
inline ::std::string* CPhysicalGoods_SteamControllerGetConfig_Request::mutable_controller_code() {
  set_has_controller_code();
  // @@protoc_insertion_point(field_mutable:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Request.controller_code)
  return controller_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CPhysicalGoods_SteamControllerGetConfig_Request::release_controller_code() {
  // @@protoc_insertion_point(field_release:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Request.controller_code)
  clear_has_controller_code();
  return controller_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CPhysicalGoods_SteamControllerGetConfig_Request::set_allocated_controller_code(::std::string* controller_code) {
  if (controller_code != NULL) {
    set_has_controller_code();
  } else {
    clear_has_controller_code();
  }
  controller_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), controller_code);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Request.controller_code)
}

// optional uint32 accountid = 3;
inline bool CPhysicalGoods_SteamControllerGetConfig_Request::has_accountid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CPhysicalGoods_SteamControllerGetConfig_Request::set_has_accountid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CPhysicalGoods_SteamControllerGetConfig_Request::clear_has_accountid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CPhysicalGoods_SteamControllerGetConfig_Request::clear_accountid() {
  accountid_ = 0u;
  clear_has_accountid();
}
inline ::google::protobuf::uint32 CPhysicalGoods_SteamControllerGetConfig_Request::accountid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Request.accountid)
  return accountid_;
}
inline void CPhysicalGoods_SteamControllerGetConfig_Request::set_accountid(::google::protobuf::uint32 value) {
  set_has_accountid();
  accountid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Request.accountid)
}

// optional string appidorname = 4;
inline bool CPhysicalGoods_SteamControllerGetConfig_Request::has_appidorname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CPhysicalGoods_SteamControllerGetConfig_Request::set_has_appidorname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CPhysicalGoods_SteamControllerGetConfig_Request::clear_has_appidorname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CPhysicalGoods_SteamControllerGetConfig_Request::clear_appidorname() {
  appidorname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_appidorname();
}
inline const ::std::string& CPhysicalGoods_SteamControllerGetConfig_Request::appidorname() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Request.appidorname)
  return appidorname_.GetNoArena();
}
inline void CPhysicalGoods_SteamControllerGetConfig_Request::set_appidorname(const ::std::string& value) {
  set_has_appidorname();
  appidorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Request.appidorname)
}
#if LANG_CXX11
inline void CPhysicalGoods_SteamControllerGetConfig_Request::set_appidorname(::std::string&& value) {
  set_has_appidorname();
  appidorname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Request.appidorname)
}
#endif
inline void CPhysicalGoods_SteamControllerGetConfig_Request::set_appidorname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_appidorname();
  appidorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Request.appidorname)
}
inline void CPhysicalGoods_SteamControllerGetConfig_Request::set_appidorname(const char* value, size_t size) {
  set_has_appidorname();
  appidorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Request.appidorname)
}
inline ::std::string* CPhysicalGoods_SteamControllerGetConfig_Request::mutable_appidorname() {
  set_has_appidorname();
  // @@protoc_insertion_point(field_mutable:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Request.appidorname)
  return appidorname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CPhysicalGoods_SteamControllerGetConfig_Request::release_appidorname() {
  // @@protoc_insertion_point(field_release:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Request.appidorname)
  clear_has_appidorname();
  return appidorname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CPhysicalGoods_SteamControllerGetConfig_Request::set_allocated_appidorname(::std::string* appidorname) {
  if (appidorname != NULL) {
    set_has_appidorname();
  } else {
    clear_has_appidorname();
  }
  appidorname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appidorname);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Request.appidorname)
}

// optional int32 controller_type = 5 [default = 2];
inline bool CPhysicalGoods_SteamControllerGetConfig_Request::has_controller_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CPhysicalGoods_SteamControllerGetConfig_Request::set_has_controller_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CPhysicalGoods_SteamControllerGetConfig_Request::clear_has_controller_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CPhysicalGoods_SteamControllerGetConfig_Request::clear_controller_type() {
  controller_type_ = 2;
  clear_has_controller_type();
}
inline ::google::protobuf::int32 CPhysicalGoods_SteamControllerGetConfig_Request::controller_type() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Request.controller_type)
  return controller_type_;
}
inline void CPhysicalGoods_SteamControllerGetConfig_Request::set_controller_type(::google::protobuf::int32 value) {
  set_has_controller_type();
  controller_type_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Request.controller_type)
}

// optional bool only_for_this_serial = 6 [default = false];
inline bool CPhysicalGoods_SteamControllerGetConfig_Request::has_only_for_this_serial() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CPhysicalGoods_SteamControllerGetConfig_Request::set_has_only_for_this_serial() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CPhysicalGoods_SteamControllerGetConfig_Request::clear_has_only_for_this_serial() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CPhysicalGoods_SteamControllerGetConfig_Request::clear_only_for_this_serial() {
  only_for_this_serial_ = false;
  clear_has_only_for_this_serial();
}
inline bool CPhysicalGoods_SteamControllerGetConfig_Request::only_for_this_serial() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Request.only_for_this_serial)
  return only_for_this_serial_;
}
inline void CPhysicalGoods_SteamControllerGetConfig_Request::set_only_for_this_serial(bool value) {
  set_has_only_for_this_serial();
  only_for_this_serial_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Request.only_for_this_serial)
}

// -------------------------------------------------------------------

// CPhysicalGoods_SteamControllerGetConfig_ControllerConfig

// optional string appidorname = 1;
inline bool CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::has_appidorname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::set_has_appidorname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::clear_has_appidorname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::clear_appidorname() {
  appidorname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_appidorname();
}
inline const ::std::string& CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::appidorname() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPhysicalGoods_SteamControllerGetConfig_ControllerConfig.appidorname)
  return appidorname_.GetNoArena();
}
inline void CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::set_appidorname(const ::std::string& value) {
  set_has_appidorname();
  appidorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CPhysicalGoods_SteamControllerGetConfig_ControllerConfig.appidorname)
}
#if LANG_CXX11
inline void CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::set_appidorname(::std::string&& value) {
  set_has_appidorname();
  appidorname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CPhysicalGoods_SteamControllerGetConfig_ControllerConfig.appidorname)
}
#endif
inline void CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::set_appidorname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_appidorname();
  appidorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CPhysicalGoods_SteamControllerGetConfig_ControllerConfig.appidorname)
}
inline void CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::set_appidorname(const char* value, size_t size) {
  set_has_appidorname();
  appidorname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CPhysicalGoods_SteamControllerGetConfig_ControllerConfig.appidorname)
}
inline ::std::string* CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::mutable_appidorname() {
  set_has_appidorname();
  // @@protoc_insertion_point(field_mutable:proto.steam.CPhysicalGoods_SteamControllerGetConfig_ControllerConfig.appidorname)
  return appidorname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::release_appidorname() {
  // @@protoc_insertion_point(field_release:proto.steam.CPhysicalGoods_SteamControllerGetConfig_ControllerConfig.appidorname)
  clear_has_appidorname();
  return appidorname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::set_allocated_appidorname(::std::string* appidorname) {
  if (appidorname != NULL) {
    set_has_appidorname();
  } else {
    clear_has_appidorname();
  }
  appidorname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appidorname);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CPhysicalGoods_SteamControllerGetConfig_ControllerConfig.appidorname)
}

// optional uint64 publishedfileid = 2;
inline bool CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::has_publishedfileid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::set_has_publishedfileid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::clear_has_publishedfileid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::clear_publishedfileid() {
  publishedfileid_ = GOOGLE_ULONGLONG(0);
  clear_has_publishedfileid();
}
inline ::google::protobuf::uint64 CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::publishedfileid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPhysicalGoods_SteamControllerGetConfig_ControllerConfig.publishedfileid)
  return publishedfileid_;
}
inline void CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::set_publishedfileid(::google::protobuf::uint64 value) {
  set_has_publishedfileid();
  publishedfileid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPhysicalGoods_SteamControllerGetConfig_ControllerConfig.publishedfileid)
}

// optional string templatename = 3;
inline bool CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::has_templatename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::set_has_templatename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::clear_has_templatename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::clear_templatename() {
  templatename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_templatename();
}
inline const ::std::string& CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::templatename() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPhysicalGoods_SteamControllerGetConfig_ControllerConfig.templatename)
  return templatename_.GetNoArena();
}
inline void CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::set_templatename(const ::std::string& value) {
  set_has_templatename();
  templatename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CPhysicalGoods_SteamControllerGetConfig_ControllerConfig.templatename)
}
#if LANG_CXX11
inline void CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::set_templatename(::std::string&& value) {
  set_has_templatename();
  templatename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CPhysicalGoods_SteamControllerGetConfig_ControllerConfig.templatename)
}
#endif
inline void CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::set_templatename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_templatename();
  templatename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CPhysicalGoods_SteamControllerGetConfig_ControllerConfig.templatename)
}
inline void CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::set_templatename(const char* value, size_t size) {
  set_has_templatename();
  templatename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CPhysicalGoods_SteamControllerGetConfig_ControllerConfig.templatename)
}
inline ::std::string* CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::mutable_templatename() {
  set_has_templatename();
  // @@protoc_insertion_point(field_mutable:proto.steam.CPhysicalGoods_SteamControllerGetConfig_ControllerConfig.templatename)
  return templatename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::release_templatename() {
  // @@protoc_insertion_point(field_release:proto.steam.CPhysicalGoods_SteamControllerGetConfig_ControllerConfig.templatename)
  clear_has_templatename();
  return templatename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::set_allocated_templatename(::std::string* templatename) {
  if (templatename != NULL) {
    set_has_templatename();
  } else {
    clear_has_templatename();
  }
  templatename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), templatename);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CPhysicalGoods_SteamControllerGetConfig_ControllerConfig.templatename)
}

// optional string serial_number = 4;
inline bool CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::has_serial_number() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::set_has_serial_number() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::clear_has_serial_number() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::clear_serial_number() {
  serial_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_serial_number();
}
inline const ::std::string& CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::serial_number() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPhysicalGoods_SteamControllerGetConfig_ControllerConfig.serial_number)
  return serial_number_.GetNoArena();
}
inline void CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::set_serial_number(const ::std::string& value) {
  set_has_serial_number();
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CPhysicalGoods_SteamControllerGetConfig_ControllerConfig.serial_number)
}
#if LANG_CXX11
inline void CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::set_serial_number(::std::string&& value) {
  set_has_serial_number();
  serial_number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CPhysicalGoods_SteamControllerGetConfig_ControllerConfig.serial_number)
}
#endif
inline void CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::set_serial_number(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_serial_number();
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CPhysicalGoods_SteamControllerGetConfig_ControllerConfig.serial_number)
}
inline void CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::set_serial_number(const char* value, size_t size) {
  set_has_serial_number();
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CPhysicalGoods_SteamControllerGetConfig_ControllerConfig.serial_number)
}
inline ::std::string* CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::mutable_serial_number() {
  set_has_serial_number();
  // @@protoc_insertion_point(field_mutable:proto.steam.CPhysicalGoods_SteamControllerGetConfig_ControllerConfig.serial_number)
  return serial_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::release_serial_number() {
  // @@protoc_insertion_point(field_release:proto.steam.CPhysicalGoods_SteamControllerGetConfig_ControllerConfig.serial_number)
  clear_has_serial_number();
  return serial_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CPhysicalGoods_SteamControllerGetConfig_ControllerConfig::set_allocated_serial_number(::std::string* serial_number) {
  if (serial_number != NULL) {
    set_has_serial_number();
  } else {
    clear_has_serial_number();
  }
  serial_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serial_number);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CPhysicalGoods_SteamControllerGetConfig_ControllerConfig.serial_number)
}

// -------------------------------------------------------------------

// CPhysicalGoods_SteamControllerGetConfig_Response

// repeated .proto.steam.CPhysicalGoods_SteamControllerGetConfig_ControllerConfig configurations = 1;
inline int CPhysicalGoods_SteamControllerGetConfig_Response::configurations_size() const {
  return configurations_.size();
}
inline void CPhysicalGoods_SteamControllerGetConfig_Response::clear_configurations() {
  configurations_.Clear();
}
inline const ::proto::steam::CPhysicalGoods_SteamControllerGetConfig_ControllerConfig& CPhysicalGoods_SteamControllerGetConfig_Response::configurations(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Response.configurations)
  return configurations_.Get(index);
}
inline ::proto::steam::CPhysicalGoods_SteamControllerGetConfig_ControllerConfig* CPhysicalGoods_SteamControllerGetConfig_Response::mutable_configurations(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Response.configurations)
  return configurations_.Mutable(index);
}
inline ::proto::steam::CPhysicalGoods_SteamControllerGetConfig_ControllerConfig* CPhysicalGoods_SteamControllerGetConfig_Response::add_configurations() {
  // @@protoc_insertion_point(field_add:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Response.configurations)
  return configurations_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::steam::CPhysicalGoods_SteamControllerGetConfig_ControllerConfig >*
CPhysicalGoods_SteamControllerGetConfig_Response::mutable_configurations() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Response.configurations)
  return &configurations_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::steam::CPhysicalGoods_SteamControllerGetConfig_ControllerConfig >&
CPhysicalGoods_SteamControllerGetConfig_Response::configurations() const {
  // @@protoc_insertion_point(field_list:proto.steam.CPhysicalGoods_SteamControllerGetConfig_Response.configurations)
  return configurations_;
}

// -------------------------------------------------------------------

// CPhysicalGoods_DeRegisterSteamController_Request

// optional string serial_number = 1;
inline bool CPhysicalGoods_DeRegisterSteamController_Request::has_serial_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CPhysicalGoods_DeRegisterSteamController_Request::set_has_serial_number() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CPhysicalGoods_DeRegisterSteamController_Request::clear_has_serial_number() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CPhysicalGoods_DeRegisterSteamController_Request::clear_serial_number() {
  serial_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_serial_number();
}
inline const ::std::string& CPhysicalGoods_DeRegisterSteamController_Request::serial_number() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPhysicalGoods_DeRegisterSteamController_Request.serial_number)
  return serial_number_.GetNoArena();
}
inline void CPhysicalGoods_DeRegisterSteamController_Request::set_serial_number(const ::std::string& value) {
  set_has_serial_number();
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CPhysicalGoods_DeRegisterSteamController_Request.serial_number)
}
#if LANG_CXX11
inline void CPhysicalGoods_DeRegisterSteamController_Request::set_serial_number(::std::string&& value) {
  set_has_serial_number();
  serial_number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CPhysicalGoods_DeRegisterSteamController_Request.serial_number)
}
#endif
inline void CPhysicalGoods_DeRegisterSteamController_Request::set_serial_number(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_serial_number();
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CPhysicalGoods_DeRegisterSteamController_Request.serial_number)
}
inline void CPhysicalGoods_DeRegisterSteamController_Request::set_serial_number(const char* value, size_t size) {
  set_has_serial_number();
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CPhysicalGoods_DeRegisterSteamController_Request.serial_number)
}
inline ::std::string* CPhysicalGoods_DeRegisterSteamController_Request::mutable_serial_number() {
  set_has_serial_number();
  // @@protoc_insertion_point(field_mutable:proto.steam.CPhysicalGoods_DeRegisterSteamController_Request.serial_number)
  return serial_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CPhysicalGoods_DeRegisterSteamController_Request::release_serial_number() {
  // @@protoc_insertion_point(field_release:proto.steam.CPhysicalGoods_DeRegisterSteamController_Request.serial_number)
  clear_has_serial_number();
  return serial_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CPhysicalGoods_DeRegisterSteamController_Request::set_allocated_serial_number(::std::string* serial_number) {
  if (serial_number != NULL) {
    set_has_serial_number();
  } else {
    clear_has_serial_number();
  }
  serial_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serial_number);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CPhysicalGoods_DeRegisterSteamController_Request.serial_number)
}

// optional string controller_code = 2;
inline bool CPhysicalGoods_DeRegisterSteamController_Request::has_controller_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CPhysicalGoods_DeRegisterSteamController_Request::set_has_controller_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CPhysicalGoods_DeRegisterSteamController_Request::clear_has_controller_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CPhysicalGoods_DeRegisterSteamController_Request::clear_controller_code() {
  controller_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_controller_code();
}
inline const ::std::string& CPhysicalGoods_DeRegisterSteamController_Request::controller_code() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPhysicalGoods_DeRegisterSteamController_Request.controller_code)
  return controller_code_.GetNoArena();
}
inline void CPhysicalGoods_DeRegisterSteamController_Request::set_controller_code(const ::std::string& value) {
  set_has_controller_code();
  controller_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CPhysicalGoods_DeRegisterSteamController_Request.controller_code)
}
#if LANG_CXX11
inline void CPhysicalGoods_DeRegisterSteamController_Request::set_controller_code(::std::string&& value) {
  set_has_controller_code();
  controller_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CPhysicalGoods_DeRegisterSteamController_Request.controller_code)
}
#endif
inline void CPhysicalGoods_DeRegisterSteamController_Request::set_controller_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_controller_code();
  controller_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CPhysicalGoods_DeRegisterSteamController_Request.controller_code)
}
inline void CPhysicalGoods_DeRegisterSteamController_Request::set_controller_code(const char* value, size_t size) {
  set_has_controller_code();
  controller_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CPhysicalGoods_DeRegisterSteamController_Request.controller_code)
}
inline ::std::string* CPhysicalGoods_DeRegisterSteamController_Request::mutable_controller_code() {
  set_has_controller_code();
  // @@protoc_insertion_point(field_mutable:proto.steam.CPhysicalGoods_DeRegisterSteamController_Request.controller_code)
  return controller_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CPhysicalGoods_DeRegisterSteamController_Request::release_controller_code() {
  // @@protoc_insertion_point(field_release:proto.steam.CPhysicalGoods_DeRegisterSteamController_Request.controller_code)
  clear_has_controller_code();
  return controller_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CPhysicalGoods_DeRegisterSteamController_Request::set_allocated_controller_code(::std::string* controller_code) {
  if (controller_code != NULL) {
    set_has_controller_code();
  } else {
    clear_has_controller_code();
  }
  controller_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), controller_code);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CPhysicalGoods_DeRegisterSteamController_Request.controller_code)
}

// optional uint32 accountid = 3;
inline bool CPhysicalGoods_DeRegisterSteamController_Request::has_accountid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CPhysicalGoods_DeRegisterSteamController_Request::set_has_accountid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CPhysicalGoods_DeRegisterSteamController_Request::clear_has_accountid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CPhysicalGoods_DeRegisterSteamController_Request::clear_accountid() {
  accountid_ = 0u;
  clear_has_accountid();
}
inline ::google::protobuf::uint32 CPhysicalGoods_DeRegisterSteamController_Request::accountid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPhysicalGoods_DeRegisterSteamController_Request.accountid)
  return accountid_;
}
inline void CPhysicalGoods_DeRegisterSteamController_Request::set_accountid(::google::protobuf::uint32 value) {
  set_has_accountid();
  accountid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPhysicalGoods_DeRegisterSteamController_Request.accountid)
}

// -------------------------------------------------------------------

// CPhysicalGoods_DeRegisterSteamController_Response

// -------------------------------------------------------------------

// CPhysicalGoods_SetPersonalizationFile_Request

// optional string serial_number = 1;
inline bool CPhysicalGoods_SetPersonalizationFile_Request::has_serial_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CPhysicalGoods_SetPersonalizationFile_Request::set_has_serial_number() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CPhysicalGoods_SetPersonalizationFile_Request::clear_has_serial_number() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CPhysicalGoods_SetPersonalizationFile_Request::clear_serial_number() {
  serial_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_serial_number();
}
inline const ::std::string& CPhysicalGoods_SetPersonalizationFile_Request::serial_number() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPhysicalGoods_SetPersonalizationFile_Request.serial_number)
  return serial_number_.GetNoArena();
}
inline void CPhysicalGoods_SetPersonalizationFile_Request::set_serial_number(const ::std::string& value) {
  set_has_serial_number();
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CPhysicalGoods_SetPersonalizationFile_Request.serial_number)
}
#if LANG_CXX11
inline void CPhysicalGoods_SetPersonalizationFile_Request::set_serial_number(::std::string&& value) {
  set_has_serial_number();
  serial_number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CPhysicalGoods_SetPersonalizationFile_Request.serial_number)
}
#endif
inline void CPhysicalGoods_SetPersonalizationFile_Request::set_serial_number(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_serial_number();
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CPhysicalGoods_SetPersonalizationFile_Request.serial_number)
}
inline void CPhysicalGoods_SetPersonalizationFile_Request::set_serial_number(const char* value, size_t size) {
  set_has_serial_number();
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CPhysicalGoods_SetPersonalizationFile_Request.serial_number)
}
inline ::std::string* CPhysicalGoods_SetPersonalizationFile_Request::mutable_serial_number() {
  set_has_serial_number();
  // @@protoc_insertion_point(field_mutable:proto.steam.CPhysicalGoods_SetPersonalizationFile_Request.serial_number)
  return serial_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CPhysicalGoods_SetPersonalizationFile_Request::release_serial_number() {
  // @@protoc_insertion_point(field_release:proto.steam.CPhysicalGoods_SetPersonalizationFile_Request.serial_number)
  clear_has_serial_number();
  return serial_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CPhysicalGoods_SetPersonalizationFile_Request::set_allocated_serial_number(::std::string* serial_number) {
  if (serial_number != NULL) {
    set_has_serial_number();
  } else {
    clear_has_serial_number();
  }
  serial_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serial_number);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CPhysicalGoods_SetPersonalizationFile_Request.serial_number)
}

// optional uint64 publishedfileid = 2;
inline bool CPhysicalGoods_SetPersonalizationFile_Request::has_publishedfileid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CPhysicalGoods_SetPersonalizationFile_Request::set_has_publishedfileid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CPhysicalGoods_SetPersonalizationFile_Request::clear_has_publishedfileid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CPhysicalGoods_SetPersonalizationFile_Request::clear_publishedfileid() {
  publishedfileid_ = GOOGLE_ULONGLONG(0);
  clear_has_publishedfileid();
}
inline ::google::protobuf::uint64 CPhysicalGoods_SetPersonalizationFile_Request::publishedfileid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPhysicalGoods_SetPersonalizationFile_Request.publishedfileid)
  return publishedfileid_;
}
inline void CPhysicalGoods_SetPersonalizationFile_Request::set_publishedfileid(::google::protobuf::uint64 value) {
  set_has_publishedfileid();
  publishedfileid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPhysicalGoods_SetPersonalizationFile_Request.publishedfileid)
}

// optional uint32 accountid = 3;
inline bool CPhysicalGoods_SetPersonalizationFile_Request::has_accountid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CPhysicalGoods_SetPersonalizationFile_Request::set_has_accountid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CPhysicalGoods_SetPersonalizationFile_Request::clear_has_accountid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CPhysicalGoods_SetPersonalizationFile_Request::clear_accountid() {
  accountid_ = 0u;
  clear_has_accountid();
}
inline ::google::protobuf::uint32 CPhysicalGoods_SetPersonalizationFile_Request::accountid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPhysicalGoods_SetPersonalizationFile_Request.accountid)
  return accountid_;
}
inline void CPhysicalGoods_SetPersonalizationFile_Request::set_accountid(::google::protobuf::uint32 value) {
  set_has_accountid();
  accountid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPhysicalGoods_SetPersonalizationFile_Request.accountid)
}

// -------------------------------------------------------------------

// CPhysicalGoods_SetPersonalizationFile_Response

// -------------------------------------------------------------------

// CPhysicalGoods_GetPersonalizationFile_Request

// optional string serial_number = 1;
inline bool CPhysicalGoods_GetPersonalizationFile_Request::has_serial_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CPhysicalGoods_GetPersonalizationFile_Request::set_has_serial_number() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CPhysicalGoods_GetPersonalizationFile_Request::clear_has_serial_number() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CPhysicalGoods_GetPersonalizationFile_Request::clear_serial_number() {
  serial_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_serial_number();
}
inline const ::std::string& CPhysicalGoods_GetPersonalizationFile_Request::serial_number() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPhysicalGoods_GetPersonalizationFile_Request.serial_number)
  return serial_number_.GetNoArena();
}
inline void CPhysicalGoods_GetPersonalizationFile_Request::set_serial_number(const ::std::string& value) {
  set_has_serial_number();
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CPhysicalGoods_GetPersonalizationFile_Request.serial_number)
}
#if LANG_CXX11
inline void CPhysicalGoods_GetPersonalizationFile_Request::set_serial_number(::std::string&& value) {
  set_has_serial_number();
  serial_number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CPhysicalGoods_GetPersonalizationFile_Request.serial_number)
}
#endif
inline void CPhysicalGoods_GetPersonalizationFile_Request::set_serial_number(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_serial_number();
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CPhysicalGoods_GetPersonalizationFile_Request.serial_number)
}
inline void CPhysicalGoods_GetPersonalizationFile_Request::set_serial_number(const char* value, size_t size) {
  set_has_serial_number();
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CPhysicalGoods_GetPersonalizationFile_Request.serial_number)
}
inline ::std::string* CPhysicalGoods_GetPersonalizationFile_Request::mutable_serial_number() {
  set_has_serial_number();
  // @@protoc_insertion_point(field_mutable:proto.steam.CPhysicalGoods_GetPersonalizationFile_Request.serial_number)
  return serial_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CPhysicalGoods_GetPersonalizationFile_Request::release_serial_number() {
  // @@protoc_insertion_point(field_release:proto.steam.CPhysicalGoods_GetPersonalizationFile_Request.serial_number)
  clear_has_serial_number();
  return serial_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CPhysicalGoods_GetPersonalizationFile_Request::set_allocated_serial_number(::std::string* serial_number) {
  if (serial_number != NULL) {
    set_has_serial_number();
  } else {
    clear_has_serial_number();
  }
  serial_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serial_number);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CPhysicalGoods_GetPersonalizationFile_Request.serial_number)
}

// optional uint32 accountid = 2;
inline bool CPhysicalGoods_GetPersonalizationFile_Request::has_accountid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CPhysicalGoods_GetPersonalizationFile_Request::set_has_accountid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CPhysicalGoods_GetPersonalizationFile_Request::clear_has_accountid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CPhysicalGoods_GetPersonalizationFile_Request::clear_accountid() {
  accountid_ = 0u;
  clear_has_accountid();
}
inline ::google::protobuf::uint32 CPhysicalGoods_GetPersonalizationFile_Request::accountid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPhysicalGoods_GetPersonalizationFile_Request.accountid)
  return accountid_;
}
inline void CPhysicalGoods_GetPersonalizationFile_Request::set_accountid(::google::protobuf::uint32 value) {
  set_has_accountid();
  accountid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPhysicalGoods_GetPersonalizationFile_Request.accountid)
}

// -------------------------------------------------------------------

// CPhysicalGoods_GetPersonalizationFile_Response

// optional uint64 publishedfileid = 1;
inline bool CPhysicalGoods_GetPersonalizationFile_Response::has_publishedfileid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CPhysicalGoods_GetPersonalizationFile_Response::set_has_publishedfileid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CPhysicalGoods_GetPersonalizationFile_Response::clear_has_publishedfileid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CPhysicalGoods_GetPersonalizationFile_Response::clear_publishedfileid() {
  publishedfileid_ = GOOGLE_ULONGLONG(0);
  clear_has_publishedfileid();
}
inline ::google::protobuf::uint64 CPhysicalGoods_GetPersonalizationFile_Response::publishedfileid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPhysicalGoods_GetPersonalizationFile_Response.publishedfileid)
  return publishedfileid_;
}
inline void CPhysicalGoods_GetPersonalizationFile_Response::set_publishedfileid(::google::protobuf::uint64 value) {
  set_has_publishedfileid();
  publishedfileid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPhysicalGoods_GetPersonalizationFile_Response.publishedfileid)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace steam
}  // namespace proto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_steammessages_5fphysicalgoods_2esteamclient_2eproto__INCLUDED
