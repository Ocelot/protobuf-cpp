// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_deviceauth.steamclient.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "steammessages_deviceauth.steamclient.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace steam {
class CDeviceAuth_GetOwnAuthorizedDevices_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDeviceAuth_GetOwnAuthorizedDevices_Request> {
} _CDeviceAuth_GetOwnAuthorizedDevices_Request_default_instance_;
class CDeviceAuth_GetOwnAuthorizedDevices_Response_DeviceDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDeviceAuth_GetOwnAuthorizedDevices_Response_Device> {
} _CDeviceAuth_GetOwnAuthorizedDevices_Response_Device_default_instance_;
class CDeviceAuth_GetOwnAuthorizedDevices_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDeviceAuth_GetOwnAuthorizedDevices_Response> {
} _CDeviceAuth_GetOwnAuthorizedDevices_Response_default_instance_;
class CDeviceAuth_AcceptAuthorizationRequest_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDeviceAuth_AcceptAuthorizationRequest_Request> {
} _CDeviceAuth_AcceptAuthorizationRequest_Request_default_instance_;
class CDeviceAuth_AcceptAuthorizationRequest_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDeviceAuth_AcceptAuthorizationRequest_Response> {
} _CDeviceAuth_AcceptAuthorizationRequest_Response_default_instance_;
class CDeviceAuth_AuthorizeRemoteDevice_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDeviceAuth_AuthorizeRemoteDevice_Request> {
} _CDeviceAuth_AuthorizeRemoteDevice_Request_default_instance_;
class CDeviceAuth_AuthorizeRemoteDevice_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDeviceAuth_AuthorizeRemoteDevice_Response> {
} _CDeviceAuth_AuthorizeRemoteDevice_Response_default_instance_;
class CDeviceAuth_DeauthorizeRemoteDevice_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDeviceAuth_DeauthorizeRemoteDevice_Request> {
} _CDeviceAuth_DeauthorizeRemoteDevice_Request_default_instance_;
class CDeviceAuth_DeauthorizeRemoteDevice_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDeviceAuth_DeauthorizeRemoteDevice_Response> {
} _CDeviceAuth_DeauthorizeRemoteDevice_Response_default_instance_;
class CDeviceAuth_GetUsedAuthorizedDevices_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDeviceAuth_GetUsedAuthorizedDevices_Request> {
} _CDeviceAuth_GetUsedAuthorizedDevices_Request_default_instance_;
class CDeviceAuth_GetUsedAuthorizedDevices_Response_DeviceDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDeviceAuth_GetUsedAuthorizedDevices_Response_Device> {
} _CDeviceAuth_GetUsedAuthorizedDevices_Response_Device_default_instance_;
class CDeviceAuth_GetUsedAuthorizedDevices_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDeviceAuth_GetUsedAuthorizedDevices_Response> {
} _CDeviceAuth_GetUsedAuthorizedDevices_Response_default_instance_;
class CDeviceAuth_GetAuthorizedBorrowers_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDeviceAuth_GetAuthorizedBorrowers_Request> {
} _CDeviceAuth_GetAuthorizedBorrowers_Request_default_instance_;
class CDeviceAuth_GetAuthorizedBorrowers_Response_BorrowerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower> {
} _CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower_default_instance_;
class CDeviceAuth_GetAuthorizedBorrowers_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDeviceAuth_GetAuthorizedBorrowers_Response> {
} _CDeviceAuth_GetAuthorizedBorrowers_Response_default_instance_;
class CDeviceAuth_AddAuthorizedBorrowers_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDeviceAuth_AddAuthorizedBorrowers_Request> {
} _CDeviceAuth_AddAuthorizedBorrowers_Request_default_instance_;
class CDeviceAuth_AddAuthorizedBorrowers_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDeviceAuth_AddAuthorizedBorrowers_Response> {
} _CDeviceAuth_AddAuthorizedBorrowers_Response_default_instance_;
class CDeviceAuth_RemoveAuthorizedBorrowers_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDeviceAuth_RemoveAuthorizedBorrowers_Request> {
} _CDeviceAuth_RemoveAuthorizedBorrowers_Request_default_instance_;
class CDeviceAuth_RemoveAuthorizedBorrowers_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDeviceAuth_RemoveAuthorizedBorrowers_Response> {
} _CDeviceAuth_RemoveAuthorizedBorrowers_Response_default_instance_;
class CDeviceAuth_GetAuthorizedAsBorrower_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDeviceAuth_GetAuthorizedAsBorrower_Request> {
} _CDeviceAuth_GetAuthorizedAsBorrower_Request_default_instance_;
class CDeviceAuth_GetAuthorizedAsBorrower_Response_LenderDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender> {
} _CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender_default_instance_;
class CDeviceAuth_GetAuthorizedAsBorrower_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDeviceAuth_GetAuthorizedAsBorrower_Response> {
} _CDeviceAuth_GetAuthorizedAsBorrower_Response_default_instance_;
class CDeviceAuth_GetExcludedGamesInLibrary_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDeviceAuth_GetExcludedGamesInLibrary_Request> {
} _CDeviceAuth_GetExcludedGamesInLibrary_Request_default_instance_;
class CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGameDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame> {
} _CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame_default_instance_;
class CDeviceAuth_GetExcludedGamesInLibrary_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDeviceAuth_GetExcludedGamesInLibrary_Response> {
} _CDeviceAuth_GetExcludedGamesInLibrary_Response_default_instance_;

namespace protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[25];
const ::google::protobuf::ServiceDescriptor* file_level_service_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDeviceAuth_GetOwnAuthorizedDevices_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDeviceAuth_GetOwnAuthorizedDevices_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDeviceAuth_GetOwnAuthorizedDevices_Request, steamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDeviceAuth_GetOwnAuthorizedDevices_Request, include_canceled_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDeviceAuth_GetOwnAuthorizedDevices_Response_Device, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDeviceAuth_GetOwnAuthorizedDevices_Response_Device, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDeviceAuth_GetOwnAuthorizedDevices_Response_Device, auth_device_token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDeviceAuth_GetOwnAuthorizedDevices_Response_Device, device_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDeviceAuth_GetOwnAuthorizedDevices_Response_Device, is_pending_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDeviceAuth_GetOwnAuthorizedDevices_Response_Device, is_canceled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDeviceAuth_GetOwnAuthorizedDevices_Response_Device, last_time_used_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDeviceAuth_GetOwnAuthorizedDevices_Response_Device, last_borrower_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDeviceAuth_GetOwnAuthorizedDevices_Response_Device, last_app_played_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDeviceAuth_GetOwnAuthorizedDevices_Response_Device, is_limited_),
  1,
  0,
  3,
  4,
  2,
  6,
  7,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDeviceAuth_GetOwnAuthorizedDevices_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDeviceAuth_GetOwnAuthorizedDevices_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDeviceAuth_GetOwnAuthorizedDevices_Response, devices_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDeviceAuth_AcceptAuthorizationRequest_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDeviceAuth_AcceptAuthorizationRequest_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDeviceAuth_AcceptAuthorizationRequest_Request, steamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDeviceAuth_AcceptAuthorizationRequest_Request, auth_device_token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDeviceAuth_AcceptAuthorizationRequest_Request, auth_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDeviceAuth_AcceptAuthorizationRequest_Request, from_steamid_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDeviceAuth_AcceptAuthorizationRequest_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDeviceAuth_AcceptAuthorizationRequest_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDeviceAuth_AuthorizeRemoteDevice_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDeviceAuth_AuthorizeRemoteDevice_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDeviceAuth_AuthorizeRemoteDevice_Request, steamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDeviceAuth_AuthorizeRemoteDevice_Request, auth_device_token_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDeviceAuth_AuthorizeRemoteDevice_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDeviceAuth_AuthorizeRemoteDevice_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDeviceAuth_DeauthorizeRemoteDevice_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDeviceAuth_DeauthorizeRemoteDevice_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDeviceAuth_DeauthorizeRemoteDevice_Request, steamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDeviceAuth_DeauthorizeRemoteDevice_Request, auth_device_token_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDeviceAuth_DeauthorizeRemoteDevice_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDeviceAuth_DeauthorizeRemoteDevice_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDeviceAuth_GetUsedAuthorizedDevices_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDeviceAuth_GetUsedAuthorizedDevices_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDeviceAuth_GetUsedAuthorizedDevices_Request, steamid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDeviceAuth_GetUsedAuthorizedDevices_Response_Device, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDeviceAuth_GetUsedAuthorizedDevices_Response_Device, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDeviceAuth_GetUsedAuthorizedDevices_Response_Device, auth_device_token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDeviceAuth_GetUsedAuthorizedDevices_Response_Device, device_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDeviceAuth_GetUsedAuthorizedDevices_Response_Device, owner_steamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDeviceAuth_GetUsedAuthorizedDevices_Response_Device, last_time_used_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDeviceAuth_GetUsedAuthorizedDevices_Response_Device, last_app_played_),
  1,
  0,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDeviceAuth_GetUsedAuthorizedDevices_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDeviceAuth_GetUsedAuthorizedDevices_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDeviceAuth_GetUsedAuthorizedDevices_Response, devices_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDeviceAuth_GetAuthorizedBorrowers_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDeviceAuth_GetAuthorizedBorrowers_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDeviceAuth_GetAuthorizedBorrowers_Request, steamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDeviceAuth_GetAuthorizedBorrowers_Request, include_canceled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDeviceAuth_GetAuthorizedBorrowers_Request, include_pending_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower, steamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower, is_pending_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower, is_canceled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower, time_created_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDeviceAuth_GetAuthorizedBorrowers_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDeviceAuth_GetAuthorizedBorrowers_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDeviceAuth_GetAuthorizedBorrowers_Response, borrowers_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDeviceAuth_AddAuthorizedBorrowers_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDeviceAuth_AddAuthorizedBorrowers_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDeviceAuth_AddAuthorizedBorrowers_Request, steamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDeviceAuth_AddAuthorizedBorrowers_Request, steamid_borrower_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDeviceAuth_AddAuthorizedBorrowers_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDeviceAuth_AddAuthorizedBorrowers_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDeviceAuth_AddAuthorizedBorrowers_Response, seconds_to_wait_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDeviceAuth_RemoveAuthorizedBorrowers_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDeviceAuth_RemoveAuthorizedBorrowers_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDeviceAuth_RemoveAuthorizedBorrowers_Request, steamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDeviceAuth_RemoveAuthorizedBorrowers_Request, steamid_borrower_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDeviceAuth_RemoveAuthorizedBorrowers_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDeviceAuth_RemoveAuthorizedBorrowers_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDeviceAuth_GetAuthorizedAsBorrower_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDeviceAuth_GetAuthorizedAsBorrower_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDeviceAuth_GetAuthorizedAsBorrower_Request, steamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDeviceAuth_GetAuthorizedAsBorrower_Request, include_canceled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDeviceAuth_GetAuthorizedAsBorrower_Request, include_pending_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender, steamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender, time_created_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender, is_pending_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender, is_canceled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender, is_used_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDeviceAuth_GetAuthorizedAsBorrower_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDeviceAuth_GetAuthorizedAsBorrower_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDeviceAuth_GetAuthorizedAsBorrower_Response, lenders_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDeviceAuth_GetExcludedGamesInLibrary_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDeviceAuth_GetExcludedGamesInLibrary_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDeviceAuth_GetExcludedGamesInLibrary_Request, steamid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame, appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame, game_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame, vac_banned_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame, package_excluded_),
  1,
  0,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDeviceAuth_GetExcludedGamesInLibrary_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDeviceAuth_GetExcludedGamesInLibrary_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDeviceAuth_GetExcludedGamesInLibrary_Response, excluded_games_),
  ~0u,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 7, sizeof(CDeviceAuth_GetOwnAuthorizedDevices_Request)},
  { 9, 22, sizeof(CDeviceAuth_GetOwnAuthorizedDevices_Response_Device)},
  { 30, 36, sizeof(CDeviceAuth_GetOwnAuthorizedDevices_Response)},
  { 37, 46, sizeof(CDeviceAuth_AcceptAuthorizationRequest_Request)},
  { 50, 55, sizeof(CDeviceAuth_AcceptAuthorizationRequest_Response)},
  { 55, 62, sizeof(CDeviceAuth_AuthorizeRemoteDevice_Request)},
  { 64, 69, sizeof(CDeviceAuth_AuthorizeRemoteDevice_Response)},
  { 69, 76, sizeof(CDeviceAuth_DeauthorizeRemoteDevice_Request)},
  { 78, 83, sizeof(CDeviceAuth_DeauthorizeRemoteDevice_Response)},
  { 83, 89, sizeof(CDeviceAuth_GetUsedAuthorizedDevices_Request)},
  { 90, 100, sizeof(CDeviceAuth_GetUsedAuthorizedDevices_Response_Device)},
  { 105, 111, sizeof(CDeviceAuth_GetUsedAuthorizedDevices_Response)},
  { 112, 120, sizeof(CDeviceAuth_GetAuthorizedBorrowers_Request)},
  { 123, 132, sizeof(CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower)},
  { 136, 142, sizeof(CDeviceAuth_GetAuthorizedBorrowers_Response)},
  { 143, 150, sizeof(CDeviceAuth_AddAuthorizedBorrowers_Request)},
  { 152, 158, sizeof(CDeviceAuth_AddAuthorizedBorrowers_Response)},
  { 159, 166, sizeof(CDeviceAuth_RemoveAuthorizedBorrowers_Request)},
  { 168, 173, sizeof(CDeviceAuth_RemoveAuthorizedBorrowers_Response)},
  { 173, 181, sizeof(CDeviceAuth_GetAuthorizedAsBorrower_Request)},
  { 184, 194, sizeof(CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender)},
  { 199, 205, sizeof(CDeviceAuth_GetAuthorizedAsBorrower_Response)},
  { 206, 212, sizeof(CDeviceAuth_GetExcludedGamesInLibrary_Request)},
  { 213, 222, sizeof(CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame)},
  { 226, 232, sizeof(CDeviceAuth_GetExcludedGamesInLibrary_Response)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDeviceAuth_GetOwnAuthorizedDevices_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDeviceAuth_GetOwnAuthorizedDevices_Response_Device_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDeviceAuth_GetOwnAuthorizedDevices_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDeviceAuth_AcceptAuthorizationRequest_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDeviceAuth_AcceptAuthorizationRequest_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDeviceAuth_AuthorizeRemoteDevice_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDeviceAuth_AuthorizeRemoteDevice_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDeviceAuth_DeauthorizeRemoteDevice_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDeviceAuth_DeauthorizeRemoteDevice_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDeviceAuth_GetUsedAuthorizedDevices_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDeviceAuth_GetUsedAuthorizedDevices_Response_Device_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDeviceAuth_GetUsedAuthorizedDevices_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDeviceAuth_GetAuthorizedBorrowers_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDeviceAuth_GetAuthorizedBorrowers_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDeviceAuth_AddAuthorizedBorrowers_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDeviceAuth_AddAuthorizedBorrowers_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDeviceAuth_RemoveAuthorizedBorrowers_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDeviceAuth_RemoveAuthorizedBorrowers_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDeviceAuth_GetAuthorizedAsBorrower_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDeviceAuth_GetAuthorizedAsBorrower_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDeviceAuth_GetExcludedGamesInLibrary_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDeviceAuth_GetExcludedGamesInLibrary_Response_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "steammessages_deviceauth.steamclient.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, file_level_service_descriptors);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 25);
}

}  // namespace

void TableStruct::Shutdown() {
  _CDeviceAuth_GetOwnAuthorizedDevices_Request_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _CDeviceAuth_GetOwnAuthorizedDevices_Response_Device_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _CDeviceAuth_GetOwnAuthorizedDevices_Response_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _CDeviceAuth_AcceptAuthorizationRequest_Request_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _CDeviceAuth_AcceptAuthorizationRequest_Response_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _CDeviceAuth_AuthorizeRemoteDevice_Request_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _CDeviceAuth_AuthorizeRemoteDevice_Response_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _CDeviceAuth_DeauthorizeRemoteDevice_Request_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _CDeviceAuth_DeauthorizeRemoteDevice_Response_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _CDeviceAuth_GetUsedAuthorizedDevices_Request_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _CDeviceAuth_GetUsedAuthorizedDevices_Response_Device_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _CDeviceAuth_GetUsedAuthorizedDevices_Response_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _CDeviceAuth_GetAuthorizedBorrowers_Request_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _CDeviceAuth_GetAuthorizedBorrowers_Response_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _CDeviceAuth_AddAuthorizedBorrowers_Request_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _CDeviceAuth_AddAuthorizedBorrowers_Response_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _CDeviceAuth_RemoveAuthorizedBorrowers_Request_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _CDeviceAuth_RemoveAuthorizedBorrowers_Response_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _CDeviceAuth_GetAuthorizedAsBorrower_Request_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender_default_instance_.Shutdown();
  delete file_level_metadata[20].reflection;
  _CDeviceAuth_GetAuthorizedAsBorrower_Response_default_instance_.Shutdown();
  delete file_level_metadata[21].reflection;
  _CDeviceAuth_GetExcludedGamesInLibrary_Request_default_instance_.Shutdown();
  delete file_level_metadata[22].reflection;
  _CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame_default_instance_.Shutdown();
  delete file_level_metadata[23].reflection;
  _CDeviceAuth_GetExcludedGamesInLibrary_Response_default_instance_.Shutdown();
  delete file_level_metadata[24].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::proto::steam::protobuf_steammessages_5funified_5fbase_2esteamclient_2eproto::InitDefaults();
  _CDeviceAuth_GetOwnAuthorizedDevices_Request_default_instance_.DefaultConstruct();
  _CDeviceAuth_GetOwnAuthorizedDevices_Response_Device_default_instance_.DefaultConstruct();
  _CDeviceAuth_GetOwnAuthorizedDevices_Response_default_instance_.DefaultConstruct();
  _CDeviceAuth_AcceptAuthorizationRequest_Request_default_instance_.DefaultConstruct();
  _CDeviceAuth_AcceptAuthorizationRequest_Response_default_instance_.DefaultConstruct();
  _CDeviceAuth_AuthorizeRemoteDevice_Request_default_instance_.DefaultConstruct();
  _CDeviceAuth_AuthorizeRemoteDevice_Response_default_instance_.DefaultConstruct();
  _CDeviceAuth_DeauthorizeRemoteDevice_Request_default_instance_.DefaultConstruct();
  _CDeviceAuth_DeauthorizeRemoteDevice_Response_default_instance_.DefaultConstruct();
  _CDeviceAuth_GetUsedAuthorizedDevices_Request_default_instance_.DefaultConstruct();
  _CDeviceAuth_GetUsedAuthorizedDevices_Response_Device_default_instance_.DefaultConstruct();
  _CDeviceAuth_GetUsedAuthorizedDevices_Response_default_instance_.DefaultConstruct();
  _CDeviceAuth_GetAuthorizedBorrowers_Request_default_instance_.DefaultConstruct();
  _CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower_default_instance_.DefaultConstruct();
  _CDeviceAuth_GetAuthorizedBorrowers_Response_default_instance_.DefaultConstruct();
  _CDeviceAuth_AddAuthorizedBorrowers_Request_default_instance_.DefaultConstruct();
  _CDeviceAuth_AddAuthorizedBorrowers_Response_default_instance_.DefaultConstruct();
  _CDeviceAuth_RemoveAuthorizedBorrowers_Request_default_instance_.DefaultConstruct();
  _CDeviceAuth_RemoveAuthorizedBorrowers_Response_default_instance_.DefaultConstruct();
  _CDeviceAuth_GetAuthorizedAsBorrower_Request_default_instance_.DefaultConstruct();
  _CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender_default_instance_.DefaultConstruct();
  _CDeviceAuth_GetAuthorizedAsBorrower_Response_default_instance_.DefaultConstruct();
  _CDeviceAuth_GetExcludedGamesInLibrary_Request_default_instance_.DefaultConstruct();
  _CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame_default_instance_.DefaultConstruct();
  _CDeviceAuth_GetExcludedGamesInLibrary_Response_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n*steammessages_deviceauth.steamclient.p"
      "roto\022\013proto.steam\032,steammessages_unified"
      "_base.steamclient.proto\"X\n+CDeviceAuth_G"
      "etOwnAuthorizedDevices_Request\022\017\n\007steami"
      "d\030\001 \001(\006\022\030\n\020include_canceled\030\002 \001(\010\"\304\002\n,CD"
      "eviceAuth_GetOwnAuthorizedDevices_Respon"
      "se\022Q\n\007devices\030\001 \003(\0132@.proto.steam.CDevic"
      "eAuth_GetOwnAuthorizedDevices_Response.D"
      "evice\032\300\001\n\006Device\022\031\n\021auth_device_token\030\001 "
      "\001(\006\022\023\n\013device_name\030\002 \001(\t\022\022\n\nis_pending\030\003"
      " \001(\010\022\023\n\013is_canceled\030\004 \001(\010\022\026\n\016last_time_u"
      "sed\030\005 \001(\r\022\030\n\020last_borrower_id\030\006 \001(\006\022\027\n\017l"
      "ast_app_played\030\007 \001(\r\022\022\n\nis_limited\030\010 \001(\010"
      "\"\205\001\n.CDeviceAuth_AcceptAuthorizationRequ"
      "est_Request\022\017\n\007steamid\030\001 \001(\006\022\031\n\021auth_dev"
      "ice_token\030\002 \001(\006\022\021\n\tauth_code\030\003 \001(\006\022\024\n\014fr"
      "om_steamid\030\004 \001(\006\"1\n/CDeviceAuth_AcceptAu"
      "thorizationRequest_Response\"W\n)CDeviceAu"
      "th_AuthorizeRemoteDevice_Request\022\017\n\007stea"
      "mid\030\001 \001(\006\022\031\n\021auth_device_token\030\002 \001(\006\",\n*"
      "CDeviceAuth_AuthorizeRemoteDevice_Respon"
      "se\"Y\n+CDeviceAuth_DeauthorizeRemoteDevic"
      "e_Request\022\017\n\007steamid\030\001 \001(\006\022\031\n\021auth_devic"
      "e_token\030\002 \001(\006\".\n,CDeviceAuth_Deauthorize"
      "RemoteDevice_Response\"\?\n,CDeviceAuth_Get"
      "UsedAuthorizedDevices_Request\022\017\n\007steamid"
      "\030\001 \001(\006\"\206\002\n-CDeviceAuth_GetUsedAuthorized"
      "Devices_Response\022R\n\007devices\030\001 \003(\0132A.prot"
      "o.steam.CDeviceAuth_GetUsedAuthorizedDev"
      "ices_Response.Device\032\200\001\n\006Device\022\031\n\021auth_"
      "device_token\030\001 \001(\006\022\023\n\013device_name\030\002 \001(\t\022"
      "\025\n\rowner_steamid\030\003 \001(\006\022\026\n\016last_time_used"
      "\030\004 \001(\r\022\027\n\017last_app_played\030\005 \001(\r\"p\n*CDevi"
      "ceAuth_GetAuthorizedBorrowers_Request\022\017\n"
      "\007steamid\030\001 \001(\006\022\030\n\020include_canceled\030\002 \001(\010"
      "\022\027\n\017include_pending\030\003 \001(\010\"\337\001\n+CDeviceAut"
      "h_GetAuthorizedBorrowers_Response\022T\n\tbor"
      "rowers\030\001 \003(\0132A.proto.steam.CDeviceAuth_G"
      "etAuthorizedBorrowers_Response.Borrower\032"
      "Z\n\010Borrower\022\017\n\007steamid\030\001 \001(\006\022\022\n\nis_pendi"
      "ng\030\002 \001(\010\022\023\n\013is_canceled\030\003 \001(\010\022\024\n\014time_cr"
      "eated\030\004 \001(\r\"W\n*CDeviceAuth_AddAuthorized"
      "Borrowers_Request\022\017\n\007steamid\030\001 \001(\006\022\030\n\020st"
      "eamid_borrower\030\002 \003(\006\"F\n+CDeviceAuth_AddA"
      "uthorizedBorrowers_Response\022\027\n\017seconds_t"
      "o_wait\030\001 \001(\005\"Z\n-CDeviceAuth_RemoveAuthor"
      "izedBorrowers_Request\022\017\n\007steamid\030\001 \001(\006\022\030"
      "\n\020steamid_borrower\030\002 \003(\006\"0\n.CDeviceAuth_"
      "RemoveAuthorizedBorrowers_Response\"q\n+CD"
      "eviceAuth_GetAuthorizedAsBorrower_Reques"
      "t\022\017\n\007steamid\030\001 \001(\006\022\030\n\020include_canceled\030\002"
      " \001(\010\022\027\n\017include_pending\030\003 \001(\010\"\354\001\n,CDevic"
      "eAuth_GetAuthorizedAsBorrower_Response\022Q"
      "\n\007lenders\030\001 \003(\0132@.proto.steam.CDeviceAut"
      "h_GetAuthorizedAsBorrower_Response.Lende"
      "r\032i\n\006Lender\022\017\n\007steamid\030\001 \001(\006\022\024\n\014time_cre"
      "ated\030\002 \001(\r\022\022\n\nis_pending\030\003 \001(\010\022\023\n\013is_can"
      "celed\030\004 \001(\010\022\017\n\007is_used\030\005 \001(\010\"@\n-CDeviceA"
      "uth_GetExcludedGamesInLibrary_Request\022\017\n"
      "\007steamid\030\001 \001(\006\"\362\001\n.CDeviceAuth_GetExclud"
      "edGamesInLibrary_Response\022`\n\016excluded_ga"
      "mes\030\001 \003(\0132H.proto.steam.CDeviceAuth_GetE"
      "xcludedGamesInLibrary_Response.ExcludedG"
      "ame\032^\n\014ExcludedGame\022\r\n\005appid\030\001 \001(\r\022\021\n\tga"
      "me_name\030\002 \001(\t\022\022\n\nvac_banned\030\003 \001(\010\022\030\n\020pac"
      "kage_excluded\030\004 \001(\0102\225\020\n\nDeviceAuth\022\262\001\n\027G"
      "etOwnAuthorizedDevices\0228.proto.steam.CDe"
      "viceAuth_GetOwnAuthorizedDevices_Request"
      "\0329.proto.steam.CDeviceAuth_GetOwnAuthori"
      "zedDevices_Response\"\"\202\265\030\036Get list of aut"
      "horized devices\022\315\001\n\032AcceptAuthorizationR"
      "equest\022;.proto.steam.CDeviceAuth_AcceptA"
      "uthorizationRequest_Request\032<.proto.stea"
      "m.CDeviceAuth_AcceptAuthorizationRequest"
      "_Response\"4\202\265\0300Accept an authorization r"
      "equest by another users\022\302\001\n\025AuthorizeRem"
      "oteDevice\0226.proto.steam.CDeviceAuth_Auth"
      "orizeRemoteDevice_Request\0327.proto.steam."
      "CDeviceAuth_AuthorizeRemoteDevice_Respon"
      "se\"8\202\265\0304Authorize own remote device that"
      " has pending request\022\263\001\n\027DeauthorizeRemo"
      "teDevice\0228.proto.steam.CDeviceAuth_Deaut"
      "horizeRemoteDevice_Request\0329.proto.steam"
      ".CDeviceAuth_DeauthorizeRemoteDevice_Res"
      "ponse\"#\202\265\030\037Revoke own device authorizati"
      "on\022\323\001\n\030GetUsedAuthorizedDevices\0229.proto."
      "steam.CDeviceAuth_GetUsedAuthorizedDevic"
      "es_Request\032:.proto.steam.CDeviceAuth_Get"
      "UsedAuthorizedDevices_Response\"@\202\265\030<Get "
      "list of authorized devices user played b"
      "orrowed games on\022\312\001\n\026GetAuthorizedBorrow"
      "ers\0227.proto.steam.CDeviceAuth_GetAuthori"
      "zedBorrowers_Request\0328.proto.steam.CDevi"
      "ceAuth_GetAuthorizedBorrowers_Response\"="
      "\202\265\0309Get list of users that can borrow on"
      " an authorized device\022\310\001\n\026AddAuthorizedB"
      "orrowers\0227.proto.steam.CDeviceAuth_AddAu"
      "thorizedBorrowers_Request\0328.proto.steam."
      "CDeviceAuth_AddAuthorizedBorrowers_Respo"
      "nse\";\202\265\0307Add users that can borrow on li"
      "mited authorized devices\022\324\001\n\031RemoveAutho"
      "rizedBorrowers\022:.proto.steam.CDeviceAuth"
      "_RemoveAuthorizedBorrowers_Request\032;.pro"
      "to.steam.CDeviceAuth_RemoveAuthorizedBor"
      "rowers_Response\">\202\265\030:Remove users that c"
      "an borrow on limited authorized devices\022"
      "\321\001\n\027GetAuthorizedAsBorrower\0228.proto.stea"
      "m.CDeviceAuth_GetAuthorizedAsBorrower_Re"
      "quest\0329.proto.steam.CDeviceAuth_GetAutho"
      "rizedAsBorrower_Response\"A\202\265\030=Get list o"
      "f lenders that authorized given account "
      "as borrower\022\307\001\n\031GetExcludedGamesInLibrar"
      "y\022:.proto.steam.CDeviceAuth_GetExcludedG"
      "amesInLibrary_Request\032;.proto.steam.CDev"
      "iceAuth_GetExcludedGamesInLibrary_Respon"
      "se\"1\202\265\030-Get list of excluded games in le"
      "nders library\032$\202\265\030 Library Sharing setti"
      "ngs serviceB\003\200\001\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 4696);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "steammessages_deviceauth.steamclient.proto", &protobuf_RegisterTypes);
  ::proto::steam::protobuf_steammessages_5funified_5fbase_2esteamclient_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDeviceAuth_GetOwnAuthorizedDevices_Request::kSteamidFieldNumber;
const int CDeviceAuth_GetOwnAuthorizedDevices_Request::kIncludeCanceledFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDeviceAuth_GetOwnAuthorizedDevices_Request::CDeviceAuth_GetOwnAuthorizedDevices_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Request)
}
CDeviceAuth_GetOwnAuthorizedDevices_Request::CDeviceAuth_GetOwnAuthorizedDevices_Request(const CDeviceAuth_GetOwnAuthorizedDevices_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    reinterpret_cast<char*>(&include_canceled_) -
    reinterpret_cast<char*>(&steamid_) + sizeof(include_canceled_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Request)
}

void CDeviceAuth_GetOwnAuthorizedDevices_Request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&steamid_, 0, reinterpret_cast<char*>(&include_canceled_) -
    reinterpret_cast<char*>(&steamid_) + sizeof(include_canceled_));
}

CDeviceAuth_GetOwnAuthorizedDevices_Request::~CDeviceAuth_GetOwnAuthorizedDevices_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Request)
  SharedDtor();
}

void CDeviceAuth_GetOwnAuthorizedDevices_Request::SharedDtor() {
}

void CDeviceAuth_GetOwnAuthorizedDevices_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDeviceAuth_GetOwnAuthorizedDevices_Request::descriptor() {
  protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDeviceAuth_GetOwnAuthorizedDevices_Request& CDeviceAuth_GetOwnAuthorizedDevices_Request::default_instance() {
  protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDeviceAuth_GetOwnAuthorizedDevices_Request* CDeviceAuth_GetOwnAuthorizedDevices_Request::New(::google::protobuf::Arena* arena) const {
  CDeviceAuth_GetOwnAuthorizedDevices_Request* n = new CDeviceAuth_GetOwnAuthorizedDevices_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDeviceAuth_GetOwnAuthorizedDevices_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Request)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&steamid_, 0, reinterpret_cast<char*>(&include_canceled_) -
      reinterpret_cast<char*>(&steamid_) + sizeof(include_canceled_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDeviceAuth_GetOwnAuthorizedDevices_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool include_canceled = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_include_canceled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &include_canceled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Request)
  return false;
#undef DO_
}

void CDeviceAuth_GetOwnAuthorizedDevices_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional bool include_canceled = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->include_canceled(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Request)
}

::google::protobuf::uint8* CDeviceAuth_GetOwnAuthorizedDevices_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional bool include_canceled = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->include_canceled(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Request)
  return target;
}

size_t CDeviceAuth_GetOwnAuthorizedDevices_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional fixed64 steamid = 1;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional bool include_canceled = 2;
    if (has_include_canceled()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDeviceAuth_GetOwnAuthorizedDevices_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CDeviceAuth_GetOwnAuthorizedDevices_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDeviceAuth_GetOwnAuthorizedDevices_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Request)
    MergeFrom(*source);
  }
}

void CDeviceAuth_GetOwnAuthorizedDevices_Request::MergeFrom(const CDeviceAuth_GetOwnAuthorizedDevices_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      include_canceled_ = from.include_canceled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDeviceAuth_GetOwnAuthorizedDevices_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDeviceAuth_GetOwnAuthorizedDevices_Request::CopyFrom(const CDeviceAuth_GetOwnAuthorizedDevices_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDeviceAuth_GetOwnAuthorizedDevices_Request::IsInitialized() const {
  return true;
}

void CDeviceAuth_GetOwnAuthorizedDevices_Request::Swap(CDeviceAuth_GetOwnAuthorizedDevices_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDeviceAuth_GetOwnAuthorizedDevices_Request::InternalSwap(CDeviceAuth_GetOwnAuthorizedDevices_Request* other) {
  std::swap(steamid_, other->steamid_);
  std::swap(include_canceled_, other->include_canceled_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDeviceAuth_GetOwnAuthorizedDevices_Request::GetMetadata() const {
  protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDeviceAuth_GetOwnAuthorizedDevices_Request

// optional fixed64 steamid = 1;
bool CDeviceAuth_GetOwnAuthorizedDevices_Request::has_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDeviceAuth_GetOwnAuthorizedDevices_Request::set_has_steamid() {
  _has_bits_[0] |= 0x00000001u;
}
void CDeviceAuth_GetOwnAuthorizedDevices_Request::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDeviceAuth_GetOwnAuthorizedDevices_Request::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
::google::protobuf::uint64 CDeviceAuth_GetOwnAuthorizedDevices_Request::steamid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Request.steamid)
  return steamid_;
}
void CDeviceAuth_GetOwnAuthorizedDevices_Request::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Request.steamid)
}

// optional bool include_canceled = 2;
bool CDeviceAuth_GetOwnAuthorizedDevices_Request::has_include_canceled() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDeviceAuth_GetOwnAuthorizedDevices_Request::set_has_include_canceled() {
  _has_bits_[0] |= 0x00000002u;
}
void CDeviceAuth_GetOwnAuthorizedDevices_Request::clear_has_include_canceled() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDeviceAuth_GetOwnAuthorizedDevices_Request::clear_include_canceled() {
  include_canceled_ = false;
  clear_has_include_canceled();
}
bool CDeviceAuth_GetOwnAuthorizedDevices_Request::include_canceled() const {
  // @@protoc_insertion_point(field_get:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Request.include_canceled)
  return include_canceled_;
}
void CDeviceAuth_GetOwnAuthorizedDevices_Request::set_include_canceled(bool value) {
  set_has_include_canceled();
  include_canceled_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Request.include_canceled)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::kAuthDeviceTokenFieldNumber;
const int CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::kDeviceNameFieldNumber;
const int CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::kIsPendingFieldNumber;
const int CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::kIsCanceledFieldNumber;
const int CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::kLastTimeUsedFieldNumber;
const int CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::kLastBorrowerIdFieldNumber;
const int CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::kLastAppPlayedFieldNumber;
const int CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::kIsLimitedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::CDeviceAuth_GetOwnAuthorizedDevices_Response_Device()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response.Device)
}
CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::CDeviceAuth_GetOwnAuthorizedDevices_Response_Device(const CDeviceAuth_GetOwnAuthorizedDevices_Response_Device& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  device_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_device_name()) {
    device_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_name_);
  }
  ::memcpy(&auth_device_token_, &from.auth_device_token_,
    reinterpret_cast<char*>(&last_app_played_) -
    reinterpret_cast<char*>(&auth_device_token_) + sizeof(last_app_played_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response.Device)
}

void CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::SharedCtor() {
  _cached_size_ = 0;
  device_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&auth_device_token_, 0, reinterpret_cast<char*>(&last_app_played_) -
    reinterpret_cast<char*>(&auth_device_token_) + sizeof(last_app_played_));
}

CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::~CDeviceAuth_GetOwnAuthorizedDevices_Response_Device() {
  // @@protoc_insertion_point(destructor:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response.Device)
  SharedDtor();
}

void CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::SharedDtor() {
  device_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::descriptor() {
  protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDeviceAuth_GetOwnAuthorizedDevices_Response_Device& CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::default_instance() {
  protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDeviceAuth_GetOwnAuthorizedDevices_Response_Device* CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::New(::google::protobuf::Arena* arena) const {
  CDeviceAuth_GetOwnAuthorizedDevices_Response_Device* n = new CDeviceAuth_GetOwnAuthorizedDevices_Response_Device;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response.Device)
  if (has_device_name()) {
    GOOGLE_DCHECK(!device_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*device_name_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 254u) {
    ::memset(&auth_device_token_, 0, reinterpret_cast<char*>(&last_app_played_) -
      reinterpret_cast<char*>(&auth_device_token_) + sizeof(last_app_played_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response.Device)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 auth_device_token = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_auth_device_token();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &auth_device_token_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string device_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->device_name().data(), this->device_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response.Device.device_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_pending = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_is_pending();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_pending_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_canceled = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_is_canceled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_canceled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 last_time_used = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_last_time_used();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_time_used_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 last_borrower_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u)) {
          set_has_last_borrower_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &last_borrower_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 last_app_played = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_last_app_played();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_app_played_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_limited = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_is_limited();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_limited_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response.Device)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response.Device)
  return false;
#undef DO_
}

void CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response.Device)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 auth_device_token = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->auth_device_token(), output);
  }

  // optional string device_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_name().data(), this->device_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response.Device.device_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->device_name(), output);
  }

  // optional bool is_pending = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_pending(), output);
  }

  // optional bool is_canceled = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_canceled(), output);
  }

  // optional uint32 last_time_used = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->last_time_used(), output);
  }

  // optional fixed64 last_borrower_id = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(6, this->last_borrower_id(), output);
  }

  // optional uint32 last_app_played = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->last_app_played(), output);
  }

  // optional bool is_limited = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->is_limited(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response.Device)
}

::google::protobuf::uint8* CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response.Device)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 auth_device_token = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->auth_device_token(), target);
  }

  // optional string device_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_name().data(), this->device_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response.Device.device_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->device_name(), target);
  }

  // optional bool is_pending = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_pending(), target);
  }

  // optional bool is_canceled = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_canceled(), target);
  }

  // optional uint32 last_time_used = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->last_time_used(), target);
  }

  // optional fixed64 last_borrower_id = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(6, this->last_borrower_id(), target);
  }

  // optional uint32 last_app_played = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->last_app_played(), target);
  }

  // optional bool is_limited = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->is_limited(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response.Device)
  return target;
}

size_t CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response.Device)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string device_name = 2;
    if (has_device_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_name());
    }

    // optional fixed64 auth_device_token = 1;
    if (has_auth_device_token()) {
      total_size += 1 + 8;
    }

    // optional uint32 last_time_used = 5;
    if (has_last_time_used()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_time_used());
    }

    // optional bool is_pending = 3;
    if (has_is_pending()) {
      total_size += 1 + 1;
    }

    // optional bool is_canceled = 4;
    if (has_is_canceled()) {
      total_size += 1 + 1;
    }

    // optional bool is_limited = 8;
    if (has_is_limited()) {
      total_size += 1 + 1;
    }

    // optional fixed64 last_borrower_id = 6;
    if (has_last_borrower_id()) {
      total_size += 1 + 8;
    }

    // optional uint32 last_app_played = 7;
    if (has_last_app_played()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_app_played());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response.Device)
  GOOGLE_DCHECK_NE(&from, this);
  const CDeviceAuth_GetOwnAuthorizedDevices_Response_Device* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDeviceAuth_GetOwnAuthorizedDevices_Response_Device>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response.Device)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response.Device)
    MergeFrom(*source);
  }
}

void CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::MergeFrom(const CDeviceAuth_GetOwnAuthorizedDevices_Response_Device& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response.Device)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_device_name();
      device_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      auth_device_token_ = from.auth_device_token_;
    }
    if (cached_has_bits & 0x00000004u) {
      last_time_used_ = from.last_time_used_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_pending_ = from.is_pending_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_canceled_ = from.is_canceled_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_limited_ = from.is_limited_;
    }
    if (cached_has_bits & 0x00000040u) {
      last_borrower_id_ = from.last_borrower_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      last_app_played_ = from.last_app_played_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response.Device)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::CopyFrom(const CDeviceAuth_GetOwnAuthorizedDevices_Response_Device& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response.Device)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::IsInitialized() const {
  return true;
}

void CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::Swap(CDeviceAuth_GetOwnAuthorizedDevices_Response_Device* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::InternalSwap(CDeviceAuth_GetOwnAuthorizedDevices_Response_Device* other) {
  device_name_.Swap(&other->device_name_);
  std::swap(auth_device_token_, other->auth_device_token_);
  std::swap(last_time_used_, other->last_time_used_);
  std::swap(is_pending_, other->is_pending_);
  std::swap(is_canceled_, other->is_canceled_);
  std::swap(is_limited_, other->is_limited_);
  std::swap(last_borrower_id_, other->last_borrower_id_);
  std::swap(last_app_played_, other->last_app_played_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::GetMetadata() const {
  protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDeviceAuth_GetOwnAuthorizedDevices_Response_Device

// optional fixed64 auth_device_token = 1;
bool CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::has_auth_device_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::set_has_auth_device_token() {
  _has_bits_[0] |= 0x00000002u;
}
void CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::clear_has_auth_device_token() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::clear_auth_device_token() {
  auth_device_token_ = GOOGLE_ULONGLONG(0);
  clear_has_auth_device_token();
}
::google::protobuf::uint64 CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::auth_device_token() const {
  // @@protoc_insertion_point(field_get:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response.Device.auth_device_token)
  return auth_device_token_;
}
void CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::set_auth_device_token(::google::protobuf::uint64 value) {
  set_has_auth_device_token();
  auth_device_token_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response.Device.auth_device_token)
}

// optional string device_name = 2;
bool CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::has_device_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::set_has_device_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::clear_has_device_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::clear_device_name() {
  device_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_device_name();
}
const ::std::string& CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::device_name() const {
  // @@protoc_insertion_point(field_get:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response.Device.device_name)
  return device_name_.GetNoArena();
}
void CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::set_device_name(const ::std::string& value) {
  set_has_device_name();
  device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response.Device.device_name)
}
#if LANG_CXX11
void CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::set_device_name(::std::string&& value) {
  set_has_device_name();
  device_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response.Device.device_name)
}
#endif
void CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::set_device_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_device_name();
  device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response.Device.device_name)
}
void CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::set_device_name(const char* value, size_t size) {
  set_has_device_name();
  device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response.Device.device_name)
}
::std::string* CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::mutable_device_name() {
  set_has_device_name();
  // @@protoc_insertion_point(field_mutable:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response.Device.device_name)
  return device_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::release_device_name() {
  // @@protoc_insertion_point(field_release:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response.Device.device_name)
  clear_has_device_name();
  return device_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::set_allocated_device_name(::std::string* device_name) {
  if (device_name != NULL) {
    set_has_device_name();
  } else {
    clear_has_device_name();
  }
  device_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_name);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response.Device.device_name)
}

// optional bool is_pending = 3;
bool CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::has_is_pending() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::set_has_is_pending() {
  _has_bits_[0] |= 0x00000008u;
}
void CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::clear_has_is_pending() {
  _has_bits_[0] &= ~0x00000008u;
}
void CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::clear_is_pending() {
  is_pending_ = false;
  clear_has_is_pending();
}
bool CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::is_pending() const {
  // @@protoc_insertion_point(field_get:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response.Device.is_pending)
  return is_pending_;
}
void CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::set_is_pending(bool value) {
  set_has_is_pending();
  is_pending_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response.Device.is_pending)
}

// optional bool is_canceled = 4;
bool CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::has_is_canceled() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::set_has_is_canceled() {
  _has_bits_[0] |= 0x00000010u;
}
void CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::clear_has_is_canceled() {
  _has_bits_[0] &= ~0x00000010u;
}
void CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::clear_is_canceled() {
  is_canceled_ = false;
  clear_has_is_canceled();
}
bool CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::is_canceled() const {
  // @@protoc_insertion_point(field_get:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response.Device.is_canceled)
  return is_canceled_;
}
void CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::set_is_canceled(bool value) {
  set_has_is_canceled();
  is_canceled_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response.Device.is_canceled)
}

// optional uint32 last_time_used = 5;
bool CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::has_last_time_used() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::set_has_last_time_used() {
  _has_bits_[0] |= 0x00000004u;
}
void CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::clear_has_last_time_used() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::clear_last_time_used() {
  last_time_used_ = 0u;
  clear_has_last_time_used();
}
::google::protobuf::uint32 CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::last_time_used() const {
  // @@protoc_insertion_point(field_get:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response.Device.last_time_used)
  return last_time_used_;
}
void CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::set_last_time_used(::google::protobuf::uint32 value) {
  set_has_last_time_used();
  last_time_used_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response.Device.last_time_used)
}

// optional fixed64 last_borrower_id = 6;
bool CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::has_last_borrower_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::set_has_last_borrower_id() {
  _has_bits_[0] |= 0x00000040u;
}
void CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::clear_has_last_borrower_id() {
  _has_bits_[0] &= ~0x00000040u;
}
void CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::clear_last_borrower_id() {
  last_borrower_id_ = GOOGLE_ULONGLONG(0);
  clear_has_last_borrower_id();
}
::google::protobuf::uint64 CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::last_borrower_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response.Device.last_borrower_id)
  return last_borrower_id_;
}
void CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::set_last_borrower_id(::google::protobuf::uint64 value) {
  set_has_last_borrower_id();
  last_borrower_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response.Device.last_borrower_id)
}

// optional uint32 last_app_played = 7;
bool CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::has_last_app_played() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::set_has_last_app_played() {
  _has_bits_[0] |= 0x00000080u;
}
void CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::clear_has_last_app_played() {
  _has_bits_[0] &= ~0x00000080u;
}
void CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::clear_last_app_played() {
  last_app_played_ = 0u;
  clear_has_last_app_played();
}
::google::protobuf::uint32 CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::last_app_played() const {
  // @@protoc_insertion_point(field_get:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response.Device.last_app_played)
  return last_app_played_;
}
void CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::set_last_app_played(::google::protobuf::uint32 value) {
  set_has_last_app_played();
  last_app_played_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response.Device.last_app_played)
}

// optional bool is_limited = 8;
bool CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::has_is_limited() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::set_has_is_limited() {
  _has_bits_[0] |= 0x00000020u;
}
void CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::clear_has_is_limited() {
  _has_bits_[0] &= ~0x00000020u;
}
void CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::clear_is_limited() {
  is_limited_ = false;
  clear_has_is_limited();
}
bool CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::is_limited() const {
  // @@protoc_insertion_point(field_get:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response.Device.is_limited)
  return is_limited_;
}
void CDeviceAuth_GetOwnAuthorizedDevices_Response_Device::set_is_limited(bool value) {
  set_has_is_limited();
  is_limited_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response.Device.is_limited)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDeviceAuth_GetOwnAuthorizedDevices_Response::kDevicesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDeviceAuth_GetOwnAuthorizedDevices_Response::CDeviceAuth_GetOwnAuthorizedDevices_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response)
}
CDeviceAuth_GetOwnAuthorizedDevices_Response::CDeviceAuth_GetOwnAuthorizedDevices_Response(const CDeviceAuth_GetOwnAuthorizedDevices_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      devices_(from.devices_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response)
}

void CDeviceAuth_GetOwnAuthorizedDevices_Response::SharedCtor() {
  _cached_size_ = 0;
}

CDeviceAuth_GetOwnAuthorizedDevices_Response::~CDeviceAuth_GetOwnAuthorizedDevices_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response)
  SharedDtor();
}

void CDeviceAuth_GetOwnAuthorizedDevices_Response::SharedDtor() {
}

void CDeviceAuth_GetOwnAuthorizedDevices_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDeviceAuth_GetOwnAuthorizedDevices_Response::descriptor() {
  protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDeviceAuth_GetOwnAuthorizedDevices_Response& CDeviceAuth_GetOwnAuthorizedDevices_Response::default_instance() {
  protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDeviceAuth_GetOwnAuthorizedDevices_Response* CDeviceAuth_GetOwnAuthorizedDevices_Response::New(::google::protobuf::Arena* arena) const {
  CDeviceAuth_GetOwnAuthorizedDevices_Response* n = new CDeviceAuth_GetOwnAuthorizedDevices_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDeviceAuth_GetOwnAuthorizedDevices_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response)
  devices_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDeviceAuth_GetOwnAuthorizedDevices_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response.Device devices = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_devices()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response)
  return false;
#undef DO_
}

void CDeviceAuth_GetOwnAuthorizedDevices_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response.Device devices = 1;
  for (unsigned int i = 0, n = this->devices_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->devices(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response)
}

::google::protobuf::uint8* CDeviceAuth_GetOwnAuthorizedDevices_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response.Device devices = 1;
  for (unsigned int i = 0, n = this->devices_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->devices(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response)
  return target;
}

size_t CDeviceAuth_GetOwnAuthorizedDevices_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response.Device devices = 1;
  {
    unsigned int count = this->devices_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->devices(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDeviceAuth_GetOwnAuthorizedDevices_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CDeviceAuth_GetOwnAuthorizedDevices_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDeviceAuth_GetOwnAuthorizedDevices_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response)
    MergeFrom(*source);
  }
}

void CDeviceAuth_GetOwnAuthorizedDevices_Response::MergeFrom(const CDeviceAuth_GetOwnAuthorizedDevices_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  devices_.MergeFrom(from.devices_);
}

void CDeviceAuth_GetOwnAuthorizedDevices_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDeviceAuth_GetOwnAuthorizedDevices_Response::CopyFrom(const CDeviceAuth_GetOwnAuthorizedDevices_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDeviceAuth_GetOwnAuthorizedDevices_Response::IsInitialized() const {
  return true;
}

void CDeviceAuth_GetOwnAuthorizedDevices_Response::Swap(CDeviceAuth_GetOwnAuthorizedDevices_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDeviceAuth_GetOwnAuthorizedDevices_Response::InternalSwap(CDeviceAuth_GetOwnAuthorizedDevices_Response* other) {
  devices_.InternalSwap(&other->devices_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDeviceAuth_GetOwnAuthorizedDevices_Response::GetMetadata() const {
  protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDeviceAuth_GetOwnAuthorizedDevices_Response

// repeated .proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response.Device devices = 1;
int CDeviceAuth_GetOwnAuthorizedDevices_Response::devices_size() const {
  return devices_.size();
}
void CDeviceAuth_GetOwnAuthorizedDevices_Response::clear_devices() {
  devices_.Clear();
}
const ::proto::steam::CDeviceAuth_GetOwnAuthorizedDevices_Response_Device& CDeviceAuth_GetOwnAuthorizedDevices_Response::devices(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response.devices)
  return devices_.Get(index);
}
::proto::steam::CDeviceAuth_GetOwnAuthorizedDevices_Response_Device* CDeviceAuth_GetOwnAuthorizedDevices_Response::mutable_devices(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response.devices)
  return devices_.Mutable(index);
}
::proto::steam::CDeviceAuth_GetOwnAuthorizedDevices_Response_Device* CDeviceAuth_GetOwnAuthorizedDevices_Response::add_devices() {
  // @@protoc_insertion_point(field_add:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response.devices)
  return devices_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::CDeviceAuth_GetOwnAuthorizedDevices_Response_Device >*
CDeviceAuth_GetOwnAuthorizedDevices_Response::mutable_devices() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response.devices)
  return &devices_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::CDeviceAuth_GetOwnAuthorizedDevices_Response_Device >&
CDeviceAuth_GetOwnAuthorizedDevices_Response::devices() const {
  // @@protoc_insertion_point(field_list:proto.steam.CDeviceAuth_GetOwnAuthorizedDevices_Response.devices)
  return devices_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDeviceAuth_AcceptAuthorizationRequest_Request::kSteamidFieldNumber;
const int CDeviceAuth_AcceptAuthorizationRequest_Request::kAuthDeviceTokenFieldNumber;
const int CDeviceAuth_AcceptAuthorizationRequest_Request::kAuthCodeFieldNumber;
const int CDeviceAuth_AcceptAuthorizationRequest_Request::kFromSteamidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDeviceAuth_AcceptAuthorizationRequest_Request::CDeviceAuth_AcceptAuthorizationRequest_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CDeviceAuth_AcceptAuthorizationRequest_Request)
}
CDeviceAuth_AcceptAuthorizationRequest_Request::CDeviceAuth_AcceptAuthorizationRequest_Request(const CDeviceAuth_AcceptAuthorizationRequest_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    reinterpret_cast<char*>(&from_steamid_) -
    reinterpret_cast<char*>(&steamid_) + sizeof(from_steamid_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CDeviceAuth_AcceptAuthorizationRequest_Request)
}

void CDeviceAuth_AcceptAuthorizationRequest_Request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&steamid_, 0, reinterpret_cast<char*>(&from_steamid_) -
    reinterpret_cast<char*>(&steamid_) + sizeof(from_steamid_));
}

CDeviceAuth_AcceptAuthorizationRequest_Request::~CDeviceAuth_AcceptAuthorizationRequest_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CDeviceAuth_AcceptAuthorizationRequest_Request)
  SharedDtor();
}

void CDeviceAuth_AcceptAuthorizationRequest_Request::SharedDtor() {
}

void CDeviceAuth_AcceptAuthorizationRequest_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDeviceAuth_AcceptAuthorizationRequest_Request::descriptor() {
  protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDeviceAuth_AcceptAuthorizationRequest_Request& CDeviceAuth_AcceptAuthorizationRequest_Request::default_instance() {
  protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDeviceAuth_AcceptAuthorizationRequest_Request* CDeviceAuth_AcceptAuthorizationRequest_Request::New(::google::protobuf::Arena* arena) const {
  CDeviceAuth_AcceptAuthorizationRequest_Request* n = new CDeviceAuth_AcceptAuthorizationRequest_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDeviceAuth_AcceptAuthorizationRequest_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CDeviceAuth_AcceptAuthorizationRequest_Request)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&steamid_, 0, reinterpret_cast<char*>(&from_steamid_) -
      reinterpret_cast<char*>(&steamid_) + sizeof(from_steamid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDeviceAuth_AcceptAuthorizationRequest_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CDeviceAuth_AcceptAuthorizationRequest_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 auth_device_token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_auth_device_token();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &auth_device_token_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 auth_code = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_auth_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &auth_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 from_steamid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_from_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &from_steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CDeviceAuth_AcceptAuthorizationRequest_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CDeviceAuth_AcceptAuthorizationRequest_Request)
  return false;
#undef DO_
}

void CDeviceAuth_AcceptAuthorizationRequest_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CDeviceAuth_AcceptAuthorizationRequest_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional fixed64 auth_device_token = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->auth_device_token(), output);
  }

  // optional fixed64 auth_code = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->auth_code(), output);
  }

  // optional fixed64 from_steamid = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->from_steamid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CDeviceAuth_AcceptAuthorizationRequest_Request)
}

::google::protobuf::uint8* CDeviceAuth_AcceptAuthorizationRequest_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CDeviceAuth_AcceptAuthorizationRequest_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional fixed64 auth_device_token = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->auth_device_token(), target);
  }

  // optional fixed64 auth_code = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->auth_code(), target);
  }

  // optional fixed64 from_steamid = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->from_steamid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CDeviceAuth_AcceptAuthorizationRequest_Request)
  return target;
}

size_t CDeviceAuth_AcceptAuthorizationRequest_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CDeviceAuth_AcceptAuthorizationRequest_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional fixed64 steamid = 1;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional fixed64 auth_device_token = 2;
    if (has_auth_device_token()) {
      total_size += 1 + 8;
    }

    // optional fixed64 auth_code = 3;
    if (has_auth_code()) {
      total_size += 1 + 8;
    }

    // optional fixed64 from_steamid = 4;
    if (has_from_steamid()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDeviceAuth_AcceptAuthorizationRequest_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CDeviceAuth_AcceptAuthorizationRequest_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CDeviceAuth_AcceptAuthorizationRequest_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDeviceAuth_AcceptAuthorizationRequest_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CDeviceAuth_AcceptAuthorizationRequest_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CDeviceAuth_AcceptAuthorizationRequest_Request)
    MergeFrom(*source);
  }
}

void CDeviceAuth_AcceptAuthorizationRequest_Request::MergeFrom(const CDeviceAuth_AcceptAuthorizationRequest_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CDeviceAuth_AcceptAuthorizationRequest_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      auth_device_token_ = from.auth_device_token_;
    }
    if (cached_has_bits & 0x00000004u) {
      auth_code_ = from.auth_code_;
    }
    if (cached_has_bits & 0x00000008u) {
      from_steamid_ = from.from_steamid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDeviceAuth_AcceptAuthorizationRequest_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CDeviceAuth_AcceptAuthorizationRequest_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDeviceAuth_AcceptAuthorizationRequest_Request::CopyFrom(const CDeviceAuth_AcceptAuthorizationRequest_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CDeviceAuth_AcceptAuthorizationRequest_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDeviceAuth_AcceptAuthorizationRequest_Request::IsInitialized() const {
  return true;
}

void CDeviceAuth_AcceptAuthorizationRequest_Request::Swap(CDeviceAuth_AcceptAuthorizationRequest_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDeviceAuth_AcceptAuthorizationRequest_Request::InternalSwap(CDeviceAuth_AcceptAuthorizationRequest_Request* other) {
  std::swap(steamid_, other->steamid_);
  std::swap(auth_device_token_, other->auth_device_token_);
  std::swap(auth_code_, other->auth_code_);
  std::swap(from_steamid_, other->from_steamid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDeviceAuth_AcceptAuthorizationRequest_Request::GetMetadata() const {
  protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDeviceAuth_AcceptAuthorizationRequest_Request

// optional fixed64 steamid = 1;
bool CDeviceAuth_AcceptAuthorizationRequest_Request::has_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDeviceAuth_AcceptAuthorizationRequest_Request::set_has_steamid() {
  _has_bits_[0] |= 0x00000001u;
}
void CDeviceAuth_AcceptAuthorizationRequest_Request::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDeviceAuth_AcceptAuthorizationRequest_Request::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
::google::protobuf::uint64 CDeviceAuth_AcceptAuthorizationRequest_Request::steamid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CDeviceAuth_AcceptAuthorizationRequest_Request.steamid)
  return steamid_;
}
void CDeviceAuth_AcceptAuthorizationRequest_Request::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CDeviceAuth_AcceptAuthorizationRequest_Request.steamid)
}

// optional fixed64 auth_device_token = 2;
bool CDeviceAuth_AcceptAuthorizationRequest_Request::has_auth_device_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDeviceAuth_AcceptAuthorizationRequest_Request::set_has_auth_device_token() {
  _has_bits_[0] |= 0x00000002u;
}
void CDeviceAuth_AcceptAuthorizationRequest_Request::clear_has_auth_device_token() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDeviceAuth_AcceptAuthorizationRequest_Request::clear_auth_device_token() {
  auth_device_token_ = GOOGLE_ULONGLONG(0);
  clear_has_auth_device_token();
}
::google::protobuf::uint64 CDeviceAuth_AcceptAuthorizationRequest_Request::auth_device_token() const {
  // @@protoc_insertion_point(field_get:proto.steam.CDeviceAuth_AcceptAuthorizationRequest_Request.auth_device_token)
  return auth_device_token_;
}
void CDeviceAuth_AcceptAuthorizationRequest_Request::set_auth_device_token(::google::protobuf::uint64 value) {
  set_has_auth_device_token();
  auth_device_token_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CDeviceAuth_AcceptAuthorizationRequest_Request.auth_device_token)
}

// optional fixed64 auth_code = 3;
bool CDeviceAuth_AcceptAuthorizationRequest_Request::has_auth_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDeviceAuth_AcceptAuthorizationRequest_Request::set_has_auth_code() {
  _has_bits_[0] |= 0x00000004u;
}
void CDeviceAuth_AcceptAuthorizationRequest_Request::clear_has_auth_code() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDeviceAuth_AcceptAuthorizationRequest_Request::clear_auth_code() {
  auth_code_ = GOOGLE_ULONGLONG(0);
  clear_has_auth_code();
}
::google::protobuf::uint64 CDeviceAuth_AcceptAuthorizationRequest_Request::auth_code() const {
  // @@protoc_insertion_point(field_get:proto.steam.CDeviceAuth_AcceptAuthorizationRequest_Request.auth_code)
  return auth_code_;
}
void CDeviceAuth_AcceptAuthorizationRequest_Request::set_auth_code(::google::protobuf::uint64 value) {
  set_has_auth_code();
  auth_code_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CDeviceAuth_AcceptAuthorizationRequest_Request.auth_code)
}

// optional fixed64 from_steamid = 4;
bool CDeviceAuth_AcceptAuthorizationRequest_Request::has_from_steamid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CDeviceAuth_AcceptAuthorizationRequest_Request::set_has_from_steamid() {
  _has_bits_[0] |= 0x00000008u;
}
void CDeviceAuth_AcceptAuthorizationRequest_Request::clear_has_from_steamid() {
  _has_bits_[0] &= ~0x00000008u;
}
void CDeviceAuth_AcceptAuthorizationRequest_Request::clear_from_steamid() {
  from_steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_from_steamid();
}
::google::protobuf::uint64 CDeviceAuth_AcceptAuthorizationRequest_Request::from_steamid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CDeviceAuth_AcceptAuthorizationRequest_Request.from_steamid)
  return from_steamid_;
}
void CDeviceAuth_AcceptAuthorizationRequest_Request::set_from_steamid(::google::protobuf::uint64 value) {
  set_has_from_steamid();
  from_steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CDeviceAuth_AcceptAuthorizationRequest_Request.from_steamid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDeviceAuth_AcceptAuthorizationRequest_Response::CDeviceAuth_AcceptAuthorizationRequest_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CDeviceAuth_AcceptAuthorizationRequest_Response)
}
CDeviceAuth_AcceptAuthorizationRequest_Response::CDeviceAuth_AcceptAuthorizationRequest_Response(const CDeviceAuth_AcceptAuthorizationRequest_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CDeviceAuth_AcceptAuthorizationRequest_Response)
}

void CDeviceAuth_AcceptAuthorizationRequest_Response::SharedCtor() {
  _cached_size_ = 0;
}

CDeviceAuth_AcceptAuthorizationRequest_Response::~CDeviceAuth_AcceptAuthorizationRequest_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CDeviceAuth_AcceptAuthorizationRequest_Response)
  SharedDtor();
}

void CDeviceAuth_AcceptAuthorizationRequest_Response::SharedDtor() {
}

void CDeviceAuth_AcceptAuthorizationRequest_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDeviceAuth_AcceptAuthorizationRequest_Response::descriptor() {
  protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDeviceAuth_AcceptAuthorizationRequest_Response& CDeviceAuth_AcceptAuthorizationRequest_Response::default_instance() {
  protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDeviceAuth_AcceptAuthorizationRequest_Response* CDeviceAuth_AcceptAuthorizationRequest_Response::New(::google::protobuf::Arena* arena) const {
  CDeviceAuth_AcceptAuthorizationRequest_Response* n = new CDeviceAuth_AcceptAuthorizationRequest_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDeviceAuth_AcceptAuthorizationRequest_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CDeviceAuth_AcceptAuthorizationRequest_Response)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDeviceAuth_AcceptAuthorizationRequest_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CDeviceAuth_AcceptAuthorizationRequest_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CDeviceAuth_AcceptAuthorizationRequest_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CDeviceAuth_AcceptAuthorizationRequest_Response)
  return false;
#undef DO_
}

void CDeviceAuth_AcceptAuthorizationRequest_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CDeviceAuth_AcceptAuthorizationRequest_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CDeviceAuth_AcceptAuthorizationRequest_Response)
}

::google::protobuf::uint8* CDeviceAuth_AcceptAuthorizationRequest_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CDeviceAuth_AcceptAuthorizationRequest_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CDeviceAuth_AcceptAuthorizationRequest_Response)
  return target;
}

size_t CDeviceAuth_AcceptAuthorizationRequest_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CDeviceAuth_AcceptAuthorizationRequest_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDeviceAuth_AcceptAuthorizationRequest_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CDeviceAuth_AcceptAuthorizationRequest_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CDeviceAuth_AcceptAuthorizationRequest_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDeviceAuth_AcceptAuthorizationRequest_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CDeviceAuth_AcceptAuthorizationRequest_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CDeviceAuth_AcceptAuthorizationRequest_Response)
    MergeFrom(*source);
  }
}

void CDeviceAuth_AcceptAuthorizationRequest_Response::MergeFrom(const CDeviceAuth_AcceptAuthorizationRequest_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CDeviceAuth_AcceptAuthorizationRequest_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CDeviceAuth_AcceptAuthorizationRequest_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CDeviceAuth_AcceptAuthorizationRequest_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDeviceAuth_AcceptAuthorizationRequest_Response::CopyFrom(const CDeviceAuth_AcceptAuthorizationRequest_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CDeviceAuth_AcceptAuthorizationRequest_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDeviceAuth_AcceptAuthorizationRequest_Response::IsInitialized() const {
  return true;
}

void CDeviceAuth_AcceptAuthorizationRequest_Response::Swap(CDeviceAuth_AcceptAuthorizationRequest_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDeviceAuth_AcceptAuthorizationRequest_Response::InternalSwap(CDeviceAuth_AcceptAuthorizationRequest_Response* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDeviceAuth_AcceptAuthorizationRequest_Response::GetMetadata() const {
  protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDeviceAuth_AcceptAuthorizationRequest_Response

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDeviceAuth_AuthorizeRemoteDevice_Request::kSteamidFieldNumber;
const int CDeviceAuth_AuthorizeRemoteDevice_Request::kAuthDeviceTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDeviceAuth_AuthorizeRemoteDevice_Request::CDeviceAuth_AuthorizeRemoteDevice_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CDeviceAuth_AuthorizeRemoteDevice_Request)
}
CDeviceAuth_AuthorizeRemoteDevice_Request::CDeviceAuth_AuthorizeRemoteDevice_Request(const CDeviceAuth_AuthorizeRemoteDevice_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    reinterpret_cast<char*>(&auth_device_token_) -
    reinterpret_cast<char*>(&steamid_) + sizeof(auth_device_token_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CDeviceAuth_AuthorizeRemoteDevice_Request)
}

void CDeviceAuth_AuthorizeRemoteDevice_Request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&steamid_, 0, reinterpret_cast<char*>(&auth_device_token_) -
    reinterpret_cast<char*>(&steamid_) + sizeof(auth_device_token_));
}

CDeviceAuth_AuthorizeRemoteDevice_Request::~CDeviceAuth_AuthorizeRemoteDevice_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CDeviceAuth_AuthorizeRemoteDevice_Request)
  SharedDtor();
}

void CDeviceAuth_AuthorizeRemoteDevice_Request::SharedDtor() {
}

void CDeviceAuth_AuthorizeRemoteDevice_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDeviceAuth_AuthorizeRemoteDevice_Request::descriptor() {
  protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDeviceAuth_AuthorizeRemoteDevice_Request& CDeviceAuth_AuthorizeRemoteDevice_Request::default_instance() {
  protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDeviceAuth_AuthorizeRemoteDevice_Request* CDeviceAuth_AuthorizeRemoteDevice_Request::New(::google::protobuf::Arena* arena) const {
  CDeviceAuth_AuthorizeRemoteDevice_Request* n = new CDeviceAuth_AuthorizeRemoteDevice_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDeviceAuth_AuthorizeRemoteDevice_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CDeviceAuth_AuthorizeRemoteDevice_Request)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&steamid_, 0, reinterpret_cast<char*>(&auth_device_token_) -
      reinterpret_cast<char*>(&steamid_) + sizeof(auth_device_token_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDeviceAuth_AuthorizeRemoteDevice_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CDeviceAuth_AuthorizeRemoteDevice_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 auth_device_token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_auth_device_token();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &auth_device_token_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CDeviceAuth_AuthorizeRemoteDevice_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CDeviceAuth_AuthorizeRemoteDevice_Request)
  return false;
#undef DO_
}

void CDeviceAuth_AuthorizeRemoteDevice_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CDeviceAuth_AuthorizeRemoteDevice_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional fixed64 auth_device_token = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->auth_device_token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CDeviceAuth_AuthorizeRemoteDevice_Request)
}

::google::protobuf::uint8* CDeviceAuth_AuthorizeRemoteDevice_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CDeviceAuth_AuthorizeRemoteDevice_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional fixed64 auth_device_token = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->auth_device_token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CDeviceAuth_AuthorizeRemoteDevice_Request)
  return target;
}

size_t CDeviceAuth_AuthorizeRemoteDevice_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CDeviceAuth_AuthorizeRemoteDevice_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional fixed64 steamid = 1;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional fixed64 auth_device_token = 2;
    if (has_auth_device_token()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDeviceAuth_AuthorizeRemoteDevice_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CDeviceAuth_AuthorizeRemoteDevice_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CDeviceAuth_AuthorizeRemoteDevice_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDeviceAuth_AuthorizeRemoteDevice_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CDeviceAuth_AuthorizeRemoteDevice_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CDeviceAuth_AuthorizeRemoteDevice_Request)
    MergeFrom(*source);
  }
}

void CDeviceAuth_AuthorizeRemoteDevice_Request::MergeFrom(const CDeviceAuth_AuthorizeRemoteDevice_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CDeviceAuth_AuthorizeRemoteDevice_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      auth_device_token_ = from.auth_device_token_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDeviceAuth_AuthorizeRemoteDevice_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CDeviceAuth_AuthorizeRemoteDevice_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDeviceAuth_AuthorizeRemoteDevice_Request::CopyFrom(const CDeviceAuth_AuthorizeRemoteDevice_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CDeviceAuth_AuthorizeRemoteDevice_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDeviceAuth_AuthorizeRemoteDevice_Request::IsInitialized() const {
  return true;
}

void CDeviceAuth_AuthorizeRemoteDevice_Request::Swap(CDeviceAuth_AuthorizeRemoteDevice_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDeviceAuth_AuthorizeRemoteDevice_Request::InternalSwap(CDeviceAuth_AuthorizeRemoteDevice_Request* other) {
  std::swap(steamid_, other->steamid_);
  std::swap(auth_device_token_, other->auth_device_token_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDeviceAuth_AuthorizeRemoteDevice_Request::GetMetadata() const {
  protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDeviceAuth_AuthorizeRemoteDevice_Request

// optional fixed64 steamid = 1;
bool CDeviceAuth_AuthorizeRemoteDevice_Request::has_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDeviceAuth_AuthorizeRemoteDevice_Request::set_has_steamid() {
  _has_bits_[0] |= 0x00000001u;
}
void CDeviceAuth_AuthorizeRemoteDevice_Request::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDeviceAuth_AuthorizeRemoteDevice_Request::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
::google::protobuf::uint64 CDeviceAuth_AuthorizeRemoteDevice_Request::steamid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CDeviceAuth_AuthorizeRemoteDevice_Request.steamid)
  return steamid_;
}
void CDeviceAuth_AuthorizeRemoteDevice_Request::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CDeviceAuth_AuthorizeRemoteDevice_Request.steamid)
}

// optional fixed64 auth_device_token = 2;
bool CDeviceAuth_AuthorizeRemoteDevice_Request::has_auth_device_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDeviceAuth_AuthorizeRemoteDevice_Request::set_has_auth_device_token() {
  _has_bits_[0] |= 0x00000002u;
}
void CDeviceAuth_AuthorizeRemoteDevice_Request::clear_has_auth_device_token() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDeviceAuth_AuthorizeRemoteDevice_Request::clear_auth_device_token() {
  auth_device_token_ = GOOGLE_ULONGLONG(0);
  clear_has_auth_device_token();
}
::google::protobuf::uint64 CDeviceAuth_AuthorizeRemoteDevice_Request::auth_device_token() const {
  // @@protoc_insertion_point(field_get:proto.steam.CDeviceAuth_AuthorizeRemoteDevice_Request.auth_device_token)
  return auth_device_token_;
}
void CDeviceAuth_AuthorizeRemoteDevice_Request::set_auth_device_token(::google::protobuf::uint64 value) {
  set_has_auth_device_token();
  auth_device_token_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CDeviceAuth_AuthorizeRemoteDevice_Request.auth_device_token)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDeviceAuth_AuthorizeRemoteDevice_Response::CDeviceAuth_AuthorizeRemoteDevice_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CDeviceAuth_AuthorizeRemoteDevice_Response)
}
CDeviceAuth_AuthorizeRemoteDevice_Response::CDeviceAuth_AuthorizeRemoteDevice_Response(const CDeviceAuth_AuthorizeRemoteDevice_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CDeviceAuth_AuthorizeRemoteDevice_Response)
}

void CDeviceAuth_AuthorizeRemoteDevice_Response::SharedCtor() {
  _cached_size_ = 0;
}

CDeviceAuth_AuthorizeRemoteDevice_Response::~CDeviceAuth_AuthorizeRemoteDevice_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CDeviceAuth_AuthorizeRemoteDevice_Response)
  SharedDtor();
}

void CDeviceAuth_AuthorizeRemoteDevice_Response::SharedDtor() {
}

void CDeviceAuth_AuthorizeRemoteDevice_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDeviceAuth_AuthorizeRemoteDevice_Response::descriptor() {
  protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDeviceAuth_AuthorizeRemoteDevice_Response& CDeviceAuth_AuthorizeRemoteDevice_Response::default_instance() {
  protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDeviceAuth_AuthorizeRemoteDevice_Response* CDeviceAuth_AuthorizeRemoteDevice_Response::New(::google::protobuf::Arena* arena) const {
  CDeviceAuth_AuthorizeRemoteDevice_Response* n = new CDeviceAuth_AuthorizeRemoteDevice_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDeviceAuth_AuthorizeRemoteDevice_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CDeviceAuth_AuthorizeRemoteDevice_Response)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDeviceAuth_AuthorizeRemoteDevice_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CDeviceAuth_AuthorizeRemoteDevice_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CDeviceAuth_AuthorizeRemoteDevice_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CDeviceAuth_AuthorizeRemoteDevice_Response)
  return false;
#undef DO_
}

void CDeviceAuth_AuthorizeRemoteDevice_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CDeviceAuth_AuthorizeRemoteDevice_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CDeviceAuth_AuthorizeRemoteDevice_Response)
}

::google::protobuf::uint8* CDeviceAuth_AuthorizeRemoteDevice_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CDeviceAuth_AuthorizeRemoteDevice_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CDeviceAuth_AuthorizeRemoteDevice_Response)
  return target;
}

size_t CDeviceAuth_AuthorizeRemoteDevice_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CDeviceAuth_AuthorizeRemoteDevice_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDeviceAuth_AuthorizeRemoteDevice_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CDeviceAuth_AuthorizeRemoteDevice_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CDeviceAuth_AuthorizeRemoteDevice_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDeviceAuth_AuthorizeRemoteDevice_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CDeviceAuth_AuthorizeRemoteDevice_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CDeviceAuth_AuthorizeRemoteDevice_Response)
    MergeFrom(*source);
  }
}

void CDeviceAuth_AuthorizeRemoteDevice_Response::MergeFrom(const CDeviceAuth_AuthorizeRemoteDevice_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CDeviceAuth_AuthorizeRemoteDevice_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CDeviceAuth_AuthorizeRemoteDevice_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CDeviceAuth_AuthorizeRemoteDevice_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDeviceAuth_AuthorizeRemoteDevice_Response::CopyFrom(const CDeviceAuth_AuthorizeRemoteDevice_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CDeviceAuth_AuthorizeRemoteDevice_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDeviceAuth_AuthorizeRemoteDevice_Response::IsInitialized() const {
  return true;
}

void CDeviceAuth_AuthorizeRemoteDevice_Response::Swap(CDeviceAuth_AuthorizeRemoteDevice_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDeviceAuth_AuthorizeRemoteDevice_Response::InternalSwap(CDeviceAuth_AuthorizeRemoteDevice_Response* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDeviceAuth_AuthorizeRemoteDevice_Response::GetMetadata() const {
  protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDeviceAuth_AuthorizeRemoteDevice_Response

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDeviceAuth_DeauthorizeRemoteDevice_Request::kSteamidFieldNumber;
const int CDeviceAuth_DeauthorizeRemoteDevice_Request::kAuthDeviceTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDeviceAuth_DeauthorizeRemoteDevice_Request::CDeviceAuth_DeauthorizeRemoteDevice_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CDeviceAuth_DeauthorizeRemoteDevice_Request)
}
CDeviceAuth_DeauthorizeRemoteDevice_Request::CDeviceAuth_DeauthorizeRemoteDevice_Request(const CDeviceAuth_DeauthorizeRemoteDevice_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    reinterpret_cast<char*>(&auth_device_token_) -
    reinterpret_cast<char*>(&steamid_) + sizeof(auth_device_token_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CDeviceAuth_DeauthorizeRemoteDevice_Request)
}

void CDeviceAuth_DeauthorizeRemoteDevice_Request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&steamid_, 0, reinterpret_cast<char*>(&auth_device_token_) -
    reinterpret_cast<char*>(&steamid_) + sizeof(auth_device_token_));
}

CDeviceAuth_DeauthorizeRemoteDevice_Request::~CDeviceAuth_DeauthorizeRemoteDevice_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CDeviceAuth_DeauthorizeRemoteDevice_Request)
  SharedDtor();
}

void CDeviceAuth_DeauthorizeRemoteDevice_Request::SharedDtor() {
}

void CDeviceAuth_DeauthorizeRemoteDevice_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDeviceAuth_DeauthorizeRemoteDevice_Request::descriptor() {
  protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDeviceAuth_DeauthorizeRemoteDevice_Request& CDeviceAuth_DeauthorizeRemoteDevice_Request::default_instance() {
  protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDeviceAuth_DeauthorizeRemoteDevice_Request* CDeviceAuth_DeauthorizeRemoteDevice_Request::New(::google::protobuf::Arena* arena) const {
  CDeviceAuth_DeauthorizeRemoteDevice_Request* n = new CDeviceAuth_DeauthorizeRemoteDevice_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDeviceAuth_DeauthorizeRemoteDevice_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CDeviceAuth_DeauthorizeRemoteDevice_Request)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&steamid_, 0, reinterpret_cast<char*>(&auth_device_token_) -
      reinterpret_cast<char*>(&steamid_) + sizeof(auth_device_token_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDeviceAuth_DeauthorizeRemoteDevice_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CDeviceAuth_DeauthorizeRemoteDevice_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 auth_device_token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_auth_device_token();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &auth_device_token_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CDeviceAuth_DeauthorizeRemoteDevice_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CDeviceAuth_DeauthorizeRemoteDevice_Request)
  return false;
#undef DO_
}

void CDeviceAuth_DeauthorizeRemoteDevice_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CDeviceAuth_DeauthorizeRemoteDevice_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional fixed64 auth_device_token = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->auth_device_token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CDeviceAuth_DeauthorizeRemoteDevice_Request)
}

::google::protobuf::uint8* CDeviceAuth_DeauthorizeRemoteDevice_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CDeviceAuth_DeauthorizeRemoteDevice_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional fixed64 auth_device_token = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->auth_device_token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CDeviceAuth_DeauthorizeRemoteDevice_Request)
  return target;
}

size_t CDeviceAuth_DeauthorizeRemoteDevice_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CDeviceAuth_DeauthorizeRemoteDevice_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional fixed64 steamid = 1;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional fixed64 auth_device_token = 2;
    if (has_auth_device_token()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDeviceAuth_DeauthorizeRemoteDevice_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CDeviceAuth_DeauthorizeRemoteDevice_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CDeviceAuth_DeauthorizeRemoteDevice_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDeviceAuth_DeauthorizeRemoteDevice_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CDeviceAuth_DeauthorizeRemoteDevice_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CDeviceAuth_DeauthorizeRemoteDevice_Request)
    MergeFrom(*source);
  }
}

void CDeviceAuth_DeauthorizeRemoteDevice_Request::MergeFrom(const CDeviceAuth_DeauthorizeRemoteDevice_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CDeviceAuth_DeauthorizeRemoteDevice_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      auth_device_token_ = from.auth_device_token_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDeviceAuth_DeauthorizeRemoteDevice_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CDeviceAuth_DeauthorizeRemoteDevice_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDeviceAuth_DeauthorizeRemoteDevice_Request::CopyFrom(const CDeviceAuth_DeauthorizeRemoteDevice_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CDeviceAuth_DeauthorizeRemoteDevice_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDeviceAuth_DeauthorizeRemoteDevice_Request::IsInitialized() const {
  return true;
}

void CDeviceAuth_DeauthorizeRemoteDevice_Request::Swap(CDeviceAuth_DeauthorizeRemoteDevice_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDeviceAuth_DeauthorizeRemoteDevice_Request::InternalSwap(CDeviceAuth_DeauthorizeRemoteDevice_Request* other) {
  std::swap(steamid_, other->steamid_);
  std::swap(auth_device_token_, other->auth_device_token_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDeviceAuth_DeauthorizeRemoteDevice_Request::GetMetadata() const {
  protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDeviceAuth_DeauthorizeRemoteDevice_Request

// optional fixed64 steamid = 1;
bool CDeviceAuth_DeauthorizeRemoteDevice_Request::has_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDeviceAuth_DeauthorizeRemoteDevice_Request::set_has_steamid() {
  _has_bits_[0] |= 0x00000001u;
}
void CDeviceAuth_DeauthorizeRemoteDevice_Request::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDeviceAuth_DeauthorizeRemoteDevice_Request::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
::google::protobuf::uint64 CDeviceAuth_DeauthorizeRemoteDevice_Request::steamid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CDeviceAuth_DeauthorizeRemoteDevice_Request.steamid)
  return steamid_;
}
void CDeviceAuth_DeauthorizeRemoteDevice_Request::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CDeviceAuth_DeauthorizeRemoteDevice_Request.steamid)
}

// optional fixed64 auth_device_token = 2;
bool CDeviceAuth_DeauthorizeRemoteDevice_Request::has_auth_device_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDeviceAuth_DeauthorizeRemoteDevice_Request::set_has_auth_device_token() {
  _has_bits_[0] |= 0x00000002u;
}
void CDeviceAuth_DeauthorizeRemoteDevice_Request::clear_has_auth_device_token() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDeviceAuth_DeauthorizeRemoteDevice_Request::clear_auth_device_token() {
  auth_device_token_ = GOOGLE_ULONGLONG(0);
  clear_has_auth_device_token();
}
::google::protobuf::uint64 CDeviceAuth_DeauthorizeRemoteDevice_Request::auth_device_token() const {
  // @@protoc_insertion_point(field_get:proto.steam.CDeviceAuth_DeauthorizeRemoteDevice_Request.auth_device_token)
  return auth_device_token_;
}
void CDeviceAuth_DeauthorizeRemoteDevice_Request::set_auth_device_token(::google::protobuf::uint64 value) {
  set_has_auth_device_token();
  auth_device_token_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CDeviceAuth_DeauthorizeRemoteDevice_Request.auth_device_token)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDeviceAuth_DeauthorizeRemoteDevice_Response::CDeviceAuth_DeauthorizeRemoteDevice_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CDeviceAuth_DeauthorizeRemoteDevice_Response)
}
CDeviceAuth_DeauthorizeRemoteDevice_Response::CDeviceAuth_DeauthorizeRemoteDevice_Response(const CDeviceAuth_DeauthorizeRemoteDevice_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CDeviceAuth_DeauthorizeRemoteDevice_Response)
}

void CDeviceAuth_DeauthorizeRemoteDevice_Response::SharedCtor() {
  _cached_size_ = 0;
}

CDeviceAuth_DeauthorizeRemoteDevice_Response::~CDeviceAuth_DeauthorizeRemoteDevice_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CDeviceAuth_DeauthorizeRemoteDevice_Response)
  SharedDtor();
}

void CDeviceAuth_DeauthorizeRemoteDevice_Response::SharedDtor() {
}

void CDeviceAuth_DeauthorizeRemoteDevice_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDeviceAuth_DeauthorizeRemoteDevice_Response::descriptor() {
  protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDeviceAuth_DeauthorizeRemoteDevice_Response& CDeviceAuth_DeauthorizeRemoteDevice_Response::default_instance() {
  protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDeviceAuth_DeauthorizeRemoteDevice_Response* CDeviceAuth_DeauthorizeRemoteDevice_Response::New(::google::protobuf::Arena* arena) const {
  CDeviceAuth_DeauthorizeRemoteDevice_Response* n = new CDeviceAuth_DeauthorizeRemoteDevice_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDeviceAuth_DeauthorizeRemoteDevice_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CDeviceAuth_DeauthorizeRemoteDevice_Response)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDeviceAuth_DeauthorizeRemoteDevice_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CDeviceAuth_DeauthorizeRemoteDevice_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CDeviceAuth_DeauthorizeRemoteDevice_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CDeviceAuth_DeauthorizeRemoteDevice_Response)
  return false;
#undef DO_
}

void CDeviceAuth_DeauthorizeRemoteDevice_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CDeviceAuth_DeauthorizeRemoteDevice_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CDeviceAuth_DeauthorizeRemoteDevice_Response)
}

::google::protobuf::uint8* CDeviceAuth_DeauthorizeRemoteDevice_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CDeviceAuth_DeauthorizeRemoteDevice_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CDeviceAuth_DeauthorizeRemoteDevice_Response)
  return target;
}

size_t CDeviceAuth_DeauthorizeRemoteDevice_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CDeviceAuth_DeauthorizeRemoteDevice_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDeviceAuth_DeauthorizeRemoteDevice_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CDeviceAuth_DeauthorizeRemoteDevice_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CDeviceAuth_DeauthorizeRemoteDevice_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDeviceAuth_DeauthorizeRemoteDevice_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CDeviceAuth_DeauthorizeRemoteDevice_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CDeviceAuth_DeauthorizeRemoteDevice_Response)
    MergeFrom(*source);
  }
}

void CDeviceAuth_DeauthorizeRemoteDevice_Response::MergeFrom(const CDeviceAuth_DeauthorizeRemoteDevice_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CDeviceAuth_DeauthorizeRemoteDevice_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CDeviceAuth_DeauthorizeRemoteDevice_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CDeviceAuth_DeauthorizeRemoteDevice_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDeviceAuth_DeauthorizeRemoteDevice_Response::CopyFrom(const CDeviceAuth_DeauthorizeRemoteDevice_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CDeviceAuth_DeauthorizeRemoteDevice_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDeviceAuth_DeauthorizeRemoteDevice_Response::IsInitialized() const {
  return true;
}

void CDeviceAuth_DeauthorizeRemoteDevice_Response::Swap(CDeviceAuth_DeauthorizeRemoteDevice_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDeviceAuth_DeauthorizeRemoteDevice_Response::InternalSwap(CDeviceAuth_DeauthorizeRemoteDevice_Response* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDeviceAuth_DeauthorizeRemoteDevice_Response::GetMetadata() const {
  protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDeviceAuth_DeauthorizeRemoteDevice_Response

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDeviceAuth_GetUsedAuthorizedDevices_Request::kSteamidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDeviceAuth_GetUsedAuthorizedDevices_Request::CDeviceAuth_GetUsedAuthorizedDevices_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Request)
}
CDeviceAuth_GetUsedAuthorizedDevices_Request::CDeviceAuth_GetUsedAuthorizedDevices_Request(const CDeviceAuth_GetUsedAuthorizedDevices_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  steamid_ = from.steamid_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Request)
}

void CDeviceAuth_GetUsedAuthorizedDevices_Request::SharedCtor() {
  _cached_size_ = 0;
  steamid_ = GOOGLE_ULONGLONG(0);
}

CDeviceAuth_GetUsedAuthorizedDevices_Request::~CDeviceAuth_GetUsedAuthorizedDevices_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Request)
  SharedDtor();
}

void CDeviceAuth_GetUsedAuthorizedDevices_Request::SharedDtor() {
}

void CDeviceAuth_GetUsedAuthorizedDevices_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDeviceAuth_GetUsedAuthorizedDevices_Request::descriptor() {
  protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDeviceAuth_GetUsedAuthorizedDevices_Request& CDeviceAuth_GetUsedAuthorizedDevices_Request::default_instance() {
  protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDeviceAuth_GetUsedAuthorizedDevices_Request* CDeviceAuth_GetUsedAuthorizedDevices_Request::New(::google::protobuf::Arena* arena) const {
  CDeviceAuth_GetUsedAuthorizedDevices_Request* n = new CDeviceAuth_GetUsedAuthorizedDevices_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDeviceAuth_GetUsedAuthorizedDevices_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Request)
  steamid_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDeviceAuth_GetUsedAuthorizedDevices_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Request)
  return false;
#undef DO_
}

void CDeviceAuth_GetUsedAuthorizedDevices_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Request)
}

::google::protobuf::uint8* CDeviceAuth_GetUsedAuthorizedDevices_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Request)
  return target;
}

size_t CDeviceAuth_GetUsedAuthorizedDevices_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional fixed64 steamid = 1;
  if (has_steamid()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDeviceAuth_GetUsedAuthorizedDevices_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CDeviceAuth_GetUsedAuthorizedDevices_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDeviceAuth_GetUsedAuthorizedDevices_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Request)
    MergeFrom(*source);
  }
}

void CDeviceAuth_GetUsedAuthorizedDevices_Request::MergeFrom(const CDeviceAuth_GetUsedAuthorizedDevices_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_steamid()) {
    set_steamid(from.steamid());
  }
}

void CDeviceAuth_GetUsedAuthorizedDevices_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDeviceAuth_GetUsedAuthorizedDevices_Request::CopyFrom(const CDeviceAuth_GetUsedAuthorizedDevices_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDeviceAuth_GetUsedAuthorizedDevices_Request::IsInitialized() const {
  return true;
}

void CDeviceAuth_GetUsedAuthorizedDevices_Request::Swap(CDeviceAuth_GetUsedAuthorizedDevices_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDeviceAuth_GetUsedAuthorizedDevices_Request::InternalSwap(CDeviceAuth_GetUsedAuthorizedDevices_Request* other) {
  std::swap(steamid_, other->steamid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDeviceAuth_GetUsedAuthorizedDevices_Request::GetMetadata() const {
  protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDeviceAuth_GetUsedAuthorizedDevices_Request

// optional fixed64 steamid = 1;
bool CDeviceAuth_GetUsedAuthorizedDevices_Request::has_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDeviceAuth_GetUsedAuthorizedDevices_Request::set_has_steamid() {
  _has_bits_[0] |= 0x00000001u;
}
void CDeviceAuth_GetUsedAuthorizedDevices_Request::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDeviceAuth_GetUsedAuthorizedDevices_Request::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
::google::protobuf::uint64 CDeviceAuth_GetUsedAuthorizedDevices_Request::steamid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Request.steamid)
  return steamid_;
}
void CDeviceAuth_GetUsedAuthorizedDevices_Request::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Request.steamid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::kAuthDeviceTokenFieldNumber;
const int CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::kDeviceNameFieldNumber;
const int CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::kOwnerSteamidFieldNumber;
const int CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::kLastTimeUsedFieldNumber;
const int CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::kLastAppPlayedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::CDeviceAuth_GetUsedAuthorizedDevices_Response_Device()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response.Device)
}
CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::CDeviceAuth_GetUsedAuthorizedDevices_Response_Device(const CDeviceAuth_GetUsedAuthorizedDevices_Response_Device& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  device_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_device_name()) {
    device_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_name_);
  }
  ::memcpy(&auth_device_token_, &from.auth_device_token_,
    reinterpret_cast<char*>(&last_app_played_) -
    reinterpret_cast<char*>(&auth_device_token_) + sizeof(last_app_played_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response.Device)
}

void CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::SharedCtor() {
  _cached_size_ = 0;
  device_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&auth_device_token_, 0, reinterpret_cast<char*>(&last_app_played_) -
    reinterpret_cast<char*>(&auth_device_token_) + sizeof(last_app_played_));
}

CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::~CDeviceAuth_GetUsedAuthorizedDevices_Response_Device() {
  // @@protoc_insertion_point(destructor:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response.Device)
  SharedDtor();
}

void CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::SharedDtor() {
  device_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::descriptor() {
  protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDeviceAuth_GetUsedAuthorizedDevices_Response_Device& CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::default_instance() {
  protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDeviceAuth_GetUsedAuthorizedDevices_Response_Device* CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::New(::google::protobuf::Arena* arena) const {
  CDeviceAuth_GetUsedAuthorizedDevices_Response_Device* n = new CDeviceAuth_GetUsedAuthorizedDevices_Response_Device;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response.Device)
  if (has_device_name()) {
    GOOGLE_DCHECK(!device_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*device_name_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 30u) {
    ::memset(&auth_device_token_, 0, reinterpret_cast<char*>(&last_app_played_) -
      reinterpret_cast<char*>(&auth_device_token_) + sizeof(last_app_played_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response.Device)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 auth_device_token = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_auth_device_token();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &auth_device_token_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string device_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->device_name().data(), this->device_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response.Device.device_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 owner_steamid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_owner_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &owner_steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 last_time_used = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_last_time_used();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_time_used_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 last_app_played = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_last_app_played();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_app_played_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response.Device)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response.Device)
  return false;
#undef DO_
}

void CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response.Device)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 auth_device_token = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->auth_device_token(), output);
  }

  // optional string device_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_name().data(), this->device_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response.Device.device_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->device_name(), output);
  }

  // optional fixed64 owner_steamid = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->owner_steamid(), output);
  }

  // optional uint32 last_time_used = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->last_time_used(), output);
  }

  // optional uint32 last_app_played = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->last_app_played(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response.Device)
}

::google::protobuf::uint8* CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response.Device)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 auth_device_token = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->auth_device_token(), target);
  }

  // optional string device_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_name().data(), this->device_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response.Device.device_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->device_name(), target);
  }

  // optional fixed64 owner_steamid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->owner_steamid(), target);
  }

  // optional uint32 last_time_used = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->last_time_used(), target);
  }

  // optional uint32 last_app_played = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->last_app_played(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response.Device)
  return target;
}

size_t CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response.Device)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string device_name = 2;
    if (has_device_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_name());
    }

    // optional fixed64 auth_device_token = 1;
    if (has_auth_device_token()) {
      total_size += 1 + 8;
    }

    // optional fixed64 owner_steamid = 3;
    if (has_owner_steamid()) {
      total_size += 1 + 8;
    }

    // optional uint32 last_time_used = 4;
    if (has_last_time_used()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_time_used());
    }

    // optional uint32 last_app_played = 5;
    if (has_last_app_played()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_app_played());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response.Device)
  GOOGLE_DCHECK_NE(&from, this);
  const CDeviceAuth_GetUsedAuthorizedDevices_Response_Device* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDeviceAuth_GetUsedAuthorizedDevices_Response_Device>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response.Device)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response.Device)
    MergeFrom(*source);
  }
}

void CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::MergeFrom(const CDeviceAuth_GetUsedAuthorizedDevices_Response_Device& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response.Device)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_device_name();
      device_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      auth_device_token_ = from.auth_device_token_;
    }
    if (cached_has_bits & 0x00000004u) {
      owner_steamid_ = from.owner_steamid_;
    }
    if (cached_has_bits & 0x00000008u) {
      last_time_used_ = from.last_time_used_;
    }
    if (cached_has_bits & 0x00000010u) {
      last_app_played_ = from.last_app_played_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response.Device)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::CopyFrom(const CDeviceAuth_GetUsedAuthorizedDevices_Response_Device& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response.Device)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::IsInitialized() const {
  return true;
}

void CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::Swap(CDeviceAuth_GetUsedAuthorizedDevices_Response_Device* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::InternalSwap(CDeviceAuth_GetUsedAuthorizedDevices_Response_Device* other) {
  device_name_.Swap(&other->device_name_);
  std::swap(auth_device_token_, other->auth_device_token_);
  std::swap(owner_steamid_, other->owner_steamid_);
  std::swap(last_time_used_, other->last_time_used_);
  std::swap(last_app_played_, other->last_app_played_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::GetMetadata() const {
  protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDeviceAuth_GetUsedAuthorizedDevices_Response_Device

// optional fixed64 auth_device_token = 1;
bool CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::has_auth_device_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::set_has_auth_device_token() {
  _has_bits_[0] |= 0x00000002u;
}
void CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::clear_has_auth_device_token() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::clear_auth_device_token() {
  auth_device_token_ = GOOGLE_ULONGLONG(0);
  clear_has_auth_device_token();
}
::google::protobuf::uint64 CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::auth_device_token() const {
  // @@protoc_insertion_point(field_get:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response.Device.auth_device_token)
  return auth_device_token_;
}
void CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::set_auth_device_token(::google::protobuf::uint64 value) {
  set_has_auth_device_token();
  auth_device_token_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response.Device.auth_device_token)
}

// optional string device_name = 2;
bool CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::has_device_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::set_has_device_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::clear_has_device_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::clear_device_name() {
  device_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_device_name();
}
const ::std::string& CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::device_name() const {
  // @@protoc_insertion_point(field_get:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response.Device.device_name)
  return device_name_.GetNoArena();
}
void CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::set_device_name(const ::std::string& value) {
  set_has_device_name();
  device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response.Device.device_name)
}
#if LANG_CXX11
void CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::set_device_name(::std::string&& value) {
  set_has_device_name();
  device_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response.Device.device_name)
}
#endif
void CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::set_device_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_device_name();
  device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response.Device.device_name)
}
void CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::set_device_name(const char* value, size_t size) {
  set_has_device_name();
  device_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response.Device.device_name)
}
::std::string* CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::mutable_device_name() {
  set_has_device_name();
  // @@protoc_insertion_point(field_mutable:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response.Device.device_name)
  return device_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::release_device_name() {
  // @@protoc_insertion_point(field_release:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response.Device.device_name)
  clear_has_device_name();
  return device_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::set_allocated_device_name(::std::string* device_name) {
  if (device_name != NULL) {
    set_has_device_name();
  } else {
    clear_has_device_name();
  }
  device_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_name);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response.Device.device_name)
}

// optional fixed64 owner_steamid = 3;
bool CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::has_owner_steamid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::set_has_owner_steamid() {
  _has_bits_[0] |= 0x00000004u;
}
void CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::clear_has_owner_steamid() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::clear_owner_steamid() {
  owner_steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_owner_steamid();
}
::google::protobuf::uint64 CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::owner_steamid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response.Device.owner_steamid)
  return owner_steamid_;
}
void CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::set_owner_steamid(::google::protobuf::uint64 value) {
  set_has_owner_steamid();
  owner_steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response.Device.owner_steamid)
}

// optional uint32 last_time_used = 4;
bool CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::has_last_time_used() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::set_has_last_time_used() {
  _has_bits_[0] |= 0x00000008u;
}
void CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::clear_has_last_time_used() {
  _has_bits_[0] &= ~0x00000008u;
}
void CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::clear_last_time_used() {
  last_time_used_ = 0u;
  clear_has_last_time_used();
}
::google::protobuf::uint32 CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::last_time_used() const {
  // @@protoc_insertion_point(field_get:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response.Device.last_time_used)
  return last_time_used_;
}
void CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::set_last_time_used(::google::protobuf::uint32 value) {
  set_has_last_time_used();
  last_time_used_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response.Device.last_time_used)
}

// optional uint32 last_app_played = 5;
bool CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::has_last_app_played() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::set_has_last_app_played() {
  _has_bits_[0] |= 0x00000010u;
}
void CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::clear_has_last_app_played() {
  _has_bits_[0] &= ~0x00000010u;
}
void CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::clear_last_app_played() {
  last_app_played_ = 0u;
  clear_has_last_app_played();
}
::google::protobuf::uint32 CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::last_app_played() const {
  // @@protoc_insertion_point(field_get:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response.Device.last_app_played)
  return last_app_played_;
}
void CDeviceAuth_GetUsedAuthorizedDevices_Response_Device::set_last_app_played(::google::protobuf::uint32 value) {
  set_has_last_app_played();
  last_app_played_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response.Device.last_app_played)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDeviceAuth_GetUsedAuthorizedDevices_Response::kDevicesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDeviceAuth_GetUsedAuthorizedDevices_Response::CDeviceAuth_GetUsedAuthorizedDevices_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response)
}
CDeviceAuth_GetUsedAuthorizedDevices_Response::CDeviceAuth_GetUsedAuthorizedDevices_Response(const CDeviceAuth_GetUsedAuthorizedDevices_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      devices_(from.devices_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response)
}

void CDeviceAuth_GetUsedAuthorizedDevices_Response::SharedCtor() {
  _cached_size_ = 0;
}

CDeviceAuth_GetUsedAuthorizedDevices_Response::~CDeviceAuth_GetUsedAuthorizedDevices_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response)
  SharedDtor();
}

void CDeviceAuth_GetUsedAuthorizedDevices_Response::SharedDtor() {
}

void CDeviceAuth_GetUsedAuthorizedDevices_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDeviceAuth_GetUsedAuthorizedDevices_Response::descriptor() {
  protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDeviceAuth_GetUsedAuthorizedDevices_Response& CDeviceAuth_GetUsedAuthorizedDevices_Response::default_instance() {
  protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDeviceAuth_GetUsedAuthorizedDevices_Response* CDeviceAuth_GetUsedAuthorizedDevices_Response::New(::google::protobuf::Arena* arena) const {
  CDeviceAuth_GetUsedAuthorizedDevices_Response* n = new CDeviceAuth_GetUsedAuthorizedDevices_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDeviceAuth_GetUsedAuthorizedDevices_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response)
  devices_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDeviceAuth_GetUsedAuthorizedDevices_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response.Device devices = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_devices()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response)
  return false;
#undef DO_
}

void CDeviceAuth_GetUsedAuthorizedDevices_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response.Device devices = 1;
  for (unsigned int i = 0, n = this->devices_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->devices(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response)
}

::google::protobuf::uint8* CDeviceAuth_GetUsedAuthorizedDevices_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response.Device devices = 1;
  for (unsigned int i = 0, n = this->devices_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->devices(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response)
  return target;
}

size_t CDeviceAuth_GetUsedAuthorizedDevices_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response.Device devices = 1;
  {
    unsigned int count = this->devices_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->devices(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDeviceAuth_GetUsedAuthorizedDevices_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CDeviceAuth_GetUsedAuthorizedDevices_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDeviceAuth_GetUsedAuthorizedDevices_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response)
    MergeFrom(*source);
  }
}

void CDeviceAuth_GetUsedAuthorizedDevices_Response::MergeFrom(const CDeviceAuth_GetUsedAuthorizedDevices_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  devices_.MergeFrom(from.devices_);
}

void CDeviceAuth_GetUsedAuthorizedDevices_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDeviceAuth_GetUsedAuthorizedDevices_Response::CopyFrom(const CDeviceAuth_GetUsedAuthorizedDevices_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDeviceAuth_GetUsedAuthorizedDevices_Response::IsInitialized() const {
  return true;
}

void CDeviceAuth_GetUsedAuthorizedDevices_Response::Swap(CDeviceAuth_GetUsedAuthorizedDevices_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDeviceAuth_GetUsedAuthorizedDevices_Response::InternalSwap(CDeviceAuth_GetUsedAuthorizedDevices_Response* other) {
  devices_.InternalSwap(&other->devices_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDeviceAuth_GetUsedAuthorizedDevices_Response::GetMetadata() const {
  protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDeviceAuth_GetUsedAuthorizedDevices_Response

// repeated .proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response.Device devices = 1;
int CDeviceAuth_GetUsedAuthorizedDevices_Response::devices_size() const {
  return devices_.size();
}
void CDeviceAuth_GetUsedAuthorizedDevices_Response::clear_devices() {
  devices_.Clear();
}
const ::proto::steam::CDeviceAuth_GetUsedAuthorizedDevices_Response_Device& CDeviceAuth_GetUsedAuthorizedDevices_Response::devices(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response.devices)
  return devices_.Get(index);
}
::proto::steam::CDeviceAuth_GetUsedAuthorizedDevices_Response_Device* CDeviceAuth_GetUsedAuthorizedDevices_Response::mutable_devices(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response.devices)
  return devices_.Mutable(index);
}
::proto::steam::CDeviceAuth_GetUsedAuthorizedDevices_Response_Device* CDeviceAuth_GetUsedAuthorizedDevices_Response::add_devices() {
  // @@protoc_insertion_point(field_add:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response.devices)
  return devices_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::CDeviceAuth_GetUsedAuthorizedDevices_Response_Device >*
CDeviceAuth_GetUsedAuthorizedDevices_Response::mutable_devices() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response.devices)
  return &devices_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::CDeviceAuth_GetUsedAuthorizedDevices_Response_Device >&
CDeviceAuth_GetUsedAuthorizedDevices_Response::devices() const {
  // @@protoc_insertion_point(field_list:proto.steam.CDeviceAuth_GetUsedAuthorizedDevices_Response.devices)
  return devices_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDeviceAuth_GetAuthorizedBorrowers_Request::kSteamidFieldNumber;
const int CDeviceAuth_GetAuthorizedBorrowers_Request::kIncludeCanceledFieldNumber;
const int CDeviceAuth_GetAuthorizedBorrowers_Request::kIncludePendingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDeviceAuth_GetAuthorizedBorrowers_Request::CDeviceAuth_GetAuthorizedBorrowers_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Request)
}
CDeviceAuth_GetAuthorizedBorrowers_Request::CDeviceAuth_GetAuthorizedBorrowers_Request(const CDeviceAuth_GetAuthorizedBorrowers_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    reinterpret_cast<char*>(&include_pending_) -
    reinterpret_cast<char*>(&steamid_) + sizeof(include_pending_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Request)
}

void CDeviceAuth_GetAuthorizedBorrowers_Request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&steamid_, 0, reinterpret_cast<char*>(&include_pending_) -
    reinterpret_cast<char*>(&steamid_) + sizeof(include_pending_));
}

CDeviceAuth_GetAuthorizedBorrowers_Request::~CDeviceAuth_GetAuthorizedBorrowers_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Request)
  SharedDtor();
}

void CDeviceAuth_GetAuthorizedBorrowers_Request::SharedDtor() {
}

void CDeviceAuth_GetAuthorizedBorrowers_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDeviceAuth_GetAuthorizedBorrowers_Request::descriptor() {
  protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDeviceAuth_GetAuthorizedBorrowers_Request& CDeviceAuth_GetAuthorizedBorrowers_Request::default_instance() {
  protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDeviceAuth_GetAuthorizedBorrowers_Request* CDeviceAuth_GetAuthorizedBorrowers_Request::New(::google::protobuf::Arena* arena) const {
  CDeviceAuth_GetAuthorizedBorrowers_Request* n = new CDeviceAuth_GetAuthorizedBorrowers_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDeviceAuth_GetAuthorizedBorrowers_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Request)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&steamid_, 0, reinterpret_cast<char*>(&include_pending_) -
      reinterpret_cast<char*>(&steamid_) + sizeof(include_pending_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDeviceAuth_GetAuthorizedBorrowers_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool include_canceled = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_include_canceled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &include_canceled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool include_pending = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_include_pending();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &include_pending_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Request)
  return false;
#undef DO_
}

void CDeviceAuth_GetAuthorizedBorrowers_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional bool include_canceled = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->include_canceled(), output);
  }

  // optional bool include_pending = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->include_pending(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Request)
}

::google::protobuf::uint8* CDeviceAuth_GetAuthorizedBorrowers_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional bool include_canceled = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->include_canceled(), target);
  }

  // optional bool include_pending = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->include_pending(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Request)
  return target;
}

size_t CDeviceAuth_GetAuthorizedBorrowers_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional fixed64 steamid = 1;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional bool include_canceled = 2;
    if (has_include_canceled()) {
      total_size += 1 + 1;
    }

    // optional bool include_pending = 3;
    if (has_include_pending()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDeviceAuth_GetAuthorizedBorrowers_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CDeviceAuth_GetAuthorizedBorrowers_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDeviceAuth_GetAuthorizedBorrowers_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Request)
    MergeFrom(*source);
  }
}

void CDeviceAuth_GetAuthorizedBorrowers_Request::MergeFrom(const CDeviceAuth_GetAuthorizedBorrowers_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      include_canceled_ = from.include_canceled_;
    }
    if (cached_has_bits & 0x00000004u) {
      include_pending_ = from.include_pending_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDeviceAuth_GetAuthorizedBorrowers_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDeviceAuth_GetAuthorizedBorrowers_Request::CopyFrom(const CDeviceAuth_GetAuthorizedBorrowers_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDeviceAuth_GetAuthorizedBorrowers_Request::IsInitialized() const {
  return true;
}

void CDeviceAuth_GetAuthorizedBorrowers_Request::Swap(CDeviceAuth_GetAuthorizedBorrowers_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDeviceAuth_GetAuthorizedBorrowers_Request::InternalSwap(CDeviceAuth_GetAuthorizedBorrowers_Request* other) {
  std::swap(steamid_, other->steamid_);
  std::swap(include_canceled_, other->include_canceled_);
  std::swap(include_pending_, other->include_pending_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDeviceAuth_GetAuthorizedBorrowers_Request::GetMetadata() const {
  protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDeviceAuth_GetAuthorizedBorrowers_Request

// optional fixed64 steamid = 1;
bool CDeviceAuth_GetAuthorizedBorrowers_Request::has_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDeviceAuth_GetAuthorizedBorrowers_Request::set_has_steamid() {
  _has_bits_[0] |= 0x00000001u;
}
void CDeviceAuth_GetAuthorizedBorrowers_Request::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDeviceAuth_GetAuthorizedBorrowers_Request::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
::google::protobuf::uint64 CDeviceAuth_GetAuthorizedBorrowers_Request::steamid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Request.steamid)
  return steamid_;
}
void CDeviceAuth_GetAuthorizedBorrowers_Request::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Request.steamid)
}

// optional bool include_canceled = 2;
bool CDeviceAuth_GetAuthorizedBorrowers_Request::has_include_canceled() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDeviceAuth_GetAuthorizedBorrowers_Request::set_has_include_canceled() {
  _has_bits_[0] |= 0x00000002u;
}
void CDeviceAuth_GetAuthorizedBorrowers_Request::clear_has_include_canceled() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDeviceAuth_GetAuthorizedBorrowers_Request::clear_include_canceled() {
  include_canceled_ = false;
  clear_has_include_canceled();
}
bool CDeviceAuth_GetAuthorizedBorrowers_Request::include_canceled() const {
  // @@protoc_insertion_point(field_get:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Request.include_canceled)
  return include_canceled_;
}
void CDeviceAuth_GetAuthorizedBorrowers_Request::set_include_canceled(bool value) {
  set_has_include_canceled();
  include_canceled_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Request.include_canceled)
}

// optional bool include_pending = 3;
bool CDeviceAuth_GetAuthorizedBorrowers_Request::has_include_pending() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDeviceAuth_GetAuthorizedBorrowers_Request::set_has_include_pending() {
  _has_bits_[0] |= 0x00000004u;
}
void CDeviceAuth_GetAuthorizedBorrowers_Request::clear_has_include_pending() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDeviceAuth_GetAuthorizedBorrowers_Request::clear_include_pending() {
  include_pending_ = false;
  clear_has_include_pending();
}
bool CDeviceAuth_GetAuthorizedBorrowers_Request::include_pending() const {
  // @@protoc_insertion_point(field_get:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Request.include_pending)
  return include_pending_;
}
void CDeviceAuth_GetAuthorizedBorrowers_Request::set_include_pending(bool value) {
  set_has_include_pending();
  include_pending_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Request.include_pending)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::kSteamidFieldNumber;
const int CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::kIsPendingFieldNumber;
const int CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::kIsCanceledFieldNumber;
const int CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::kTimeCreatedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Response.Borrower)
}
CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower(const CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    reinterpret_cast<char*>(&time_created_) -
    reinterpret_cast<char*>(&steamid_) + sizeof(time_created_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Response.Borrower)
}

void CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&steamid_, 0, reinterpret_cast<char*>(&time_created_) -
    reinterpret_cast<char*>(&steamid_) + sizeof(time_created_));
}

CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::~CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower() {
  // @@protoc_insertion_point(destructor:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Response.Borrower)
  SharedDtor();
}

void CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::SharedDtor() {
}

void CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::descriptor() {
  protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower& CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::default_instance() {
  protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower* CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::New(::google::protobuf::Arena* arena) const {
  CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower* n = new CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Response.Borrower)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&steamid_, 0, reinterpret_cast<char*>(&time_created_) -
      reinterpret_cast<char*>(&steamid_) + sizeof(time_created_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Response.Borrower)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_pending = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_is_pending();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_pending_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_canceled = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_is_canceled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_canceled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time_created = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_time_created();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_created_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Response.Borrower)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Response.Borrower)
  return false;
#undef DO_
}

void CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Response.Borrower)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional bool is_pending = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_pending(), output);
  }

  // optional bool is_canceled = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_canceled(), output);
  }

  // optional uint32 time_created = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->time_created(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Response.Borrower)
}

::google::protobuf::uint8* CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Response.Borrower)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional bool is_pending = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_pending(), target);
  }

  // optional bool is_canceled = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_canceled(), target);
  }

  // optional uint32 time_created = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->time_created(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Response.Borrower)
  return target;
}

size_t CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Response.Borrower)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional fixed64 steamid = 1;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional bool is_pending = 2;
    if (has_is_pending()) {
      total_size += 1 + 1;
    }

    // optional bool is_canceled = 3;
    if (has_is_canceled()) {
      total_size += 1 + 1;
    }

    // optional uint32 time_created = 4;
    if (has_time_created()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_created());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Response.Borrower)
  GOOGLE_DCHECK_NE(&from, this);
  const CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Response.Borrower)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Response.Borrower)
    MergeFrom(*source);
  }
}

void CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::MergeFrom(const CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Response.Borrower)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_pending_ = from.is_pending_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_canceled_ = from.is_canceled_;
    }
    if (cached_has_bits & 0x00000008u) {
      time_created_ = from.time_created_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Response.Borrower)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::CopyFrom(const CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Response.Borrower)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::IsInitialized() const {
  return true;
}

void CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::Swap(CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::InternalSwap(CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower* other) {
  std::swap(steamid_, other->steamid_);
  std::swap(is_pending_, other->is_pending_);
  std::swap(is_canceled_, other->is_canceled_);
  std::swap(time_created_, other->time_created_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::GetMetadata() const {
  protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower

// optional fixed64 steamid = 1;
bool CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::has_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::set_has_steamid() {
  _has_bits_[0] |= 0x00000001u;
}
void CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
::google::protobuf::uint64 CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::steamid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Response.Borrower.steamid)
  return steamid_;
}
void CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Response.Borrower.steamid)
}

// optional bool is_pending = 2;
bool CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::has_is_pending() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::set_has_is_pending() {
  _has_bits_[0] |= 0x00000002u;
}
void CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::clear_has_is_pending() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::clear_is_pending() {
  is_pending_ = false;
  clear_has_is_pending();
}
bool CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::is_pending() const {
  // @@protoc_insertion_point(field_get:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Response.Borrower.is_pending)
  return is_pending_;
}
void CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::set_is_pending(bool value) {
  set_has_is_pending();
  is_pending_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Response.Borrower.is_pending)
}

// optional bool is_canceled = 3;
bool CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::has_is_canceled() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::set_has_is_canceled() {
  _has_bits_[0] |= 0x00000004u;
}
void CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::clear_has_is_canceled() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::clear_is_canceled() {
  is_canceled_ = false;
  clear_has_is_canceled();
}
bool CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::is_canceled() const {
  // @@protoc_insertion_point(field_get:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Response.Borrower.is_canceled)
  return is_canceled_;
}
void CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::set_is_canceled(bool value) {
  set_has_is_canceled();
  is_canceled_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Response.Borrower.is_canceled)
}

// optional uint32 time_created = 4;
bool CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::has_time_created() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::set_has_time_created() {
  _has_bits_[0] |= 0x00000008u;
}
void CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::clear_has_time_created() {
  _has_bits_[0] &= ~0x00000008u;
}
void CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::clear_time_created() {
  time_created_ = 0u;
  clear_has_time_created();
}
::google::protobuf::uint32 CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::time_created() const {
  // @@protoc_insertion_point(field_get:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Response.Borrower.time_created)
  return time_created_;
}
void CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower::set_time_created(::google::protobuf::uint32 value) {
  set_has_time_created();
  time_created_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Response.Borrower.time_created)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDeviceAuth_GetAuthorizedBorrowers_Response::kBorrowersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDeviceAuth_GetAuthorizedBorrowers_Response::CDeviceAuth_GetAuthorizedBorrowers_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Response)
}
CDeviceAuth_GetAuthorizedBorrowers_Response::CDeviceAuth_GetAuthorizedBorrowers_Response(const CDeviceAuth_GetAuthorizedBorrowers_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      borrowers_(from.borrowers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Response)
}

void CDeviceAuth_GetAuthorizedBorrowers_Response::SharedCtor() {
  _cached_size_ = 0;
}

CDeviceAuth_GetAuthorizedBorrowers_Response::~CDeviceAuth_GetAuthorizedBorrowers_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Response)
  SharedDtor();
}

void CDeviceAuth_GetAuthorizedBorrowers_Response::SharedDtor() {
}

void CDeviceAuth_GetAuthorizedBorrowers_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDeviceAuth_GetAuthorizedBorrowers_Response::descriptor() {
  protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDeviceAuth_GetAuthorizedBorrowers_Response& CDeviceAuth_GetAuthorizedBorrowers_Response::default_instance() {
  protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDeviceAuth_GetAuthorizedBorrowers_Response* CDeviceAuth_GetAuthorizedBorrowers_Response::New(::google::protobuf::Arena* arena) const {
  CDeviceAuth_GetAuthorizedBorrowers_Response* n = new CDeviceAuth_GetAuthorizedBorrowers_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDeviceAuth_GetAuthorizedBorrowers_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Response)
  borrowers_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDeviceAuth_GetAuthorizedBorrowers_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Response.Borrower borrowers = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_borrowers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Response)
  return false;
#undef DO_
}

void CDeviceAuth_GetAuthorizedBorrowers_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Response.Borrower borrowers = 1;
  for (unsigned int i = 0, n = this->borrowers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->borrowers(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Response)
}

::google::protobuf::uint8* CDeviceAuth_GetAuthorizedBorrowers_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Response.Borrower borrowers = 1;
  for (unsigned int i = 0, n = this->borrowers_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->borrowers(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Response)
  return target;
}

size_t CDeviceAuth_GetAuthorizedBorrowers_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Response.Borrower borrowers = 1;
  {
    unsigned int count = this->borrowers_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->borrowers(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDeviceAuth_GetAuthorizedBorrowers_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CDeviceAuth_GetAuthorizedBorrowers_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDeviceAuth_GetAuthorizedBorrowers_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Response)
    MergeFrom(*source);
  }
}

void CDeviceAuth_GetAuthorizedBorrowers_Response::MergeFrom(const CDeviceAuth_GetAuthorizedBorrowers_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  borrowers_.MergeFrom(from.borrowers_);
}

void CDeviceAuth_GetAuthorizedBorrowers_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDeviceAuth_GetAuthorizedBorrowers_Response::CopyFrom(const CDeviceAuth_GetAuthorizedBorrowers_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDeviceAuth_GetAuthorizedBorrowers_Response::IsInitialized() const {
  return true;
}

void CDeviceAuth_GetAuthorizedBorrowers_Response::Swap(CDeviceAuth_GetAuthorizedBorrowers_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDeviceAuth_GetAuthorizedBorrowers_Response::InternalSwap(CDeviceAuth_GetAuthorizedBorrowers_Response* other) {
  borrowers_.InternalSwap(&other->borrowers_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDeviceAuth_GetAuthorizedBorrowers_Response::GetMetadata() const {
  protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDeviceAuth_GetAuthorizedBorrowers_Response

// repeated .proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Response.Borrower borrowers = 1;
int CDeviceAuth_GetAuthorizedBorrowers_Response::borrowers_size() const {
  return borrowers_.size();
}
void CDeviceAuth_GetAuthorizedBorrowers_Response::clear_borrowers() {
  borrowers_.Clear();
}
const ::proto::steam::CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower& CDeviceAuth_GetAuthorizedBorrowers_Response::borrowers(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Response.borrowers)
  return borrowers_.Get(index);
}
::proto::steam::CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower* CDeviceAuth_GetAuthorizedBorrowers_Response::mutable_borrowers(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Response.borrowers)
  return borrowers_.Mutable(index);
}
::proto::steam::CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower* CDeviceAuth_GetAuthorizedBorrowers_Response::add_borrowers() {
  // @@protoc_insertion_point(field_add:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Response.borrowers)
  return borrowers_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower >*
CDeviceAuth_GetAuthorizedBorrowers_Response::mutable_borrowers() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Response.borrowers)
  return &borrowers_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::CDeviceAuth_GetAuthorizedBorrowers_Response_Borrower >&
CDeviceAuth_GetAuthorizedBorrowers_Response::borrowers() const {
  // @@protoc_insertion_point(field_list:proto.steam.CDeviceAuth_GetAuthorizedBorrowers_Response.borrowers)
  return borrowers_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDeviceAuth_AddAuthorizedBorrowers_Request::kSteamidFieldNumber;
const int CDeviceAuth_AddAuthorizedBorrowers_Request::kSteamidBorrowerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDeviceAuth_AddAuthorizedBorrowers_Request::CDeviceAuth_AddAuthorizedBorrowers_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CDeviceAuth_AddAuthorizedBorrowers_Request)
}
CDeviceAuth_AddAuthorizedBorrowers_Request::CDeviceAuth_AddAuthorizedBorrowers_Request(const CDeviceAuth_AddAuthorizedBorrowers_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      steamid_borrower_(from.steamid_borrower_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  steamid_ = from.steamid_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CDeviceAuth_AddAuthorizedBorrowers_Request)
}

void CDeviceAuth_AddAuthorizedBorrowers_Request::SharedCtor() {
  _cached_size_ = 0;
  steamid_ = GOOGLE_ULONGLONG(0);
}

CDeviceAuth_AddAuthorizedBorrowers_Request::~CDeviceAuth_AddAuthorizedBorrowers_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CDeviceAuth_AddAuthorizedBorrowers_Request)
  SharedDtor();
}

void CDeviceAuth_AddAuthorizedBorrowers_Request::SharedDtor() {
}

void CDeviceAuth_AddAuthorizedBorrowers_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDeviceAuth_AddAuthorizedBorrowers_Request::descriptor() {
  protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDeviceAuth_AddAuthorizedBorrowers_Request& CDeviceAuth_AddAuthorizedBorrowers_Request::default_instance() {
  protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDeviceAuth_AddAuthorizedBorrowers_Request* CDeviceAuth_AddAuthorizedBorrowers_Request::New(::google::protobuf::Arena* arena) const {
  CDeviceAuth_AddAuthorizedBorrowers_Request* n = new CDeviceAuth_AddAuthorizedBorrowers_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDeviceAuth_AddAuthorizedBorrowers_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CDeviceAuth_AddAuthorizedBorrowers_Request)
  steamid_borrower_.Clear();
  steamid_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDeviceAuth_AddAuthorizedBorrowers_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CDeviceAuth_AddAuthorizedBorrowers_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated fixed64 steamid_borrower = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 17u, input, this->mutable_steamid_borrower())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_steamid_borrower())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CDeviceAuth_AddAuthorizedBorrowers_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CDeviceAuth_AddAuthorizedBorrowers_Request)
  return false;
#undef DO_
}

void CDeviceAuth_AddAuthorizedBorrowers_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CDeviceAuth_AddAuthorizedBorrowers_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // repeated fixed64 steamid_borrower = 2;
  for (int i = 0, n = this->steamid_borrower_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      2, this->steamid_borrower(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CDeviceAuth_AddAuthorizedBorrowers_Request)
}

::google::protobuf::uint8* CDeviceAuth_AddAuthorizedBorrowers_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CDeviceAuth_AddAuthorizedBorrowers_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // repeated fixed64 steamid_borrower = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFixed64ToArray(2, this->steamid_borrower_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CDeviceAuth_AddAuthorizedBorrowers_Request)
  return target;
}

size_t CDeviceAuth_AddAuthorizedBorrowers_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CDeviceAuth_AddAuthorizedBorrowers_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated fixed64 steamid_borrower = 2;
  {
    unsigned int count = this->steamid_borrower_size();
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->steamid_borrower_size());
    total_size += data_size;
  }

  // optional fixed64 steamid = 1;
  if (has_steamid()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDeviceAuth_AddAuthorizedBorrowers_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CDeviceAuth_AddAuthorizedBorrowers_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CDeviceAuth_AddAuthorizedBorrowers_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDeviceAuth_AddAuthorizedBorrowers_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CDeviceAuth_AddAuthorizedBorrowers_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CDeviceAuth_AddAuthorizedBorrowers_Request)
    MergeFrom(*source);
  }
}

void CDeviceAuth_AddAuthorizedBorrowers_Request::MergeFrom(const CDeviceAuth_AddAuthorizedBorrowers_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CDeviceAuth_AddAuthorizedBorrowers_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  steamid_borrower_.MergeFrom(from.steamid_borrower_);
  if (from.has_steamid()) {
    set_steamid(from.steamid());
  }
}

void CDeviceAuth_AddAuthorizedBorrowers_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CDeviceAuth_AddAuthorizedBorrowers_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDeviceAuth_AddAuthorizedBorrowers_Request::CopyFrom(const CDeviceAuth_AddAuthorizedBorrowers_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CDeviceAuth_AddAuthorizedBorrowers_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDeviceAuth_AddAuthorizedBorrowers_Request::IsInitialized() const {
  return true;
}

void CDeviceAuth_AddAuthorizedBorrowers_Request::Swap(CDeviceAuth_AddAuthorizedBorrowers_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDeviceAuth_AddAuthorizedBorrowers_Request::InternalSwap(CDeviceAuth_AddAuthorizedBorrowers_Request* other) {
  steamid_borrower_.InternalSwap(&other->steamid_borrower_);
  std::swap(steamid_, other->steamid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDeviceAuth_AddAuthorizedBorrowers_Request::GetMetadata() const {
  protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDeviceAuth_AddAuthorizedBorrowers_Request

// optional fixed64 steamid = 1;
bool CDeviceAuth_AddAuthorizedBorrowers_Request::has_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDeviceAuth_AddAuthorizedBorrowers_Request::set_has_steamid() {
  _has_bits_[0] |= 0x00000001u;
}
void CDeviceAuth_AddAuthorizedBorrowers_Request::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDeviceAuth_AddAuthorizedBorrowers_Request::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
::google::protobuf::uint64 CDeviceAuth_AddAuthorizedBorrowers_Request::steamid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CDeviceAuth_AddAuthorizedBorrowers_Request.steamid)
  return steamid_;
}
void CDeviceAuth_AddAuthorizedBorrowers_Request::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CDeviceAuth_AddAuthorizedBorrowers_Request.steamid)
}

// repeated fixed64 steamid_borrower = 2;
int CDeviceAuth_AddAuthorizedBorrowers_Request::steamid_borrower_size() const {
  return steamid_borrower_.size();
}
void CDeviceAuth_AddAuthorizedBorrowers_Request::clear_steamid_borrower() {
  steamid_borrower_.Clear();
}
::google::protobuf::uint64 CDeviceAuth_AddAuthorizedBorrowers_Request::steamid_borrower(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CDeviceAuth_AddAuthorizedBorrowers_Request.steamid_borrower)
  return steamid_borrower_.Get(index);
}
void CDeviceAuth_AddAuthorizedBorrowers_Request::set_steamid_borrower(int index, ::google::protobuf::uint64 value) {
  steamid_borrower_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.steam.CDeviceAuth_AddAuthorizedBorrowers_Request.steamid_borrower)
}
void CDeviceAuth_AddAuthorizedBorrowers_Request::add_steamid_borrower(::google::protobuf::uint64 value) {
  steamid_borrower_.Add(value);
  // @@protoc_insertion_point(field_add:proto.steam.CDeviceAuth_AddAuthorizedBorrowers_Request.steamid_borrower)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CDeviceAuth_AddAuthorizedBorrowers_Request::steamid_borrower() const {
  // @@protoc_insertion_point(field_list:proto.steam.CDeviceAuth_AddAuthorizedBorrowers_Request.steamid_borrower)
  return steamid_borrower_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CDeviceAuth_AddAuthorizedBorrowers_Request::mutable_steamid_borrower() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CDeviceAuth_AddAuthorizedBorrowers_Request.steamid_borrower)
  return &steamid_borrower_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDeviceAuth_AddAuthorizedBorrowers_Response::kSecondsToWaitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDeviceAuth_AddAuthorizedBorrowers_Response::CDeviceAuth_AddAuthorizedBorrowers_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CDeviceAuth_AddAuthorizedBorrowers_Response)
}
CDeviceAuth_AddAuthorizedBorrowers_Response::CDeviceAuth_AddAuthorizedBorrowers_Response(const CDeviceAuth_AddAuthorizedBorrowers_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  seconds_to_wait_ = from.seconds_to_wait_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CDeviceAuth_AddAuthorizedBorrowers_Response)
}

void CDeviceAuth_AddAuthorizedBorrowers_Response::SharedCtor() {
  _cached_size_ = 0;
  seconds_to_wait_ = 0;
}

CDeviceAuth_AddAuthorizedBorrowers_Response::~CDeviceAuth_AddAuthorizedBorrowers_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CDeviceAuth_AddAuthorizedBorrowers_Response)
  SharedDtor();
}

void CDeviceAuth_AddAuthorizedBorrowers_Response::SharedDtor() {
}

void CDeviceAuth_AddAuthorizedBorrowers_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDeviceAuth_AddAuthorizedBorrowers_Response::descriptor() {
  protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDeviceAuth_AddAuthorizedBorrowers_Response& CDeviceAuth_AddAuthorizedBorrowers_Response::default_instance() {
  protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDeviceAuth_AddAuthorizedBorrowers_Response* CDeviceAuth_AddAuthorizedBorrowers_Response::New(::google::protobuf::Arena* arena) const {
  CDeviceAuth_AddAuthorizedBorrowers_Response* n = new CDeviceAuth_AddAuthorizedBorrowers_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDeviceAuth_AddAuthorizedBorrowers_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CDeviceAuth_AddAuthorizedBorrowers_Response)
  seconds_to_wait_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDeviceAuth_AddAuthorizedBorrowers_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CDeviceAuth_AddAuthorizedBorrowers_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seconds_to_wait = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_seconds_to_wait();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seconds_to_wait_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CDeviceAuth_AddAuthorizedBorrowers_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CDeviceAuth_AddAuthorizedBorrowers_Response)
  return false;
#undef DO_
}

void CDeviceAuth_AddAuthorizedBorrowers_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CDeviceAuth_AddAuthorizedBorrowers_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 seconds_to_wait = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seconds_to_wait(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CDeviceAuth_AddAuthorizedBorrowers_Response)
}

::google::protobuf::uint8* CDeviceAuth_AddAuthorizedBorrowers_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CDeviceAuth_AddAuthorizedBorrowers_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 seconds_to_wait = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seconds_to_wait(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CDeviceAuth_AddAuthorizedBorrowers_Response)
  return target;
}

size_t CDeviceAuth_AddAuthorizedBorrowers_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CDeviceAuth_AddAuthorizedBorrowers_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional int32 seconds_to_wait = 1;
  if (has_seconds_to_wait()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->seconds_to_wait());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDeviceAuth_AddAuthorizedBorrowers_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CDeviceAuth_AddAuthorizedBorrowers_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CDeviceAuth_AddAuthorizedBorrowers_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDeviceAuth_AddAuthorizedBorrowers_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CDeviceAuth_AddAuthorizedBorrowers_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CDeviceAuth_AddAuthorizedBorrowers_Response)
    MergeFrom(*source);
  }
}

void CDeviceAuth_AddAuthorizedBorrowers_Response::MergeFrom(const CDeviceAuth_AddAuthorizedBorrowers_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CDeviceAuth_AddAuthorizedBorrowers_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_seconds_to_wait()) {
    set_seconds_to_wait(from.seconds_to_wait());
  }
}

void CDeviceAuth_AddAuthorizedBorrowers_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CDeviceAuth_AddAuthorizedBorrowers_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDeviceAuth_AddAuthorizedBorrowers_Response::CopyFrom(const CDeviceAuth_AddAuthorizedBorrowers_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CDeviceAuth_AddAuthorizedBorrowers_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDeviceAuth_AddAuthorizedBorrowers_Response::IsInitialized() const {
  return true;
}

void CDeviceAuth_AddAuthorizedBorrowers_Response::Swap(CDeviceAuth_AddAuthorizedBorrowers_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDeviceAuth_AddAuthorizedBorrowers_Response::InternalSwap(CDeviceAuth_AddAuthorizedBorrowers_Response* other) {
  std::swap(seconds_to_wait_, other->seconds_to_wait_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDeviceAuth_AddAuthorizedBorrowers_Response::GetMetadata() const {
  protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDeviceAuth_AddAuthorizedBorrowers_Response

// optional int32 seconds_to_wait = 1;
bool CDeviceAuth_AddAuthorizedBorrowers_Response::has_seconds_to_wait() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDeviceAuth_AddAuthorizedBorrowers_Response::set_has_seconds_to_wait() {
  _has_bits_[0] |= 0x00000001u;
}
void CDeviceAuth_AddAuthorizedBorrowers_Response::clear_has_seconds_to_wait() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDeviceAuth_AddAuthorizedBorrowers_Response::clear_seconds_to_wait() {
  seconds_to_wait_ = 0;
  clear_has_seconds_to_wait();
}
::google::protobuf::int32 CDeviceAuth_AddAuthorizedBorrowers_Response::seconds_to_wait() const {
  // @@protoc_insertion_point(field_get:proto.steam.CDeviceAuth_AddAuthorizedBorrowers_Response.seconds_to_wait)
  return seconds_to_wait_;
}
void CDeviceAuth_AddAuthorizedBorrowers_Response::set_seconds_to_wait(::google::protobuf::int32 value) {
  set_has_seconds_to_wait();
  seconds_to_wait_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CDeviceAuth_AddAuthorizedBorrowers_Response.seconds_to_wait)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDeviceAuth_RemoveAuthorizedBorrowers_Request::kSteamidFieldNumber;
const int CDeviceAuth_RemoveAuthorizedBorrowers_Request::kSteamidBorrowerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDeviceAuth_RemoveAuthorizedBorrowers_Request::CDeviceAuth_RemoveAuthorizedBorrowers_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CDeviceAuth_RemoveAuthorizedBorrowers_Request)
}
CDeviceAuth_RemoveAuthorizedBorrowers_Request::CDeviceAuth_RemoveAuthorizedBorrowers_Request(const CDeviceAuth_RemoveAuthorizedBorrowers_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      steamid_borrower_(from.steamid_borrower_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  steamid_ = from.steamid_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CDeviceAuth_RemoveAuthorizedBorrowers_Request)
}

void CDeviceAuth_RemoveAuthorizedBorrowers_Request::SharedCtor() {
  _cached_size_ = 0;
  steamid_ = GOOGLE_ULONGLONG(0);
}

CDeviceAuth_RemoveAuthorizedBorrowers_Request::~CDeviceAuth_RemoveAuthorizedBorrowers_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CDeviceAuth_RemoveAuthorizedBorrowers_Request)
  SharedDtor();
}

void CDeviceAuth_RemoveAuthorizedBorrowers_Request::SharedDtor() {
}

void CDeviceAuth_RemoveAuthorizedBorrowers_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDeviceAuth_RemoveAuthorizedBorrowers_Request::descriptor() {
  protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDeviceAuth_RemoveAuthorizedBorrowers_Request& CDeviceAuth_RemoveAuthorizedBorrowers_Request::default_instance() {
  protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDeviceAuth_RemoveAuthorizedBorrowers_Request* CDeviceAuth_RemoveAuthorizedBorrowers_Request::New(::google::protobuf::Arena* arena) const {
  CDeviceAuth_RemoveAuthorizedBorrowers_Request* n = new CDeviceAuth_RemoveAuthorizedBorrowers_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDeviceAuth_RemoveAuthorizedBorrowers_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CDeviceAuth_RemoveAuthorizedBorrowers_Request)
  steamid_borrower_.Clear();
  steamid_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDeviceAuth_RemoveAuthorizedBorrowers_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CDeviceAuth_RemoveAuthorizedBorrowers_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated fixed64 steamid_borrower = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 17u, input, this->mutable_steamid_borrower())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_steamid_borrower())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CDeviceAuth_RemoveAuthorizedBorrowers_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CDeviceAuth_RemoveAuthorizedBorrowers_Request)
  return false;
#undef DO_
}

void CDeviceAuth_RemoveAuthorizedBorrowers_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CDeviceAuth_RemoveAuthorizedBorrowers_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // repeated fixed64 steamid_borrower = 2;
  for (int i = 0, n = this->steamid_borrower_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      2, this->steamid_borrower(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CDeviceAuth_RemoveAuthorizedBorrowers_Request)
}

::google::protobuf::uint8* CDeviceAuth_RemoveAuthorizedBorrowers_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CDeviceAuth_RemoveAuthorizedBorrowers_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // repeated fixed64 steamid_borrower = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFixed64ToArray(2, this->steamid_borrower_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CDeviceAuth_RemoveAuthorizedBorrowers_Request)
  return target;
}

size_t CDeviceAuth_RemoveAuthorizedBorrowers_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CDeviceAuth_RemoveAuthorizedBorrowers_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated fixed64 steamid_borrower = 2;
  {
    unsigned int count = this->steamid_borrower_size();
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->steamid_borrower_size());
    total_size += data_size;
  }

  // optional fixed64 steamid = 1;
  if (has_steamid()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDeviceAuth_RemoveAuthorizedBorrowers_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CDeviceAuth_RemoveAuthorizedBorrowers_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CDeviceAuth_RemoveAuthorizedBorrowers_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDeviceAuth_RemoveAuthorizedBorrowers_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CDeviceAuth_RemoveAuthorizedBorrowers_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CDeviceAuth_RemoveAuthorizedBorrowers_Request)
    MergeFrom(*source);
  }
}

void CDeviceAuth_RemoveAuthorizedBorrowers_Request::MergeFrom(const CDeviceAuth_RemoveAuthorizedBorrowers_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CDeviceAuth_RemoveAuthorizedBorrowers_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  steamid_borrower_.MergeFrom(from.steamid_borrower_);
  if (from.has_steamid()) {
    set_steamid(from.steamid());
  }
}

void CDeviceAuth_RemoveAuthorizedBorrowers_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CDeviceAuth_RemoveAuthorizedBorrowers_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDeviceAuth_RemoveAuthorizedBorrowers_Request::CopyFrom(const CDeviceAuth_RemoveAuthorizedBorrowers_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CDeviceAuth_RemoveAuthorizedBorrowers_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDeviceAuth_RemoveAuthorizedBorrowers_Request::IsInitialized() const {
  return true;
}

void CDeviceAuth_RemoveAuthorizedBorrowers_Request::Swap(CDeviceAuth_RemoveAuthorizedBorrowers_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDeviceAuth_RemoveAuthorizedBorrowers_Request::InternalSwap(CDeviceAuth_RemoveAuthorizedBorrowers_Request* other) {
  steamid_borrower_.InternalSwap(&other->steamid_borrower_);
  std::swap(steamid_, other->steamid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDeviceAuth_RemoveAuthorizedBorrowers_Request::GetMetadata() const {
  protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDeviceAuth_RemoveAuthorizedBorrowers_Request

// optional fixed64 steamid = 1;
bool CDeviceAuth_RemoveAuthorizedBorrowers_Request::has_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDeviceAuth_RemoveAuthorizedBorrowers_Request::set_has_steamid() {
  _has_bits_[0] |= 0x00000001u;
}
void CDeviceAuth_RemoveAuthorizedBorrowers_Request::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDeviceAuth_RemoveAuthorizedBorrowers_Request::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
::google::protobuf::uint64 CDeviceAuth_RemoveAuthorizedBorrowers_Request::steamid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CDeviceAuth_RemoveAuthorizedBorrowers_Request.steamid)
  return steamid_;
}
void CDeviceAuth_RemoveAuthorizedBorrowers_Request::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CDeviceAuth_RemoveAuthorizedBorrowers_Request.steamid)
}

// repeated fixed64 steamid_borrower = 2;
int CDeviceAuth_RemoveAuthorizedBorrowers_Request::steamid_borrower_size() const {
  return steamid_borrower_.size();
}
void CDeviceAuth_RemoveAuthorizedBorrowers_Request::clear_steamid_borrower() {
  steamid_borrower_.Clear();
}
::google::protobuf::uint64 CDeviceAuth_RemoveAuthorizedBorrowers_Request::steamid_borrower(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CDeviceAuth_RemoveAuthorizedBorrowers_Request.steamid_borrower)
  return steamid_borrower_.Get(index);
}
void CDeviceAuth_RemoveAuthorizedBorrowers_Request::set_steamid_borrower(int index, ::google::protobuf::uint64 value) {
  steamid_borrower_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.steam.CDeviceAuth_RemoveAuthorizedBorrowers_Request.steamid_borrower)
}
void CDeviceAuth_RemoveAuthorizedBorrowers_Request::add_steamid_borrower(::google::protobuf::uint64 value) {
  steamid_borrower_.Add(value);
  // @@protoc_insertion_point(field_add:proto.steam.CDeviceAuth_RemoveAuthorizedBorrowers_Request.steamid_borrower)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CDeviceAuth_RemoveAuthorizedBorrowers_Request::steamid_borrower() const {
  // @@protoc_insertion_point(field_list:proto.steam.CDeviceAuth_RemoveAuthorizedBorrowers_Request.steamid_borrower)
  return steamid_borrower_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CDeviceAuth_RemoveAuthorizedBorrowers_Request::mutable_steamid_borrower() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CDeviceAuth_RemoveAuthorizedBorrowers_Request.steamid_borrower)
  return &steamid_borrower_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDeviceAuth_RemoveAuthorizedBorrowers_Response::CDeviceAuth_RemoveAuthorizedBorrowers_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CDeviceAuth_RemoveAuthorizedBorrowers_Response)
}
CDeviceAuth_RemoveAuthorizedBorrowers_Response::CDeviceAuth_RemoveAuthorizedBorrowers_Response(const CDeviceAuth_RemoveAuthorizedBorrowers_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CDeviceAuth_RemoveAuthorizedBorrowers_Response)
}

void CDeviceAuth_RemoveAuthorizedBorrowers_Response::SharedCtor() {
  _cached_size_ = 0;
}

CDeviceAuth_RemoveAuthorizedBorrowers_Response::~CDeviceAuth_RemoveAuthorizedBorrowers_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CDeviceAuth_RemoveAuthorizedBorrowers_Response)
  SharedDtor();
}

void CDeviceAuth_RemoveAuthorizedBorrowers_Response::SharedDtor() {
}

void CDeviceAuth_RemoveAuthorizedBorrowers_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDeviceAuth_RemoveAuthorizedBorrowers_Response::descriptor() {
  protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDeviceAuth_RemoveAuthorizedBorrowers_Response& CDeviceAuth_RemoveAuthorizedBorrowers_Response::default_instance() {
  protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDeviceAuth_RemoveAuthorizedBorrowers_Response* CDeviceAuth_RemoveAuthorizedBorrowers_Response::New(::google::protobuf::Arena* arena) const {
  CDeviceAuth_RemoveAuthorizedBorrowers_Response* n = new CDeviceAuth_RemoveAuthorizedBorrowers_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDeviceAuth_RemoveAuthorizedBorrowers_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CDeviceAuth_RemoveAuthorizedBorrowers_Response)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDeviceAuth_RemoveAuthorizedBorrowers_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CDeviceAuth_RemoveAuthorizedBorrowers_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CDeviceAuth_RemoveAuthorizedBorrowers_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CDeviceAuth_RemoveAuthorizedBorrowers_Response)
  return false;
#undef DO_
}

void CDeviceAuth_RemoveAuthorizedBorrowers_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CDeviceAuth_RemoveAuthorizedBorrowers_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CDeviceAuth_RemoveAuthorizedBorrowers_Response)
}

::google::protobuf::uint8* CDeviceAuth_RemoveAuthorizedBorrowers_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CDeviceAuth_RemoveAuthorizedBorrowers_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CDeviceAuth_RemoveAuthorizedBorrowers_Response)
  return target;
}

size_t CDeviceAuth_RemoveAuthorizedBorrowers_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CDeviceAuth_RemoveAuthorizedBorrowers_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDeviceAuth_RemoveAuthorizedBorrowers_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CDeviceAuth_RemoveAuthorizedBorrowers_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CDeviceAuth_RemoveAuthorizedBorrowers_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDeviceAuth_RemoveAuthorizedBorrowers_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CDeviceAuth_RemoveAuthorizedBorrowers_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CDeviceAuth_RemoveAuthorizedBorrowers_Response)
    MergeFrom(*source);
  }
}

void CDeviceAuth_RemoveAuthorizedBorrowers_Response::MergeFrom(const CDeviceAuth_RemoveAuthorizedBorrowers_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CDeviceAuth_RemoveAuthorizedBorrowers_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CDeviceAuth_RemoveAuthorizedBorrowers_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CDeviceAuth_RemoveAuthorizedBorrowers_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDeviceAuth_RemoveAuthorizedBorrowers_Response::CopyFrom(const CDeviceAuth_RemoveAuthorizedBorrowers_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CDeviceAuth_RemoveAuthorizedBorrowers_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDeviceAuth_RemoveAuthorizedBorrowers_Response::IsInitialized() const {
  return true;
}

void CDeviceAuth_RemoveAuthorizedBorrowers_Response::Swap(CDeviceAuth_RemoveAuthorizedBorrowers_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDeviceAuth_RemoveAuthorizedBorrowers_Response::InternalSwap(CDeviceAuth_RemoveAuthorizedBorrowers_Response* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDeviceAuth_RemoveAuthorizedBorrowers_Response::GetMetadata() const {
  protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDeviceAuth_RemoveAuthorizedBorrowers_Response

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDeviceAuth_GetAuthorizedAsBorrower_Request::kSteamidFieldNumber;
const int CDeviceAuth_GetAuthorizedAsBorrower_Request::kIncludeCanceledFieldNumber;
const int CDeviceAuth_GetAuthorizedAsBorrower_Request::kIncludePendingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDeviceAuth_GetAuthorizedAsBorrower_Request::CDeviceAuth_GetAuthorizedAsBorrower_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Request)
}
CDeviceAuth_GetAuthorizedAsBorrower_Request::CDeviceAuth_GetAuthorizedAsBorrower_Request(const CDeviceAuth_GetAuthorizedAsBorrower_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    reinterpret_cast<char*>(&include_pending_) -
    reinterpret_cast<char*>(&steamid_) + sizeof(include_pending_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Request)
}

void CDeviceAuth_GetAuthorizedAsBorrower_Request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&steamid_, 0, reinterpret_cast<char*>(&include_pending_) -
    reinterpret_cast<char*>(&steamid_) + sizeof(include_pending_));
}

CDeviceAuth_GetAuthorizedAsBorrower_Request::~CDeviceAuth_GetAuthorizedAsBorrower_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Request)
  SharedDtor();
}

void CDeviceAuth_GetAuthorizedAsBorrower_Request::SharedDtor() {
}

void CDeviceAuth_GetAuthorizedAsBorrower_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDeviceAuth_GetAuthorizedAsBorrower_Request::descriptor() {
  protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDeviceAuth_GetAuthorizedAsBorrower_Request& CDeviceAuth_GetAuthorizedAsBorrower_Request::default_instance() {
  protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDeviceAuth_GetAuthorizedAsBorrower_Request* CDeviceAuth_GetAuthorizedAsBorrower_Request::New(::google::protobuf::Arena* arena) const {
  CDeviceAuth_GetAuthorizedAsBorrower_Request* n = new CDeviceAuth_GetAuthorizedAsBorrower_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDeviceAuth_GetAuthorizedAsBorrower_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Request)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&steamid_, 0, reinterpret_cast<char*>(&include_pending_) -
      reinterpret_cast<char*>(&steamid_) + sizeof(include_pending_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDeviceAuth_GetAuthorizedAsBorrower_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool include_canceled = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_include_canceled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &include_canceled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool include_pending = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_include_pending();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &include_pending_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Request)
  return false;
#undef DO_
}

void CDeviceAuth_GetAuthorizedAsBorrower_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional bool include_canceled = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->include_canceled(), output);
  }

  // optional bool include_pending = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->include_pending(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Request)
}

::google::protobuf::uint8* CDeviceAuth_GetAuthorizedAsBorrower_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional bool include_canceled = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->include_canceled(), target);
  }

  // optional bool include_pending = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->include_pending(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Request)
  return target;
}

size_t CDeviceAuth_GetAuthorizedAsBorrower_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional fixed64 steamid = 1;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional bool include_canceled = 2;
    if (has_include_canceled()) {
      total_size += 1 + 1;
    }

    // optional bool include_pending = 3;
    if (has_include_pending()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDeviceAuth_GetAuthorizedAsBorrower_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CDeviceAuth_GetAuthorizedAsBorrower_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDeviceAuth_GetAuthorizedAsBorrower_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Request)
    MergeFrom(*source);
  }
}

void CDeviceAuth_GetAuthorizedAsBorrower_Request::MergeFrom(const CDeviceAuth_GetAuthorizedAsBorrower_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      include_canceled_ = from.include_canceled_;
    }
    if (cached_has_bits & 0x00000004u) {
      include_pending_ = from.include_pending_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDeviceAuth_GetAuthorizedAsBorrower_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDeviceAuth_GetAuthorizedAsBorrower_Request::CopyFrom(const CDeviceAuth_GetAuthorizedAsBorrower_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDeviceAuth_GetAuthorizedAsBorrower_Request::IsInitialized() const {
  return true;
}

void CDeviceAuth_GetAuthorizedAsBorrower_Request::Swap(CDeviceAuth_GetAuthorizedAsBorrower_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDeviceAuth_GetAuthorizedAsBorrower_Request::InternalSwap(CDeviceAuth_GetAuthorizedAsBorrower_Request* other) {
  std::swap(steamid_, other->steamid_);
  std::swap(include_canceled_, other->include_canceled_);
  std::swap(include_pending_, other->include_pending_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDeviceAuth_GetAuthorizedAsBorrower_Request::GetMetadata() const {
  protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDeviceAuth_GetAuthorizedAsBorrower_Request

// optional fixed64 steamid = 1;
bool CDeviceAuth_GetAuthorizedAsBorrower_Request::has_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDeviceAuth_GetAuthorizedAsBorrower_Request::set_has_steamid() {
  _has_bits_[0] |= 0x00000001u;
}
void CDeviceAuth_GetAuthorizedAsBorrower_Request::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDeviceAuth_GetAuthorizedAsBorrower_Request::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
::google::protobuf::uint64 CDeviceAuth_GetAuthorizedAsBorrower_Request::steamid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Request.steamid)
  return steamid_;
}
void CDeviceAuth_GetAuthorizedAsBorrower_Request::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Request.steamid)
}

// optional bool include_canceled = 2;
bool CDeviceAuth_GetAuthorizedAsBorrower_Request::has_include_canceled() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDeviceAuth_GetAuthorizedAsBorrower_Request::set_has_include_canceled() {
  _has_bits_[0] |= 0x00000002u;
}
void CDeviceAuth_GetAuthorizedAsBorrower_Request::clear_has_include_canceled() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDeviceAuth_GetAuthorizedAsBorrower_Request::clear_include_canceled() {
  include_canceled_ = false;
  clear_has_include_canceled();
}
bool CDeviceAuth_GetAuthorizedAsBorrower_Request::include_canceled() const {
  // @@protoc_insertion_point(field_get:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Request.include_canceled)
  return include_canceled_;
}
void CDeviceAuth_GetAuthorizedAsBorrower_Request::set_include_canceled(bool value) {
  set_has_include_canceled();
  include_canceled_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Request.include_canceled)
}

// optional bool include_pending = 3;
bool CDeviceAuth_GetAuthorizedAsBorrower_Request::has_include_pending() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDeviceAuth_GetAuthorizedAsBorrower_Request::set_has_include_pending() {
  _has_bits_[0] |= 0x00000004u;
}
void CDeviceAuth_GetAuthorizedAsBorrower_Request::clear_has_include_pending() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDeviceAuth_GetAuthorizedAsBorrower_Request::clear_include_pending() {
  include_pending_ = false;
  clear_has_include_pending();
}
bool CDeviceAuth_GetAuthorizedAsBorrower_Request::include_pending() const {
  // @@protoc_insertion_point(field_get:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Request.include_pending)
  return include_pending_;
}
void CDeviceAuth_GetAuthorizedAsBorrower_Request::set_include_pending(bool value) {
  set_has_include_pending();
  include_pending_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Request.include_pending)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::kSteamidFieldNumber;
const int CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::kTimeCreatedFieldNumber;
const int CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::kIsPendingFieldNumber;
const int CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::kIsCanceledFieldNumber;
const int CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::kIsUsedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender)
}
CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender(const CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    reinterpret_cast<char*>(&is_used_) -
    reinterpret_cast<char*>(&steamid_) + sizeof(is_used_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender)
}

void CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&steamid_, 0, reinterpret_cast<char*>(&is_used_) -
    reinterpret_cast<char*>(&steamid_) + sizeof(is_used_));
}

CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::~CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender() {
  // @@protoc_insertion_point(destructor:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender)
  SharedDtor();
}

void CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::SharedDtor() {
}

void CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::descriptor() {
  protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender& CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::default_instance() {
  protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender* CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::New(::google::protobuf::Arena* arena) const {
  CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender* n = new CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender)
  if (_has_bits_[0 / 32] & 31u) {
    ::memset(&steamid_, 0, reinterpret_cast<char*>(&is_used_) -
      reinterpret_cast<char*>(&steamid_) + sizeof(is_used_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time_created = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_time_created();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_created_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_pending = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_is_pending();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_pending_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_canceled = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_is_canceled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_canceled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_used = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_is_used();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_used_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender)
  return false;
#undef DO_
}

void CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional uint32 time_created = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time_created(), output);
  }

  // optional bool is_pending = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_pending(), output);
  }

  // optional bool is_canceled = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_canceled(), output);
  }

  // optional bool is_used = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_used(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender)
}

::google::protobuf::uint8* CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional uint32 time_created = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time_created(), target);
  }

  // optional bool is_pending = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_pending(), target);
  }

  // optional bool is_canceled = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_canceled(), target);
  }

  // optional bool is_used = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_used(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender)
  return target;
}

size_t CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional fixed64 steamid = 1;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional uint32 time_created = 2;
    if (has_time_created()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_created());
    }

    // optional bool is_pending = 3;
    if (has_is_pending()) {
      total_size += 1 + 1;
    }

    // optional bool is_canceled = 4;
    if (has_is_canceled()) {
      total_size += 1 + 1;
    }

    // optional bool is_used = 5;
    if (has_is_used()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender)
  GOOGLE_DCHECK_NE(&from, this);
  const CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender)
    MergeFrom(*source);
  }
}

void CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::MergeFrom(const CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      time_created_ = from.time_created_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_pending_ = from.is_pending_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_canceled_ = from.is_canceled_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_used_ = from.is_used_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::CopyFrom(const CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::IsInitialized() const {
  return true;
}

void CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::Swap(CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::InternalSwap(CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender* other) {
  std::swap(steamid_, other->steamid_);
  std::swap(time_created_, other->time_created_);
  std::swap(is_pending_, other->is_pending_);
  std::swap(is_canceled_, other->is_canceled_);
  std::swap(is_used_, other->is_used_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::GetMetadata() const {
  protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender

// optional fixed64 steamid = 1;
bool CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::has_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::set_has_steamid() {
  _has_bits_[0] |= 0x00000001u;
}
void CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
::google::protobuf::uint64 CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::steamid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender.steamid)
  return steamid_;
}
void CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender.steamid)
}

// optional uint32 time_created = 2;
bool CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::has_time_created() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::set_has_time_created() {
  _has_bits_[0] |= 0x00000002u;
}
void CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::clear_has_time_created() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::clear_time_created() {
  time_created_ = 0u;
  clear_has_time_created();
}
::google::protobuf::uint32 CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::time_created() const {
  // @@protoc_insertion_point(field_get:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender.time_created)
  return time_created_;
}
void CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::set_time_created(::google::protobuf::uint32 value) {
  set_has_time_created();
  time_created_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender.time_created)
}

// optional bool is_pending = 3;
bool CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::has_is_pending() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::set_has_is_pending() {
  _has_bits_[0] |= 0x00000004u;
}
void CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::clear_has_is_pending() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::clear_is_pending() {
  is_pending_ = false;
  clear_has_is_pending();
}
bool CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::is_pending() const {
  // @@protoc_insertion_point(field_get:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender.is_pending)
  return is_pending_;
}
void CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::set_is_pending(bool value) {
  set_has_is_pending();
  is_pending_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender.is_pending)
}

// optional bool is_canceled = 4;
bool CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::has_is_canceled() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::set_has_is_canceled() {
  _has_bits_[0] |= 0x00000008u;
}
void CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::clear_has_is_canceled() {
  _has_bits_[0] &= ~0x00000008u;
}
void CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::clear_is_canceled() {
  is_canceled_ = false;
  clear_has_is_canceled();
}
bool CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::is_canceled() const {
  // @@protoc_insertion_point(field_get:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender.is_canceled)
  return is_canceled_;
}
void CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::set_is_canceled(bool value) {
  set_has_is_canceled();
  is_canceled_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender.is_canceled)
}

// optional bool is_used = 5;
bool CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::has_is_used() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::set_has_is_used() {
  _has_bits_[0] |= 0x00000010u;
}
void CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::clear_has_is_used() {
  _has_bits_[0] &= ~0x00000010u;
}
void CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::clear_is_used() {
  is_used_ = false;
  clear_has_is_used();
}
bool CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::is_used() const {
  // @@protoc_insertion_point(field_get:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender.is_used)
  return is_used_;
}
void CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender::set_is_used(bool value) {
  set_has_is_used();
  is_used_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender.is_used)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDeviceAuth_GetAuthorizedAsBorrower_Response::kLendersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDeviceAuth_GetAuthorizedAsBorrower_Response::CDeviceAuth_GetAuthorizedAsBorrower_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Response)
}
CDeviceAuth_GetAuthorizedAsBorrower_Response::CDeviceAuth_GetAuthorizedAsBorrower_Response(const CDeviceAuth_GetAuthorizedAsBorrower_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      lenders_(from.lenders_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Response)
}

void CDeviceAuth_GetAuthorizedAsBorrower_Response::SharedCtor() {
  _cached_size_ = 0;
}

CDeviceAuth_GetAuthorizedAsBorrower_Response::~CDeviceAuth_GetAuthorizedAsBorrower_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Response)
  SharedDtor();
}

void CDeviceAuth_GetAuthorizedAsBorrower_Response::SharedDtor() {
}

void CDeviceAuth_GetAuthorizedAsBorrower_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDeviceAuth_GetAuthorizedAsBorrower_Response::descriptor() {
  protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDeviceAuth_GetAuthorizedAsBorrower_Response& CDeviceAuth_GetAuthorizedAsBorrower_Response::default_instance() {
  protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDeviceAuth_GetAuthorizedAsBorrower_Response* CDeviceAuth_GetAuthorizedAsBorrower_Response::New(::google::protobuf::Arena* arena) const {
  CDeviceAuth_GetAuthorizedAsBorrower_Response* n = new CDeviceAuth_GetAuthorizedAsBorrower_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDeviceAuth_GetAuthorizedAsBorrower_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Response)
  lenders_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDeviceAuth_GetAuthorizedAsBorrower_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender lenders = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lenders()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Response)
  return false;
#undef DO_
}

void CDeviceAuth_GetAuthorizedAsBorrower_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender lenders = 1;
  for (unsigned int i = 0, n = this->lenders_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->lenders(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Response)
}

::google::protobuf::uint8* CDeviceAuth_GetAuthorizedAsBorrower_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender lenders = 1;
  for (unsigned int i = 0, n = this->lenders_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->lenders(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Response)
  return target;
}

size_t CDeviceAuth_GetAuthorizedAsBorrower_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender lenders = 1;
  {
    unsigned int count = this->lenders_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lenders(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDeviceAuth_GetAuthorizedAsBorrower_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CDeviceAuth_GetAuthorizedAsBorrower_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDeviceAuth_GetAuthorizedAsBorrower_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Response)
    MergeFrom(*source);
  }
}

void CDeviceAuth_GetAuthorizedAsBorrower_Response::MergeFrom(const CDeviceAuth_GetAuthorizedAsBorrower_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lenders_.MergeFrom(from.lenders_);
}

void CDeviceAuth_GetAuthorizedAsBorrower_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDeviceAuth_GetAuthorizedAsBorrower_Response::CopyFrom(const CDeviceAuth_GetAuthorizedAsBorrower_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDeviceAuth_GetAuthorizedAsBorrower_Response::IsInitialized() const {
  return true;
}

void CDeviceAuth_GetAuthorizedAsBorrower_Response::Swap(CDeviceAuth_GetAuthorizedAsBorrower_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDeviceAuth_GetAuthorizedAsBorrower_Response::InternalSwap(CDeviceAuth_GetAuthorizedAsBorrower_Response* other) {
  lenders_.InternalSwap(&other->lenders_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDeviceAuth_GetAuthorizedAsBorrower_Response::GetMetadata() const {
  protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDeviceAuth_GetAuthorizedAsBorrower_Response

// repeated .proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Response.Lender lenders = 1;
int CDeviceAuth_GetAuthorizedAsBorrower_Response::lenders_size() const {
  return lenders_.size();
}
void CDeviceAuth_GetAuthorizedAsBorrower_Response::clear_lenders() {
  lenders_.Clear();
}
const ::proto::steam::CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender& CDeviceAuth_GetAuthorizedAsBorrower_Response::lenders(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Response.lenders)
  return lenders_.Get(index);
}
::proto::steam::CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender* CDeviceAuth_GetAuthorizedAsBorrower_Response::mutable_lenders(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Response.lenders)
  return lenders_.Mutable(index);
}
::proto::steam::CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender* CDeviceAuth_GetAuthorizedAsBorrower_Response::add_lenders() {
  // @@protoc_insertion_point(field_add:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Response.lenders)
  return lenders_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender >*
CDeviceAuth_GetAuthorizedAsBorrower_Response::mutable_lenders() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Response.lenders)
  return &lenders_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::CDeviceAuth_GetAuthorizedAsBorrower_Response_Lender >&
CDeviceAuth_GetAuthorizedAsBorrower_Response::lenders() const {
  // @@protoc_insertion_point(field_list:proto.steam.CDeviceAuth_GetAuthorizedAsBorrower_Response.lenders)
  return lenders_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDeviceAuth_GetExcludedGamesInLibrary_Request::kSteamidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDeviceAuth_GetExcludedGamesInLibrary_Request::CDeviceAuth_GetExcludedGamesInLibrary_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Request)
}
CDeviceAuth_GetExcludedGamesInLibrary_Request::CDeviceAuth_GetExcludedGamesInLibrary_Request(const CDeviceAuth_GetExcludedGamesInLibrary_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  steamid_ = from.steamid_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Request)
}

void CDeviceAuth_GetExcludedGamesInLibrary_Request::SharedCtor() {
  _cached_size_ = 0;
  steamid_ = GOOGLE_ULONGLONG(0);
}

CDeviceAuth_GetExcludedGamesInLibrary_Request::~CDeviceAuth_GetExcludedGamesInLibrary_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Request)
  SharedDtor();
}

void CDeviceAuth_GetExcludedGamesInLibrary_Request::SharedDtor() {
}

void CDeviceAuth_GetExcludedGamesInLibrary_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDeviceAuth_GetExcludedGamesInLibrary_Request::descriptor() {
  protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDeviceAuth_GetExcludedGamesInLibrary_Request& CDeviceAuth_GetExcludedGamesInLibrary_Request::default_instance() {
  protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDeviceAuth_GetExcludedGamesInLibrary_Request* CDeviceAuth_GetExcludedGamesInLibrary_Request::New(::google::protobuf::Arena* arena) const {
  CDeviceAuth_GetExcludedGamesInLibrary_Request* n = new CDeviceAuth_GetExcludedGamesInLibrary_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDeviceAuth_GetExcludedGamesInLibrary_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Request)
  steamid_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDeviceAuth_GetExcludedGamesInLibrary_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Request)
  return false;
#undef DO_
}

void CDeviceAuth_GetExcludedGamesInLibrary_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Request)
}

::google::protobuf::uint8* CDeviceAuth_GetExcludedGamesInLibrary_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Request)
  return target;
}

size_t CDeviceAuth_GetExcludedGamesInLibrary_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional fixed64 steamid = 1;
  if (has_steamid()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDeviceAuth_GetExcludedGamesInLibrary_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CDeviceAuth_GetExcludedGamesInLibrary_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDeviceAuth_GetExcludedGamesInLibrary_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Request)
    MergeFrom(*source);
  }
}

void CDeviceAuth_GetExcludedGamesInLibrary_Request::MergeFrom(const CDeviceAuth_GetExcludedGamesInLibrary_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_steamid()) {
    set_steamid(from.steamid());
  }
}

void CDeviceAuth_GetExcludedGamesInLibrary_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDeviceAuth_GetExcludedGamesInLibrary_Request::CopyFrom(const CDeviceAuth_GetExcludedGamesInLibrary_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDeviceAuth_GetExcludedGamesInLibrary_Request::IsInitialized() const {
  return true;
}

void CDeviceAuth_GetExcludedGamesInLibrary_Request::Swap(CDeviceAuth_GetExcludedGamesInLibrary_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDeviceAuth_GetExcludedGamesInLibrary_Request::InternalSwap(CDeviceAuth_GetExcludedGamesInLibrary_Request* other) {
  std::swap(steamid_, other->steamid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDeviceAuth_GetExcludedGamesInLibrary_Request::GetMetadata() const {
  protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDeviceAuth_GetExcludedGamesInLibrary_Request

// optional fixed64 steamid = 1;
bool CDeviceAuth_GetExcludedGamesInLibrary_Request::has_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDeviceAuth_GetExcludedGamesInLibrary_Request::set_has_steamid() {
  _has_bits_[0] |= 0x00000001u;
}
void CDeviceAuth_GetExcludedGamesInLibrary_Request::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDeviceAuth_GetExcludedGamesInLibrary_Request::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
::google::protobuf::uint64 CDeviceAuth_GetExcludedGamesInLibrary_Request::steamid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Request.steamid)
  return steamid_;
}
void CDeviceAuth_GetExcludedGamesInLibrary_Request::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Request.steamid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::kAppidFieldNumber;
const int CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::kGameNameFieldNumber;
const int CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::kVacBannedFieldNumber;
const int CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::kPackageExcludedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame)
}
CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame(const CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  game_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_game_name()) {
    game_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_name_);
  }
  ::memcpy(&appid_, &from.appid_,
    reinterpret_cast<char*>(&package_excluded_) -
    reinterpret_cast<char*>(&appid_) + sizeof(package_excluded_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame)
}

void CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::SharedCtor() {
  _cached_size_ = 0;
  game_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&appid_, 0, reinterpret_cast<char*>(&package_excluded_) -
    reinterpret_cast<char*>(&appid_) + sizeof(package_excluded_));
}

CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::~CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame() {
  // @@protoc_insertion_point(destructor:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame)
  SharedDtor();
}

void CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::SharedDtor() {
  game_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::descriptor() {
  protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame& CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::default_instance() {
  protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame* CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::New(::google::protobuf::Arena* arena) const {
  CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame* n = new CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame)
  if (has_game_name()) {
    GOOGLE_DCHECK(!game_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*game_name_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&appid_, 0, reinterpret_cast<char*>(&package_excluded_) -
      reinterpret_cast<char*>(&appid_) + sizeof(package_excluded_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string game_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->game_name().data(), this->game_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame.game_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool vac_banned = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_vac_banned();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &vac_banned_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool package_excluded = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_package_excluded();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &package_excluded_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame)
  return false;
#undef DO_
}

void CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional string game_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_name().data(), this->game_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame.game_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->game_name(), output);
  }

  // optional bool vac_banned = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->vac_banned(), output);
  }

  // optional bool package_excluded = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->package_excluded(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame)
}

::google::protobuf::uint8* CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional string game_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_name().data(), this->game_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame.game_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->game_name(), target);
  }

  // optional bool vac_banned = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->vac_banned(), target);
  }

  // optional bool package_excluded = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->package_excluded(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame)
  return target;
}

size_t CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string game_name = 2;
    if (has_game_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game_name());
    }

    // optional uint32 appid = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional bool vac_banned = 3;
    if (has_vac_banned()) {
      total_size += 1 + 1;
    }

    // optional bool package_excluded = 4;
    if (has_package_excluded()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame)
  GOOGLE_DCHECK_NE(&from, this);
  const CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame)
    MergeFrom(*source);
  }
}

void CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::MergeFrom(const CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_game_name();
      game_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000004u) {
      vac_banned_ = from.vac_banned_;
    }
    if (cached_has_bits & 0x00000008u) {
      package_excluded_ = from.package_excluded_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::CopyFrom(const CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::IsInitialized() const {
  return true;
}

void CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::Swap(CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::InternalSwap(CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame* other) {
  game_name_.Swap(&other->game_name_);
  std::swap(appid_, other->appid_);
  std::swap(vac_banned_, other->vac_banned_);
  std::swap(package_excluded_, other->package_excluded_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::GetMetadata() const {
  protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame

// optional uint32 appid = 1;
bool CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::has_appid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::set_has_appid() {
  _has_bits_[0] |= 0x00000002u;
}
void CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::clear_has_appid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
::google::protobuf::uint32 CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::appid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame.appid)
  return appid_;
}
void CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame.appid)
}

// optional string game_name = 2;
bool CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::has_game_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::set_has_game_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::clear_has_game_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::clear_game_name() {
  game_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_game_name();
}
const ::std::string& CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::game_name() const {
  // @@protoc_insertion_point(field_get:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame.game_name)
  return game_name_.GetNoArena();
}
void CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::set_game_name(const ::std::string& value) {
  set_has_game_name();
  game_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame.game_name)
}
#if LANG_CXX11
void CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::set_game_name(::std::string&& value) {
  set_has_game_name();
  game_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame.game_name)
}
#endif
void CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::set_game_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_game_name();
  game_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame.game_name)
}
void CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::set_game_name(const char* value, size_t size) {
  set_has_game_name();
  game_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame.game_name)
}
::std::string* CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::mutable_game_name() {
  set_has_game_name();
  // @@protoc_insertion_point(field_mutable:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame.game_name)
  return game_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::release_game_name() {
  // @@protoc_insertion_point(field_release:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame.game_name)
  clear_has_game_name();
  return game_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::set_allocated_game_name(::std::string* game_name) {
  if (game_name != NULL) {
    set_has_game_name();
  } else {
    clear_has_game_name();
  }
  game_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), game_name);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame.game_name)
}

// optional bool vac_banned = 3;
bool CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::has_vac_banned() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::set_has_vac_banned() {
  _has_bits_[0] |= 0x00000004u;
}
void CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::clear_has_vac_banned() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::clear_vac_banned() {
  vac_banned_ = false;
  clear_has_vac_banned();
}
bool CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::vac_banned() const {
  // @@protoc_insertion_point(field_get:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame.vac_banned)
  return vac_banned_;
}
void CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::set_vac_banned(bool value) {
  set_has_vac_banned();
  vac_banned_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame.vac_banned)
}

// optional bool package_excluded = 4;
bool CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::has_package_excluded() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::set_has_package_excluded() {
  _has_bits_[0] |= 0x00000008u;
}
void CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::clear_has_package_excluded() {
  _has_bits_[0] &= ~0x00000008u;
}
void CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::clear_package_excluded() {
  package_excluded_ = false;
  clear_has_package_excluded();
}
bool CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::package_excluded() const {
  // @@protoc_insertion_point(field_get:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame.package_excluded)
  return package_excluded_;
}
void CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame::set_package_excluded(bool value) {
  set_has_package_excluded();
  package_excluded_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame.package_excluded)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDeviceAuth_GetExcludedGamesInLibrary_Response::kExcludedGamesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDeviceAuth_GetExcludedGamesInLibrary_Response::CDeviceAuth_GetExcludedGamesInLibrary_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response)
}
CDeviceAuth_GetExcludedGamesInLibrary_Response::CDeviceAuth_GetExcludedGamesInLibrary_Response(const CDeviceAuth_GetExcludedGamesInLibrary_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      excluded_games_(from.excluded_games_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response)
}

void CDeviceAuth_GetExcludedGamesInLibrary_Response::SharedCtor() {
  _cached_size_ = 0;
}

CDeviceAuth_GetExcludedGamesInLibrary_Response::~CDeviceAuth_GetExcludedGamesInLibrary_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response)
  SharedDtor();
}

void CDeviceAuth_GetExcludedGamesInLibrary_Response::SharedDtor() {
}

void CDeviceAuth_GetExcludedGamesInLibrary_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDeviceAuth_GetExcludedGamesInLibrary_Response::descriptor() {
  protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDeviceAuth_GetExcludedGamesInLibrary_Response& CDeviceAuth_GetExcludedGamesInLibrary_Response::default_instance() {
  protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDeviceAuth_GetExcludedGamesInLibrary_Response* CDeviceAuth_GetExcludedGamesInLibrary_Response::New(::google::protobuf::Arena* arena) const {
  CDeviceAuth_GetExcludedGamesInLibrary_Response* n = new CDeviceAuth_GetExcludedGamesInLibrary_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDeviceAuth_GetExcludedGamesInLibrary_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response)
  excluded_games_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDeviceAuth_GetExcludedGamesInLibrary_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame excluded_games = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_excluded_games()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response)
  return false;
#undef DO_
}

void CDeviceAuth_GetExcludedGamesInLibrary_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame excluded_games = 1;
  for (unsigned int i = 0, n = this->excluded_games_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->excluded_games(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response)
}

::google::protobuf::uint8* CDeviceAuth_GetExcludedGamesInLibrary_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame excluded_games = 1;
  for (unsigned int i = 0, n = this->excluded_games_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->excluded_games(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response)
  return target;
}

size_t CDeviceAuth_GetExcludedGamesInLibrary_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame excluded_games = 1;
  {
    unsigned int count = this->excluded_games_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->excluded_games(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDeviceAuth_GetExcludedGamesInLibrary_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CDeviceAuth_GetExcludedGamesInLibrary_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDeviceAuth_GetExcludedGamesInLibrary_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response)
    MergeFrom(*source);
  }
}

void CDeviceAuth_GetExcludedGamesInLibrary_Response::MergeFrom(const CDeviceAuth_GetExcludedGamesInLibrary_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  excluded_games_.MergeFrom(from.excluded_games_);
}

void CDeviceAuth_GetExcludedGamesInLibrary_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDeviceAuth_GetExcludedGamesInLibrary_Response::CopyFrom(const CDeviceAuth_GetExcludedGamesInLibrary_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDeviceAuth_GetExcludedGamesInLibrary_Response::IsInitialized() const {
  return true;
}

void CDeviceAuth_GetExcludedGamesInLibrary_Response::Swap(CDeviceAuth_GetExcludedGamesInLibrary_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDeviceAuth_GetExcludedGamesInLibrary_Response::InternalSwap(CDeviceAuth_GetExcludedGamesInLibrary_Response* other) {
  excluded_games_.InternalSwap(&other->excluded_games_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDeviceAuth_GetExcludedGamesInLibrary_Response::GetMetadata() const {
  protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDeviceAuth_GetExcludedGamesInLibrary_Response

// repeated .proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response.ExcludedGame excluded_games = 1;
int CDeviceAuth_GetExcludedGamesInLibrary_Response::excluded_games_size() const {
  return excluded_games_.size();
}
void CDeviceAuth_GetExcludedGamesInLibrary_Response::clear_excluded_games() {
  excluded_games_.Clear();
}
const ::proto::steam::CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame& CDeviceAuth_GetExcludedGamesInLibrary_Response::excluded_games(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response.excluded_games)
  return excluded_games_.Get(index);
}
::proto::steam::CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame* CDeviceAuth_GetExcludedGamesInLibrary_Response::mutable_excluded_games(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response.excluded_games)
  return excluded_games_.Mutable(index);
}
::proto::steam::CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame* CDeviceAuth_GetExcludedGamesInLibrary_Response::add_excluded_games() {
  // @@protoc_insertion_point(field_add:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response.excluded_games)
  return excluded_games_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame >*
CDeviceAuth_GetExcludedGamesInLibrary_Response::mutable_excluded_games() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response.excluded_games)
  return &excluded_games_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::CDeviceAuth_GetExcludedGamesInLibrary_Response_ExcludedGame >&
CDeviceAuth_GetExcludedGamesInLibrary_Response::excluded_games() const {
  // @@protoc_insertion_point(field_list:proto.steam.CDeviceAuth_GetExcludedGamesInLibrary_Response.excluded_games)
  return excluded_games_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

DeviceAuth::~DeviceAuth() {}

const ::google::protobuf::ServiceDescriptor* DeviceAuth::descriptor() {
  protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::file_level_service_descriptors[0];
}

const ::google::protobuf::ServiceDescriptor* DeviceAuth::GetDescriptor() {
  return descriptor();
}

void DeviceAuth::GetOwnAuthorizedDevices(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CDeviceAuth_GetOwnAuthorizedDevices_Request*,
                         ::proto::steam::CDeviceAuth_GetOwnAuthorizedDevices_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetOwnAuthorizedDevices() not implemented.");
  done->Run();
}

void DeviceAuth::AcceptAuthorizationRequest(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CDeviceAuth_AcceptAuthorizationRequest_Request*,
                         ::proto::steam::CDeviceAuth_AcceptAuthorizationRequest_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method AcceptAuthorizationRequest() not implemented.");
  done->Run();
}

void DeviceAuth::AuthorizeRemoteDevice(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CDeviceAuth_AuthorizeRemoteDevice_Request*,
                         ::proto::steam::CDeviceAuth_AuthorizeRemoteDevice_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method AuthorizeRemoteDevice() not implemented.");
  done->Run();
}

void DeviceAuth::DeauthorizeRemoteDevice(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CDeviceAuth_DeauthorizeRemoteDevice_Request*,
                         ::proto::steam::CDeviceAuth_DeauthorizeRemoteDevice_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method DeauthorizeRemoteDevice() not implemented.");
  done->Run();
}

void DeviceAuth::GetUsedAuthorizedDevices(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CDeviceAuth_GetUsedAuthorizedDevices_Request*,
                         ::proto::steam::CDeviceAuth_GetUsedAuthorizedDevices_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetUsedAuthorizedDevices() not implemented.");
  done->Run();
}

void DeviceAuth::GetAuthorizedBorrowers(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CDeviceAuth_GetAuthorizedBorrowers_Request*,
                         ::proto::steam::CDeviceAuth_GetAuthorizedBorrowers_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetAuthorizedBorrowers() not implemented.");
  done->Run();
}

void DeviceAuth::AddAuthorizedBorrowers(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CDeviceAuth_AddAuthorizedBorrowers_Request*,
                         ::proto::steam::CDeviceAuth_AddAuthorizedBorrowers_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method AddAuthorizedBorrowers() not implemented.");
  done->Run();
}

void DeviceAuth::RemoveAuthorizedBorrowers(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CDeviceAuth_RemoveAuthorizedBorrowers_Request*,
                         ::proto::steam::CDeviceAuth_RemoveAuthorizedBorrowers_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method RemoveAuthorizedBorrowers() not implemented.");
  done->Run();
}

void DeviceAuth::GetAuthorizedAsBorrower(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CDeviceAuth_GetAuthorizedAsBorrower_Request*,
                         ::proto::steam::CDeviceAuth_GetAuthorizedAsBorrower_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetAuthorizedAsBorrower() not implemented.");
  done->Run();
}

void DeviceAuth::GetExcludedGamesInLibrary(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CDeviceAuth_GetExcludedGamesInLibrary_Request*,
                         ::proto::steam::CDeviceAuth_GetExcludedGamesInLibrary_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetExcludedGamesInLibrary() not implemented.");
  done->Run();
}

void DeviceAuth::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), protobuf_steammessages_5fdeviceauth_2esteamclient_2eproto::file_level_service_descriptors[0]);
  switch(method->index()) {
    case 0:
      GetOwnAuthorizedDevices(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CDeviceAuth_GetOwnAuthorizedDevices_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CDeviceAuth_GetOwnAuthorizedDevices_Response*>(response),
             done);
      break;
    case 1:
      AcceptAuthorizationRequest(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CDeviceAuth_AcceptAuthorizationRequest_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CDeviceAuth_AcceptAuthorizationRequest_Response*>(response),
             done);
      break;
    case 2:
      AuthorizeRemoteDevice(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CDeviceAuth_AuthorizeRemoteDevice_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CDeviceAuth_AuthorizeRemoteDevice_Response*>(response),
             done);
      break;
    case 3:
      DeauthorizeRemoteDevice(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CDeviceAuth_DeauthorizeRemoteDevice_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CDeviceAuth_DeauthorizeRemoteDevice_Response*>(response),
             done);
      break;
    case 4:
      GetUsedAuthorizedDevices(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CDeviceAuth_GetUsedAuthorizedDevices_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CDeviceAuth_GetUsedAuthorizedDevices_Response*>(response),
             done);
      break;
    case 5:
      GetAuthorizedBorrowers(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CDeviceAuth_GetAuthorizedBorrowers_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CDeviceAuth_GetAuthorizedBorrowers_Response*>(response),
             done);
      break;
    case 6:
      AddAuthorizedBorrowers(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CDeviceAuth_AddAuthorizedBorrowers_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CDeviceAuth_AddAuthorizedBorrowers_Response*>(response),
             done);
      break;
    case 7:
      RemoveAuthorizedBorrowers(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CDeviceAuth_RemoveAuthorizedBorrowers_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CDeviceAuth_RemoveAuthorizedBorrowers_Response*>(response),
             done);
      break;
    case 8:
      GetAuthorizedAsBorrower(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CDeviceAuth_GetAuthorizedAsBorrower_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CDeviceAuth_GetAuthorizedAsBorrower_Response*>(response),
             done);
      break;
    case 9:
      GetExcludedGamesInLibrary(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CDeviceAuth_GetExcludedGamesInLibrary_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CDeviceAuth_GetExcludedGamesInLibrary_Response*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& DeviceAuth::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::steam::CDeviceAuth_GetOwnAuthorizedDevices_Request::default_instance();
    case 1:
      return ::proto::steam::CDeviceAuth_AcceptAuthorizationRequest_Request::default_instance();
    case 2:
      return ::proto::steam::CDeviceAuth_AuthorizeRemoteDevice_Request::default_instance();
    case 3:
      return ::proto::steam::CDeviceAuth_DeauthorizeRemoteDevice_Request::default_instance();
    case 4:
      return ::proto::steam::CDeviceAuth_GetUsedAuthorizedDevices_Request::default_instance();
    case 5:
      return ::proto::steam::CDeviceAuth_GetAuthorizedBorrowers_Request::default_instance();
    case 6:
      return ::proto::steam::CDeviceAuth_AddAuthorizedBorrowers_Request::default_instance();
    case 7:
      return ::proto::steam::CDeviceAuth_RemoveAuthorizedBorrowers_Request::default_instance();
    case 8:
      return ::proto::steam::CDeviceAuth_GetAuthorizedAsBorrower_Request::default_instance();
    case 9:
      return ::proto::steam::CDeviceAuth_GetExcludedGamesInLibrary_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& DeviceAuth::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::steam::CDeviceAuth_GetOwnAuthorizedDevices_Response::default_instance();
    case 1:
      return ::proto::steam::CDeviceAuth_AcceptAuthorizationRequest_Response::default_instance();
    case 2:
      return ::proto::steam::CDeviceAuth_AuthorizeRemoteDevice_Response::default_instance();
    case 3:
      return ::proto::steam::CDeviceAuth_DeauthorizeRemoteDevice_Response::default_instance();
    case 4:
      return ::proto::steam::CDeviceAuth_GetUsedAuthorizedDevices_Response::default_instance();
    case 5:
      return ::proto::steam::CDeviceAuth_GetAuthorizedBorrowers_Response::default_instance();
    case 6:
      return ::proto::steam::CDeviceAuth_AddAuthorizedBorrowers_Response::default_instance();
    case 7:
      return ::proto::steam::CDeviceAuth_RemoveAuthorizedBorrowers_Response::default_instance();
    case 8:
      return ::proto::steam::CDeviceAuth_GetAuthorizedAsBorrower_Response::default_instance();
    case 9:
      return ::proto::steam::CDeviceAuth_GetExcludedGamesInLibrary_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

DeviceAuth_Stub::DeviceAuth_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
DeviceAuth_Stub::DeviceAuth_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
DeviceAuth_Stub::~DeviceAuth_Stub() {
  if (owns_channel_) delete channel_;
}

void DeviceAuth_Stub::GetOwnAuthorizedDevices(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CDeviceAuth_GetOwnAuthorizedDevices_Request* request,
                              ::proto::steam::CDeviceAuth_GetOwnAuthorizedDevices_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void DeviceAuth_Stub::AcceptAuthorizationRequest(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CDeviceAuth_AcceptAuthorizationRequest_Request* request,
                              ::proto::steam::CDeviceAuth_AcceptAuthorizationRequest_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void DeviceAuth_Stub::AuthorizeRemoteDevice(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CDeviceAuth_AuthorizeRemoteDevice_Request* request,
                              ::proto::steam::CDeviceAuth_AuthorizeRemoteDevice_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void DeviceAuth_Stub::DeauthorizeRemoteDevice(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CDeviceAuth_DeauthorizeRemoteDevice_Request* request,
                              ::proto::steam::CDeviceAuth_DeauthorizeRemoteDevice_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void DeviceAuth_Stub::GetUsedAuthorizedDevices(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CDeviceAuth_GetUsedAuthorizedDevices_Request* request,
                              ::proto::steam::CDeviceAuth_GetUsedAuthorizedDevices_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void DeviceAuth_Stub::GetAuthorizedBorrowers(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CDeviceAuth_GetAuthorizedBorrowers_Request* request,
                              ::proto::steam::CDeviceAuth_GetAuthorizedBorrowers_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}
void DeviceAuth_Stub::AddAuthorizedBorrowers(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CDeviceAuth_AddAuthorizedBorrowers_Request* request,
                              ::proto::steam::CDeviceAuth_AddAuthorizedBorrowers_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(6),
                       controller, request, response, done);
}
void DeviceAuth_Stub::RemoveAuthorizedBorrowers(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CDeviceAuth_RemoveAuthorizedBorrowers_Request* request,
                              ::proto::steam::CDeviceAuth_RemoveAuthorizedBorrowers_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(7),
                       controller, request, response, done);
}
void DeviceAuth_Stub::GetAuthorizedAsBorrower(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CDeviceAuth_GetAuthorizedAsBorrower_Request* request,
                              ::proto::steam::CDeviceAuth_GetAuthorizedAsBorrower_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(8),
                       controller, request, response, done);
}
void DeviceAuth_Stub::GetExcludedGamesInLibrary(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CDeviceAuth_GetExcludedGamesInLibrary_Request* request,
                              ::proto::steam::CDeviceAuth_GetExcludedGamesInLibrary_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(9),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace steam
}  // namespace proto

// @@protoc_insertion_point(global_scope)
