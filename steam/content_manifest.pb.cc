// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: content_manifest.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "content_manifest.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace steam {
class ContentManifestPayload_FileMapping_ChunkDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ContentManifestPayload_FileMapping_ChunkData> {
} _ContentManifestPayload_FileMapping_ChunkData_default_instance_;
class ContentManifestPayload_FileMappingDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ContentManifestPayload_FileMapping> {
} _ContentManifestPayload_FileMapping_default_instance_;
class ContentManifestPayloadDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ContentManifestPayload> {
} _ContentManifestPayload_default_instance_;
class ContentManifestMetadataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ContentManifestMetadata> {
} _ContentManifestMetadata_default_instance_;
class ContentManifestSignatureDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ContentManifestSignature> {
} _ContentManifestSignature_default_instance_;

namespace protobuf_content_5fmanifest_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[5];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentManifestPayload_FileMapping_ChunkData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentManifestPayload_FileMapping_ChunkData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentManifestPayload_FileMapping_ChunkData, sha_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentManifestPayload_FileMapping_ChunkData, crc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentManifestPayload_FileMapping_ChunkData, offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentManifestPayload_FileMapping_ChunkData, cb_original_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentManifestPayload_FileMapping_ChunkData, cb_compressed_),
  0,
  2,
  1,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentManifestPayload_FileMapping, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentManifestPayload_FileMapping, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentManifestPayload_FileMapping, filename_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentManifestPayload_FileMapping, size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentManifestPayload_FileMapping, flags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentManifestPayload_FileMapping, sha_filename_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentManifestPayload_FileMapping, sha_content_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentManifestPayload_FileMapping, chunks_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentManifestPayload_FileMapping, linktarget_),
  0,
  4,
  5,
  1,
  2,
  ~0u,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentManifestPayload, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentManifestPayload, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentManifestPayload, mappings_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentManifestMetadata, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentManifestMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentManifestMetadata, depot_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentManifestMetadata, gid_manifest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentManifestMetadata, creation_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentManifestMetadata, filenames_encrypted_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentManifestMetadata, cb_disk_original_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentManifestMetadata, cb_disk_compressed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentManifestMetadata, unique_chunks_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentManifestMetadata, crc_encrypted_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentManifestMetadata, crc_clear_),
  1,
  0,
  2,
  4,
  3,
  6,
  5,
  7,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentManifestSignature, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentManifestSignature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentManifestSignature, signature_),
  0,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 10, sizeof(ContentManifestPayload_FileMapping_ChunkData)},
  { 15, 27, sizeof(ContentManifestPayload_FileMapping)},
  { 34, 40, sizeof(ContentManifestPayload)},
  { 41, 55, sizeof(ContentManifestMetadata)},
  { 64, 70, sizeof(ContentManifestSignature)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_ContentManifestPayload_FileMapping_ChunkData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ContentManifestPayload_FileMapping_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ContentManifestPayload_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ContentManifestMetadata_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ContentManifestSignature_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "content_manifest.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

}  // namespace

void TableStruct::Shutdown() {
  _ContentManifestPayload_FileMapping_ChunkData_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _ContentManifestPayload_FileMapping_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _ContentManifestPayload_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _ContentManifestMetadata_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _ContentManifestSignature_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _ContentManifestPayload_FileMapping_ChunkData_default_instance_.DefaultConstruct();
  _ContentManifestPayload_FileMapping_default_instance_.DefaultConstruct();
  _ContentManifestPayload_default_instance_.DefaultConstruct();
  _ContentManifestMetadata_default_instance_.DefaultConstruct();
  _ContentManifestSignature_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\026content_manifest.proto\022\013proto.steam\"\207\003"
      "\n\026ContentManifestPayload\022A\n\010mappings\030\001 \003"
      "(\0132/.proto.steam.ContentManifestPayload."
      "FileMapping\032\251\002\n\013FileMapping\022\020\n\010filename\030"
      "\001 \001(\t\022\014\n\004size\030\002 \001(\004\022\r\n\005flags\030\003 \001(\r\022\024\n\014sh"
      "a_filename\030\004 \001(\014\022\023\n\013sha_content\030\005 \001(\014\022I\n"
      "\006chunks\030\006 \003(\01329.proto.steam.ContentManif"
      "estPayload.FileMapping.ChunkData\022\022\n\nlink"
      "target\030\007 \001(\t\032a\n\tChunkData\022\013\n\003sha\030\001 \001(\014\022\013"
      "\n\003crc\030\002 \001(\007\022\016\n\006offset\030\003 \001(\004\022\023\n\013cb_origin"
      "al\030\004 \001(\r\022\025\n\rcb_compressed\030\005 \001(\r\"\354\001\n\027Cont"
      "entManifestMetadata\022\020\n\010depot_id\030\001 \001(\r\022\024\n"
      "\014gid_manifest\030\002 \001(\004\022\025\n\rcreation_time\030\003 \001"
      "(\r\022\033\n\023filenames_encrypted\030\004 \001(\010\022\030\n\020cb_di"
      "sk_original\030\005 \001(\004\022\032\n\022cb_disk_compressed\030"
      "\006 \001(\004\022\025\n\runique_chunks\030\007 \001(\r\022\025\n\rcrc_encr"
      "ypted\030\010 \001(\r\022\021\n\tcrc_clear\030\t \001(\r\"-\n\030Conten"
      "tManifestSignature\022\021\n\tsignature\030\001 \001(\014B\005H"
      "\001\200\001\000"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 724);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "content_manifest.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_content_5fmanifest_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ContentManifestPayload_FileMapping_ChunkData::kShaFieldNumber;
const int ContentManifestPayload_FileMapping_ChunkData::kCrcFieldNumber;
const int ContentManifestPayload_FileMapping_ChunkData::kOffsetFieldNumber;
const int ContentManifestPayload_FileMapping_ChunkData::kCbOriginalFieldNumber;
const int ContentManifestPayload_FileMapping_ChunkData::kCbCompressedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ContentManifestPayload_FileMapping_ChunkData::ContentManifestPayload_FileMapping_ChunkData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_content_5fmanifest_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.ContentManifestPayload.FileMapping.ChunkData)
}
ContentManifestPayload_FileMapping_ChunkData::ContentManifestPayload_FileMapping_ChunkData(const ContentManifestPayload_FileMapping_ChunkData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sha_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sha()) {
    sha_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha_);
  }
  ::memcpy(&offset_, &from.offset_,
    reinterpret_cast<char*>(&cb_compressed_) -
    reinterpret_cast<char*>(&offset_) + sizeof(cb_compressed_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.ContentManifestPayload.FileMapping.ChunkData)
}

void ContentManifestPayload_FileMapping_ChunkData::SharedCtor() {
  _cached_size_ = 0;
  sha_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&offset_, 0, reinterpret_cast<char*>(&cb_compressed_) -
    reinterpret_cast<char*>(&offset_) + sizeof(cb_compressed_));
}

ContentManifestPayload_FileMapping_ChunkData::~ContentManifestPayload_FileMapping_ChunkData() {
  // @@protoc_insertion_point(destructor:proto.steam.ContentManifestPayload.FileMapping.ChunkData)
  SharedDtor();
}

void ContentManifestPayload_FileMapping_ChunkData::SharedDtor() {
  sha_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ContentManifestPayload_FileMapping_ChunkData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContentManifestPayload_FileMapping_ChunkData::descriptor() {
  protobuf_content_5fmanifest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_content_5fmanifest_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ContentManifestPayload_FileMapping_ChunkData& ContentManifestPayload_FileMapping_ChunkData::default_instance() {
  protobuf_content_5fmanifest_2eproto::InitDefaults();
  return *internal_default_instance();
}

ContentManifestPayload_FileMapping_ChunkData* ContentManifestPayload_FileMapping_ChunkData::New(::google::protobuf::Arena* arena) const {
  ContentManifestPayload_FileMapping_ChunkData* n = new ContentManifestPayload_FileMapping_ChunkData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ContentManifestPayload_FileMapping_ChunkData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.ContentManifestPayload.FileMapping.ChunkData)
  if (has_sha()) {
    GOOGLE_DCHECK(!sha_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*sha_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 30u) {
    ::memset(&offset_, 0, reinterpret_cast<char*>(&cb_compressed_) -
      reinterpret_cast<char*>(&offset_) + sizeof(cb_compressed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ContentManifestPayload_FileMapping_ChunkData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.ContentManifestPayload.FileMapping.ChunkData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes sha = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sha()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 crc = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_crc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &crc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 offset = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cb_original = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_cb_original();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cb_original_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cb_compressed = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_cb_compressed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cb_compressed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.ContentManifestPayload.FileMapping.ChunkData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.ContentManifestPayload.FileMapping.ChunkData)
  return false;
#undef DO_
}

void ContentManifestPayload_FileMapping_ChunkData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.ContentManifestPayload.FileMapping.ChunkData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes sha = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->sha(), output);
  }

  // optional fixed32 crc = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->crc(), output);
  }

  // optional uint64 offset = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->offset(), output);
  }

  // optional uint32 cb_original = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cb_original(), output);
  }

  // optional uint32 cb_compressed = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->cb_compressed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.ContentManifestPayload.FileMapping.ChunkData)
}

::google::protobuf::uint8* ContentManifestPayload_FileMapping_ChunkData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.ContentManifestPayload.FileMapping.ChunkData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes sha = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->sha(), target);
  }

  // optional fixed32 crc = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->crc(), target);
  }

  // optional uint64 offset = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->offset(), target);
  }

  // optional uint32 cb_original = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cb_original(), target);
  }

  // optional uint32 cb_compressed = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->cb_compressed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.ContentManifestPayload.FileMapping.ChunkData)
  return target;
}

size_t ContentManifestPayload_FileMapping_ChunkData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.ContentManifestPayload.FileMapping.ChunkData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional bytes sha = 1;
    if (has_sha()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sha());
    }

    // optional uint64 offset = 3;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->offset());
    }

    // optional fixed32 crc = 2;
    if (has_crc()) {
      total_size += 1 + 4;
    }

    // optional uint32 cb_original = 4;
    if (has_cb_original()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cb_original());
    }

    // optional uint32 cb_compressed = 5;
    if (has_cb_compressed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cb_compressed());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContentManifestPayload_FileMapping_ChunkData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.ContentManifestPayload.FileMapping.ChunkData)
  GOOGLE_DCHECK_NE(&from, this);
  const ContentManifestPayload_FileMapping_ChunkData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ContentManifestPayload_FileMapping_ChunkData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.ContentManifestPayload.FileMapping.ChunkData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.ContentManifestPayload.FileMapping.ChunkData)
    MergeFrom(*source);
  }
}

void ContentManifestPayload_FileMapping_ChunkData::MergeFrom(const ContentManifestPayload_FileMapping_ChunkData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.ContentManifestPayload.FileMapping.ChunkData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_sha();
      sha_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha_);
    }
    if (cached_has_bits & 0x00000002u) {
      offset_ = from.offset_;
    }
    if (cached_has_bits & 0x00000004u) {
      crc_ = from.crc_;
    }
    if (cached_has_bits & 0x00000008u) {
      cb_original_ = from.cb_original_;
    }
    if (cached_has_bits & 0x00000010u) {
      cb_compressed_ = from.cb_compressed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ContentManifestPayload_FileMapping_ChunkData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.ContentManifestPayload.FileMapping.ChunkData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContentManifestPayload_FileMapping_ChunkData::CopyFrom(const ContentManifestPayload_FileMapping_ChunkData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.ContentManifestPayload.FileMapping.ChunkData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContentManifestPayload_FileMapping_ChunkData::IsInitialized() const {
  return true;
}

void ContentManifestPayload_FileMapping_ChunkData::Swap(ContentManifestPayload_FileMapping_ChunkData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ContentManifestPayload_FileMapping_ChunkData::InternalSwap(ContentManifestPayload_FileMapping_ChunkData* other) {
  sha_.Swap(&other->sha_);
  std::swap(offset_, other->offset_);
  std::swap(crc_, other->crc_);
  std::swap(cb_original_, other->cb_original_);
  std::swap(cb_compressed_, other->cb_compressed_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ContentManifestPayload_FileMapping_ChunkData::GetMetadata() const {
  protobuf_content_5fmanifest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_content_5fmanifest_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ContentManifestPayload_FileMapping_ChunkData

// optional bytes sha = 1;
bool ContentManifestPayload_FileMapping_ChunkData::has_sha() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ContentManifestPayload_FileMapping_ChunkData::set_has_sha() {
  _has_bits_[0] |= 0x00000001u;
}
void ContentManifestPayload_FileMapping_ChunkData::clear_has_sha() {
  _has_bits_[0] &= ~0x00000001u;
}
void ContentManifestPayload_FileMapping_ChunkData::clear_sha() {
  sha_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sha();
}
const ::std::string& ContentManifestPayload_FileMapping_ChunkData::sha() const {
  // @@protoc_insertion_point(field_get:proto.steam.ContentManifestPayload.FileMapping.ChunkData.sha)
  return sha_.GetNoArena();
}
void ContentManifestPayload_FileMapping_ChunkData::set_sha(const ::std::string& value) {
  set_has_sha();
  sha_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.ContentManifestPayload.FileMapping.ChunkData.sha)
}
#if LANG_CXX11
void ContentManifestPayload_FileMapping_ChunkData::set_sha(::std::string&& value) {
  set_has_sha();
  sha_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.ContentManifestPayload.FileMapping.ChunkData.sha)
}
#endif
void ContentManifestPayload_FileMapping_ChunkData::set_sha(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sha();
  sha_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.ContentManifestPayload.FileMapping.ChunkData.sha)
}
void ContentManifestPayload_FileMapping_ChunkData::set_sha(const void* value, size_t size) {
  set_has_sha();
  sha_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.ContentManifestPayload.FileMapping.ChunkData.sha)
}
::std::string* ContentManifestPayload_FileMapping_ChunkData::mutable_sha() {
  set_has_sha();
  // @@protoc_insertion_point(field_mutable:proto.steam.ContentManifestPayload.FileMapping.ChunkData.sha)
  return sha_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ContentManifestPayload_FileMapping_ChunkData::release_sha() {
  // @@protoc_insertion_point(field_release:proto.steam.ContentManifestPayload.FileMapping.ChunkData.sha)
  clear_has_sha();
  return sha_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ContentManifestPayload_FileMapping_ChunkData::set_allocated_sha(::std::string* sha) {
  if (sha != NULL) {
    set_has_sha();
  } else {
    clear_has_sha();
  }
  sha_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sha);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.ContentManifestPayload.FileMapping.ChunkData.sha)
}

// optional fixed32 crc = 2;
bool ContentManifestPayload_FileMapping_ChunkData::has_crc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ContentManifestPayload_FileMapping_ChunkData::set_has_crc() {
  _has_bits_[0] |= 0x00000004u;
}
void ContentManifestPayload_FileMapping_ChunkData::clear_has_crc() {
  _has_bits_[0] &= ~0x00000004u;
}
void ContentManifestPayload_FileMapping_ChunkData::clear_crc() {
  crc_ = 0u;
  clear_has_crc();
}
::google::protobuf::uint32 ContentManifestPayload_FileMapping_ChunkData::crc() const {
  // @@protoc_insertion_point(field_get:proto.steam.ContentManifestPayload.FileMapping.ChunkData.crc)
  return crc_;
}
void ContentManifestPayload_FileMapping_ChunkData::set_crc(::google::protobuf::uint32 value) {
  set_has_crc();
  crc_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.ContentManifestPayload.FileMapping.ChunkData.crc)
}

// optional uint64 offset = 3;
bool ContentManifestPayload_FileMapping_ChunkData::has_offset() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ContentManifestPayload_FileMapping_ChunkData::set_has_offset() {
  _has_bits_[0] |= 0x00000002u;
}
void ContentManifestPayload_FileMapping_ChunkData::clear_has_offset() {
  _has_bits_[0] &= ~0x00000002u;
}
void ContentManifestPayload_FileMapping_ChunkData::clear_offset() {
  offset_ = GOOGLE_ULONGLONG(0);
  clear_has_offset();
}
::google::protobuf::uint64 ContentManifestPayload_FileMapping_ChunkData::offset() const {
  // @@protoc_insertion_point(field_get:proto.steam.ContentManifestPayload.FileMapping.ChunkData.offset)
  return offset_;
}
void ContentManifestPayload_FileMapping_ChunkData::set_offset(::google::protobuf::uint64 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.ContentManifestPayload.FileMapping.ChunkData.offset)
}

// optional uint32 cb_original = 4;
bool ContentManifestPayload_FileMapping_ChunkData::has_cb_original() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ContentManifestPayload_FileMapping_ChunkData::set_has_cb_original() {
  _has_bits_[0] |= 0x00000008u;
}
void ContentManifestPayload_FileMapping_ChunkData::clear_has_cb_original() {
  _has_bits_[0] &= ~0x00000008u;
}
void ContentManifestPayload_FileMapping_ChunkData::clear_cb_original() {
  cb_original_ = 0u;
  clear_has_cb_original();
}
::google::protobuf::uint32 ContentManifestPayload_FileMapping_ChunkData::cb_original() const {
  // @@protoc_insertion_point(field_get:proto.steam.ContentManifestPayload.FileMapping.ChunkData.cb_original)
  return cb_original_;
}
void ContentManifestPayload_FileMapping_ChunkData::set_cb_original(::google::protobuf::uint32 value) {
  set_has_cb_original();
  cb_original_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.ContentManifestPayload.FileMapping.ChunkData.cb_original)
}

// optional uint32 cb_compressed = 5;
bool ContentManifestPayload_FileMapping_ChunkData::has_cb_compressed() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ContentManifestPayload_FileMapping_ChunkData::set_has_cb_compressed() {
  _has_bits_[0] |= 0x00000010u;
}
void ContentManifestPayload_FileMapping_ChunkData::clear_has_cb_compressed() {
  _has_bits_[0] &= ~0x00000010u;
}
void ContentManifestPayload_FileMapping_ChunkData::clear_cb_compressed() {
  cb_compressed_ = 0u;
  clear_has_cb_compressed();
}
::google::protobuf::uint32 ContentManifestPayload_FileMapping_ChunkData::cb_compressed() const {
  // @@protoc_insertion_point(field_get:proto.steam.ContentManifestPayload.FileMapping.ChunkData.cb_compressed)
  return cb_compressed_;
}
void ContentManifestPayload_FileMapping_ChunkData::set_cb_compressed(::google::protobuf::uint32 value) {
  set_has_cb_compressed();
  cb_compressed_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.ContentManifestPayload.FileMapping.ChunkData.cb_compressed)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ContentManifestPayload_FileMapping::kFilenameFieldNumber;
const int ContentManifestPayload_FileMapping::kSizeFieldNumber;
const int ContentManifestPayload_FileMapping::kFlagsFieldNumber;
const int ContentManifestPayload_FileMapping::kShaFilenameFieldNumber;
const int ContentManifestPayload_FileMapping::kShaContentFieldNumber;
const int ContentManifestPayload_FileMapping::kChunksFieldNumber;
const int ContentManifestPayload_FileMapping::kLinktargetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ContentManifestPayload_FileMapping::ContentManifestPayload_FileMapping()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_content_5fmanifest_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.ContentManifestPayload.FileMapping)
}
ContentManifestPayload_FileMapping::ContentManifestPayload_FileMapping(const ContentManifestPayload_FileMapping& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      chunks_(from.chunks_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_filename()) {
    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  sha_filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sha_filename()) {
    sha_filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha_filename_);
  }
  sha_content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sha_content()) {
    sha_content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha_content_);
  }
  linktarget_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_linktarget()) {
    linktarget_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.linktarget_);
  }
  ::memcpy(&size_, &from.size_,
    reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&size_) + sizeof(flags_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.ContentManifestPayload.FileMapping)
}

void ContentManifestPayload_FileMapping::SharedCtor() {
  _cached_size_ = 0;
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sha_filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sha_content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  linktarget_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&size_, 0, reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&size_) + sizeof(flags_));
}

ContentManifestPayload_FileMapping::~ContentManifestPayload_FileMapping() {
  // @@protoc_insertion_point(destructor:proto.steam.ContentManifestPayload.FileMapping)
  SharedDtor();
}

void ContentManifestPayload_FileMapping::SharedDtor() {
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sha_filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sha_content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  linktarget_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ContentManifestPayload_FileMapping::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContentManifestPayload_FileMapping::descriptor() {
  protobuf_content_5fmanifest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_content_5fmanifest_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ContentManifestPayload_FileMapping& ContentManifestPayload_FileMapping::default_instance() {
  protobuf_content_5fmanifest_2eproto::InitDefaults();
  return *internal_default_instance();
}

ContentManifestPayload_FileMapping* ContentManifestPayload_FileMapping::New(::google::protobuf::Arena* arena) const {
  ContentManifestPayload_FileMapping* n = new ContentManifestPayload_FileMapping;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ContentManifestPayload_FileMapping::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.ContentManifestPayload.FileMapping)
  chunks_.Clear();
  if (_has_bits_[0 / 32] & 15u) {
    if (has_filename()) {
      GOOGLE_DCHECK(!filename_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*filename_.UnsafeRawStringPointer())->clear();
    }
    if (has_sha_filename()) {
      GOOGLE_DCHECK(!sha_filename_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*sha_filename_.UnsafeRawStringPointer())->clear();
    }
    if (has_sha_content()) {
      GOOGLE_DCHECK(!sha_content_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*sha_content_.UnsafeRawStringPointer())->clear();
    }
    if (has_linktarget()) {
      GOOGLE_DCHECK(!linktarget_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*linktarget_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 48u) {
    ::memset(&size_, 0, reinterpret_cast<char*>(&flags_) -
      reinterpret_cast<char*>(&size_) + sizeof(flags_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ContentManifestPayload_FileMapping::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.ContentManifestPayload.FileMapping)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string filename = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.ContentManifestPayload.FileMapping.filename");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 flags = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_flags();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes sha_filename = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sha_filename()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes sha_content = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sha_content()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.ContentManifestPayload.FileMapping.ChunkData chunks = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chunks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string linktarget = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_linktarget()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->linktarget().data(), this->linktarget().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.ContentManifestPayload.FileMapping.linktarget");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.ContentManifestPayload.FileMapping)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.ContentManifestPayload.FileMapping)
  return false;
#undef DO_
}

void ContentManifestPayload_FileMapping::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.ContentManifestPayload.FileMapping)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string filename = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.ContentManifestPayload.FileMapping.filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->filename(), output);
  }

  // optional uint64 size = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->size(), output);
  }

  // optional uint32 flags = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->flags(), output);
  }

  // optional bytes sha_filename = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->sha_filename(), output);
  }

  // optional bytes sha_content = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->sha_content(), output);
  }

  // repeated .proto.steam.ContentManifestPayload.FileMapping.ChunkData chunks = 6;
  for (unsigned int i = 0, n = this->chunks_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->chunks(i), output);
  }

  // optional string linktarget = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->linktarget().data(), this->linktarget().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.ContentManifestPayload.FileMapping.linktarget");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->linktarget(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.ContentManifestPayload.FileMapping)
}

::google::protobuf::uint8* ContentManifestPayload_FileMapping::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.ContentManifestPayload.FileMapping)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string filename = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.ContentManifestPayload.FileMapping.filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->filename(), target);
  }

  // optional uint64 size = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->size(), target);
  }

  // optional uint32 flags = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->flags(), target);
  }

  // optional bytes sha_filename = 4;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->sha_filename(), target);
  }

  // optional bytes sha_content = 5;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->sha_content(), target);
  }

  // repeated .proto.steam.ContentManifestPayload.FileMapping.ChunkData chunks = 6;
  for (unsigned int i = 0, n = this->chunks_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->chunks(i), deterministic, target);
  }

  // optional string linktarget = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->linktarget().data(), this->linktarget().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.ContentManifestPayload.FileMapping.linktarget");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->linktarget(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.ContentManifestPayload.FileMapping)
  return target;
}

size_t ContentManifestPayload_FileMapping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.ContentManifestPayload.FileMapping)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.steam.ContentManifestPayload.FileMapping.ChunkData chunks = 6;
  {
    unsigned int count = this->chunks_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chunks(i));
    }
  }

  if (_has_bits_[0 / 32] & 63u) {
    // optional string filename = 1;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional bytes sha_filename = 4;
    if (has_sha_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sha_filename());
    }

    // optional bytes sha_content = 5;
    if (has_sha_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sha_content());
    }

    // optional string linktarget = 7;
    if (has_linktarget()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->linktarget());
    }

    // optional uint64 size = 2;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->size());
    }

    // optional uint32 flags = 3;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContentManifestPayload_FileMapping::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.ContentManifestPayload.FileMapping)
  GOOGLE_DCHECK_NE(&from, this);
  const ContentManifestPayload_FileMapping* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ContentManifestPayload_FileMapping>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.ContentManifestPayload.FileMapping)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.ContentManifestPayload.FileMapping)
    MergeFrom(*source);
  }
}

void ContentManifestPayload_FileMapping::MergeFrom(const ContentManifestPayload_FileMapping& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.ContentManifestPayload.FileMapping)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  chunks_.MergeFrom(from.chunks_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_filename();
      filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_sha_filename();
      sha_filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha_filename_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_sha_content();
      sha_content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha_content_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_linktarget();
      linktarget_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.linktarget_);
    }
    if (cached_has_bits & 0x00000010u) {
      size_ = from.size_;
    }
    if (cached_has_bits & 0x00000020u) {
      flags_ = from.flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ContentManifestPayload_FileMapping::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.ContentManifestPayload.FileMapping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContentManifestPayload_FileMapping::CopyFrom(const ContentManifestPayload_FileMapping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.ContentManifestPayload.FileMapping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContentManifestPayload_FileMapping::IsInitialized() const {
  return true;
}

void ContentManifestPayload_FileMapping::Swap(ContentManifestPayload_FileMapping* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ContentManifestPayload_FileMapping::InternalSwap(ContentManifestPayload_FileMapping* other) {
  chunks_.InternalSwap(&other->chunks_);
  filename_.Swap(&other->filename_);
  sha_filename_.Swap(&other->sha_filename_);
  sha_content_.Swap(&other->sha_content_);
  linktarget_.Swap(&other->linktarget_);
  std::swap(size_, other->size_);
  std::swap(flags_, other->flags_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ContentManifestPayload_FileMapping::GetMetadata() const {
  protobuf_content_5fmanifest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_content_5fmanifest_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ContentManifestPayload_FileMapping

// optional string filename = 1;
bool ContentManifestPayload_FileMapping::has_filename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ContentManifestPayload_FileMapping::set_has_filename() {
  _has_bits_[0] |= 0x00000001u;
}
void ContentManifestPayload_FileMapping::clear_has_filename() {
  _has_bits_[0] &= ~0x00000001u;
}
void ContentManifestPayload_FileMapping::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_filename();
}
const ::std::string& ContentManifestPayload_FileMapping::filename() const {
  // @@protoc_insertion_point(field_get:proto.steam.ContentManifestPayload.FileMapping.filename)
  return filename_.GetNoArena();
}
void ContentManifestPayload_FileMapping::set_filename(const ::std::string& value) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.ContentManifestPayload.FileMapping.filename)
}
#if LANG_CXX11
void ContentManifestPayload_FileMapping::set_filename(::std::string&& value) {
  set_has_filename();
  filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.ContentManifestPayload.FileMapping.filename)
}
#endif
void ContentManifestPayload_FileMapping::set_filename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.ContentManifestPayload.FileMapping.filename)
}
void ContentManifestPayload_FileMapping::set_filename(const char* value, size_t size) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.ContentManifestPayload.FileMapping.filename)
}
::std::string* ContentManifestPayload_FileMapping::mutable_filename() {
  set_has_filename();
  // @@protoc_insertion_point(field_mutable:proto.steam.ContentManifestPayload.FileMapping.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ContentManifestPayload_FileMapping::release_filename() {
  // @@protoc_insertion_point(field_release:proto.steam.ContentManifestPayload.FileMapping.filename)
  clear_has_filename();
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ContentManifestPayload_FileMapping::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    set_has_filename();
  } else {
    clear_has_filename();
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.ContentManifestPayload.FileMapping.filename)
}

// optional uint64 size = 2;
bool ContentManifestPayload_FileMapping::has_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ContentManifestPayload_FileMapping::set_has_size() {
  _has_bits_[0] |= 0x00000010u;
}
void ContentManifestPayload_FileMapping::clear_has_size() {
  _has_bits_[0] &= ~0x00000010u;
}
void ContentManifestPayload_FileMapping::clear_size() {
  size_ = GOOGLE_ULONGLONG(0);
  clear_has_size();
}
::google::protobuf::uint64 ContentManifestPayload_FileMapping::size() const {
  // @@protoc_insertion_point(field_get:proto.steam.ContentManifestPayload.FileMapping.size)
  return size_;
}
void ContentManifestPayload_FileMapping::set_size(::google::protobuf::uint64 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.ContentManifestPayload.FileMapping.size)
}

// optional uint32 flags = 3;
bool ContentManifestPayload_FileMapping::has_flags() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ContentManifestPayload_FileMapping::set_has_flags() {
  _has_bits_[0] |= 0x00000020u;
}
void ContentManifestPayload_FileMapping::clear_has_flags() {
  _has_bits_[0] &= ~0x00000020u;
}
void ContentManifestPayload_FileMapping::clear_flags() {
  flags_ = 0u;
  clear_has_flags();
}
::google::protobuf::uint32 ContentManifestPayload_FileMapping::flags() const {
  // @@protoc_insertion_point(field_get:proto.steam.ContentManifestPayload.FileMapping.flags)
  return flags_;
}
void ContentManifestPayload_FileMapping::set_flags(::google::protobuf::uint32 value) {
  set_has_flags();
  flags_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.ContentManifestPayload.FileMapping.flags)
}

// optional bytes sha_filename = 4;
bool ContentManifestPayload_FileMapping::has_sha_filename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ContentManifestPayload_FileMapping::set_has_sha_filename() {
  _has_bits_[0] |= 0x00000002u;
}
void ContentManifestPayload_FileMapping::clear_has_sha_filename() {
  _has_bits_[0] &= ~0x00000002u;
}
void ContentManifestPayload_FileMapping::clear_sha_filename() {
  sha_filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sha_filename();
}
const ::std::string& ContentManifestPayload_FileMapping::sha_filename() const {
  // @@protoc_insertion_point(field_get:proto.steam.ContentManifestPayload.FileMapping.sha_filename)
  return sha_filename_.GetNoArena();
}
void ContentManifestPayload_FileMapping::set_sha_filename(const ::std::string& value) {
  set_has_sha_filename();
  sha_filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.ContentManifestPayload.FileMapping.sha_filename)
}
#if LANG_CXX11
void ContentManifestPayload_FileMapping::set_sha_filename(::std::string&& value) {
  set_has_sha_filename();
  sha_filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.ContentManifestPayload.FileMapping.sha_filename)
}
#endif
void ContentManifestPayload_FileMapping::set_sha_filename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sha_filename();
  sha_filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.ContentManifestPayload.FileMapping.sha_filename)
}
void ContentManifestPayload_FileMapping::set_sha_filename(const void* value, size_t size) {
  set_has_sha_filename();
  sha_filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.ContentManifestPayload.FileMapping.sha_filename)
}
::std::string* ContentManifestPayload_FileMapping::mutable_sha_filename() {
  set_has_sha_filename();
  // @@protoc_insertion_point(field_mutable:proto.steam.ContentManifestPayload.FileMapping.sha_filename)
  return sha_filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ContentManifestPayload_FileMapping::release_sha_filename() {
  // @@protoc_insertion_point(field_release:proto.steam.ContentManifestPayload.FileMapping.sha_filename)
  clear_has_sha_filename();
  return sha_filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ContentManifestPayload_FileMapping::set_allocated_sha_filename(::std::string* sha_filename) {
  if (sha_filename != NULL) {
    set_has_sha_filename();
  } else {
    clear_has_sha_filename();
  }
  sha_filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sha_filename);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.ContentManifestPayload.FileMapping.sha_filename)
}

// optional bytes sha_content = 5;
bool ContentManifestPayload_FileMapping::has_sha_content() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ContentManifestPayload_FileMapping::set_has_sha_content() {
  _has_bits_[0] |= 0x00000004u;
}
void ContentManifestPayload_FileMapping::clear_has_sha_content() {
  _has_bits_[0] &= ~0x00000004u;
}
void ContentManifestPayload_FileMapping::clear_sha_content() {
  sha_content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sha_content();
}
const ::std::string& ContentManifestPayload_FileMapping::sha_content() const {
  // @@protoc_insertion_point(field_get:proto.steam.ContentManifestPayload.FileMapping.sha_content)
  return sha_content_.GetNoArena();
}
void ContentManifestPayload_FileMapping::set_sha_content(const ::std::string& value) {
  set_has_sha_content();
  sha_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.ContentManifestPayload.FileMapping.sha_content)
}
#if LANG_CXX11
void ContentManifestPayload_FileMapping::set_sha_content(::std::string&& value) {
  set_has_sha_content();
  sha_content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.ContentManifestPayload.FileMapping.sha_content)
}
#endif
void ContentManifestPayload_FileMapping::set_sha_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sha_content();
  sha_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.ContentManifestPayload.FileMapping.sha_content)
}
void ContentManifestPayload_FileMapping::set_sha_content(const void* value, size_t size) {
  set_has_sha_content();
  sha_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.ContentManifestPayload.FileMapping.sha_content)
}
::std::string* ContentManifestPayload_FileMapping::mutable_sha_content() {
  set_has_sha_content();
  // @@protoc_insertion_point(field_mutable:proto.steam.ContentManifestPayload.FileMapping.sha_content)
  return sha_content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ContentManifestPayload_FileMapping::release_sha_content() {
  // @@protoc_insertion_point(field_release:proto.steam.ContentManifestPayload.FileMapping.sha_content)
  clear_has_sha_content();
  return sha_content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ContentManifestPayload_FileMapping::set_allocated_sha_content(::std::string* sha_content) {
  if (sha_content != NULL) {
    set_has_sha_content();
  } else {
    clear_has_sha_content();
  }
  sha_content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sha_content);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.ContentManifestPayload.FileMapping.sha_content)
}

// repeated .proto.steam.ContentManifestPayload.FileMapping.ChunkData chunks = 6;
int ContentManifestPayload_FileMapping::chunks_size() const {
  return chunks_.size();
}
void ContentManifestPayload_FileMapping::clear_chunks() {
  chunks_.Clear();
}
const ::proto::steam::ContentManifestPayload_FileMapping_ChunkData& ContentManifestPayload_FileMapping::chunks(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.ContentManifestPayload.FileMapping.chunks)
  return chunks_.Get(index);
}
::proto::steam::ContentManifestPayload_FileMapping_ChunkData* ContentManifestPayload_FileMapping::mutable_chunks(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.ContentManifestPayload.FileMapping.chunks)
  return chunks_.Mutable(index);
}
::proto::steam::ContentManifestPayload_FileMapping_ChunkData* ContentManifestPayload_FileMapping::add_chunks() {
  // @@protoc_insertion_point(field_add:proto.steam.ContentManifestPayload.FileMapping.chunks)
  return chunks_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::ContentManifestPayload_FileMapping_ChunkData >*
ContentManifestPayload_FileMapping::mutable_chunks() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.ContentManifestPayload.FileMapping.chunks)
  return &chunks_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::ContentManifestPayload_FileMapping_ChunkData >&
ContentManifestPayload_FileMapping::chunks() const {
  // @@protoc_insertion_point(field_list:proto.steam.ContentManifestPayload.FileMapping.chunks)
  return chunks_;
}

// optional string linktarget = 7;
bool ContentManifestPayload_FileMapping::has_linktarget() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ContentManifestPayload_FileMapping::set_has_linktarget() {
  _has_bits_[0] |= 0x00000008u;
}
void ContentManifestPayload_FileMapping::clear_has_linktarget() {
  _has_bits_[0] &= ~0x00000008u;
}
void ContentManifestPayload_FileMapping::clear_linktarget() {
  linktarget_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_linktarget();
}
const ::std::string& ContentManifestPayload_FileMapping::linktarget() const {
  // @@protoc_insertion_point(field_get:proto.steam.ContentManifestPayload.FileMapping.linktarget)
  return linktarget_.GetNoArena();
}
void ContentManifestPayload_FileMapping::set_linktarget(const ::std::string& value) {
  set_has_linktarget();
  linktarget_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.ContentManifestPayload.FileMapping.linktarget)
}
#if LANG_CXX11
void ContentManifestPayload_FileMapping::set_linktarget(::std::string&& value) {
  set_has_linktarget();
  linktarget_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.ContentManifestPayload.FileMapping.linktarget)
}
#endif
void ContentManifestPayload_FileMapping::set_linktarget(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_linktarget();
  linktarget_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.ContentManifestPayload.FileMapping.linktarget)
}
void ContentManifestPayload_FileMapping::set_linktarget(const char* value, size_t size) {
  set_has_linktarget();
  linktarget_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.ContentManifestPayload.FileMapping.linktarget)
}
::std::string* ContentManifestPayload_FileMapping::mutable_linktarget() {
  set_has_linktarget();
  // @@protoc_insertion_point(field_mutable:proto.steam.ContentManifestPayload.FileMapping.linktarget)
  return linktarget_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ContentManifestPayload_FileMapping::release_linktarget() {
  // @@protoc_insertion_point(field_release:proto.steam.ContentManifestPayload.FileMapping.linktarget)
  clear_has_linktarget();
  return linktarget_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ContentManifestPayload_FileMapping::set_allocated_linktarget(::std::string* linktarget) {
  if (linktarget != NULL) {
    set_has_linktarget();
  } else {
    clear_has_linktarget();
  }
  linktarget_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), linktarget);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.ContentManifestPayload.FileMapping.linktarget)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ContentManifestPayload::kMappingsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ContentManifestPayload::ContentManifestPayload()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_content_5fmanifest_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.ContentManifestPayload)
}
ContentManifestPayload::ContentManifestPayload(const ContentManifestPayload& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      mappings_(from.mappings_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.ContentManifestPayload)
}

void ContentManifestPayload::SharedCtor() {
  _cached_size_ = 0;
}

ContentManifestPayload::~ContentManifestPayload() {
  // @@protoc_insertion_point(destructor:proto.steam.ContentManifestPayload)
  SharedDtor();
}

void ContentManifestPayload::SharedDtor() {
}

void ContentManifestPayload::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContentManifestPayload::descriptor() {
  protobuf_content_5fmanifest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_content_5fmanifest_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ContentManifestPayload& ContentManifestPayload::default_instance() {
  protobuf_content_5fmanifest_2eproto::InitDefaults();
  return *internal_default_instance();
}

ContentManifestPayload* ContentManifestPayload::New(::google::protobuf::Arena* arena) const {
  ContentManifestPayload* n = new ContentManifestPayload;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ContentManifestPayload::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.ContentManifestPayload)
  mappings_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ContentManifestPayload::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.ContentManifestPayload)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.steam.ContentManifestPayload.FileMapping mappings = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mappings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.ContentManifestPayload)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.ContentManifestPayload)
  return false;
#undef DO_
}

void ContentManifestPayload::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.ContentManifestPayload)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.ContentManifestPayload.FileMapping mappings = 1;
  for (unsigned int i = 0, n = this->mappings_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mappings(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.ContentManifestPayload)
}

::google::protobuf::uint8* ContentManifestPayload::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.ContentManifestPayload)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.ContentManifestPayload.FileMapping mappings = 1;
  for (unsigned int i = 0, n = this->mappings_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->mappings(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.ContentManifestPayload)
  return target;
}

size_t ContentManifestPayload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.ContentManifestPayload)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.steam.ContentManifestPayload.FileMapping mappings = 1;
  {
    unsigned int count = this->mappings_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mappings(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContentManifestPayload::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.ContentManifestPayload)
  GOOGLE_DCHECK_NE(&from, this);
  const ContentManifestPayload* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ContentManifestPayload>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.ContentManifestPayload)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.ContentManifestPayload)
    MergeFrom(*source);
  }
}

void ContentManifestPayload::MergeFrom(const ContentManifestPayload& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.ContentManifestPayload)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mappings_.MergeFrom(from.mappings_);
}

void ContentManifestPayload::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.ContentManifestPayload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContentManifestPayload::CopyFrom(const ContentManifestPayload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.ContentManifestPayload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContentManifestPayload::IsInitialized() const {
  return true;
}

void ContentManifestPayload::Swap(ContentManifestPayload* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ContentManifestPayload::InternalSwap(ContentManifestPayload* other) {
  mappings_.InternalSwap(&other->mappings_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ContentManifestPayload::GetMetadata() const {
  protobuf_content_5fmanifest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_content_5fmanifest_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ContentManifestPayload

// repeated .proto.steam.ContentManifestPayload.FileMapping mappings = 1;
int ContentManifestPayload::mappings_size() const {
  return mappings_.size();
}
void ContentManifestPayload::clear_mappings() {
  mappings_.Clear();
}
const ::proto::steam::ContentManifestPayload_FileMapping& ContentManifestPayload::mappings(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.ContentManifestPayload.mappings)
  return mappings_.Get(index);
}
::proto::steam::ContentManifestPayload_FileMapping* ContentManifestPayload::mutable_mappings(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.ContentManifestPayload.mappings)
  return mappings_.Mutable(index);
}
::proto::steam::ContentManifestPayload_FileMapping* ContentManifestPayload::add_mappings() {
  // @@protoc_insertion_point(field_add:proto.steam.ContentManifestPayload.mappings)
  return mappings_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::ContentManifestPayload_FileMapping >*
ContentManifestPayload::mutable_mappings() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.ContentManifestPayload.mappings)
  return &mappings_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::ContentManifestPayload_FileMapping >&
ContentManifestPayload::mappings() const {
  // @@protoc_insertion_point(field_list:proto.steam.ContentManifestPayload.mappings)
  return mappings_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ContentManifestMetadata::kDepotIdFieldNumber;
const int ContentManifestMetadata::kGidManifestFieldNumber;
const int ContentManifestMetadata::kCreationTimeFieldNumber;
const int ContentManifestMetadata::kFilenamesEncryptedFieldNumber;
const int ContentManifestMetadata::kCbDiskOriginalFieldNumber;
const int ContentManifestMetadata::kCbDiskCompressedFieldNumber;
const int ContentManifestMetadata::kUniqueChunksFieldNumber;
const int ContentManifestMetadata::kCrcEncryptedFieldNumber;
const int ContentManifestMetadata::kCrcClearFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ContentManifestMetadata::ContentManifestMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_content_5fmanifest_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.ContentManifestMetadata)
}
ContentManifestMetadata::ContentManifestMetadata(const ContentManifestMetadata& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&gid_manifest_, &from.gid_manifest_,
    reinterpret_cast<char*>(&crc_clear_) -
    reinterpret_cast<char*>(&gid_manifest_) + sizeof(crc_clear_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.ContentManifestMetadata)
}

void ContentManifestMetadata::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&gid_manifest_, 0, reinterpret_cast<char*>(&crc_clear_) -
    reinterpret_cast<char*>(&gid_manifest_) + sizeof(crc_clear_));
}

ContentManifestMetadata::~ContentManifestMetadata() {
  // @@protoc_insertion_point(destructor:proto.steam.ContentManifestMetadata)
  SharedDtor();
}

void ContentManifestMetadata::SharedDtor() {
}

void ContentManifestMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContentManifestMetadata::descriptor() {
  protobuf_content_5fmanifest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_content_5fmanifest_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ContentManifestMetadata& ContentManifestMetadata::default_instance() {
  protobuf_content_5fmanifest_2eproto::InitDefaults();
  return *internal_default_instance();
}

ContentManifestMetadata* ContentManifestMetadata::New(::google::protobuf::Arena* arena) const {
  ContentManifestMetadata* n = new ContentManifestMetadata;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ContentManifestMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.ContentManifestMetadata)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&gid_manifest_, 0, reinterpret_cast<char*>(&crc_encrypted_) -
      reinterpret_cast<char*>(&gid_manifest_) + sizeof(crc_encrypted_));
  }
  crc_clear_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ContentManifestMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.ContentManifestMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 depot_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_depot_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &depot_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 gid_manifest = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_gid_manifest();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gid_manifest_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 creation_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_creation_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &creation_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool filenames_encrypted = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_filenames_encrypted();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &filenames_encrypted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 cb_disk_original = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_cb_disk_original();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cb_disk_original_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 cb_disk_compressed = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_cb_disk_compressed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cb_disk_compressed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 unique_chunks = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_unique_chunks();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unique_chunks_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 crc_encrypted = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_crc_encrypted();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crc_encrypted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 crc_clear = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_crc_clear();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crc_clear_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.ContentManifestMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.ContentManifestMetadata)
  return false;
#undef DO_
}

void ContentManifestMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.ContentManifestMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 depot_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->depot_id(), output);
  }

  // optional uint64 gid_manifest = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->gid_manifest(), output);
  }

  // optional uint32 creation_time = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->creation_time(), output);
  }

  // optional bool filenames_encrypted = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->filenames_encrypted(), output);
  }

  // optional uint64 cb_disk_original = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->cb_disk_original(), output);
  }

  // optional uint64 cb_disk_compressed = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->cb_disk_compressed(), output);
  }

  // optional uint32 unique_chunks = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->unique_chunks(), output);
  }

  // optional uint32 crc_encrypted = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->crc_encrypted(), output);
  }

  // optional uint32 crc_clear = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->crc_clear(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.ContentManifestMetadata)
}

::google::protobuf::uint8* ContentManifestMetadata::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.ContentManifestMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 depot_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->depot_id(), target);
  }

  // optional uint64 gid_manifest = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->gid_manifest(), target);
  }

  // optional uint32 creation_time = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->creation_time(), target);
  }

  // optional bool filenames_encrypted = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->filenames_encrypted(), target);
  }

  // optional uint64 cb_disk_original = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->cb_disk_original(), target);
  }

  // optional uint64 cb_disk_compressed = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->cb_disk_compressed(), target);
  }

  // optional uint32 unique_chunks = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->unique_chunks(), target);
  }

  // optional uint32 crc_encrypted = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->crc_encrypted(), target);
  }

  // optional uint32 crc_clear = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->crc_clear(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.ContentManifestMetadata)
  return target;
}

size_t ContentManifestMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.ContentManifestMetadata)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional uint64 gid_manifest = 2;
    if (has_gid_manifest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gid_manifest());
    }

    // optional uint32 depot_id = 1;
    if (has_depot_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->depot_id());
    }

    // optional uint32 creation_time = 3;
    if (has_creation_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->creation_time());
    }

    // optional uint64 cb_disk_original = 5;
    if (has_cb_disk_original()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cb_disk_original());
    }

    // optional bool filenames_encrypted = 4;
    if (has_filenames_encrypted()) {
      total_size += 1 + 1;
    }

    // optional uint32 unique_chunks = 7;
    if (has_unique_chunks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unique_chunks());
    }

    // optional uint64 cb_disk_compressed = 6;
    if (has_cb_disk_compressed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cb_disk_compressed());
    }

    // optional uint32 crc_encrypted = 8;
    if (has_crc_encrypted()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crc_encrypted());
    }

  }
  // optional uint32 crc_clear = 9;
  if (has_crc_clear()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->crc_clear());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContentManifestMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.ContentManifestMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const ContentManifestMetadata* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ContentManifestMetadata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.ContentManifestMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.ContentManifestMetadata)
    MergeFrom(*source);
  }
}

void ContentManifestMetadata::MergeFrom(const ContentManifestMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.ContentManifestMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      gid_manifest_ = from.gid_manifest_;
    }
    if (cached_has_bits & 0x00000002u) {
      depot_id_ = from.depot_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      creation_time_ = from.creation_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      cb_disk_original_ = from.cb_disk_original_;
    }
    if (cached_has_bits & 0x00000010u) {
      filenames_encrypted_ = from.filenames_encrypted_;
    }
    if (cached_has_bits & 0x00000020u) {
      unique_chunks_ = from.unique_chunks_;
    }
    if (cached_has_bits & 0x00000040u) {
      cb_disk_compressed_ = from.cb_disk_compressed_;
    }
    if (cached_has_bits & 0x00000080u) {
      crc_encrypted_ = from.crc_encrypted_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_crc_clear(from.crc_clear());
  }
}

void ContentManifestMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.ContentManifestMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContentManifestMetadata::CopyFrom(const ContentManifestMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.ContentManifestMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContentManifestMetadata::IsInitialized() const {
  return true;
}

void ContentManifestMetadata::Swap(ContentManifestMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ContentManifestMetadata::InternalSwap(ContentManifestMetadata* other) {
  std::swap(gid_manifest_, other->gid_manifest_);
  std::swap(depot_id_, other->depot_id_);
  std::swap(creation_time_, other->creation_time_);
  std::swap(cb_disk_original_, other->cb_disk_original_);
  std::swap(filenames_encrypted_, other->filenames_encrypted_);
  std::swap(unique_chunks_, other->unique_chunks_);
  std::swap(cb_disk_compressed_, other->cb_disk_compressed_);
  std::swap(crc_encrypted_, other->crc_encrypted_);
  std::swap(crc_clear_, other->crc_clear_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ContentManifestMetadata::GetMetadata() const {
  protobuf_content_5fmanifest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_content_5fmanifest_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ContentManifestMetadata

// optional uint32 depot_id = 1;
bool ContentManifestMetadata::has_depot_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ContentManifestMetadata::set_has_depot_id() {
  _has_bits_[0] |= 0x00000002u;
}
void ContentManifestMetadata::clear_has_depot_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void ContentManifestMetadata::clear_depot_id() {
  depot_id_ = 0u;
  clear_has_depot_id();
}
::google::protobuf::uint32 ContentManifestMetadata::depot_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.ContentManifestMetadata.depot_id)
  return depot_id_;
}
void ContentManifestMetadata::set_depot_id(::google::protobuf::uint32 value) {
  set_has_depot_id();
  depot_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.ContentManifestMetadata.depot_id)
}

// optional uint64 gid_manifest = 2;
bool ContentManifestMetadata::has_gid_manifest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ContentManifestMetadata::set_has_gid_manifest() {
  _has_bits_[0] |= 0x00000001u;
}
void ContentManifestMetadata::clear_has_gid_manifest() {
  _has_bits_[0] &= ~0x00000001u;
}
void ContentManifestMetadata::clear_gid_manifest() {
  gid_manifest_ = GOOGLE_ULONGLONG(0);
  clear_has_gid_manifest();
}
::google::protobuf::uint64 ContentManifestMetadata::gid_manifest() const {
  // @@protoc_insertion_point(field_get:proto.steam.ContentManifestMetadata.gid_manifest)
  return gid_manifest_;
}
void ContentManifestMetadata::set_gid_manifest(::google::protobuf::uint64 value) {
  set_has_gid_manifest();
  gid_manifest_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.ContentManifestMetadata.gid_manifest)
}

// optional uint32 creation_time = 3;
bool ContentManifestMetadata::has_creation_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ContentManifestMetadata::set_has_creation_time() {
  _has_bits_[0] |= 0x00000004u;
}
void ContentManifestMetadata::clear_has_creation_time() {
  _has_bits_[0] &= ~0x00000004u;
}
void ContentManifestMetadata::clear_creation_time() {
  creation_time_ = 0u;
  clear_has_creation_time();
}
::google::protobuf::uint32 ContentManifestMetadata::creation_time() const {
  // @@protoc_insertion_point(field_get:proto.steam.ContentManifestMetadata.creation_time)
  return creation_time_;
}
void ContentManifestMetadata::set_creation_time(::google::protobuf::uint32 value) {
  set_has_creation_time();
  creation_time_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.ContentManifestMetadata.creation_time)
}

// optional bool filenames_encrypted = 4;
bool ContentManifestMetadata::has_filenames_encrypted() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ContentManifestMetadata::set_has_filenames_encrypted() {
  _has_bits_[0] |= 0x00000010u;
}
void ContentManifestMetadata::clear_has_filenames_encrypted() {
  _has_bits_[0] &= ~0x00000010u;
}
void ContentManifestMetadata::clear_filenames_encrypted() {
  filenames_encrypted_ = false;
  clear_has_filenames_encrypted();
}
bool ContentManifestMetadata::filenames_encrypted() const {
  // @@protoc_insertion_point(field_get:proto.steam.ContentManifestMetadata.filenames_encrypted)
  return filenames_encrypted_;
}
void ContentManifestMetadata::set_filenames_encrypted(bool value) {
  set_has_filenames_encrypted();
  filenames_encrypted_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.ContentManifestMetadata.filenames_encrypted)
}

// optional uint64 cb_disk_original = 5;
bool ContentManifestMetadata::has_cb_disk_original() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ContentManifestMetadata::set_has_cb_disk_original() {
  _has_bits_[0] |= 0x00000008u;
}
void ContentManifestMetadata::clear_has_cb_disk_original() {
  _has_bits_[0] &= ~0x00000008u;
}
void ContentManifestMetadata::clear_cb_disk_original() {
  cb_disk_original_ = GOOGLE_ULONGLONG(0);
  clear_has_cb_disk_original();
}
::google::protobuf::uint64 ContentManifestMetadata::cb_disk_original() const {
  // @@protoc_insertion_point(field_get:proto.steam.ContentManifestMetadata.cb_disk_original)
  return cb_disk_original_;
}
void ContentManifestMetadata::set_cb_disk_original(::google::protobuf::uint64 value) {
  set_has_cb_disk_original();
  cb_disk_original_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.ContentManifestMetadata.cb_disk_original)
}

// optional uint64 cb_disk_compressed = 6;
bool ContentManifestMetadata::has_cb_disk_compressed() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ContentManifestMetadata::set_has_cb_disk_compressed() {
  _has_bits_[0] |= 0x00000040u;
}
void ContentManifestMetadata::clear_has_cb_disk_compressed() {
  _has_bits_[0] &= ~0x00000040u;
}
void ContentManifestMetadata::clear_cb_disk_compressed() {
  cb_disk_compressed_ = GOOGLE_ULONGLONG(0);
  clear_has_cb_disk_compressed();
}
::google::protobuf::uint64 ContentManifestMetadata::cb_disk_compressed() const {
  // @@protoc_insertion_point(field_get:proto.steam.ContentManifestMetadata.cb_disk_compressed)
  return cb_disk_compressed_;
}
void ContentManifestMetadata::set_cb_disk_compressed(::google::protobuf::uint64 value) {
  set_has_cb_disk_compressed();
  cb_disk_compressed_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.ContentManifestMetadata.cb_disk_compressed)
}

// optional uint32 unique_chunks = 7;
bool ContentManifestMetadata::has_unique_chunks() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ContentManifestMetadata::set_has_unique_chunks() {
  _has_bits_[0] |= 0x00000020u;
}
void ContentManifestMetadata::clear_has_unique_chunks() {
  _has_bits_[0] &= ~0x00000020u;
}
void ContentManifestMetadata::clear_unique_chunks() {
  unique_chunks_ = 0u;
  clear_has_unique_chunks();
}
::google::protobuf::uint32 ContentManifestMetadata::unique_chunks() const {
  // @@protoc_insertion_point(field_get:proto.steam.ContentManifestMetadata.unique_chunks)
  return unique_chunks_;
}
void ContentManifestMetadata::set_unique_chunks(::google::protobuf::uint32 value) {
  set_has_unique_chunks();
  unique_chunks_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.ContentManifestMetadata.unique_chunks)
}

// optional uint32 crc_encrypted = 8;
bool ContentManifestMetadata::has_crc_encrypted() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ContentManifestMetadata::set_has_crc_encrypted() {
  _has_bits_[0] |= 0x00000080u;
}
void ContentManifestMetadata::clear_has_crc_encrypted() {
  _has_bits_[0] &= ~0x00000080u;
}
void ContentManifestMetadata::clear_crc_encrypted() {
  crc_encrypted_ = 0u;
  clear_has_crc_encrypted();
}
::google::protobuf::uint32 ContentManifestMetadata::crc_encrypted() const {
  // @@protoc_insertion_point(field_get:proto.steam.ContentManifestMetadata.crc_encrypted)
  return crc_encrypted_;
}
void ContentManifestMetadata::set_crc_encrypted(::google::protobuf::uint32 value) {
  set_has_crc_encrypted();
  crc_encrypted_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.ContentManifestMetadata.crc_encrypted)
}

// optional uint32 crc_clear = 9;
bool ContentManifestMetadata::has_crc_clear() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ContentManifestMetadata::set_has_crc_clear() {
  _has_bits_[0] |= 0x00000100u;
}
void ContentManifestMetadata::clear_has_crc_clear() {
  _has_bits_[0] &= ~0x00000100u;
}
void ContentManifestMetadata::clear_crc_clear() {
  crc_clear_ = 0u;
  clear_has_crc_clear();
}
::google::protobuf::uint32 ContentManifestMetadata::crc_clear() const {
  // @@protoc_insertion_point(field_get:proto.steam.ContentManifestMetadata.crc_clear)
  return crc_clear_;
}
void ContentManifestMetadata::set_crc_clear(::google::protobuf::uint32 value) {
  set_has_crc_clear();
  crc_clear_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.ContentManifestMetadata.crc_clear)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ContentManifestSignature::kSignatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ContentManifestSignature::ContentManifestSignature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_content_5fmanifest_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.ContentManifestSignature)
}
ContentManifestSignature::ContentManifestSignature(const ContentManifestSignature& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_signature()) {
    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.steam.ContentManifestSignature)
}

void ContentManifestSignature::SharedCtor() {
  _cached_size_ = 0;
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ContentManifestSignature::~ContentManifestSignature() {
  // @@protoc_insertion_point(destructor:proto.steam.ContentManifestSignature)
  SharedDtor();
}

void ContentManifestSignature::SharedDtor() {
  signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ContentManifestSignature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContentManifestSignature::descriptor() {
  protobuf_content_5fmanifest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_content_5fmanifest_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ContentManifestSignature& ContentManifestSignature::default_instance() {
  protobuf_content_5fmanifest_2eproto::InitDefaults();
  return *internal_default_instance();
}

ContentManifestSignature* ContentManifestSignature::New(::google::protobuf::Arena* arena) const {
  ContentManifestSignature* n = new ContentManifestSignature;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ContentManifestSignature::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.ContentManifestSignature)
  if (has_signature()) {
    GOOGLE_DCHECK(!signature_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*signature_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ContentManifestSignature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.ContentManifestSignature)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes signature = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.ContentManifestSignature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.ContentManifestSignature)
  return false;
#undef DO_
}

void ContentManifestSignature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.ContentManifestSignature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes signature = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->signature(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.ContentManifestSignature)
}

::google::protobuf::uint8* ContentManifestSignature::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.ContentManifestSignature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes signature = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->signature(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.ContentManifestSignature)
  return target;
}

size_t ContentManifestSignature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.ContentManifestSignature)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional bytes signature = 1;
  if (has_signature()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->signature());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContentManifestSignature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.ContentManifestSignature)
  GOOGLE_DCHECK_NE(&from, this);
  const ContentManifestSignature* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ContentManifestSignature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.ContentManifestSignature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.ContentManifestSignature)
    MergeFrom(*source);
  }
}

void ContentManifestSignature::MergeFrom(const ContentManifestSignature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.ContentManifestSignature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_signature()) {
    set_has_signature();
    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
}

void ContentManifestSignature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.ContentManifestSignature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContentManifestSignature::CopyFrom(const ContentManifestSignature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.ContentManifestSignature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContentManifestSignature::IsInitialized() const {
  return true;
}

void ContentManifestSignature::Swap(ContentManifestSignature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ContentManifestSignature::InternalSwap(ContentManifestSignature* other) {
  signature_.Swap(&other->signature_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ContentManifestSignature::GetMetadata() const {
  protobuf_content_5fmanifest_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_content_5fmanifest_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ContentManifestSignature

// optional bytes signature = 1;
bool ContentManifestSignature::has_signature() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ContentManifestSignature::set_has_signature() {
  _has_bits_[0] |= 0x00000001u;
}
void ContentManifestSignature::clear_has_signature() {
  _has_bits_[0] &= ~0x00000001u;
}
void ContentManifestSignature::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_signature();
}
const ::std::string& ContentManifestSignature::signature() const {
  // @@protoc_insertion_point(field_get:proto.steam.ContentManifestSignature.signature)
  return signature_.GetNoArena();
}
void ContentManifestSignature::set_signature(const ::std::string& value) {
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.ContentManifestSignature.signature)
}
#if LANG_CXX11
void ContentManifestSignature::set_signature(::std::string&& value) {
  set_has_signature();
  signature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.ContentManifestSignature.signature)
}
#endif
void ContentManifestSignature::set_signature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.ContentManifestSignature.signature)
}
void ContentManifestSignature::set_signature(const void* value, size_t size) {
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.ContentManifestSignature.signature)
}
::std::string* ContentManifestSignature::mutable_signature() {
  set_has_signature();
  // @@protoc_insertion_point(field_mutable:proto.steam.ContentManifestSignature.signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ContentManifestSignature::release_signature() {
  // @@protoc_insertion_point(field_release:proto.steam.ContentManifestSignature.signature)
  clear_has_signature();
  return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ContentManifestSignature::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    set_has_signature();
  } else {
    clear_has_signature();
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.ContentManifestSignature.signature)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace steam
}  // namespace proto

// @@protoc_insertion_point(global_scope)
