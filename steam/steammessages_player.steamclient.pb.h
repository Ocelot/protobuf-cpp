// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_player.steamclient.proto

#ifndef PROTOBUF_steammessages_5fplayer_2esteamclient_2eproto__INCLUDED
#define PROTOBUF_steammessages_5fplayer_2esteamclient_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "steammessages_unified_base.steamclient.pb.h"
// @@protoc_insertion_point(includes)
namespace proto {
namespace steam {
class CPlayer_AcceptSSA_Request;
class CPlayer_AcceptSSA_RequestDefaultTypeInternal;
extern CPlayer_AcceptSSA_RequestDefaultTypeInternal _CPlayer_AcceptSSA_Request_default_instance_;
class CPlayer_AcceptSSA_Response;
class CPlayer_AcceptSSA_ResponseDefaultTypeInternal;
extern CPlayer_AcceptSSA_ResponseDefaultTypeInternal _CPlayer_AcceptSSA_Response_default_instance_;
class CPlayer_FriendNicknameChanged_Notification;
class CPlayer_FriendNicknameChanged_NotificationDefaultTypeInternal;
extern CPlayer_FriendNicknameChanged_NotificationDefaultTypeInternal _CPlayer_FriendNicknameChanged_Notification_default_instance_;
class CPlayer_GetGameBadgeLevels_Request;
class CPlayer_GetGameBadgeLevels_RequestDefaultTypeInternal;
extern CPlayer_GetGameBadgeLevels_RequestDefaultTypeInternal _CPlayer_GetGameBadgeLevels_Request_default_instance_;
class CPlayer_GetGameBadgeLevels_Response;
class CPlayer_GetGameBadgeLevels_ResponseDefaultTypeInternal;
extern CPlayer_GetGameBadgeLevels_ResponseDefaultTypeInternal _CPlayer_GetGameBadgeLevels_Response_default_instance_;
class CPlayer_GetGameBadgeLevels_Response_Badge;
class CPlayer_GetGameBadgeLevels_Response_BadgeDefaultTypeInternal;
extern CPlayer_GetGameBadgeLevels_Response_BadgeDefaultTypeInternal _CPlayer_GetGameBadgeLevels_Response_Badge_default_instance_;
class CPlayer_GetLastPlayedTimes_Request;
class CPlayer_GetLastPlayedTimes_RequestDefaultTypeInternal;
extern CPlayer_GetLastPlayedTimes_RequestDefaultTypeInternal _CPlayer_GetLastPlayedTimes_Request_default_instance_;
class CPlayer_GetLastPlayedTimes_Response;
class CPlayer_GetLastPlayedTimes_ResponseDefaultTypeInternal;
extern CPlayer_GetLastPlayedTimes_ResponseDefaultTypeInternal _CPlayer_GetLastPlayedTimes_Response_default_instance_;
class CPlayer_GetLastPlayedTimes_Response_Game;
class CPlayer_GetLastPlayedTimes_Response_GameDefaultTypeInternal;
extern CPlayer_GetLastPlayedTimes_Response_GameDefaultTypeInternal _CPlayer_GetLastPlayedTimes_Response_Game_default_instance_;
class CPlayer_GetNicknameList_Request;
class CPlayer_GetNicknameList_RequestDefaultTypeInternal;
extern CPlayer_GetNicknameList_RequestDefaultTypeInternal _CPlayer_GetNicknameList_Request_default_instance_;
class CPlayer_GetNicknameList_Response;
class CPlayer_GetNicknameList_ResponseDefaultTypeInternal;
extern CPlayer_GetNicknameList_ResponseDefaultTypeInternal _CPlayer_GetNicknameList_Response_default_instance_;
class CPlayer_GetNicknameList_Response_PlayerNickname;
class CPlayer_GetNicknameList_Response_PlayerNicknameDefaultTypeInternal;
extern CPlayer_GetNicknameList_Response_PlayerNicknameDefaultTypeInternal _CPlayer_GetNicknameList_Response_PlayerNickname_default_instance_;
class CPlayer_LastPlayedTimes_Notification;
class CPlayer_LastPlayedTimes_NotificationDefaultTypeInternal;
extern CPlayer_LastPlayedTimes_NotificationDefaultTypeInternal _CPlayer_LastPlayedTimes_Notification_default_instance_;
class NoResponse;
class NoResponseDefaultTypeInternal;
extern NoResponseDefaultTypeInternal _NoResponse_default_instance_;
}  // namespace steam
}  // namespace proto

namespace proto {
namespace steam {

namespace protobuf_steammessages_5fplayer_2esteamclient_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_steammessages_5fplayer_2esteamclient_2eproto

// ===================================================================

class CPlayer_GetGameBadgeLevels_Request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CPlayer_GetGameBadgeLevels_Request) */ {
 public:
  CPlayer_GetGameBadgeLevels_Request();
  virtual ~CPlayer_GetGameBadgeLevels_Request();

  CPlayer_GetGameBadgeLevels_Request(const CPlayer_GetGameBadgeLevels_Request& from);

  inline CPlayer_GetGameBadgeLevels_Request& operator=(const CPlayer_GetGameBadgeLevels_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CPlayer_GetGameBadgeLevels_Request& default_instance();

  static inline const CPlayer_GetGameBadgeLevels_Request* internal_default_instance() {
    return reinterpret_cast<const CPlayer_GetGameBadgeLevels_Request*>(
               &_CPlayer_GetGameBadgeLevels_Request_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(CPlayer_GetGameBadgeLevels_Request* other);

  // implements Message ----------------------------------------------

  inline CPlayer_GetGameBadgeLevels_Request* New() const PROTOBUF_FINAL { return New(NULL); }

  CPlayer_GetGameBadgeLevels_Request* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CPlayer_GetGameBadgeLevels_Request& from);
  void MergeFrom(const CPlayer_GetGameBadgeLevels_Request& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CPlayer_GetGameBadgeLevels_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 appid = 1;
  bool has_appid() const;
  void clear_appid();
  static const int kAppidFieldNumber = 1;
  ::google::protobuf::uint32 appid() const;
  void set_appid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CPlayer_GetGameBadgeLevels_Request)
 private:
  void set_has_appid();
  void clear_has_appid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 appid_;
  friend struct protobuf_steammessages_5fplayer_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CPlayer_GetGameBadgeLevels_Response_Badge : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CPlayer_GetGameBadgeLevels_Response.Badge) */ {
 public:
  CPlayer_GetGameBadgeLevels_Response_Badge();
  virtual ~CPlayer_GetGameBadgeLevels_Response_Badge();

  CPlayer_GetGameBadgeLevels_Response_Badge(const CPlayer_GetGameBadgeLevels_Response_Badge& from);

  inline CPlayer_GetGameBadgeLevels_Response_Badge& operator=(const CPlayer_GetGameBadgeLevels_Response_Badge& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CPlayer_GetGameBadgeLevels_Response_Badge& default_instance();

  static inline const CPlayer_GetGameBadgeLevels_Response_Badge* internal_default_instance() {
    return reinterpret_cast<const CPlayer_GetGameBadgeLevels_Response_Badge*>(
               &_CPlayer_GetGameBadgeLevels_Response_Badge_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(CPlayer_GetGameBadgeLevels_Response_Badge* other);

  // implements Message ----------------------------------------------

  inline CPlayer_GetGameBadgeLevels_Response_Badge* New() const PROTOBUF_FINAL { return New(NULL); }

  CPlayer_GetGameBadgeLevels_Response_Badge* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CPlayer_GetGameBadgeLevels_Response_Badge& from);
  void MergeFrom(const CPlayer_GetGameBadgeLevels_Response_Badge& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CPlayer_GetGameBadgeLevels_Response_Badge* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 level = 1;
  bool has_level() const;
  void clear_level();
  static const int kLevelFieldNumber = 1;
  ::google::protobuf::int32 level() const;
  void set_level(::google::protobuf::int32 value);

  // optional int32 series = 2;
  bool has_series() const;
  void clear_series();
  static const int kSeriesFieldNumber = 2;
  ::google::protobuf::int32 series() const;
  void set_series(::google::protobuf::int32 value);

  // optional uint32 border_color = 3;
  bool has_border_color() const;
  void clear_border_color();
  static const int kBorderColorFieldNumber = 3;
  ::google::protobuf::uint32 border_color() const;
  void set_border_color(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CPlayer_GetGameBadgeLevels_Response.Badge)
 private:
  void set_has_level();
  void clear_has_level();
  void set_has_series();
  void clear_has_series();
  void set_has_border_color();
  void clear_has_border_color();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 series_;
  ::google::protobuf::uint32 border_color_;
  friend struct protobuf_steammessages_5fplayer_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CPlayer_GetGameBadgeLevels_Response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CPlayer_GetGameBadgeLevels_Response) */ {
 public:
  CPlayer_GetGameBadgeLevels_Response();
  virtual ~CPlayer_GetGameBadgeLevels_Response();

  CPlayer_GetGameBadgeLevels_Response(const CPlayer_GetGameBadgeLevels_Response& from);

  inline CPlayer_GetGameBadgeLevels_Response& operator=(const CPlayer_GetGameBadgeLevels_Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CPlayer_GetGameBadgeLevels_Response& default_instance();

  static inline const CPlayer_GetGameBadgeLevels_Response* internal_default_instance() {
    return reinterpret_cast<const CPlayer_GetGameBadgeLevels_Response*>(
               &_CPlayer_GetGameBadgeLevels_Response_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(CPlayer_GetGameBadgeLevels_Response* other);

  // implements Message ----------------------------------------------

  inline CPlayer_GetGameBadgeLevels_Response* New() const PROTOBUF_FINAL { return New(NULL); }

  CPlayer_GetGameBadgeLevels_Response* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CPlayer_GetGameBadgeLevels_Response& from);
  void MergeFrom(const CPlayer_GetGameBadgeLevels_Response& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CPlayer_GetGameBadgeLevels_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CPlayer_GetGameBadgeLevels_Response_Badge Badge;

  // accessors -------------------------------------------------------

  // repeated .proto.steam.CPlayer_GetGameBadgeLevels_Response.Badge badges = 2;
  int badges_size() const;
  void clear_badges();
  static const int kBadgesFieldNumber = 2;
  const ::proto::steam::CPlayer_GetGameBadgeLevels_Response_Badge& badges(int index) const;
  ::proto::steam::CPlayer_GetGameBadgeLevels_Response_Badge* mutable_badges(int index);
  ::proto::steam::CPlayer_GetGameBadgeLevels_Response_Badge* add_badges();
  ::google::protobuf::RepeatedPtrField< ::proto::steam::CPlayer_GetGameBadgeLevels_Response_Badge >*
      mutable_badges();
  const ::google::protobuf::RepeatedPtrField< ::proto::steam::CPlayer_GetGameBadgeLevels_Response_Badge >&
      badges() const;

  // optional uint32 player_level = 1;
  bool has_player_level() const;
  void clear_player_level();
  static const int kPlayerLevelFieldNumber = 1;
  ::google::protobuf::uint32 player_level() const;
  void set_player_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CPlayer_GetGameBadgeLevels_Response)
 private:
  void set_has_player_level();
  void clear_has_player_level();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::steam::CPlayer_GetGameBadgeLevels_Response_Badge > badges_;
  ::google::protobuf::uint32 player_level_;
  friend struct protobuf_steammessages_5fplayer_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CPlayer_GetLastPlayedTimes_Request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CPlayer_GetLastPlayedTimes_Request) */ {
 public:
  CPlayer_GetLastPlayedTimes_Request();
  virtual ~CPlayer_GetLastPlayedTimes_Request();

  CPlayer_GetLastPlayedTimes_Request(const CPlayer_GetLastPlayedTimes_Request& from);

  inline CPlayer_GetLastPlayedTimes_Request& operator=(const CPlayer_GetLastPlayedTimes_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CPlayer_GetLastPlayedTimes_Request& default_instance();

  static inline const CPlayer_GetLastPlayedTimes_Request* internal_default_instance() {
    return reinterpret_cast<const CPlayer_GetLastPlayedTimes_Request*>(
               &_CPlayer_GetLastPlayedTimes_Request_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(CPlayer_GetLastPlayedTimes_Request* other);

  // implements Message ----------------------------------------------

  inline CPlayer_GetLastPlayedTimes_Request* New() const PROTOBUF_FINAL { return New(NULL); }

  CPlayer_GetLastPlayedTimes_Request* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CPlayer_GetLastPlayedTimes_Request& from);
  void MergeFrom(const CPlayer_GetLastPlayedTimes_Request& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CPlayer_GetLastPlayedTimes_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 min_last_played = 1 [(.proto.steam.description) = "The most recent last-played time the client already knows about"];
  bool has_min_last_played() const;
  void clear_min_last_played();
  static const int kMinLastPlayedFieldNumber = 1;
  ::google::protobuf::uint32 min_last_played() const;
  void set_min_last_played(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CPlayer_GetLastPlayedTimes_Request)
 private:
  void set_has_min_last_played();
  void clear_has_min_last_played();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 min_last_played_;
  friend struct protobuf_steammessages_5fplayer_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CPlayer_GetLastPlayedTimes_Response_Game : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CPlayer_GetLastPlayedTimes_Response.Game) */ {
 public:
  CPlayer_GetLastPlayedTimes_Response_Game();
  virtual ~CPlayer_GetLastPlayedTimes_Response_Game();

  CPlayer_GetLastPlayedTimes_Response_Game(const CPlayer_GetLastPlayedTimes_Response_Game& from);

  inline CPlayer_GetLastPlayedTimes_Response_Game& operator=(const CPlayer_GetLastPlayedTimes_Response_Game& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CPlayer_GetLastPlayedTimes_Response_Game& default_instance();

  static inline const CPlayer_GetLastPlayedTimes_Response_Game* internal_default_instance() {
    return reinterpret_cast<const CPlayer_GetLastPlayedTimes_Response_Game*>(
               &_CPlayer_GetLastPlayedTimes_Response_Game_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(CPlayer_GetLastPlayedTimes_Response_Game* other);

  // implements Message ----------------------------------------------

  inline CPlayer_GetLastPlayedTimes_Response_Game* New() const PROTOBUF_FINAL { return New(NULL); }

  CPlayer_GetLastPlayedTimes_Response_Game* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CPlayer_GetLastPlayedTimes_Response_Game& from);
  void MergeFrom(const CPlayer_GetLastPlayedTimes_Response_Game& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CPlayer_GetLastPlayedTimes_Response_Game* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 appid = 1;
  bool has_appid() const;
  void clear_appid();
  static const int kAppidFieldNumber = 1;
  ::google::protobuf::int32 appid() const;
  void set_appid(::google::protobuf::int32 value);

  // optional uint32 last_playtime = 2;
  bool has_last_playtime() const;
  void clear_last_playtime();
  static const int kLastPlaytimeFieldNumber = 2;
  ::google::protobuf::uint32 last_playtime() const;
  void set_last_playtime(::google::protobuf::uint32 value);

  // optional int32 playtime_2weeks = 3;
  bool has_playtime_2weeks() const;
  void clear_playtime_2weeks();
  static const int kPlaytime2WeeksFieldNumber = 3;
  ::google::protobuf::int32 playtime_2weeks() const;
  void set_playtime_2weeks(::google::protobuf::int32 value);

  // optional int32 playtime_forever = 4;
  bool has_playtime_forever() const;
  void clear_playtime_forever();
  static const int kPlaytimeForeverFieldNumber = 4;
  ::google::protobuf::int32 playtime_forever() const;
  void set_playtime_forever(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CPlayer_GetLastPlayedTimes_Response.Game)
 private:
  void set_has_appid();
  void clear_has_appid();
  void set_has_last_playtime();
  void clear_has_last_playtime();
  void set_has_playtime_2weeks();
  void clear_has_playtime_2weeks();
  void set_has_playtime_forever();
  void clear_has_playtime_forever();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 appid_;
  ::google::protobuf::uint32 last_playtime_;
  ::google::protobuf::int32 playtime_2weeks_;
  ::google::protobuf::int32 playtime_forever_;
  friend struct protobuf_steammessages_5fplayer_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CPlayer_GetLastPlayedTimes_Response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CPlayer_GetLastPlayedTimes_Response) */ {
 public:
  CPlayer_GetLastPlayedTimes_Response();
  virtual ~CPlayer_GetLastPlayedTimes_Response();

  CPlayer_GetLastPlayedTimes_Response(const CPlayer_GetLastPlayedTimes_Response& from);

  inline CPlayer_GetLastPlayedTimes_Response& operator=(const CPlayer_GetLastPlayedTimes_Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CPlayer_GetLastPlayedTimes_Response& default_instance();

  static inline const CPlayer_GetLastPlayedTimes_Response* internal_default_instance() {
    return reinterpret_cast<const CPlayer_GetLastPlayedTimes_Response*>(
               &_CPlayer_GetLastPlayedTimes_Response_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(CPlayer_GetLastPlayedTimes_Response* other);

  // implements Message ----------------------------------------------

  inline CPlayer_GetLastPlayedTimes_Response* New() const PROTOBUF_FINAL { return New(NULL); }

  CPlayer_GetLastPlayedTimes_Response* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CPlayer_GetLastPlayedTimes_Response& from);
  void MergeFrom(const CPlayer_GetLastPlayedTimes_Response& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CPlayer_GetLastPlayedTimes_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CPlayer_GetLastPlayedTimes_Response_Game Game;

  // accessors -------------------------------------------------------

  // repeated .proto.steam.CPlayer_GetLastPlayedTimes_Response.Game games = 1;
  int games_size() const;
  void clear_games();
  static const int kGamesFieldNumber = 1;
  const ::proto::steam::CPlayer_GetLastPlayedTimes_Response_Game& games(int index) const;
  ::proto::steam::CPlayer_GetLastPlayedTimes_Response_Game* mutable_games(int index);
  ::proto::steam::CPlayer_GetLastPlayedTimes_Response_Game* add_games();
  ::google::protobuf::RepeatedPtrField< ::proto::steam::CPlayer_GetLastPlayedTimes_Response_Game >*
      mutable_games();
  const ::google::protobuf::RepeatedPtrField< ::proto::steam::CPlayer_GetLastPlayedTimes_Response_Game >&
      games() const;

  // @@protoc_insertion_point(class_scope:proto.steam.CPlayer_GetLastPlayedTimes_Response)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::steam::CPlayer_GetLastPlayedTimes_Response_Game > games_;
  friend struct protobuf_steammessages_5fplayer_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CPlayer_AcceptSSA_Request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CPlayer_AcceptSSA_Request) */ {
 public:
  CPlayer_AcceptSSA_Request();
  virtual ~CPlayer_AcceptSSA_Request();

  CPlayer_AcceptSSA_Request(const CPlayer_AcceptSSA_Request& from);

  inline CPlayer_AcceptSSA_Request& operator=(const CPlayer_AcceptSSA_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CPlayer_AcceptSSA_Request& default_instance();

  static inline const CPlayer_AcceptSSA_Request* internal_default_instance() {
    return reinterpret_cast<const CPlayer_AcceptSSA_Request*>(
               &_CPlayer_AcceptSSA_Request_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(CPlayer_AcceptSSA_Request* other);

  // implements Message ----------------------------------------------

  inline CPlayer_AcceptSSA_Request* New() const PROTOBUF_FINAL { return New(NULL); }

  CPlayer_AcceptSSA_Request* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CPlayer_AcceptSSA_Request& from);
  void MergeFrom(const CPlayer_AcceptSSA_Request& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CPlayer_AcceptSSA_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.steam.CPlayer_AcceptSSA_Request)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  friend struct protobuf_steammessages_5fplayer_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CPlayer_AcceptSSA_Response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CPlayer_AcceptSSA_Response) */ {
 public:
  CPlayer_AcceptSSA_Response();
  virtual ~CPlayer_AcceptSSA_Response();

  CPlayer_AcceptSSA_Response(const CPlayer_AcceptSSA_Response& from);

  inline CPlayer_AcceptSSA_Response& operator=(const CPlayer_AcceptSSA_Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CPlayer_AcceptSSA_Response& default_instance();

  static inline const CPlayer_AcceptSSA_Response* internal_default_instance() {
    return reinterpret_cast<const CPlayer_AcceptSSA_Response*>(
               &_CPlayer_AcceptSSA_Response_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(CPlayer_AcceptSSA_Response* other);

  // implements Message ----------------------------------------------

  inline CPlayer_AcceptSSA_Response* New() const PROTOBUF_FINAL { return New(NULL); }

  CPlayer_AcceptSSA_Response* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CPlayer_AcceptSSA_Response& from);
  void MergeFrom(const CPlayer_AcceptSSA_Response& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CPlayer_AcceptSSA_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.steam.CPlayer_AcceptSSA_Response)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  friend struct protobuf_steammessages_5fplayer_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CPlayer_GetNicknameList_Request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CPlayer_GetNicknameList_Request) */ {
 public:
  CPlayer_GetNicknameList_Request();
  virtual ~CPlayer_GetNicknameList_Request();

  CPlayer_GetNicknameList_Request(const CPlayer_GetNicknameList_Request& from);

  inline CPlayer_GetNicknameList_Request& operator=(const CPlayer_GetNicknameList_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CPlayer_GetNicknameList_Request& default_instance();

  static inline const CPlayer_GetNicknameList_Request* internal_default_instance() {
    return reinterpret_cast<const CPlayer_GetNicknameList_Request*>(
               &_CPlayer_GetNicknameList_Request_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(CPlayer_GetNicknameList_Request* other);

  // implements Message ----------------------------------------------

  inline CPlayer_GetNicknameList_Request* New() const PROTOBUF_FINAL { return New(NULL); }

  CPlayer_GetNicknameList_Request* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CPlayer_GetNicknameList_Request& from);
  void MergeFrom(const CPlayer_GetNicknameList_Request& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CPlayer_GetNicknameList_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.steam.CPlayer_GetNicknameList_Request)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  friend struct protobuf_steammessages_5fplayer_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CPlayer_GetNicknameList_Response_PlayerNickname : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CPlayer_GetNicknameList_Response.PlayerNickname) */ {
 public:
  CPlayer_GetNicknameList_Response_PlayerNickname();
  virtual ~CPlayer_GetNicknameList_Response_PlayerNickname();

  CPlayer_GetNicknameList_Response_PlayerNickname(const CPlayer_GetNicknameList_Response_PlayerNickname& from);

  inline CPlayer_GetNicknameList_Response_PlayerNickname& operator=(const CPlayer_GetNicknameList_Response_PlayerNickname& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CPlayer_GetNicknameList_Response_PlayerNickname& default_instance();

  static inline const CPlayer_GetNicknameList_Response_PlayerNickname* internal_default_instance() {
    return reinterpret_cast<const CPlayer_GetNicknameList_Response_PlayerNickname*>(
               &_CPlayer_GetNicknameList_Response_PlayerNickname_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(CPlayer_GetNicknameList_Response_PlayerNickname* other);

  // implements Message ----------------------------------------------

  inline CPlayer_GetNicknameList_Response_PlayerNickname* New() const PROTOBUF_FINAL { return New(NULL); }

  CPlayer_GetNicknameList_Response_PlayerNickname* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CPlayer_GetNicknameList_Response_PlayerNickname& from);
  void MergeFrom(const CPlayer_GetNicknameList_Response_PlayerNickname& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CPlayer_GetNicknameList_Response_PlayerNickname* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string nickname = 2;
  bool has_nickname() const;
  void clear_nickname();
  static const int kNicknameFieldNumber = 2;
  const ::std::string& nickname() const;
  void set_nickname(const ::std::string& value);
  #if LANG_CXX11
  void set_nickname(::std::string&& value);
  #endif
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  ::std::string* mutable_nickname();
  ::std::string* release_nickname();
  void set_allocated_nickname(::std::string* nickname);

  // optional fixed32 accountid = 1;
  bool has_accountid() const;
  void clear_accountid();
  static const int kAccountidFieldNumber = 1;
  ::google::protobuf::uint32 accountid() const;
  void set_accountid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CPlayer_GetNicknameList_Response.PlayerNickname)
 private:
  void set_has_accountid();
  void clear_has_accountid();
  void set_has_nickname();
  void clear_has_nickname();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr nickname_;
  ::google::protobuf::uint32 accountid_;
  friend struct protobuf_steammessages_5fplayer_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CPlayer_GetNicknameList_Response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CPlayer_GetNicknameList_Response) */ {
 public:
  CPlayer_GetNicknameList_Response();
  virtual ~CPlayer_GetNicknameList_Response();

  CPlayer_GetNicknameList_Response(const CPlayer_GetNicknameList_Response& from);

  inline CPlayer_GetNicknameList_Response& operator=(const CPlayer_GetNicknameList_Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CPlayer_GetNicknameList_Response& default_instance();

  static inline const CPlayer_GetNicknameList_Response* internal_default_instance() {
    return reinterpret_cast<const CPlayer_GetNicknameList_Response*>(
               &_CPlayer_GetNicknameList_Response_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(CPlayer_GetNicknameList_Response* other);

  // implements Message ----------------------------------------------

  inline CPlayer_GetNicknameList_Response* New() const PROTOBUF_FINAL { return New(NULL); }

  CPlayer_GetNicknameList_Response* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CPlayer_GetNicknameList_Response& from);
  void MergeFrom(const CPlayer_GetNicknameList_Response& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CPlayer_GetNicknameList_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CPlayer_GetNicknameList_Response_PlayerNickname PlayerNickname;

  // accessors -------------------------------------------------------

  // repeated .proto.steam.CPlayer_GetNicknameList_Response.PlayerNickname nicknames = 1;
  int nicknames_size() const;
  void clear_nicknames();
  static const int kNicknamesFieldNumber = 1;
  const ::proto::steam::CPlayer_GetNicknameList_Response_PlayerNickname& nicknames(int index) const;
  ::proto::steam::CPlayer_GetNicknameList_Response_PlayerNickname* mutable_nicknames(int index);
  ::proto::steam::CPlayer_GetNicknameList_Response_PlayerNickname* add_nicknames();
  ::google::protobuf::RepeatedPtrField< ::proto::steam::CPlayer_GetNicknameList_Response_PlayerNickname >*
      mutable_nicknames();
  const ::google::protobuf::RepeatedPtrField< ::proto::steam::CPlayer_GetNicknameList_Response_PlayerNickname >&
      nicknames() const;

  // @@protoc_insertion_point(class_scope:proto.steam.CPlayer_GetNicknameList_Response)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::steam::CPlayer_GetNicknameList_Response_PlayerNickname > nicknames_;
  friend struct protobuf_steammessages_5fplayer_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CPlayer_LastPlayedTimes_Notification : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CPlayer_LastPlayedTimes_Notification) */ {
 public:
  CPlayer_LastPlayedTimes_Notification();
  virtual ~CPlayer_LastPlayedTimes_Notification();

  CPlayer_LastPlayedTimes_Notification(const CPlayer_LastPlayedTimes_Notification& from);

  inline CPlayer_LastPlayedTimes_Notification& operator=(const CPlayer_LastPlayedTimes_Notification& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CPlayer_LastPlayedTimes_Notification& default_instance();

  static inline const CPlayer_LastPlayedTimes_Notification* internal_default_instance() {
    return reinterpret_cast<const CPlayer_LastPlayedTimes_Notification*>(
               &_CPlayer_LastPlayedTimes_Notification_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(CPlayer_LastPlayedTimes_Notification* other);

  // implements Message ----------------------------------------------

  inline CPlayer_LastPlayedTimes_Notification* New() const PROTOBUF_FINAL { return New(NULL); }

  CPlayer_LastPlayedTimes_Notification* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CPlayer_LastPlayedTimes_Notification& from);
  void MergeFrom(const CPlayer_LastPlayedTimes_Notification& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CPlayer_LastPlayedTimes_Notification* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.steam.CPlayer_GetLastPlayedTimes_Response.Game games = 1;
  int games_size() const;
  void clear_games();
  static const int kGamesFieldNumber = 1;
  const ::proto::steam::CPlayer_GetLastPlayedTimes_Response_Game& games(int index) const;
  ::proto::steam::CPlayer_GetLastPlayedTimes_Response_Game* mutable_games(int index);
  ::proto::steam::CPlayer_GetLastPlayedTimes_Response_Game* add_games();
  ::google::protobuf::RepeatedPtrField< ::proto::steam::CPlayer_GetLastPlayedTimes_Response_Game >*
      mutable_games();
  const ::google::protobuf::RepeatedPtrField< ::proto::steam::CPlayer_GetLastPlayedTimes_Response_Game >&
      games() const;

  // @@protoc_insertion_point(class_scope:proto.steam.CPlayer_LastPlayedTimes_Notification)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::steam::CPlayer_GetLastPlayedTimes_Response_Game > games_;
  friend struct protobuf_steammessages_5fplayer_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CPlayer_FriendNicknameChanged_Notification : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CPlayer_FriendNicknameChanged_Notification) */ {
 public:
  CPlayer_FriendNicknameChanged_Notification();
  virtual ~CPlayer_FriendNicknameChanged_Notification();

  CPlayer_FriendNicknameChanged_Notification(const CPlayer_FriendNicknameChanged_Notification& from);

  inline CPlayer_FriendNicknameChanged_Notification& operator=(const CPlayer_FriendNicknameChanged_Notification& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CPlayer_FriendNicknameChanged_Notification& default_instance();

  static inline const CPlayer_FriendNicknameChanged_Notification* internal_default_instance() {
    return reinterpret_cast<const CPlayer_FriendNicknameChanged_Notification*>(
               &_CPlayer_FriendNicknameChanged_Notification_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(CPlayer_FriendNicknameChanged_Notification* other);

  // implements Message ----------------------------------------------

  inline CPlayer_FriendNicknameChanged_Notification* New() const PROTOBUF_FINAL { return New(NULL); }

  CPlayer_FriendNicknameChanged_Notification* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CPlayer_FriendNicknameChanged_Notification& from);
  void MergeFrom(const CPlayer_FriendNicknameChanged_Notification& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CPlayer_FriendNicknameChanged_Notification* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string nickname = 2;
  bool has_nickname() const;
  void clear_nickname();
  static const int kNicknameFieldNumber = 2;
  const ::std::string& nickname() const;
  void set_nickname(const ::std::string& value);
  #if LANG_CXX11
  void set_nickname(::std::string&& value);
  #endif
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  ::std::string* mutable_nickname();
  ::std::string* release_nickname();
  void set_allocated_nickname(::std::string* nickname);

  // optional fixed32 accountid = 1;
  bool has_accountid() const;
  void clear_accountid();
  static const int kAccountidFieldNumber = 1;
  ::google::protobuf::uint32 accountid() const;
  void set_accountid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CPlayer_FriendNicknameChanged_Notification)
 private:
  void set_has_accountid();
  void clear_has_accountid();
  void set_has_nickname();
  void clear_has_nickname();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr nickname_;
  ::google::protobuf::uint32 accountid_;
  friend struct protobuf_steammessages_5fplayer_2esteamclient_2eproto::TableStruct;
};
// ===================================================================

class Player_Stub;

class Player : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline Player() {};
 public:
  virtual ~Player();

  typedef Player_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void GetGameBadgeLevels(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CPlayer_GetGameBadgeLevels_Request* request,
                       ::proto::steam::CPlayer_GetGameBadgeLevels_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void ClientGetLastPlayedTimes(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CPlayer_GetLastPlayedTimes_Request* request,
                       ::proto::steam::CPlayer_GetLastPlayedTimes_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void AcceptSSA(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CPlayer_AcceptSSA_Request* request,
                       ::proto::steam::CPlayer_AcceptSSA_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetNicknameList(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CPlayer_GetNicknameList_Request* request,
                       ::proto::steam::CPlayer_GetNicknameList_Response* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(Player);
};

class Player_Stub : public Player {
 public:
  Player_Stub(::google::protobuf::RpcChannel* channel);
  Player_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~Player_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements Player ------------------------------------------

  void GetGameBadgeLevels(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CPlayer_GetGameBadgeLevels_Request* request,
                       ::proto::steam::CPlayer_GetGameBadgeLevels_Response* response,
                       ::google::protobuf::Closure* done);
  void ClientGetLastPlayedTimes(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CPlayer_GetLastPlayedTimes_Request* request,
                       ::proto::steam::CPlayer_GetLastPlayedTimes_Response* response,
                       ::google::protobuf::Closure* done);
  void AcceptSSA(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CPlayer_AcceptSSA_Request* request,
                       ::proto::steam::CPlayer_AcceptSSA_Response* response,
                       ::google::protobuf::Closure* done);
  void GetNicknameList(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CPlayer_GetNicknameList_Request* request,
                       ::proto::steam::CPlayer_GetNicknameList_Response* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(Player_Stub);
};


// -------------------------------------------------------------------

class PlayerClient_Stub;

class PlayerClient : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline PlayerClient() {};
 public:
  virtual ~PlayerClient();

  typedef PlayerClient_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void NotifyLastPlayedTimes(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CPlayer_LastPlayedTimes_Notification* request,
                       ::proto::steam::NoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void NotifyFriendNicknameChanged(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CPlayer_FriendNicknameChanged_Notification* request,
                       ::proto::steam::NoResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(PlayerClient);
};

class PlayerClient_Stub : public PlayerClient {
 public:
  PlayerClient_Stub(::google::protobuf::RpcChannel* channel);
  PlayerClient_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~PlayerClient_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements PlayerClient ------------------------------------------

  void NotifyLastPlayedTimes(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CPlayer_LastPlayedTimes_Notification* request,
                       ::proto::steam::NoResponse* response,
                       ::google::protobuf::Closure* done);
  void NotifyFriendNicknameChanged(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CPlayer_FriendNicknameChanged_Notification* request,
                       ::proto::steam::NoResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(PlayerClient_Stub);
};


// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// CPlayer_GetGameBadgeLevels_Request

// optional uint32 appid = 1;
inline bool CPlayer_GetGameBadgeLevels_Request::has_appid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CPlayer_GetGameBadgeLevels_Request::set_has_appid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CPlayer_GetGameBadgeLevels_Request::clear_has_appid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CPlayer_GetGameBadgeLevels_Request::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
inline ::google::protobuf::uint32 CPlayer_GetGameBadgeLevels_Request::appid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPlayer_GetGameBadgeLevels_Request.appid)
  return appid_;
}
inline void CPlayer_GetGameBadgeLevels_Request::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPlayer_GetGameBadgeLevels_Request.appid)
}

// -------------------------------------------------------------------

// CPlayer_GetGameBadgeLevels_Response_Badge

// optional int32 level = 1;
inline bool CPlayer_GetGameBadgeLevels_Response_Badge::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CPlayer_GetGameBadgeLevels_Response_Badge::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CPlayer_GetGameBadgeLevels_Response_Badge::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CPlayer_GetGameBadgeLevels_Response_Badge::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 CPlayer_GetGameBadgeLevels_Response_Badge::level() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPlayer_GetGameBadgeLevels_Response.Badge.level)
  return level_;
}
inline void CPlayer_GetGameBadgeLevels_Response_Badge::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPlayer_GetGameBadgeLevels_Response.Badge.level)
}

// optional int32 series = 2;
inline bool CPlayer_GetGameBadgeLevels_Response_Badge::has_series() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CPlayer_GetGameBadgeLevels_Response_Badge::set_has_series() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CPlayer_GetGameBadgeLevels_Response_Badge::clear_has_series() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CPlayer_GetGameBadgeLevels_Response_Badge::clear_series() {
  series_ = 0;
  clear_has_series();
}
inline ::google::protobuf::int32 CPlayer_GetGameBadgeLevels_Response_Badge::series() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPlayer_GetGameBadgeLevels_Response.Badge.series)
  return series_;
}
inline void CPlayer_GetGameBadgeLevels_Response_Badge::set_series(::google::protobuf::int32 value) {
  set_has_series();
  series_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPlayer_GetGameBadgeLevels_Response.Badge.series)
}

// optional uint32 border_color = 3;
inline bool CPlayer_GetGameBadgeLevels_Response_Badge::has_border_color() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CPlayer_GetGameBadgeLevels_Response_Badge::set_has_border_color() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CPlayer_GetGameBadgeLevels_Response_Badge::clear_has_border_color() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CPlayer_GetGameBadgeLevels_Response_Badge::clear_border_color() {
  border_color_ = 0u;
  clear_has_border_color();
}
inline ::google::protobuf::uint32 CPlayer_GetGameBadgeLevels_Response_Badge::border_color() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPlayer_GetGameBadgeLevels_Response.Badge.border_color)
  return border_color_;
}
inline void CPlayer_GetGameBadgeLevels_Response_Badge::set_border_color(::google::protobuf::uint32 value) {
  set_has_border_color();
  border_color_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPlayer_GetGameBadgeLevels_Response.Badge.border_color)
}

// -------------------------------------------------------------------

// CPlayer_GetGameBadgeLevels_Response

// optional uint32 player_level = 1;
inline bool CPlayer_GetGameBadgeLevels_Response::has_player_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CPlayer_GetGameBadgeLevels_Response::set_has_player_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CPlayer_GetGameBadgeLevels_Response::clear_has_player_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CPlayer_GetGameBadgeLevels_Response::clear_player_level() {
  player_level_ = 0u;
  clear_has_player_level();
}
inline ::google::protobuf::uint32 CPlayer_GetGameBadgeLevels_Response::player_level() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPlayer_GetGameBadgeLevels_Response.player_level)
  return player_level_;
}
inline void CPlayer_GetGameBadgeLevels_Response::set_player_level(::google::protobuf::uint32 value) {
  set_has_player_level();
  player_level_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPlayer_GetGameBadgeLevels_Response.player_level)
}

// repeated .proto.steam.CPlayer_GetGameBadgeLevels_Response.Badge badges = 2;
inline int CPlayer_GetGameBadgeLevels_Response::badges_size() const {
  return badges_.size();
}
inline void CPlayer_GetGameBadgeLevels_Response::clear_badges() {
  badges_.Clear();
}
inline const ::proto::steam::CPlayer_GetGameBadgeLevels_Response_Badge& CPlayer_GetGameBadgeLevels_Response::badges(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CPlayer_GetGameBadgeLevels_Response.badges)
  return badges_.Get(index);
}
inline ::proto::steam::CPlayer_GetGameBadgeLevels_Response_Badge* CPlayer_GetGameBadgeLevels_Response::mutable_badges(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CPlayer_GetGameBadgeLevels_Response.badges)
  return badges_.Mutable(index);
}
inline ::proto::steam::CPlayer_GetGameBadgeLevels_Response_Badge* CPlayer_GetGameBadgeLevels_Response::add_badges() {
  // @@protoc_insertion_point(field_add:proto.steam.CPlayer_GetGameBadgeLevels_Response.badges)
  return badges_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::steam::CPlayer_GetGameBadgeLevels_Response_Badge >*
CPlayer_GetGameBadgeLevels_Response::mutable_badges() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CPlayer_GetGameBadgeLevels_Response.badges)
  return &badges_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::steam::CPlayer_GetGameBadgeLevels_Response_Badge >&
CPlayer_GetGameBadgeLevels_Response::badges() const {
  // @@protoc_insertion_point(field_list:proto.steam.CPlayer_GetGameBadgeLevels_Response.badges)
  return badges_;
}

// -------------------------------------------------------------------

// CPlayer_GetLastPlayedTimes_Request

// optional uint32 min_last_played = 1 [(.proto.steam.description) = "The most recent last-played time the client already knows about"];
inline bool CPlayer_GetLastPlayedTimes_Request::has_min_last_played() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CPlayer_GetLastPlayedTimes_Request::set_has_min_last_played() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CPlayer_GetLastPlayedTimes_Request::clear_has_min_last_played() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CPlayer_GetLastPlayedTimes_Request::clear_min_last_played() {
  min_last_played_ = 0u;
  clear_has_min_last_played();
}
inline ::google::protobuf::uint32 CPlayer_GetLastPlayedTimes_Request::min_last_played() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPlayer_GetLastPlayedTimes_Request.min_last_played)
  return min_last_played_;
}
inline void CPlayer_GetLastPlayedTimes_Request::set_min_last_played(::google::protobuf::uint32 value) {
  set_has_min_last_played();
  min_last_played_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPlayer_GetLastPlayedTimes_Request.min_last_played)
}

// -------------------------------------------------------------------

// CPlayer_GetLastPlayedTimes_Response_Game

// optional int32 appid = 1;
inline bool CPlayer_GetLastPlayedTimes_Response_Game::has_appid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CPlayer_GetLastPlayedTimes_Response_Game::set_has_appid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CPlayer_GetLastPlayedTimes_Response_Game::clear_has_appid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CPlayer_GetLastPlayedTimes_Response_Game::clear_appid() {
  appid_ = 0;
  clear_has_appid();
}
inline ::google::protobuf::int32 CPlayer_GetLastPlayedTimes_Response_Game::appid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPlayer_GetLastPlayedTimes_Response.Game.appid)
  return appid_;
}
inline void CPlayer_GetLastPlayedTimes_Response_Game::set_appid(::google::protobuf::int32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPlayer_GetLastPlayedTimes_Response.Game.appid)
}

// optional uint32 last_playtime = 2;
inline bool CPlayer_GetLastPlayedTimes_Response_Game::has_last_playtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CPlayer_GetLastPlayedTimes_Response_Game::set_has_last_playtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CPlayer_GetLastPlayedTimes_Response_Game::clear_has_last_playtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CPlayer_GetLastPlayedTimes_Response_Game::clear_last_playtime() {
  last_playtime_ = 0u;
  clear_has_last_playtime();
}
inline ::google::protobuf::uint32 CPlayer_GetLastPlayedTimes_Response_Game::last_playtime() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPlayer_GetLastPlayedTimes_Response.Game.last_playtime)
  return last_playtime_;
}
inline void CPlayer_GetLastPlayedTimes_Response_Game::set_last_playtime(::google::protobuf::uint32 value) {
  set_has_last_playtime();
  last_playtime_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPlayer_GetLastPlayedTimes_Response.Game.last_playtime)
}

// optional int32 playtime_2weeks = 3;
inline bool CPlayer_GetLastPlayedTimes_Response_Game::has_playtime_2weeks() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CPlayer_GetLastPlayedTimes_Response_Game::set_has_playtime_2weeks() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CPlayer_GetLastPlayedTimes_Response_Game::clear_has_playtime_2weeks() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CPlayer_GetLastPlayedTimes_Response_Game::clear_playtime_2weeks() {
  playtime_2weeks_ = 0;
  clear_has_playtime_2weeks();
}
inline ::google::protobuf::int32 CPlayer_GetLastPlayedTimes_Response_Game::playtime_2weeks() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPlayer_GetLastPlayedTimes_Response.Game.playtime_2weeks)
  return playtime_2weeks_;
}
inline void CPlayer_GetLastPlayedTimes_Response_Game::set_playtime_2weeks(::google::protobuf::int32 value) {
  set_has_playtime_2weeks();
  playtime_2weeks_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPlayer_GetLastPlayedTimes_Response.Game.playtime_2weeks)
}

// optional int32 playtime_forever = 4;
inline bool CPlayer_GetLastPlayedTimes_Response_Game::has_playtime_forever() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CPlayer_GetLastPlayedTimes_Response_Game::set_has_playtime_forever() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CPlayer_GetLastPlayedTimes_Response_Game::clear_has_playtime_forever() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CPlayer_GetLastPlayedTimes_Response_Game::clear_playtime_forever() {
  playtime_forever_ = 0;
  clear_has_playtime_forever();
}
inline ::google::protobuf::int32 CPlayer_GetLastPlayedTimes_Response_Game::playtime_forever() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPlayer_GetLastPlayedTimes_Response.Game.playtime_forever)
  return playtime_forever_;
}
inline void CPlayer_GetLastPlayedTimes_Response_Game::set_playtime_forever(::google::protobuf::int32 value) {
  set_has_playtime_forever();
  playtime_forever_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPlayer_GetLastPlayedTimes_Response.Game.playtime_forever)
}

// -------------------------------------------------------------------

// CPlayer_GetLastPlayedTimes_Response

// repeated .proto.steam.CPlayer_GetLastPlayedTimes_Response.Game games = 1;
inline int CPlayer_GetLastPlayedTimes_Response::games_size() const {
  return games_.size();
}
inline void CPlayer_GetLastPlayedTimes_Response::clear_games() {
  games_.Clear();
}
inline const ::proto::steam::CPlayer_GetLastPlayedTimes_Response_Game& CPlayer_GetLastPlayedTimes_Response::games(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CPlayer_GetLastPlayedTimes_Response.games)
  return games_.Get(index);
}
inline ::proto::steam::CPlayer_GetLastPlayedTimes_Response_Game* CPlayer_GetLastPlayedTimes_Response::mutable_games(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CPlayer_GetLastPlayedTimes_Response.games)
  return games_.Mutable(index);
}
inline ::proto::steam::CPlayer_GetLastPlayedTimes_Response_Game* CPlayer_GetLastPlayedTimes_Response::add_games() {
  // @@protoc_insertion_point(field_add:proto.steam.CPlayer_GetLastPlayedTimes_Response.games)
  return games_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::steam::CPlayer_GetLastPlayedTimes_Response_Game >*
CPlayer_GetLastPlayedTimes_Response::mutable_games() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CPlayer_GetLastPlayedTimes_Response.games)
  return &games_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::steam::CPlayer_GetLastPlayedTimes_Response_Game >&
CPlayer_GetLastPlayedTimes_Response::games() const {
  // @@protoc_insertion_point(field_list:proto.steam.CPlayer_GetLastPlayedTimes_Response.games)
  return games_;
}

// -------------------------------------------------------------------

// CPlayer_AcceptSSA_Request

// -------------------------------------------------------------------

// CPlayer_AcceptSSA_Response

// -------------------------------------------------------------------

// CPlayer_GetNicknameList_Request

// -------------------------------------------------------------------

// CPlayer_GetNicknameList_Response_PlayerNickname

// optional fixed32 accountid = 1;
inline bool CPlayer_GetNicknameList_Response_PlayerNickname::has_accountid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CPlayer_GetNicknameList_Response_PlayerNickname::set_has_accountid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CPlayer_GetNicknameList_Response_PlayerNickname::clear_has_accountid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CPlayer_GetNicknameList_Response_PlayerNickname::clear_accountid() {
  accountid_ = 0u;
  clear_has_accountid();
}
inline ::google::protobuf::uint32 CPlayer_GetNicknameList_Response_PlayerNickname::accountid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPlayer_GetNicknameList_Response.PlayerNickname.accountid)
  return accountid_;
}
inline void CPlayer_GetNicknameList_Response_PlayerNickname::set_accountid(::google::protobuf::uint32 value) {
  set_has_accountid();
  accountid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPlayer_GetNicknameList_Response.PlayerNickname.accountid)
}

// optional string nickname = 2;
inline bool CPlayer_GetNicknameList_Response_PlayerNickname::has_nickname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CPlayer_GetNicknameList_Response_PlayerNickname::set_has_nickname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CPlayer_GetNicknameList_Response_PlayerNickname::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CPlayer_GetNicknameList_Response_PlayerNickname::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nickname();
}
inline const ::std::string& CPlayer_GetNicknameList_Response_PlayerNickname::nickname() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPlayer_GetNicknameList_Response.PlayerNickname.nickname)
  return nickname_.GetNoArena();
}
inline void CPlayer_GetNicknameList_Response_PlayerNickname::set_nickname(const ::std::string& value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CPlayer_GetNicknameList_Response.PlayerNickname.nickname)
}
#if LANG_CXX11
inline void CPlayer_GetNicknameList_Response_PlayerNickname::set_nickname(::std::string&& value) {
  set_has_nickname();
  nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CPlayer_GetNicknameList_Response.PlayerNickname.nickname)
}
#endif
inline void CPlayer_GetNicknameList_Response_PlayerNickname::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CPlayer_GetNicknameList_Response.PlayerNickname.nickname)
}
inline void CPlayer_GetNicknameList_Response_PlayerNickname::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CPlayer_GetNicknameList_Response.PlayerNickname.nickname)
}
inline ::std::string* CPlayer_GetNicknameList_Response_PlayerNickname::mutable_nickname() {
  set_has_nickname();
  // @@protoc_insertion_point(field_mutable:proto.steam.CPlayer_GetNicknameList_Response.PlayerNickname.nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CPlayer_GetNicknameList_Response_PlayerNickname::release_nickname() {
  // @@protoc_insertion_point(field_release:proto.steam.CPlayer_GetNicknameList_Response.PlayerNickname.nickname)
  clear_has_nickname();
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CPlayer_GetNicknameList_Response_PlayerNickname::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CPlayer_GetNicknameList_Response.PlayerNickname.nickname)
}

// -------------------------------------------------------------------

// CPlayer_GetNicknameList_Response

// repeated .proto.steam.CPlayer_GetNicknameList_Response.PlayerNickname nicknames = 1;
inline int CPlayer_GetNicknameList_Response::nicknames_size() const {
  return nicknames_.size();
}
inline void CPlayer_GetNicknameList_Response::clear_nicknames() {
  nicknames_.Clear();
}
inline const ::proto::steam::CPlayer_GetNicknameList_Response_PlayerNickname& CPlayer_GetNicknameList_Response::nicknames(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CPlayer_GetNicknameList_Response.nicknames)
  return nicknames_.Get(index);
}
inline ::proto::steam::CPlayer_GetNicknameList_Response_PlayerNickname* CPlayer_GetNicknameList_Response::mutable_nicknames(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CPlayer_GetNicknameList_Response.nicknames)
  return nicknames_.Mutable(index);
}
inline ::proto::steam::CPlayer_GetNicknameList_Response_PlayerNickname* CPlayer_GetNicknameList_Response::add_nicknames() {
  // @@protoc_insertion_point(field_add:proto.steam.CPlayer_GetNicknameList_Response.nicknames)
  return nicknames_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::steam::CPlayer_GetNicknameList_Response_PlayerNickname >*
CPlayer_GetNicknameList_Response::mutable_nicknames() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CPlayer_GetNicknameList_Response.nicknames)
  return &nicknames_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::steam::CPlayer_GetNicknameList_Response_PlayerNickname >&
CPlayer_GetNicknameList_Response::nicknames() const {
  // @@protoc_insertion_point(field_list:proto.steam.CPlayer_GetNicknameList_Response.nicknames)
  return nicknames_;
}

// -------------------------------------------------------------------

// CPlayer_LastPlayedTimes_Notification

// repeated .proto.steam.CPlayer_GetLastPlayedTimes_Response.Game games = 1;
inline int CPlayer_LastPlayedTimes_Notification::games_size() const {
  return games_.size();
}
inline void CPlayer_LastPlayedTimes_Notification::clear_games() {
  games_.Clear();
}
inline const ::proto::steam::CPlayer_GetLastPlayedTimes_Response_Game& CPlayer_LastPlayedTimes_Notification::games(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CPlayer_LastPlayedTimes_Notification.games)
  return games_.Get(index);
}
inline ::proto::steam::CPlayer_GetLastPlayedTimes_Response_Game* CPlayer_LastPlayedTimes_Notification::mutable_games(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CPlayer_LastPlayedTimes_Notification.games)
  return games_.Mutable(index);
}
inline ::proto::steam::CPlayer_GetLastPlayedTimes_Response_Game* CPlayer_LastPlayedTimes_Notification::add_games() {
  // @@protoc_insertion_point(field_add:proto.steam.CPlayer_LastPlayedTimes_Notification.games)
  return games_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::steam::CPlayer_GetLastPlayedTimes_Response_Game >*
CPlayer_LastPlayedTimes_Notification::mutable_games() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CPlayer_LastPlayedTimes_Notification.games)
  return &games_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::steam::CPlayer_GetLastPlayedTimes_Response_Game >&
CPlayer_LastPlayedTimes_Notification::games() const {
  // @@protoc_insertion_point(field_list:proto.steam.CPlayer_LastPlayedTimes_Notification.games)
  return games_;
}

// -------------------------------------------------------------------

// CPlayer_FriendNicknameChanged_Notification

// optional fixed32 accountid = 1;
inline bool CPlayer_FriendNicknameChanged_Notification::has_accountid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CPlayer_FriendNicknameChanged_Notification::set_has_accountid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CPlayer_FriendNicknameChanged_Notification::clear_has_accountid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CPlayer_FriendNicknameChanged_Notification::clear_accountid() {
  accountid_ = 0u;
  clear_has_accountid();
}
inline ::google::protobuf::uint32 CPlayer_FriendNicknameChanged_Notification::accountid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPlayer_FriendNicknameChanged_Notification.accountid)
  return accountid_;
}
inline void CPlayer_FriendNicknameChanged_Notification::set_accountid(::google::protobuf::uint32 value) {
  set_has_accountid();
  accountid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPlayer_FriendNicknameChanged_Notification.accountid)
}

// optional string nickname = 2;
inline bool CPlayer_FriendNicknameChanged_Notification::has_nickname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CPlayer_FriendNicknameChanged_Notification::set_has_nickname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CPlayer_FriendNicknameChanged_Notification::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CPlayer_FriendNicknameChanged_Notification::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nickname();
}
inline const ::std::string& CPlayer_FriendNicknameChanged_Notification::nickname() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPlayer_FriendNicknameChanged_Notification.nickname)
  return nickname_.GetNoArena();
}
inline void CPlayer_FriendNicknameChanged_Notification::set_nickname(const ::std::string& value) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CPlayer_FriendNicknameChanged_Notification.nickname)
}
#if LANG_CXX11
inline void CPlayer_FriendNicknameChanged_Notification::set_nickname(::std::string&& value) {
  set_has_nickname();
  nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CPlayer_FriendNicknameChanged_Notification.nickname)
}
#endif
inline void CPlayer_FriendNicknameChanged_Notification::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CPlayer_FriendNicknameChanged_Notification.nickname)
}
inline void CPlayer_FriendNicknameChanged_Notification::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CPlayer_FriendNicknameChanged_Notification.nickname)
}
inline ::std::string* CPlayer_FriendNicknameChanged_Notification::mutable_nickname() {
  set_has_nickname();
  // @@protoc_insertion_point(field_mutable:proto.steam.CPlayer_FriendNicknameChanged_Notification.nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CPlayer_FriendNicknameChanged_Notification::release_nickname() {
  // @@protoc_insertion_point(field_release:proto.steam.CPlayer_FriendNicknameChanged_Notification.nickname)
  clear_has_nickname();
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CPlayer_FriendNicknameChanged_Notification::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    set_has_nickname();
  } else {
    clear_has_nickname();
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CPlayer_FriendNicknameChanged_Notification.nickname)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace steam
}  // namespace proto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_steammessages_5fplayer_2esteamclient_2eproto__INCLUDED
