// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_remoteclient.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "steammessages_remoteclient.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace steam {
class CMsgRemoteClientAppStatus_AppUpdateInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgRemoteClientAppStatus_AppUpdateInfo> {
} _CMsgRemoteClientAppStatus_AppUpdateInfo_default_instance_;
class CMsgRemoteClientAppStatus_ShortcutInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgRemoteClientAppStatus_ShortcutInfo> {
} _CMsgRemoteClientAppStatus_ShortcutInfo_default_instance_;
class CMsgRemoteClientAppStatus_AppStatusDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgRemoteClientAppStatus_AppStatus> {
} _CMsgRemoteClientAppStatus_AppStatus_default_instance_;
class CMsgRemoteClientAppStatusDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgRemoteClientAppStatus> {
} _CMsgRemoteClientAppStatus_default_instance_;
class CMsgRemoteClientAuthDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgRemoteClientAuth> {
} _CMsgRemoteClientAuth_default_instance_;
class CMsgRemoteClientAuthResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgRemoteClientAuthResponse> {
} _CMsgRemoteClientAuthResponse_default_instance_;
class CMsgRemoteClientStartStream_ReservedGamepadDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgRemoteClientStartStream_ReservedGamepad> {
} _CMsgRemoteClientStartStream_ReservedGamepad_default_instance_;
class CMsgRemoteClientStartStreamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgRemoteClientStartStream> {
} _CMsgRemoteClientStartStream_default_instance_;
class CMsgRemoteClientStartStreamResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgRemoteClientStartStreamResponse> {
} _CMsgRemoteClientStartStreamResponse_default_instance_;
class CMsgRemoteClientPingDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgRemoteClientPing> {
} _CMsgRemoteClientPing_default_instance_;
class CMsgRemoteClientPingResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgRemoteClientPingResponse> {
} _CMsgRemoteClientPingResponse_default_instance_;
class CMsgRemoteClientAcceptEULADefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgRemoteClientAcceptEULA> {
} _CMsgRemoteClientAcceptEULA_default_instance_;
class CMsgRemoteClientGetControllerConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgRemoteClientGetControllerConfig> {
} _CMsgRemoteClientGetControllerConfig_default_instance_;
class CMsgRemoteClientGetControllerConfigResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgRemoteClientGetControllerConfigResponse> {
} _CMsgRemoteClientGetControllerConfigResponse_default_instance_;
class CMsgRemoteClientStreamingEnabledDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgRemoteClientStreamingEnabled> {
} _CMsgRemoteClientStreamingEnabled_default_instance_;

namespace protobuf_steammessages_5fremoteclient_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[15];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteClientAppStatus_AppUpdateInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteClientAppStatus_AppUpdateInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteClientAppStatus_AppUpdateInfo, time_update_start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteClientAppStatus_AppUpdateInfo, bytes_to_download_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteClientAppStatus_AppUpdateInfo, bytes_downloaded_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteClientAppStatus_AppUpdateInfo, bytes_to_process_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteClientAppStatus_AppUpdateInfo, bytes_processed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteClientAppStatus_AppUpdateInfo, estimated_seconds_remaining_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteClientAppStatus_AppUpdateInfo, update_result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteClientAppStatus_AppUpdateInfo, update_state_),
  3,
  0,
  1,
  2,
  5,
  7,
  4,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteClientAppStatus_ShortcutInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteClientAppStatus_ShortcutInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteClientAppStatus_ShortcutInfo, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteClientAppStatus_ShortcutInfo, icon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteClientAppStatus_ShortcutInfo, categories_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteClientAppStatus_AppStatus, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteClientAppStatus_AppStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteClientAppStatus_AppStatus, app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteClientAppStatus_AppStatus, app_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteClientAppStatus_AppStatus, update_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteClientAppStatus_AppStatus, shortcut_info_),
  2,
  3,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteClientAppStatus, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteClientAppStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteClientAppStatus, status_updates_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteClientAuth, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteClientAuth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteClientAuth, client_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteClientAuth, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteClientAuth, instance_id_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteClientAuthResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteClientAuthResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteClientAuthResponse, eresult_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteClientStartStream_ReservedGamepad, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteClientStartStream_ReservedGamepad, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteClientStartStream_ReservedGamepad, controller_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteClientStartStream_ReservedGamepad, controller_subtype_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteClientStartStream, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteClientStartStream, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteClientStartStream, app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteClientStartStream, environment_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteClientStartStream, gamepad_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteClientStartStream, launch_option_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteClientStartStream, lock_parental_lock_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteClientStartStream, unlock_parental_lock_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteClientStartStream, maximum_resolution_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteClientStartStream, maximum_resolution_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteClientStartStream, gamepads_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteClientStartStream, audio_channel_count_),
  1,
  2,
  3,
  7,
  4,
  0,
  5,
  6,
  ~0u,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteClientStartStreamResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteClientStartStreamResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteClientStartStreamResponse, e_launch_result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteClientStartStreamResponse, stream_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteClientStartStreamResponse, launch_options_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteClientStartStreamResponse, auth_token_),
  2,
  1,
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteClientPing, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteClientPing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteClientPingResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteClientPingResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteClientAcceptEULA, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteClientAcceptEULA, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteClientAcceptEULA, app_id_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteClientGetControllerConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteClientGetControllerConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteClientGetControllerConfig, app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteClientGetControllerConfig, controller_index_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteClientGetControllerConfigResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteClientGetControllerConfigResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteClientGetControllerConfigResponse, eresult_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteClientGetControllerConfigResponse, config_vdf_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteClientStreamingEnabled, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteClientStreamingEnabled, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRemoteClientStreamingEnabled, enabled_),
  0,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 13, sizeof(CMsgRemoteClientAppStatus_AppUpdateInfo)},
  { 21, 29, sizeof(CMsgRemoteClientAppStatus_ShortcutInfo)},
  { 32, 41, sizeof(CMsgRemoteClientAppStatus_AppStatus)},
  { 45, 51, sizeof(CMsgRemoteClientAppStatus)},
  { 52, 60, sizeof(CMsgRemoteClientAuth)},
  { 63, 69, sizeof(CMsgRemoteClientAuthResponse)},
  { 70, 77, sizeof(CMsgRemoteClientStartStream_ReservedGamepad)},
  { 79, 94, sizeof(CMsgRemoteClientStartStream)},
  { 104, 113, sizeof(CMsgRemoteClientStartStreamResponse)},
  { 117, 122, sizeof(CMsgRemoteClientPing)},
  { 122, 127, sizeof(CMsgRemoteClientPingResponse)},
  { 127, 133, sizeof(CMsgRemoteClientAcceptEULA)},
  { 134, 141, sizeof(CMsgRemoteClientGetControllerConfig)},
  { 143, 150, sizeof(CMsgRemoteClientGetControllerConfigResponse)},
  { 152, 158, sizeof(CMsgRemoteClientStreamingEnabled)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgRemoteClientAppStatus_AppUpdateInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgRemoteClientAppStatus_ShortcutInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgRemoteClientAppStatus_AppStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgRemoteClientAppStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgRemoteClientAuth_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgRemoteClientAuthResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgRemoteClientStartStream_ReservedGamepad_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgRemoteClientStartStream_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgRemoteClientStartStreamResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgRemoteClientPing_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgRemoteClientPingResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgRemoteClientAcceptEULA_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgRemoteClientGetControllerConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgRemoteClientGetControllerConfigResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgRemoteClientStreamingEnabled_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "steammessages_remoteclient.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 15);
}

}  // namespace

void TableStruct::Shutdown() {
  _CMsgRemoteClientAppStatus_AppUpdateInfo_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _CMsgRemoteClientAppStatus_ShortcutInfo_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _CMsgRemoteClientAppStatus_AppStatus_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _CMsgRemoteClientAppStatus_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _CMsgRemoteClientAuth_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _CMsgRemoteClientAuthResponse_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _CMsgRemoteClientStartStream_ReservedGamepad_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _CMsgRemoteClientStartStream_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _CMsgRemoteClientStartStreamResponse_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _CMsgRemoteClientPing_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _CMsgRemoteClientPingResponse_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _CMsgRemoteClientAcceptEULA_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _CMsgRemoteClientGetControllerConfig_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _CMsgRemoteClientGetControllerConfigResponse_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _CMsgRemoteClientStreamingEnabled_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::proto::steam::protobuf_steammessages_5fbase_2eproto::InitDefaults();
  ::proto::steam::protobuf_steammessages_5fremoteclient_5fdiscovery_2eproto::InitDefaults();
  _CMsgRemoteClientAppStatus_AppUpdateInfo_default_instance_.DefaultConstruct();
  _CMsgRemoteClientAppStatus_ShortcutInfo_default_instance_.DefaultConstruct();
  _CMsgRemoteClientAppStatus_AppStatus_default_instance_.DefaultConstruct();
  _CMsgRemoteClientAppStatus_default_instance_.DefaultConstruct();
  _CMsgRemoteClientAuth_default_instance_.DefaultConstruct();
  _CMsgRemoteClientAuthResponse_default_instance_.DefaultConstruct();
  _CMsgRemoteClientStartStream_ReservedGamepad_default_instance_.DefaultConstruct();
  _CMsgRemoteClientStartStream_default_instance_.DefaultConstruct();
  _CMsgRemoteClientStartStreamResponse_default_instance_.DefaultConstruct();
  _CMsgRemoteClientPing_default_instance_.DefaultConstruct();
  _CMsgRemoteClientPingResponse_default_instance_.DefaultConstruct();
  _CMsgRemoteClientAcceptEULA_default_instance_.DefaultConstruct();
  _CMsgRemoteClientGetControllerConfig_default_instance_.DefaultConstruct();
  _CMsgRemoteClientGetControllerConfigResponse_default_instance_.DefaultConstruct();
  _CMsgRemoteClientStreamingEnabled_default_instance_.DefaultConstruct();
  _CMsgRemoteClientAppStatus_AppStatus_default_instance_.get_mutable()->update_info_ = const_cast< ::proto::steam::CMsgRemoteClientAppStatus_AppUpdateInfo*>(
      ::proto::steam::CMsgRemoteClientAppStatus_AppUpdateInfo::internal_default_instance());
  _CMsgRemoteClientAppStatus_AppStatus_default_instance_.get_mutable()->shortcut_info_ = const_cast< ::proto::steam::CMsgRemoteClientAppStatus_ShortcutInfo*>(
      ::proto::steam::CMsgRemoteClientAppStatus_ShortcutInfo::internal_default_instance());
  _CMsgRemoteClientAuth_default_instance_.get_mutable()->status_ = const_cast< ::proto::steam::CMsgRemoteClientBroadcastStatus*>(
      ::proto::steam::CMsgRemoteClientBroadcastStatus::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n steammessages_remoteclient.proto\022\013prot"
      "o.steam\032\030steammessages_base.proto\032*steam"
      "messages_remoteclient_discovery.proto\"\330\004"
      "\n\031CMsgRemoteClientAppStatus\022H\n\016status_up"
      "dates\030\001 \003(\01320.proto.steam.CMsgRemoteClie"
      "ntAppStatus.AppStatus\032\350\001\n\rAppUpdateInfo\022"
      "\031\n\021time_update_start\030\001 \001(\007\022\031\n\021bytes_to_d"
      "ownload\030\002 \001(\004\022\030\n\020bytes_downloaded\030\003 \001(\004\022"
      "\030\n\020bytes_to_process\030\004 \001(\004\022\027\n\017bytes_proce"
      "ssed\030\005 \001(\004\022\'\n\033estimated_seconds_remainin"
      "g\030\006 \001(\005:\002-1\022\025\n\rupdate_result\030\007 \001(\005\022\024\n\014up"
      "date_state\030\010 \001(\r\032>\n\014ShortcutInfo\022\014\n\004name"
      "\030\001 \001(\t\022\014\n\004icon\030\002 \001(\t\022\022\n\ncategories\030\003 \003(\t"
      "\032\305\001\n\tAppStatus\022\016\n\006app_id\030\001 \001(\r\022\021\n\tapp_st"
      "ate\030\002 \001(\r\022I\n\013update_info\030\003 \001(\01324.proto.s"
      "team.CMsgRemoteClientAppStatus.AppUpdate"
      "Info\022J\n\rshortcut_info\030\004 \001(\01323.proto.stea"
      "m.CMsgRemoteClientAppStatus.ShortcutInfo"
      "\"|\n\024CMsgRemoteClientAuth\022\021\n\tclient_id\030\001 "
      "\001(\004\022<\n\006status\030\002 \001(\0132,.proto.steam.CMsgRe"
      "moteClientBroadcastStatus\022\023\n\013instance_id"
      "\030\003 \001(\004\"2\n\034CMsgRemoteClientAuthResponse\022\022"
      "\n\007eresult\030\001 \001(\005:\0012\"\245\003\n\033CMsgRemoteClientS"
      "tartStream\022\016\n\006app_id\030\001 \001(\r\022\023\n\013environmen"
      "t\030\002 \001(\005\022\025\n\rgamepad_count\030\003 \001(\005\022\031\n\rlaunch"
      "_option\030\004 \001(\005:\002-1\022!\n\022lock_parental_lock\030"
      "\005 \001(\010:\005false\022\034\n\024unlock_parental_lock\030\006 \001"
      "(\t\022\034\n\024maximum_resolution_x\030\007 \001(\005\022\034\n\024maxi"
      "mum_resolution_y\030\010 \001(\005\022J\n\010gamepads\030\t \003(\013"
      "28.proto.steam.CMsgRemoteClientStartStre"
      "am.ReservedGamepad\022\036\n\023audio_channel_coun"
      "t\030\n \001(\005:\0012\032F\n\017ReservedGamepad\022\027\n\017control"
      "ler_type\030\001 \001(\r\022\032\n\022controller_subtype\030\002 \001"
      "(\r\"\202\001\n#CMsgRemoteClientStartStreamRespon"
      "se\022\032\n\017e_launch_result\030\001 \001(\005:\0012\022\023\n\013stream"
      "_port\030\002 \001(\r\022\026\n\016launch_options\030\003 \003(\005\022\022\n\na"
      "uth_token\030\004 \001(\014\"\026\n\024CMsgRemoteClientPing\""
      "\036\n\034CMsgRemoteClientPingResponse\",\n\032CMsgR"
      "emoteClientAcceptEULA\022\016\n\006app_id\030\001 \003(\r\"O\n"
      "#CMsgRemoteClientGetControllerConfig\022\016\n\006"
      "app_id\030\001 \001(\r\022\030\n\020controller_index\030\003 \001(\r\"U"
      "\n+CMsgRemoteClientGetControllerConfigRes"
      "ponse\022\022\n\007eresult\030\001 \001(\005:\0012\022\022\n\nconfig_vdf\030"
      "\002 \001(\014\"3\n CMsgRemoteClientStreamingEnable"
      "d\022\017\n\007enabled\030\001 \002(\010B\005H\001\200\001\000"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1785);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "steammessages_remoteclient.proto", &protobuf_RegisterTypes);
  ::proto::steam::protobuf_steammessages_5fbase_2eproto::AddDescriptors();
  ::proto::steam::protobuf_steammessages_5fremoteclient_5fdiscovery_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_steammessages_5fremoteclient_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgRemoteClientAppStatus_AppUpdateInfo::kTimeUpdateStartFieldNumber;
const int CMsgRemoteClientAppStatus_AppUpdateInfo::kBytesToDownloadFieldNumber;
const int CMsgRemoteClientAppStatus_AppUpdateInfo::kBytesDownloadedFieldNumber;
const int CMsgRemoteClientAppStatus_AppUpdateInfo::kBytesToProcessFieldNumber;
const int CMsgRemoteClientAppStatus_AppUpdateInfo::kBytesProcessedFieldNumber;
const int CMsgRemoteClientAppStatus_AppUpdateInfo::kEstimatedSecondsRemainingFieldNumber;
const int CMsgRemoteClientAppStatus_AppUpdateInfo::kUpdateResultFieldNumber;
const int CMsgRemoteClientAppStatus_AppUpdateInfo::kUpdateStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgRemoteClientAppStatus_AppUpdateInfo::CMsgRemoteClientAppStatus_AppUpdateInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fremoteclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgRemoteClientAppStatus.AppUpdateInfo)
}
CMsgRemoteClientAppStatus_AppUpdateInfo::CMsgRemoteClientAppStatus_AppUpdateInfo(const CMsgRemoteClientAppStatus_AppUpdateInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&bytes_to_download_, &from.bytes_to_download_,
    reinterpret_cast<char*>(&estimated_seconds_remaining_) -
    reinterpret_cast<char*>(&bytes_to_download_) + sizeof(estimated_seconds_remaining_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgRemoteClientAppStatus.AppUpdateInfo)
}

void CMsgRemoteClientAppStatus_AppUpdateInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&bytes_to_download_, 0, reinterpret_cast<char*>(&update_state_) -
    reinterpret_cast<char*>(&bytes_to_download_) + sizeof(update_state_));
  estimated_seconds_remaining_ = -1;
}

CMsgRemoteClientAppStatus_AppUpdateInfo::~CMsgRemoteClientAppStatus_AppUpdateInfo() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgRemoteClientAppStatus.AppUpdateInfo)
  SharedDtor();
}

void CMsgRemoteClientAppStatus_AppUpdateInfo::SharedDtor() {
}

void CMsgRemoteClientAppStatus_AppUpdateInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgRemoteClientAppStatus_AppUpdateInfo::descriptor() {
  protobuf_steammessages_5fremoteclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fremoteclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgRemoteClientAppStatus_AppUpdateInfo& CMsgRemoteClientAppStatus_AppUpdateInfo::default_instance() {
  protobuf_steammessages_5fremoteclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgRemoteClientAppStatus_AppUpdateInfo* CMsgRemoteClientAppStatus_AppUpdateInfo::New(::google::protobuf::Arena* arena) const {
  CMsgRemoteClientAppStatus_AppUpdateInfo* n = new CMsgRemoteClientAppStatus_AppUpdateInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgRemoteClientAppStatus_AppUpdateInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgRemoteClientAppStatus.AppUpdateInfo)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&bytes_to_download_, 0, reinterpret_cast<char*>(&update_state_) -
      reinterpret_cast<char*>(&bytes_to_download_) + sizeof(update_state_));
    estimated_seconds_remaining_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgRemoteClientAppStatus_AppUpdateInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgRemoteClientAppStatus.AppUpdateInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 time_update_start = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {
          set_has_time_update_start();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &time_update_start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 bytes_to_download = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_bytes_to_download();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bytes_to_download_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 bytes_downloaded = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_bytes_downloaded();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bytes_downloaded_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 bytes_to_process = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_bytes_to_process();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bytes_to_process_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 bytes_processed = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_bytes_processed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bytes_processed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 estimated_seconds_remaining = 6 [default = -1];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_estimated_seconds_remaining();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &estimated_seconds_remaining_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 update_result = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_update_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &update_result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 update_state = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_update_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &update_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgRemoteClientAppStatus.AppUpdateInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgRemoteClientAppStatus.AppUpdateInfo)
  return false;
#undef DO_
}

void CMsgRemoteClientAppStatus_AppUpdateInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgRemoteClientAppStatus.AppUpdateInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 time_update_start = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->time_update_start(), output);
  }

  // optional uint64 bytes_to_download = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->bytes_to_download(), output);
  }

  // optional uint64 bytes_downloaded = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->bytes_downloaded(), output);
  }

  // optional uint64 bytes_to_process = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->bytes_to_process(), output);
  }

  // optional uint64 bytes_processed = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->bytes_processed(), output);
  }

  // optional int32 estimated_seconds_remaining = 6 [default = -1];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->estimated_seconds_remaining(), output);
  }

  // optional int32 update_result = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->update_result(), output);
  }

  // optional uint32 update_state = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->update_state(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgRemoteClientAppStatus.AppUpdateInfo)
}

::google::protobuf::uint8* CMsgRemoteClientAppStatus_AppUpdateInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgRemoteClientAppStatus.AppUpdateInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 time_update_start = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->time_update_start(), target);
  }

  // optional uint64 bytes_to_download = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->bytes_to_download(), target);
  }

  // optional uint64 bytes_downloaded = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->bytes_downloaded(), target);
  }

  // optional uint64 bytes_to_process = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->bytes_to_process(), target);
  }

  // optional uint64 bytes_processed = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->bytes_processed(), target);
  }

  // optional int32 estimated_seconds_remaining = 6 [default = -1];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->estimated_seconds_remaining(), target);
  }

  // optional int32 update_result = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->update_result(), target);
  }

  // optional uint32 update_state = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->update_state(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgRemoteClientAppStatus.AppUpdateInfo)
  return target;
}

size_t CMsgRemoteClientAppStatus_AppUpdateInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgRemoteClientAppStatus.AppUpdateInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional uint64 bytes_to_download = 2;
    if (has_bytes_to_download()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bytes_to_download());
    }

    // optional uint64 bytes_downloaded = 3;
    if (has_bytes_downloaded()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bytes_downloaded());
    }

    // optional uint64 bytes_to_process = 4;
    if (has_bytes_to_process()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bytes_to_process());
    }

    // optional fixed32 time_update_start = 1;
    if (has_time_update_start()) {
      total_size += 1 + 4;
    }

    // optional int32 update_result = 7;
    if (has_update_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->update_result());
    }

    // optional uint64 bytes_processed = 5;
    if (has_bytes_processed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bytes_processed());
    }

    // optional uint32 update_state = 8;
    if (has_update_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->update_state());
    }

    // optional int32 estimated_seconds_remaining = 6 [default = -1];
    if (has_estimated_seconds_remaining()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->estimated_seconds_remaining());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgRemoteClientAppStatus_AppUpdateInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgRemoteClientAppStatus.AppUpdateInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgRemoteClientAppStatus_AppUpdateInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgRemoteClientAppStatus_AppUpdateInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgRemoteClientAppStatus.AppUpdateInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgRemoteClientAppStatus.AppUpdateInfo)
    MergeFrom(*source);
  }
}

void CMsgRemoteClientAppStatus_AppUpdateInfo::MergeFrom(const CMsgRemoteClientAppStatus_AppUpdateInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgRemoteClientAppStatus.AppUpdateInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      bytes_to_download_ = from.bytes_to_download_;
    }
    if (cached_has_bits & 0x00000002u) {
      bytes_downloaded_ = from.bytes_downloaded_;
    }
    if (cached_has_bits & 0x00000004u) {
      bytes_to_process_ = from.bytes_to_process_;
    }
    if (cached_has_bits & 0x00000008u) {
      time_update_start_ = from.time_update_start_;
    }
    if (cached_has_bits & 0x00000010u) {
      update_result_ = from.update_result_;
    }
    if (cached_has_bits & 0x00000020u) {
      bytes_processed_ = from.bytes_processed_;
    }
    if (cached_has_bits & 0x00000040u) {
      update_state_ = from.update_state_;
    }
    if (cached_has_bits & 0x00000080u) {
      estimated_seconds_remaining_ = from.estimated_seconds_remaining_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgRemoteClientAppStatus_AppUpdateInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgRemoteClientAppStatus.AppUpdateInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRemoteClientAppStatus_AppUpdateInfo::CopyFrom(const CMsgRemoteClientAppStatus_AppUpdateInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgRemoteClientAppStatus.AppUpdateInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRemoteClientAppStatus_AppUpdateInfo::IsInitialized() const {
  return true;
}

void CMsgRemoteClientAppStatus_AppUpdateInfo::Swap(CMsgRemoteClientAppStatus_AppUpdateInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgRemoteClientAppStatus_AppUpdateInfo::InternalSwap(CMsgRemoteClientAppStatus_AppUpdateInfo* other) {
  std::swap(bytes_to_download_, other->bytes_to_download_);
  std::swap(bytes_downloaded_, other->bytes_downloaded_);
  std::swap(bytes_to_process_, other->bytes_to_process_);
  std::swap(time_update_start_, other->time_update_start_);
  std::swap(update_result_, other->update_result_);
  std::swap(bytes_processed_, other->bytes_processed_);
  std::swap(update_state_, other->update_state_);
  std::swap(estimated_seconds_remaining_, other->estimated_seconds_remaining_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgRemoteClientAppStatus_AppUpdateInfo::GetMetadata() const {
  protobuf_steammessages_5fremoteclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fremoteclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgRemoteClientAppStatus_AppUpdateInfo

// optional fixed32 time_update_start = 1;
bool CMsgRemoteClientAppStatus_AppUpdateInfo::has_time_update_start() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgRemoteClientAppStatus_AppUpdateInfo::set_has_time_update_start() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgRemoteClientAppStatus_AppUpdateInfo::clear_has_time_update_start() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgRemoteClientAppStatus_AppUpdateInfo::clear_time_update_start() {
  time_update_start_ = 0u;
  clear_has_time_update_start();
}
::google::protobuf::uint32 CMsgRemoteClientAppStatus_AppUpdateInfo::time_update_start() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteClientAppStatus.AppUpdateInfo.time_update_start)
  return time_update_start_;
}
void CMsgRemoteClientAppStatus_AppUpdateInfo::set_time_update_start(::google::protobuf::uint32 value) {
  set_has_time_update_start();
  time_update_start_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteClientAppStatus.AppUpdateInfo.time_update_start)
}

// optional uint64 bytes_to_download = 2;
bool CMsgRemoteClientAppStatus_AppUpdateInfo::has_bytes_to_download() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgRemoteClientAppStatus_AppUpdateInfo::set_has_bytes_to_download() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgRemoteClientAppStatus_AppUpdateInfo::clear_has_bytes_to_download() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgRemoteClientAppStatus_AppUpdateInfo::clear_bytes_to_download() {
  bytes_to_download_ = GOOGLE_ULONGLONG(0);
  clear_has_bytes_to_download();
}
::google::protobuf::uint64 CMsgRemoteClientAppStatus_AppUpdateInfo::bytes_to_download() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteClientAppStatus.AppUpdateInfo.bytes_to_download)
  return bytes_to_download_;
}
void CMsgRemoteClientAppStatus_AppUpdateInfo::set_bytes_to_download(::google::protobuf::uint64 value) {
  set_has_bytes_to_download();
  bytes_to_download_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteClientAppStatus.AppUpdateInfo.bytes_to_download)
}

// optional uint64 bytes_downloaded = 3;
bool CMsgRemoteClientAppStatus_AppUpdateInfo::has_bytes_downloaded() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgRemoteClientAppStatus_AppUpdateInfo::set_has_bytes_downloaded() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgRemoteClientAppStatus_AppUpdateInfo::clear_has_bytes_downloaded() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgRemoteClientAppStatus_AppUpdateInfo::clear_bytes_downloaded() {
  bytes_downloaded_ = GOOGLE_ULONGLONG(0);
  clear_has_bytes_downloaded();
}
::google::protobuf::uint64 CMsgRemoteClientAppStatus_AppUpdateInfo::bytes_downloaded() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteClientAppStatus.AppUpdateInfo.bytes_downloaded)
  return bytes_downloaded_;
}
void CMsgRemoteClientAppStatus_AppUpdateInfo::set_bytes_downloaded(::google::protobuf::uint64 value) {
  set_has_bytes_downloaded();
  bytes_downloaded_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteClientAppStatus.AppUpdateInfo.bytes_downloaded)
}

// optional uint64 bytes_to_process = 4;
bool CMsgRemoteClientAppStatus_AppUpdateInfo::has_bytes_to_process() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgRemoteClientAppStatus_AppUpdateInfo::set_has_bytes_to_process() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgRemoteClientAppStatus_AppUpdateInfo::clear_has_bytes_to_process() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgRemoteClientAppStatus_AppUpdateInfo::clear_bytes_to_process() {
  bytes_to_process_ = GOOGLE_ULONGLONG(0);
  clear_has_bytes_to_process();
}
::google::protobuf::uint64 CMsgRemoteClientAppStatus_AppUpdateInfo::bytes_to_process() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteClientAppStatus.AppUpdateInfo.bytes_to_process)
  return bytes_to_process_;
}
void CMsgRemoteClientAppStatus_AppUpdateInfo::set_bytes_to_process(::google::protobuf::uint64 value) {
  set_has_bytes_to_process();
  bytes_to_process_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteClientAppStatus.AppUpdateInfo.bytes_to_process)
}

// optional uint64 bytes_processed = 5;
bool CMsgRemoteClientAppStatus_AppUpdateInfo::has_bytes_processed() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgRemoteClientAppStatus_AppUpdateInfo::set_has_bytes_processed() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgRemoteClientAppStatus_AppUpdateInfo::clear_has_bytes_processed() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgRemoteClientAppStatus_AppUpdateInfo::clear_bytes_processed() {
  bytes_processed_ = GOOGLE_ULONGLONG(0);
  clear_has_bytes_processed();
}
::google::protobuf::uint64 CMsgRemoteClientAppStatus_AppUpdateInfo::bytes_processed() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteClientAppStatus.AppUpdateInfo.bytes_processed)
  return bytes_processed_;
}
void CMsgRemoteClientAppStatus_AppUpdateInfo::set_bytes_processed(::google::protobuf::uint64 value) {
  set_has_bytes_processed();
  bytes_processed_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteClientAppStatus.AppUpdateInfo.bytes_processed)
}

// optional int32 estimated_seconds_remaining = 6 [default = -1];
bool CMsgRemoteClientAppStatus_AppUpdateInfo::has_estimated_seconds_remaining() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgRemoteClientAppStatus_AppUpdateInfo::set_has_estimated_seconds_remaining() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgRemoteClientAppStatus_AppUpdateInfo::clear_has_estimated_seconds_remaining() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgRemoteClientAppStatus_AppUpdateInfo::clear_estimated_seconds_remaining() {
  estimated_seconds_remaining_ = -1;
  clear_has_estimated_seconds_remaining();
}
::google::protobuf::int32 CMsgRemoteClientAppStatus_AppUpdateInfo::estimated_seconds_remaining() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteClientAppStatus.AppUpdateInfo.estimated_seconds_remaining)
  return estimated_seconds_remaining_;
}
void CMsgRemoteClientAppStatus_AppUpdateInfo::set_estimated_seconds_remaining(::google::protobuf::int32 value) {
  set_has_estimated_seconds_remaining();
  estimated_seconds_remaining_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteClientAppStatus.AppUpdateInfo.estimated_seconds_remaining)
}

// optional int32 update_result = 7;
bool CMsgRemoteClientAppStatus_AppUpdateInfo::has_update_result() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgRemoteClientAppStatus_AppUpdateInfo::set_has_update_result() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgRemoteClientAppStatus_AppUpdateInfo::clear_has_update_result() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgRemoteClientAppStatus_AppUpdateInfo::clear_update_result() {
  update_result_ = 0;
  clear_has_update_result();
}
::google::protobuf::int32 CMsgRemoteClientAppStatus_AppUpdateInfo::update_result() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteClientAppStatus.AppUpdateInfo.update_result)
  return update_result_;
}
void CMsgRemoteClientAppStatus_AppUpdateInfo::set_update_result(::google::protobuf::int32 value) {
  set_has_update_result();
  update_result_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteClientAppStatus.AppUpdateInfo.update_result)
}

// optional uint32 update_state = 8;
bool CMsgRemoteClientAppStatus_AppUpdateInfo::has_update_state() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgRemoteClientAppStatus_AppUpdateInfo::set_has_update_state() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgRemoteClientAppStatus_AppUpdateInfo::clear_has_update_state() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgRemoteClientAppStatus_AppUpdateInfo::clear_update_state() {
  update_state_ = 0u;
  clear_has_update_state();
}
::google::protobuf::uint32 CMsgRemoteClientAppStatus_AppUpdateInfo::update_state() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteClientAppStatus.AppUpdateInfo.update_state)
  return update_state_;
}
void CMsgRemoteClientAppStatus_AppUpdateInfo::set_update_state(::google::protobuf::uint32 value) {
  set_has_update_state();
  update_state_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteClientAppStatus.AppUpdateInfo.update_state)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgRemoteClientAppStatus_ShortcutInfo::kNameFieldNumber;
const int CMsgRemoteClientAppStatus_ShortcutInfo::kIconFieldNumber;
const int CMsgRemoteClientAppStatus_ShortcutInfo::kCategoriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgRemoteClientAppStatus_ShortcutInfo::CMsgRemoteClientAppStatus_ShortcutInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fremoteclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgRemoteClientAppStatus.ShortcutInfo)
}
CMsgRemoteClientAppStatus_ShortcutInfo::CMsgRemoteClientAppStatus_ShortcutInfo(const CMsgRemoteClientAppStatus_ShortcutInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      categories_(from.categories_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  icon_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_icon()) {
    icon_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.icon_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgRemoteClientAppStatus.ShortcutInfo)
}

void CMsgRemoteClientAppStatus_ShortcutInfo::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  icon_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CMsgRemoteClientAppStatus_ShortcutInfo::~CMsgRemoteClientAppStatus_ShortcutInfo() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgRemoteClientAppStatus.ShortcutInfo)
  SharedDtor();
}

void CMsgRemoteClientAppStatus_ShortcutInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  icon_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgRemoteClientAppStatus_ShortcutInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgRemoteClientAppStatus_ShortcutInfo::descriptor() {
  protobuf_steammessages_5fremoteclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fremoteclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgRemoteClientAppStatus_ShortcutInfo& CMsgRemoteClientAppStatus_ShortcutInfo::default_instance() {
  protobuf_steammessages_5fremoteclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgRemoteClientAppStatus_ShortcutInfo* CMsgRemoteClientAppStatus_ShortcutInfo::New(::google::protobuf::Arena* arena) const {
  CMsgRemoteClientAppStatus_ShortcutInfo* n = new CMsgRemoteClientAppStatus_ShortcutInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgRemoteClientAppStatus_ShortcutInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgRemoteClientAppStatus.ShortcutInfo)
  categories_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_icon()) {
      GOOGLE_DCHECK(!icon_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*icon_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgRemoteClientAppStatus_ShortcutInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgRemoteClientAppStatus.ShortcutInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgRemoteClientAppStatus.ShortcutInfo.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string icon = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->icon().data(), this->icon().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgRemoteClientAppStatus.ShortcutInfo.icon");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string categories = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_categories()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->categories(this->categories_size() - 1).data(),
            this->categories(this->categories_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgRemoteClientAppStatus.ShortcutInfo.categories");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgRemoteClientAppStatus.ShortcutInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgRemoteClientAppStatus.ShortcutInfo)
  return false;
#undef DO_
}

void CMsgRemoteClientAppStatus_ShortcutInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgRemoteClientAppStatus.ShortcutInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgRemoteClientAppStatus.ShortcutInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string icon = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgRemoteClientAppStatus.ShortcutInfo.icon");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->icon(), output);
  }

  // repeated string categories = 3;
  for (int i = 0, n = this->categories_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->categories(i).data(), this->categories(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgRemoteClientAppStatus.ShortcutInfo.categories");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->categories(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgRemoteClientAppStatus.ShortcutInfo)
}

::google::protobuf::uint8* CMsgRemoteClientAppStatus_ShortcutInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgRemoteClientAppStatus.ShortcutInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgRemoteClientAppStatus.ShortcutInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string icon = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgRemoteClientAppStatus.ShortcutInfo.icon");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->icon(), target);
  }

  // repeated string categories = 3;
  for (int i = 0, n = this->categories_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->categories(i).data(), this->categories(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgRemoteClientAppStatus.ShortcutInfo.categories");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->categories(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgRemoteClientAppStatus.ShortcutInfo)
  return target;
}

size_t CMsgRemoteClientAppStatus_ShortcutInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgRemoteClientAppStatus.ShortcutInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated string categories = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->categories_size());
  for (int i = 0, n = this->categories_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->categories(i));
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string icon = 2;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgRemoteClientAppStatus_ShortcutInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgRemoteClientAppStatus.ShortcutInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgRemoteClientAppStatus_ShortcutInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgRemoteClientAppStatus_ShortcutInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgRemoteClientAppStatus.ShortcutInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgRemoteClientAppStatus.ShortcutInfo)
    MergeFrom(*source);
  }
}

void CMsgRemoteClientAppStatus_ShortcutInfo::MergeFrom(const CMsgRemoteClientAppStatus_ShortcutInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgRemoteClientAppStatus.ShortcutInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  categories_.MergeFrom(from.categories_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_icon();
      icon_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.icon_);
    }
  }
}

void CMsgRemoteClientAppStatus_ShortcutInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgRemoteClientAppStatus.ShortcutInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRemoteClientAppStatus_ShortcutInfo::CopyFrom(const CMsgRemoteClientAppStatus_ShortcutInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgRemoteClientAppStatus.ShortcutInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRemoteClientAppStatus_ShortcutInfo::IsInitialized() const {
  return true;
}

void CMsgRemoteClientAppStatus_ShortcutInfo::Swap(CMsgRemoteClientAppStatus_ShortcutInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgRemoteClientAppStatus_ShortcutInfo::InternalSwap(CMsgRemoteClientAppStatus_ShortcutInfo* other) {
  categories_.InternalSwap(&other->categories_);
  name_.Swap(&other->name_);
  icon_.Swap(&other->icon_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgRemoteClientAppStatus_ShortcutInfo::GetMetadata() const {
  protobuf_steammessages_5fremoteclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fremoteclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgRemoteClientAppStatus_ShortcutInfo

// optional string name = 1;
bool CMsgRemoteClientAppStatus_ShortcutInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgRemoteClientAppStatus_ShortcutInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgRemoteClientAppStatus_ShortcutInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgRemoteClientAppStatus_ShortcutInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& CMsgRemoteClientAppStatus_ShortcutInfo::name() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteClientAppStatus.ShortcutInfo.name)
  return name_.GetNoArena();
}
void CMsgRemoteClientAppStatus_ShortcutInfo::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteClientAppStatus.ShortcutInfo.name)
}
#if LANG_CXX11
void CMsgRemoteClientAppStatus_ShortcutInfo::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgRemoteClientAppStatus.ShortcutInfo.name)
}
#endif
void CMsgRemoteClientAppStatus_ShortcutInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgRemoteClientAppStatus.ShortcutInfo.name)
}
void CMsgRemoteClientAppStatus_ShortcutInfo::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgRemoteClientAppStatus.ShortcutInfo.name)
}
::std::string* CMsgRemoteClientAppStatus_ShortcutInfo::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgRemoteClientAppStatus.ShortcutInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgRemoteClientAppStatus_ShortcutInfo::release_name() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgRemoteClientAppStatus.ShortcutInfo.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgRemoteClientAppStatus_ShortcutInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgRemoteClientAppStatus.ShortcutInfo.name)
}

// optional string icon = 2;
bool CMsgRemoteClientAppStatus_ShortcutInfo::has_icon() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgRemoteClientAppStatus_ShortcutInfo::set_has_icon() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgRemoteClientAppStatus_ShortcutInfo::clear_has_icon() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgRemoteClientAppStatus_ShortcutInfo::clear_icon() {
  icon_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_icon();
}
const ::std::string& CMsgRemoteClientAppStatus_ShortcutInfo::icon() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteClientAppStatus.ShortcutInfo.icon)
  return icon_.GetNoArena();
}
void CMsgRemoteClientAppStatus_ShortcutInfo::set_icon(const ::std::string& value) {
  set_has_icon();
  icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteClientAppStatus.ShortcutInfo.icon)
}
#if LANG_CXX11
void CMsgRemoteClientAppStatus_ShortcutInfo::set_icon(::std::string&& value) {
  set_has_icon();
  icon_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgRemoteClientAppStatus.ShortcutInfo.icon)
}
#endif
void CMsgRemoteClientAppStatus_ShortcutInfo::set_icon(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_icon();
  icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgRemoteClientAppStatus.ShortcutInfo.icon)
}
void CMsgRemoteClientAppStatus_ShortcutInfo::set_icon(const char* value, size_t size) {
  set_has_icon();
  icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgRemoteClientAppStatus.ShortcutInfo.icon)
}
::std::string* CMsgRemoteClientAppStatus_ShortcutInfo::mutable_icon() {
  set_has_icon();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgRemoteClientAppStatus.ShortcutInfo.icon)
  return icon_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgRemoteClientAppStatus_ShortcutInfo::release_icon() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgRemoteClientAppStatus.ShortcutInfo.icon)
  clear_has_icon();
  return icon_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgRemoteClientAppStatus_ShortcutInfo::set_allocated_icon(::std::string* icon) {
  if (icon != NULL) {
    set_has_icon();
  } else {
    clear_has_icon();
  }
  icon_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), icon);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgRemoteClientAppStatus.ShortcutInfo.icon)
}

// repeated string categories = 3;
int CMsgRemoteClientAppStatus_ShortcutInfo::categories_size() const {
  return categories_.size();
}
void CMsgRemoteClientAppStatus_ShortcutInfo::clear_categories() {
  categories_.Clear();
}
const ::std::string& CMsgRemoteClientAppStatus_ShortcutInfo::categories(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteClientAppStatus.ShortcutInfo.categories)
  return categories_.Get(index);
}
::std::string* CMsgRemoteClientAppStatus_ShortcutInfo::mutable_categories(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgRemoteClientAppStatus.ShortcutInfo.categories)
  return categories_.Mutable(index);
}
void CMsgRemoteClientAppStatus_ShortcutInfo::set_categories(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteClientAppStatus.ShortcutInfo.categories)
  categories_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void CMsgRemoteClientAppStatus_ShortcutInfo::set_categories(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteClientAppStatus.ShortcutInfo.categories)
  categories_.Mutable(index)->assign(std::move(value));
}
#endif
void CMsgRemoteClientAppStatus_ShortcutInfo::set_categories(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  categories_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgRemoteClientAppStatus.ShortcutInfo.categories)
}
void CMsgRemoteClientAppStatus_ShortcutInfo::set_categories(int index, const char* value, size_t size) {
  categories_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgRemoteClientAppStatus.ShortcutInfo.categories)
}
::std::string* CMsgRemoteClientAppStatus_ShortcutInfo::add_categories() {
  // @@protoc_insertion_point(field_add_mutable:proto.steam.CMsgRemoteClientAppStatus.ShortcutInfo.categories)
  return categories_.Add();
}
void CMsgRemoteClientAppStatus_ShortcutInfo::add_categories(const ::std::string& value) {
  categories_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto.steam.CMsgRemoteClientAppStatus.ShortcutInfo.categories)
}
#if LANG_CXX11
void CMsgRemoteClientAppStatus_ShortcutInfo::add_categories(::std::string&& value) {
  categories_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:proto.steam.CMsgRemoteClientAppStatus.ShortcutInfo.categories)
}
#endif
void CMsgRemoteClientAppStatus_ShortcutInfo::add_categories(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  categories_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto.steam.CMsgRemoteClientAppStatus.ShortcutInfo.categories)
}
void CMsgRemoteClientAppStatus_ShortcutInfo::add_categories(const char* value, size_t size) {
  categories_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto.steam.CMsgRemoteClientAppStatus.ShortcutInfo.categories)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
CMsgRemoteClientAppStatus_ShortcutInfo::categories() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgRemoteClientAppStatus.ShortcutInfo.categories)
  return categories_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
CMsgRemoteClientAppStatus_ShortcutInfo::mutable_categories() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgRemoteClientAppStatus.ShortcutInfo.categories)
  return &categories_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgRemoteClientAppStatus_AppStatus::kAppIdFieldNumber;
const int CMsgRemoteClientAppStatus_AppStatus::kAppStateFieldNumber;
const int CMsgRemoteClientAppStatus_AppStatus::kUpdateInfoFieldNumber;
const int CMsgRemoteClientAppStatus_AppStatus::kShortcutInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgRemoteClientAppStatus_AppStatus::CMsgRemoteClientAppStatus_AppStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fremoteclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgRemoteClientAppStatus.AppStatus)
}
CMsgRemoteClientAppStatus_AppStatus::CMsgRemoteClientAppStatus_AppStatus(const CMsgRemoteClientAppStatus_AppStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_update_info()) {
    update_info_ = new ::proto::steam::CMsgRemoteClientAppStatus_AppUpdateInfo(*from.update_info_);
  } else {
    update_info_ = NULL;
  }
  if (from.has_shortcut_info()) {
    shortcut_info_ = new ::proto::steam::CMsgRemoteClientAppStatus_ShortcutInfo(*from.shortcut_info_);
  } else {
    shortcut_info_ = NULL;
  }
  ::memcpy(&app_id_, &from.app_id_,
    reinterpret_cast<char*>(&app_state_) -
    reinterpret_cast<char*>(&app_id_) + sizeof(app_state_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgRemoteClientAppStatus.AppStatus)
}

void CMsgRemoteClientAppStatus_AppStatus::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&update_info_, 0, reinterpret_cast<char*>(&app_state_) -
    reinterpret_cast<char*>(&update_info_) + sizeof(app_state_));
}

CMsgRemoteClientAppStatus_AppStatus::~CMsgRemoteClientAppStatus_AppStatus() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgRemoteClientAppStatus.AppStatus)
  SharedDtor();
}

void CMsgRemoteClientAppStatus_AppStatus::SharedDtor() {
  if (this != internal_default_instance()) {
    delete update_info_;
  }
  if (this != internal_default_instance()) {
    delete shortcut_info_;
  }
}

void CMsgRemoteClientAppStatus_AppStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgRemoteClientAppStatus_AppStatus::descriptor() {
  protobuf_steammessages_5fremoteclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fremoteclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgRemoteClientAppStatus_AppStatus& CMsgRemoteClientAppStatus_AppStatus::default_instance() {
  protobuf_steammessages_5fremoteclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgRemoteClientAppStatus_AppStatus* CMsgRemoteClientAppStatus_AppStatus::New(::google::protobuf::Arena* arena) const {
  CMsgRemoteClientAppStatus_AppStatus* n = new CMsgRemoteClientAppStatus_AppStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgRemoteClientAppStatus_AppStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgRemoteClientAppStatus.AppStatus)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_update_info()) {
      GOOGLE_DCHECK(update_info_ != NULL);
      update_info_->::proto::steam::CMsgRemoteClientAppStatus_AppUpdateInfo::Clear();
    }
    if (has_shortcut_info()) {
      GOOGLE_DCHECK(shortcut_info_ != NULL);
      shortcut_info_->::proto::steam::CMsgRemoteClientAppStatus_ShortcutInfo::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&app_id_, 0, reinterpret_cast<char*>(&app_state_) -
      reinterpret_cast<char*>(&app_id_) + sizeof(app_state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgRemoteClientAppStatus_AppStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgRemoteClientAppStatus.AppStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_app_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 app_state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_app_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.steam.CMsgRemoteClientAppStatus.AppUpdateInfo update_info = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.steam.CMsgRemoteClientAppStatus.ShortcutInfo shortcut_info = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shortcut_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgRemoteClientAppStatus.AppStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgRemoteClientAppStatus.AppStatus)
  return false;
#undef DO_
}

void CMsgRemoteClientAppStatus_AppStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgRemoteClientAppStatus.AppStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional uint32 app_state = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->app_state(), output);
  }

  // optional .proto.steam.CMsgRemoteClientAppStatus.AppUpdateInfo update_info = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->update_info_, output);
  }

  // optional .proto.steam.CMsgRemoteClientAppStatus.ShortcutInfo shortcut_info = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->shortcut_info_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgRemoteClientAppStatus.AppStatus)
}

::google::protobuf::uint8* CMsgRemoteClientAppStatus_AppStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgRemoteClientAppStatus.AppStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  // optional uint32 app_state = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->app_state(), target);
  }

  // optional .proto.steam.CMsgRemoteClientAppStatus.AppUpdateInfo update_info = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->update_info_, deterministic, target);
  }

  // optional .proto.steam.CMsgRemoteClientAppStatus.ShortcutInfo shortcut_info = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->shortcut_info_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgRemoteClientAppStatus.AppStatus)
  return target;
}

size_t CMsgRemoteClientAppStatus_AppStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgRemoteClientAppStatus.AppStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional .proto.steam.CMsgRemoteClientAppStatus.AppUpdateInfo update_info = 3;
    if (has_update_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->update_info_);
    }

    // optional .proto.steam.CMsgRemoteClientAppStatus.ShortcutInfo shortcut_info = 4;
    if (has_shortcut_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->shortcut_info_);
    }

    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional uint32 app_state = 2;
    if (has_app_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_state());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgRemoteClientAppStatus_AppStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgRemoteClientAppStatus.AppStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgRemoteClientAppStatus_AppStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgRemoteClientAppStatus_AppStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgRemoteClientAppStatus.AppStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgRemoteClientAppStatus.AppStatus)
    MergeFrom(*source);
  }
}

void CMsgRemoteClientAppStatus_AppStatus::MergeFrom(const CMsgRemoteClientAppStatus_AppStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgRemoteClientAppStatus.AppStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_update_info()->::proto::steam::CMsgRemoteClientAppStatus_AppUpdateInfo::MergeFrom(from.update_info());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_shortcut_info()->::proto::steam::CMsgRemoteClientAppStatus_ShortcutInfo::MergeFrom(from.shortcut_info());
    }
    if (cached_has_bits & 0x00000004u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      app_state_ = from.app_state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgRemoteClientAppStatus_AppStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgRemoteClientAppStatus.AppStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRemoteClientAppStatus_AppStatus::CopyFrom(const CMsgRemoteClientAppStatus_AppStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgRemoteClientAppStatus.AppStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRemoteClientAppStatus_AppStatus::IsInitialized() const {
  return true;
}

void CMsgRemoteClientAppStatus_AppStatus::Swap(CMsgRemoteClientAppStatus_AppStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgRemoteClientAppStatus_AppStatus::InternalSwap(CMsgRemoteClientAppStatus_AppStatus* other) {
  std::swap(update_info_, other->update_info_);
  std::swap(shortcut_info_, other->shortcut_info_);
  std::swap(app_id_, other->app_id_);
  std::swap(app_state_, other->app_state_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgRemoteClientAppStatus_AppStatus::GetMetadata() const {
  protobuf_steammessages_5fremoteclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fremoteclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgRemoteClientAppStatus_AppStatus

// optional uint32 app_id = 1;
bool CMsgRemoteClientAppStatus_AppStatus::has_app_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgRemoteClientAppStatus_AppStatus::set_has_app_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgRemoteClientAppStatus_AppStatus::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgRemoteClientAppStatus_AppStatus::clear_app_id() {
  app_id_ = 0u;
  clear_has_app_id();
}
::google::protobuf::uint32 CMsgRemoteClientAppStatus_AppStatus::app_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteClientAppStatus.AppStatus.app_id)
  return app_id_;
}
void CMsgRemoteClientAppStatus_AppStatus::set_app_id(::google::protobuf::uint32 value) {
  set_has_app_id();
  app_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteClientAppStatus.AppStatus.app_id)
}

// optional uint32 app_state = 2;
bool CMsgRemoteClientAppStatus_AppStatus::has_app_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgRemoteClientAppStatus_AppStatus::set_has_app_state() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgRemoteClientAppStatus_AppStatus::clear_has_app_state() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgRemoteClientAppStatus_AppStatus::clear_app_state() {
  app_state_ = 0u;
  clear_has_app_state();
}
::google::protobuf::uint32 CMsgRemoteClientAppStatus_AppStatus::app_state() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteClientAppStatus.AppStatus.app_state)
  return app_state_;
}
void CMsgRemoteClientAppStatus_AppStatus::set_app_state(::google::protobuf::uint32 value) {
  set_has_app_state();
  app_state_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteClientAppStatus.AppStatus.app_state)
}

// optional .proto.steam.CMsgRemoteClientAppStatus.AppUpdateInfo update_info = 3;
bool CMsgRemoteClientAppStatus_AppStatus::has_update_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgRemoteClientAppStatus_AppStatus::set_has_update_info() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgRemoteClientAppStatus_AppStatus::clear_has_update_info() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgRemoteClientAppStatus_AppStatus::clear_update_info() {
  if (update_info_ != NULL) update_info_->::proto::steam::CMsgRemoteClientAppStatus_AppUpdateInfo::Clear();
  clear_has_update_info();
}
const ::proto::steam::CMsgRemoteClientAppStatus_AppUpdateInfo& CMsgRemoteClientAppStatus_AppStatus::update_info() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteClientAppStatus.AppStatus.update_info)
  return update_info_ != NULL ? *update_info_
                         : *::proto::steam::CMsgRemoteClientAppStatus_AppUpdateInfo::internal_default_instance();
}
::proto::steam::CMsgRemoteClientAppStatus_AppUpdateInfo* CMsgRemoteClientAppStatus_AppStatus::mutable_update_info() {
  set_has_update_info();
  if (update_info_ == NULL) {
    update_info_ = new ::proto::steam::CMsgRemoteClientAppStatus_AppUpdateInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgRemoteClientAppStatus.AppStatus.update_info)
  return update_info_;
}
::proto::steam::CMsgRemoteClientAppStatus_AppUpdateInfo* CMsgRemoteClientAppStatus_AppStatus::release_update_info() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgRemoteClientAppStatus.AppStatus.update_info)
  clear_has_update_info();
  ::proto::steam::CMsgRemoteClientAppStatus_AppUpdateInfo* temp = update_info_;
  update_info_ = NULL;
  return temp;
}
void CMsgRemoteClientAppStatus_AppStatus::set_allocated_update_info(::proto::steam::CMsgRemoteClientAppStatus_AppUpdateInfo* update_info) {
  delete update_info_;
  update_info_ = update_info;
  if (update_info) {
    set_has_update_info();
  } else {
    clear_has_update_info();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgRemoteClientAppStatus.AppStatus.update_info)
}

// optional .proto.steam.CMsgRemoteClientAppStatus.ShortcutInfo shortcut_info = 4;
bool CMsgRemoteClientAppStatus_AppStatus::has_shortcut_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgRemoteClientAppStatus_AppStatus::set_has_shortcut_info() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgRemoteClientAppStatus_AppStatus::clear_has_shortcut_info() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgRemoteClientAppStatus_AppStatus::clear_shortcut_info() {
  if (shortcut_info_ != NULL) shortcut_info_->::proto::steam::CMsgRemoteClientAppStatus_ShortcutInfo::Clear();
  clear_has_shortcut_info();
}
const ::proto::steam::CMsgRemoteClientAppStatus_ShortcutInfo& CMsgRemoteClientAppStatus_AppStatus::shortcut_info() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteClientAppStatus.AppStatus.shortcut_info)
  return shortcut_info_ != NULL ? *shortcut_info_
                         : *::proto::steam::CMsgRemoteClientAppStatus_ShortcutInfo::internal_default_instance();
}
::proto::steam::CMsgRemoteClientAppStatus_ShortcutInfo* CMsgRemoteClientAppStatus_AppStatus::mutable_shortcut_info() {
  set_has_shortcut_info();
  if (shortcut_info_ == NULL) {
    shortcut_info_ = new ::proto::steam::CMsgRemoteClientAppStatus_ShortcutInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgRemoteClientAppStatus.AppStatus.shortcut_info)
  return shortcut_info_;
}
::proto::steam::CMsgRemoteClientAppStatus_ShortcutInfo* CMsgRemoteClientAppStatus_AppStatus::release_shortcut_info() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgRemoteClientAppStatus.AppStatus.shortcut_info)
  clear_has_shortcut_info();
  ::proto::steam::CMsgRemoteClientAppStatus_ShortcutInfo* temp = shortcut_info_;
  shortcut_info_ = NULL;
  return temp;
}
void CMsgRemoteClientAppStatus_AppStatus::set_allocated_shortcut_info(::proto::steam::CMsgRemoteClientAppStatus_ShortcutInfo* shortcut_info) {
  delete shortcut_info_;
  shortcut_info_ = shortcut_info;
  if (shortcut_info) {
    set_has_shortcut_info();
  } else {
    clear_has_shortcut_info();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgRemoteClientAppStatus.AppStatus.shortcut_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgRemoteClientAppStatus::kStatusUpdatesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgRemoteClientAppStatus::CMsgRemoteClientAppStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fremoteclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgRemoteClientAppStatus)
}
CMsgRemoteClientAppStatus::CMsgRemoteClientAppStatus(const CMsgRemoteClientAppStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      status_updates_(from.status_updates_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgRemoteClientAppStatus)
}

void CMsgRemoteClientAppStatus::SharedCtor() {
  _cached_size_ = 0;
}

CMsgRemoteClientAppStatus::~CMsgRemoteClientAppStatus() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgRemoteClientAppStatus)
  SharedDtor();
}

void CMsgRemoteClientAppStatus::SharedDtor() {
}

void CMsgRemoteClientAppStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgRemoteClientAppStatus::descriptor() {
  protobuf_steammessages_5fremoteclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fremoteclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgRemoteClientAppStatus& CMsgRemoteClientAppStatus::default_instance() {
  protobuf_steammessages_5fremoteclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgRemoteClientAppStatus* CMsgRemoteClientAppStatus::New(::google::protobuf::Arena* arena) const {
  CMsgRemoteClientAppStatus* n = new CMsgRemoteClientAppStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgRemoteClientAppStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgRemoteClientAppStatus)
  status_updates_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgRemoteClientAppStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgRemoteClientAppStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.steam.CMsgRemoteClientAppStatus.AppStatus status_updates = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_status_updates()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgRemoteClientAppStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgRemoteClientAppStatus)
  return false;
#undef DO_
}

void CMsgRemoteClientAppStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgRemoteClientAppStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgRemoteClientAppStatus.AppStatus status_updates = 1;
  for (unsigned int i = 0, n = this->status_updates_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->status_updates(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgRemoteClientAppStatus)
}

::google::protobuf::uint8* CMsgRemoteClientAppStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgRemoteClientAppStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CMsgRemoteClientAppStatus.AppStatus status_updates = 1;
  for (unsigned int i = 0, n = this->status_updates_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->status_updates(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgRemoteClientAppStatus)
  return target;
}

size_t CMsgRemoteClientAppStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgRemoteClientAppStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.steam.CMsgRemoteClientAppStatus.AppStatus status_updates = 1;
  {
    unsigned int count = this->status_updates_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->status_updates(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgRemoteClientAppStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgRemoteClientAppStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgRemoteClientAppStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgRemoteClientAppStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgRemoteClientAppStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgRemoteClientAppStatus)
    MergeFrom(*source);
  }
}

void CMsgRemoteClientAppStatus::MergeFrom(const CMsgRemoteClientAppStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgRemoteClientAppStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  status_updates_.MergeFrom(from.status_updates_);
}

void CMsgRemoteClientAppStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgRemoteClientAppStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRemoteClientAppStatus::CopyFrom(const CMsgRemoteClientAppStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgRemoteClientAppStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRemoteClientAppStatus::IsInitialized() const {
  return true;
}

void CMsgRemoteClientAppStatus::Swap(CMsgRemoteClientAppStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgRemoteClientAppStatus::InternalSwap(CMsgRemoteClientAppStatus* other) {
  status_updates_.InternalSwap(&other->status_updates_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgRemoteClientAppStatus::GetMetadata() const {
  protobuf_steammessages_5fremoteclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fremoteclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgRemoteClientAppStatus

// repeated .proto.steam.CMsgRemoteClientAppStatus.AppStatus status_updates = 1;
int CMsgRemoteClientAppStatus::status_updates_size() const {
  return status_updates_.size();
}
void CMsgRemoteClientAppStatus::clear_status_updates() {
  status_updates_.Clear();
}
const ::proto::steam::CMsgRemoteClientAppStatus_AppStatus& CMsgRemoteClientAppStatus::status_updates(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteClientAppStatus.status_updates)
  return status_updates_.Get(index);
}
::proto::steam::CMsgRemoteClientAppStatus_AppStatus* CMsgRemoteClientAppStatus::mutable_status_updates(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgRemoteClientAppStatus.status_updates)
  return status_updates_.Mutable(index);
}
::proto::steam::CMsgRemoteClientAppStatus_AppStatus* CMsgRemoteClientAppStatus::add_status_updates() {
  // @@protoc_insertion_point(field_add:proto.steam.CMsgRemoteClientAppStatus.status_updates)
  return status_updates_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgRemoteClientAppStatus_AppStatus >*
CMsgRemoteClientAppStatus::mutable_status_updates() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgRemoteClientAppStatus.status_updates)
  return &status_updates_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgRemoteClientAppStatus_AppStatus >&
CMsgRemoteClientAppStatus::status_updates() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgRemoteClientAppStatus.status_updates)
  return status_updates_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgRemoteClientAuth::kClientIdFieldNumber;
const int CMsgRemoteClientAuth::kStatusFieldNumber;
const int CMsgRemoteClientAuth::kInstanceIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgRemoteClientAuth::CMsgRemoteClientAuth()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fremoteclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgRemoteClientAuth)
}
CMsgRemoteClientAuth::CMsgRemoteClientAuth(const CMsgRemoteClientAuth& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_status()) {
    status_ = new ::proto::steam::CMsgRemoteClientBroadcastStatus(*from.status_);
  } else {
    status_ = NULL;
  }
  ::memcpy(&client_id_, &from.client_id_,
    reinterpret_cast<char*>(&instance_id_) -
    reinterpret_cast<char*>(&client_id_) + sizeof(instance_id_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgRemoteClientAuth)
}

void CMsgRemoteClientAuth::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&status_, 0, reinterpret_cast<char*>(&instance_id_) -
    reinterpret_cast<char*>(&status_) + sizeof(instance_id_));
}

CMsgRemoteClientAuth::~CMsgRemoteClientAuth() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgRemoteClientAuth)
  SharedDtor();
}

void CMsgRemoteClientAuth::SharedDtor() {
  if (this != internal_default_instance()) {
    delete status_;
  }
}

void CMsgRemoteClientAuth::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgRemoteClientAuth::descriptor() {
  protobuf_steammessages_5fremoteclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fremoteclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgRemoteClientAuth& CMsgRemoteClientAuth::default_instance() {
  protobuf_steammessages_5fremoteclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgRemoteClientAuth* CMsgRemoteClientAuth::New(::google::protobuf::Arena* arena) const {
  CMsgRemoteClientAuth* n = new CMsgRemoteClientAuth;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgRemoteClientAuth::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgRemoteClientAuth)
  if (has_status()) {
    GOOGLE_DCHECK(status_ != NULL);
    status_->::proto::steam::CMsgRemoteClientBroadcastStatus::Clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&client_id_, 0, reinterpret_cast<char*>(&instance_id_) -
      reinterpret_cast<char*>(&client_id_) + sizeof(instance_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgRemoteClientAuth::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgRemoteClientAuth)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 client_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_client_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &client_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.steam.CMsgRemoteClientBroadcastStatus status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 instance_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_instance_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &instance_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgRemoteClientAuth)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgRemoteClientAuth)
  return false;
#undef DO_
}

void CMsgRemoteClientAuth::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgRemoteClientAuth)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 client_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->client_id(), output);
  }

  // optional .proto.steam.CMsgRemoteClientBroadcastStatus status = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->status_, output);
  }

  // optional uint64 instance_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->instance_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgRemoteClientAuth)
}

::google::protobuf::uint8* CMsgRemoteClientAuth::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgRemoteClientAuth)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 client_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->client_id(), target);
  }

  // optional .proto.steam.CMsgRemoteClientBroadcastStatus status = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->status_, deterministic, target);
  }

  // optional uint64 instance_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->instance_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgRemoteClientAuth)
  return target;
}

size_t CMsgRemoteClientAuth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgRemoteClientAuth)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .proto.steam.CMsgRemoteClientBroadcastStatus status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->status_);
    }

    // optional uint64 client_id = 1;
    if (has_client_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->client_id());
    }

    // optional uint64 instance_id = 3;
    if (has_instance_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->instance_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgRemoteClientAuth::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgRemoteClientAuth)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgRemoteClientAuth* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgRemoteClientAuth>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgRemoteClientAuth)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgRemoteClientAuth)
    MergeFrom(*source);
  }
}

void CMsgRemoteClientAuth::MergeFrom(const CMsgRemoteClientAuth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgRemoteClientAuth)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_status()->::proto::steam::CMsgRemoteClientBroadcastStatus::MergeFrom(from.status());
    }
    if (cached_has_bits & 0x00000002u) {
      client_id_ = from.client_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      instance_id_ = from.instance_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgRemoteClientAuth::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgRemoteClientAuth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRemoteClientAuth::CopyFrom(const CMsgRemoteClientAuth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgRemoteClientAuth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRemoteClientAuth::IsInitialized() const {
  return true;
}

void CMsgRemoteClientAuth::Swap(CMsgRemoteClientAuth* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgRemoteClientAuth::InternalSwap(CMsgRemoteClientAuth* other) {
  std::swap(status_, other->status_);
  std::swap(client_id_, other->client_id_);
  std::swap(instance_id_, other->instance_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgRemoteClientAuth::GetMetadata() const {
  protobuf_steammessages_5fremoteclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fremoteclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgRemoteClientAuth

// optional uint64 client_id = 1;
bool CMsgRemoteClientAuth::has_client_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgRemoteClientAuth::set_has_client_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgRemoteClientAuth::clear_has_client_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgRemoteClientAuth::clear_client_id() {
  client_id_ = GOOGLE_ULONGLONG(0);
  clear_has_client_id();
}
::google::protobuf::uint64 CMsgRemoteClientAuth::client_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteClientAuth.client_id)
  return client_id_;
}
void CMsgRemoteClientAuth::set_client_id(::google::protobuf::uint64 value) {
  set_has_client_id();
  client_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteClientAuth.client_id)
}

// optional .proto.steam.CMsgRemoteClientBroadcastStatus status = 2;
bool CMsgRemoteClientAuth::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgRemoteClientAuth::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgRemoteClientAuth::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgRemoteClientAuth::clear_status() {
  if (status_ != NULL) status_->::proto::steam::CMsgRemoteClientBroadcastStatus::Clear();
  clear_has_status();
}
const ::proto::steam::CMsgRemoteClientBroadcastStatus& CMsgRemoteClientAuth::status() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteClientAuth.status)
  return status_ != NULL ? *status_
                         : *::proto::steam::CMsgRemoteClientBroadcastStatus::internal_default_instance();
}
::proto::steam::CMsgRemoteClientBroadcastStatus* CMsgRemoteClientAuth::mutable_status() {
  set_has_status();
  if (status_ == NULL) {
    status_ = new ::proto::steam::CMsgRemoteClientBroadcastStatus;
  }
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgRemoteClientAuth.status)
  return status_;
}
::proto::steam::CMsgRemoteClientBroadcastStatus* CMsgRemoteClientAuth::release_status() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgRemoteClientAuth.status)
  clear_has_status();
  ::proto::steam::CMsgRemoteClientBroadcastStatus* temp = status_;
  status_ = NULL;
  return temp;
}
void CMsgRemoteClientAuth::set_allocated_status(::proto::steam::CMsgRemoteClientBroadcastStatus* status) {
  delete status_;
  status_ = status;
  if (status) {
    set_has_status();
  } else {
    clear_has_status();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgRemoteClientAuth.status)
}

// optional uint64 instance_id = 3;
bool CMsgRemoteClientAuth::has_instance_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgRemoteClientAuth::set_has_instance_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgRemoteClientAuth::clear_has_instance_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgRemoteClientAuth::clear_instance_id() {
  instance_id_ = GOOGLE_ULONGLONG(0);
  clear_has_instance_id();
}
::google::protobuf::uint64 CMsgRemoteClientAuth::instance_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteClientAuth.instance_id)
  return instance_id_;
}
void CMsgRemoteClientAuth::set_instance_id(::google::protobuf::uint64 value) {
  set_has_instance_id();
  instance_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteClientAuth.instance_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgRemoteClientAuthResponse::kEresultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgRemoteClientAuthResponse::CMsgRemoteClientAuthResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fremoteclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgRemoteClientAuthResponse)
}
CMsgRemoteClientAuthResponse::CMsgRemoteClientAuthResponse(const CMsgRemoteClientAuthResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  eresult_ = from.eresult_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgRemoteClientAuthResponse)
}

void CMsgRemoteClientAuthResponse::SharedCtor() {
  _cached_size_ = 0;
  eresult_ = 2;
}

CMsgRemoteClientAuthResponse::~CMsgRemoteClientAuthResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgRemoteClientAuthResponse)
  SharedDtor();
}

void CMsgRemoteClientAuthResponse::SharedDtor() {
}

void CMsgRemoteClientAuthResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgRemoteClientAuthResponse::descriptor() {
  protobuf_steammessages_5fremoteclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fremoteclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgRemoteClientAuthResponse& CMsgRemoteClientAuthResponse::default_instance() {
  protobuf_steammessages_5fremoteclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgRemoteClientAuthResponse* CMsgRemoteClientAuthResponse::New(::google::protobuf::Arena* arena) const {
  CMsgRemoteClientAuthResponse* n = new CMsgRemoteClientAuthResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgRemoteClientAuthResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgRemoteClientAuthResponse)
  eresult_ = 2;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgRemoteClientAuthResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgRemoteClientAuthResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_eresult();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgRemoteClientAuthResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgRemoteClientAuthResponse)
  return false;
#undef DO_
}

void CMsgRemoteClientAuthResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgRemoteClientAuthResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgRemoteClientAuthResponse)
}

::google::protobuf::uint8* CMsgRemoteClientAuthResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgRemoteClientAuthResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eresult(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgRemoteClientAuthResponse)
  return target;
}

size_t CMsgRemoteClientAuthResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgRemoteClientAuthResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional int32 eresult = 1 [default = 2];
  if (has_eresult()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->eresult());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgRemoteClientAuthResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgRemoteClientAuthResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgRemoteClientAuthResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgRemoteClientAuthResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgRemoteClientAuthResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgRemoteClientAuthResponse)
    MergeFrom(*source);
  }
}

void CMsgRemoteClientAuthResponse::MergeFrom(const CMsgRemoteClientAuthResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgRemoteClientAuthResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_eresult()) {
    set_eresult(from.eresult());
  }
}

void CMsgRemoteClientAuthResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgRemoteClientAuthResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRemoteClientAuthResponse::CopyFrom(const CMsgRemoteClientAuthResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgRemoteClientAuthResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRemoteClientAuthResponse::IsInitialized() const {
  return true;
}

void CMsgRemoteClientAuthResponse::Swap(CMsgRemoteClientAuthResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgRemoteClientAuthResponse::InternalSwap(CMsgRemoteClientAuthResponse* other) {
  std::swap(eresult_, other->eresult_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgRemoteClientAuthResponse::GetMetadata() const {
  protobuf_steammessages_5fremoteclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fremoteclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgRemoteClientAuthResponse

// optional int32 eresult = 1 [default = 2];
bool CMsgRemoteClientAuthResponse::has_eresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgRemoteClientAuthResponse::set_has_eresult() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgRemoteClientAuthResponse::clear_has_eresult() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgRemoteClientAuthResponse::clear_eresult() {
  eresult_ = 2;
  clear_has_eresult();
}
::google::protobuf::int32 CMsgRemoteClientAuthResponse::eresult() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteClientAuthResponse.eresult)
  return eresult_;
}
void CMsgRemoteClientAuthResponse::set_eresult(::google::protobuf::int32 value) {
  set_has_eresult();
  eresult_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteClientAuthResponse.eresult)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgRemoteClientStartStream_ReservedGamepad::kControllerTypeFieldNumber;
const int CMsgRemoteClientStartStream_ReservedGamepad::kControllerSubtypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgRemoteClientStartStream_ReservedGamepad::CMsgRemoteClientStartStream_ReservedGamepad()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fremoteclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgRemoteClientStartStream.ReservedGamepad)
}
CMsgRemoteClientStartStream_ReservedGamepad::CMsgRemoteClientStartStream_ReservedGamepad(const CMsgRemoteClientStartStream_ReservedGamepad& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&controller_type_, &from.controller_type_,
    reinterpret_cast<char*>(&controller_subtype_) -
    reinterpret_cast<char*>(&controller_type_) + sizeof(controller_subtype_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgRemoteClientStartStream.ReservedGamepad)
}

void CMsgRemoteClientStartStream_ReservedGamepad::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&controller_type_, 0, reinterpret_cast<char*>(&controller_subtype_) -
    reinterpret_cast<char*>(&controller_type_) + sizeof(controller_subtype_));
}

CMsgRemoteClientStartStream_ReservedGamepad::~CMsgRemoteClientStartStream_ReservedGamepad() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgRemoteClientStartStream.ReservedGamepad)
  SharedDtor();
}

void CMsgRemoteClientStartStream_ReservedGamepad::SharedDtor() {
}

void CMsgRemoteClientStartStream_ReservedGamepad::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgRemoteClientStartStream_ReservedGamepad::descriptor() {
  protobuf_steammessages_5fremoteclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fremoteclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgRemoteClientStartStream_ReservedGamepad& CMsgRemoteClientStartStream_ReservedGamepad::default_instance() {
  protobuf_steammessages_5fremoteclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgRemoteClientStartStream_ReservedGamepad* CMsgRemoteClientStartStream_ReservedGamepad::New(::google::protobuf::Arena* arena) const {
  CMsgRemoteClientStartStream_ReservedGamepad* n = new CMsgRemoteClientStartStream_ReservedGamepad;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgRemoteClientStartStream_ReservedGamepad::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgRemoteClientStartStream.ReservedGamepad)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&controller_type_, 0, reinterpret_cast<char*>(&controller_subtype_) -
      reinterpret_cast<char*>(&controller_type_) + sizeof(controller_subtype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgRemoteClientStartStream_ReservedGamepad::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgRemoteClientStartStream.ReservedGamepad)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 controller_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_controller_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &controller_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 controller_subtype = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_controller_subtype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &controller_subtype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgRemoteClientStartStream.ReservedGamepad)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgRemoteClientStartStream.ReservedGamepad)
  return false;
#undef DO_
}

void CMsgRemoteClientStartStream_ReservedGamepad::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgRemoteClientStartStream.ReservedGamepad)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 controller_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->controller_type(), output);
  }

  // optional uint32 controller_subtype = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->controller_subtype(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgRemoteClientStartStream.ReservedGamepad)
}

::google::protobuf::uint8* CMsgRemoteClientStartStream_ReservedGamepad::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgRemoteClientStartStream.ReservedGamepad)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 controller_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->controller_type(), target);
  }

  // optional uint32 controller_subtype = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->controller_subtype(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgRemoteClientStartStream.ReservedGamepad)
  return target;
}

size_t CMsgRemoteClientStartStream_ReservedGamepad::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgRemoteClientStartStream.ReservedGamepad)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 controller_type = 1;
    if (has_controller_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->controller_type());
    }

    // optional uint32 controller_subtype = 2;
    if (has_controller_subtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->controller_subtype());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgRemoteClientStartStream_ReservedGamepad::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgRemoteClientStartStream.ReservedGamepad)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgRemoteClientStartStream_ReservedGamepad* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgRemoteClientStartStream_ReservedGamepad>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgRemoteClientStartStream.ReservedGamepad)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgRemoteClientStartStream.ReservedGamepad)
    MergeFrom(*source);
  }
}

void CMsgRemoteClientStartStream_ReservedGamepad::MergeFrom(const CMsgRemoteClientStartStream_ReservedGamepad& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgRemoteClientStartStream.ReservedGamepad)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      controller_type_ = from.controller_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      controller_subtype_ = from.controller_subtype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgRemoteClientStartStream_ReservedGamepad::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgRemoteClientStartStream.ReservedGamepad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRemoteClientStartStream_ReservedGamepad::CopyFrom(const CMsgRemoteClientStartStream_ReservedGamepad& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgRemoteClientStartStream.ReservedGamepad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRemoteClientStartStream_ReservedGamepad::IsInitialized() const {
  return true;
}

void CMsgRemoteClientStartStream_ReservedGamepad::Swap(CMsgRemoteClientStartStream_ReservedGamepad* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgRemoteClientStartStream_ReservedGamepad::InternalSwap(CMsgRemoteClientStartStream_ReservedGamepad* other) {
  std::swap(controller_type_, other->controller_type_);
  std::swap(controller_subtype_, other->controller_subtype_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgRemoteClientStartStream_ReservedGamepad::GetMetadata() const {
  protobuf_steammessages_5fremoteclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fremoteclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgRemoteClientStartStream_ReservedGamepad

// optional uint32 controller_type = 1;
bool CMsgRemoteClientStartStream_ReservedGamepad::has_controller_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgRemoteClientStartStream_ReservedGamepad::set_has_controller_type() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgRemoteClientStartStream_ReservedGamepad::clear_has_controller_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgRemoteClientStartStream_ReservedGamepad::clear_controller_type() {
  controller_type_ = 0u;
  clear_has_controller_type();
}
::google::protobuf::uint32 CMsgRemoteClientStartStream_ReservedGamepad::controller_type() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteClientStartStream.ReservedGamepad.controller_type)
  return controller_type_;
}
void CMsgRemoteClientStartStream_ReservedGamepad::set_controller_type(::google::protobuf::uint32 value) {
  set_has_controller_type();
  controller_type_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteClientStartStream.ReservedGamepad.controller_type)
}

// optional uint32 controller_subtype = 2;
bool CMsgRemoteClientStartStream_ReservedGamepad::has_controller_subtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgRemoteClientStartStream_ReservedGamepad::set_has_controller_subtype() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgRemoteClientStartStream_ReservedGamepad::clear_has_controller_subtype() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgRemoteClientStartStream_ReservedGamepad::clear_controller_subtype() {
  controller_subtype_ = 0u;
  clear_has_controller_subtype();
}
::google::protobuf::uint32 CMsgRemoteClientStartStream_ReservedGamepad::controller_subtype() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteClientStartStream.ReservedGamepad.controller_subtype)
  return controller_subtype_;
}
void CMsgRemoteClientStartStream_ReservedGamepad::set_controller_subtype(::google::protobuf::uint32 value) {
  set_has_controller_subtype();
  controller_subtype_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteClientStartStream.ReservedGamepad.controller_subtype)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgRemoteClientStartStream::kAppIdFieldNumber;
const int CMsgRemoteClientStartStream::kEnvironmentFieldNumber;
const int CMsgRemoteClientStartStream::kGamepadCountFieldNumber;
const int CMsgRemoteClientStartStream::kLaunchOptionFieldNumber;
const int CMsgRemoteClientStartStream::kLockParentalLockFieldNumber;
const int CMsgRemoteClientStartStream::kUnlockParentalLockFieldNumber;
const int CMsgRemoteClientStartStream::kMaximumResolutionXFieldNumber;
const int CMsgRemoteClientStartStream::kMaximumResolutionYFieldNumber;
const int CMsgRemoteClientStartStream::kGamepadsFieldNumber;
const int CMsgRemoteClientStartStream::kAudioChannelCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgRemoteClientStartStream::CMsgRemoteClientStartStream()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fremoteclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgRemoteClientStartStream)
}
CMsgRemoteClientStartStream::CMsgRemoteClientStartStream(const CMsgRemoteClientStartStream& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      gamepads_(from.gamepads_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  unlock_parental_lock_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_unlock_parental_lock()) {
    unlock_parental_lock_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.unlock_parental_lock_);
  }
  ::memcpy(&app_id_, &from.app_id_,
    reinterpret_cast<char*>(&audio_channel_count_) -
    reinterpret_cast<char*>(&app_id_) + sizeof(audio_channel_count_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgRemoteClientStartStream)
}

void CMsgRemoteClientStartStream::SharedCtor() {
  _cached_size_ = 0;
  unlock_parental_lock_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&app_id_, 0, reinterpret_cast<char*>(&maximum_resolution_y_) -
    reinterpret_cast<char*>(&app_id_) + sizeof(maximum_resolution_y_));
  launch_option_ = -1;
  audio_channel_count_ = 2;
}

CMsgRemoteClientStartStream::~CMsgRemoteClientStartStream() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgRemoteClientStartStream)
  SharedDtor();
}

void CMsgRemoteClientStartStream::SharedDtor() {
  unlock_parental_lock_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgRemoteClientStartStream::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgRemoteClientStartStream::descriptor() {
  protobuf_steammessages_5fremoteclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fremoteclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgRemoteClientStartStream& CMsgRemoteClientStartStream::default_instance() {
  protobuf_steammessages_5fremoteclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgRemoteClientStartStream* CMsgRemoteClientStartStream::New(::google::protobuf::Arena* arena) const {
  CMsgRemoteClientStartStream* n = new CMsgRemoteClientStartStream;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgRemoteClientStartStream::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgRemoteClientStartStream)
  gamepads_.Clear();
  if (has_unlock_parental_lock()) {
    GOOGLE_DCHECK(!unlock_parental_lock_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*unlock_parental_lock_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 254u) {
    ::memset(&app_id_, 0, reinterpret_cast<char*>(&maximum_resolution_y_) -
      reinterpret_cast<char*>(&app_id_) + sizeof(maximum_resolution_y_));
    launch_option_ = -1;
  }
  audio_channel_count_ = 2;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgRemoteClientStartStream::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgRemoteClientStartStream)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_app_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 environment = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_environment();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &environment_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 gamepad_count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_gamepad_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gamepad_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 launch_option = 4 [default = -1];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_launch_option();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &launch_option_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool lock_parental_lock = 5 [default = false];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_lock_parental_lock();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lock_parental_lock_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string unlock_parental_lock = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unlock_parental_lock()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->unlock_parental_lock().data(), this->unlock_parental_lock().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgRemoteClientStartStream.unlock_parental_lock");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 maximum_resolution_x = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_maximum_resolution_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maximum_resolution_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 maximum_resolution_y = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_maximum_resolution_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maximum_resolution_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CMsgRemoteClientStartStream.ReservedGamepad gamepads = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gamepads()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 audio_channel_count = 10 [default = 2];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_audio_channel_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &audio_channel_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgRemoteClientStartStream)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgRemoteClientStartStream)
  return false;
#undef DO_
}

void CMsgRemoteClientStartStream::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgRemoteClientStartStream)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional int32 environment = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->environment(), output);
  }

  // optional int32 gamepad_count = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gamepad_count(), output);
  }

  // optional int32 launch_option = 4 [default = -1];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->launch_option(), output);
  }

  // optional bool lock_parental_lock = 5 [default = false];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->lock_parental_lock(), output);
  }

  // optional string unlock_parental_lock = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->unlock_parental_lock().data(), this->unlock_parental_lock().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgRemoteClientStartStream.unlock_parental_lock");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->unlock_parental_lock(), output);
  }

  // optional int32 maximum_resolution_x = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->maximum_resolution_x(), output);
  }

  // optional int32 maximum_resolution_y = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->maximum_resolution_y(), output);
  }

  // repeated .proto.steam.CMsgRemoteClientStartStream.ReservedGamepad gamepads = 9;
  for (unsigned int i = 0, n = this->gamepads_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->gamepads(i), output);
  }

  // optional int32 audio_channel_count = 10 [default = 2];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->audio_channel_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgRemoteClientStartStream)
}

::google::protobuf::uint8* CMsgRemoteClientStartStream::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgRemoteClientStartStream)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  // optional int32 environment = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->environment(), target);
  }

  // optional int32 gamepad_count = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gamepad_count(), target);
  }

  // optional int32 launch_option = 4 [default = -1];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->launch_option(), target);
  }

  // optional bool lock_parental_lock = 5 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->lock_parental_lock(), target);
  }

  // optional string unlock_parental_lock = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->unlock_parental_lock().data(), this->unlock_parental_lock().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgRemoteClientStartStream.unlock_parental_lock");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->unlock_parental_lock(), target);
  }

  // optional int32 maximum_resolution_x = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->maximum_resolution_x(), target);
  }

  // optional int32 maximum_resolution_y = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->maximum_resolution_y(), target);
  }

  // repeated .proto.steam.CMsgRemoteClientStartStream.ReservedGamepad gamepads = 9;
  for (unsigned int i = 0, n = this->gamepads_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, this->gamepads(i), deterministic, target);
  }

  // optional int32 audio_channel_count = 10 [default = 2];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->audio_channel_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgRemoteClientStartStream)
  return target;
}

size_t CMsgRemoteClientStartStream::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgRemoteClientStartStream)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.steam.CMsgRemoteClientStartStream.ReservedGamepad gamepads = 9;
  {
    unsigned int count = this->gamepads_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gamepads(i));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string unlock_parental_lock = 6;
    if (has_unlock_parental_lock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->unlock_parental_lock());
    }

    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional int32 environment = 2;
    if (has_environment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->environment());
    }

    // optional int32 gamepad_count = 3;
    if (has_gamepad_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gamepad_count());
    }

    // optional bool lock_parental_lock = 5 [default = false];
    if (has_lock_parental_lock()) {
      total_size += 1 + 1;
    }

    // optional int32 maximum_resolution_x = 7;
    if (has_maximum_resolution_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maximum_resolution_x());
    }

    // optional int32 maximum_resolution_y = 8;
    if (has_maximum_resolution_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maximum_resolution_y());
    }

    // optional int32 launch_option = 4 [default = -1];
    if (has_launch_option()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->launch_option());
    }

  }
  // optional int32 audio_channel_count = 10 [default = 2];
  if (has_audio_channel_count()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->audio_channel_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgRemoteClientStartStream::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgRemoteClientStartStream)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgRemoteClientStartStream* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgRemoteClientStartStream>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgRemoteClientStartStream)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgRemoteClientStartStream)
    MergeFrom(*source);
  }
}

void CMsgRemoteClientStartStream::MergeFrom(const CMsgRemoteClientStartStream& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgRemoteClientStartStream)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  gamepads_.MergeFrom(from.gamepads_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_unlock_parental_lock();
      unlock_parental_lock_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.unlock_parental_lock_);
    }
    if (cached_has_bits & 0x00000002u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      environment_ = from.environment_;
    }
    if (cached_has_bits & 0x00000008u) {
      gamepad_count_ = from.gamepad_count_;
    }
    if (cached_has_bits & 0x00000010u) {
      lock_parental_lock_ = from.lock_parental_lock_;
    }
    if (cached_has_bits & 0x00000020u) {
      maximum_resolution_x_ = from.maximum_resolution_x_;
    }
    if (cached_has_bits & 0x00000040u) {
      maximum_resolution_y_ = from.maximum_resolution_y_;
    }
    if (cached_has_bits & 0x00000080u) {
      launch_option_ = from.launch_option_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_audio_channel_count(from.audio_channel_count());
  }
}

void CMsgRemoteClientStartStream::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgRemoteClientStartStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRemoteClientStartStream::CopyFrom(const CMsgRemoteClientStartStream& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgRemoteClientStartStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRemoteClientStartStream::IsInitialized() const {
  return true;
}

void CMsgRemoteClientStartStream::Swap(CMsgRemoteClientStartStream* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgRemoteClientStartStream::InternalSwap(CMsgRemoteClientStartStream* other) {
  gamepads_.InternalSwap(&other->gamepads_);
  unlock_parental_lock_.Swap(&other->unlock_parental_lock_);
  std::swap(app_id_, other->app_id_);
  std::swap(environment_, other->environment_);
  std::swap(gamepad_count_, other->gamepad_count_);
  std::swap(lock_parental_lock_, other->lock_parental_lock_);
  std::swap(maximum_resolution_x_, other->maximum_resolution_x_);
  std::swap(maximum_resolution_y_, other->maximum_resolution_y_);
  std::swap(launch_option_, other->launch_option_);
  std::swap(audio_channel_count_, other->audio_channel_count_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgRemoteClientStartStream::GetMetadata() const {
  protobuf_steammessages_5fremoteclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fremoteclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgRemoteClientStartStream

// optional uint32 app_id = 1;
bool CMsgRemoteClientStartStream::has_app_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgRemoteClientStartStream::set_has_app_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgRemoteClientStartStream::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgRemoteClientStartStream::clear_app_id() {
  app_id_ = 0u;
  clear_has_app_id();
}
::google::protobuf::uint32 CMsgRemoteClientStartStream::app_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteClientStartStream.app_id)
  return app_id_;
}
void CMsgRemoteClientStartStream::set_app_id(::google::protobuf::uint32 value) {
  set_has_app_id();
  app_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteClientStartStream.app_id)
}

// optional int32 environment = 2;
bool CMsgRemoteClientStartStream::has_environment() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgRemoteClientStartStream::set_has_environment() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgRemoteClientStartStream::clear_has_environment() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgRemoteClientStartStream::clear_environment() {
  environment_ = 0;
  clear_has_environment();
}
::google::protobuf::int32 CMsgRemoteClientStartStream::environment() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteClientStartStream.environment)
  return environment_;
}
void CMsgRemoteClientStartStream::set_environment(::google::protobuf::int32 value) {
  set_has_environment();
  environment_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteClientStartStream.environment)
}

// optional int32 gamepad_count = 3;
bool CMsgRemoteClientStartStream::has_gamepad_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgRemoteClientStartStream::set_has_gamepad_count() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgRemoteClientStartStream::clear_has_gamepad_count() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgRemoteClientStartStream::clear_gamepad_count() {
  gamepad_count_ = 0;
  clear_has_gamepad_count();
}
::google::protobuf::int32 CMsgRemoteClientStartStream::gamepad_count() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteClientStartStream.gamepad_count)
  return gamepad_count_;
}
void CMsgRemoteClientStartStream::set_gamepad_count(::google::protobuf::int32 value) {
  set_has_gamepad_count();
  gamepad_count_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteClientStartStream.gamepad_count)
}

// optional int32 launch_option = 4 [default = -1];
bool CMsgRemoteClientStartStream::has_launch_option() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgRemoteClientStartStream::set_has_launch_option() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgRemoteClientStartStream::clear_has_launch_option() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgRemoteClientStartStream::clear_launch_option() {
  launch_option_ = -1;
  clear_has_launch_option();
}
::google::protobuf::int32 CMsgRemoteClientStartStream::launch_option() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteClientStartStream.launch_option)
  return launch_option_;
}
void CMsgRemoteClientStartStream::set_launch_option(::google::protobuf::int32 value) {
  set_has_launch_option();
  launch_option_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteClientStartStream.launch_option)
}

// optional bool lock_parental_lock = 5 [default = false];
bool CMsgRemoteClientStartStream::has_lock_parental_lock() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgRemoteClientStartStream::set_has_lock_parental_lock() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgRemoteClientStartStream::clear_has_lock_parental_lock() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgRemoteClientStartStream::clear_lock_parental_lock() {
  lock_parental_lock_ = false;
  clear_has_lock_parental_lock();
}
bool CMsgRemoteClientStartStream::lock_parental_lock() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteClientStartStream.lock_parental_lock)
  return lock_parental_lock_;
}
void CMsgRemoteClientStartStream::set_lock_parental_lock(bool value) {
  set_has_lock_parental_lock();
  lock_parental_lock_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteClientStartStream.lock_parental_lock)
}

// optional string unlock_parental_lock = 6;
bool CMsgRemoteClientStartStream::has_unlock_parental_lock() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgRemoteClientStartStream::set_has_unlock_parental_lock() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgRemoteClientStartStream::clear_has_unlock_parental_lock() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgRemoteClientStartStream::clear_unlock_parental_lock() {
  unlock_parental_lock_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_unlock_parental_lock();
}
const ::std::string& CMsgRemoteClientStartStream::unlock_parental_lock() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteClientStartStream.unlock_parental_lock)
  return unlock_parental_lock_.GetNoArena();
}
void CMsgRemoteClientStartStream::set_unlock_parental_lock(const ::std::string& value) {
  set_has_unlock_parental_lock();
  unlock_parental_lock_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteClientStartStream.unlock_parental_lock)
}
#if LANG_CXX11
void CMsgRemoteClientStartStream::set_unlock_parental_lock(::std::string&& value) {
  set_has_unlock_parental_lock();
  unlock_parental_lock_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgRemoteClientStartStream.unlock_parental_lock)
}
#endif
void CMsgRemoteClientStartStream::set_unlock_parental_lock(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_unlock_parental_lock();
  unlock_parental_lock_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgRemoteClientStartStream.unlock_parental_lock)
}
void CMsgRemoteClientStartStream::set_unlock_parental_lock(const char* value, size_t size) {
  set_has_unlock_parental_lock();
  unlock_parental_lock_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgRemoteClientStartStream.unlock_parental_lock)
}
::std::string* CMsgRemoteClientStartStream::mutable_unlock_parental_lock() {
  set_has_unlock_parental_lock();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgRemoteClientStartStream.unlock_parental_lock)
  return unlock_parental_lock_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgRemoteClientStartStream::release_unlock_parental_lock() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgRemoteClientStartStream.unlock_parental_lock)
  clear_has_unlock_parental_lock();
  return unlock_parental_lock_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgRemoteClientStartStream::set_allocated_unlock_parental_lock(::std::string* unlock_parental_lock) {
  if (unlock_parental_lock != NULL) {
    set_has_unlock_parental_lock();
  } else {
    clear_has_unlock_parental_lock();
  }
  unlock_parental_lock_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), unlock_parental_lock);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgRemoteClientStartStream.unlock_parental_lock)
}

// optional int32 maximum_resolution_x = 7;
bool CMsgRemoteClientStartStream::has_maximum_resolution_x() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgRemoteClientStartStream::set_has_maximum_resolution_x() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgRemoteClientStartStream::clear_has_maximum_resolution_x() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgRemoteClientStartStream::clear_maximum_resolution_x() {
  maximum_resolution_x_ = 0;
  clear_has_maximum_resolution_x();
}
::google::protobuf::int32 CMsgRemoteClientStartStream::maximum_resolution_x() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteClientStartStream.maximum_resolution_x)
  return maximum_resolution_x_;
}
void CMsgRemoteClientStartStream::set_maximum_resolution_x(::google::protobuf::int32 value) {
  set_has_maximum_resolution_x();
  maximum_resolution_x_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteClientStartStream.maximum_resolution_x)
}

// optional int32 maximum_resolution_y = 8;
bool CMsgRemoteClientStartStream::has_maximum_resolution_y() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgRemoteClientStartStream::set_has_maximum_resolution_y() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgRemoteClientStartStream::clear_has_maximum_resolution_y() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgRemoteClientStartStream::clear_maximum_resolution_y() {
  maximum_resolution_y_ = 0;
  clear_has_maximum_resolution_y();
}
::google::protobuf::int32 CMsgRemoteClientStartStream::maximum_resolution_y() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteClientStartStream.maximum_resolution_y)
  return maximum_resolution_y_;
}
void CMsgRemoteClientStartStream::set_maximum_resolution_y(::google::protobuf::int32 value) {
  set_has_maximum_resolution_y();
  maximum_resolution_y_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteClientStartStream.maximum_resolution_y)
}

// repeated .proto.steam.CMsgRemoteClientStartStream.ReservedGamepad gamepads = 9;
int CMsgRemoteClientStartStream::gamepads_size() const {
  return gamepads_.size();
}
void CMsgRemoteClientStartStream::clear_gamepads() {
  gamepads_.Clear();
}
const ::proto::steam::CMsgRemoteClientStartStream_ReservedGamepad& CMsgRemoteClientStartStream::gamepads(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteClientStartStream.gamepads)
  return gamepads_.Get(index);
}
::proto::steam::CMsgRemoteClientStartStream_ReservedGamepad* CMsgRemoteClientStartStream::mutable_gamepads(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgRemoteClientStartStream.gamepads)
  return gamepads_.Mutable(index);
}
::proto::steam::CMsgRemoteClientStartStream_ReservedGamepad* CMsgRemoteClientStartStream::add_gamepads() {
  // @@protoc_insertion_point(field_add:proto.steam.CMsgRemoteClientStartStream.gamepads)
  return gamepads_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgRemoteClientStartStream_ReservedGamepad >*
CMsgRemoteClientStartStream::mutable_gamepads() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgRemoteClientStartStream.gamepads)
  return &gamepads_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::CMsgRemoteClientStartStream_ReservedGamepad >&
CMsgRemoteClientStartStream::gamepads() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgRemoteClientStartStream.gamepads)
  return gamepads_;
}

// optional int32 audio_channel_count = 10 [default = 2];
bool CMsgRemoteClientStartStream::has_audio_channel_count() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CMsgRemoteClientStartStream::set_has_audio_channel_count() {
  _has_bits_[0] |= 0x00000100u;
}
void CMsgRemoteClientStartStream::clear_has_audio_channel_count() {
  _has_bits_[0] &= ~0x00000100u;
}
void CMsgRemoteClientStartStream::clear_audio_channel_count() {
  audio_channel_count_ = 2;
  clear_has_audio_channel_count();
}
::google::protobuf::int32 CMsgRemoteClientStartStream::audio_channel_count() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteClientStartStream.audio_channel_count)
  return audio_channel_count_;
}
void CMsgRemoteClientStartStream::set_audio_channel_count(::google::protobuf::int32 value) {
  set_has_audio_channel_count();
  audio_channel_count_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteClientStartStream.audio_channel_count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgRemoteClientStartStreamResponse::kELaunchResultFieldNumber;
const int CMsgRemoteClientStartStreamResponse::kStreamPortFieldNumber;
const int CMsgRemoteClientStartStreamResponse::kLaunchOptionsFieldNumber;
const int CMsgRemoteClientStartStreamResponse::kAuthTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgRemoteClientStartStreamResponse::CMsgRemoteClientStartStreamResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fremoteclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgRemoteClientStartStreamResponse)
}
CMsgRemoteClientStartStreamResponse::CMsgRemoteClientStartStreamResponse(const CMsgRemoteClientStartStreamResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      launch_options_(from.launch_options_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  auth_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_auth_token()) {
    auth_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.auth_token_);
  }
  ::memcpy(&stream_port_, &from.stream_port_,
    reinterpret_cast<char*>(&e_launch_result_) -
    reinterpret_cast<char*>(&stream_port_) + sizeof(e_launch_result_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgRemoteClientStartStreamResponse)
}

void CMsgRemoteClientStartStreamResponse::SharedCtor() {
  _cached_size_ = 0;
  auth_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stream_port_ = 0u;
  e_launch_result_ = 2;
}

CMsgRemoteClientStartStreamResponse::~CMsgRemoteClientStartStreamResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgRemoteClientStartStreamResponse)
  SharedDtor();
}

void CMsgRemoteClientStartStreamResponse::SharedDtor() {
  auth_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgRemoteClientStartStreamResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgRemoteClientStartStreamResponse::descriptor() {
  protobuf_steammessages_5fremoteclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fremoteclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgRemoteClientStartStreamResponse& CMsgRemoteClientStartStreamResponse::default_instance() {
  protobuf_steammessages_5fremoteclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgRemoteClientStartStreamResponse* CMsgRemoteClientStartStreamResponse::New(::google::protobuf::Arena* arena) const {
  CMsgRemoteClientStartStreamResponse* n = new CMsgRemoteClientStartStreamResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgRemoteClientStartStreamResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgRemoteClientStartStreamResponse)
  launch_options_.Clear();
  if (has_auth_token()) {
    GOOGLE_DCHECK(!auth_token_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*auth_token_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    stream_port_ = 0u;
    e_launch_result_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgRemoteClientStartStreamResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgRemoteClientStartStreamResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 e_launch_result = 1 [default = 2];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_e_launch_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &e_launch_result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 stream_port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_stream_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stream_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 launch_options = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24u, input, this->mutable_launch_options())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(26u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_launch_options())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes auth_token = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_auth_token()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgRemoteClientStartStreamResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgRemoteClientStartStreamResponse)
  return false;
#undef DO_
}

void CMsgRemoteClientStartStreamResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgRemoteClientStartStreamResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 e_launch_result = 1 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->e_launch_result(), output);
  }

  // optional uint32 stream_port = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->stream_port(), output);
  }

  // repeated int32 launch_options = 3;
  for (int i = 0, n = this->launch_options_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->launch_options(i), output);
  }

  // optional bytes auth_token = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->auth_token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgRemoteClientStartStreamResponse)
}

::google::protobuf::uint8* CMsgRemoteClientStartStreamResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgRemoteClientStartStreamResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 e_launch_result = 1 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->e_launch_result(), target);
  }

  // optional uint32 stream_port = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->stream_port(), target);
  }

  // repeated int32 launch_options = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(3, this->launch_options_, target);

  // optional bytes auth_token = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->auth_token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgRemoteClientStartStreamResponse)
  return target;
}

size_t CMsgRemoteClientStartStreamResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgRemoteClientStartStreamResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated int32 launch_options = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->launch_options_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->launch_options_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional bytes auth_token = 4;
    if (has_auth_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->auth_token());
    }

    // optional uint32 stream_port = 2;
    if (has_stream_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stream_port());
    }

    // optional int32 e_launch_result = 1 [default = 2];
    if (has_e_launch_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->e_launch_result());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgRemoteClientStartStreamResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgRemoteClientStartStreamResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgRemoteClientStartStreamResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgRemoteClientStartStreamResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgRemoteClientStartStreamResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgRemoteClientStartStreamResponse)
    MergeFrom(*source);
  }
}

void CMsgRemoteClientStartStreamResponse::MergeFrom(const CMsgRemoteClientStartStreamResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgRemoteClientStartStreamResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  launch_options_.MergeFrom(from.launch_options_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_auth_token();
      auth_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.auth_token_);
    }
    if (cached_has_bits & 0x00000002u) {
      stream_port_ = from.stream_port_;
    }
    if (cached_has_bits & 0x00000004u) {
      e_launch_result_ = from.e_launch_result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgRemoteClientStartStreamResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgRemoteClientStartStreamResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRemoteClientStartStreamResponse::CopyFrom(const CMsgRemoteClientStartStreamResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgRemoteClientStartStreamResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRemoteClientStartStreamResponse::IsInitialized() const {
  return true;
}

void CMsgRemoteClientStartStreamResponse::Swap(CMsgRemoteClientStartStreamResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgRemoteClientStartStreamResponse::InternalSwap(CMsgRemoteClientStartStreamResponse* other) {
  launch_options_.InternalSwap(&other->launch_options_);
  auth_token_.Swap(&other->auth_token_);
  std::swap(stream_port_, other->stream_port_);
  std::swap(e_launch_result_, other->e_launch_result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgRemoteClientStartStreamResponse::GetMetadata() const {
  protobuf_steammessages_5fremoteclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fremoteclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgRemoteClientStartStreamResponse

// optional int32 e_launch_result = 1 [default = 2];
bool CMsgRemoteClientStartStreamResponse::has_e_launch_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgRemoteClientStartStreamResponse::set_has_e_launch_result() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgRemoteClientStartStreamResponse::clear_has_e_launch_result() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgRemoteClientStartStreamResponse::clear_e_launch_result() {
  e_launch_result_ = 2;
  clear_has_e_launch_result();
}
::google::protobuf::int32 CMsgRemoteClientStartStreamResponse::e_launch_result() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteClientStartStreamResponse.e_launch_result)
  return e_launch_result_;
}
void CMsgRemoteClientStartStreamResponse::set_e_launch_result(::google::protobuf::int32 value) {
  set_has_e_launch_result();
  e_launch_result_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteClientStartStreamResponse.e_launch_result)
}

// optional uint32 stream_port = 2;
bool CMsgRemoteClientStartStreamResponse::has_stream_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgRemoteClientStartStreamResponse::set_has_stream_port() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgRemoteClientStartStreamResponse::clear_has_stream_port() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgRemoteClientStartStreamResponse::clear_stream_port() {
  stream_port_ = 0u;
  clear_has_stream_port();
}
::google::protobuf::uint32 CMsgRemoteClientStartStreamResponse::stream_port() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteClientStartStreamResponse.stream_port)
  return stream_port_;
}
void CMsgRemoteClientStartStreamResponse::set_stream_port(::google::protobuf::uint32 value) {
  set_has_stream_port();
  stream_port_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteClientStartStreamResponse.stream_port)
}

// repeated int32 launch_options = 3;
int CMsgRemoteClientStartStreamResponse::launch_options_size() const {
  return launch_options_.size();
}
void CMsgRemoteClientStartStreamResponse::clear_launch_options() {
  launch_options_.Clear();
}
::google::protobuf::int32 CMsgRemoteClientStartStreamResponse::launch_options(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteClientStartStreamResponse.launch_options)
  return launch_options_.Get(index);
}
void CMsgRemoteClientStartStreamResponse::set_launch_options(int index, ::google::protobuf::int32 value) {
  launch_options_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteClientStartStreamResponse.launch_options)
}
void CMsgRemoteClientStartStreamResponse::add_launch_options(::google::protobuf::int32 value) {
  launch_options_.Add(value);
  // @@protoc_insertion_point(field_add:proto.steam.CMsgRemoteClientStartStreamResponse.launch_options)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CMsgRemoteClientStartStreamResponse::launch_options() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgRemoteClientStartStreamResponse.launch_options)
  return launch_options_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CMsgRemoteClientStartStreamResponse::mutable_launch_options() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgRemoteClientStartStreamResponse.launch_options)
  return &launch_options_;
}

// optional bytes auth_token = 4;
bool CMsgRemoteClientStartStreamResponse::has_auth_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgRemoteClientStartStreamResponse::set_has_auth_token() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgRemoteClientStartStreamResponse::clear_has_auth_token() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgRemoteClientStartStreamResponse::clear_auth_token() {
  auth_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_auth_token();
}
const ::std::string& CMsgRemoteClientStartStreamResponse::auth_token() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteClientStartStreamResponse.auth_token)
  return auth_token_.GetNoArena();
}
void CMsgRemoteClientStartStreamResponse::set_auth_token(const ::std::string& value) {
  set_has_auth_token();
  auth_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteClientStartStreamResponse.auth_token)
}
#if LANG_CXX11
void CMsgRemoteClientStartStreamResponse::set_auth_token(::std::string&& value) {
  set_has_auth_token();
  auth_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgRemoteClientStartStreamResponse.auth_token)
}
#endif
void CMsgRemoteClientStartStreamResponse::set_auth_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_auth_token();
  auth_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgRemoteClientStartStreamResponse.auth_token)
}
void CMsgRemoteClientStartStreamResponse::set_auth_token(const void* value, size_t size) {
  set_has_auth_token();
  auth_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgRemoteClientStartStreamResponse.auth_token)
}
::std::string* CMsgRemoteClientStartStreamResponse::mutable_auth_token() {
  set_has_auth_token();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgRemoteClientStartStreamResponse.auth_token)
  return auth_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgRemoteClientStartStreamResponse::release_auth_token() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgRemoteClientStartStreamResponse.auth_token)
  clear_has_auth_token();
  return auth_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgRemoteClientStartStreamResponse::set_allocated_auth_token(::std::string* auth_token) {
  if (auth_token != NULL) {
    set_has_auth_token();
  } else {
    clear_has_auth_token();
  }
  auth_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), auth_token);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgRemoteClientStartStreamResponse.auth_token)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgRemoteClientPing::CMsgRemoteClientPing()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fremoteclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgRemoteClientPing)
}
CMsgRemoteClientPing::CMsgRemoteClientPing(const CMsgRemoteClientPing& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgRemoteClientPing)
}

void CMsgRemoteClientPing::SharedCtor() {
  _cached_size_ = 0;
}

CMsgRemoteClientPing::~CMsgRemoteClientPing() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgRemoteClientPing)
  SharedDtor();
}

void CMsgRemoteClientPing::SharedDtor() {
}

void CMsgRemoteClientPing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgRemoteClientPing::descriptor() {
  protobuf_steammessages_5fremoteclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fremoteclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgRemoteClientPing& CMsgRemoteClientPing::default_instance() {
  protobuf_steammessages_5fremoteclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgRemoteClientPing* CMsgRemoteClientPing::New(::google::protobuf::Arena* arena) const {
  CMsgRemoteClientPing* n = new CMsgRemoteClientPing;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgRemoteClientPing::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgRemoteClientPing)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgRemoteClientPing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgRemoteClientPing)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgRemoteClientPing)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgRemoteClientPing)
  return false;
#undef DO_
}

void CMsgRemoteClientPing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgRemoteClientPing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgRemoteClientPing)
}

::google::protobuf::uint8* CMsgRemoteClientPing::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgRemoteClientPing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgRemoteClientPing)
  return target;
}

size_t CMsgRemoteClientPing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgRemoteClientPing)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgRemoteClientPing::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgRemoteClientPing)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgRemoteClientPing* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgRemoteClientPing>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgRemoteClientPing)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgRemoteClientPing)
    MergeFrom(*source);
  }
}

void CMsgRemoteClientPing::MergeFrom(const CMsgRemoteClientPing& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgRemoteClientPing)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgRemoteClientPing::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgRemoteClientPing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRemoteClientPing::CopyFrom(const CMsgRemoteClientPing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgRemoteClientPing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRemoteClientPing::IsInitialized() const {
  return true;
}

void CMsgRemoteClientPing::Swap(CMsgRemoteClientPing* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgRemoteClientPing::InternalSwap(CMsgRemoteClientPing* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgRemoteClientPing::GetMetadata() const {
  protobuf_steammessages_5fremoteclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fremoteclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgRemoteClientPing

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgRemoteClientPingResponse::CMsgRemoteClientPingResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fremoteclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgRemoteClientPingResponse)
}
CMsgRemoteClientPingResponse::CMsgRemoteClientPingResponse(const CMsgRemoteClientPingResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgRemoteClientPingResponse)
}

void CMsgRemoteClientPingResponse::SharedCtor() {
  _cached_size_ = 0;
}

CMsgRemoteClientPingResponse::~CMsgRemoteClientPingResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgRemoteClientPingResponse)
  SharedDtor();
}

void CMsgRemoteClientPingResponse::SharedDtor() {
}

void CMsgRemoteClientPingResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgRemoteClientPingResponse::descriptor() {
  protobuf_steammessages_5fremoteclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fremoteclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgRemoteClientPingResponse& CMsgRemoteClientPingResponse::default_instance() {
  protobuf_steammessages_5fremoteclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgRemoteClientPingResponse* CMsgRemoteClientPingResponse::New(::google::protobuf::Arena* arena) const {
  CMsgRemoteClientPingResponse* n = new CMsgRemoteClientPingResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgRemoteClientPingResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgRemoteClientPingResponse)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgRemoteClientPingResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgRemoteClientPingResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgRemoteClientPingResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgRemoteClientPingResponse)
  return false;
#undef DO_
}

void CMsgRemoteClientPingResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgRemoteClientPingResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgRemoteClientPingResponse)
}

::google::protobuf::uint8* CMsgRemoteClientPingResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgRemoteClientPingResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgRemoteClientPingResponse)
  return target;
}

size_t CMsgRemoteClientPingResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgRemoteClientPingResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgRemoteClientPingResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgRemoteClientPingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgRemoteClientPingResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgRemoteClientPingResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgRemoteClientPingResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgRemoteClientPingResponse)
    MergeFrom(*source);
  }
}

void CMsgRemoteClientPingResponse::MergeFrom(const CMsgRemoteClientPingResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgRemoteClientPingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgRemoteClientPingResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgRemoteClientPingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRemoteClientPingResponse::CopyFrom(const CMsgRemoteClientPingResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgRemoteClientPingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRemoteClientPingResponse::IsInitialized() const {
  return true;
}

void CMsgRemoteClientPingResponse::Swap(CMsgRemoteClientPingResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgRemoteClientPingResponse::InternalSwap(CMsgRemoteClientPingResponse* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgRemoteClientPingResponse::GetMetadata() const {
  protobuf_steammessages_5fremoteclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fremoteclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgRemoteClientPingResponse

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgRemoteClientAcceptEULA::kAppIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgRemoteClientAcceptEULA::CMsgRemoteClientAcceptEULA()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fremoteclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgRemoteClientAcceptEULA)
}
CMsgRemoteClientAcceptEULA::CMsgRemoteClientAcceptEULA(const CMsgRemoteClientAcceptEULA& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      app_id_(from.app_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgRemoteClientAcceptEULA)
}

void CMsgRemoteClientAcceptEULA::SharedCtor() {
  _cached_size_ = 0;
}

CMsgRemoteClientAcceptEULA::~CMsgRemoteClientAcceptEULA() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgRemoteClientAcceptEULA)
  SharedDtor();
}

void CMsgRemoteClientAcceptEULA::SharedDtor() {
}

void CMsgRemoteClientAcceptEULA::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgRemoteClientAcceptEULA::descriptor() {
  protobuf_steammessages_5fremoteclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fremoteclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgRemoteClientAcceptEULA& CMsgRemoteClientAcceptEULA::default_instance() {
  protobuf_steammessages_5fremoteclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgRemoteClientAcceptEULA* CMsgRemoteClientAcceptEULA::New(::google::protobuf::Arena* arena) const {
  CMsgRemoteClientAcceptEULA* n = new CMsgRemoteClientAcceptEULA;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgRemoteClientAcceptEULA::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgRemoteClientAcceptEULA)
  app_id_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgRemoteClientAcceptEULA::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgRemoteClientAcceptEULA)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 app_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_app_id())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_app_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgRemoteClientAcceptEULA)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgRemoteClientAcceptEULA)
  return false;
#undef DO_
}

void CMsgRemoteClientAcceptEULA::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgRemoteClientAcceptEULA)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 app_id = 1;
  for (int i = 0, n = this->app_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->app_id(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgRemoteClientAcceptEULA)
}

::google::protobuf::uint8* CMsgRemoteClientAcceptEULA::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgRemoteClientAcceptEULA)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 app_id = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->app_id_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgRemoteClientAcceptEULA)
  return target;
}

size_t CMsgRemoteClientAcceptEULA::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgRemoteClientAcceptEULA)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 app_id = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->app_id_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->app_id_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgRemoteClientAcceptEULA::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgRemoteClientAcceptEULA)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgRemoteClientAcceptEULA* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgRemoteClientAcceptEULA>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgRemoteClientAcceptEULA)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgRemoteClientAcceptEULA)
    MergeFrom(*source);
  }
}

void CMsgRemoteClientAcceptEULA::MergeFrom(const CMsgRemoteClientAcceptEULA& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgRemoteClientAcceptEULA)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  app_id_.MergeFrom(from.app_id_);
}

void CMsgRemoteClientAcceptEULA::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgRemoteClientAcceptEULA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRemoteClientAcceptEULA::CopyFrom(const CMsgRemoteClientAcceptEULA& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgRemoteClientAcceptEULA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRemoteClientAcceptEULA::IsInitialized() const {
  return true;
}

void CMsgRemoteClientAcceptEULA::Swap(CMsgRemoteClientAcceptEULA* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgRemoteClientAcceptEULA::InternalSwap(CMsgRemoteClientAcceptEULA* other) {
  app_id_.InternalSwap(&other->app_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgRemoteClientAcceptEULA::GetMetadata() const {
  protobuf_steammessages_5fremoteclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fremoteclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgRemoteClientAcceptEULA

// repeated uint32 app_id = 1;
int CMsgRemoteClientAcceptEULA::app_id_size() const {
  return app_id_.size();
}
void CMsgRemoteClientAcceptEULA::clear_app_id() {
  app_id_.Clear();
}
::google::protobuf::uint32 CMsgRemoteClientAcceptEULA::app_id(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteClientAcceptEULA.app_id)
  return app_id_.Get(index);
}
void CMsgRemoteClientAcceptEULA::set_app_id(int index, ::google::protobuf::uint32 value) {
  app_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteClientAcceptEULA.app_id)
}
void CMsgRemoteClientAcceptEULA::add_app_id(::google::protobuf::uint32 value) {
  app_id_.Add(value);
  // @@protoc_insertion_point(field_add:proto.steam.CMsgRemoteClientAcceptEULA.app_id)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgRemoteClientAcceptEULA::app_id() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgRemoteClientAcceptEULA.app_id)
  return app_id_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgRemoteClientAcceptEULA::mutable_app_id() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgRemoteClientAcceptEULA.app_id)
  return &app_id_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgRemoteClientGetControllerConfig::kAppIdFieldNumber;
const int CMsgRemoteClientGetControllerConfig::kControllerIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgRemoteClientGetControllerConfig::CMsgRemoteClientGetControllerConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fremoteclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgRemoteClientGetControllerConfig)
}
CMsgRemoteClientGetControllerConfig::CMsgRemoteClientGetControllerConfig(const CMsgRemoteClientGetControllerConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&app_id_, &from.app_id_,
    reinterpret_cast<char*>(&controller_index_) -
    reinterpret_cast<char*>(&app_id_) + sizeof(controller_index_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgRemoteClientGetControllerConfig)
}

void CMsgRemoteClientGetControllerConfig::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&app_id_, 0, reinterpret_cast<char*>(&controller_index_) -
    reinterpret_cast<char*>(&app_id_) + sizeof(controller_index_));
}

CMsgRemoteClientGetControllerConfig::~CMsgRemoteClientGetControllerConfig() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgRemoteClientGetControllerConfig)
  SharedDtor();
}

void CMsgRemoteClientGetControllerConfig::SharedDtor() {
}

void CMsgRemoteClientGetControllerConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgRemoteClientGetControllerConfig::descriptor() {
  protobuf_steammessages_5fremoteclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fremoteclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgRemoteClientGetControllerConfig& CMsgRemoteClientGetControllerConfig::default_instance() {
  protobuf_steammessages_5fremoteclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgRemoteClientGetControllerConfig* CMsgRemoteClientGetControllerConfig::New(::google::protobuf::Arena* arena) const {
  CMsgRemoteClientGetControllerConfig* n = new CMsgRemoteClientGetControllerConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgRemoteClientGetControllerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgRemoteClientGetControllerConfig)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&app_id_, 0, reinterpret_cast<char*>(&controller_index_) -
      reinterpret_cast<char*>(&app_id_) + sizeof(controller_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgRemoteClientGetControllerConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgRemoteClientGetControllerConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_app_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 controller_index = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_controller_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &controller_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgRemoteClientGetControllerConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgRemoteClientGetControllerConfig)
  return false;
#undef DO_
}

void CMsgRemoteClientGetControllerConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgRemoteClientGetControllerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional uint32 controller_index = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->controller_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgRemoteClientGetControllerConfig)
}

::google::protobuf::uint8* CMsgRemoteClientGetControllerConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgRemoteClientGetControllerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  // optional uint32 controller_index = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->controller_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgRemoteClientGetControllerConfig)
  return target;
}

size_t CMsgRemoteClientGetControllerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgRemoteClientGetControllerConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional uint32 controller_index = 3;
    if (has_controller_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->controller_index());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgRemoteClientGetControllerConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgRemoteClientGetControllerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgRemoteClientGetControllerConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgRemoteClientGetControllerConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgRemoteClientGetControllerConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgRemoteClientGetControllerConfig)
    MergeFrom(*source);
  }
}

void CMsgRemoteClientGetControllerConfig::MergeFrom(const CMsgRemoteClientGetControllerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgRemoteClientGetControllerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      controller_index_ = from.controller_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgRemoteClientGetControllerConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgRemoteClientGetControllerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRemoteClientGetControllerConfig::CopyFrom(const CMsgRemoteClientGetControllerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgRemoteClientGetControllerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRemoteClientGetControllerConfig::IsInitialized() const {
  return true;
}

void CMsgRemoteClientGetControllerConfig::Swap(CMsgRemoteClientGetControllerConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgRemoteClientGetControllerConfig::InternalSwap(CMsgRemoteClientGetControllerConfig* other) {
  std::swap(app_id_, other->app_id_);
  std::swap(controller_index_, other->controller_index_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgRemoteClientGetControllerConfig::GetMetadata() const {
  protobuf_steammessages_5fremoteclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fremoteclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgRemoteClientGetControllerConfig

// optional uint32 app_id = 1;
bool CMsgRemoteClientGetControllerConfig::has_app_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgRemoteClientGetControllerConfig::set_has_app_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgRemoteClientGetControllerConfig::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgRemoteClientGetControllerConfig::clear_app_id() {
  app_id_ = 0u;
  clear_has_app_id();
}
::google::protobuf::uint32 CMsgRemoteClientGetControllerConfig::app_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteClientGetControllerConfig.app_id)
  return app_id_;
}
void CMsgRemoteClientGetControllerConfig::set_app_id(::google::protobuf::uint32 value) {
  set_has_app_id();
  app_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteClientGetControllerConfig.app_id)
}

// optional uint32 controller_index = 3;
bool CMsgRemoteClientGetControllerConfig::has_controller_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgRemoteClientGetControllerConfig::set_has_controller_index() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgRemoteClientGetControllerConfig::clear_has_controller_index() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgRemoteClientGetControllerConfig::clear_controller_index() {
  controller_index_ = 0u;
  clear_has_controller_index();
}
::google::protobuf::uint32 CMsgRemoteClientGetControllerConfig::controller_index() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteClientGetControllerConfig.controller_index)
  return controller_index_;
}
void CMsgRemoteClientGetControllerConfig::set_controller_index(::google::protobuf::uint32 value) {
  set_has_controller_index();
  controller_index_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteClientGetControllerConfig.controller_index)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgRemoteClientGetControllerConfigResponse::kEresultFieldNumber;
const int CMsgRemoteClientGetControllerConfigResponse::kConfigVdfFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgRemoteClientGetControllerConfigResponse::CMsgRemoteClientGetControllerConfigResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fremoteclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgRemoteClientGetControllerConfigResponse)
}
CMsgRemoteClientGetControllerConfigResponse::CMsgRemoteClientGetControllerConfigResponse(const CMsgRemoteClientGetControllerConfigResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  config_vdf_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_config_vdf()) {
    config_vdf_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.config_vdf_);
  }
  eresult_ = from.eresult_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgRemoteClientGetControllerConfigResponse)
}

void CMsgRemoteClientGetControllerConfigResponse::SharedCtor() {
  _cached_size_ = 0;
  config_vdf_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  eresult_ = 2;
}

CMsgRemoteClientGetControllerConfigResponse::~CMsgRemoteClientGetControllerConfigResponse() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgRemoteClientGetControllerConfigResponse)
  SharedDtor();
}

void CMsgRemoteClientGetControllerConfigResponse::SharedDtor() {
  config_vdf_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgRemoteClientGetControllerConfigResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgRemoteClientGetControllerConfigResponse::descriptor() {
  protobuf_steammessages_5fremoteclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fremoteclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgRemoteClientGetControllerConfigResponse& CMsgRemoteClientGetControllerConfigResponse::default_instance() {
  protobuf_steammessages_5fremoteclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgRemoteClientGetControllerConfigResponse* CMsgRemoteClientGetControllerConfigResponse::New(::google::protobuf::Arena* arena) const {
  CMsgRemoteClientGetControllerConfigResponse* n = new CMsgRemoteClientGetControllerConfigResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgRemoteClientGetControllerConfigResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgRemoteClientGetControllerConfigResponse)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_config_vdf()) {
      GOOGLE_DCHECK(!config_vdf_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*config_vdf_.UnsafeRawStringPointer())->clear();
    }
    eresult_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgRemoteClientGetControllerConfigResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgRemoteClientGetControllerConfigResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eresult = 1 [default = 2];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_eresult();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes config_vdf = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_config_vdf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgRemoteClientGetControllerConfigResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgRemoteClientGetControllerConfigResponse)
  return false;
#undef DO_
}

void CMsgRemoteClientGetControllerConfigResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgRemoteClientGetControllerConfigResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eresult(), output);
  }

  // optional bytes config_vdf = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->config_vdf(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgRemoteClientGetControllerConfigResponse)
}

::google::protobuf::uint8* CMsgRemoteClientGetControllerConfigResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgRemoteClientGetControllerConfigResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eresult(), target);
  }

  // optional bytes config_vdf = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->config_vdf(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgRemoteClientGetControllerConfigResponse)
  return target;
}

size_t CMsgRemoteClientGetControllerConfigResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgRemoteClientGetControllerConfigResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes config_vdf = 2;
    if (has_config_vdf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->config_vdf());
    }

    // optional int32 eresult = 1 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgRemoteClientGetControllerConfigResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgRemoteClientGetControllerConfigResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgRemoteClientGetControllerConfigResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgRemoteClientGetControllerConfigResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgRemoteClientGetControllerConfigResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgRemoteClientGetControllerConfigResponse)
    MergeFrom(*source);
  }
}

void CMsgRemoteClientGetControllerConfigResponse::MergeFrom(const CMsgRemoteClientGetControllerConfigResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgRemoteClientGetControllerConfigResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_config_vdf();
      config_vdf_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.config_vdf_);
    }
    if (cached_has_bits & 0x00000002u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgRemoteClientGetControllerConfigResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgRemoteClientGetControllerConfigResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRemoteClientGetControllerConfigResponse::CopyFrom(const CMsgRemoteClientGetControllerConfigResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgRemoteClientGetControllerConfigResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRemoteClientGetControllerConfigResponse::IsInitialized() const {
  return true;
}

void CMsgRemoteClientGetControllerConfigResponse::Swap(CMsgRemoteClientGetControllerConfigResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgRemoteClientGetControllerConfigResponse::InternalSwap(CMsgRemoteClientGetControllerConfigResponse* other) {
  config_vdf_.Swap(&other->config_vdf_);
  std::swap(eresult_, other->eresult_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgRemoteClientGetControllerConfigResponse::GetMetadata() const {
  protobuf_steammessages_5fremoteclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fremoteclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgRemoteClientGetControllerConfigResponse

// optional int32 eresult = 1 [default = 2];
bool CMsgRemoteClientGetControllerConfigResponse::has_eresult() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgRemoteClientGetControllerConfigResponse::set_has_eresult() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgRemoteClientGetControllerConfigResponse::clear_has_eresult() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgRemoteClientGetControllerConfigResponse::clear_eresult() {
  eresult_ = 2;
  clear_has_eresult();
}
::google::protobuf::int32 CMsgRemoteClientGetControllerConfigResponse::eresult() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteClientGetControllerConfigResponse.eresult)
  return eresult_;
}
void CMsgRemoteClientGetControllerConfigResponse::set_eresult(::google::protobuf::int32 value) {
  set_has_eresult();
  eresult_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteClientGetControllerConfigResponse.eresult)
}

// optional bytes config_vdf = 2;
bool CMsgRemoteClientGetControllerConfigResponse::has_config_vdf() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgRemoteClientGetControllerConfigResponse::set_has_config_vdf() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgRemoteClientGetControllerConfigResponse::clear_has_config_vdf() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgRemoteClientGetControllerConfigResponse::clear_config_vdf() {
  config_vdf_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_config_vdf();
}
const ::std::string& CMsgRemoteClientGetControllerConfigResponse::config_vdf() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteClientGetControllerConfigResponse.config_vdf)
  return config_vdf_.GetNoArena();
}
void CMsgRemoteClientGetControllerConfigResponse::set_config_vdf(const ::std::string& value) {
  set_has_config_vdf();
  config_vdf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteClientGetControllerConfigResponse.config_vdf)
}
#if LANG_CXX11
void CMsgRemoteClientGetControllerConfigResponse::set_config_vdf(::std::string&& value) {
  set_has_config_vdf();
  config_vdf_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgRemoteClientGetControllerConfigResponse.config_vdf)
}
#endif
void CMsgRemoteClientGetControllerConfigResponse::set_config_vdf(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_config_vdf();
  config_vdf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgRemoteClientGetControllerConfigResponse.config_vdf)
}
void CMsgRemoteClientGetControllerConfigResponse::set_config_vdf(const void* value, size_t size) {
  set_has_config_vdf();
  config_vdf_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgRemoteClientGetControllerConfigResponse.config_vdf)
}
::std::string* CMsgRemoteClientGetControllerConfigResponse::mutable_config_vdf() {
  set_has_config_vdf();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgRemoteClientGetControllerConfigResponse.config_vdf)
  return config_vdf_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgRemoteClientGetControllerConfigResponse::release_config_vdf() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgRemoteClientGetControllerConfigResponse.config_vdf)
  clear_has_config_vdf();
  return config_vdf_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgRemoteClientGetControllerConfigResponse::set_allocated_config_vdf(::std::string* config_vdf) {
  if (config_vdf != NULL) {
    set_has_config_vdf();
  } else {
    clear_has_config_vdf();
  }
  config_vdf_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), config_vdf);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgRemoteClientGetControllerConfigResponse.config_vdf)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgRemoteClientStreamingEnabled::kEnabledFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgRemoteClientStreamingEnabled::CMsgRemoteClientStreamingEnabled()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fremoteclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgRemoteClientStreamingEnabled)
}
CMsgRemoteClientStreamingEnabled::CMsgRemoteClientStreamingEnabled(const CMsgRemoteClientStreamingEnabled& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  enabled_ = from.enabled_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgRemoteClientStreamingEnabled)
}

void CMsgRemoteClientStreamingEnabled::SharedCtor() {
  _cached_size_ = 0;
  enabled_ = false;
}

CMsgRemoteClientStreamingEnabled::~CMsgRemoteClientStreamingEnabled() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgRemoteClientStreamingEnabled)
  SharedDtor();
}

void CMsgRemoteClientStreamingEnabled::SharedDtor() {
}

void CMsgRemoteClientStreamingEnabled::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgRemoteClientStreamingEnabled::descriptor() {
  protobuf_steammessages_5fremoteclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fremoteclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgRemoteClientStreamingEnabled& CMsgRemoteClientStreamingEnabled::default_instance() {
  protobuf_steammessages_5fremoteclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgRemoteClientStreamingEnabled* CMsgRemoteClientStreamingEnabled::New(::google::protobuf::Arena* arena) const {
  CMsgRemoteClientStreamingEnabled* n = new CMsgRemoteClientStreamingEnabled;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgRemoteClientStreamingEnabled::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgRemoteClientStreamingEnabled)
  enabled_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgRemoteClientStreamingEnabled::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgRemoteClientStreamingEnabled)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool enabled = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_enabled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgRemoteClientStreamingEnabled)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgRemoteClientStreamingEnabled)
  return false;
#undef DO_
}

void CMsgRemoteClientStreamingEnabled::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgRemoteClientStreamingEnabled)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool enabled = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgRemoteClientStreamingEnabled)
}

::google::protobuf::uint8* CMsgRemoteClientStreamingEnabled::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgRemoteClientStreamingEnabled)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool enabled = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enabled(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgRemoteClientStreamingEnabled)
  return target;
}

size_t CMsgRemoteClientStreamingEnabled::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgRemoteClientStreamingEnabled)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required bool enabled = 1;
  if (has_enabled()) {
    total_size += 1 + 1;
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgRemoteClientStreamingEnabled::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgRemoteClientStreamingEnabled)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgRemoteClientStreamingEnabled* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgRemoteClientStreamingEnabled>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgRemoteClientStreamingEnabled)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgRemoteClientStreamingEnabled)
    MergeFrom(*source);
  }
}

void CMsgRemoteClientStreamingEnabled::MergeFrom(const CMsgRemoteClientStreamingEnabled& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgRemoteClientStreamingEnabled)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_enabled()) {
    set_enabled(from.enabled());
  }
}

void CMsgRemoteClientStreamingEnabled::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgRemoteClientStreamingEnabled)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRemoteClientStreamingEnabled::CopyFrom(const CMsgRemoteClientStreamingEnabled& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgRemoteClientStreamingEnabled)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRemoteClientStreamingEnabled::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void CMsgRemoteClientStreamingEnabled::Swap(CMsgRemoteClientStreamingEnabled* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgRemoteClientStreamingEnabled::InternalSwap(CMsgRemoteClientStreamingEnabled* other) {
  std::swap(enabled_, other->enabled_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgRemoteClientStreamingEnabled::GetMetadata() const {
  protobuf_steammessages_5fremoteclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fremoteclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgRemoteClientStreamingEnabled

// required bool enabled = 1;
bool CMsgRemoteClientStreamingEnabled::has_enabled() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgRemoteClientStreamingEnabled::set_has_enabled() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgRemoteClientStreamingEnabled::clear_has_enabled() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgRemoteClientStreamingEnabled::clear_enabled() {
  enabled_ = false;
  clear_has_enabled();
}
bool CMsgRemoteClientStreamingEnabled::enabled() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgRemoteClientStreamingEnabled.enabled)
  return enabled_;
}
void CMsgRemoteClientStreamingEnabled::set_enabled(bool value) {
  set_has_enabled();
  enabled_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgRemoteClientStreamingEnabled.enabled)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace steam
}  // namespace proto

// @@protoc_insertion_point(global_scope)
