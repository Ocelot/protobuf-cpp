// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_base.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "steammessages_base.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace steam {
class CMsgProtoBufHeaderDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgProtoBufHeader> {
} _CMsgProtoBufHeader_default_instance_;
class CMsgMultiDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgMulti> {
} _CMsgMulti_default_instance_;
class CMsgProtobufWrappedDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgProtobufWrapped> {
} _CMsgProtobufWrapped_default_instance_;
class CMsgAuthTicketDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgAuthTicket> {
} _CMsgAuthTicket_default_instance_;
class CCDDBAppDetailCommonDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CCDDBAppDetailCommon> {
} _CCDDBAppDetailCommon_default_instance_;
class CMsgAppRightsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgAppRights> {
} _CMsgAppRights_default_instance_;

namespace protobuf_steammessages_5fbase_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[6];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, steamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, client_sessionid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, routing_appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, jobid_source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, jobid_target_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, target_job_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, seq_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, eresult_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, error_message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, auth_account_flags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, token_source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, admin_spoofing_user_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, transport_error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, messageid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, publisher_group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, sysid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, trace_tag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, webapi_key_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, is_from_external_source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtoBufHeader, forward_to_sysid_),
  2,
  3,
  4,
  15,
  16,
  0,
  11,
  17,
  1,
  5,
  6,
  10,
  12,
  18,
  19,
  7,
  8,
  9,
  14,
  13,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMulti, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMulti, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMulti, size_unzipped_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgMulti, message_body_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtobufWrapped, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtobufWrapped, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgProtobufWrapped, message_body_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAuthTicket, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAuthTicket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAuthTicket, estate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAuthTicket, eresult_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAuthTicket, steamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAuthTicket, gameid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAuthTicket, h_steam_pipe_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAuthTicket, ticket_crc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAuthTicket, ticket_),
  2,
  6,
  1,
  4,
  3,
  5,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCDDBAppDetailCommon, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCDDBAppDetailCommon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCDDBAppDetailCommon, appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCDDBAppDetailCommon, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCDDBAppDetailCommon, icon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCDDBAppDetailCommon, logo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCDDBAppDetailCommon, logo_small_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCDDBAppDetailCommon, tool_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCDDBAppDetailCommon, demo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCDDBAppDetailCommon, media_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCDDBAppDetailCommon, community_visible_stats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCDDBAppDetailCommon, friendly_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCDDBAppDetailCommon, propagation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCDDBAppDetailCommon, has_adult_content_),
  6,
  0,
  1,
  2,
  3,
  7,
  8,
  9,
  10,
  4,
  5,
  11,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAppRights, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAppRights, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAppRights, edit_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAppRights, publish_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAppRights, view_error_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAppRights, download_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAppRights, upload_cdkeys_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAppRights, generate_cdkeys_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAppRights, view_financials_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAppRights, manage_ceg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAppRights, manage_signing_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAppRights, manage_cdkeys_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAppRights, edit_marketing_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAppRights, economy_support_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAppRights, economy_support_supervisor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAppRights, manage_pricing_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAppRights, broadcast_live_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 26, sizeof(CMsgProtoBufHeader)},
  { 47, 54, sizeof(CMsgMulti)},
  { 56, 62, sizeof(CMsgProtobufWrapped)},
  { 63, 75, sizeof(CMsgAuthTicket)},
  { 82, 99, sizeof(CCDDBAppDetailCommon)},
  { 111, 131, sizeof(CMsgAppRights)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgProtoBufHeader_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgMulti_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgProtobufWrapped_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgAuthTicket_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CCDDBAppDetailCommon_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgAppRights_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "steammessages_base.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

}  // namespace

void TableStruct::Shutdown() {
  _CMsgProtoBufHeader_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _CMsgMulti_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _CMsgProtobufWrapped_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _CMsgAuthTicket_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _CCDDBAppDetailCommon_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _CMsgAppRights_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::google::protobuf::protobuf_google_2fprotobuf_2fdescriptor_2eproto::InitDefaults();
  _CMsgProtoBufHeader_default_instance_.DefaultConstruct();
  _CMsgMulti_default_instance_.DefaultConstruct();
  _CMsgProtobufWrapped_default_instance_.DefaultConstruct();
  _CMsgAuthTicket_default_instance_.DefaultConstruct();
  _CCDDBAppDetailCommon_default_instance_.DefaultConstruct();
  _CMsgAppRights_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    ::google::protobuf::MessageOptions::internal_default_instance(),
    50000, 5, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    ::google::protobuf::MessageOptions::internal_default_instance(),
    50001, 5, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    ::google::protobuf::FileOptions::internal_default_instance(),
    50000, 8, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    ::google::protobuf::FieldOptions::internal_default_instance(),
    50020, 8, false, false);
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\030steammessages_base.proto\022\013proto.steam\032"
      " google/protobuf/descriptor.proto\"\263\004\n\022CM"
      "sgProtoBufHeader\022\017\n\007steamid\030\001 \001(\006\022\030\n\020cli"
      "ent_sessionid\030\002 \001(\005\022\025\n\rrouting_appid\030\003 \001"
      "(\r\022*\n\014jobid_source\030\n \001(\006:\02418446744073709"
      "551615\022*\n\014jobid_target\030\013 \001(\006:\0241844674407"
      "3709551615\022\027\n\017target_job_name\030\014 \001(\t\022\017\n\007s"
      "eq_num\030\030 \001(\005\022\022\n\007eresult\030\r \001(\005:\0012\022\025\n\rerro"
      "r_message\030\016 \001(\t\022\n\n\002ip\030\017 \001(\r\022\032\n\022auth_acco"
      "unt_flags\030\020 \001(\r\022\024\n\014token_source\030\026 \001(\r\022\033\n"
      "\023admin_spoofing_user\030\027 \001(\010\022\032\n\017transport_"
      "error\030\021 \001(\005:\0011\022\'\n\tmessageid\030\022 \001(\004:\02418446"
      "744073709551615\022\032\n\022publisher_group_id\030\023 "
      "\001(\r\022\r\n\005sysid\030\024 \001(\r\022\021\n\ttrace_tag\030\025 \001(\004\022\025\n"
      "\rwebapi_key_id\030\031 \001(\r\022\037\n\027is_from_external"
      "_source\030\032 \001(\010\022\030\n\020forward_to_sysid\030\033 \003(\r\""
      "8\n\tCMsgMulti\022\025\n\rsize_unzipped\030\001 \001(\r\022\024\n\014m"
      "essage_body\030\002 \001(\014\"+\n\023CMsgProtobufWrapped"
      "\022\024\n\014message_body\030\001 \001(\014\"\217\001\n\016CMsgAuthTicke"
      "t\022\016\n\006estate\030\001 \001(\r\022\022\n\007eresult\030\002 \001(\r:\0012\022\017\n"
      "\007steamid\030\003 \001(\006\022\016\n\006gameid\030\004 \001(\006\022\024\n\014h_stea"
      "m_pipe\030\005 \001(\r\022\022\n\nticket_crc\030\006 \001(\r\022\016\n\006tick"
      "et\030\007 \001(\014\"\366\001\n\024CCDDBAppDetailCommon\022\r\n\005app"
      "id\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022\014\n\004icon\030\003 \001(\t\022\014\n\004"
      "logo\030\004 \001(\t\022\022\n\nlogo_small\030\005 \001(\t\022\014\n\004tool\030\006"
      " \001(\010\022\014\n\004demo\030\007 \001(\010\022\r\n\005media\030\010 \001(\010\022\037\n\027com"
      "munity_visible_stats\030\t \001(\010\022\025\n\rfriendly_n"
      "ame\030\n \001(\t\022\023\n\013propagation\030\013 \001(\t\022\031\n\021has_ad"
      "ult_content\030\014 \001(\010\"\357\002\n\rCMsgAppRights\022\021\n\te"
      "dit_info\030\001 \001(\010\022\017\n\007publish\030\002 \001(\010\022\027\n\017view_"
      "error_data\030\003 \001(\010\022\020\n\010download\030\004 \001(\010\022\025\n\rup"
      "load_cdkeys\030\005 \001(\010\022\027\n\017generate_cdkeys\030\006 \001"
      "(\010\022\027\n\017view_financials\030\007 \001(\010\022\022\n\nmanage_ce"
      "g\030\010 \001(\010\022\026\n\016manage_signing\030\t \001(\010\022\025\n\rmanag"
      "e_cdkeys\030\n \001(\010\022\026\n\016edit_marketing\030\013 \001(\010\022\027"
      "\n\017economy_support\030\014 \001(\010\022\"\n\032economy_suppo"
      "rt_supervisor\030\r \001(\010\022\026\n\016manage_pricing\030\016 "
      "\001(\010\022\026\n\016broadcast_live\030\017 \001(\010:A\n\022msgpool_s"
      "oft_limit\022\037.google.protobuf.MessageOptio"
      "ns\030\320\206\003 \001(\005:\00232:B\n\022msgpool_hard_limit\022\037.g"
      "oogle.protobuf.MessageOptions\030\321\206\003 \001(\005:\0033"
      "84:C\n\024force_php_generation\022\034.google.prot"
      "obuf.FileOptions\030\320\206\003 \001(\010:\005false:H\n\030php_o"
      "utput_always_number\022\035.google.protobuf.Fi"
      "eldOptions\030\344\206\003 \001(\010:\005falseB\005H\001\200\001\000"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1792);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "steammessages_base.proto", &protobuf_RegisterTypes);
  ::google::protobuf::protobuf_google_2fprotobuf_2fdescriptor_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_steammessages_5fbase_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgProtoBufHeader::kSteamidFieldNumber;
const int CMsgProtoBufHeader::kClientSessionidFieldNumber;
const int CMsgProtoBufHeader::kRoutingAppidFieldNumber;
const int CMsgProtoBufHeader::kJobidSourceFieldNumber;
const int CMsgProtoBufHeader::kJobidTargetFieldNumber;
const int CMsgProtoBufHeader::kTargetJobNameFieldNumber;
const int CMsgProtoBufHeader::kSeqNumFieldNumber;
const int CMsgProtoBufHeader::kEresultFieldNumber;
const int CMsgProtoBufHeader::kErrorMessageFieldNumber;
const int CMsgProtoBufHeader::kIpFieldNumber;
const int CMsgProtoBufHeader::kAuthAccountFlagsFieldNumber;
const int CMsgProtoBufHeader::kTokenSourceFieldNumber;
const int CMsgProtoBufHeader::kAdminSpoofingUserFieldNumber;
const int CMsgProtoBufHeader::kTransportErrorFieldNumber;
const int CMsgProtoBufHeader::kMessageidFieldNumber;
const int CMsgProtoBufHeader::kPublisherGroupIdFieldNumber;
const int CMsgProtoBufHeader::kSysidFieldNumber;
const int CMsgProtoBufHeader::kTraceTagFieldNumber;
const int CMsgProtoBufHeader::kWebapiKeyIdFieldNumber;
const int CMsgProtoBufHeader::kIsFromExternalSourceFieldNumber;
const int CMsgProtoBufHeader::kForwardToSysidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgProtoBufHeader::CMsgProtoBufHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fbase_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgProtoBufHeader)
}
CMsgProtoBufHeader::CMsgProtoBufHeader(const CMsgProtoBufHeader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      forward_to_sysid_(from.forward_to_sysid_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  target_job_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_target_job_name()) {
    target_job_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.target_job_name_);
  }
  error_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_error_message()) {
    error_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_message_);
  }
  ::memcpy(&steamid_, &from.steamid_,
    reinterpret_cast<char*>(&messageid_) -
    reinterpret_cast<char*>(&steamid_) + sizeof(messageid_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgProtoBufHeader)
}

void CMsgProtoBufHeader::SharedCtor() {
  _cached_size_ = 0;
  target_job_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&steamid_, 0, reinterpret_cast<char*>(&webapi_key_id_) -
    reinterpret_cast<char*>(&steamid_) + sizeof(webapi_key_id_));
  jobid_source_ = GOOGLE_ULONGLONG(18446744073709551615);
  jobid_target_ = GOOGLE_ULONGLONG(18446744073709551615);
  eresult_ = 2;
  transport_error_ = 1;
  messageid_ = GOOGLE_ULONGLONG(18446744073709551615);
}

CMsgProtoBufHeader::~CMsgProtoBufHeader() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgProtoBufHeader)
  SharedDtor();
}

void CMsgProtoBufHeader::SharedDtor() {
  target_job_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgProtoBufHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgProtoBufHeader::descriptor() {
  protobuf_steammessages_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgProtoBufHeader& CMsgProtoBufHeader::default_instance() {
  protobuf_steammessages_5fbase_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgProtoBufHeader* CMsgProtoBufHeader::New(::google::protobuf::Arena* arena) const {
  CMsgProtoBufHeader* n = new CMsgProtoBufHeader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgProtoBufHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgProtoBufHeader)
  forward_to_sysid_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_target_job_name()) {
      GOOGLE_DCHECK(!target_job_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*target_job_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_error_message()) {
      GOOGLE_DCHECK(!error_message_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*error_message_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 252u) {
    ::memset(&steamid_, 0, reinterpret_cast<char*>(&publisher_group_id_) -
      reinterpret_cast<char*>(&steamid_) + sizeof(publisher_group_id_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&sysid_, 0, reinterpret_cast<char*>(&webapi_key_id_) -
      reinterpret_cast<char*>(&sysid_) + sizeof(webapi_key_id_));
    jobid_source_ = GOOGLE_ULONGLONG(18446744073709551615);
  }
  if (_has_bits_[16 / 32] & 983040u) {
    jobid_target_ = GOOGLE_ULONGLONG(18446744073709551615);
    eresult_ = 2;
    transport_error_ = 1;
    messageid_ = GOOGLE_ULONGLONG(18446744073709551615);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgProtoBufHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgProtoBufHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 client_sessionid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_client_sessionid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_sessionid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 routing_appid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_routing_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &routing_appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 jobid_source = 10 [default = 18446744073709551615];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u)) {
          set_has_jobid_source();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &jobid_source_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 jobid_target = 11 [default = 18446744073709551615];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u)) {
          set_has_jobid_target();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &jobid_target_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string target_job_name = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_target_job_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->target_job_name().data(), this->target_job_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgProtoBufHeader.target_job_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 eresult = 13 [default = 2];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_eresult();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string error_message = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error_message().data(), this->error_message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgProtoBufHeader.error_message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ip = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          set_has_ip();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 auth_account_flags = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u)) {
          set_has_auth_account_flags();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &auth_account_flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 transport_error = 17 [default = 1];
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u)) {
          set_has_transport_error();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &transport_error_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 messageid = 18 [default = 18446744073709551615];
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u)) {
          set_has_messageid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &messageid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 publisher_group_id = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u)) {
          set_has_publisher_group_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &publisher_group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 sysid = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u)) {
          set_has_sysid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sysid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 trace_tag = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u)) {
          set_has_trace_tag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &trace_tag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 token_source = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u)) {
          set_has_token_source();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &token_source_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool admin_spoofing_user = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u)) {
          set_has_admin_spoofing_user();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &admin_spoofing_user_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 seq_num = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u)) {
          set_has_seq_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seq_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 webapi_key_id = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u)) {
          set_has_webapi_key_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &webapi_key_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_from_external_source = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u)) {
          set_has_is_from_external_source();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_from_external_source_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 forward_to_sysid = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 216u, input, this->mutable_forward_to_sysid())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(218u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_forward_to_sysid())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgProtoBufHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgProtoBufHeader)
  return false;
#undef DO_
}

void CMsgProtoBufHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgProtoBufHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional int32 client_sessionid = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->client_sessionid(), output);
  }

  // optional uint32 routing_appid = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->routing_appid(), output);
  }

  // optional fixed64 jobid_source = 10 [default = 18446744073709551615];
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(10, this->jobid_source(), output);
  }

  // optional fixed64 jobid_target = 11 [default = 18446744073709551615];
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(11, this->jobid_target(), output);
  }

  // optional string target_job_name = 12;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->target_job_name().data(), this->target_job_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgProtoBufHeader.target_job_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->target_job_name(), output);
  }

  // optional int32 eresult = 13 [default = 2];
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->eresult(), output);
  }

  // optional string error_message = 14;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_message().data(), this->error_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgProtoBufHeader.error_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->error_message(), output);
  }

  // optional uint32 ip = 15;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->ip(), output);
  }

  // optional uint32 auth_account_flags = 16;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->auth_account_flags(), output);
  }

  // optional int32 transport_error = 17 [default = 1];
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->transport_error(), output);
  }

  // optional uint64 messageid = 18 [default = 18446744073709551615];
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(18, this->messageid(), output);
  }

  // optional uint32 publisher_group_id = 19;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->publisher_group_id(), output);
  }

  // optional uint32 sysid = 20;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->sysid(), output);
  }

  // optional uint64 trace_tag = 21;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(21, this->trace_tag(), output);
  }

  // optional uint32 token_source = 22;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->token_source(), output);
  }

  // optional bool admin_spoofing_user = 23;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->admin_spoofing_user(), output);
  }

  // optional int32 seq_num = 24;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->seq_num(), output);
  }

  // optional uint32 webapi_key_id = 25;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->webapi_key_id(), output);
  }

  // optional bool is_from_external_source = 26;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(26, this->is_from_external_source(), output);
  }

  // repeated uint32 forward_to_sysid = 27;
  for (int i = 0, n = this->forward_to_sysid_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      27, this->forward_to_sysid(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgProtoBufHeader)
}

::google::protobuf::uint8* CMsgProtoBufHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgProtoBufHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional int32 client_sessionid = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->client_sessionid(), target);
  }

  // optional uint32 routing_appid = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->routing_appid(), target);
  }

  // optional fixed64 jobid_source = 10 [default = 18446744073709551615];
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(10, this->jobid_source(), target);
  }

  // optional fixed64 jobid_target = 11 [default = 18446744073709551615];
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(11, this->jobid_target(), target);
  }

  // optional string target_job_name = 12;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->target_job_name().data(), this->target_job_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgProtoBufHeader.target_job_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->target_job_name(), target);
  }

  // optional int32 eresult = 13 [default = 2];
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->eresult(), target);
  }

  // optional string error_message = 14;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_message().data(), this->error_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgProtoBufHeader.error_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->error_message(), target);
  }

  // optional uint32 ip = 15;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->ip(), target);
  }

  // optional uint32 auth_account_flags = 16;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->auth_account_flags(), target);
  }

  // optional int32 transport_error = 17 [default = 1];
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->transport_error(), target);
  }

  // optional uint64 messageid = 18 [default = 18446744073709551615];
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(18, this->messageid(), target);
  }

  // optional uint32 publisher_group_id = 19;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->publisher_group_id(), target);
  }

  // optional uint32 sysid = 20;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->sysid(), target);
  }

  // optional uint64 trace_tag = 21;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(21, this->trace_tag(), target);
  }

  // optional uint32 token_source = 22;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->token_source(), target);
  }

  // optional bool admin_spoofing_user = 23;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->admin_spoofing_user(), target);
  }

  // optional int32 seq_num = 24;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->seq_num(), target);
  }

  // optional uint32 webapi_key_id = 25;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->webapi_key_id(), target);
  }

  // optional bool is_from_external_source = 26;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(26, this->is_from_external_source(), target);
  }

  // repeated uint32 forward_to_sysid = 27;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(27, this->forward_to_sysid_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgProtoBufHeader)
  return target;
}

size_t CMsgProtoBufHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgProtoBufHeader)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 forward_to_sysid = 27;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->forward_to_sysid_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->forward_to_sysid_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string target_job_name = 12;
    if (has_target_job_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->target_job_name());
    }

    // optional string error_message = 14;
    if (has_error_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_message());
    }

    // optional fixed64 steamid = 1;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional int32 client_sessionid = 2;
    if (has_client_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client_sessionid());
    }

    // optional uint32 routing_appid = 3;
    if (has_routing_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->routing_appid());
    }

    // optional uint32 ip = 15;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ip());
    }

    // optional uint32 auth_account_flags = 16;
    if (has_auth_account_flags()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->auth_account_flags());
    }

    // optional uint32 publisher_group_id = 19;
    if (has_publisher_group_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->publisher_group_id());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint32 sysid = 20;
    if (has_sysid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sysid());
    }

    // optional uint64 trace_tag = 21;
    if (has_trace_tag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->trace_tag());
    }

    // optional uint32 token_source = 22;
    if (has_token_source()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->token_source());
    }

    // optional int32 seq_num = 24;
    if (has_seq_num()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seq_num());
    }

    // optional bool admin_spoofing_user = 23;
    if (has_admin_spoofing_user()) {
      total_size += 2 + 1;
    }

    // optional bool is_from_external_source = 26;
    if (has_is_from_external_source()) {
      total_size += 2 + 1;
    }

    // optional uint32 webapi_key_id = 25;
    if (has_webapi_key_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->webapi_key_id());
    }

    // optional fixed64 jobid_source = 10 [default = 18446744073709551615];
    if (has_jobid_source()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[16 / 32] & 983040u) {
    // optional fixed64 jobid_target = 11 [default = 18446744073709551615];
    if (has_jobid_target()) {
      total_size += 1 + 8;
    }

    // optional int32 eresult = 13 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eresult());
    }

    // optional int32 transport_error = 17 [default = 1];
    if (has_transport_error()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->transport_error());
    }

    // optional uint64 messageid = 18 [default = 18446744073709551615];
    if (has_messageid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->messageid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgProtoBufHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgProtoBufHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgProtoBufHeader* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgProtoBufHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgProtoBufHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgProtoBufHeader)
    MergeFrom(*source);
  }
}

void CMsgProtoBufHeader::MergeFrom(const CMsgProtoBufHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgProtoBufHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  forward_to_sysid_.MergeFrom(from.forward_to_sysid_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_target_job_name();
      target_job_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.target_job_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_error_message();
      error_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_message_);
    }
    if (cached_has_bits & 0x00000004u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000008u) {
      client_sessionid_ = from.client_sessionid_;
    }
    if (cached_has_bits & 0x00000010u) {
      routing_appid_ = from.routing_appid_;
    }
    if (cached_has_bits & 0x00000020u) {
      ip_ = from.ip_;
    }
    if (cached_has_bits & 0x00000040u) {
      auth_account_flags_ = from.auth_account_flags_;
    }
    if (cached_has_bits & 0x00000080u) {
      publisher_group_id_ = from.publisher_group_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      sysid_ = from.sysid_;
    }
    if (cached_has_bits & 0x00000200u) {
      trace_tag_ = from.trace_tag_;
    }
    if (cached_has_bits & 0x00000400u) {
      token_source_ = from.token_source_;
    }
    if (cached_has_bits & 0x00000800u) {
      seq_num_ = from.seq_num_;
    }
    if (cached_has_bits & 0x00001000u) {
      admin_spoofing_user_ = from.admin_spoofing_user_;
    }
    if (cached_has_bits & 0x00002000u) {
      is_from_external_source_ = from.is_from_external_source_;
    }
    if (cached_has_bits & 0x00004000u) {
      webapi_key_id_ = from.webapi_key_id_;
    }
    if (cached_has_bits & 0x00008000u) {
      jobid_source_ = from.jobid_source_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 983040u) {
    if (cached_has_bits & 0x00010000u) {
      jobid_target_ = from.jobid_target_;
    }
    if (cached_has_bits & 0x00020000u) {
      eresult_ = from.eresult_;
    }
    if (cached_has_bits & 0x00040000u) {
      transport_error_ = from.transport_error_;
    }
    if (cached_has_bits & 0x00080000u) {
      messageid_ = from.messageid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgProtoBufHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgProtoBufHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgProtoBufHeader::CopyFrom(const CMsgProtoBufHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgProtoBufHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgProtoBufHeader::IsInitialized() const {
  return true;
}

void CMsgProtoBufHeader::Swap(CMsgProtoBufHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgProtoBufHeader::InternalSwap(CMsgProtoBufHeader* other) {
  forward_to_sysid_.InternalSwap(&other->forward_to_sysid_);
  target_job_name_.Swap(&other->target_job_name_);
  error_message_.Swap(&other->error_message_);
  std::swap(steamid_, other->steamid_);
  std::swap(client_sessionid_, other->client_sessionid_);
  std::swap(routing_appid_, other->routing_appid_);
  std::swap(ip_, other->ip_);
  std::swap(auth_account_flags_, other->auth_account_flags_);
  std::swap(publisher_group_id_, other->publisher_group_id_);
  std::swap(sysid_, other->sysid_);
  std::swap(trace_tag_, other->trace_tag_);
  std::swap(token_source_, other->token_source_);
  std::swap(seq_num_, other->seq_num_);
  std::swap(admin_spoofing_user_, other->admin_spoofing_user_);
  std::swap(is_from_external_source_, other->is_from_external_source_);
  std::swap(webapi_key_id_, other->webapi_key_id_);
  std::swap(jobid_source_, other->jobid_source_);
  std::swap(jobid_target_, other->jobid_target_);
  std::swap(eresult_, other->eresult_);
  std::swap(transport_error_, other->transport_error_);
  std::swap(messageid_, other->messageid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgProtoBufHeader::GetMetadata() const {
  protobuf_steammessages_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgProtoBufHeader

// optional fixed64 steamid = 1;
bool CMsgProtoBufHeader::has_steamid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgProtoBufHeader::set_has_steamid() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgProtoBufHeader::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgProtoBufHeader::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
::google::protobuf::uint64 CMsgProtoBufHeader::steamid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgProtoBufHeader.steamid)
  return steamid_;
}
void CMsgProtoBufHeader::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgProtoBufHeader.steamid)
}

// optional int32 client_sessionid = 2;
bool CMsgProtoBufHeader::has_client_sessionid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgProtoBufHeader::set_has_client_sessionid() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgProtoBufHeader::clear_has_client_sessionid() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgProtoBufHeader::clear_client_sessionid() {
  client_sessionid_ = 0;
  clear_has_client_sessionid();
}
::google::protobuf::int32 CMsgProtoBufHeader::client_sessionid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgProtoBufHeader.client_sessionid)
  return client_sessionid_;
}
void CMsgProtoBufHeader::set_client_sessionid(::google::protobuf::int32 value) {
  set_has_client_sessionid();
  client_sessionid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgProtoBufHeader.client_sessionid)
}

// optional uint32 routing_appid = 3;
bool CMsgProtoBufHeader::has_routing_appid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgProtoBufHeader::set_has_routing_appid() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgProtoBufHeader::clear_has_routing_appid() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgProtoBufHeader::clear_routing_appid() {
  routing_appid_ = 0u;
  clear_has_routing_appid();
}
::google::protobuf::uint32 CMsgProtoBufHeader::routing_appid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgProtoBufHeader.routing_appid)
  return routing_appid_;
}
void CMsgProtoBufHeader::set_routing_appid(::google::protobuf::uint32 value) {
  set_has_routing_appid();
  routing_appid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgProtoBufHeader.routing_appid)
}

// optional fixed64 jobid_source = 10 [default = 18446744073709551615];
bool CMsgProtoBufHeader::has_jobid_source() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void CMsgProtoBufHeader::set_has_jobid_source() {
  _has_bits_[0] |= 0x00008000u;
}
void CMsgProtoBufHeader::clear_has_jobid_source() {
  _has_bits_[0] &= ~0x00008000u;
}
void CMsgProtoBufHeader::clear_jobid_source() {
  jobid_source_ = GOOGLE_ULONGLONG(18446744073709551615);
  clear_has_jobid_source();
}
::google::protobuf::uint64 CMsgProtoBufHeader::jobid_source() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgProtoBufHeader.jobid_source)
  return jobid_source_;
}
void CMsgProtoBufHeader::set_jobid_source(::google::protobuf::uint64 value) {
  set_has_jobid_source();
  jobid_source_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgProtoBufHeader.jobid_source)
}

// optional fixed64 jobid_target = 11 [default = 18446744073709551615];
bool CMsgProtoBufHeader::has_jobid_target() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void CMsgProtoBufHeader::set_has_jobid_target() {
  _has_bits_[0] |= 0x00010000u;
}
void CMsgProtoBufHeader::clear_has_jobid_target() {
  _has_bits_[0] &= ~0x00010000u;
}
void CMsgProtoBufHeader::clear_jobid_target() {
  jobid_target_ = GOOGLE_ULONGLONG(18446744073709551615);
  clear_has_jobid_target();
}
::google::protobuf::uint64 CMsgProtoBufHeader::jobid_target() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgProtoBufHeader.jobid_target)
  return jobid_target_;
}
void CMsgProtoBufHeader::set_jobid_target(::google::protobuf::uint64 value) {
  set_has_jobid_target();
  jobid_target_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgProtoBufHeader.jobid_target)
}

// optional string target_job_name = 12;
bool CMsgProtoBufHeader::has_target_job_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgProtoBufHeader::set_has_target_job_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgProtoBufHeader::clear_has_target_job_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgProtoBufHeader::clear_target_job_name() {
  target_job_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_target_job_name();
}
const ::std::string& CMsgProtoBufHeader::target_job_name() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgProtoBufHeader.target_job_name)
  return target_job_name_.GetNoArena();
}
void CMsgProtoBufHeader::set_target_job_name(const ::std::string& value) {
  set_has_target_job_name();
  target_job_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgProtoBufHeader.target_job_name)
}
#if LANG_CXX11
void CMsgProtoBufHeader::set_target_job_name(::std::string&& value) {
  set_has_target_job_name();
  target_job_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgProtoBufHeader.target_job_name)
}
#endif
void CMsgProtoBufHeader::set_target_job_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_target_job_name();
  target_job_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgProtoBufHeader.target_job_name)
}
void CMsgProtoBufHeader::set_target_job_name(const char* value, size_t size) {
  set_has_target_job_name();
  target_job_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgProtoBufHeader.target_job_name)
}
::std::string* CMsgProtoBufHeader::mutable_target_job_name() {
  set_has_target_job_name();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgProtoBufHeader.target_job_name)
  return target_job_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgProtoBufHeader::release_target_job_name() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgProtoBufHeader.target_job_name)
  clear_has_target_job_name();
  return target_job_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgProtoBufHeader::set_allocated_target_job_name(::std::string* target_job_name) {
  if (target_job_name != NULL) {
    set_has_target_job_name();
  } else {
    clear_has_target_job_name();
  }
  target_job_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), target_job_name);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgProtoBufHeader.target_job_name)
}

// optional int32 seq_num = 24;
bool CMsgProtoBufHeader::has_seq_num() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CMsgProtoBufHeader::set_has_seq_num() {
  _has_bits_[0] |= 0x00000800u;
}
void CMsgProtoBufHeader::clear_has_seq_num() {
  _has_bits_[0] &= ~0x00000800u;
}
void CMsgProtoBufHeader::clear_seq_num() {
  seq_num_ = 0;
  clear_has_seq_num();
}
::google::protobuf::int32 CMsgProtoBufHeader::seq_num() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgProtoBufHeader.seq_num)
  return seq_num_;
}
void CMsgProtoBufHeader::set_seq_num(::google::protobuf::int32 value) {
  set_has_seq_num();
  seq_num_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgProtoBufHeader.seq_num)
}

// optional int32 eresult = 13 [default = 2];
bool CMsgProtoBufHeader::has_eresult() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void CMsgProtoBufHeader::set_has_eresult() {
  _has_bits_[0] |= 0x00020000u;
}
void CMsgProtoBufHeader::clear_has_eresult() {
  _has_bits_[0] &= ~0x00020000u;
}
void CMsgProtoBufHeader::clear_eresult() {
  eresult_ = 2;
  clear_has_eresult();
}
::google::protobuf::int32 CMsgProtoBufHeader::eresult() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgProtoBufHeader.eresult)
  return eresult_;
}
void CMsgProtoBufHeader::set_eresult(::google::protobuf::int32 value) {
  set_has_eresult();
  eresult_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgProtoBufHeader.eresult)
}

// optional string error_message = 14;
bool CMsgProtoBufHeader::has_error_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgProtoBufHeader::set_has_error_message() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgProtoBufHeader::clear_has_error_message() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgProtoBufHeader::clear_error_message() {
  error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error_message();
}
const ::std::string& CMsgProtoBufHeader::error_message() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgProtoBufHeader.error_message)
  return error_message_.GetNoArena();
}
void CMsgProtoBufHeader::set_error_message(const ::std::string& value) {
  set_has_error_message();
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgProtoBufHeader.error_message)
}
#if LANG_CXX11
void CMsgProtoBufHeader::set_error_message(::std::string&& value) {
  set_has_error_message();
  error_message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgProtoBufHeader.error_message)
}
#endif
void CMsgProtoBufHeader::set_error_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_error_message();
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgProtoBufHeader.error_message)
}
void CMsgProtoBufHeader::set_error_message(const char* value, size_t size) {
  set_has_error_message();
  error_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgProtoBufHeader.error_message)
}
::std::string* CMsgProtoBufHeader::mutable_error_message() {
  set_has_error_message();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgProtoBufHeader.error_message)
  return error_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgProtoBufHeader::release_error_message() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgProtoBufHeader.error_message)
  clear_has_error_message();
  return error_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgProtoBufHeader::set_allocated_error_message(::std::string* error_message) {
  if (error_message != NULL) {
    set_has_error_message();
  } else {
    clear_has_error_message();
  }
  error_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_message);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgProtoBufHeader.error_message)
}

// optional uint32 ip = 15;
bool CMsgProtoBufHeader::has_ip() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgProtoBufHeader::set_has_ip() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgProtoBufHeader::clear_has_ip() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgProtoBufHeader::clear_ip() {
  ip_ = 0u;
  clear_has_ip();
}
::google::protobuf::uint32 CMsgProtoBufHeader::ip() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgProtoBufHeader.ip)
  return ip_;
}
void CMsgProtoBufHeader::set_ip(::google::protobuf::uint32 value) {
  set_has_ip();
  ip_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgProtoBufHeader.ip)
}

// optional uint32 auth_account_flags = 16;
bool CMsgProtoBufHeader::has_auth_account_flags() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgProtoBufHeader::set_has_auth_account_flags() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgProtoBufHeader::clear_has_auth_account_flags() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgProtoBufHeader::clear_auth_account_flags() {
  auth_account_flags_ = 0u;
  clear_has_auth_account_flags();
}
::google::protobuf::uint32 CMsgProtoBufHeader::auth_account_flags() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgProtoBufHeader.auth_account_flags)
  return auth_account_flags_;
}
void CMsgProtoBufHeader::set_auth_account_flags(::google::protobuf::uint32 value) {
  set_has_auth_account_flags();
  auth_account_flags_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgProtoBufHeader.auth_account_flags)
}

// optional uint32 token_source = 22;
bool CMsgProtoBufHeader::has_token_source() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CMsgProtoBufHeader::set_has_token_source() {
  _has_bits_[0] |= 0x00000400u;
}
void CMsgProtoBufHeader::clear_has_token_source() {
  _has_bits_[0] &= ~0x00000400u;
}
void CMsgProtoBufHeader::clear_token_source() {
  token_source_ = 0u;
  clear_has_token_source();
}
::google::protobuf::uint32 CMsgProtoBufHeader::token_source() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgProtoBufHeader.token_source)
  return token_source_;
}
void CMsgProtoBufHeader::set_token_source(::google::protobuf::uint32 value) {
  set_has_token_source();
  token_source_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgProtoBufHeader.token_source)
}

// optional bool admin_spoofing_user = 23;
bool CMsgProtoBufHeader::has_admin_spoofing_user() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void CMsgProtoBufHeader::set_has_admin_spoofing_user() {
  _has_bits_[0] |= 0x00001000u;
}
void CMsgProtoBufHeader::clear_has_admin_spoofing_user() {
  _has_bits_[0] &= ~0x00001000u;
}
void CMsgProtoBufHeader::clear_admin_spoofing_user() {
  admin_spoofing_user_ = false;
  clear_has_admin_spoofing_user();
}
bool CMsgProtoBufHeader::admin_spoofing_user() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgProtoBufHeader.admin_spoofing_user)
  return admin_spoofing_user_;
}
void CMsgProtoBufHeader::set_admin_spoofing_user(bool value) {
  set_has_admin_spoofing_user();
  admin_spoofing_user_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgProtoBufHeader.admin_spoofing_user)
}

// optional int32 transport_error = 17 [default = 1];
bool CMsgProtoBufHeader::has_transport_error() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void CMsgProtoBufHeader::set_has_transport_error() {
  _has_bits_[0] |= 0x00040000u;
}
void CMsgProtoBufHeader::clear_has_transport_error() {
  _has_bits_[0] &= ~0x00040000u;
}
void CMsgProtoBufHeader::clear_transport_error() {
  transport_error_ = 1;
  clear_has_transport_error();
}
::google::protobuf::int32 CMsgProtoBufHeader::transport_error() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgProtoBufHeader.transport_error)
  return transport_error_;
}
void CMsgProtoBufHeader::set_transport_error(::google::protobuf::int32 value) {
  set_has_transport_error();
  transport_error_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgProtoBufHeader.transport_error)
}

// optional uint64 messageid = 18 [default = 18446744073709551615];
bool CMsgProtoBufHeader::has_messageid() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void CMsgProtoBufHeader::set_has_messageid() {
  _has_bits_[0] |= 0x00080000u;
}
void CMsgProtoBufHeader::clear_has_messageid() {
  _has_bits_[0] &= ~0x00080000u;
}
void CMsgProtoBufHeader::clear_messageid() {
  messageid_ = GOOGLE_ULONGLONG(18446744073709551615);
  clear_has_messageid();
}
::google::protobuf::uint64 CMsgProtoBufHeader::messageid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgProtoBufHeader.messageid)
  return messageid_;
}
void CMsgProtoBufHeader::set_messageid(::google::protobuf::uint64 value) {
  set_has_messageid();
  messageid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgProtoBufHeader.messageid)
}

// optional uint32 publisher_group_id = 19;
bool CMsgProtoBufHeader::has_publisher_group_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgProtoBufHeader::set_has_publisher_group_id() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgProtoBufHeader::clear_has_publisher_group_id() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgProtoBufHeader::clear_publisher_group_id() {
  publisher_group_id_ = 0u;
  clear_has_publisher_group_id();
}
::google::protobuf::uint32 CMsgProtoBufHeader::publisher_group_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgProtoBufHeader.publisher_group_id)
  return publisher_group_id_;
}
void CMsgProtoBufHeader::set_publisher_group_id(::google::protobuf::uint32 value) {
  set_has_publisher_group_id();
  publisher_group_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgProtoBufHeader.publisher_group_id)
}

// optional uint32 sysid = 20;
bool CMsgProtoBufHeader::has_sysid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CMsgProtoBufHeader::set_has_sysid() {
  _has_bits_[0] |= 0x00000100u;
}
void CMsgProtoBufHeader::clear_has_sysid() {
  _has_bits_[0] &= ~0x00000100u;
}
void CMsgProtoBufHeader::clear_sysid() {
  sysid_ = 0u;
  clear_has_sysid();
}
::google::protobuf::uint32 CMsgProtoBufHeader::sysid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgProtoBufHeader.sysid)
  return sysid_;
}
void CMsgProtoBufHeader::set_sysid(::google::protobuf::uint32 value) {
  set_has_sysid();
  sysid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgProtoBufHeader.sysid)
}

// optional uint64 trace_tag = 21;
bool CMsgProtoBufHeader::has_trace_tag() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CMsgProtoBufHeader::set_has_trace_tag() {
  _has_bits_[0] |= 0x00000200u;
}
void CMsgProtoBufHeader::clear_has_trace_tag() {
  _has_bits_[0] &= ~0x00000200u;
}
void CMsgProtoBufHeader::clear_trace_tag() {
  trace_tag_ = GOOGLE_ULONGLONG(0);
  clear_has_trace_tag();
}
::google::protobuf::uint64 CMsgProtoBufHeader::trace_tag() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgProtoBufHeader.trace_tag)
  return trace_tag_;
}
void CMsgProtoBufHeader::set_trace_tag(::google::protobuf::uint64 value) {
  set_has_trace_tag();
  trace_tag_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgProtoBufHeader.trace_tag)
}

// optional uint32 webapi_key_id = 25;
bool CMsgProtoBufHeader::has_webapi_key_id() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void CMsgProtoBufHeader::set_has_webapi_key_id() {
  _has_bits_[0] |= 0x00004000u;
}
void CMsgProtoBufHeader::clear_has_webapi_key_id() {
  _has_bits_[0] &= ~0x00004000u;
}
void CMsgProtoBufHeader::clear_webapi_key_id() {
  webapi_key_id_ = 0u;
  clear_has_webapi_key_id();
}
::google::protobuf::uint32 CMsgProtoBufHeader::webapi_key_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgProtoBufHeader.webapi_key_id)
  return webapi_key_id_;
}
void CMsgProtoBufHeader::set_webapi_key_id(::google::protobuf::uint32 value) {
  set_has_webapi_key_id();
  webapi_key_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgProtoBufHeader.webapi_key_id)
}

// optional bool is_from_external_source = 26;
bool CMsgProtoBufHeader::has_is_from_external_source() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void CMsgProtoBufHeader::set_has_is_from_external_source() {
  _has_bits_[0] |= 0x00002000u;
}
void CMsgProtoBufHeader::clear_has_is_from_external_source() {
  _has_bits_[0] &= ~0x00002000u;
}
void CMsgProtoBufHeader::clear_is_from_external_source() {
  is_from_external_source_ = false;
  clear_has_is_from_external_source();
}
bool CMsgProtoBufHeader::is_from_external_source() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgProtoBufHeader.is_from_external_source)
  return is_from_external_source_;
}
void CMsgProtoBufHeader::set_is_from_external_source(bool value) {
  set_has_is_from_external_source();
  is_from_external_source_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgProtoBufHeader.is_from_external_source)
}

// repeated uint32 forward_to_sysid = 27;
int CMsgProtoBufHeader::forward_to_sysid_size() const {
  return forward_to_sysid_.size();
}
void CMsgProtoBufHeader::clear_forward_to_sysid() {
  forward_to_sysid_.Clear();
}
::google::protobuf::uint32 CMsgProtoBufHeader::forward_to_sysid(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgProtoBufHeader.forward_to_sysid)
  return forward_to_sysid_.Get(index);
}
void CMsgProtoBufHeader::set_forward_to_sysid(int index, ::google::protobuf::uint32 value) {
  forward_to_sysid_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgProtoBufHeader.forward_to_sysid)
}
void CMsgProtoBufHeader::add_forward_to_sysid(::google::protobuf::uint32 value) {
  forward_to_sysid_.Add(value);
  // @@protoc_insertion_point(field_add:proto.steam.CMsgProtoBufHeader.forward_to_sysid)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgProtoBufHeader::forward_to_sysid() const {
  // @@protoc_insertion_point(field_list:proto.steam.CMsgProtoBufHeader.forward_to_sysid)
  return forward_to_sysid_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgProtoBufHeader::mutable_forward_to_sysid() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CMsgProtoBufHeader.forward_to_sysid)
  return &forward_to_sysid_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgMulti::kSizeUnzippedFieldNumber;
const int CMsgMulti::kMessageBodyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgMulti::CMsgMulti()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fbase_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgMulti)
}
CMsgMulti::CMsgMulti(const CMsgMulti& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_message_body()) {
    message_body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_body_);
  }
  size_unzipped_ = from.size_unzipped_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgMulti)
}

void CMsgMulti::SharedCtor() {
  _cached_size_ = 0;
  message_body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  size_unzipped_ = 0u;
}

CMsgMulti::~CMsgMulti() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgMulti)
  SharedDtor();
}

void CMsgMulti::SharedDtor() {
  message_body_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgMulti::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgMulti::descriptor() {
  protobuf_steammessages_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgMulti& CMsgMulti::default_instance() {
  protobuf_steammessages_5fbase_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgMulti* CMsgMulti::New(::google::protobuf::Arena* arena) const {
  CMsgMulti* n = new CMsgMulti;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgMulti::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgMulti)
  if (has_message_body()) {
    GOOGLE_DCHECK(!message_body_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*message_body_.UnsafeRawStringPointer())->clear();
  }
  size_unzipped_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgMulti::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgMulti)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 size_unzipped = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_size_unzipped();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_unzipped_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes message_body = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_message_body()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgMulti)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgMulti)
  return false;
#undef DO_
}

void CMsgMulti::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgMulti)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 size_unzipped = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->size_unzipped(), output);
  }

  // optional bytes message_body = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->message_body(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgMulti)
}

::google::protobuf::uint8* CMsgMulti::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgMulti)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 size_unzipped = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->size_unzipped(), target);
  }

  // optional bytes message_body = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->message_body(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgMulti)
  return target;
}

size_t CMsgMulti::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgMulti)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes message_body = 2;
    if (has_message_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->message_body());
    }

    // optional uint32 size_unzipped = 1;
    if (has_size_unzipped()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->size_unzipped());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgMulti::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgMulti)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgMulti* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgMulti>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgMulti)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgMulti)
    MergeFrom(*source);
  }
}

void CMsgMulti::MergeFrom(const CMsgMulti& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgMulti)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_message_body();
      message_body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_body_);
    }
    if (cached_has_bits & 0x00000002u) {
      size_unzipped_ = from.size_unzipped_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgMulti::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgMulti)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgMulti::CopyFrom(const CMsgMulti& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgMulti)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMulti::IsInitialized() const {
  return true;
}

void CMsgMulti::Swap(CMsgMulti* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgMulti::InternalSwap(CMsgMulti* other) {
  message_body_.Swap(&other->message_body_);
  std::swap(size_unzipped_, other->size_unzipped_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgMulti::GetMetadata() const {
  protobuf_steammessages_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgMulti

// optional uint32 size_unzipped = 1;
bool CMsgMulti::has_size_unzipped() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgMulti::set_has_size_unzipped() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgMulti::clear_has_size_unzipped() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgMulti::clear_size_unzipped() {
  size_unzipped_ = 0u;
  clear_has_size_unzipped();
}
::google::protobuf::uint32 CMsgMulti::size_unzipped() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgMulti.size_unzipped)
  return size_unzipped_;
}
void CMsgMulti::set_size_unzipped(::google::protobuf::uint32 value) {
  set_has_size_unzipped();
  size_unzipped_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgMulti.size_unzipped)
}

// optional bytes message_body = 2;
bool CMsgMulti::has_message_body() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgMulti::set_has_message_body() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgMulti::clear_has_message_body() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgMulti::clear_message_body() {
  message_body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message_body();
}
const ::std::string& CMsgMulti::message_body() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgMulti.message_body)
  return message_body_.GetNoArena();
}
void CMsgMulti::set_message_body(const ::std::string& value) {
  set_has_message_body();
  message_body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgMulti.message_body)
}
#if LANG_CXX11
void CMsgMulti::set_message_body(::std::string&& value) {
  set_has_message_body();
  message_body_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgMulti.message_body)
}
#endif
void CMsgMulti::set_message_body(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_message_body();
  message_body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgMulti.message_body)
}
void CMsgMulti::set_message_body(const void* value, size_t size) {
  set_has_message_body();
  message_body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgMulti.message_body)
}
::std::string* CMsgMulti::mutable_message_body() {
  set_has_message_body();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgMulti.message_body)
  return message_body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgMulti::release_message_body() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgMulti.message_body)
  clear_has_message_body();
  return message_body_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgMulti::set_allocated_message_body(::std::string* message_body) {
  if (message_body != NULL) {
    set_has_message_body();
  } else {
    clear_has_message_body();
  }
  message_body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message_body);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgMulti.message_body)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgProtobufWrapped::kMessageBodyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgProtobufWrapped::CMsgProtobufWrapped()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fbase_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgProtobufWrapped)
}
CMsgProtobufWrapped::CMsgProtobufWrapped(const CMsgProtobufWrapped& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_message_body()) {
    message_body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_body_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgProtobufWrapped)
}

void CMsgProtobufWrapped::SharedCtor() {
  _cached_size_ = 0;
  message_body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CMsgProtobufWrapped::~CMsgProtobufWrapped() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgProtobufWrapped)
  SharedDtor();
}

void CMsgProtobufWrapped::SharedDtor() {
  message_body_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgProtobufWrapped::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgProtobufWrapped::descriptor() {
  protobuf_steammessages_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgProtobufWrapped& CMsgProtobufWrapped::default_instance() {
  protobuf_steammessages_5fbase_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgProtobufWrapped* CMsgProtobufWrapped::New(::google::protobuf::Arena* arena) const {
  CMsgProtobufWrapped* n = new CMsgProtobufWrapped;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgProtobufWrapped::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgProtobufWrapped)
  if (has_message_body()) {
    GOOGLE_DCHECK(!message_body_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*message_body_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgProtobufWrapped::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgProtobufWrapped)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes message_body = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_message_body()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgProtobufWrapped)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgProtobufWrapped)
  return false;
#undef DO_
}

void CMsgProtobufWrapped::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgProtobufWrapped)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes message_body = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->message_body(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgProtobufWrapped)
}

::google::protobuf::uint8* CMsgProtobufWrapped::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgProtobufWrapped)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes message_body = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->message_body(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgProtobufWrapped)
  return target;
}

size_t CMsgProtobufWrapped::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgProtobufWrapped)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional bytes message_body = 1;
  if (has_message_body()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->message_body());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgProtobufWrapped::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgProtobufWrapped)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgProtobufWrapped* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgProtobufWrapped>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgProtobufWrapped)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgProtobufWrapped)
    MergeFrom(*source);
  }
}

void CMsgProtobufWrapped::MergeFrom(const CMsgProtobufWrapped& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgProtobufWrapped)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_message_body()) {
    set_has_message_body();
    message_body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_body_);
  }
}

void CMsgProtobufWrapped::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgProtobufWrapped)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgProtobufWrapped::CopyFrom(const CMsgProtobufWrapped& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgProtobufWrapped)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgProtobufWrapped::IsInitialized() const {
  return true;
}

void CMsgProtobufWrapped::Swap(CMsgProtobufWrapped* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgProtobufWrapped::InternalSwap(CMsgProtobufWrapped* other) {
  message_body_.Swap(&other->message_body_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgProtobufWrapped::GetMetadata() const {
  protobuf_steammessages_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgProtobufWrapped

// optional bytes message_body = 1;
bool CMsgProtobufWrapped::has_message_body() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgProtobufWrapped::set_has_message_body() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgProtobufWrapped::clear_has_message_body() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgProtobufWrapped::clear_message_body() {
  message_body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message_body();
}
const ::std::string& CMsgProtobufWrapped::message_body() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgProtobufWrapped.message_body)
  return message_body_.GetNoArena();
}
void CMsgProtobufWrapped::set_message_body(const ::std::string& value) {
  set_has_message_body();
  message_body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgProtobufWrapped.message_body)
}
#if LANG_CXX11
void CMsgProtobufWrapped::set_message_body(::std::string&& value) {
  set_has_message_body();
  message_body_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgProtobufWrapped.message_body)
}
#endif
void CMsgProtobufWrapped::set_message_body(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_message_body();
  message_body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgProtobufWrapped.message_body)
}
void CMsgProtobufWrapped::set_message_body(const void* value, size_t size) {
  set_has_message_body();
  message_body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgProtobufWrapped.message_body)
}
::std::string* CMsgProtobufWrapped::mutable_message_body() {
  set_has_message_body();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgProtobufWrapped.message_body)
  return message_body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgProtobufWrapped::release_message_body() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgProtobufWrapped.message_body)
  clear_has_message_body();
  return message_body_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgProtobufWrapped::set_allocated_message_body(::std::string* message_body) {
  if (message_body != NULL) {
    set_has_message_body();
  } else {
    clear_has_message_body();
  }
  message_body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message_body);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgProtobufWrapped.message_body)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgAuthTicket::kEstateFieldNumber;
const int CMsgAuthTicket::kEresultFieldNumber;
const int CMsgAuthTicket::kSteamidFieldNumber;
const int CMsgAuthTicket::kGameidFieldNumber;
const int CMsgAuthTicket::kHSteamPipeFieldNumber;
const int CMsgAuthTicket::kTicketCrcFieldNumber;
const int CMsgAuthTicket::kTicketFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgAuthTicket::CMsgAuthTicket()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fbase_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgAuthTicket)
}
CMsgAuthTicket::CMsgAuthTicket(const CMsgAuthTicket& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ticket()) {
    ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ticket_);
  }
  ::memcpy(&steamid_, &from.steamid_,
    reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&steamid_) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgAuthTicket)
}

void CMsgAuthTicket::SharedCtor() {
  _cached_size_ = 0;
  ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&steamid_, 0, reinterpret_cast<char*>(&ticket_crc_) -
    reinterpret_cast<char*>(&steamid_) + sizeof(ticket_crc_));
  eresult_ = 2u;
}

CMsgAuthTicket::~CMsgAuthTicket() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgAuthTicket)
  SharedDtor();
}

void CMsgAuthTicket::SharedDtor() {
  ticket_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgAuthTicket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgAuthTicket::descriptor() {
  protobuf_steammessages_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgAuthTicket& CMsgAuthTicket::default_instance() {
  protobuf_steammessages_5fbase_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgAuthTicket* CMsgAuthTicket::New(::google::protobuf::Arena* arena) const {
  CMsgAuthTicket* n = new CMsgAuthTicket;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgAuthTicket::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgAuthTicket)
  if (has_ticket()) {
    GOOGLE_DCHECK(!ticket_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*ticket_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 126u) {
    ::memset(&steamid_, 0, reinterpret_cast<char*>(&ticket_crc_) -
      reinterpret_cast<char*>(&steamid_) + sizeof(ticket_crc_));
    eresult_ = 2u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgAuthTicket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgAuthTicket)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 estate = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_estate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &estate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 eresult = 2 [default = 2];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_eresult();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steamid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 gameid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_gameid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &gameid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 h_steam_pipe = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_h_steam_pipe();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &h_steam_pipe_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ticket_crc = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_ticket_crc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ticket_crc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes ticket = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ticket()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgAuthTicket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgAuthTicket)
  return false;
#undef DO_
}

void CMsgAuthTicket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgAuthTicket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 estate = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->estate(), output);
  }

  // optional uint32 eresult = 2 [default = 2];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->eresult(), output);
  }

  // optional fixed64 steamid = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->steamid(), output);
  }

  // optional fixed64 gameid = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->gameid(), output);
  }

  // optional uint32 h_steam_pipe = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->h_steam_pipe(), output);
  }

  // optional uint32 ticket_crc = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->ticket_crc(), output);
  }

  // optional bytes ticket = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->ticket(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgAuthTicket)
}

::google::protobuf::uint8* CMsgAuthTicket::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgAuthTicket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 estate = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->estate(), target);
  }

  // optional uint32 eresult = 2 [default = 2];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->eresult(), target);
  }

  // optional fixed64 steamid = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->steamid(), target);
  }

  // optional fixed64 gameid = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->gameid(), target);
  }

  // optional uint32 h_steam_pipe = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->h_steam_pipe(), target);
  }

  // optional uint32 ticket_crc = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->ticket_crc(), target);
  }

  // optional bytes ticket = 7;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->ticket(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgAuthTicket)
  return target;
}

size_t CMsgAuthTicket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgAuthTicket)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional bytes ticket = 7;
    if (has_ticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ticket());
    }

    // optional fixed64 steamid = 3;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional uint32 estate = 1;
    if (has_estate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->estate());
    }

    // optional uint32 h_steam_pipe = 5;
    if (has_h_steam_pipe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->h_steam_pipe());
    }

    // optional fixed64 gameid = 4;
    if (has_gameid()) {
      total_size += 1 + 8;
    }

    // optional uint32 ticket_crc = 6;
    if (has_ticket_crc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ticket_crc());
    }

    // optional uint32 eresult = 2 [default = 2];
    if (has_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eresult());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgAuthTicket::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgAuthTicket)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgAuthTicket* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgAuthTicket>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgAuthTicket)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgAuthTicket)
    MergeFrom(*source);
  }
}

void CMsgAuthTicket::MergeFrom(const CMsgAuthTicket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgAuthTicket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_ticket();
      ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ticket_);
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000004u) {
      estate_ = from.estate_;
    }
    if (cached_has_bits & 0x00000008u) {
      h_steam_pipe_ = from.h_steam_pipe_;
    }
    if (cached_has_bits & 0x00000010u) {
      gameid_ = from.gameid_;
    }
    if (cached_has_bits & 0x00000020u) {
      ticket_crc_ = from.ticket_crc_;
    }
    if (cached_has_bits & 0x00000040u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgAuthTicket::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgAuthTicket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAuthTicket::CopyFrom(const CMsgAuthTicket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgAuthTicket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAuthTicket::IsInitialized() const {
  return true;
}

void CMsgAuthTicket::Swap(CMsgAuthTicket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgAuthTicket::InternalSwap(CMsgAuthTicket* other) {
  ticket_.Swap(&other->ticket_);
  std::swap(steamid_, other->steamid_);
  std::swap(estate_, other->estate_);
  std::swap(h_steam_pipe_, other->h_steam_pipe_);
  std::swap(gameid_, other->gameid_);
  std::swap(ticket_crc_, other->ticket_crc_);
  std::swap(eresult_, other->eresult_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgAuthTicket::GetMetadata() const {
  protobuf_steammessages_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgAuthTicket

// optional uint32 estate = 1;
bool CMsgAuthTicket::has_estate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgAuthTicket::set_has_estate() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgAuthTicket::clear_has_estate() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgAuthTicket::clear_estate() {
  estate_ = 0u;
  clear_has_estate();
}
::google::protobuf::uint32 CMsgAuthTicket::estate() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgAuthTicket.estate)
  return estate_;
}
void CMsgAuthTicket::set_estate(::google::protobuf::uint32 value) {
  set_has_estate();
  estate_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgAuthTicket.estate)
}

// optional uint32 eresult = 2 [default = 2];
bool CMsgAuthTicket::has_eresult() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgAuthTicket::set_has_eresult() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgAuthTicket::clear_has_eresult() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgAuthTicket::clear_eresult() {
  eresult_ = 2u;
  clear_has_eresult();
}
::google::protobuf::uint32 CMsgAuthTicket::eresult() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgAuthTicket.eresult)
  return eresult_;
}
void CMsgAuthTicket::set_eresult(::google::protobuf::uint32 value) {
  set_has_eresult();
  eresult_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgAuthTicket.eresult)
}

// optional fixed64 steamid = 3;
bool CMsgAuthTicket::has_steamid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgAuthTicket::set_has_steamid() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgAuthTicket::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgAuthTicket::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
::google::protobuf::uint64 CMsgAuthTicket::steamid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgAuthTicket.steamid)
  return steamid_;
}
void CMsgAuthTicket::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgAuthTicket.steamid)
}

// optional fixed64 gameid = 4;
bool CMsgAuthTicket::has_gameid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgAuthTicket::set_has_gameid() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgAuthTicket::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgAuthTicket::clear_gameid() {
  gameid_ = GOOGLE_ULONGLONG(0);
  clear_has_gameid();
}
::google::protobuf::uint64 CMsgAuthTicket::gameid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgAuthTicket.gameid)
  return gameid_;
}
void CMsgAuthTicket::set_gameid(::google::protobuf::uint64 value) {
  set_has_gameid();
  gameid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgAuthTicket.gameid)
}

// optional uint32 h_steam_pipe = 5;
bool CMsgAuthTicket::has_h_steam_pipe() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgAuthTicket::set_has_h_steam_pipe() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgAuthTicket::clear_has_h_steam_pipe() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgAuthTicket::clear_h_steam_pipe() {
  h_steam_pipe_ = 0u;
  clear_has_h_steam_pipe();
}
::google::protobuf::uint32 CMsgAuthTicket::h_steam_pipe() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgAuthTicket.h_steam_pipe)
  return h_steam_pipe_;
}
void CMsgAuthTicket::set_h_steam_pipe(::google::protobuf::uint32 value) {
  set_has_h_steam_pipe();
  h_steam_pipe_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgAuthTicket.h_steam_pipe)
}

// optional uint32 ticket_crc = 6;
bool CMsgAuthTicket::has_ticket_crc() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgAuthTicket::set_has_ticket_crc() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgAuthTicket::clear_has_ticket_crc() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgAuthTicket::clear_ticket_crc() {
  ticket_crc_ = 0u;
  clear_has_ticket_crc();
}
::google::protobuf::uint32 CMsgAuthTicket::ticket_crc() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgAuthTicket.ticket_crc)
  return ticket_crc_;
}
void CMsgAuthTicket::set_ticket_crc(::google::protobuf::uint32 value) {
  set_has_ticket_crc();
  ticket_crc_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgAuthTicket.ticket_crc)
}

// optional bytes ticket = 7;
bool CMsgAuthTicket::has_ticket() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgAuthTicket::set_has_ticket() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgAuthTicket::clear_has_ticket() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgAuthTicket::clear_ticket() {
  ticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ticket();
}
const ::std::string& CMsgAuthTicket::ticket() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgAuthTicket.ticket)
  return ticket_.GetNoArena();
}
void CMsgAuthTicket::set_ticket(const ::std::string& value) {
  set_has_ticket();
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgAuthTicket.ticket)
}
#if LANG_CXX11
void CMsgAuthTicket::set_ticket(::std::string&& value) {
  set_has_ticket();
  ticket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgAuthTicket.ticket)
}
#endif
void CMsgAuthTicket::set_ticket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ticket();
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgAuthTicket.ticket)
}
void CMsgAuthTicket::set_ticket(const void* value, size_t size) {
  set_has_ticket();
  ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgAuthTicket.ticket)
}
::std::string* CMsgAuthTicket::mutable_ticket() {
  set_has_ticket();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgAuthTicket.ticket)
  return ticket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgAuthTicket::release_ticket() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgAuthTicket.ticket)
  clear_has_ticket();
  return ticket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgAuthTicket::set_allocated_ticket(::std::string* ticket) {
  if (ticket != NULL) {
    set_has_ticket();
  } else {
    clear_has_ticket();
  }
  ticket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ticket);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgAuthTicket.ticket)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCDDBAppDetailCommon::kAppidFieldNumber;
const int CCDDBAppDetailCommon::kNameFieldNumber;
const int CCDDBAppDetailCommon::kIconFieldNumber;
const int CCDDBAppDetailCommon::kLogoFieldNumber;
const int CCDDBAppDetailCommon::kLogoSmallFieldNumber;
const int CCDDBAppDetailCommon::kToolFieldNumber;
const int CCDDBAppDetailCommon::kDemoFieldNumber;
const int CCDDBAppDetailCommon::kMediaFieldNumber;
const int CCDDBAppDetailCommon::kCommunityVisibleStatsFieldNumber;
const int CCDDBAppDetailCommon::kFriendlyNameFieldNumber;
const int CCDDBAppDetailCommon::kPropagationFieldNumber;
const int CCDDBAppDetailCommon::kHasAdultContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCDDBAppDetailCommon::CCDDBAppDetailCommon()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fbase_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CCDDBAppDetailCommon)
}
CCDDBAppDetailCommon::CCDDBAppDetailCommon(const CCDDBAppDetailCommon& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  icon_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_icon()) {
    icon_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.icon_);
  }
  logo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_logo()) {
    logo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.logo_);
  }
  logo_small_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_logo_small()) {
    logo_small_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.logo_small_);
  }
  friendly_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_friendly_name()) {
    friendly_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.friendly_name_);
  }
  propagation_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_propagation()) {
    propagation_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.propagation_);
  }
  ::memcpy(&appid_, &from.appid_,
    reinterpret_cast<char*>(&has_adult_content_) -
    reinterpret_cast<char*>(&appid_) + sizeof(has_adult_content_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CCDDBAppDetailCommon)
}

void CCDDBAppDetailCommon::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  icon_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  logo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  logo_small_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  friendly_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  propagation_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&appid_, 0, reinterpret_cast<char*>(&has_adult_content_) -
    reinterpret_cast<char*>(&appid_) + sizeof(has_adult_content_));
}

CCDDBAppDetailCommon::~CCDDBAppDetailCommon() {
  // @@protoc_insertion_point(destructor:proto.steam.CCDDBAppDetailCommon)
  SharedDtor();
}

void CCDDBAppDetailCommon::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  icon_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  logo_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  logo_small_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  friendly_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  propagation_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CCDDBAppDetailCommon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCDDBAppDetailCommon::descriptor() {
  protobuf_steammessages_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CCDDBAppDetailCommon& CCDDBAppDetailCommon::default_instance() {
  protobuf_steammessages_5fbase_2eproto::InitDefaults();
  return *internal_default_instance();
}

CCDDBAppDetailCommon* CCDDBAppDetailCommon::New(::google::protobuf::Arena* arena) const {
  CCDDBAppDetailCommon* n = new CCDDBAppDetailCommon;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CCDDBAppDetailCommon::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CCDDBAppDetailCommon)
  if (_has_bits_[0 / 32] & 63u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_icon()) {
      GOOGLE_DCHECK(!icon_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*icon_.UnsafeRawStringPointer())->clear();
    }
    if (has_logo()) {
      GOOGLE_DCHECK(!logo_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*logo_.UnsafeRawStringPointer())->clear();
    }
    if (has_logo_small()) {
      GOOGLE_DCHECK(!logo_small_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*logo_small_.UnsafeRawStringPointer())->clear();
    }
    if (has_friendly_name()) {
      GOOGLE_DCHECK(!friendly_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*friendly_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_propagation()) {
      GOOGLE_DCHECK(!propagation_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*propagation_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 192u) {
    ::memset(&appid_, 0, reinterpret_cast<char*>(&tool_) -
      reinterpret_cast<char*>(&appid_) + sizeof(tool_));
  }
  if (_has_bits_[8 / 32] & 3840u) {
    ::memset(&demo_, 0, reinterpret_cast<char*>(&has_adult_content_) -
      reinterpret_cast<char*>(&demo_) + sizeof(has_adult_content_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CCDDBAppDetailCommon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CCDDBAppDetailCommon)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CCDDBAppDetailCommon.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string icon = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->icon().data(), this->icon().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CCDDBAppDetailCommon.icon");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string logo = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->logo().data(), this->logo().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CCDDBAppDetailCommon.logo");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string logo_small = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logo_small()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->logo_small().data(), this->logo_small().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CCDDBAppDetailCommon.logo_small");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool tool = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_tool();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tool_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool demo = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_demo();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &demo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool media = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_media();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &media_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool community_visible_stats = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_community_visible_stats();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &community_visible_stats_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string friendly_name = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_friendly_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->friendly_name().data(), this->friendly_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CCDDBAppDetailCommon.friendly_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string propagation = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_propagation()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->propagation().data(), this->propagation().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CCDDBAppDetailCommon.propagation");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool has_adult_content = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_has_adult_content();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_adult_content_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CCDDBAppDetailCommon)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CCDDBAppDetailCommon)
  return false;
#undef DO_
}

void CCDDBAppDetailCommon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CCDDBAppDetailCommon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCDDBAppDetailCommon.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string icon = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCDDBAppDetailCommon.icon");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->icon(), output);
  }

  // optional string logo = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logo().data(), this->logo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCDDBAppDetailCommon.logo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->logo(), output);
  }

  // optional string logo_small = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logo_small().data(), this->logo_small().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCDDBAppDetailCommon.logo_small");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->logo_small(), output);
  }

  // optional bool tool = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->tool(), output);
  }

  // optional bool demo = 7;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->demo(), output);
  }

  // optional bool media = 8;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->media(), output);
  }

  // optional bool community_visible_stats = 9;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->community_visible_stats(), output);
  }

  // optional string friendly_name = 10;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->friendly_name().data(), this->friendly_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCDDBAppDetailCommon.friendly_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->friendly_name(), output);
  }

  // optional string propagation = 11;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->propagation().data(), this->propagation().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCDDBAppDetailCommon.propagation");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->propagation(), output);
  }

  // optional bool has_adult_content = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->has_adult_content(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CCDDBAppDetailCommon)
}

::google::protobuf::uint8* CCDDBAppDetailCommon::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CCDDBAppDetailCommon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCDDBAppDetailCommon.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string icon = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCDDBAppDetailCommon.icon");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->icon(), target);
  }

  // optional string logo = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logo().data(), this->logo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCDDBAppDetailCommon.logo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->logo(), target);
  }

  // optional string logo_small = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logo_small().data(), this->logo_small().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCDDBAppDetailCommon.logo_small");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->logo_small(), target);
  }

  // optional bool tool = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->tool(), target);
  }

  // optional bool demo = 7;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->demo(), target);
  }

  // optional bool media = 8;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->media(), target);
  }

  // optional bool community_visible_stats = 9;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->community_visible_stats(), target);
  }

  // optional string friendly_name = 10;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->friendly_name().data(), this->friendly_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCDDBAppDetailCommon.friendly_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->friendly_name(), target);
  }

  // optional string propagation = 11;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->propagation().data(), this->propagation().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CCDDBAppDetailCommon.propagation");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->propagation(), target);
  }

  // optional bool has_adult_content = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->has_adult_content(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CCDDBAppDetailCommon)
  return target;
}

size_t CCDDBAppDetailCommon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CCDDBAppDetailCommon)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string icon = 3;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon());
    }

    // optional string logo = 4;
    if (has_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->logo());
    }

    // optional string logo_small = 5;
    if (has_logo_small()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->logo_small());
    }

    // optional string friendly_name = 10;
    if (has_friendly_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->friendly_name());
    }

    // optional string propagation = 11;
    if (has_propagation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->propagation());
    }

    // optional uint32 appid = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional bool tool = 6;
    if (has_tool()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional bool demo = 7;
    if (has_demo()) {
      total_size += 1 + 1;
    }

    // optional bool media = 8;
    if (has_media()) {
      total_size += 1 + 1;
    }

    // optional bool community_visible_stats = 9;
    if (has_community_visible_stats()) {
      total_size += 1 + 1;
    }

    // optional bool has_adult_content = 12;
    if (has_has_adult_content()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCDDBAppDetailCommon::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CCDDBAppDetailCommon)
  GOOGLE_DCHECK_NE(&from, this);
  const CCDDBAppDetailCommon* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CCDDBAppDetailCommon>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CCDDBAppDetailCommon)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CCDDBAppDetailCommon)
    MergeFrom(*source);
  }
}

void CCDDBAppDetailCommon::MergeFrom(const CCDDBAppDetailCommon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CCDDBAppDetailCommon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_icon();
      icon_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.icon_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_logo();
      logo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.logo_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_logo_small();
      logo_small_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.logo_small_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_friendly_name();
      friendly_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.friendly_name_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_propagation();
      propagation_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.propagation_);
    }
    if (cached_has_bits & 0x00000040u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000080u) {
      tool_ = from.tool_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      demo_ = from.demo_;
    }
    if (cached_has_bits & 0x00000200u) {
      media_ = from.media_;
    }
    if (cached_has_bits & 0x00000400u) {
      community_visible_stats_ = from.community_visible_stats_;
    }
    if (cached_has_bits & 0x00000800u) {
      has_adult_content_ = from.has_adult_content_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CCDDBAppDetailCommon::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CCDDBAppDetailCommon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCDDBAppDetailCommon::CopyFrom(const CCDDBAppDetailCommon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CCDDBAppDetailCommon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCDDBAppDetailCommon::IsInitialized() const {
  return true;
}

void CCDDBAppDetailCommon::Swap(CCDDBAppDetailCommon* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCDDBAppDetailCommon::InternalSwap(CCDDBAppDetailCommon* other) {
  name_.Swap(&other->name_);
  icon_.Swap(&other->icon_);
  logo_.Swap(&other->logo_);
  logo_small_.Swap(&other->logo_small_);
  friendly_name_.Swap(&other->friendly_name_);
  propagation_.Swap(&other->propagation_);
  std::swap(appid_, other->appid_);
  std::swap(tool_, other->tool_);
  std::swap(demo_, other->demo_);
  std::swap(media_, other->media_);
  std::swap(community_visible_stats_, other->community_visible_stats_);
  std::swap(has_adult_content_, other->has_adult_content_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CCDDBAppDetailCommon::GetMetadata() const {
  protobuf_steammessages_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CCDDBAppDetailCommon

// optional uint32 appid = 1;
bool CCDDBAppDetailCommon::has_appid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CCDDBAppDetailCommon::set_has_appid() {
  _has_bits_[0] |= 0x00000040u;
}
void CCDDBAppDetailCommon::clear_has_appid() {
  _has_bits_[0] &= ~0x00000040u;
}
void CCDDBAppDetailCommon::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
::google::protobuf::uint32 CCDDBAppDetailCommon::appid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCDDBAppDetailCommon.appid)
  return appid_;
}
void CCDDBAppDetailCommon::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCDDBAppDetailCommon.appid)
}

// optional string name = 2;
bool CCDDBAppDetailCommon::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CCDDBAppDetailCommon::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CCDDBAppDetailCommon::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CCDDBAppDetailCommon::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& CCDDBAppDetailCommon::name() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCDDBAppDetailCommon.name)
  return name_.GetNoArena();
}
void CCDDBAppDetailCommon::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CCDDBAppDetailCommon.name)
}
#if LANG_CXX11
void CCDDBAppDetailCommon::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CCDDBAppDetailCommon.name)
}
#endif
void CCDDBAppDetailCommon::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CCDDBAppDetailCommon.name)
}
void CCDDBAppDetailCommon::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CCDDBAppDetailCommon.name)
}
::std::string* CCDDBAppDetailCommon::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:proto.steam.CCDDBAppDetailCommon.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CCDDBAppDetailCommon::release_name() {
  // @@protoc_insertion_point(field_release:proto.steam.CCDDBAppDetailCommon.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CCDDBAppDetailCommon::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CCDDBAppDetailCommon.name)
}

// optional string icon = 3;
bool CCDDBAppDetailCommon::has_icon() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CCDDBAppDetailCommon::set_has_icon() {
  _has_bits_[0] |= 0x00000002u;
}
void CCDDBAppDetailCommon::clear_has_icon() {
  _has_bits_[0] &= ~0x00000002u;
}
void CCDDBAppDetailCommon::clear_icon() {
  icon_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_icon();
}
const ::std::string& CCDDBAppDetailCommon::icon() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCDDBAppDetailCommon.icon)
  return icon_.GetNoArena();
}
void CCDDBAppDetailCommon::set_icon(const ::std::string& value) {
  set_has_icon();
  icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CCDDBAppDetailCommon.icon)
}
#if LANG_CXX11
void CCDDBAppDetailCommon::set_icon(::std::string&& value) {
  set_has_icon();
  icon_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CCDDBAppDetailCommon.icon)
}
#endif
void CCDDBAppDetailCommon::set_icon(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_icon();
  icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CCDDBAppDetailCommon.icon)
}
void CCDDBAppDetailCommon::set_icon(const char* value, size_t size) {
  set_has_icon();
  icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CCDDBAppDetailCommon.icon)
}
::std::string* CCDDBAppDetailCommon::mutable_icon() {
  set_has_icon();
  // @@protoc_insertion_point(field_mutable:proto.steam.CCDDBAppDetailCommon.icon)
  return icon_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CCDDBAppDetailCommon::release_icon() {
  // @@protoc_insertion_point(field_release:proto.steam.CCDDBAppDetailCommon.icon)
  clear_has_icon();
  return icon_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CCDDBAppDetailCommon::set_allocated_icon(::std::string* icon) {
  if (icon != NULL) {
    set_has_icon();
  } else {
    clear_has_icon();
  }
  icon_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), icon);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CCDDBAppDetailCommon.icon)
}

// optional string logo = 4;
bool CCDDBAppDetailCommon::has_logo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CCDDBAppDetailCommon::set_has_logo() {
  _has_bits_[0] |= 0x00000004u;
}
void CCDDBAppDetailCommon::clear_has_logo() {
  _has_bits_[0] &= ~0x00000004u;
}
void CCDDBAppDetailCommon::clear_logo() {
  logo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_logo();
}
const ::std::string& CCDDBAppDetailCommon::logo() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCDDBAppDetailCommon.logo)
  return logo_.GetNoArena();
}
void CCDDBAppDetailCommon::set_logo(const ::std::string& value) {
  set_has_logo();
  logo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CCDDBAppDetailCommon.logo)
}
#if LANG_CXX11
void CCDDBAppDetailCommon::set_logo(::std::string&& value) {
  set_has_logo();
  logo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CCDDBAppDetailCommon.logo)
}
#endif
void CCDDBAppDetailCommon::set_logo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_logo();
  logo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CCDDBAppDetailCommon.logo)
}
void CCDDBAppDetailCommon::set_logo(const char* value, size_t size) {
  set_has_logo();
  logo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CCDDBAppDetailCommon.logo)
}
::std::string* CCDDBAppDetailCommon::mutable_logo() {
  set_has_logo();
  // @@protoc_insertion_point(field_mutable:proto.steam.CCDDBAppDetailCommon.logo)
  return logo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CCDDBAppDetailCommon::release_logo() {
  // @@protoc_insertion_point(field_release:proto.steam.CCDDBAppDetailCommon.logo)
  clear_has_logo();
  return logo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CCDDBAppDetailCommon::set_allocated_logo(::std::string* logo) {
  if (logo != NULL) {
    set_has_logo();
  } else {
    clear_has_logo();
  }
  logo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), logo);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CCDDBAppDetailCommon.logo)
}

// optional string logo_small = 5;
bool CCDDBAppDetailCommon::has_logo_small() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CCDDBAppDetailCommon::set_has_logo_small() {
  _has_bits_[0] |= 0x00000008u;
}
void CCDDBAppDetailCommon::clear_has_logo_small() {
  _has_bits_[0] &= ~0x00000008u;
}
void CCDDBAppDetailCommon::clear_logo_small() {
  logo_small_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_logo_small();
}
const ::std::string& CCDDBAppDetailCommon::logo_small() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCDDBAppDetailCommon.logo_small)
  return logo_small_.GetNoArena();
}
void CCDDBAppDetailCommon::set_logo_small(const ::std::string& value) {
  set_has_logo_small();
  logo_small_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CCDDBAppDetailCommon.logo_small)
}
#if LANG_CXX11
void CCDDBAppDetailCommon::set_logo_small(::std::string&& value) {
  set_has_logo_small();
  logo_small_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CCDDBAppDetailCommon.logo_small)
}
#endif
void CCDDBAppDetailCommon::set_logo_small(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_logo_small();
  logo_small_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CCDDBAppDetailCommon.logo_small)
}
void CCDDBAppDetailCommon::set_logo_small(const char* value, size_t size) {
  set_has_logo_small();
  logo_small_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CCDDBAppDetailCommon.logo_small)
}
::std::string* CCDDBAppDetailCommon::mutable_logo_small() {
  set_has_logo_small();
  // @@protoc_insertion_point(field_mutable:proto.steam.CCDDBAppDetailCommon.logo_small)
  return logo_small_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CCDDBAppDetailCommon::release_logo_small() {
  // @@protoc_insertion_point(field_release:proto.steam.CCDDBAppDetailCommon.logo_small)
  clear_has_logo_small();
  return logo_small_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CCDDBAppDetailCommon::set_allocated_logo_small(::std::string* logo_small) {
  if (logo_small != NULL) {
    set_has_logo_small();
  } else {
    clear_has_logo_small();
  }
  logo_small_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), logo_small);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CCDDBAppDetailCommon.logo_small)
}

// optional bool tool = 6;
bool CCDDBAppDetailCommon::has_tool() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CCDDBAppDetailCommon::set_has_tool() {
  _has_bits_[0] |= 0x00000080u;
}
void CCDDBAppDetailCommon::clear_has_tool() {
  _has_bits_[0] &= ~0x00000080u;
}
void CCDDBAppDetailCommon::clear_tool() {
  tool_ = false;
  clear_has_tool();
}
bool CCDDBAppDetailCommon::tool() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCDDBAppDetailCommon.tool)
  return tool_;
}
void CCDDBAppDetailCommon::set_tool(bool value) {
  set_has_tool();
  tool_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCDDBAppDetailCommon.tool)
}

// optional bool demo = 7;
bool CCDDBAppDetailCommon::has_demo() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CCDDBAppDetailCommon::set_has_demo() {
  _has_bits_[0] |= 0x00000100u;
}
void CCDDBAppDetailCommon::clear_has_demo() {
  _has_bits_[0] &= ~0x00000100u;
}
void CCDDBAppDetailCommon::clear_demo() {
  demo_ = false;
  clear_has_demo();
}
bool CCDDBAppDetailCommon::demo() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCDDBAppDetailCommon.demo)
  return demo_;
}
void CCDDBAppDetailCommon::set_demo(bool value) {
  set_has_demo();
  demo_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCDDBAppDetailCommon.demo)
}

// optional bool media = 8;
bool CCDDBAppDetailCommon::has_media() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CCDDBAppDetailCommon::set_has_media() {
  _has_bits_[0] |= 0x00000200u;
}
void CCDDBAppDetailCommon::clear_has_media() {
  _has_bits_[0] &= ~0x00000200u;
}
void CCDDBAppDetailCommon::clear_media() {
  media_ = false;
  clear_has_media();
}
bool CCDDBAppDetailCommon::media() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCDDBAppDetailCommon.media)
  return media_;
}
void CCDDBAppDetailCommon::set_media(bool value) {
  set_has_media();
  media_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCDDBAppDetailCommon.media)
}

// optional bool community_visible_stats = 9;
bool CCDDBAppDetailCommon::has_community_visible_stats() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CCDDBAppDetailCommon::set_has_community_visible_stats() {
  _has_bits_[0] |= 0x00000400u;
}
void CCDDBAppDetailCommon::clear_has_community_visible_stats() {
  _has_bits_[0] &= ~0x00000400u;
}
void CCDDBAppDetailCommon::clear_community_visible_stats() {
  community_visible_stats_ = false;
  clear_has_community_visible_stats();
}
bool CCDDBAppDetailCommon::community_visible_stats() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCDDBAppDetailCommon.community_visible_stats)
  return community_visible_stats_;
}
void CCDDBAppDetailCommon::set_community_visible_stats(bool value) {
  set_has_community_visible_stats();
  community_visible_stats_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCDDBAppDetailCommon.community_visible_stats)
}

// optional string friendly_name = 10;
bool CCDDBAppDetailCommon::has_friendly_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CCDDBAppDetailCommon::set_has_friendly_name() {
  _has_bits_[0] |= 0x00000010u;
}
void CCDDBAppDetailCommon::clear_has_friendly_name() {
  _has_bits_[0] &= ~0x00000010u;
}
void CCDDBAppDetailCommon::clear_friendly_name() {
  friendly_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_friendly_name();
}
const ::std::string& CCDDBAppDetailCommon::friendly_name() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCDDBAppDetailCommon.friendly_name)
  return friendly_name_.GetNoArena();
}
void CCDDBAppDetailCommon::set_friendly_name(const ::std::string& value) {
  set_has_friendly_name();
  friendly_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CCDDBAppDetailCommon.friendly_name)
}
#if LANG_CXX11
void CCDDBAppDetailCommon::set_friendly_name(::std::string&& value) {
  set_has_friendly_name();
  friendly_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CCDDBAppDetailCommon.friendly_name)
}
#endif
void CCDDBAppDetailCommon::set_friendly_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_friendly_name();
  friendly_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CCDDBAppDetailCommon.friendly_name)
}
void CCDDBAppDetailCommon::set_friendly_name(const char* value, size_t size) {
  set_has_friendly_name();
  friendly_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CCDDBAppDetailCommon.friendly_name)
}
::std::string* CCDDBAppDetailCommon::mutable_friendly_name() {
  set_has_friendly_name();
  // @@protoc_insertion_point(field_mutable:proto.steam.CCDDBAppDetailCommon.friendly_name)
  return friendly_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CCDDBAppDetailCommon::release_friendly_name() {
  // @@protoc_insertion_point(field_release:proto.steam.CCDDBAppDetailCommon.friendly_name)
  clear_has_friendly_name();
  return friendly_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CCDDBAppDetailCommon::set_allocated_friendly_name(::std::string* friendly_name) {
  if (friendly_name != NULL) {
    set_has_friendly_name();
  } else {
    clear_has_friendly_name();
  }
  friendly_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), friendly_name);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CCDDBAppDetailCommon.friendly_name)
}

// optional string propagation = 11;
bool CCDDBAppDetailCommon::has_propagation() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CCDDBAppDetailCommon::set_has_propagation() {
  _has_bits_[0] |= 0x00000020u;
}
void CCDDBAppDetailCommon::clear_has_propagation() {
  _has_bits_[0] &= ~0x00000020u;
}
void CCDDBAppDetailCommon::clear_propagation() {
  propagation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_propagation();
}
const ::std::string& CCDDBAppDetailCommon::propagation() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCDDBAppDetailCommon.propagation)
  return propagation_.GetNoArena();
}
void CCDDBAppDetailCommon::set_propagation(const ::std::string& value) {
  set_has_propagation();
  propagation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CCDDBAppDetailCommon.propagation)
}
#if LANG_CXX11
void CCDDBAppDetailCommon::set_propagation(::std::string&& value) {
  set_has_propagation();
  propagation_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CCDDBAppDetailCommon.propagation)
}
#endif
void CCDDBAppDetailCommon::set_propagation(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_propagation();
  propagation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CCDDBAppDetailCommon.propagation)
}
void CCDDBAppDetailCommon::set_propagation(const char* value, size_t size) {
  set_has_propagation();
  propagation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CCDDBAppDetailCommon.propagation)
}
::std::string* CCDDBAppDetailCommon::mutable_propagation() {
  set_has_propagation();
  // @@protoc_insertion_point(field_mutable:proto.steam.CCDDBAppDetailCommon.propagation)
  return propagation_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CCDDBAppDetailCommon::release_propagation() {
  // @@protoc_insertion_point(field_release:proto.steam.CCDDBAppDetailCommon.propagation)
  clear_has_propagation();
  return propagation_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CCDDBAppDetailCommon::set_allocated_propagation(::std::string* propagation) {
  if (propagation != NULL) {
    set_has_propagation();
  } else {
    clear_has_propagation();
  }
  propagation_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), propagation);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CCDDBAppDetailCommon.propagation)
}

// optional bool has_adult_content = 12;
bool CCDDBAppDetailCommon::has_has_adult_content() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CCDDBAppDetailCommon::set_has_has_adult_content() {
  _has_bits_[0] |= 0x00000800u;
}
void CCDDBAppDetailCommon::clear_has_has_adult_content() {
  _has_bits_[0] &= ~0x00000800u;
}
void CCDDBAppDetailCommon::clear_has_adult_content() {
  has_adult_content_ = false;
  clear_has_has_adult_content();
}
bool CCDDBAppDetailCommon::has_adult_content() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCDDBAppDetailCommon.has_adult_content)
  return has_adult_content_;
}
void CCDDBAppDetailCommon::set_has_adult_content(bool value) {
  set_has_has_adult_content();
  has_adult_content_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCDDBAppDetailCommon.has_adult_content)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgAppRights::kEditInfoFieldNumber;
const int CMsgAppRights::kPublishFieldNumber;
const int CMsgAppRights::kViewErrorDataFieldNumber;
const int CMsgAppRights::kDownloadFieldNumber;
const int CMsgAppRights::kUploadCdkeysFieldNumber;
const int CMsgAppRights::kGenerateCdkeysFieldNumber;
const int CMsgAppRights::kViewFinancialsFieldNumber;
const int CMsgAppRights::kManageCegFieldNumber;
const int CMsgAppRights::kManageSigningFieldNumber;
const int CMsgAppRights::kManageCdkeysFieldNumber;
const int CMsgAppRights::kEditMarketingFieldNumber;
const int CMsgAppRights::kEconomySupportFieldNumber;
const int CMsgAppRights::kEconomySupportSupervisorFieldNumber;
const int CMsgAppRights::kManagePricingFieldNumber;
const int CMsgAppRights::kBroadcastLiveFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgAppRights::CMsgAppRights()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fbase_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgAppRights)
}
CMsgAppRights::CMsgAppRights(const CMsgAppRights& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&edit_info_, &from.edit_info_,
    reinterpret_cast<char*>(&broadcast_live_) -
    reinterpret_cast<char*>(&edit_info_) + sizeof(broadcast_live_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgAppRights)
}

void CMsgAppRights::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&edit_info_, 0, reinterpret_cast<char*>(&broadcast_live_) -
    reinterpret_cast<char*>(&edit_info_) + sizeof(broadcast_live_));
}

CMsgAppRights::~CMsgAppRights() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgAppRights)
  SharedDtor();
}

void CMsgAppRights::SharedDtor() {
}

void CMsgAppRights::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgAppRights::descriptor() {
  protobuf_steammessages_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fbase_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgAppRights& CMsgAppRights::default_instance() {
  protobuf_steammessages_5fbase_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgAppRights* CMsgAppRights::New(::google::protobuf::Arena* arena) const {
  CMsgAppRights* n = new CMsgAppRights;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgAppRights::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgAppRights)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&edit_info_, 0, reinterpret_cast<char*>(&manage_ceg_) -
      reinterpret_cast<char*>(&edit_info_) + sizeof(manage_ceg_));
  }
  if (_has_bits_[8 / 32] & 32512u) {
    ::memset(&manage_signing_, 0, reinterpret_cast<char*>(&broadcast_live_) -
      reinterpret_cast<char*>(&manage_signing_) + sizeof(broadcast_live_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgAppRights::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgAppRights)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool edit_info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_edit_info();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &edit_info_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool publish = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_publish();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &publish_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool view_error_data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_view_error_data();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &view_error_data_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool download = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_download();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &download_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool upload_cdkeys = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_upload_cdkeys();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &upload_cdkeys_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool generate_cdkeys = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_generate_cdkeys();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &generate_cdkeys_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool view_financials = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_view_financials();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &view_financials_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool manage_ceg = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_manage_ceg();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &manage_ceg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool manage_signing = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_manage_signing();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &manage_signing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool manage_cdkeys = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_manage_cdkeys();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &manage_cdkeys_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool edit_marketing = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_edit_marketing();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &edit_marketing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool economy_support = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_economy_support();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &economy_support_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool economy_support_supervisor = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_economy_support_supervisor();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &economy_support_supervisor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool manage_pricing = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_manage_pricing();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &manage_pricing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool broadcast_live = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          set_has_broadcast_live();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &broadcast_live_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgAppRights)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgAppRights)
  return false;
#undef DO_
}

void CMsgAppRights::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgAppRights)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool edit_info = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->edit_info(), output);
  }

  // optional bool publish = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->publish(), output);
  }

  // optional bool view_error_data = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->view_error_data(), output);
  }

  // optional bool download = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->download(), output);
  }

  // optional bool upload_cdkeys = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->upload_cdkeys(), output);
  }

  // optional bool generate_cdkeys = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->generate_cdkeys(), output);
  }

  // optional bool view_financials = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->view_financials(), output);
  }

  // optional bool manage_ceg = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->manage_ceg(), output);
  }

  // optional bool manage_signing = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->manage_signing(), output);
  }

  // optional bool manage_cdkeys = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->manage_cdkeys(), output);
  }

  // optional bool edit_marketing = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->edit_marketing(), output);
  }

  // optional bool economy_support = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->economy_support(), output);
  }

  // optional bool economy_support_supervisor = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->economy_support_supervisor(), output);
  }

  // optional bool manage_pricing = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->manage_pricing(), output);
  }

  // optional bool broadcast_live = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->broadcast_live(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgAppRights)
}

::google::protobuf::uint8* CMsgAppRights::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgAppRights)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool edit_info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->edit_info(), target);
  }

  // optional bool publish = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->publish(), target);
  }

  // optional bool view_error_data = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->view_error_data(), target);
  }

  // optional bool download = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->download(), target);
  }

  // optional bool upload_cdkeys = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->upload_cdkeys(), target);
  }

  // optional bool generate_cdkeys = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->generate_cdkeys(), target);
  }

  // optional bool view_financials = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->view_financials(), target);
  }

  // optional bool manage_ceg = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->manage_ceg(), target);
  }

  // optional bool manage_signing = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->manage_signing(), target);
  }

  // optional bool manage_cdkeys = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->manage_cdkeys(), target);
  }

  // optional bool edit_marketing = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->edit_marketing(), target);
  }

  // optional bool economy_support = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->economy_support(), target);
  }

  // optional bool economy_support_supervisor = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->economy_support_supervisor(), target);
  }

  // optional bool manage_pricing = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->manage_pricing(), target);
  }

  // optional bool broadcast_live = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->broadcast_live(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgAppRights)
  return target;
}

size_t CMsgAppRights::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgAppRights)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional bool edit_info = 1;
    if (has_edit_info()) {
      total_size += 1 + 1;
    }

    // optional bool publish = 2;
    if (has_publish()) {
      total_size += 1 + 1;
    }

    // optional bool view_error_data = 3;
    if (has_view_error_data()) {
      total_size += 1 + 1;
    }

    // optional bool download = 4;
    if (has_download()) {
      total_size += 1 + 1;
    }

    // optional bool upload_cdkeys = 5;
    if (has_upload_cdkeys()) {
      total_size += 1 + 1;
    }

    // optional bool generate_cdkeys = 6;
    if (has_generate_cdkeys()) {
      total_size += 1 + 1;
    }

    // optional bool view_financials = 7;
    if (has_view_financials()) {
      total_size += 1 + 1;
    }

    // optional bool manage_ceg = 8;
    if (has_manage_ceg()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 32512u) {
    // optional bool manage_signing = 9;
    if (has_manage_signing()) {
      total_size += 1 + 1;
    }

    // optional bool manage_cdkeys = 10;
    if (has_manage_cdkeys()) {
      total_size += 1 + 1;
    }

    // optional bool edit_marketing = 11;
    if (has_edit_marketing()) {
      total_size += 1 + 1;
    }

    // optional bool economy_support = 12;
    if (has_economy_support()) {
      total_size += 1 + 1;
    }

    // optional bool economy_support_supervisor = 13;
    if (has_economy_support_supervisor()) {
      total_size += 1 + 1;
    }

    // optional bool manage_pricing = 14;
    if (has_manage_pricing()) {
      total_size += 1 + 1;
    }

    // optional bool broadcast_live = 15;
    if (has_broadcast_live()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgAppRights::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgAppRights)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgAppRights* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgAppRights>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgAppRights)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgAppRights)
    MergeFrom(*source);
  }
}

void CMsgAppRights::MergeFrom(const CMsgAppRights& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgAppRights)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      edit_info_ = from.edit_info_;
    }
    if (cached_has_bits & 0x00000002u) {
      publish_ = from.publish_;
    }
    if (cached_has_bits & 0x00000004u) {
      view_error_data_ = from.view_error_data_;
    }
    if (cached_has_bits & 0x00000008u) {
      download_ = from.download_;
    }
    if (cached_has_bits & 0x00000010u) {
      upload_cdkeys_ = from.upload_cdkeys_;
    }
    if (cached_has_bits & 0x00000020u) {
      generate_cdkeys_ = from.generate_cdkeys_;
    }
    if (cached_has_bits & 0x00000040u) {
      view_financials_ = from.view_financials_;
    }
    if (cached_has_bits & 0x00000080u) {
      manage_ceg_ = from.manage_ceg_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 32512u) {
    if (cached_has_bits & 0x00000100u) {
      manage_signing_ = from.manage_signing_;
    }
    if (cached_has_bits & 0x00000200u) {
      manage_cdkeys_ = from.manage_cdkeys_;
    }
    if (cached_has_bits & 0x00000400u) {
      edit_marketing_ = from.edit_marketing_;
    }
    if (cached_has_bits & 0x00000800u) {
      economy_support_ = from.economy_support_;
    }
    if (cached_has_bits & 0x00001000u) {
      economy_support_supervisor_ = from.economy_support_supervisor_;
    }
    if (cached_has_bits & 0x00002000u) {
      manage_pricing_ = from.manage_pricing_;
    }
    if (cached_has_bits & 0x00004000u) {
      broadcast_live_ = from.broadcast_live_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgAppRights::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgAppRights)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAppRights::CopyFrom(const CMsgAppRights& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgAppRights)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAppRights::IsInitialized() const {
  return true;
}

void CMsgAppRights::Swap(CMsgAppRights* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgAppRights::InternalSwap(CMsgAppRights* other) {
  std::swap(edit_info_, other->edit_info_);
  std::swap(publish_, other->publish_);
  std::swap(view_error_data_, other->view_error_data_);
  std::swap(download_, other->download_);
  std::swap(upload_cdkeys_, other->upload_cdkeys_);
  std::swap(generate_cdkeys_, other->generate_cdkeys_);
  std::swap(view_financials_, other->view_financials_);
  std::swap(manage_ceg_, other->manage_ceg_);
  std::swap(manage_signing_, other->manage_signing_);
  std::swap(manage_cdkeys_, other->manage_cdkeys_);
  std::swap(edit_marketing_, other->edit_marketing_);
  std::swap(economy_support_, other->economy_support_);
  std::swap(economy_support_supervisor_, other->economy_support_supervisor_);
  std::swap(manage_pricing_, other->manage_pricing_);
  std::swap(broadcast_live_, other->broadcast_live_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgAppRights::GetMetadata() const {
  protobuf_steammessages_5fbase_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fbase_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgAppRights

// optional bool edit_info = 1;
bool CMsgAppRights::has_edit_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgAppRights::set_has_edit_info() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgAppRights::clear_has_edit_info() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgAppRights::clear_edit_info() {
  edit_info_ = false;
  clear_has_edit_info();
}
bool CMsgAppRights::edit_info() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgAppRights.edit_info)
  return edit_info_;
}
void CMsgAppRights::set_edit_info(bool value) {
  set_has_edit_info();
  edit_info_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgAppRights.edit_info)
}

// optional bool publish = 2;
bool CMsgAppRights::has_publish() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgAppRights::set_has_publish() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgAppRights::clear_has_publish() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgAppRights::clear_publish() {
  publish_ = false;
  clear_has_publish();
}
bool CMsgAppRights::publish() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgAppRights.publish)
  return publish_;
}
void CMsgAppRights::set_publish(bool value) {
  set_has_publish();
  publish_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgAppRights.publish)
}

// optional bool view_error_data = 3;
bool CMsgAppRights::has_view_error_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgAppRights::set_has_view_error_data() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgAppRights::clear_has_view_error_data() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgAppRights::clear_view_error_data() {
  view_error_data_ = false;
  clear_has_view_error_data();
}
bool CMsgAppRights::view_error_data() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgAppRights.view_error_data)
  return view_error_data_;
}
void CMsgAppRights::set_view_error_data(bool value) {
  set_has_view_error_data();
  view_error_data_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgAppRights.view_error_data)
}

// optional bool download = 4;
bool CMsgAppRights::has_download() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgAppRights::set_has_download() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgAppRights::clear_has_download() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgAppRights::clear_download() {
  download_ = false;
  clear_has_download();
}
bool CMsgAppRights::download() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgAppRights.download)
  return download_;
}
void CMsgAppRights::set_download(bool value) {
  set_has_download();
  download_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgAppRights.download)
}

// optional bool upload_cdkeys = 5;
bool CMsgAppRights::has_upload_cdkeys() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgAppRights::set_has_upload_cdkeys() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgAppRights::clear_has_upload_cdkeys() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgAppRights::clear_upload_cdkeys() {
  upload_cdkeys_ = false;
  clear_has_upload_cdkeys();
}
bool CMsgAppRights::upload_cdkeys() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgAppRights.upload_cdkeys)
  return upload_cdkeys_;
}
void CMsgAppRights::set_upload_cdkeys(bool value) {
  set_has_upload_cdkeys();
  upload_cdkeys_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgAppRights.upload_cdkeys)
}

// optional bool generate_cdkeys = 6;
bool CMsgAppRights::has_generate_cdkeys() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgAppRights::set_has_generate_cdkeys() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgAppRights::clear_has_generate_cdkeys() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgAppRights::clear_generate_cdkeys() {
  generate_cdkeys_ = false;
  clear_has_generate_cdkeys();
}
bool CMsgAppRights::generate_cdkeys() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgAppRights.generate_cdkeys)
  return generate_cdkeys_;
}
void CMsgAppRights::set_generate_cdkeys(bool value) {
  set_has_generate_cdkeys();
  generate_cdkeys_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgAppRights.generate_cdkeys)
}

// optional bool view_financials = 7;
bool CMsgAppRights::has_view_financials() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgAppRights::set_has_view_financials() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgAppRights::clear_has_view_financials() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgAppRights::clear_view_financials() {
  view_financials_ = false;
  clear_has_view_financials();
}
bool CMsgAppRights::view_financials() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgAppRights.view_financials)
  return view_financials_;
}
void CMsgAppRights::set_view_financials(bool value) {
  set_has_view_financials();
  view_financials_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgAppRights.view_financials)
}

// optional bool manage_ceg = 8;
bool CMsgAppRights::has_manage_ceg() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgAppRights::set_has_manage_ceg() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgAppRights::clear_has_manage_ceg() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgAppRights::clear_manage_ceg() {
  manage_ceg_ = false;
  clear_has_manage_ceg();
}
bool CMsgAppRights::manage_ceg() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgAppRights.manage_ceg)
  return manage_ceg_;
}
void CMsgAppRights::set_manage_ceg(bool value) {
  set_has_manage_ceg();
  manage_ceg_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgAppRights.manage_ceg)
}

// optional bool manage_signing = 9;
bool CMsgAppRights::has_manage_signing() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CMsgAppRights::set_has_manage_signing() {
  _has_bits_[0] |= 0x00000100u;
}
void CMsgAppRights::clear_has_manage_signing() {
  _has_bits_[0] &= ~0x00000100u;
}
void CMsgAppRights::clear_manage_signing() {
  manage_signing_ = false;
  clear_has_manage_signing();
}
bool CMsgAppRights::manage_signing() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgAppRights.manage_signing)
  return manage_signing_;
}
void CMsgAppRights::set_manage_signing(bool value) {
  set_has_manage_signing();
  manage_signing_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgAppRights.manage_signing)
}

// optional bool manage_cdkeys = 10;
bool CMsgAppRights::has_manage_cdkeys() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CMsgAppRights::set_has_manage_cdkeys() {
  _has_bits_[0] |= 0x00000200u;
}
void CMsgAppRights::clear_has_manage_cdkeys() {
  _has_bits_[0] &= ~0x00000200u;
}
void CMsgAppRights::clear_manage_cdkeys() {
  manage_cdkeys_ = false;
  clear_has_manage_cdkeys();
}
bool CMsgAppRights::manage_cdkeys() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgAppRights.manage_cdkeys)
  return manage_cdkeys_;
}
void CMsgAppRights::set_manage_cdkeys(bool value) {
  set_has_manage_cdkeys();
  manage_cdkeys_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgAppRights.manage_cdkeys)
}

// optional bool edit_marketing = 11;
bool CMsgAppRights::has_edit_marketing() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CMsgAppRights::set_has_edit_marketing() {
  _has_bits_[0] |= 0x00000400u;
}
void CMsgAppRights::clear_has_edit_marketing() {
  _has_bits_[0] &= ~0x00000400u;
}
void CMsgAppRights::clear_edit_marketing() {
  edit_marketing_ = false;
  clear_has_edit_marketing();
}
bool CMsgAppRights::edit_marketing() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgAppRights.edit_marketing)
  return edit_marketing_;
}
void CMsgAppRights::set_edit_marketing(bool value) {
  set_has_edit_marketing();
  edit_marketing_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgAppRights.edit_marketing)
}

// optional bool economy_support = 12;
bool CMsgAppRights::has_economy_support() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CMsgAppRights::set_has_economy_support() {
  _has_bits_[0] |= 0x00000800u;
}
void CMsgAppRights::clear_has_economy_support() {
  _has_bits_[0] &= ~0x00000800u;
}
void CMsgAppRights::clear_economy_support() {
  economy_support_ = false;
  clear_has_economy_support();
}
bool CMsgAppRights::economy_support() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgAppRights.economy_support)
  return economy_support_;
}
void CMsgAppRights::set_economy_support(bool value) {
  set_has_economy_support();
  economy_support_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgAppRights.economy_support)
}

// optional bool economy_support_supervisor = 13;
bool CMsgAppRights::has_economy_support_supervisor() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void CMsgAppRights::set_has_economy_support_supervisor() {
  _has_bits_[0] |= 0x00001000u;
}
void CMsgAppRights::clear_has_economy_support_supervisor() {
  _has_bits_[0] &= ~0x00001000u;
}
void CMsgAppRights::clear_economy_support_supervisor() {
  economy_support_supervisor_ = false;
  clear_has_economy_support_supervisor();
}
bool CMsgAppRights::economy_support_supervisor() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgAppRights.economy_support_supervisor)
  return economy_support_supervisor_;
}
void CMsgAppRights::set_economy_support_supervisor(bool value) {
  set_has_economy_support_supervisor();
  economy_support_supervisor_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgAppRights.economy_support_supervisor)
}

// optional bool manage_pricing = 14;
bool CMsgAppRights::has_manage_pricing() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void CMsgAppRights::set_has_manage_pricing() {
  _has_bits_[0] |= 0x00002000u;
}
void CMsgAppRights::clear_has_manage_pricing() {
  _has_bits_[0] &= ~0x00002000u;
}
void CMsgAppRights::clear_manage_pricing() {
  manage_pricing_ = false;
  clear_has_manage_pricing();
}
bool CMsgAppRights::manage_pricing() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgAppRights.manage_pricing)
  return manage_pricing_;
}
void CMsgAppRights::set_manage_pricing(bool value) {
  set_has_manage_pricing();
  manage_pricing_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgAppRights.manage_pricing)
}

// optional bool broadcast_live = 15;
bool CMsgAppRights::has_broadcast_live() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void CMsgAppRights::set_has_broadcast_live() {
  _has_bits_[0] |= 0x00004000u;
}
void CMsgAppRights::clear_has_broadcast_live() {
  _has_bits_[0] &= ~0x00004000u;
}
void CMsgAppRights::clear_broadcast_live() {
  broadcast_live_ = false;
  clear_has_broadcast_live();
}
bool CMsgAppRights::broadcast_live() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgAppRights.broadcast_live)
  return broadcast_live_;
}
void CMsgAppRights::set_broadcast_live(bool value) {
  set_has_broadcast_live();
  broadcast_live_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CMsgAppRights.broadcast_live)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS
::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::MessageOptions,
    ::google::protobuf::internal::PrimitiveTypeTraits< ::google::protobuf::int32 >, 5, false >
  msgpool_soft_limit(kMsgpoolSoftLimitFieldNumber, 32);
::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::MessageOptions,
    ::google::protobuf::internal::PrimitiveTypeTraits< ::google::protobuf::int32 >, 5, false >
  msgpool_hard_limit(kMsgpoolHardLimitFieldNumber, 384);
::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::FileOptions,
    ::google::protobuf::internal::PrimitiveTypeTraits< bool >, 8, false >
  force_php_generation(kForcePhpGenerationFieldNumber, false);
::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::google::protobuf::internal::PrimitiveTypeTraits< bool >, 8, false >
  php_output_always_number(kPhpOutputAlwaysNumberFieldNumber, false);

// @@protoc_insertion_point(namespace_scope)

}  // namespace steam
}  // namespace proto

// @@protoc_insertion_point(global_scope)
