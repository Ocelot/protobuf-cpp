// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_unified_test.steamclient.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "steammessages_unified_test.steamclient.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace steam {
class CMsgTest_MessageToClient_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgTest_MessageToClient_Request> {
} _CMsgTest_MessageToClient_Request_default_instance_;
class CMsgTest_MessageToClient_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgTest_MessageToClient_Response> {
} _CMsgTest_MessageToClient_Response_default_instance_;
class CMsgTest_NotifyClient_NotificationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgTest_NotifyClient_Notification> {
} _CMsgTest_NotifyClient_Notification_default_instance_;
class CMsgTest_MessageToServer_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgTest_MessageToServer_Request> {
} _CMsgTest_MessageToServer_Request_default_instance_;
class CMsgTest_MessageToServer_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgTest_MessageToServer_Response> {
} _CMsgTest_MessageToServer_Response_default_instance_;
class CMsgTest_NotifyServer_NotificationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgTest_NotifyServer_Notification> {
} _CMsgTest_NotifyServer_Notification_default_instance_;

namespace protobuf_steammessages_5funified_5ftest_2esteamclient_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[6];
const ::google::protobuf::ServiceDescriptor* file_level_service_descriptors[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTest_MessageToClient_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTest_MessageToClient_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTest_MessageToClient_Request, some_text_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTest_MessageToClient_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTest_MessageToClient_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTest_MessageToClient_Response, some_text_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTest_NotifyClient_Notification, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTest_NotifyClient_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTest_NotifyClient_Notification, some_text_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTest_MessageToServer_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTest_MessageToServer_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTest_MessageToServer_Request, some_text_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTest_MessageToServer_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTest_MessageToServer_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTest_MessageToServer_Response, some_text_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTest_NotifyServer_Notification, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTest_NotifyServer_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgTest_NotifyServer_Notification, some_text_),
  0,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 6, sizeof(CMsgTest_MessageToClient_Request)},
  { 7, 13, sizeof(CMsgTest_MessageToClient_Response)},
  { 14, 20, sizeof(CMsgTest_NotifyClient_Notification)},
  { 21, 27, sizeof(CMsgTest_MessageToServer_Request)},
  { 28, 34, sizeof(CMsgTest_MessageToServer_Response)},
  { 35, 41, sizeof(CMsgTest_NotifyServer_Notification)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgTest_MessageToClient_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgTest_MessageToClient_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgTest_NotifyClient_Notification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgTest_MessageToServer_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgTest_MessageToServer_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgTest_NotifyServer_Notification_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "steammessages_unified_test.steamclient.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, file_level_service_descriptors);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

}  // namespace

void TableStruct::Shutdown() {
  _CMsgTest_MessageToClient_Request_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _CMsgTest_MessageToClient_Response_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _CMsgTest_NotifyClient_Notification_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _CMsgTest_MessageToServer_Request_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _CMsgTest_MessageToServer_Response_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _CMsgTest_NotifyServer_Notification_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::proto::steam::protobuf_steammessages_5funified_5fbase_2esteamclient_2eproto::InitDefaults();
  _CMsgTest_MessageToClient_Request_default_instance_.DefaultConstruct();
  _CMsgTest_MessageToClient_Response_default_instance_.DefaultConstruct();
  _CMsgTest_NotifyClient_Notification_default_instance_.DefaultConstruct();
  _CMsgTest_MessageToServer_Request_default_instance_.DefaultConstruct();
  _CMsgTest_MessageToServer_Response_default_instance_.DefaultConstruct();
  _CMsgTest_NotifyServer_Notification_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n,steammessages_unified_test.steamclient"
      ".proto\022\013proto.steam\032,steammessages_unifi"
      "ed_base.steamclient.proto\"G\n CMsgTest_Me"
      "ssageToClient_Request\022#\n\tsome_text\030\001 \001(\t"
      "B\020\202\265\030\014Some string.\"H\n!CMsgTest_MessageTo"
      "Client_Response\022#\n\tsome_text\030\001 \001(\tB\020\202\265\030\014"
      "Some string.\"I\n\"CMsgTest_NotifyClient_No"
      "tification\022#\n\tsome_text\030\001 \001(\tB\020\202\265\030\014Some "
      "string.\"G\n CMsgTest_MessageToServer_Requ"
      "est\022#\n\tsome_text\030\001 \001(\tB\020\202\265\030\014Some string."
      "\"H\n!CMsgTest_MessageToServer_Response\022#\n"
      "\tsome_text\030\001 \001(\tB\020\202\265\030\014Some string.\"I\n\"CM"
      "sgTest_NotifyServer_Notification\022#\n\tsome"
      "_text\030\001 \001(\tB\020\202\265\030\014Some string.2\263\002\n\017TestSt"
      "eamClient\022\231\001\n\017MessageToClient\022-.proto.st"
      "eam.CMsgTest_MessageToClient_Request\032..p"
      "roto.steam.CMsgTest_MessageToClient_Resp"
      "onse\"\'\202\265\030#Some description - MessageToCl"
      "ient.\022~\n\014NotifyClient\022/.proto.steam.CMsg"
      "Test_NotifyClient_Notification\032\027.proto.s"
      "team.NoResponse\"$\202\265\030 Some description - "
      "NotifyClient.\032\004\300\265\030\0022\262\002\n\024TestServerFromCl"
      "ient\022\231\001\n\017MessageToServer\022-.proto.steam.C"
      "MsgTest_MessageToServer_Request\032..proto."
      "steam.CMsgTest_MessageToServer_Response\""
      "\'\202\265\030#Some description - MessageToServer."
      "\022~\n\014NotifyServer\022/.proto.steam.CMsgTest_"
      "NotifyServer_Notification\032\027.proto.steam."
      "NoResponse\"$\202\265\030 Some description - Notif"
      "yServer.B\003\200\001\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1173);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "steammessages_unified_test.steamclient.proto", &protobuf_RegisterTypes);
  ::proto::steam::protobuf_steammessages_5funified_5fbase_2esteamclient_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_steammessages_5funified_5ftest_2esteamclient_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgTest_MessageToClient_Request::kSomeTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgTest_MessageToClient_Request::CMsgTest_MessageToClient_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5funified_5ftest_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgTest_MessageToClient_Request)
}
CMsgTest_MessageToClient_Request::CMsgTest_MessageToClient_Request(const CMsgTest_MessageToClient_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  some_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_some_text()) {
    some_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.some_text_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgTest_MessageToClient_Request)
}

void CMsgTest_MessageToClient_Request::SharedCtor() {
  _cached_size_ = 0;
  some_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CMsgTest_MessageToClient_Request::~CMsgTest_MessageToClient_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgTest_MessageToClient_Request)
  SharedDtor();
}

void CMsgTest_MessageToClient_Request::SharedDtor() {
  some_text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgTest_MessageToClient_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTest_MessageToClient_Request::descriptor() {
  protobuf_steammessages_5funified_5ftest_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5funified_5ftest_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgTest_MessageToClient_Request& CMsgTest_MessageToClient_Request::default_instance() {
  protobuf_steammessages_5funified_5ftest_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgTest_MessageToClient_Request* CMsgTest_MessageToClient_Request::New(::google::protobuf::Arena* arena) const {
  CMsgTest_MessageToClient_Request* n = new CMsgTest_MessageToClient_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgTest_MessageToClient_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgTest_MessageToClient_Request)
  if (has_some_text()) {
    GOOGLE_DCHECK(!some_text_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*some_text_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgTest_MessageToClient_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgTest_MessageToClient_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string some_text = 1 [(.proto.steam.description) = "Some string."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_some_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->some_text().data(), this->some_text().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgTest_MessageToClient_Request.some_text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgTest_MessageToClient_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgTest_MessageToClient_Request)
  return false;
#undef DO_
}

void CMsgTest_MessageToClient_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgTest_MessageToClient_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string some_text = 1 [(.proto.steam.description) = "Some string."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->some_text().data(), this->some_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgTest_MessageToClient_Request.some_text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->some_text(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgTest_MessageToClient_Request)
}

::google::protobuf::uint8* CMsgTest_MessageToClient_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgTest_MessageToClient_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string some_text = 1 [(.proto.steam.description) = "Some string."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->some_text().data(), this->some_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgTest_MessageToClient_Request.some_text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->some_text(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgTest_MessageToClient_Request)
  return target;
}

size_t CMsgTest_MessageToClient_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgTest_MessageToClient_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional string some_text = 1 [(.proto.steam.description) = "Some string."];
  if (has_some_text()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->some_text());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTest_MessageToClient_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgTest_MessageToClient_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTest_MessageToClient_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgTest_MessageToClient_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgTest_MessageToClient_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgTest_MessageToClient_Request)
    MergeFrom(*source);
  }
}

void CMsgTest_MessageToClient_Request::MergeFrom(const CMsgTest_MessageToClient_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgTest_MessageToClient_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_some_text()) {
    set_has_some_text();
    some_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.some_text_);
  }
}

void CMsgTest_MessageToClient_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgTest_MessageToClient_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTest_MessageToClient_Request::CopyFrom(const CMsgTest_MessageToClient_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgTest_MessageToClient_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTest_MessageToClient_Request::IsInitialized() const {
  return true;
}

void CMsgTest_MessageToClient_Request::Swap(CMsgTest_MessageToClient_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgTest_MessageToClient_Request::InternalSwap(CMsgTest_MessageToClient_Request* other) {
  some_text_.Swap(&other->some_text_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgTest_MessageToClient_Request::GetMetadata() const {
  protobuf_steammessages_5funified_5ftest_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5funified_5ftest_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgTest_MessageToClient_Request

// optional string some_text = 1 [(.proto.steam.description) = "Some string."];
bool CMsgTest_MessageToClient_Request::has_some_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgTest_MessageToClient_Request::set_has_some_text() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgTest_MessageToClient_Request::clear_has_some_text() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgTest_MessageToClient_Request::clear_some_text() {
  some_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_some_text();
}
const ::std::string& CMsgTest_MessageToClient_Request::some_text() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgTest_MessageToClient_Request.some_text)
  return some_text_.GetNoArena();
}
void CMsgTest_MessageToClient_Request::set_some_text(const ::std::string& value) {
  set_has_some_text();
  some_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgTest_MessageToClient_Request.some_text)
}
#if LANG_CXX11
void CMsgTest_MessageToClient_Request::set_some_text(::std::string&& value) {
  set_has_some_text();
  some_text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgTest_MessageToClient_Request.some_text)
}
#endif
void CMsgTest_MessageToClient_Request::set_some_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_some_text();
  some_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgTest_MessageToClient_Request.some_text)
}
void CMsgTest_MessageToClient_Request::set_some_text(const char* value, size_t size) {
  set_has_some_text();
  some_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgTest_MessageToClient_Request.some_text)
}
::std::string* CMsgTest_MessageToClient_Request::mutable_some_text() {
  set_has_some_text();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgTest_MessageToClient_Request.some_text)
  return some_text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgTest_MessageToClient_Request::release_some_text() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgTest_MessageToClient_Request.some_text)
  clear_has_some_text();
  return some_text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgTest_MessageToClient_Request::set_allocated_some_text(::std::string* some_text) {
  if (some_text != NULL) {
    set_has_some_text();
  } else {
    clear_has_some_text();
  }
  some_text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), some_text);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgTest_MessageToClient_Request.some_text)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgTest_MessageToClient_Response::kSomeTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgTest_MessageToClient_Response::CMsgTest_MessageToClient_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5funified_5ftest_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgTest_MessageToClient_Response)
}
CMsgTest_MessageToClient_Response::CMsgTest_MessageToClient_Response(const CMsgTest_MessageToClient_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  some_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_some_text()) {
    some_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.some_text_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgTest_MessageToClient_Response)
}

void CMsgTest_MessageToClient_Response::SharedCtor() {
  _cached_size_ = 0;
  some_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CMsgTest_MessageToClient_Response::~CMsgTest_MessageToClient_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgTest_MessageToClient_Response)
  SharedDtor();
}

void CMsgTest_MessageToClient_Response::SharedDtor() {
  some_text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgTest_MessageToClient_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTest_MessageToClient_Response::descriptor() {
  protobuf_steammessages_5funified_5ftest_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5funified_5ftest_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgTest_MessageToClient_Response& CMsgTest_MessageToClient_Response::default_instance() {
  protobuf_steammessages_5funified_5ftest_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgTest_MessageToClient_Response* CMsgTest_MessageToClient_Response::New(::google::protobuf::Arena* arena) const {
  CMsgTest_MessageToClient_Response* n = new CMsgTest_MessageToClient_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgTest_MessageToClient_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgTest_MessageToClient_Response)
  if (has_some_text()) {
    GOOGLE_DCHECK(!some_text_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*some_text_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgTest_MessageToClient_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgTest_MessageToClient_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string some_text = 1 [(.proto.steam.description) = "Some string."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_some_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->some_text().data(), this->some_text().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgTest_MessageToClient_Response.some_text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgTest_MessageToClient_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgTest_MessageToClient_Response)
  return false;
#undef DO_
}

void CMsgTest_MessageToClient_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgTest_MessageToClient_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string some_text = 1 [(.proto.steam.description) = "Some string."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->some_text().data(), this->some_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgTest_MessageToClient_Response.some_text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->some_text(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgTest_MessageToClient_Response)
}

::google::protobuf::uint8* CMsgTest_MessageToClient_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgTest_MessageToClient_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string some_text = 1 [(.proto.steam.description) = "Some string."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->some_text().data(), this->some_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgTest_MessageToClient_Response.some_text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->some_text(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgTest_MessageToClient_Response)
  return target;
}

size_t CMsgTest_MessageToClient_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgTest_MessageToClient_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional string some_text = 1 [(.proto.steam.description) = "Some string."];
  if (has_some_text()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->some_text());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTest_MessageToClient_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgTest_MessageToClient_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTest_MessageToClient_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgTest_MessageToClient_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgTest_MessageToClient_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgTest_MessageToClient_Response)
    MergeFrom(*source);
  }
}

void CMsgTest_MessageToClient_Response::MergeFrom(const CMsgTest_MessageToClient_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgTest_MessageToClient_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_some_text()) {
    set_has_some_text();
    some_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.some_text_);
  }
}

void CMsgTest_MessageToClient_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgTest_MessageToClient_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTest_MessageToClient_Response::CopyFrom(const CMsgTest_MessageToClient_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgTest_MessageToClient_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTest_MessageToClient_Response::IsInitialized() const {
  return true;
}

void CMsgTest_MessageToClient_Response::Swap(CMsgTest_MessageToClient_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgTest_MessageToClient_Response::InternalSwap(CMsgTest_MessageToClient_Response* other) {
  some_text_.Swap(&other->some_text_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgTest_MessageToClient_Response::GetMetadata() const {
  protobuf_steammessages_5funified_5ftest_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5funified_5ftest_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgTest_MessageToClient_Response

// optional string some_text = 1 [(.proto.steam.description) = "Some string."];
bool CMsgTest_MessageToClient_Response::has_some_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgTest_MessageToClient_Response::set_has_some_text() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgTest_MessageToClient_Response::clear_has_some_text() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgTest_MessageToClient_Response::clear_some_text() {
  some_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_some_text();
}
const ::std::string& CMsgTest_MessageToClient_Response::some_text() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgTest_MessageToClient_Response.some_text)
  return some_text_.GetNoArena();
}
void CMsgTest_MessageToClient_Response::set_some_text(const ::std::string& value) {
  set_has_some_text();
  some_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgTest_MessageToClient_Response.some_text)
}
#if LANG_CXX11
void CMsgTest_MessageToClient_Response::set_some_text(::std::string&& value) {
  set_has_some_text();
  some_text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgTest_MessageToClient_Response.some_text)
}
#endif
void CMsgTest_MessageToClient_Response::set_some_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_some_text();
  some_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgTest_MessageToClient_Response.some_text)
}
void CMsgTest_MessageToClient_Response::set_some_text(const char* value, size_t size) {
  set_has_some_text();
  some_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgTest_MessageToClient_Response.some_text)
}
::std::string* CMsgTest_MessageToClient_Response::mutable_some_text() {
  set_has_some_text();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgTest_MessageToClient_Response.some_text)
  return some_text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgTest_MessageToClient_Response::release_some_text() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgTest_MessageToClient_Response.some_text)
  clear_has_some_text();
  return some_text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgTest_MessageToClient_Response::set_allocated_some_text(::std::string* some_text) {
  if (some_text != NULL) {
    set_has_some_text();
  } else {
    clear_has_some_text();
  }
  some_text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), some_text);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgTest_MessageToClient_Response.some_text)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgTest_NotifyClient_Notification::kSomeTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgTest_NotifyClient_Notification::CMsgTest_NotifyClient_Notification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5funified_5ftest_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgTest_NotifyClient_Notification)
}
CMsgTest_NotifyClient_Notification::CMsgTest_NotifyClient_Notification(const CMsgTest_NotifyClient_Notification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  some_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_some_text()) {
    some_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.some_text_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgTest_NotifyClient_Notification)
}

void CMsgTest_NotifyClient_Notification::SharedCtor() {
  _cached_size_ = 0;
  some_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CMsgTest_NotifyClient_Notification::~CMsgTest_NotifyClient_Notification() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgTest_NotifyClient_Notification)
  SharedDtor();
}

void CMsgTest_NotifyClient_Notification::SharedDtor() {
  some_text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgTest_NotifyClient_Notification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTest_NotifyClient_Notification::descriptor() {
  protobuf_steammessages_5funified_5ftest_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5funified_5ftest_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgTest_NotifyClient_Notification& CMsgTest_NotifyClient_Notification::default_instance() {
  protobuf_steammessages_5funified_5ftest_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgTest_NotifyClient_Notification* CMsgTest_NotifyClient_Notification::New(::google::protobuf::Arena* arena) const {
  CMsgTest_NotifyClient_Notification* n = new CMsgTest_NotifyClient_Notification;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgTest_NotifyClient_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgTest_NotifyClient_Notification)
  if (has_some_text()) {
    GOOGLE_DCHECK(!some_text_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*some_text_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgTest_NotifyClient_Notification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgTest_NotifyClient_Notification)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string some_text = 1 [(.proto.steam.description) = "Some string."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_some_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->some_text().data(), this->some_text().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgTest_NotifyClient_Notification.some_text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgTest_NotifyClient_Notification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgTest_NotifyClient_Notification)
  return false;
#undef DO_
}

void CMsgTest_NotifyClient_Notification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgTest_NotifyClient_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string some_text = 1 [(.proto.steam.description) = "Some string."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->some_text().data(), this->some_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgTest_NotifyClient_Notification.some_text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->some_text(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgTest_NotifyClient_Notification)
}

::google::protobuf::uint8* CMsgTest_NotifyClient_Notification::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgTest_NotifyClient_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string some_text = 1 [(.proto.steam.description) = "Some string."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->some_text().data(), this->some_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgTest_NotifyClient_Notification.some_text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->some_text(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgTest_NotifyClient_Notification)
  return target;
}

size_t CMsgTest_NotifyClient_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgTest_NotifyClient_Notification)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional string some_text = 1 [(.proto.steam.description) = "Some string."];
  if (has_some_text()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->some_text());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTest_NotifyClient_Notification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgTest_NotifyClient_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTest_NotifyClient_Notification* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgTest_NotifyClient_Notification>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgTest_NotifyClient_Notification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgTest_NotifyClient_Notification)
    MergeFrom(*source);
  }
}

void CMsgTest_NotifyClient_Notification::MergeFrom(const CMsgTest_NotifyClient_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgTest_NotifyClient_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_some_text()) {
    set_has_some_text();
    some_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.some_text_);
  }
}

void CMsgTest_NotifyClient_Notification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgTest_NotifyClient_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTest_NotifyClient_Notification::CopyFrom(const CMsgTest_NotifyClient_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgTest_NotifyClient_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTest_NotifyClient_Notification::IsInitialized() const {
  return true;
}

void CMsgTest_NotifyClient_Notification::Swap(CMsgTest_NotifyClient_Notification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgTest_NotifyClient_Notification::InternalSwap(CMsgTest_NotifyClient_Notification* other) {
  some_text_.Swap(&other->some_text_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgTest_NotifyClient_Notification::GetMetadata() const {
  protobuf_steammessages_5funified_5ftest_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5funified_5ftest_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgTest_NotifyClient_Notification

// optional string some_text = 1 [(.proto.steam.description) = "Some string."];
bool CMsgTest_NotifyClient_Notification::has_some_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgTest_NotifyClient_Notification::set_has_some_text() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgTest_NotifyClient_Notification::clear_has_some_text() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgTest_NotifyClient_Notification::clear_some_text() {
  some_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_some_text();
}
const ::std::string& CMsgTest_NotifyClient_Notification::some_text() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgTest_NotifyClient_Notification.some_text)
  return some_text_.GetNoArena();
}
void CMsgTest_NotifyClient_Notification::set_some_text(const ::std::string& value) {
  set_has_some_text();
  some_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgTest_NotifyClient_Notification.some_text)
}
#if LANG_CXX11
void CMsgTest_NotifyClient_Notification::set_some_text(::std::string&& value) {
  set_has_some_text();
  some_text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgTest_NotifyClient_Notification.some_text)
}
#endif
void CMsgTest_NotifyClient_Notification::set_some_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_some_text();
  some_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgTest_NotifyClient_Notification.some_text)
}
void CMsgTest_NotifyClient_Notification::set_some_text(const char* value, size_t size) {
  set_has_some_text();
  some_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgTest_NotifyClient_Notification.some_text)
}
::std::string* CMsgTest_NotifyClient_Notification::mutable_some_text() {
  set_has_some_text();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgTest_NotifyClient_Notification.some_text)
  return some_text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgTest_NotifyClient_Notification::release_some_text() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgTest_NotifyClient_Notification.some_text)
  clear_has_some_text();
  return some_text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgTest_NotifyClient_Notification::set_allocated_some_text(::std::string* some_text) {
  if (some_text != NULL) {
    set_has_some_text();
  } else {
    clear_has_some_text();
  }
  some_text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), some_text);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgTest_NotifyClient_Notification.some_text)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgTest_MessageToServer_Request::kSomeTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgTest_MessageToServer_Request::CMsgTest_MessageToServer_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5funified_5ftest_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgTest_MessageToServer_Request)
}
CMsgTest_MessageToServer_Request::CMsgTest_MessageToServer_Request(const CMsgTest_MessageToServer_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  some_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_some_text()) {
    some_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.some_text_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgTest_MessageToServer_Request)
}

void CMsgTest_MessageToServer_Request::SharedCtor() {
  _cached_size_ = 0;
  some_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CMsgTest_MessageToServer_Request::~CMsgTest_MessageToServer_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgTest_MessageToServer_Request)
  SharedDtor();
}

void CMsgTest_MessageToServer_Request::SharedDtor() {
  some_text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgTest_MessageToServer_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTest_MessageToServer_Request::descriptor() {
  protobuf_steammessages_5funified_5ftest_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5funified_5ftest_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgTest_MessageToServer_Request& CMsgTest_MessageToServer_Request::default_instance() {
  protobuf_steammessages_5funified_5ftest_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgTest_MessageToServer_Request* CMsgTest_MessageToServer_Request::New(::google::protobuf::Arena* arena) const {
  CMsgTest_MessageToServer_Request* n = new CMsgTest_MessageToServer_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgTest_MessageToServer_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgTest_MessageToServer_Request)
  if (has_some_text()) {
    GOOGLE_DCHECK(!some_text_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*some_text_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgTest_MessageToServer_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgTest_MessageToServer_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string some_text = 1 [(.proto.steam.description) = "Some string."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_some_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->some_text().data(), this->some_text().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgTest_MessageToServer_Request.some_text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgTest_MessageToServer_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgTest_MessageToServer_Request)
  return false;
#undef DO_
}

void CMsgTest_MessageToServer_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgTest_MessageToServer_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string some_text = 1 [(.proto.steam.description) = "Some string."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->some_text().data(), this->some_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgTest_MessageToServer_Request.some_text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->some_text(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgTest_MessageToServer_Request)
}

::google::protobuf::uint8* CMsgTest_MessageToServer_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgTest_MessageToServer_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string some_text = 1 [(.proto.steam.description) = "Some string."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->some_text().data(), this->some_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgTest_MessageToServer_Request.some_text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->some_text(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgTest_MessageToServer_Request)
  return target;
}

size_t CMsgTest_MessageToServer_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgTest_MessageToServer_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional string some_text = 1 [(.proto.steam.description) = "Some string."];
  if (has_some_text()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->some_text());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTest_MessageToServer_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgTest_MessageToServer_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTest_MessageToServer_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgTest_MessageToServer_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgTest_MessageToServer_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgTest_MessageToServer_Request)
    MergeFrom(*source);
  }
}

void CMsgTest_MessageToServer_Request::MergeFrom(const CMsgTest_MessageToServer_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgTest_MessageToServer_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_some_text()) {
    set_has_some_text();
    some_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.some_text_);
  }
}

void CMsgTest_MessageToServer_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgTest_MessageToServer_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTest_MessageToServer_Request::CopyFrom(const CMsgTest_MessageToServer_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgTest_MessageToServer_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTest_MessageToServer_Request::IsInitialized() const {
  return true;
}

void CMsgTest_MessageToServer_Request::Swap(CMsgTest_MessageToServer_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgTest_MessageToServer_Request::InternalSwap(CMsgTest_MessageToServer_Request* other) {
  some_text_.Swap(&other->some_text_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgTest_MessageToServer_Request::GetMetadata() const {
  protobuf_steammessages_5funified_5ftest_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5funified_5ftest_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgTest_MessageToServer_Request

// optional string some_text = 1 [(.proto.steam.description) = "Some string."];
bool CMsgTest_MessageToServer_Request::has_some_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgTest_MessageToServer_Request::set_has_some_text() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgTest_MessageToServer_Request::clear_has_some_text() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgTest_MessageToServer_Request::clear_some_text() {
  some_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_some_text();
}
const ::std::string& CMsgTest_MessageToServer_Request::some_text() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgTest_MessageToServer_Request.some_text)
  return some_text_.GetNoArena();
}
void CMsgTest_MessageToServer_Request::set_some_text(const ::std::string& value) {
  set_has_some_text();
  some_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgTest_MessageToServer_Request.some_text)
}
#if LANG_CXX11
void CMsgTest_MessageToServer_Request::set_some_text(::std::string&& value) {
  set_has_some_text();
  some_text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgTest_MessageToServer_Request.some_text)
}
#endif
void CMsgTest_MessageToServer_Request::set_some_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_some_text();
  some_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgTest_MessageToServer_Request.some_text)
}
void CMsgTest_MessageToServer_Request::set_some_text(const char* value, size_t size) {
  set_has_some_text();
  some_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgTest_MessageToServer_Request.some_text)
}
::std::string* CMsgTest_MessageToServer_Request::mutable_some_text() {
  set_has_some_text();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgTest_MessageToServer_Request.some_text)
  return some_text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgTest_MessageToServer_Request::release_some_text() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgTest_MessageToServer_Request.some_text)
  clear_has_some_text();
  return some_text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgTest_MessageToServer_Request::set_allocated_some_text(::std::string* some_text) {
  if (some_text != NULL) {
    set_has_some_text();
  } else {
    clear_has_some_text();
  }
  some_text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), some_text);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgTest_MessageToServer_Request.some_text)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgTest_MessageToServer_Response::kSomeTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgTest_MessageToServer_Response::CMsgTest_MessageToServer_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5funified_5ftest_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgTest_MessageToServer_Response)
}
CMsgTest_MessageToServer_Response::CMsgTest_MessageToServer_Response(const CMsgTest_MessageToServer_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  some_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_some_text()) {
    some_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.some_text_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgTest_MessageToServer_Response)
}

void CMsgTest_MessageToServer_Response::SharedCtor() {
  _cached_size_ = 0;
  some_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CMsgTest_MessageToServer_Response::~CMsgTest_MessageToServer_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgTest_MessageToServer_Response)
  SharedDtor();
}

void CMsgTest_MessageToServer_Response::SharedDtor() {
  some_text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgTest_MessageToServer_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTest_MessageToServer_Response::descriptor() {
  protobuf_steammessages_5funified_5ftest_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5funified_5ftest_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgTest_MessageToServer_Response& CMsgTest_MessageToServer_Response::default_instance() {
  protobuf_steammessages_5funified_5ftest_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgTest_MessageToServer_Response* CMsgTest_MessageToServer_Response::New(::google::protobuf::Arena* arena) const {
  CMsgTest_MessageToServer_Response* n = new CMsgTest_MessageToServer_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgTest_MessageToServer_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgTest_MessageToServer_Response)
  if (has_some_text()) {
    GOOGLE_DCHECK(!some_text_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*some_text_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgTest_MessageToServer_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgTest_MessageToServer_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string some_text = 1 [(.proto.steam.description) = "Some string."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_some_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->some_text().data(), this->some_text().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgTest_MessageToServer_Response.some_text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgTest_MessageToServer_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgTest_MessageToServer_Response)
  return false;
#undef DO_
}

void CMsgTest_MessageToServer_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgTest_MessageToServer_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string some_text = 1 [(.proto.steam.description) = "Some string."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->some_text().data(), this->some_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgTest_MessageToServer_Response.some_text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->some_text(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgTest_MessageToServer_Response)
}

::google::protobuf::uint8* CMsgTest_MessageToServer_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgTest_MessageToServer_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string some_text = 1 [(.proto.steam.description) = "Some string."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->some_text().data(), this->some_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgTest_MessageToServer_Response.some_text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->some_text(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgTest_MessageToServer_Response)
  return target;
}

size_t CMsgTest_MessageToServer_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgTest_MessageToServer_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional string some_text = 1 [(.proto.steam.description) = "Some string."];
  if (has_some_text()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->some_text());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTest_MessageToServer_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgTest_MessageToServer_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTest_MessageToServer_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgTest_MessageToServer_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgTest_MessageToServer_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgTest_MessageToServer_Response)
    MergeFrom(*source);
  }
}

void CMsgTest_MessageToServer_Response::MergeFrom(const CMsgTest_MessageToServer_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgTest_MessageToServer_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_some_text()) {
    set_has_some_text();
    some_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.some_text_);
  }
}

void CMsgTest_MessageToServer_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgTest_MessageToServer_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTest_MessageToServer_Response::CopyFrom(const CMsgTest_MessageToServer_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgTest_MessageToServer_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTest_MessageToServer_Response::IsInitialized() const {
  return true;
}

void CMsgTest_MessageToServer_Response::Swap(CMsgTest_MessageToServer_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgTest_MessageToServer_Response::InternalSwap(CMsgTest_MessageToServer_Response* other) {
  some_text_.Swap(&other->some_text_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgTest_MessageToServer_Response::GetMetadata() const {
  protobuf_steammessages_5funified_5ftest_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5funified_5ftest_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgTest_MessageToServer_Response

// optional string some_text = 1 [(.proto.steam.description) = "Some string."];
bool CMsgTest_MessageToServer_Response::has_some_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgTest_MessageToServer_Response::set_has_some_text() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgTest_MessageToServer_Response::clear_has_some_text() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgTest_MessageToServer_Response::clear_some_text() {
  some_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_some_text();
}
const ::std::string& CMsgTest_MessageToServer_Response::some_text() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgTest_MessageToServer_Response.some_text)
  return some_text_.GetNoArena();
}
void CMsgTest_MessageToServer_Response::set_some_text(const ::std::string& value) {
  set_has_some_text();
  some_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgTest_MessageToServer_Response.some_text)
}
#if LANG_CXX11
void CMsgTest_MessageToServer_Response::set_some_text(::std::string&& value) {
  set_has_some_text();
  some_text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgTest_MessageToServer_Response.some_text)
}
#endif
void CMsgTest_MessageToServer_Response::set_some_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_some_text();
  some_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgTest_MessageToServer_Response.some_text)
}
void CMsgTest_MessageToServer_Response::set_some_text(const char* value, size_t size) {
  set_has_some_text();
  some_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgTest_MessageToServer_Response.some_text)
}
::std::string* CMsgTest_MessageToServer_Response::mutable_some_text() {
  set_has_some_text();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgTest_MessageToServer_Response.some_text)
  return some_text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgTest_MessageToServer_Response::release_some_text() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgTest_MessageToServer_Response.some_text)
  clear_has_some_text();
  return some_text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgTest_MessageToServer_Response::set_allocated_some_text(::std::string* some_text) {
  if (some_text != NULL) {
    set_has_some_text();
  } else {
    clear_has_some_text();
  }
  some_text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), some_text);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgTest_MessageToServer_Response.some_text)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgTest_NotifyServer_Notification::kSomeTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgTest_NotifyServer_Notification::CMsgTest_NotifyServer_Notification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5funified_5ftest_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CMsgTest_NotifyServer_Notification)
}
CMsgTest_NotifyServer_Notification::CMsgTest_NotifyServer_Notification(const CMsgTest_NotifyServer_Notification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  some_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_some_text()) {
    some_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.some_text_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.steam.CMsgTest_NotifyServer_Notification)
}

void CMsgTest_NotifyServer_Notification::SharedCtor() {
  _cached_size_ = 0;
  some_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CMsgTest_NotifyServer_Notification::~CMsgTest_NotifyServer_Notification() {
  // @@protoc_insertion_point(destructor:proto.steam.CMsgTest_NotifyServer_Notification)
  SharedDtor();
}

void CMsgTest_NotifyServer_Notification::SharedDtor() {
  some_text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgTest_NotifyServer_Notification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgTest_NotifyServer_Notification::descriptor() {
  protobuf_steammessages_5funified_5ftest_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5funified_5ftest_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgTest_NotifyServer_Notification& CMsgTest_NotifyServer_Notification::default_instance() {
  protobuf_steammessages_5funified_5ftest_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgTest_NotifyServer_Notification* CMsgTest_NotifyServer_Notification::New(::google::protobuf::Arena* arena) const {
  CMsgTest_NotifyServer_Notification* n = new CMsgTest_NotifyServer_Notification;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgTest_NotifyServer_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CMsgTest_NotifyServer_Notification)
  if (has_some_text()) {
    GOOGLE_DCHECK(!some_text_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*some_text_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgTest_NotifyServer_Notification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CMsgTest_NotifyServer_Notification)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string some_text = 1 [(.proto.steam.description) = "Some string."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_some_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->some_text().data(), this->some_text().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CMsgTest_NotifyServer_Notification.some_text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CMsgTest_NotifyServer_Notification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CMsgTest_NotifyServer_Notification)
  return false;
#undef DO_
}

void CMsgTest_NotifyServer_Notification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CMsgTest_NotifyServer_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string some_text = 1 [(.proto.steam.description) = "Some string."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->some_text().data(), this->some_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgTest_NotifyServer_Notification.some_text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->some_text(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CMsgTest_NotifyServer_Notification)
}

::google::protobuf::uint8* CMsgTest_NotifyServer_Notification::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CMsgTest_NotifyServer_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string some_text = 1 [(.proto.steam.description) = "Some string."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->some_text().data(), this->some_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CMsgTest_NotifyServer_Notification.some_text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->some_text(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CMsgTest_NotifyServer_Notification)
  return target;
}

size_t CMsgTest_NotifyServer_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CMsgTest_NotifyServer_Notification)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional string some_text = 1 [(.proto.steam.description) = "Some string."];
  if (has_some_text()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->some_text());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgTest_NotifyServer_Notification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CMsgTest_NotifyServer_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgTest_NotifyServer_Notification* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgTest_NotifyServer_Notification>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CMsgTest_NotifyServer_Notification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CMsgTest_NotifyServer_Notification)
    MergeFrom(*source);
  }
}

void CMsgTest_NotifyServer_Notification::MergeFrom(const CMsgTest_NotifyServer_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CMsgTest_NotifyServer_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_some_text()) {
    set_has_some_text();
    some_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.some_text_);
  }
}

void CMsgTest_NotifyServer_Notification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CMsgTest_NotifyServer_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgTest_NotifyServer_Notification::CopyFrom(const CMsgTest_NotifyServer_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CMsgTest_NotifyServer_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTest_NotifyServer_Notification::IsInitialized() const {
  return true;
}

void CMsgTest_NotifyServer_Notification::Swap(CMsgTest_NotifyServer_Notification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgTest_NotifyServer_Notification::InternalSwap(CMsgTest_NotifyServer_Notification* other) {
  some_text_.Swap(&other->some_text_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgTest_NotifyServer_Notification::GetMetadata() const {
  protobuf_steammessages_5funified_5ftest_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5funified_5ftest_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgTest_NotifyServer_Notification

// optional string some_text = 1 [(.proto.steam.description) = "Some string."];
bool CMsgTest_NotifyServer_Notification::has_some_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgTest_NotifyServer_Notification::set_has_some_text() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgTest_NotifyServer_Notification::clear_has_some_text() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgTest_NotifyServer_Notification::clear_some_text() {
  some_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_some_text();
}
const ::std::string& CMsgTest_NotifyServer_Notification::some_text() const {
  // @@protoc_insertion_point(field_get:proto.steam.CMsgTest_NotifyServer_Notification.some_text)
  return some_text_.GetNoArena();
}
void CMsgTest_NotifyServer_Notification::set_some_text(const ::std::string& value) {
  set_has_some_text();
  some_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CMsgTest_NotifyServer_Notification.some_text)
}
#if LANG_CXX11
void CMsgTest_NotifyServer_Notification::set_some_text(::std::string&& value) {
  set_has_some_text();
  some_text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CMsgTest_NotifyServer_Notification.some_text)
}
#endif
void CMsgTest_NotifyServer_Notification::set_some_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_some_text();
  some_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CMsgTest_NotifyServer_Notification.some_text)
}
void CMsgTest_NotifyServer_Notification::set_some_text(const char* value, size_t size) {
  set_has_some_text();
  some_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CMsgTest_NotifyServer_Notification.some_text)
}
::std::string* CMsgTest_NotifyServer_Notification::mutable_some_text() {
  set_has_some_text();
  // @@protoc_insertion_point(field_mutable:proto.steam.CMsgTest_NotifyServer_Notification.some_text)
  return some_text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgTest_NotifyServer_Notification::release_some_text() {
  // @@protoc_insertion_point(field_release:proto.steam.CMsgTest_NotifyServer_Notification.some_text)
  clear_has_some_text();
  return some_text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgTest_NotifyServer_Notification::set_allocated_some_text(::std::string* some_text) {
  if (some_text != NULL) {
    set_has_some_text();
  } else {
    clear_has_some_text();
  }
  some_text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), some_text);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CMsgTest_NotifyServer_Notification.some_text)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

TestSteamClient::~TestSteamClient() {}

const ::google::protobuf::ServiceDescriptor* TestSteamClient::descriptor() {
  protobuf_steammessages_5funified_5ftest_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5funified_5ftest_2esteamclient_2eproto::file_level_service_descriptors[0];
}

const ::google::protobuf::ServiceDescriptor* TestSteamClient::GetDescriptor() {
  return descriptor();
}

void TestSteamClient::MessageToClient(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CMsgTest_MessageToClient_Request*,
                         ::proto::steam::CMsgTest_MessageToClient_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method MessageToClient() not implemented.");
  done->Run();
}

void TestSteamClient::NotifyClient(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CMsgTest_NotifyClient_Notification*,
                         ::proto::steam::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyClient() not implemented.");
  done->Run();
}

void TestSteamClient::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), protobuf_steammessages_5funified_5ftest_2esteamclient_2eproto::file_level_service_descriptors[0]);
  switch(method->index()) {
    case 0:
      MessageToClient(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CMsgTest_MessageToClient_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CMsgTest_MessageToClient_Response*>(response),
             done);
      break;
    case 1:
      NotifyClient(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CMsgTest_NotifyClient_Notification*>(request),
             ::google::protobuf::down_cast< ::proto::steam::NoResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& TestSteamClient::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::steam::CMsgTest_MessageToClient_Request::default_instance();
    case 1:
      return ::proto::steam::CMsgTest_NotifyClient_Notification::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& TestSteamClient::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::steam::CMsgTest_MessageToClient_Response::default_instance();
    case 1:
      return ::proto::steam::NoResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

TestSteamClient_Stub::TestSteamClient_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
TestSteamClient_Stub::TestSteamClient_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
TestSteamClient_Stub::~TestSteamClient_Stub() {
  if (owns_channel_) delete channel_;
}

void TestSteamClient_Stub::MessageToClient(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CMsgTest_MessageToClient_Request* request,
                              ::proto::steam::CMsgTest_MessageToClient_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void TestSteamClient_Stub::NotifyClient(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CMsgTest_NotifyClient_Notification* request,
                              ::proto::steam::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
// ===================================================================

TestServerFromClient::~TestServerFromClient() {}

const ::google::protobuf::ServiceDescriptor* TestServerFromClient::descriptor() {
  protobuf_steammessages_5funified_5ftest_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5funified_5ftest_2esteamclient_2eproto::file_level_service_descriptors[1];
}

const ::google::protobuf::ServiceDescriptor* TestServerFromClient::GetDescriptor() {
  return descriptor();
}

void TestServerFromClient::MessageToServer(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CMsgTest_MessageToServer_Request*,
                         ::proto::steam::CMsgTest_MessageToServer_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method MessageToServer() not implemented.");
  done->Run();
}

void TestServerFromClient::NotifyServer(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CMsgTest_NotifyServer_Notification*,
                         ::proto::steam::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyServer() not implemented.");
  done->Run();
}

void TestServerFromClient::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), protobuf_steammessages_5funified_5ftest_2esteamclient_2eproto::file_level_service_descriptors[1]);
  switch(method->index()) {
    case 0:
      MessageToServer(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CMsgTest_MessageToServer_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CMsgTest_MessageToServer_Response*>(response),
             done);
      break;
    case 1:
      NotifyServer(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CMsgTest_NotifyServer_Notification*>(request),
             ::google::protobuf::down_cast< ::proto::steam::NoResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& TestServerFromClient::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::steam::CMsgTest_MessageToServer_Request::default_instance();
    case 1:
      return ::proto::steam::CMsgTest_NotifyServer_Notification::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& TestServerFromClient::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::steam::CMsgTest_MessageToServer_Response::default_instance();
    case 1:
      return ::proto::steam::NoResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

TestServerFromClient_Stub::TestServerFromClient_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
TestServerFromClient_Stub::TestServerFromClient_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
TestServerFromClient_Stub::~TestServerFromClient_Stub() {
  if (owns_channel_) delete channel_;
}

void TestServerFromClient_Stub::MessageToServer(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CMsgTest_MessageToServer_Request* request,
                              ::proto::steam::CMsgTest_MessageToServer_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void TestServerFromClient_Stub::NotifyServer(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CMsgTest_NotifyServer_Notification* request,
                              ::proto::steam::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace steam
}  // namespace proto

// @@protoc_insertion_point(global_scope)
