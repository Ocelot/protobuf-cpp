// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_gameservers.steamclient.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "steammessages_gameservers.steamclient.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace steam {
class CGameServers_GetServerList_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CGameServers_GetServerList_Request> {
} _CGameServers_GetServerList_Request_default_instance_;
class CGameServers_GetServerList_Response_ServerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CGameServers_GetServerList_Response_Server> {
} _CGameServers_GetServerList_Response_Server_default_instance_;
class CGameServers_GetServerList_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CGameServers_GetServerList_Response> {
} _CGameServers_GetServerList_Response_default_instance_;
class CGameServers_GetServerSteamIDsByIP_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CGameServers_GetServerSteamIDsByIP_Request> {
} _CGameServers_GetServerSteamIDsByIP_Request_default_instance_;
class CGameServers_IPsWithSteamIDs_Response_ServerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CGameServers_IPsWithSteamIDs_Response_Server> {
} _CGameServers_IPsWithSteamIDs_Response_Server_default_instance_;
class CGameServers_IPsWithSteamIDs_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CGameServers_IPsWithSteamIDs_Response> {
} _CGameServers_IPsWithSteamIDs_Response_default_instance_;
class CGameServers_GetServerIPsBySteamID_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CGameServers_GetServerIPsBySteamID_Request> {
} _CGameServers_GetServerIPsBySteamID_Request_default_instance_;

namespace protobuf_steammessages_5fgameservers_2esteamclient_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[7];
const ::google::protobuf::ServiceDescriptor* file_level_service_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameServers_GetServerList_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameServers_GetServerList_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameServers_GetServerList_Request, filter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameServers_GetServerList_Request, limit_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameServers_GetServerList_Response_Server, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameServers_GetServerList_Response_Server, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameServers_GetServerList_Response_Server, addr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameServers_GetServerList_Response_Server, gameport_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameServers_GetServerList_Response_Server, specport_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameServers_GetServerList_Response_Server, steamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameServers_GetServerList_Response_Server, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameServers_GetServerList_Response_Server, appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameServers_GetServerList_Response_Server, gamedir_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameServers_GetServerList_Response_Server, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameServers_GetServerList_Response_Server, product_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameServers_GetServerList_Response_Server, region_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameServers_GetServerList_Response_Server, players_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameServers_GetServerList_Response_Server, max_players_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameServers_GetServerList_Response_Server, bots_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameServers_GetServerList_Response_Server, map_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameServers_GetServerList_Response_Server, secure_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameServers_GetServerList_Response_Server, dedicated_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameServers_GetServerList_Response_Server, os_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameServers_GetServerList_Response_Server, gametype_),
  0,
  8,
  9,
  10,
  1,
  11,
  2,
  3,
  4,
  12,
  13,
  14,
  15,
  5,
  16,
  17,
  6,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameServers_GetServerList_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameServers_GetServerList_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameServers_GetServerList_Response, servers_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameServers_GetServerSteamIDsByIP_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameServers_GetServerSteamIDsByIP_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameServers_GetServerSteamIDsByIP_Request, server_ips_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameServers_IPsWithSteamIDs_Response_Server, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameServers_IPsWithSteamIDs_Response_Server, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameServers_IPsWithSteamIDs_Response_Server, addr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameServers_IPsWithSteamIDs_Response_Server, steamid_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameServers_IPsWithSteamIDs_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameServers_IPsWithSteamIDs_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameServers_IPsWithSteamIDs_Response, servers_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameServers_GetServerIPsBySteamID_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameServers_GetServerIPsBySteamID_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameServers_GetServerIPsBySteamID_Request, server_steamids_),
  ~0u,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 7, sizeof(CGameServers_GetServerList_Request)},
  { 9, 32, sizeof(CGameServers_GetServerList_Response_Server)},
  { 50, 56, sizeof(CGameServers_GetServerList_Response)},
  { 57, 63, sizeof(CGameServers_GetServerSteamIDsByIP_Request)},
  { 64, 71, sizeof(CGameServers_IPsWithSteamIDs_Response_Server)},
  { 73, 79, sizeof(CGameServers_IPsWithSteamIDs_Response)},
  { 80, 86, sizeof(CGameServers_GetServerIPsBySteamID_Request)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CGameServers_GetServerList_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CGameServers_GetServerList_Response_Server_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CGameServers_GetServerList_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CGameServers_GetServerSteamIDsByIP_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CGameServers_IPsWithSteamIDs_Response_Server_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CGameServers_IPsWithSteamIDs_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CGameServers_GetServerIPsBySteamID_Request_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "steammessages_gameservers.steamclient.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, file_level_service_descriptors);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 7);
}

}  // namespace

void TableStruct::Shutdown() {
  _CGameServers_GetServerList_Request_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _CGameServers_GetServerList_Response_Server_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _CGameServers_GetServerList_Response_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _CGameServers_GetServerSteamIDsByIP_Request_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _CGameServers_IPsWithSteamIDs_Response_Server_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _CGameServers_IPsWithSteamIDs_Response_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _CGameServers_GetServerIPsBySteamID_Request_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::proto::steam::protobuf_steammessages_5funified_5fbase_2esteamclient_2eproto::InitDefaults();
  _CGameServers_GetServerList_Request_default_instance_.DefaultConstruct();
  _CGameServers_GetServerList_Response_Server_default_instance_.DefaultConstruct();
  _CGameServers_GetServerList_Response_default_instance_.DefaultConstruct();
  _CGameServers_GetServerSteamIDsByIP_Request_default_instance_.DefaultConstruct();
  _CGameServers_IPsWithSteamIDs_Response_Server_default_instance_.DefaultConstruct();
  _CGameServers_IPsWithSteamIDs_Response_default_instance_.DefaultConstruct();
  _CGameServers_GetServerIPsBySteamID_Request_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n+steammessages_gameservers.steamclient."
      "proto\022\013proto.steam\032,steammessages_unifie"
      "d_base.steamclient.proto\"\237\001\n\"CGameServer"
      "s_GetServerList_Request\022(\n\006filter\030\001 \001(\tB"
      "\030\202\265\030\024Query filter string.\022O\n\005limit\030\002 \001(\r"
      ":\003100B;\202\265\0307The maximum number of servers"
      " to return in the response\"\354\003\n#CGameServ"
      "ers_GetServerList_Response\022q\n\007servers\030\001 "
      "\003(\01327.proto.steam.CGameServers_GetServer"
      "List_Response.ServerB\'\202\265\030#List of server"
      "s matching the filter\032\321\002\n\006Server\0220\n\004addr"
      "\030\001 \001(\tB\"\202\265\030\036The server\'s IP and query po"
      "rt\022\020\n\010gameport\030\002 \001(\r\022\020\n\010specport\030\003 \001(\r\022\017"
      "\n\007steamid\030\004 \001(\006\022\014\n\004name\030\005 \001(\t\022\r\n\005appid\030\006"
      " \001(\r\022\017\n\007gamedir\030\007 \001(\t\022\017\n\007version\030\010 \001(\t\022\017"
      "\n\007product\030\t \001(\t\022\016\n\006region\030\n \001(\005\022\017\n\007playe"
      "rs\030\013 \001(\005\022\023\n\013max_players\030\014 \001(\005\022\014\n\004bots\030\r "
      "\001(\005\022\013\n\003map\030\016 \001(\t\022\016\n\006secure\030\017 \001(\010\022\021\n\tdedi"
      "cated\030\020 \001(\010\022\n\n\002os\030\021 \001(\t\022\020\n\010gametype\030\022 \001("
      "\t\"@\n*CGameServers_GetServerSteamIDsByIP_"
      "Request\022\022\n\nserver_ips\030\001 \003(\t\"\234\001\n%CGameSer"
      "vers_IPsWithSteamIDs_Response\022J\n\007servers"
      "\030\001 \003(\01329.proto.steam.CGameServers_IPsWit"
      "hSteamIDs_Response.Server\032\'\n\006Server\022\014\n\004a"
      "ddr\030\001 \001(\t\022\017\n\007steamid\030\002 \001(\006\"E\n*CGameServe"
      "rs_GetServerIPsBySteamID_Request\022\027\n\017serv"
      "er_steamids\030\001 \003(\0062\363\004\n\013GameServers\022\244\001\n\rGe"
      "tServerList\022/.proto.steam.CGameServers_G"
      "etServerList_Request\0320.proto.steam.CGame"
      "Servers_GetServerList_Response\"0\202\265\030,Gets"
      " a list of servers given a filter string"
      "\022\274\001\n\025GetServerSteamIDsByIP\0227.proto.steam"
      ".CGameServers_GetServerSteamIDsByIP_Requ"
      "est\0322.proto.steam.CGameServers_IPsWithSt"
      "eamIDs_Response\"6\202\265\0302Gets a list of serv"
      "er SteamIDs given a list of IPs\022\305\001\n\025GetS"
      "erverIPsBySteamID\0227.proto.steam.CGameSer"
      "vers_GetServerIPsBySteamID_Request\0322.pro"
      "to.steam.CGameServers_IPsWithSteamIDs_Re"
      "sponse\"\?\202\265\030;Gets a list of server IP add"
      "resses given a list of SteamIDs\0326\202\265\0302A s"
      "ervice for searching and managing game s"
      "ervers.B\003\200\001\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1692);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "steammessages_gameservers.steamclient.proto", &protobuf_RegisterTypes);
  ::proto::steam::protobuf_steammessages_5funified_5fbase_2esteamclient_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_steammessages_5fgameservers_2esteamclient_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGameServers_GetServerList_Request::kFilterFieldNumber;
const int CGameServers_GetServerList_Request::kLimitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGameServers_GetServerList_Request::CGameServers_GetServerList_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fgameservers_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CGameServers_GetServerList_Request)
}
CGameServers_GetServerList_Request::CGameServers_GetServerList_Request(const CGameServers_GetServerList_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_filter()) {
    filter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filter_);
  }
  limit_ = from.limit_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CGameServers_GetServerList_Request)
}

void CGameServers_GetServerList_Request::SharedCtor() {
  _cached_size_ = 0;
  filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  limit_ = 100u;
}

CGameServers_GetServerList_Request::~CGameServers_GetServerList_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CGameServers_GetServerList_Request)
  SharedDtor();
}

void CGameServers_GetServerList_Request::SharedDtor() {
  filter_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CGameServers_GetServerList_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGameServers_GetServerList_Request::descriptor() {
  protobuf_steammessages_5fgameservers_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fgameservers_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CGameServers_GetServerList_Request& CGameServers_GetServerList_Request::default_instance() {
  protobuf_steammessages_5fgameservers_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CGameServers_GetServerList_Request* CGameServers_GetServerList_Request::New(::google::protobuf::Arena* arena) const {
  CGameServers_GetServerList_Request* n = new CGameServers_GetServerList_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CGameServers_GetServerList_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CGameServers_GetServerList_Request)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_filter()) {
      GOOGLE_DCHECK(!filter_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*filter_.UnsafeRawStringPointer())->clear();
    }
    limit_ = 100u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CGameServers_GetServerList_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CGameServers_GetServerList_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string filter = 1 [(.proto.steam.description) = "Query filter string."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filter()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filter().data(), this->filter().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CGameServers_GetServerList_Request.filter");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 limit = 2 [default = 100, (.proto.steam.description) = "The maximum number of servers to return in the response"];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_limit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CGameServers_GetServerList_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CGameServers_GetServerList_Request)
  return false;
#undef DO_
}

void CGameServers_GetServerList_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CGameServers_GetServerList_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string filter = 1 [(.proto.steam.description) = "Query filter string."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filter().data(), this->filter().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CGameServers_GetServerList_Request.filter");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->filter(), output);
  }

  // optional uint32 limit = 2 [default = 100, (.proto.steam.description) = "The maximum number of servers to return in the response"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->limit(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CGameServers_GetServerList_Request)
}

::google::protobuf::uint8* CGameServers_GetServerList_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CGameServers_GetServerList_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string filter = 1 [(.proto.steam.description) = "Query filter string."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filter().data(), this->filter().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CGameServers_GetServerList_Request.filter");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->filter(), target);
  }

  // optional uint32 limit = 2 [default = 100, (.proto.steam.description) = "The maximum number of servers to return in the response"];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->limit(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CGameServers_GetServerList_Request)
  return target;
}

size_t CGameServers_GetServerList_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CGameServers_GetServerList_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string filter = 1 [(.proto.steam.description) = "Query filter string."];
    if (has_filter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filter());
    }

    // optional uint32 limit = 2 [default = 100, (.proto.steam.description) = "The maximum number of servers to return in the response"];
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->limit());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGameServers_GetServerList_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CGameServers_GetServerList_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameServers_GetServerList_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CGameServers_GetServerList_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CGameServers_GetServerList_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CGameServers_GetServerList_Request)
    MergeFrom(*source);
  }
}

void CGameServers_GetServerList_Request::MergeFrom(const CGameServers_GetServerList_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CGameServers_GetServerList_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_filter();
      filter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filter_);
    }
    if (cached_has_bits & 0x00000002u) {
      limit_ = from.limit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGameServers_GetServerList_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CGameServers_GetServerList_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameServers_GetServerList_Request::CopyFrom(const CGameServers_GetServerList_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CGameServers_GetServerList_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameServers_GetServerList_Request::IsInitialized() const {
  return true;
}

void CGameServers_GetServerList_Request::Swap(CGameServers_GetServerList_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGameServers_GetServerList_Request::InternalSwap(CGameServers_GetServerList_Request* other) {
  filter_.Swap(&other->filter_);
  std::swap(limit_, other->limit_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CGameServers_GetServerList_Request::GetMetadata() const {
  protobuf_steammessages_5fgameservers_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fgameservers_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CGameServers_GetServerList_Request

// optional string filter = 1 [(.proto.steam.description) = "Query filter string."];
bool CGameServers_GetServerList_Request::has_filter() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CGameServers_GetServerList_Request::set_has_filter() {
  _has_bits_[0] |= 0x00000001u;
}
void CGameServers_GetServerList_Request::clear_has_filter() {
  _has_bits_[0] &= ~0x00000001u;
}
void CGameServers_GetServerList_Request::clear_filter() {
  filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_filter();
}
const ::std::string& CGameServers_GetServerList_Request::filter() const {
  // @@protoc_insertion_point(field_get:proto.steam.CGameServers_GetServerList_Request.filter)
  return filter_.GetNoArena();
}
void CGameServers_GetServerList_Request::set_filter(const ::std::string& value) {
  set_has_filter();
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CGameServers_GetServerList_Request.filter)
}
#if LANG_CXX11
void CGameServers_GetServerList_Request::set_filter(::std::string&& value) {
  set_has_filter();
  filter_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CGameServers_GetServerList_Request.filter)
}
#endif
void CGameServers_GetServerList_Request::set_filter(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_filter();
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CGameServers_GetServerList_Request.filter)
}
void CGameServers_GetServerList_Request::set_filter(const char* value, size_t size) {
  set_has_filter();
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CGameServers_GetServerList_Request.filter)
}
::std::string* CGameServers_GetServerList_Request::mutable_filter() {
  set_has_filter();
  // @@protoc_insertion_point(field_mutable:proto.steam.CGameServers_GetServerList_Request.filter)
  return filter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CGameServers_GetServerList_Request::release_filter() {
  // @@protoc_insertion_point(field_release:proto.steam.CGameServers_GetServerList_Request.filter)
  clear_has_filter();
  return filter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CGameServers_GetServerList_Request::set_allocated_filter(::std::string* filter) {
  if (filter != NULL) {
    set_has_filter();
  } else {
    clear_has_filter();
  }
  filter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filter);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CGameServers_GetServerList_Request.filter)
}

// optional uint32 limit = 2 [default = 100, (.proto.steam.description) = "The maximum number of servers to return in the response"];
bool CGameServers_GetServerList_Request::has_limit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CGameServers_GetServerList_Request::set_has_limit() {
  _has_bits_[0] |= 0x00000002u;
}
void CGameServers_GetServerList_Request::clear_has_limit() {
  _has_bits_[0] &= ~0x00000002u;
}
void CGameServers_GetServerList_Request::clear_limit() {
  limit_ = 100u;
  clear_has_limit();
}
::google::protobuf::uint32 CGameServers_GetServerList_Request::limit() const {
  // @@protoc_insertion_point(field_get:proto.steam.CGameServers_GetServerList_Request.limit)
  return limit_;
}
void CGameServers_GetServerList_Request::set_limit(::google::protobuf::uint32 value) {
  set_has_limit();
  limit_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CGameServers_GetServerList_Request.limit)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGameServers_GetServerList_Response_Server::kAddrFieldNumber;
const int CGameServers_GetServerList_Response_Server::kGameportFieldNumber;
const int CGameServers_GetServerList_Response_Server::kSpecportFieldNumber;
const int CGameServers_GetServerList_Response_Server::kSteamidFieldNumber;
const int CGameServers_GetServerList_Response_Server::kNameFieldNumber;
const int CGameServers_GetServerList_Response_Server::kAppidFieldNumber;
const int CGameServers_GetServerList_Response_Server::kGamedirFieldNumber;
const int CGameServers_GetServerList_Response_Server::kVersionFieldNumber;
const int CGameServers_GetServerList_Response_Server::kProductFieldNumber;
const int CGameServers_GetServerList_Response_Server::kRegionFieldNumber;
const int CGameServers_GetServerList_Response_Server::kPlayersFieldNumber;
const int CGameServers_GetServerList_Response_Server::kMaxPlayersFieldNumber;
const int CGameServers_GetServerList_Response_Server::kBotsFieldNumber;
const int CGameServers_GetServerList_Response_Server::kMapFieldNumber;
const int CGameServers_GetServerList_Response_Server::kSecureFieldNumber;
const int CGameServers_GetServerList_Response_Server::kDedicatedFieldNumber;
const int CGameServers_GetServerList_Response_Server::kOsFieldNumber;
const int CGameServers_GetServerList_Response_Server::kGametypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGameServers_GetServerList_Response_Server::CGameServers_GetServerList_Response_Server()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fgameservers_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CGameServers_GetServerList_Response.Server)
}
CGameServers_GetServerList_Response_Server::CGameServers_GetServerList_Response_Server(const CGameServers_GetServerList_Response_Server& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_addr()) {
    addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addr_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  gamedir_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_gamedir()) {
    gamedir_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gamedir_);
  }
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_version()) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  product_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_product()) {
    product_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.product_);
  }
  map_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_map()) {
    map_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_);
  }
  os_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_os()) {
    os_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.os_);
  }
  gametype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_gametype()) {
    gametype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gametype_);
  }
  ::memcpy(&gameport_, &from.gameport_,
    reinterpret_cast<char*>(&dedicated_) -
    reinterpret_cast<char*>(&gameport_) + sizeof(dedicated_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CGameServers_GetServerList_Response.Server)
}

void CGameServers_GetServerList_Response_Server::SharedCtor() {
  _cached_size_ = 0;
  addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gamedir_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  product_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  map_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  os_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gametype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&gameport_, 0, reinterpret_cast<char*>(&dedicated_) -
    reinterpret_cast<char*>(&gameport_) + sizeof(dedicated_));
}

CGameServers_GetServerList_Response_Server::~CGameServers_GetServerList_Response_Server() {
  // @@protoc_insertion_point(destructor:proto.steam.CGameServers_GetServerList_Response.Server)
  SharedDtor();
}

void CGameServers_GetServerList_Response_Server::SharedDtor() {
  addr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gamedir_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  product_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  map_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  os_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gametype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CGameServers_GetServerList_Response_Server::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGameServers_GetServerList_Response_Server::descriptor() {
  protobuf_steammessages_5fgameservers_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fgameservers_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CGameServers_GetServerList_Response_Server& CGameServers_GetServerList_Response_Server::default_instance() {
  protobuf_steammessages_5fgameservers_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CGameServers_GetServerList_Response_Server* CGameServers_GetServerList_Response_Server::New(::google::protobuf::Arena* arena) const {
  CGameServers_GetServerList_Response_Server* n = new CGameServers_GetServerList_Response_Server;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CGameServers_GetServerList_Response_Server::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CGameServers_GetServerList_Response.Server)
  if (_has_bits_[0 / 32] & 255u) {
    if (has_addr()) {
      GOOGLE_DCHECK(!addr_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*addr_.UnsafeRawStringPointer())->clear();
    }
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_gamedir()) {
      GOOGLE_DCHECK(!gamedir_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*gamedir_.UnsafeRawStringPointer())->clear();
    }
    if (has_version()) {
      GOOGLE_DCHECK(!version_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*version_.UnsafeRawStringPointer())->clear();
    }
    if (has_product()) {
      GOOGLE_DCHECK(!product_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*product_.UnsafeRawStringPointer())->clear();
    }
    if (has_map()) {
      GOOGLE_DCHECK(!map_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*map_.UnsafeRawStringPointer())->clear();
    }
    if (has_os()) {
      GOOGLE_DCHECK(!os_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*os_.UnsafeRawStringPointer())->clear();
    }
    if (has_gametype()) {
      GOOGLE_DCHECK(!gametype_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*gametype_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&gameport_, 0, reinterpret_cast<char*>(&bots_) -
      reinterpret_cast<char*>(&gameport_) + sizeof(bots_));
  }
  if (_has_bits_[16 / 32] & 196608u) {
    ::memset(&secure_, 0, reinterpret_cast<char*>(&dedicated_) -
      reinterpret_cast<char*>(&secure_) + sizeof(dedicated_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CGameServers_GetServerList_Response_Server::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CGameServers_GetServerList_Response.Server)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string addr = 1 [(.proto.steam.description) = "The server\'s IP and query port"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_addr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->addr().data(), this->addr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CGameServers_GetServerList_Response.Server.addr");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 gameport = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_gameport();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameport_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 specport = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_specport();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &specport_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steamid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CGameServers_GetServerList_Response.Server.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 appid = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string gamedir = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gamedir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gamedir().data(), this->gamedir().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CGameServers_GetServerList_Response.Server.gamedir");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string version = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CGameServers_GetServerList_Response.Server.version");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string product = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_product()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->product().data(), this->product().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CGameServers_GetServerList_Response.Server.product");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 region = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_region();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &region_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 players = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_players();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &players_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_players = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_max_players();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_players_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 bots = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_bots();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bots_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string map = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_map()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->map().data(), this->map().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CGameServers_GetServerList_Response.Server.map");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool secure = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          set_has_secure();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &secure_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool dedicated = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u)) {
          set_has_dedicated();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dedicated_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string os = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_os()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->os().data(), this->os().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CGameServers_GetServerList_Response.Server.os");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string gametype = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gametype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gametype().data(), this->gametype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CGameServers_GetServerList_Response.Server.gametype");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CGameServers_GetServerList_Response.Server)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CGameServers_GetServerList_Response.Server)
  return false;
#undef DO_
}

void CGameServers_GetServerList_Response_Server::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CGameServers_GetServerList_Response.Server)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string addr = 1 [(.proto.steam.description) = "The server\'s IP and query port"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->addr().data(), this->addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CGameServers_GetServerList_Response.Server.addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->addr(), output);
  }

  // optional uint32 gameport = 2;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gameport(), output);
  }

  // optional uint32 specport = 3;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->specport(), output);
  }

  // optional fixed64 steamid = 4;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->steamid(), output);
  }

  // optional string name = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CGameServers_GetServerList_Response.Server.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->name(), output);
  }

  // optional uint32 appid = 6;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->appid(), output);
  }

  // optional string gamedir = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gamedir().data(), this->gamedir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CGameServers_GetServerList_Response.Server.gamedir");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->gamedir(), output);
  }

  // optional string version = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CGameServers_GetServerList_Response.Server.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->version(), output);
  }

  // optional string product = 9;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->product().data(), this->product().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CGameServers_GetServerList_Response.Server.product");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->product(), output);
  }

  // optional int32 region = 10;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->region(), output);
  }

  // optional int32 players = 11;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->players(), output);
  }

  // optional int32 max_players = 12;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->max_players(), output);
  }

  // optional int32 bots = 13;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->bots(), output);
  }

  // optional string map = 14;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map().data(), this->map().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CGameServers_GetServerList_Response.Server.map");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->map(), output);
  }

  // optional bool secure = 15;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->secure(), output);
  }

  // optional bool dedicated = 16;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->dedicated(), output);
  }

  // optional string os = 17;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->os().data(), this->os().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CGameServers_GetServerList_Response.Server.os");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->os(), output);
  }

  // optional string gametype = 18;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gametype().data(), this->gametype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CGameServers_GetServerList_Response.Server.gametype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->gametype(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CGameServers_GetServerList_Response.Server)
}

::google::protobuf::uint8* CGameServers_GetServerList_Response_Server::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CGameServers_GetServerList_Response.Server)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string addr = 1 [(.proto.steam.description) = "The server\'s IP and query port"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->addr().data(), this->addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CGameServers_GetServerList_Response.Server.addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->addr(), target);
  }

  // optional uint32 gameport = 2;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gameport(), target);
  }

  // optional uint32 specport = 3;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->specport(), target);
  }

  // optional fixed64 steamid = 4;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->steamid(), target);
  }

  // optional string name = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CGameServers_GetServerList_Response.Server.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }

  // optional uint32 appid = 6;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->appid(), target);
  }

  // optional string gamedir = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gamedir().data(), this->gamedir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CGameServers_GetServerList_Response.Server.gamedir");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->gamedir(), target);
  }

  // optional string version = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CGameServers_GetServerList_Response.Server.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->version(), target);
  }

  // optional string product = 9;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->product().data(), this->product().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CGameServers_GetServerList_Response.Server.product");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->product(), target);
  }

  // optional int32 region = 10;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->region(), target);
  }

  // optional int32 players = 11;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->players(), target);
  }

  // optional int32 max_players = 12;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->max_players(), target);
  }

  // optional int32 bots = 13;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->bots(), target);
  }

  // optional string map = 14;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map().data(), this->map().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CGameServers_GetServerList_Response.Server.map");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->map(), target);
  }

  // optional bool secure = 15;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->secure(), target);
  }

  // optional bool dedicated = 16;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->dedicated(), target);
  }

  // optional string os = 17;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->os().data(), this->os().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CGameServers_GetServerList_Response.Server.os");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->os(), target);
  }

  // optional string gametype = 18;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gametype().data(), this->gametype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CGameServers_GetServerList_Response.Server.gametype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->gametype(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CGameServers_GetServerList_Response.Server)
  return target;
}

size_t CGameServers_GetServerList_Response_Server::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CGameServers_GetServerList_Response.Server)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string addr = 1 [(.proto.steam.description) = "The server\'s IP and query port"];
    if (has_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->addr());
    }

    // optional string name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string gamedir = 7;
    if (has_gamedir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gamedir());
    }

    // optional string version = 8;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional string product = 9;
    if (has_product()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->product());
    }

    // optional string map = 14;
    if (has_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->map());
    }

    // optional string os = 17;
    if (has_os()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->os());
    }

    // optional string gametype = 18;
    if (has_gametype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gametype());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint32 gameport = 2;
    if (has_gameport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameport());
    }

    // optional uint32 specport = 3;
    if (has_specport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->specport());
    }

    // optional fixed64 steamid = 4;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional uint32 appid = 6;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional int32 region = 10;
    if (has_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->region());
    }

    // optional int32 players = 11;
    if (has_players()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->players());
    }

    // optional int32 max_players = 12;
    if (has_max_players()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_players());
    }

    // optional int32 bots = 13;
    if (has_bots()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bots());
    }

  }
  if (_has_bits_[16 / 32] & 196608u) {
    // optional bool secure = 15;
    if (has_secure()) {
      total_size += 1 + 1;
    }

    // optional bool dedicated = 16;
    if (has_dedicated()) {
      total_size += 2 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGameServers_GetServerList_Response_Server::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CGameServers_GetServerList_Response.Server)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameServers_GetServerList_Response_Server* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CGameServers_GetServerList_Response_Server>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CGameServers_GetServerList_Response.Server)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CGameServers_GetServerList_Response.Server)
    MergeFrom(*source);
  }
}

void CGameServers_GetServerList_Response_Server::MergeFrom(const CGameServers_GetServerList_Response_Server& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CGameServers_GetServerList_Response.Server)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_addr();
      addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addr_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_gamedir();
      gamedir_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gamedir_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_version();
      version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_product();
      product_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.product_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_map();
      map_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_os();
      os_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.os_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has_gametype();
      gametype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gametype_);
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      gameport_ = from.gameport_;
    }
    if (cached_has_bits & 0x00000200u) {
      specport_ = from.specport_;
    }
    if (cached_has_bits & 0x00000400u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000800u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00001000u) {
      region_ = from.region_;
    }
    if (cached_has_bits & 0x00002000u) {
      players_ = from.players_;
    }
    if (cached_has_bits & 0x00004000u) {
      max_players_ = from.max_players_;
    }
    if (cached_has_bits & 0x00008000u) {
      bots_ = from.bots_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 196608u) {
    if (cached_has_bits & 0x00010000u) {
      secure_ = from.secure_;
    }
    if (cached_has_bits & 0x00020000u) {
      dedicated_ = from.dedicated_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGameServers_GetServerList_Response_Server::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CGameServers_GetServerList_Response.Server)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameServers_GetServerList_Response_Server::CopyFrom(const CGameServers_GetServerList_Response_Server& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CGameServers_GetServerList_Response.Server)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameServers_GetServerList_Response_Server::IsInitialized() const {
  return true;
}

void CGameServers_GetServerList_Response_Server::Swap(CGameServers_GetServerList_Response_Server* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGameServers_GetServerList_Response_Server::InternalSwap(CGameServers_GetServerList_Response_Server* other) {
  addr_.Swap(&other->addr_);
  name_.Swap(&other->name_);
  gamedir_.Swap(&other->gamedir_);
  version_.Swap(&other->version_);
  product_.Swap(&other->product_);
  map_.Swap(&other->map_);
  os_.Swap(&other->os_);
  gametype_.Swap(&other->gametype_);
  std::swap(gameport_, other->gameport_);
  std::swap(specport_, other->specport_);
  std::swap(steamid_, other->steamid_);
  std::swap(appid_, other->appid_);
  std::swap(region_, other->region_);
  std::swap(players_, other->players_);
  std::swap(max_players_, other->max_players_);
  std::swap(bots_, other->bots_);
  std::swap(secure_, other->secure_);
  std::swap(dedicated_, other->dedicated_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CGameServers_GetServerList_Response_Server::GetMetadata() const {
  protobuf_steammessages_5fgameservers_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fgameservers_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CGameServers_GetServerList_Response_Server

// optional string addr = 1 [(.proto.steam.description) = "The server\'s IP and query port"];
bool CGameServers_GetServerList_Response_Server::has_addr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CGameServers_GetServerList_Response_Server::set_has_addr() {
  _has_bits_[0] |= 0x00000001u;
}
void CGameServers_GetServerList_Response_Server::clear_has_addr() {
  _has_bits_[0] &= ~0x00000001u;
}
void CGameServers_GetServerList_Response_Server::clear_addr() {
  addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_addr();
}
const ::std::string& CGameServers_GetServerList_Response_Server::addr() const {
  // @@protoc_insertion_point(field_get:proto.steam.CGameServers_GetServerList_Response.Server.addr)
  return addr_.GetNoArena();
}
void CGameServers_GetServerList_Response_Server::set_addr(const ::std::string& value) {
  set_has_addr();
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CGameServers_GetServerList_Response.Server.addr)
}
#if LANG_CXX11
void CGameServers_GetServerList_Response_Server::set_addr(::std::string&& value) {
  set_has_addr();
  addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CGameServers_GetServerList_Response.Server.addr)
}
#endif
void CGameServers_GetServerList_Response_Server::set_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_addr();
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CGameServers_GetServerList_Response.Server.addr)
}
void CGameServers_GetServerList_Response_Server::set_addr(const char* value, size_t size) {
  set_has_addr();
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CGameServers_GetServerList_Response.Server.addr)
}
::std::string* CGameServers_GetServerList_Response_Server::mutable_addr() {
  set_has_addr();
  // @@protoc_insertion_point(field_mutable:proto.steam.CGameServers_GetServerList_Response.Server.addr)
  return addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CGameServers_GetServerList_Response_Server::release_addr() {
  // @@protoc_insertion_point(field_release:proto.steam.CGameServers_GetServerList_Response.Server.addr)
  clear_has_addr();
  return addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CGameServers_GetServerList_Response_Server::set_allocated_addr(::std::string* addr) {
  if (addr != NULL) {
    set_has_addr();
  } else {
    clear_has_addr();
  }
  addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), addr);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CGameServers_GetServerList_Response.Server.addr)
}

// optional uint32 gameport = 2;
bool CGameServers_GetServerList_Response_Server::has_gameport() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CGameServers_GetServerList_Response_Server::set_has_gameport() {
  _has_bits_[0] |= 0x00000100u;
}
void CGameServers_GetServerList_Response_Server::clear_has_gameport() {
  _has_bits_[0] &= ~0x00000100u;
}
void CGameServers_GetServerList_Response_Server::clear_gameport() {
  gameport_ = 0u;
  clear_has_gameport();
}
::google::protobuf::uint32 CGameServers_GetServerList_Response_Server::gameport() const {
  // @@protoc_insertion_point(field_get:proto.steam.CGameServers_GetServerList_Response.Server.gameport)
  return gameport_;
}
void CGameServers_GetServerList_Response_Server::set_gameport(::google::protobuf::uint32 value) {
  set_has_gameport();
  gameport_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CGameServers_GetServerList_Response.Server.gameport)
}

// optional uint32 specport = 3;
bool CGameServers_GetServerList_Response_Server::has_specport() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CGameServers_GetServerList_Response_Server::set_has_specport() {
  _has_bits_[0] |= 0x00000200u;
}
void CGameServers_GetServerList_Response_Server::clear_has_specport() {
  _has_bits_[0] &= ~0x00000200u;
}
void CGameServers_GetServerList_Response_Server::clear_specport() {
  specport_ = 0u;
  clear_has_specport();
}
::google::protobuf::uint32 CGameServers_GetServerList_Response_Server::specport() const {
  // @@protoc_insertion_point(field_get:proto.steam.CGameServers_GetServerList_Response.Server.specport)
  return specport_;
}
void CGameServers_GetServerList_Response_Server::set_specport(::google::protobuf::uint32 value) {
  set_has_specport();
  specport_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CGameServers_GetServerList_Response.Server.specport)
}

// optional fixed64 steamid = 4;
bool CGameServers_GetServerList_Response_Server::has_steamid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CGameServers_GetServerList_Response_Server::set_has_steamid() {
  _has_bits_[0] |= 0x00000400u;
}
void CGameServers_GetServerList_Response_Server::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000400u;
}
void CGameServers_GetServerList_Response_Server::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
::google::protobuf::uint64 CGameServers_GetServerList_Response_Server::steamid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CGameServers_GetServerList_Response.Server.steamid)
  return steamid_;
}
void CGameServers_GetServerList_Response_Server::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CGameServers_GetServerList_Response.Server.steamid)
}

// optional string name = 5;
bool CGameServers_GetServerList_Response_Server::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CGameServers_GetServerList_Response_Server::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
void CGameServers_GetServerList_Response_Server::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void CGameServers_GetServerList_Response_Server::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& CGameServers_GetServerList_Response_Server::name() const {
  // @@protoc_insertion_point(field_get:proto.steam.CGameServers_GetServerList_Response.Server.name)
  return name_.GetNoArena();
}
void CGameServers_GetServerList_Response_Server::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CGameServers_GetServerList_Response.Server.name)
}
#if LANG_CXX11
void CGameServers_GetServerList_Response_Server::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CGameServers_GetServerList_Response.Server.name)
}
#endif
void CGameServers_GetServerList_Response_Server::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CGameServers_GetServerList_Response.Server.name)
}
void CGameServers_GetServerList_Response_Server::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CGameServers_GetServerList_Response.Server.name)
}
::std::string* CGameServers_GetServerList_Response_Server::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:proto.steam.CGameServers_GetServerList_Response.Server.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CGameServers_GetServerList_Response_Server::release_name() {
  // @@protoc_insertion_point(field_release:proto.steam.CGameServers_GetServerList_Response.Server.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CGameServers_GetServerList_Response_Server::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CGameServers_GetServerList_Response.Server.name)
}

// optional uint32 appid = 6;
bool CGameServers_GetServerList_Response_Server::has_appid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CGameServers_GetServerList_Response_Server::set_has_appid() {
  _has_bits_[0] |= 0x00000800u;
}
void CGameServers_GetServerList_Response_Server::clear_has_appid() {
  _has_bits_[0] &= ~0x00000800u;
}
void CGameServers_GetServerList_Response_Server::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
::google::protobuf::uint32 CGameServers_GetServerList_Response_Server::appid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CGameServers_GetServerList_Response.Server.appid)
  return appid_;
}
void CGameServers_GetServerList_Response_Server::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CGameServers_GetServerList_Response.Server.appid)
}

// optional string gamedir = 7;
bool CGameServers_GetServerList_Response_Server::has_gamedir() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CGameServers_GetServerList_Response_Server::set_has_gamedir() {
  _has_bits_[0] |= 0x00000004u;
}
void CGameServers_GetServerList_Response_Server::clear_has_gamedir() {
  _has_bits_[0] &= ~0x00000004u;
}
void CGameServers_GetServerList_Response_Server::clear_gamedir() {
  gamedir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gamedir();
}
const ::std::string& CGameServers_GetServerList_Response_Server::gamedir() const {
  // @@protoc_insertion_point(field_get:proto.steam.CGameServers_GetServerList_Response.Server.gamedir)
  return gamedir_.GetNoArena();
}
void CGameServers_GetServerList_Response_Server::set_gamedir(const ::std::string& value) {
  set_has_gamedir();
  gamedir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CGameServers_GetServerList_Response.Server.gamedir)
}
#if LANG_CXX11
void CGameServers_GetServerList_Response_Server::set_gamedir(::std::string&& value) {
  set_has_gamedir();
  gamedir_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CGameServers_GetServerList_Response.Server.gamedir)
}
#endif
void CGameServers_GetServerList_Response_Server::set_gamedir(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_gamedir();
  gamedir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CGameServers_GetServerList_Response.Server.gamedir)
}
void CGameServers_GetServerList_Response_Server::set_gamedir(const char* value, size_t size) {
  set_has_gamedir();
  gamedir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CGameServers_GetServerList_Response.Server.gamedir)
}
::std::string* CGameServers_GetServerList_Response_Server::mutable_gamedir() {
  set_has_gamedir();
  // @@protoc_insertion_point(field_mutable:proto.steam.CGameServers_GetServerList_Response.Server.gamedir)
  return gamedir_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CGameServers_GetServerList_Response_Server::release_gamedir() {
  // @@protoc_insertion_point(field_release:proto.steam.CGameServers_GetServerList_Response.Server.gamedir)
  clear_has_gamedir();
  return gamedir_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CGameServers_GetServerList_Response_Server::set_allocated_gamedir(::std::string* gamedir) {
  if (gamedir != NULL) {
    set_has_gamedir();
  } else {
    clear_has_gamedir();
  }
  gamedir_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gamedir);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CGameServers_GetServerList_Response.Server.gamedir)
}

// optional string version = 8;
bool CGameServers_GetServerList_Response_Server::has_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CGameServers_GetServerList_Response_Server::set_has_version() {
  _has_bits_[0] |= 0x00000008u;
}
void CGameServers_GetServerList_Response_Server::clear_has_version() {
  _has_bits_[0] &= ~0x00000008u;
}
void CGameServers_GetServerList_Response_Server::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_version();
}
const ::std::string& CGameServers_GetServerList_Response_Server::version() const {
  // @@protoc_insertion_point(field_get:proto.steam.CGameServers_GetServerList_Response.Server.version)
  return version_.GetNoArena();
}
void CGameServers_GetServerList_Response_Server::set_version(const ::std::string& value) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CGameServers_GetServerList_Response.Server.version)
}
#if LANG_CXX11
void CGameServers_GetServerList_Response_Server::set_version(::std::string&& value) {
  set_has_version();
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CGameServers_GetServerList_Response.Server.version)
}
#endif
void CGameServers_GetServerList_Response_Server::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CGameServers_GetServerList_Response.Server.version)
}
void CGameServers_GetServerList_Response_Server::set_version(const char* value, size_t size) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CGameServers_GetServerList_Response.Server.version)
}
::std::string* CGameServers_GetServerList_Response_Server::mutable_version() {
  set_has_version();
  // @@protoc_insertion_point(field_mutable:proto.steam.CGameServers_GetServerList_Response.Server.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CGameServers_GetServerList_Response_Server::release_version() {
  // @@protoc_insertion_point(field_release:proto.steam.CGameServers_GetServerList_Response.Server.version)
  clear_has_version();
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CGameServers_GetServerList_Response_Server::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    set_has_version();
  } else {
    clear_has_version();
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CGameServers_GetServerList_Response.Server.version)
}

// optional string product = 9;
bool CGameServers_GetServerList_Response_Server::has_product() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CGameServers_GetServerList_Response_Server::set_has_product() {
  _has_bits_[0] |= 0x00000010u;
}
void CGameServers_GetServerList_Response_Server::clear_has_product() {
  _has_bits_[0] &= ~0x00000010u;
}
void CGameServers_GetServerList_Response_Server::clear_product() {
  product_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_product();
}
const ::std::string& CGameServers_GetServerList_Response_Server::product() const {
  // @@protoc_insertion_point(field_get:proto.steam.CGameServers_GetServerList_Response.Server.product)
  return product_.GetNoArena();
}
void CGameServers_GetServerList_Response_Server::set_product(const ::std::string& value) {
  set_has_product();
  product_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CGameServers_GetServerList_Response.Server.product)
}
#if LANG_CXX11
void CGameServers_GetServerList_Response_Server::set_product(::std::string&& value) {
  set_has_product();
  product_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CGameServers_GetServerList_Response.Server.product)
}
#endif
void CGameServers_GetServerList_Response_Server::set_product(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_product();
  product_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CGameServers_GetServerList_Response.Server.product)
}
void CGameServers_GetServerList_Response_Server::set_product(const char* value, size_t size) {
  set_has_product();
  product_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CGameServers_GetServerList_Response.Server.product)
}
::std::string* CGameServers_GetServerList_Response_Server::mutable_product() {
  set_has_product();
  // @@protoc_insertion_point(field_mutable:proto.steam.CGameServers_GetServerList_Response.Server.product)
  return product_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CGameServers_GetServerList_Response_Server::release_product() {
  // @@protoc_insertion_point(field_release:proto.steam.CGameServers_GetServerList_Response.Server.product)
  clear_has_product();
  return product_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CGameServers_GetServerList_Response_Server::set_allocated_product(::std::string* product) {
  if (product != NULL) {
    set_has_product();
  } else {
    clear_has_product();
  }
  product_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), product);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CGameServers_GetServerList_Response.Server.product)
}

// optional int32 region = 10;
bool CGameServers_GetServerList_Response_Server::has_region() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void CGameServers_GetServerList_Response_Server::set_has_region() {
  _has_bits_[0] |= 0x00001000u;
}
void CGameServers_GetServerList_Response_Server::clear_has_region() {
  _has_bits_[0] &= ~0x00001000u;
}
void CGameServers_GetServerList_Response_Server::clear_region() {
  region_ = 0;
  clear_has_region();
}
::google::protobuf::int32 CGameServers_GetServerList_Response_Server::region() const {
  // @@protoc_insertion_point(field_get:proto.steam.CGameServers_GetServerList_Response.Server.region)
  return region_;
}
void CGameServers_GetServerList_Response_Server::set_region(::google::protobuf::int32 value) {
  set_has_region();
  region_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CGameServers_GetServerList_Response.Server.region)
}

// optional int32 players = 11;
bool CGameServers_GetServerList_Response_Server::has_players() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void CGameServers_GetServerList_Response_Server::set_has_players() {
  _has_bits_[0] |= 0x00002000u;
}
void CGameServers_GetServerList_Response_Server::clear_has_players() {
  _has_bits_[0] &= ~0x00002000u;
}
void CGameServers_GetServerList_Response_Server::clear_players() {
  players_ = 0;
  clear_has_players();
}
::google::protobuf::int32 CGameServers_GetServerList_Response_Server::players() const {
  // @@protoc_insertion_point(field_get:proto.steam.CGameServers_GetServerList_Response.Server.players)
  return players_;
}
void CGameServers_GetServerList_Response_Server::set_players(::google::protobuf::int32 value) {
  set_has_players();
  players_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CGameServers_GetServerList_Response.Server.players)
}

// optional int32 max_players = 12;
bool CGameServers_GetServerList_Response_Server::has_max_players() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void CGameServers_GetServerList_Response_Server::set_has_max_players() {
  _has_bits_[0] |= 0x00004000u;
}
void CGameServers_GetServerList_Response_Server::clear_has_max_players() {
  _has_bits_[0] &= ~0x00004000u;
}
void CGameServers_GetServerList_Response_Server::clear_max_players() {
  max_players_ = 0;
  clear_has_max_players();
}
::google::protobuf::int32 CGameServers_GetServerList_Response_Server::max_players() const {
  // @@protoc_insertion_point(field_get:proto.steam.CGameServers_GetServerList_Response.Server.max_players)
  return max_players_;
}
void CGameServers_GetServerList_Response_Server::set_max_players(::google::protobuf::int32 value) {
  set_has_max_players();
  max_players_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CGameServers_GetServerList_Response.Server.max_players)
}

// optional int32 bots = 13;
bool CGameServers_GetServerList_Response_Server::has_bots() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void CGameServers_GetServerList_Response_Server::set_has_bots() {
  _has_bits_[0] |= 0x00008000u;
}
void CGameServers_GetServerList_Response_Server::clear_has_bots() {
  _has_bits_[0] &= ~0x00008000u;
}
void CGameServers_GetServerList_Response_Server::clear_bots() {
  bots_ = 0;
  clear_has_bots();
}
::google::protobuf::int32 CGameServers_GetServerList_Response_Server::bots() const {
  // @@protoc_insertion_point(field_get:proto.steam.CGameServers_GetServerList_Response.Server.bots)
  return bots_;
}
void CGameServers_GetServerList_Response_Server::set_bots(::google::protobuf::int32 value) {
  set_has_bots();
  bots_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CGameServers_GetServerList_Response.Server.bots)
}

// optional string map = 14;
bool CGameServers_GetServerList_Response_Server::has_map() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CGameServers_GetServerList_Response_Server::set_has_map() {
  _has_bits_[0] |= 0x00000020u;
}
void CGameServers_GetServerList_Response_Server::clear_has_map() {
  _has_bits_[0] &= ~0x00000020u;
}
void CGameServers_GetServerList_Response_Server::clear_map() {
  map_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_map();
}
const ::std::string& CGameServers_GetServerList_Response_Server::map() const {
  // @@protoc_insertion_point(field_get:proto.steam.CGameServers_GetServerList_Response.Server.map)
  return map_.GetNoArena();
}
void CGameServers_GetServerList_Response_Server::set_map(const ::std::string& value) {
  set_has_map();
  map_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CGameServers_GetServerList_Response.Server.map)
}
#if LANG_CXX11
void CGameServers_GetServerList_Response_Server::set_map(::std::string&& value) {
  set_has_map();
  map_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CGameServers_GetServerList_Response.Server.map)
}
#endif
void CGameServers_GetServerList_Response_Server::set_map(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_map();
  map_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CGameServers_GetServerList_Response.Server.map)
}
void CGameServers_GetServerList_Response_Server::set_map(const char* value, size_t size) {
  set_has_map();
  map_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CGameServers_GetServerList_Response.Server.map)
}
::std::string* CGameServers_GetServerList_Response_Server::mutable_map() {
  set_has_map();
  // @@protoc_insertion_point(field_mutable:proto.steam.CGameServers_GetServerList_Response.Server.map)
  return map_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CGameServers_GetServerList_Response_Server::release_map() {
  // @@protoc_insertion_point(field_release:proto.steam.CGameServers_GetServerList_Response.Server.map)
  clear_has_map();
  return map_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CGameServers_GetServerList_Response_Server::set_allocated_map(::std::string* map) {
  if (map != NULL) {
    set_has_map();
  } else {
    clear_has_map();
  }
  map_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), map);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CGameServers_GetServerList_Response.Server.map)
}

// optional bool secure = 15;
bool CGameServers_GetServerList_Response_Server::has_secure() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void CGameServers_GetServerList_Response_Server::set_has_secure() {
  _has_bits_[0] |= 0x00010000u;
}
void CGameServers_GetServerList_Response_Server::clear_has_secure() {
  _has_bits_[0] &= ~0x00010000u;
}
void CGameServers_GetServerList_Response_Server::clear_secure() {
  secure_ = false;
  clear_has_secure();
}
bool CGameServers_GetServerList_Response_Server::secure() const {
  // @@protoc_insertion_point(field_get:proto.steam.CGameServers_GetServerList_Response.Server.secure)
  return secure_;
}
void CGameServers_GetServerList_Response_Server::set_secure(bool value) {
  set_has_secure();
  secure_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CGameServers_GetServerList_Response.Server.secure)
}

// optional bool dedicated = 16;
bool CGameServers_GetServerList_Response_Server::has_dedicated() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void CGameServers_GetServerList_Response_Server::set_has_dedicated() {
  _has_bits_[0] |= 0x00020000u;
}
void CGameServers_GetServerList_Response_Server::clear_has_dedicated() {
  _has_bits_[0] &= ~0x00020000u;
}
void CGameServers_GetServerList_Response_Server::clear_dedicated() {
  dedicated_ = false;
  clear_has_dedicated();
}
bool CGameServers_GetServerList_Response_Server::dedicated() const {
  // @@protoc_insertion_point(field_get:proto.steam.CGameServers_GetServerList_Response.Server.dedicated)
  return dedicated_;
}
void CGameServers_GetServerList_Response_Server::set_dedicated(bool value) {
  set_has_dedicated();
  dedicated_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CGameServers_GetServerList_Response.Server.dedicated)
}

// optional string os = 17;
bool CGameServers_GetServerList_Response_Server::has_os() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CGameServers_GetServerList_Response_Server::set_has_os() {
  _has_bits_[0] |= 0x00000040u;
}
void CGameServers_GetServerList_Response_Server::clear_has_os() {
  _has_bits_[0] &= ~0x00000040u;
}
void CGameServers_GetServerList_Response_Server::clear_os() {
  os_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_os();
}
const ::std::string& CGameServers_GetServerList_Response_Server::os() const {
  // @@protoc_insertion_point(field_get:proto.steam.CGameServers_GetServerList_Response.Server.os)
  return os_.GetNoArena();
}
void CGameServers_GetServerList_Response_Server::set_os(const ::std::string& value) {
  set_has_os();
  os_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CGameServers_GetServerList_Response.Server.os)
}
#if LANG_CXX11
void CGameServers_GetServerList_Response_Server::set_os(::std::string&& value) {
  set_has_os();
  os_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CGameServers_GetServerList_Response.Server.os)
}
#endif
void CGameServers_GetServerList_Response_Server::set_os(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_os();
  os_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CGameServers_GetServerList_Response.Server.os)
}
void CGameServers_GetServerList_Response_Server::set_os(const char* value, size_t size) {
  set_has_os();
  os_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CGameServers_GetServerList_Response.Server.os)
}
::std::string* CGameServers_GetServerList_Response_Server::mutable_os() {
  set_has_os();
  // @@protoc_insertion_point(field_mutable:proto.steam.CGameServers_GetServerList_Response.Server.os)
  return os_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CGameServers_GetServerList_Response_Server::release_os() {
  // @@protoc_insertion_point(field_release:proto.steam.CGameServers_GetServerList_Response.Server.os)
  clear_has_os();
  return os_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CGameServers_GetServerList_Response_Server::set_allocated_os(::std::string* os) {
  if (os != NULL) {
    set_has_os();
  } else {
    clear_has_os();
  }
  os_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), os);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CGameServers_GetServerList_Response.Server.os)
}

// optional string gametype = 18;
bool CGameServers_GetServerList_Response_Server::has_gametype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CGameServers_GetServerList_Response_Server::set_has_gametype() {
  _has_bits_[0] |= 0x00000080u;
}
void CGameServers_GetServerList_Response_Server::clear_has_gametype() {
  _has_bits_[0] &= ~0x00000080u;
}
void CGameServers_GetServerList_Response_Server::clear_gametype() {
  gametype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_gametype();
}
const ::std::string& CGameServers_GetServerList_Response_Server::gametype() const {
  // @@protoc_insertion_point(field_get:proto.steam.CGameServers_GetServerList_Response.Server.gametype)
  return gametype_.GetNoArena();
}
void CGameServers_GetServerList_Response_Server::set_gametype(const ::std::string& value) {
  set_has_gametype();
  gametype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CGameServers_GetServerList_Response.Server.gametype)
}
#if LANG_CXX11
void CGameServers_GetServerList_Response_Server::set_gametype(::std::string&& value) {
  set_has_gametype();
  gametype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CGameServers_GetServerList_Response.Server.gametype)
}
#endif
void CGameServers_GetServerList_Response_Server::set_gametype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_gametype();
  gametype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CGameServers_GetServerList_Response.Server.gametype)
}
void CGameServers_GetServerList_Response_Server::set_gametype(const char* value, size_t size) {
  set_has_gametype();
  gametype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CGameServers_GetServerList_Response.Server.gametype)
}
::std::string* CGameServers_GetServerList_Response_Server::mutable_gametype() {
  set_has_gametype();
  // @@protoc_insertion_point(field_mutable:proto.steam.CGameServers_GetServerList_Response.Server.gametype)
  return gametype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CGameServers_GetServerList_Response_Server::release_gametype() {
  // @@protoc_insertion_point(field_release:proto.steam.CGameServers_GetServerList_Response.Server.gametype)
  clear_has_gametype();
  return gametype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CGameServers_GetServerList_Response_Server::set_allocated_gametype(::std::string* gametype) {
  if (gametype != NULL) {
    set_has_gametype();
  } else {
    clear_has_gametype();
  }
  gametype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gametype);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CGameServers_GetServerList_Response.Server.gametype)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGameServers_GetServerList_Response::kServersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGameServers_GetServerList_Response::CGameServers_GetServerList_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fgameservers_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CGameServers_GetServerList_Response)
}
CGameServers_GetServerList_Response::CGameServers_GetServerList_Response(const CGameServers_GetServerList_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      servers_(from.servers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CGameServers_GetServerList_Response)
}

void CGameServers_GetServerList_Response::SharedCtor() {
  _cached_size_ = 0;
}

CGameServers_GetServerList_Response::~CGameServers_GetServerList_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CGameServers_GetServerList_Response)
  SharedDtor();
}

void CGameServers_GetServerList_Response::SharedDtor() {
}

void CGameServers_GetServerList_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGameServers_GetServerList_Response::descriptor() {
  protobuf_steammessages_5fgameservers_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fgameservers_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CGameServers_GetServerList_Response& CGameServers_GetServerList_Response::default_instance() {
  protobuf_steammessages_5fgameservers_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CGameServers_GetServerList_Response* CGameServers_GetServerList_Response::New(::google::protobuf::Arena* arena) const {
  CGameServers_GetServerList_Response* n = new CGameServers_GetServerList_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CGameServers_GetServerList_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CGameServers_GetServerList_Response)
  servers_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CGameServers_GetServerList_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CGameServers_GetServerList_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.steam.CGameServers_GetServerList_Response.Server servers = 1 [(.proto.steam.description) = "List of servers matching the filter"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_servers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CGameServers_GetServerList_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CGameServers_GetServerList_Response)
  return false;
#undef DO_
}

void CGameServers_GetServerList_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CGameServers_GetServerList_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CGameServers_GetServerList_Response.Server servers = 1 [(.proto.steam.description) = "List of servers matching the filter"];
  for (unsigned int i = 0, n = this->servers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->servers(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CGameServers_GetServerList_Response)
}

::google::protobuf::uint8* CGameServers_GetServerList_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CGameServers_GetServerList_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CGameServers_GetServerList_Response.Server servers = 1 [(.proto.steam.description) = "List of servers matching the filter"];
  for (unsigned int i = 0, n = this->servers_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->servers(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CGameServers_GetServerList_Response)
  return target;
}

size_t CGameServers_GetServerList_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CGameServers_GetServerList_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.steam.CGameServers_GetServerList_Response.Server servers = 1 [(.proto.steam.description) = "List of servers matching the filter"];
  {
    unsigned int count = this->servers_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->servers(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGameServers_GetServerList_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CGameServers_GetServerList_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameServers_GetServerList_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CGameServers_GetServerList_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CGameServers_GetServerList_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CGameServers_GetServerList_Response)
    MergeFrom(*source);
  }
}

void CGameServers_GetServerList_Response::MergeFrom(const CGameServers_GetServerList_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CGameServers_GetServerList_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  servers_.MergeFrom(from.servers_);
}

void CGameServers_GetServerList_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CGameServers_GetServerList_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameServers_GetServerList_Response::CopyFrom(const CGameServers_GetServerList_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CGameServers_GetServerList_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameServers_GetServerList_Response::IsInitialized() const {
  return true;
}

void CGameServers_GetServerList_Response::Swap(CGameServers_GetServerList_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGameServers_GetServerList_Response::InternalSwap(CGameServers_GetServerList_Response* other) {
  servers_.InternalSwap(&other->servers_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CGameServers_GetServerList_Response::GetMetadata() const {
  protobuf_steammessages_5fgameservers_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fgameservers_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CGameServers_GetServerList_Response

// repeated .proto.steam.CGameServers_GetServerList_Response.Server servers = 1 [(.proto.steam.description) = "List of servers matching the filter"];
int CGameServers_GetServerList_Response::servers_size() const {
  return servers_.size();
}
void CGameServers_GetServerList_Response::clear_servers() {
  servers_.Clear();
}
const ::proto::steam::CGameServers_GetServerList_Response_Server& CGameServers_GetServerList_Response::servers(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CGameServers_GetServerList_Response.servers)
  return servers_.Get(index);
}
::proto::steam::CGameServers_GetServerList_Response_Server* CGameServers_GetServerList_Response::mutable_servers(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CGameServers_GetServerList_Response.servers)
  return servers_.Mutable(index);
}
::proto::steam::CGameServers_GetServerList_Response_Server* CGameServers_GetServerList_Response::add_servers() {
  // @@protoc_insertion_point(field_add:proto.steam.CGameServers_GetServerList_Response.servers)
  return servers_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::CGameServers_GetServerList_Response_Server >*
CGameServers_GetServerList_Response::mutable_servers() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CGameServers_GetServerList_Response.servers)
  return &servers_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::CGameServers_GetServerList_Response_Server >&
CGameServers_GetServerList_Response::servers() const {
  // @@protoc_insertion_point(field_list:proto.steam.CGameServers_GetServerList_Response.servers)
  return servers_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGameServers_GetServerSteamIDsByIP_Request::kServerIpsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGameServers_GetServerSteamIDsByIP_Request::CGameServers_GetServerSteamIDsByIP_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fgameservers_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CGameServers_GetServerSteamIDsByIP_Request)
}
CGameServers_GetServerSteamIDsByIP_Request::CGameServers_GetServerSteamIDsByIP_Request(const CGameServers_GetServerSteamIDsByIP_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      server_ips_(from.server_ips_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CGameServers_GetServerSteamIDsByIP_Request)
}

void CGameServers_GetServerSteamIDsByIP_Request::SharedCtor() {
  _cached_size_ = 0;
}

CGameServers_GetServerSteamIDsByIP_Request::~CGameServers_GetServerSteamIDsByIP_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CGameServers_GetServerSteamIDsByIP_Request)
  SharedDtor();
}

void CGameServers_GetServerSteamIDsByIP_Request::SharedDtor() {
}

void CGameServers_GetServerSteamIDsByIP_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGameServers_GetServerSteamIDsByIP_Request::descriptor() {
  protobuf_steammessages_5fgameservers_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fgameservers_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CGameServers_GetServerSteamIDsByIP_Request& CGameServers_GetServerSteamIDsByIP_Request::default_instance() {
  protobuf_steammessages_5fgameservers_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CGameServers_GetServerSteamIDsByIP_Request* CGameServers_GetServerSteamIDsByIP_Request::New(::google::protobuf::Arena* arena) const {
  CGameServers_GetServerSteamIDsByIP_Request* n = new CGameServers_GetServerSteamIDsByIP_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CGameServers_GetServerSteamIDsByIP_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CGameServers_GetServerSteamIDsByIP_Request)
  server_ips_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CGameServers_GetServerSteamIDsByIP_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CGameServers_GetServerSteamIDsByIP_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string server_ips = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_server_ips()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->server_ips(this->server_ips_size() - 1).data(),
            this->server_ips(this->server_ips_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CGameServers_GetServerSteamIDsByIP_Request.server_ips");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CGameServers_GetServerSteamIDsByIP_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CGameServers_GetServerSteamIDsByIP_Request)
  return false;
#undef DO_
}

void CGameServers_GetServerSteamIDsByIP_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CGameServers_GetServerSteamIDsByIP_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string server_ips = 1;
  for (int i = 0, n = this->server_ips_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_ips(i).data(), this->server_ips(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CGameServers_GetServerSteamIDsByIP_Request.server_ips");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->server_ips(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CGameServers_GetServerSteamIDsByIP_Request)
}

::google::protobuf::uint8* CGameServers_GetServerSteamIDsByIP_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CGameServers_GetServerSteamIDsByIP_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string server_ips = 1;
  for (int i = 0, n = this->server_ips_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_ips(i).data(), this->server_ips(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CGameServers_GetServerSteamIDsByIP_Request.server_ips");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->server_ips(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CGameServers_GetServerSteamIDsByIP_Request)
  return target;
}

size_t CGameServers_GetServerSteamIDsByIP_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CGameServers_GetServerSteamIDsByIP_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated string server_ips = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->server_ips_size());
  for (int i = 0, n = this->server_ips_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->server_ips(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGameServers_GetServerSteamIDsByIP_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CGameServers_GetServerSteamIDsByIP_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameServers_GetServerSteamIDsByIP_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CGameServers_GetServerSteamIDsByIP_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CGameServers_GetServerSteamIDsByIP_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CGameServers_GetServerSteamIDsByIP_Request)
    MergeFrom(*source);
  }
}

void CGameServers_GetServerSteamIDsByIP_Request::MergeFrom(const CGameServers_GetServerSteamIDsByIP_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CGameServers_GetServerSteamIDsByIP_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  server_ips_.MergeFrom(from.server_ips_);
}

void CGameServers_GetServerSteamIDsByIP_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CGameServers_GetServerSteamIDsByIP_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameServers_GetServerSteamIDsByIP_Request::CopyFrom(const CGameServers_GetServerSteamIDsByIP_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CGameServers_GetServerSteamIDsByIP_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameServers_GetServerSteamIDsByIP_Request::IsInitialized() const {
  return true;
}

void CGameServers_GetServerSteamIDsByIP_Request::Swap(CGameServers_GetServerSteamIDsByIP_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGameServers_GetServerSteamIDsByIP_Request::InternalSwap(CGameServers_GetServerSteamIDsByIP_Request* other) {
  server_ips_.InternalSwap(&other->server_ips_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CGameServers_GetServerSteamIDsByIP_Request::GetMetadata() const {
  protobuf_steammessages_5fgameservers_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fgameservers_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CGameServers_GetServerSteamIDsByIP_Request

// repeated string server_ips = 1;
int CGameServers_GetServerSteamIDsByIP_Request::server_ips_size() const {
  return server_ips_.size();
}
void CGameServers_GetServerSteamIDsByIP_Request::clear_server_ips() {
  server_ips_.Clear();
}
const ::std::string& CGameServers_GetServerSteamIDsByIP_Request::server_ips(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CGameServers_GetServerSteamIDsByIP_Request.server_ips)
  return server_ips_.Get(index);
}
::std::string* CGameServers_GetServerSteamIDsByIP_Request::mutable_server_ips(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CGameServers_GetServerSteamIDsByIP_Request.server_ips)
  return server_ips_.Mutable(index);
}
void CGameServers_GetServerSteamIDsByIP_Request::set_server_ips(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:proto.steam.CGameServers_GetServerSteamIDsByIP_Request.server_ips)
  server_ips_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void CGameServers_GetServerSteamIDsByIP_Request::set_server_ips(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:proto.steam.CGameServers_GetServerSteamIDsByIP_Request.server_ips)
  server_ips_.Mutable(index)->assign(std::move(value));
}
#endif
void CGameServers_GetServerSteamIDsByIP_Request::set_server_ips(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  server_ips_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.steam.CGameServers_GetServerSteamIDsByIP_Request.server_ips)
}
void CGameServers_GetServerSteamIDsByIP_Request::set_server_ips(int index, const char* value, size_t size) {
  server_ips_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CGameServers_GetServerSteamIDsByIP_Request.server_ips)
}
::std::string* CGameServers_GetServerSteamIDsByIP_Request::add_server_ips() {
  // @@protoc_insertion_point(field_add_mutable:proto.steam.CGameServers_GetServerSteamIDsByIP_Request.server_ips)
  return server_ips_.Add();
}
void CGameServers_GetServerSteamIDsByIP_Request::add_server_ips(const ::std::string& value) {
  server_ips_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto.steam.CGameServers_GetServerSteamIDsByIP_Request.server_ips)
}
#if LANG_CXX11
void CGameServers_GetServerSteamIDsByIP_Request::add_server_ips(::std::string&& value) {
  server_ips_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:proto.steam.CGameServers_GetServerSteamIDsByIP_Request.server_ips)
}
#endif
void CGameServers_GetServerSteamIDsByIP_Request::add_server_ips(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  server_ips_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto.steam.CGameServers_GetServerSteamIDsByIP_Request.server_ips)
}
void CGameServers_GetServerSteamIDsByIP_Request::add_server_ips(const char* value, size_t size) {
  server_ips_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto.steam.CGameServers_GetServerSteamIDsByIP_Request.server_ips)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
CGameServers_GetServerSteamIDsByIP_Request::server_ips() const {
  // @@protoc_insertion_point(field_list:proto.steam.CGameServers_GetServerSteamIDsByIP_Request.server_ips)
  return server_ips_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
CGameServers_GetServerSteamIDsByIP_Request::mutable_server_ips() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CGameServers_GetServerSteamIDsByIP_Request.server_ips)
  return &server_ips_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGameServers_IPsWithSteamIDs_Response_Server::kAddrFieldNumber;
const int CGameServers_IPsWithSteamIDs_Response_Server::kSteamidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGameServers_IPsWithSteamIDs_Response_Server::CGameServers_IPsWithSteamIDs_Response_Server()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fgameservers_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CGameServers_IPsWithSteamIDs_Response.Server)
}
CGameServers_IPsWithSteamIDs_Response_Server::CGameServers_IPsWithSteamIDs_Response_Server(const CGameServers_IPsWithSteamIDs_Response_Server& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_addr()) {
    addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addr_);
  }
  steamid_ = from.steamid_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CGameServers_IPsWithSteamIDs_Response.Server)
}

void CGameServers_IPsWithSteamIDs_Response_Server::SharedCtor() {
  _cached_size_ = 0;
  addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  steamid_ = GOOGLE_ULONGLONG(0);
}

CGameServers_IPsWithSteamIDs_Response_Server::~CGameServers_IPsWithSteamIDs_Response_Server() {
  // @@protoc_insertion_point(destructor:proto.steam.CGameServers_IPsWithSteamIDs_Response.Server)
  SharedDtor();
}

void CGameServers_IPsWithSteamIDs_Response_Server::SharedDtor() {
  addr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CGameServers_IPsWithSteamIDs_Response_Server::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGameServers_IPsWithSteamIDs_Response_Server::descriptor() {
  protobuf_steammessages_5fgameservers_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fgameservers_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CGameServers_IPsWithSteamIDs_Response_Server& CGameServers_IPsWithSteamIDs_Response_Server::default_instance() {
  protobuf_steammessages_5fgameservers_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CGameServers_IPsWithSteamIDs_Response_Server* CGameServers_IPsWithSteamIDs_Response_Server::New(::google::protobuf::Arena* arena) const {
  CGameServers_IPsWithSteamIDs_Response_Server* n = new CGameServers_IPsWithSteamIDs_Response_Server;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CGameServers_IPsWithSteamIDs_Response_Server::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CGameServers_IPsWithSteamIDs_Response.Server)
  if (has_addr()) {
    GOOGLE_DCHECK(!addr_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*addr_.UnsafeRawStringPointer())->clear();
  }
  steamid_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CGameServers_IPsWithSteamIDs_Response_Server::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CGameServers_IPsWithSteamIDs_Response.Server)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string addr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_addr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->addr().data(), this->addr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CGameServers_IPsWithSteamIDs_Response.Server.addr");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steamid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CGameServers_IPsWithSteamIDs_Response.Server)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CGameServers_IPsWithSteamIDs_Response.Server)
  return false;
#undef DO_
}

void CGameServers_IPsWithSteamIDs_Response_Server::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CGameServers_IPsWithSteamIDs_Response.Server)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string addr = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->addr().data(), this->addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CGameServers_IPsWithSteamIDs_Response.Server.addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->addr(), output);
  }

  // optional fixed64 steamid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steamid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CGameServers_IPsWithSteamIDs_Response.Server)
}

::google::protobuf::uint8* CGameServers_IPsWithSteamIDs_Response_Server::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CGameServers_IPsWithSteamIDs_Response.Server)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string addr = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->addr().data(), this->addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CGameServers_IPsWithSteamIDs_Response.Server.addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->addr(), target);
  }

  // optional fixed64 steamid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steamid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CGameServers_IPsWithSteamIDs_Response.Server)
  return target;
}

size_t CGameServers_IPsWithSteamIDs_Response_Server::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CGameServers_IPsWithSteamIDs_Response.Server)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string addr = 1;
    if (has_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->addr());
    }

    // optional fixed64 steamid = 2;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGameServers_IPsWithSteamIDs_Response_Server::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CGameServers_IPsWithSteamIDs_Response.Server)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameServers_IPsWithSteamIDs_Response_Server* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CGameServers_IPsWithSteamIDs_Response_Server>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CGameServers_IPsWithSteamIDs_Response.Server)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CGameServers_IPsWithSteamIDs_Response.Server)
    MergeFrom(*source);
  }
}

void CGameServers_IPsWithSteamIDs_Response_Server::MergeFrom(const CGameServers_IPsWithSteamIDs_Response_Server& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CGameServers_IPsWithSteamIDs_Response.Server)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_addr();
      addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addr_);
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_ = from.steamid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGameServers_IPsWithSteamIDs_Response_Server::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CGameServers_IPsWithSteamIDs_Response.Server)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameServers_IPsWithSteamIDs_Response_Server::CopyFrom(const CGameServers_IPsWithSteamIDs_Response_Server& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CGameServers_IPsWithSteamIDs_Response.Server)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameServers_IPsWithSteamIDs_Response_Server::IsInitialized() const {
  return true;
}

void CGameServers_IPsWithSteamIDs_Response_Server::Swap(CGameServers_IPsWithSteamIDs_Response_Server* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGameServers_IPsWithSteamIDs_Response_Server::InternalSwap(CGameServers_IPsWithSteamIDs_Response_Server* other) {
  addr_.Swap(&other->addr_);
  std::swap(steamid_, other->steamid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CGameServers_IPsWithSteamIDs_Response_Server::GetMetadata() const {
  protobuf_steammessages_5fgameservers_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fgameservers_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CGameServers_IPsWithSteamIDs_Response_Server

// optional string addr = 1;
bool CGameServers_IPsWithSteamIDs_Response_Server::has_addr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CGameServers_IPsWithSteamIDs_Response_Server::set_has_addr() {
  _has_bits_[0] |= 0x00000001u;
}
void CGameServers_IPsWithSteamIDs_Response_Server::clear_has_addr() {
  _has_bits_[0] &= ~0x00000001u;
}
void CGameServers_IPsWithSteamIDs_Response_Server::clear_addr() {
  addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_addr();
}
const ::std::string& CGameServers_IPsWithSteamIDs_Response_Server::addr() const {
  // @@protoc_insertion_point(field_get:proto.steam.CGameServers_IPsWithSteamIDs_Response.Server.addr)
  return addr_.GetNoArena();
}
void CGameServers_IPsWithSteamIDs_Response_Server::set_addr(const ::std::string& value) {
  set_has_addr();
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CGameServers_IPsWithSteamIDs_Response.Server.addr)
}
#if LANG_CXX11
void CGameServers_IPsWithSteamIDs_Response_Server::set_addr(::std::string&& value) {
  set_has_addr();
  addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CGameServers_IPsWithSteamIDs_Response.Server.addr)
}
#endif
void CGameServers_IPsWithSteamIDs_Response_Server::set_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_addr();
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CGameServers_IPsWithSteamIDs_Response.Server.addr)
}
void CGameServers_IPsWithSteamIDs_Response_Server::set_addr(const char* value, size_t size) {
  set_has_addr();
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CGameServers_IPsWithSteamIDs_Response.Server.addr)
}
::std::string* CGameServers_IPsWithSteamIDs_Response_Server::mutable_addr() {
  set_has_addr();
  // @@protoc_insertion_point(field_mutable:proto.steam.CGameServers_IPsWithSteamIDs_Response.Server.addr)
  return addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CGameServers_IPsWithSteamIDs_Response_Server::release_addr() {
  // @@protoc_insertion_point(field_release:proto.steam.CGameServers_IPsWithSteamIDs_Response.Server.addr)
  clear_has_addr();
  return addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CGameServers_IPsWithSteamIDs_Response_Server::set_allocated_addr(::std::string* addr) {
  if (addr != NULL) {
    set_has_addr();
  } else {
    clear_has_addr();
  }
  addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), addr);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CGameServers_IPsWithSteamIDs_Response.Server.addr)
}

// optional fixed64 steamid = 2;
bool CGameServers_IPsWithSteamIDs_Response_Server::has_steamid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CGameServers_IPsWithSteamIDs_Response_Server::set_has_steamid() {
  _has_bits_[0] |= 0x00000002u;
}
void CGameServers_IPsWithSteamIDs_Response_Server::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CGameServers_IPsWithSteamIDs_Response_Server::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
::google::protobuf::uint64 CGameServers_IPsWithSteamIDs_Response_Server::steamid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CGameServers_IPsWithSteamIDs_Response.Server.steamid)
  return steamid_;
}
void CGameServers_IPsWithSteamIDs_Response_Server::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CGameServers_IPsWithSteamIDs_Response.Server.steamid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGameServers_IPsWithSteamIDs_Response::kServersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGameServers_IPsWithSteamIDs_Response::CGameServers_IPsWithSteamIDs_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fgameservers_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CGameServers_IPsWithSteamIDs_Response)
}
CGameServers_IPsWithSteamIDs_Response::CGameServers_IPsWithSteamIDs_Response(const CGameServers_IPsWithSteamIDs_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      servers_(from.servers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CGameServers_IPsWithSteamIDs_Response)
}

void CGameServers_IPsWithSteamIDs_Response::SharedCtor() {
  _cached_size_ = 0;
}

CGameServers_IPsWithSteamIDs_Response::~CGameServers_IPsWithSteamIDs_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CGameServers_IPsWithSteamIDs_Response)
  SharedDtor();
}

void CGameServers_IPsWithSteamIDs_Response::SharedDtor() {
}

void CGameServers_IPsWithSteamIDs_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGameServers_IPsWithSteamIDs_Response::descriptor() {
  protobuf_steammessages_5fgameservers_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fgameservers_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CGameServers_IPsWithSteamIDs_Response& CGameServers_IPsWithSteamIDs_Response::default_instance() {
  protobuf_steammessages_5fgameservers_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CGameServers_IPsWithSteamIDs_Response* CGameServers_IPsWithSteamIDs_Response::New(::google::protobuf::Arena* arena) const {
  CGameServers_IPsWithSteamIDs_Response* n = new CGameServers_IPsWithSteamIDs_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CGameServers_IPsWithSteamIDs_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CGameServers_IPsWithSteamIDs_Response)
  servers_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CGameServers_IPsWithSteamIDs_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CGameServers_IPsWithSteamIDs_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.steam.CGameServers_IPsWithSteamIDs_Response.Server servers = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_servers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CGameServers_IPsWithSteamIDs_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CGameServers_IPsWithSteamIDs_Response)
  return false;
#undef DO_
}

void CGameServers_IPsWithSteamIDs_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CGameServers_IPsWithSteamIDs_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CGameServers_IPsWithSteamIDs_Response.Server servers = 1;
  for (unsigned int i = 0, n = this->servers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->servers(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CGameServers_IPsWithSteamIDs_Response)
}

::google::protobuf::uint8* CGameServers_IPsWithSteamIDs_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CGameServers_IPsWithSteamIDs_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CGameServers_IPsWithSteamIDs_Response.Server servers = 1;
  for (unsigned int i = 0, n = this->servers_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->servers(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CGameServers_IPsWithSteamIDs_Response)
  return target;
}

size_t CGameServers_IPsWithSteamIDs_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CGameServers_IPsWithSteamIDs_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.steam.CGameServers_IPsWithSteamIDs_Response.Server servers = 1;
  {
    unsigned int count = this->servers_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->servers(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGameServers_IPsWithSteamIDs_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CGameServers_IPsWithSteamIDs_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameServers_IPsWithSteamIDs_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CGameServers_IPsWithSteamIDs_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CGameServers_IPsWithSteamIDs_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CGameServers_IPsWithSteamIDs_Response)
    MergeFrom(*source);
  }
}

void CGameServers_IPsWithSteamIDs_Response::MergeFrom(const CGameServers_IPsWithSteamIDs_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CGameServers_IPsWithSteamIDs_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  servers_.MergeFrom(from.servers_);
}

void CGameServers_IPsWithSteamIDs_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CGameServers_IPsWithSteamIDs_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameServers_IPsWithSteamIDs_Response::CopyFrom(const CGameServers_IPsWithSteamIDs_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CGameServers_IPsWithSteamIDs_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameServers_IPsWithSteamIDs_Response::IsInitialized() const {
  return true;
}

void CGameServers_IPsWithSteamIDs_Response::Swap(CGameServers_IPsWithSteamIDs_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGameServers_IPsWithSteamIDs_Response::InternalSwap(CGameServers_IPsWithSteamIDs_Response* other) {
  servers_.InternalSwap(&other->servers_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CGameServers_IPsWithSteamIDs_Response::GetMetadata() const {
  protobuf_steammessages_5fgameservers_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fgameservers_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CGameServers_IPsWithSteamIDs_Response

// repeated .proto.steam.CGameServers_IPsWithSteamIDs_Response.Server servers = 1;
int CGameServers_IPsWithSteamIDs_Response::servers_size() const {
  return servers_.size();
}
void CGameServers_IPsWithSteamIDs_Response::clear_servers() {
  servers_.Clear();
}
const ::proto::steam::CGameServers_IPsWithSteamIDs_Response_Server& CGameServers_IPsWithSteamIDs_Response::servers(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CGameServers_IPsWithSteamIDs_Response.servers)
  return servers_.Get(index);
}
::proto::steam::CGameServers_IPsWithSteamIDs_Response_Server* CGameServers_IPsWithSteamIDs_Response::mutable_servers(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CGameServers_IPsWithSteamIDs_Response.servers)
  return servers_.Mutable(index);
}
::proto::steam::CGameServers_IPsWithSteamIDs_Response_Server* CGameServers_IPsWithSteamIDs_Response::add_servers() {
  // @@protoc_insertion_point(field_add:proto.steam.CGameServers_IPsWithSteamIDs_Response.servers)
  return servers_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::CGameServers_IPsWithSteamIDs_Response_Server >*
CGameServers_IPsWithSteamIDs_Response::mutable_servers() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CGameServers_IPsWithSteamIDs_Response.servers)
  return &servers_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::CGameServers_IPsWithSteamIDs_Response_Server >&
CGameServers_IPsWithSteamIDs_Response::servers() const {
  // @@protoc_insertion_point(field_list:proto.steam.CGameServers_IPsWithSteamIDs_Response.servers)
  return servers_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGameServers_GetServerIPsBySteamID_Request::kServerSteamidsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGameServers_GetServerIPsBySteamID_Request::CGameServers_GetServerIPsBySteamID_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fgameservers_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CGameServers_GetServerIPsBySteamID_Request)
}
CGameServers_GetServerIPsBySteamID_Request::CGameServers_GetServerIPsBySteamID_Request(const CGameServers_GetServerIPsBySteamID_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      server_steamids_(from.server_steamids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CGameServers_GetServerIPsBySteamID_Request)
}

void CGameServers_GetServerIPsBySteamID_Request::SharedCtor() {
  _cached_size_ = 0;
}

CGameServers_GetServerIPsBySteamID_Request::~CGameServers_GetServerIPsBySteamID_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CGameServers_GetServerIPsBySteamID_Request)
  SharedDtor();
}

void CGameServers_GetServerIPsBySteamID_Request::SharedDtor() {
}

void CGameServers_GetServerIPsBySteamID_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGameServers_GetServerIPsBySteamID_Request::descriptor() {
  protobuf_steammessages_5fgameservers_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fgameservers_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CGameServers_GetServerIPsBySteamID_Request& CGameServers_GetServerIPsBySteamID_Request::default_instance() {
  protobuf_steammessages_5fgameservers_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CGameServers_GetServerIPsBySteamID_Request* CGameServers_GetServerIPsBySteamID_Request::New(::google::protobuf::Arena* arena) const {
  CGameServers_GetServerIPsBySteamID_Request* n = new CGameServers_GetServerIPsBySteamID_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CGameServers_GetServerIPsBySteamID_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CGameServers_GetServerIPsBySteamID_Request)
  server_steamids_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CGameServers_GetServerIPsBySteamID_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CGameServers_GetServerIPsBySteamID_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated fixed64 server_steamids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 9u, input, this->mutable_server_steamids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_server_steamids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CGameServers_GetServerIPsBySteamID_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CGameServers_GetServerIPsBySteamID_Request)
  return false;
#undef DO_
}

void CGameServers_GetServerIPsBySteamID_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CGameServers_GetServerIPsBySteamID_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated fixed64 server_steamids = 1;
  for (int i = 0, n = this->server_steamids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      1, this->server_steamids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CGameServers_GetServerIPsBySteamID_Request)
}

::google::protobuf::uint8* CGameServers_GetServerIPsBySteamID_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CGameServers_GetServerIPsBySteamID_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated fixed64 server_steamids = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFixed64ToArray(1, this->server_steamids_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CGameServers_GetServerIPsBySteamID_Request)
  return target;
}

size_t CGameServers_GetServerIPsBySteamID_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CGameServers_GetServerIPsBySteamID_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated fixed64 server_steamids = 1;
  {
    unsigned int count = this->server_steamids_size();
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->server_steamids_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGameServers_GetServerIPsBySteamID_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CGameServers_GetServerIPsBySteamID_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameServers_GetServerIPsBySteamID_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CGameServers_GetServerIPsBySteamID_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CGameServers_GetServerIPsBySteamID_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CGameServers_GetServerIPsBySteamID_Request)
    MergeFrom(*source);
  }
}

void CGameServers_GetServerIPsBySteamID_Request::MergeFrom(const CGameServers_GetServerIPsBySteamID_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CGameServers_GetServerIPsBySteamID_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  server_steamids_.MergeFrom(from.server_steamids_);
}

void CGameServers_GetServerIPsBySteamID_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CGameServers_GetServerIPsBySteamID_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameServers_GetServerIPsBySteamID_Request::CopyFrom(const CGameServers_GetServerIPsBySteamID_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CGameServers_GetServerIPsBySteamID_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameServers_GetServerIPsBySteamID_Request::IsInitialized() const {
  return true;
}

void CGameServers_GetServerIPsBySteamID_Request::Swap(CGameServers_GetServerIPsBySteamID_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGameServers_GetServerIPsBySteamID_Request::InternalSwap(CGameServers_GetServerIPsBySteamID_Request* other) {
  server_steamids_.InternalSwap(&other->server_steamids_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CGameServers_GetServerIPsBySteamID_Request::GetMetadata() const {
  protobuf_steammessages_5fgameservers_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fgameservers_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CGameServers_GetServerIPsBySteamID_Request

// repeated fixed64 server_steamids = 1;
int CGameServers_GetServerIPsBySteamID_Request::server_steamids_size() const {
  return server_steamids_.size();
}
void CGameServers_GetServerIPsBySteamID_Request::clear_server_steamids() {
  server_steamids_.Clear();
}
::google::protobuf::uint64 CGameServers_GetServerIPsBySteamID_Request::server_steamids(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CGameServers_GetServerIPsBySteamID_Request.server_steamids)
  return server_steamids_.Get(index);
}
void CGameServers_GetServerIPsBySteamID_Request::set_server_steamids(int index, ::google::protobuf::uint64 value) {
  server_steamids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.steam.CGameServers_GetServerIPsBySteamID_Request.server_steamids)
}
void CGameServers_GetServerIPsBySteamID_Request::add_server_steamids(::google::protobuf::uint64 value) {
  server_steamids_.Add(value);
  // @@protoc_insertion_point(field_add:proto.steam.CGameServers_GetServerIPsBySteamID_Request.server_steamids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CGameServers_GetServerIPsBySteamID_Request::server_steamids() const {
  // @@protoc_insertion_point(field_list:proto.steam.CGameServers_GetServerIPsBySteamID_Request.server_steamids)
  return server_steamids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CGameServers_GetServerIPsBySteamID_Request::mutable_server_steamids() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CGameServers_GetServerIPsBySteamID_Request.server_steamids)
  return &server_steamids_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

GameServers::~GameServers() {}

const ::google::protobuf::ServiceDescriptor* GameServers::descriptor() {
  protobuf_steammessages_5fgameservers_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fgameservers_2esteamclient_2eproto::file_level_service_descriptors[0];
}

const ::google::protobuf::ServiceDescriptor* GameServers::GetDescriptor() {
  return descriptor();
}

void GameServers::GetServerList(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CGameServers_GetServerList_Request*,
                         ::proto::steam::CGameServers_GetServerList_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetServerList() not implemented.");
  done->Run();
}

void GameServers::GetServerSteamIDsByIP(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CGameServers_GetServerSteamIDsByIP_Request*,
                         ::proto::steam::CGameServers_IPsWithSteamIDs_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetServerSteamIDsByIP() not implemented.");
  done->Run();
}

void GameServers::GetServerIPsBySteamID(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CGameServers_GetServerIPsBySteamID_Request*,
                         ::proto::steam::CGameServers_IPsWithSteamIDs_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetServerIPsBySteamID() not implemented.");
  done->Run();
}

void GameServers::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), protobuf_steammessages_5fgameservers_2esteamclient_2eproto::file_level_service_descriptors[0]);
  switch(method->index()) {
    case 0:
      GetServerList(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CGameServers_GetServerList_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CGameServers_GetServerList_Response*>(response),
             done);
      break;
    case 1:
      GetServerSteamIDsByIP(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CGameServers_GetServerSteamIDsByIP_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CGameServers_IPsWithSteamIDs_Response*>(response),
             done);
      break;
    case 2:
      GetServerIPsBySteamID(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CGameServers_GetServerIPsBySteamID_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CGameServers_IPsWithSteamIDs_Response*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& GameServers::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::steam::CGameServers_GetServerList_Request::default_instance();
    case 1:
      return ::proto::steam::CGameServers_GetServerSteamIDsByIP_Request::default_instance();
    case 2:
      return ::proto::steam::CGameServers_GetServerIPsBySteamID_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& GameServers::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::steam::CGameServers_GetServerList_Response::default_instance();
    case 1:
      return ::proto::steam::CGameServers_IPsWithSteamIDs_Response::default_instance();
    case 2:
      return ::proto::steam::CGameServers_IPsWithSteamIDs_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

GameServers_Stub::GameServers_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
GameServers_Stub::GameServers_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
GameServers_Stub::~GameServers_Stub() {
  if (owns_channel_) delete channel_;
}

void GameServers_Stub::GetServerList(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CGameServers_GetServerList_Request* request,
                              ::proto::steam::CGameServers_GetServerList_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void GameServers_Stub::GetServerSteamIDsByIP(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CGameServers_GetServerSteamIDsByIP_Request* request,
                              ::proto::steam::CGameServers_IPsWithSteamIDs_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void GameServers_Stub::GetServerIPsBySteamID(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CGameServers_GetServerIPsBySteamID_Request* request,
                              ::proto::steam::CGameServers_IPsWithSteamIDs_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace steam
}  // namespace proto

// @@protoc_insertion_point(global_scope)
