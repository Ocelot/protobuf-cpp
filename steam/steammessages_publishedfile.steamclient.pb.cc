// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_publishedfile.steamclient.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "steammessages_publishedfile.steamclient.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace steam {
class CPublishedFile_Subscribe_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CPublishedFile_Subscribe_Request> {
} _CPublishedFile_Subscribe_Request_default_instance_;
class CPublishedFile_Subscribe_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CPublishedFile_Subscribe_Response> {
} _CPublishedFile_Subscribe_Response_default_instance_;
class CPublishedFile_Unsubscribe_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CPublishedFile_Unsubscribe_Request> {
} _CPublishedFile_Unsubscribe_Request_default_instance_;
class CPublishedFile_Unsubscribe_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CPublishedFile_Unsubscribe_Response> {
} _CPublishedFile_Unsubscribe_Response_default_instance_;
class CPublishedFile_CanSubscribe_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CPublishedFile_CanSubscribe_Request> {
} _CPublishedFile_CanSubscribe_Request_default_instance_;
class CPublishedFile_CanSubscribe_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CPublishedFile_CanSubscribe_Response> {
} _CPublishedFile_CanSubscribe_Response_default_instance_;
class CPublishedFile_Publish_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CPublishedFile_Publish_Request> {
} _CPublishedFile_Publish_Request_default_instance_;
class CPublishedFile_Publish_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CPublishedFile_Publish_Response> {
} _CPublishedFile_Publish_Response_default_instance_;
class CPublishedFile_GetDetails_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CPublishedFile_GetDetails_Request> {
} _CPublishedFile_GetDetails_Request_default_instance_;
class PublishedFileDetails_TagDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PublishedFileDetails_Tag> {
} _PublishedFileDetails_Tag_default_instance_;
class PublishedFileDetails_PreviewDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PublishedFileDetails_Preview> {
} _PublishedFileDetails_Preview_default_instance_;
class PublishedFileDetails_ChildDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PublishedFileDetails_Child> {
} _PublishedFileDetails_Child_default_instance_;
class PublishedFileDetails_KVTagDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PublishedFileDetails_KVTag> {
} _PublishedFileDetails_KVTag_default_instance_;
class PublishedFileDetails_VoteDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PublishedFileDetails_VoteData> {
} _PublishedFileDetails_VoteData_default_instance_;
class PublishedFileDetails_ForSaleDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PublishedFileDetails_ForSaleData> {
} _PublishedFileDetails_ForSaleData_default_instance_;
class PublishedFileDetails_PlaytimeStatsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PublishedFileDetails_PlaytimeStats> {
} _PublishedFileDetails_PlaytimeStats_default_instance_;
class PublishedFileDetailsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PublishedFileDetails> {
} _PublishedFileDetails_default_instance_;
class CPublishedFile_GetDetails_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CPublishedFile_GetDetails_Response> {
} _CPublishedFile_GetDetails_Response_default_instance_;
class CPublishedFile_GetItemInfo_Request_WorkshopItemDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CPublishedFile_GetItemInfo_Request_WorkshopItem> {
} _CPublishedFile_GetItemInfo_Request_WorkshopItem_default_instance_;
class CPublishedFile_GetItemInfo_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CPublishedFile_GetItemInfo_Request> {
} _CPublishedFile_GetItemInfo_Request_default_instance_;
class CPublishedFile_GetItemInfo_Response_WorkshopItemInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CPublishedFile_GetItemInfo_Response_WorkshopItemInfo> {
} _CPublishedFile_GetItemInfo_Response_WorkshopItemInfo_default_instance_;
class CPublishedFile_GetItemInfo_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CPublishedFile_GetItemInfo_Response> {
} _CPublishedFile_GetItemInfo_Response_default_instance_;
class CPublishedFile_GetUserFiles_Request_KVTagDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CPublishedFile_GetUserFiles_Request_KVTag> {
} _CPublishedFile_GetUserFiles_Request_KVTag_default_instance_;
class CPublishedFile_GetUserFiles_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CPublishedFile_GetUserFiles_Request> {
} _CPublishedFile_GetUserFiles_Request_default_instance_;
class CPublishedFile_GetUserFiles_Response_AppDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CPublishedFile_GetUserFiles_Response_App> {
} _CPublishedFile_GetUserFiles_Response_App_default_instance_;
class CPublishedFile_GetUserFiles_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CPublishedFile_GetUserFiles_Response> {
} _CPublishedFile_GetUserFiles_Response_default_instance_;
class CPublishedFile_Update_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CPublishedFile_Update_Request> {
} _CPublishedFile_Update_Request_default_instance_;
class CPublishedFile_Update_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CPublishedFile_Update_Response> {
} _CPublishedFile_Update_Response_default_instance_;
class CPublishedFile_GetChangeHistoryEntry_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CPublishedFile_GetChangeHistoryEntry_Request> {
} _CPublishedFile_GetChangeHistoryEntry_Request_default_instance_;
class CPublishedFile_GetChangeHistoryEntry_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CPublishedFile_GetChangeHistoryEntry_Response> {
} _CPublishedFile_GetChangeHistoryEntry_Response_default_instance_;
class CPublishedFile_GetChangeHistory_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CPublishedFile_GetChangeHistory_Request> {
} _CPublishedFile_GetChangeHistory_Request_default_instance_;
class CPublishedFile_GetChangeHistory_Response_ChangeLogDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CPublishedFile_GetChangeHistory_Response_ChangeLog> {
} _CPublishedFile_GetChangeHistory_Response_ChangeLog_default_instance_;
class CPublishedFile_GetChangeHistory_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CPublishedFile_GetChangeHistory_Response> {
} _CPublishedFile_GetChangeHistory_Response_default_instance_;
class CPublishedFile_RefreshVotingQueue_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CPublishedFile_RefreshVotingQueue_Request> {
} _CPublishedFile_RefreshVotingQueue_Request_default_instance_;
class CPublishedFile_RefreshVotingQueue_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CPublishedFile_RefreshVotingQueue_Response> {
} _CPublishedFile_RefreshVotingQueue_Response_default_instance_;
class CPublishedFile_QueryFiles_Request_KVTagDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CPublishedFile_QueryFiles_Request_KVTag> {
} _CPublishedFile_QueryFiles_Request_KVTag_default_instance_;
class CPublishedFile_QueryFiles_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CPublishedFile_QueryFiles_Request> {
} _CPublishedFile_QueryFiles_Request_default_instance_;
class CPublishedFile_QueryFiles_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CPublishedFile_QueryFiles_Response> {
} _CPublishedFile_QueryFiles_Response_default_instance_;
class CPublishedFile_StartPlaytimeTracking_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CPublishedFile_StartPlaytimeTracking_Request> {
} _CPublishedFile_StartPlaytimeTracking_Request_default_instance_;
class CPublishedFile_StartPlaytimeTracking_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CPublishedFile_StartPlaytimeTracking_Response> {
} _CPublishedFile_StartPlaytimeTracking_Response_default_instance_;
class CPublishedFile_StopPlaytimeTracking_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CPublishedFile_StopPlaytimeTracking_Request> {
} _CPublishedFile_StopPlaytimeTracking_Request_default_instance_;
class CPublishedFile_StopPlaytimeTracking_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CPublishedFile_StopPlaytimeTracking_Response> {
} _CPublishedFile_StopPlaytimeTracking_Response_default_instance_;
class CPublishedFile_StopPlaytimeTrackingForAllAppItems_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request> {
} _CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request_default_instance_;
class CPublishedFile_StopPlaytimeTrackingForAllAppItems_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response> {
} _CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response_default_instance_;
class CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage> {
} _CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage_default_instance_;
class CPublishedFile_SetPlaytimeForControllerConfigs_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CPublishedFile_SetPlaytimeForControllerConfigs_Request> {
} _CPublishedFile_SetPlaytimeForControllerConfigs_Request_default_instance_;
class CPublishedFile_SetPlaytimeForControllerConfigs_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CPublishedFile_SetPlaytimeForControllerConfigs_Response> {
} _CPublishedFile_SetPlaytimeForControllerConfigs_Response_default_instance_;
class CPublishedFile_AddChild_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CPublishedFile_AddChild_Request> {
} _CPublishedFile_AddChild_Request_default_instance_;
class CPublishedFile_AddChild_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CPublishedFile_AddChild_Response> {
} _CPublishedFile_AddChild_Response_default_instance_;
class CPublishedFile_RemoveChild_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CPublishedFile_RemoveChild_Request> {
} _CPublishedFile_RemoveChild_Request_default_instance_;
class CPublishedFile_RemoveChild_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CPublishedFile_RemoveChild_Response> {
} _CPublishedFile_RemoveChild_Response_default_instance_;

namespace protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[51];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];
const ::google::protobuf::ServiceDescriptor* file_level_service_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_Subscribe_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_Subscribe_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_Subscribe_Request, publishedfileid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_Subscribe_Request, list_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_Subscribe_Request, appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_Subscribe_Request, notify_client_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_Subscribe_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_Subscribe_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_Unsubscribe_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_Unsubscribe_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_Unsubscribe_Request, publishedfileid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_Unsubscribe_Request, list_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_Unsubscribe_Request, appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_Unsubscribe_Request, notify_client_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_Unsubscribe_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_Unsubscribe_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_CanSubscribe_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_CanSubscribe_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_CanSubscribe_Request, publishedfileid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_CanSubscribe_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_CanSubscribe_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_CanSubscribe_Response, can_subscribe_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_Publish_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_Publish_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_Publish_Request, appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_Publish_Request, consumer_appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_Publish_Request, cloudfilename_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_Publish_Request, preview_cloudfilename_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_Publish_Request, title_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_Publish_Request, file_description_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_Publish_Request, file_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_Publish_Request, consumer_shortcut_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_Publish_Request, youtube_username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_Publish_Request, youtube_videoid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_Publish_Request, visibility_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_Publish_Request, redirect_uri_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_Publish_Request, tags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_Publish_Request, collection_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_Publish_Request, game_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_Publish_Request, url_),
  11,
  12,
  0,
  1,
  2,
  3,
  13,
  4,
  5,
  6,
  14,
  7,
  ~0u,
  8,
  9,
  10,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_Publish_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_Publish_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_Publish_Response, publishedfileid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_Publish_Response, redirect_uri_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetDetails_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetDetails_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetDetails_Request, publishedfileids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetDetails_Request, includetags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetDetails_Request, includeadditionalpreviews_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetDetails_Request, includechildren_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetDetails_Request, includekvtags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetDetails_Request, includevotes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetDetails_Request, short_description_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetDetails_Request, includeforsaledata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetDetails_Request, includemetadata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetDetails_Request, language_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetDetails_Request, return_playtime_stats_),
  ~0u,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails_Tag, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails_Tag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails_Tag, tag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails_Tag, adminonly_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails_Preview, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails_Preview, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails_Preview, previewid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails_Preview, sortorder_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails_Preview, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails_Preview, size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails_Preview, filename_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails_Preview, youtubevideoid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails_Preview, preview_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails_Preview, external_reference_),
  4,
  5,
  0,
  6,
  1,
  2,
  7,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails_Child, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails_Child, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails_Child, publishedfileid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails_Child, sortorder_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails_Child, file_type_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails_KVTag, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails_KVTag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails_KVTag, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails_KVTag, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails_VoteData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails_VoteData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails_VoteData, score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails_VoteData, votes_up_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails_VoteData, votes_down_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails_ForSaleData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails_ForSaleData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails_ForSaleData, is_for_sale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails_ForSaleData, price_category_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails_ForSaleData, estatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails_ForSaleData, price_category_floor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails_ForSaleData, price_is_pay_what_you_want_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails_ForSaleData, discount_percentage_),
  2,
  0,
  1,
  4,
  3,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails_PlaytimeStats, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails_PlaytimeStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails_PlaytimeStats, playtime_seconds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails_PlaytimeStats, num_sessions_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, publishedfileid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, creator_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, creator_appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, consumer_appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, consumer_shortcutid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, filename_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, file_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, preview_file_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, file_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, preview_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, youtubevideoid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, hcontent_file_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, hcontent_preview_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, title_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, file_description_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, short_description_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, time_created_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, time_updated_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, visibility_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, flags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, workshop_file_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, workshop_accepted_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, show_subscribe_all_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, num_comments_developer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, num_comments_public_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, banned_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, ban_reason_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, banner_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, can_be_deleted_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, incompatible_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, app_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, file_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, can_subscribe_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, subscriptions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, favorited_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, followers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, lifetime_subscriptions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, lifetime_favorited_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, lifetime_followers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, lifetime_playtime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, lifetime_playtime_sessions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, views_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, image_width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, image_height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, image_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, spoiler_tag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, shortcutid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, shortcutname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, num_children_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, num_reports_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, previews_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, tags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, children_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, kvtags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, vote_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, playtime_stats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, time_subscribed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, for_sale_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, metadata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, incompatible_actor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, incompatible_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishedFileDetails, language_),
  17,
  16,
  19,
  18,
  20,
  21,
  0,
  22,
  23,
  1,
  2,
  3,
  4,
  24,
  25,
  5,
  6,
  7,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  34,
  36,
  33,
  8,
  35,
  39,
  40,
  9,
  37,
  41,
  38,
  43,
  44,
  45,
  46,
  47,
  58,
  59,
  48,
  49,
  50,
  10,
  42,
  51,
  11,
  52,
  53,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  13,
  15,
  54,
  14,
  12,
  55,
  56,
  57,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetDetails_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetDetails_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetDetails_Response, publishedfiledetails_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetItemInfo_Request_WorkshopItem, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetItemInfo_Request_WorkshopItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetItemInfo_Request_WorkshopItem, published_file_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetItemInfo_Request_WorkshopItem, time_updated_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetItemInfo_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetItemInfo_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetItemInfo_Request, app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetItemInfo_Request, last_time_updated_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetItemInfo_Request, workshop_items_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetItemInfo_Response_WorkshopItemInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetItemInfo_Response_WorkshopItemInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetItemInfo_Response_WorkshopItemInfo, published_file_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetItemInfo_Response_WorkshopItemInfo, time_updated_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetItemInfo_Response_WorkshopItemInfo, manifest_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetItemInfo_Response_WorkshopItemInfo, flags_),
  0,
  2,
  1,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetItemInfo_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetItemInfo_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetItemInfo_Response, update_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetItemInfo_Response, workshop_items_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetUserFiles_Request_KVTag, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetUserFiles_Request_KVTag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetUserFiles_Request_KVTag, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetUserFiles_Request_KVTag, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetUserFiles_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetUserFiles_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetUserFiles_Request, steamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetUserFiles_Request, appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetUserFiles_Request, page_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetUserFiles_Request, numperpage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetUserFiles_Request, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetUserFiles_Request, sortmethod_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetUserFiles_Request, privacy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetUserFiles_Request, requiredtags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetUserFiles_Request, excludedtags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetUserFiles_Request, required_kv_tags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetUserFiles_Request, filetype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetUserFiles_Request, creator_appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetUserFiles_Request, match_cloud_filename_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetUserFiles_Request, cache_max_age_seconds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetUserFiles_Request, language_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetUserFiles_Request, totalonly_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetUserFiles_Request, ids_only_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetUserFiles_Request, return_vote_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetUserFiles_Request, return_tags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetUserFiles_Request, return_kv_tags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetUserFiles_Request, return_previews_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetUserFiles_Request, return_children_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetUserFiles_Request, return_short_description_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetUserFiles_Request, return_for_sale_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetUserFiles_Request, return_metadata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetUserFiles_Request, return_playtime_stats_),
  3,
  4,
  21,
  22,
  0,
  1,
  5,
  ~0u,
  ~0u,
  ~0u,
  6,
  7,
  2,
  16,
  17,
  8,
  9,
  18,
  10,
  19,
  11,
  12,
  20,
  13,
  14,
  15,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetUserFiles_Response_App, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetUserFiles_Response_App, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetUserFiles_Response_App, appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetUserFiles_Response_App, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetUserFiles_Response_App, shortcutid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetUserFiles_Response_App, private__),
  1,
  0,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetUserFiles_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetUserFiles_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetUserFiles_Response, total_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetUserFiles_Response, startindex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetUserFiles_Response, publishedfiledetails_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetUserFiles_Response, apps_),
  0,
  1,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_Update_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_Update_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_Update_Request, appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_Update_Request, publishedfileid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_Update_Request, title_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_Update_Request, file_description_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_Update_Request, visibility_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_Update_Request, tags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_Update_Request, filename_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_Update_Request, preview_filename_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_Update_Request, image_width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_Update_Request, image_height_),
  5,
  4,
  0,
  1,
  6,
  ~0u,
  2,
  3,
  7,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_Update_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_Update_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetChangeHistoryEntry_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetChangeHistoryEntry_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetChangeHistoryEntry_Request, publishedfileid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetChangeHistoryEntry_Request, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetChangeHistoryEntry_Request, language_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetChangeHistoryEntry_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetChangeHistoryEntry_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetChangeHistoryEntry_Response, change_description_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetChangeHistoryEntry_Response, language_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetChangeHistory_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetChangeHistory_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetChangeHistory_Request, publishedfileid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetChangeHistory_Request, total_only_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetChangeHistory_Request, startindex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetChangeHistory_Request, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetChangeHistory_Request, language_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetChangeHistory_Response_ChangeLog, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetChangeHistory_Response_ChangeLog, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetChangeHistory_Response_ChangeLog, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetChangeHistory_Response_ChangeLog, change_description_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetChangeHistory_Response_ChangeLog, language_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetChangeHistory_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetChangeHistory_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetChangeHistory_Response, changes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_GetChangeHistory_Response, total_),
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_RefreshVotingQueue_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_RefreshVotingQueue_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_RefreshVotingQueue_Request, appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_RefreshVotingQueue_Request, matching_file_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_RefreshVotingQueue_Request, tags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_RefreshVotingQueue_Request, match_all_tags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_RefreshVotingQueue_Request, excluded_tags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_RefreshVotingQueue_Request, desired_queue_size_),
  0,
  1,
  ~0u,
  3,
  ~0u,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_RefreshVotingQueue_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_RefreshVotingQueue_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_QueryFiles_Request_KVTag, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_QueryFiles_Request_KVTag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_QueryFiles_Request_KVTag, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_QueryFiles_Request_KVTag, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_QueryFiles_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_QueryFiles_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_QueryFiles_Request, query_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_QueryFiles_Request, page_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_QueryFiles_Request, numperpage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_QueryFiles_Request, creator_appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_QueryFiles_Request, appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_QueryFiles_Request, requiredtags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_QueryFiles_Request, excludedtags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_QueryFiles_Request, match_all_tags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_QueryFiles_Request, required_flags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_QueryFiles_Request, omitted_flags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_QueryFiles_Request, search_text_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_QueryFiles_Request, filetype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_QueryFiles_Request, child_publishedfileid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_QueryFiles_Request, days_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_QueryFiles_Request, include_recent_votes_only_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_QueryFiles_Request, cache_max_age_seconds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_QueryFiles_Request, language_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_QueryFiles_Request, required_kv_tags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_QueryFiles_Request, totalonly_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_QueryFiles_Request, ids_only_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_QueryFiles_Request, return_vote_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_QueryFiles_Request, return_tags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_QueryFiles_Request, return_kv_tags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_QueryFiles_Request, return_previews_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_QueryFiles_Request, return_children_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_QueryFiles_Request, return_short_description_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_QueryFiles_Request, return_for_sale_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_QueryFiles_Request, return_metadata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_QueryFiles_Request, return_playtime_stats_),
  1,
  2,
  22,
  3,
  4,
  ~0u,
  ~0u,
  23,
  ~0u,
  ~0u,
  0,
  6,
  5,
  7,
  12,
  19,
  20,
  ~0u,
  13,
  14,
  15,
  8,
  9,
  10,
  11,
  16,
  17,
  18,
  21,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_QueryFiles_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_QueryFiles_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_QueryFiles_Response, total_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_QueryFiles_Response, publishedfiledetails_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_StartPlaytimeTracking_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_StartPlaytimeTracking_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_StartPlaytimeTracking_Request, appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_StartPlaytimeTracking_Request, publishedfileids_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_StartPlaytimeTracking_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_StartPlaytimeTracking_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_StopPlaytimeTracking_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_StopPlaytimeTracking_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_StopPlaytimeTracking_Request, appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_StopPlaytimeTracking_Request, publishedfileids_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_StopPlaytimeTracking_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_StopPlaytimeTracking_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request, appid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage, publishedfileid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage, seconds_active_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_SetPlaytimeForControllerConfigs_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_SetPlaytimeForControllerConfigs_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_SetPlaytimeForControllerConfigs_Request, appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_SetPlaytimeForControllerConfigs_Request, controller_config_usage_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_SetPlaytimeForControllerConfigs_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_SetPlaytimeForControllerConfigs_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_AddChild_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_AddChild_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_AddChild_Request, publishedfileid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_AddChild_Request, child_publishedfileid_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_AddChild_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_AddChild_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_RemoveChild_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_RemoveChild_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_RemoveChild_Request, publishedfileid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_RemoveChild_Request, child_publishedfileid_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_RemoveChild_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPublishedFile_RemoveChild_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 9, sizeof(CPublishedFile_Subscribe_Request)},
  { 13, 18, sizeof(CPublishedFile_Subscribe_Response)},
  { 18, 27, sizeof(CPublishedFile_Unsubscribe_Request)},
  { 31, 36, sizeof(CPublishedFile_Unsubscribe_Response)},
  { 36, 42, sizeof(CPublishedFile_CanSubscribe_Request)},
  { 43, 49, sizeof(CPublishedFile_CanSubscribe_Response)},
  { 50, 71, sizeof(CPublishedFile_Publish_Request)},
  { 87, 94, sizeof(CPublishedFile_Publish_Response)},
  { 96, 112, sizeof(CPublishedFile_GetDetails_Request)},
  { 123, 130, sizeof(PublishedFileDetails_Tag)},
  { 132, 145, sizeof(PublishedFileDetails_Preview)},
  { 153, 161, sizeof(PublishedFileDetails_Child)},
  { 164, 171, sizeof(PublishedFileDetails_KVTag)},
  { 173, 181, sizeof(PublishedFileDetails_VoteData)},
  { 184, 195, sizeof(PublishedFileDetails_ForSaleData)},
  { 201, 208, sizeof(PublishedFileDetails_PlaytimeStats)},
  { 210, 279, sizeof(PublishedFileDetails)},
  { 343, 349, sizeof(CPublishedFile_GetDetails_Response)},
  { 350, 357, sizeof(CPublishedFile_GetItemInfo_Request_WorkshopItem)},
  { 359, 367, sizeof(CPublishedFile_GetItemInfo_Request)},
  { 370, 379, sizeof(CPublishedFile_GetItemInfo_Response_WorkshopItemInfo)},
  { 383, 390, sizeof(CPublishedFile_GetItemInfo_Response)},
  { 392, 399, sizeof(CPublishedFile_GetUserFiles_Request_KVTag)},
  { 401, 432, sizeof(CPublishedFile_GetUserFiles_Request)},
  { 458, 467, sizeof(CPublishedFile_GetUserFiles_Response_App)},
  { 471, 480, sizeof(CPublishedFile_GetUserFiles_Response)},
  { 484, 499, sizeof(CPublishedFile_Update_Request)},
  { 509, 514, sizeof(CPublishedFile_Update_Response)},
  { 514, 522, sizeof(CPublishedFile_GetChangeHistoryEntry_Request)},
  { 525, 532, sizeof(CPublishedFile_GetChangeHistoryEntry_Response)},
  { 534, 544, sizeof(CPublishedFile_GetChangeHistory_Request)},
  { 549, 557, sizeof(CPublishedFile_GetChangeHistory_Response_ChangeLog)},
  { 560, 567, sizeof(CPublishedFile_GetChangeHistory_Response)},
  { 569, 580, sizeof(CPublishedFile_RefreshVotingQueue_Request)},
  { 586, 591, sizeof(CPublishedFile_RefreshVotingQueue_Response)},
  { 591, 598, sizeof(CPublishedFile_QueryFiles_Request_KVTag)},
  { 600, 634, sizeof(CPublishedFile_QueryFiles_Request)},
  { 663, 670, sizeof(CPublishedFile_QueryFiles_Response)},
  { 672, 679, sizeof(CPublishedFile_StartPlaytimeTracking_Request)},
  { 681, 686, sizeof(CPublishedFile_StartPlaytimeTracking_Response)},
  { 686, 693, sizeof(CPublishedFile_StopPlaytimeTracking_Request)},
  { 695, 700, sizeof(CPublishedFile_StopPlaytimeTracking_Response)},
  { 700, 706, sizeof(CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request)},
  { 707, 712, sizeof(CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response)},
  { 712, 719, sizeof(CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage)},
  { 721, 728, sizeof(CPublishedFile_SetPlaytimeForControllerConfigs_Request)},
  { 730, 735, sizeof(CPublishedFile_SetPlaytimeForControllerConfigs_Response)},
  { 735, 742, sizeof(CPublishedFile_AddChild_Request)},
  { 744, 749, sizeof(CPublishedFile_AddChild_Response)},
  { 749, 756, sizeof(CPublishedFile_RemoveChild_Request)},
  { 758, 763, sizeof(CPublishedFile_RemoveChild_Response)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CPublishedFile_Subscribe_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CPublishedFile_Subscribe_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CPublishedFile_Unsubscribe_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CPublishedFile_Unsubscribe_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CPublishedFile_CanSubscribe_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CPublishedFile_CanSubscribe_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CPublishedFile_Publish_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CPublishedFile_Publish_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CPublishedFile_GetDetails_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PublishedFileDetails_Tag_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PublishedFileDetails_Preview_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PublishedFileDetails_Child_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PublishedFileDetails_KVTag_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PublishedFileDetails_VoteData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PublishedFileDetails_ForSaleData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PublishedFileDetails_PlaytimeStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PublishedFileDetails_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CPublishedFile_GetDetails_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CPublishedFile_GetItemInfo_Request_WorkshopItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CPublishedFile_GetItemInfo_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CPublishedFile_GetItemInfo_Response_WorkshopItemInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CPublishedFile_GetItemInfo_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CPublishedFile_GetUserFiles_Request_KVTag_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CPublishedFile_GetUserFiles_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CPublishedFile_GetUserFiles_Response_App_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CPublishedFile_GetUserFiles_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CPublishedFile_Update_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CPublishedFile_Update_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CPublishedFile_GetChangeHistoryEntry_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CPublishedFile_GetChangeHistoryEntry_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CPublishedFile_GetChangeHistory_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CPublishedFile_GetChangeHistory_Response_ChangeLog_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CPublishedFile_GetChangeHistory_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CPublishedFile_RefreshVotingQueue_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CPublishedFile_RefreshVotingQueue_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CPublishedFile_QueryFiles_Request_KVTag_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CPublishedFile_QueryFiles_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CPublishedFile_QueryFiles_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CPublishedFile_StartPlaytimeTracking_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CPublishedFile_StartPlaytimeTracking_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CPublishedFile_StopPlaytimeTracking_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CPublishedFile_StopPlaytimeTracking_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CPublishedFile_SetPlaytimeForControllerConfigs_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CPublishedFile_SetPlaytimeForControllerConfigs_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CPublishedFile_AddChild_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CPublishedFile_AddChild_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CPublishedFile_RemoveChild_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CPublishedFile_RemoveChild_Response_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "steammessages_publishedfile.steamclient.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, file_level_service_descriptors);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 51);
}

}  // namespace

void TableStruct::Shutdown() {
  _CPublishedFile_Subscribe_Request_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _CPublishedFile_Subscribe_Response_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _CPublishedFile_Unsubscribe_Request_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _CPublishedFile_Unsubscribe_Response_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _CPublishedFile_CanSubscribe_Request_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _CPublishedFile_CanSubscribe_Response_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _CPublishedFile_Publish_Request_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _CPublishedFile_Publish_Response_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _CPublishedFile_GetDetails_Request_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _PublishedFileDetails_Tag_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _PublishedFileDetails_Preview_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _PublishedFileDetails_Child_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _PublishedFileDetails_KVTag_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _PublishedFileDetails_VoteData_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _PublishedFileDetails_ForSaleData_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _PublishedFileDetails_PlaytimeStats_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _PublishedFileDetails_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _CPublishedFile_GetDetails_Response_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _CPublishedFile_GetItemInfo_Request_WorkshopItem_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _CPublishedFile_GetItemInfo_Request_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _CPublishedFile_GetItemInfo_Response_WorkshopItemInfo_default_instance_.Shutdown();
  delete file_level_metadata[20].reflection;
  _CPublishedFile_GetItemInfo_Response_default_instance_.Shutdown();
  delete file_level_metadata[21].reflection;
  _CPublishedFile_GetUserFiles_Request_KVTag_default_instance_.Shutdown();
  delete file_level_metadata[22].reflection;
  _CPublishedFile_GetUserFiles_Request_default_instance_.Shutdown();
  delete file_level_metadata[23].reflection;
  CPublishedFile_GetUserFiles_Request::_default_type_.Shutdown();
  CPublishedFile_GetUserFiles_Request::_default_sortmethod_.Shutdown();
  _CPublishedFile_GetUserFiles_Response_App_default_instance_.Shutdown();
  delete file_level_metadata[24].reflection;
  _CPublishedFile_GetUserFiles_Response_default_instance_.Shutdown();
  delete file_level_metadata[25].reflection;
  _CPublishedFile_Update_Request_default_instance_.Shutdown();
  delete file_level_metadata[26].reflection;
  _CPublishedFile_Update_Response_default_instance_.Shutdown();
  delete file_level_metadata[27].reflection;
  _CPublishedFile_GetChangeHistoryEntry_Request_default_instance_.Shutdown();
  delete file_level_metadata[28].reflection;
  _CPublishedFile_GetChangeHistoryEntry_Response_default_instance_.Shutdown();
  delete file_level_metadata[29].reflection;
  _CPublishedFile_GetChangeHistory_Request_default_instance_.Shutdown();
  delete file_level_metadata[30].reflection;
  _CPublishedFile_GetChangeHistory_Response_ChangeLog_default_instance_.Shutdown();
  delete file_level_metadata[31].reflection;
  _CPublishedFile_GetChangeHistory_Response_default_instance_.Shutdown();
  delete file_level_metadata[32].reflection;
  _CPublishedFile_RefreshVotingQueue_Request_default_instance_.Shutdown();
  delete file_level_metadata[33].reflection;
  _CPublishedFile_RefreshVotingQueue_Response_default_instance_.Shutdown();
  delete file_level_metadata[34].reflection;
  _CPublishedFile_QueryFiles_Request_KVTag_default_instance_.Shutdown();
  delete file_level_metadata[35].reflection;
  _CPublishedFile_QueryFiles_Request_default_instance_.Shutdown();
  delete file_level_metadata[36].reflection;
  _CPublishedFile_QueryFiles_Response_default_instance_.Shutdown();
  delete file_level_metadata[37].reflection;
  _CPublishedFile_StartPlaytimeTracking_Request_default_instance_.Shutdown();
  delete file_level_metadata[38].reflection;
  _CPublishedFile_StartPlaytimeTracking_Response_default_instance_.Shutdown();
  delete file_level_metadata[39].reflection;
  _CPublishedFile_StopPlaytimeTracking_Request_default_instance_.Shutdown();
  delete file_level_metadata[40].reflection;
  _CPublishedFile_StopPlaytimeTracking_Response_default_instance_.Shutdown();
  delete file_level_metadata[41].reflection;
  _CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request_default_instance_.Shutdown();
  delete file_level_metadata[42].reflection;
  _CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response_default_instance_.Shutdown();
  delete file_level_metadata[43].reflection;
  _CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage_default_instance_.Shutdown();
  delete file_level_metadata[44].reflection;
  _CPublishedFile_SetPlaytimeForControllerConfigs_Request_default_instance_.Shutdown();
  delete file_level_metadata[45].reflection;
  _CPublishedFile_SetPlaytimeForControllerConfigs_Response_default_instance_.Shutdown();
  delete file_level_metadata[46].reflection;
  _CPublishedFile_AddChild_Request_default_instance_.Shutdown();
  delete file_level_metadata[47].reflection;
  _CPublishedFile_AddChild_Response_default_instance_.Shutdown();
  delete file_level_metadata[48].reflection;
  _CPublishedFile_RemoveChild_Request_default_instance_.Shutdown();
  delete file_level_metadata[49].reflection;
  _CPublishedFile_RemoveChild_Response_default_instance_.Shutdown();
  delete file_level_metadata[50].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::proto::steam::protobuf_steammessages_5funified_5fbase_2esteamclient_2eproto::InitDefaults();
  _CPublishedFile_Subscribe_Request_default_instance_.DefaultConstruct();
  _CPublishedFile_Subscribe_Response_default_instance_.DefaultConstruct();
  _CPublishedFile_Unsubscribe_Request_default_instance_.DefaultConstruct();
  _CPublishedFile_Unsubscribe_Response_default_instance_.DefaultConstruct();
  _CPublishedFile_CanSubscribe_Request_default_instance_.DefaultConstruct();
  _CPublishedFile_CanSubscribe_Response_default_instance_.DefaultConstruct();
  _CPublishedFile_Publish_Request_default_instance_.DefaultConstruct();
  _CPublishedFile_Publish_Response_default_instance_.DefaultConstruct();
  _CPublishedFile_GetDetails_Request_default_instance_.DefaultConstruct();
  _PublishedFileDetails_Tag_default_instance_.DefaultConstruct();
  _PublishedFileDetails_Preview_default_instance_.DefaultConstruct();
  _PublishedFileDetails_Child_default_instance_.DefaultConstruct();
  _PublishedFileDetails_KVTag_default_instance_.DefaultConstruct();
  _PublishedFileDetails_VoteData_default_instance_.DefaultConstruct();
  _PublishedFileDetails_ForSaleData_default_instance_.DefaultConstruct();
  _PublishedFileDetails_PlaytimeStats_default_instance_.DefaultConstruct();
  _PublishedFileDetails_default_instance_.DefaultConstruct();
  _CPublishedFile_GetDetails_Response_default_instance_.DefaultConstruct();
  _CPublishedFile_GetItemInfo_Request_WorkshopItem_default_instance_.DefaultConstruct();
  _CPublishedFile_GetItemInfo_Request_default_instance_.DefaultConstruct();
  _CPublishedFile_GetItemInfo_Response_WorkshopItemInfo_default_instance_.DefaultConstruct();
  _CPublishedFile_GetItemInfo_Response_default_instance_.DefaultConstruct();
  _CPublishedFile_GetUserFiles_Request_KVTag_default_instance_.DefaultConstruct();
  CPublishedFile_GetUserFiles_Request::_default_type_.DefaultConstruct();
  *CPublishedFile_GetUserFiles_Request::_default_type_.get_mutable() = ::std::string("myfiles", 7);
  CPublishedFile_GetUserFiles_Request::_default_sortmethod_.DefaultConstruct();
  *CPublishedFile_GetUserFiles_Request::_default_sortmethod_.get_mutable() = ::std::string("lastupdated", 11);
  _CPublishedFile_GetUserFiles_Request_default_instance_.DefaultConstruct();
  _CPublishedFile_GetUserFiles_Response_App_default_instance_.DefaultConstruct();
  _CPublishedFile_GetUserFiles_Response_default_instance_.DefaultConstruct();
  _CPublishedFile_Update_Request_default_instance_.DefaultConstruct();
  _CPublishedFile_Update_Response_default_instance_.DefaultConstruct();
  _CPublishedFile_GetChangeHistoryEntry_Request_default_instance_.DefaultConstruct();
  _CPublishedFile_GetChangeHistoryEntry_Response_default_instance_.DefaultConstruct();
  _CPublishedFile_GetChangeHistory_Request_default_instance_.DefaultConstruct();
  _CPublishedFile_GetChangeHistory_Response_ChangeLog_default_instance_.DefaultConstruct();
  _CPublishedFile_GetChangeHistory_Response_default_instance_.DefaultConstruct();
  _CPublishedFile_RefreshVotingQueue_Request_default_instance_.DefaultConstruct();
  _CPublishedFile_RefreshVotingQueue_Response_default_instance_.DefaultConstruct();
  _CPublishedFile_QueryFiles_Request_KVTag_default_instance_.DefaultConstruct();
  _CPublishedFile_QueryFiles_Request_default_instance_.DefaultConstruct();
  _CPublishedFile_QueryFiles_Response_default_instance_.DefaultConstruct();
  _CPublishedFile_StartPlaytimeTracking_Request_default_instance_.DefaultConstruct();
  _CPublishedFile_StartPlaytimeTracking_Response_default_instance_.DefaultConstruct();
  _CPublishedFile_StopPlaytimeTracking_Request_default_instance_.DefaultConstruct();
  _CPublishedFile_StopPlaytimeTracking_Response_default_instance_.DefaultConstruct();
  _CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request_default_instance_.DefaultConstruct();
  _CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response_default_instance_.DefaultConstruct();
  _CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage_default_instance_.DefaultConstruct();
  _CPublishedFile_SetPlaytimeForControllerConfigs_Request_default_instance_.DefaultConstruct();
  _CPublishedFile_SetPlaytimeForControllerConfigs_Response_default_instance_.DefaultConstruct();
  _CPublishedFile_AddChild_Request_default_instance_.DefaultConstruct();
  _CPublishedFile_AddChild_Response_default_instance_.DefaultConstruct();
  _CPublishedFile_RemoveChild_Request_default_instance_.DefaultConstruct();
  _CPublishedFile_RemoveChild_Response_default_instance_.DefaultConstruct();
  _PublishedFileDetails_default_instance_.get_mutable()->vote_data_ = const_cast< ::proto::steam::PublishedFileDetails_VoteData*>(
      ::proto::steam::PublishedFileDetails_VoteData::internal_default_instance());
  _PublishedFileDetails_default_instance_.get_mutable()->playtime_stats_ = const_cast< ::proto::steam::PublishedFileDetails_PlaytimeStats*>(
      ::proto::steam::PublishedFileDetails_PlaytimeStats::internal_default_instance());
  _PublishedFileDetails_default_instance_.get_mutable()->for_sale_data_ = const_cast< ::proto::steam::PublishedFileDetails_ForSaleData*>(
      ::proto::steam::PublishedFileDetails_ForSaleData::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n-steammessages_publishedfile.steamclien"
      "t.proto\022\013proto.steam\032,steammessages_unif"
      "ied_base.steamclient.proto\"t\n CPublished"
      "File_Subscribe_Request\022\027\n\017publishedfilei"
      "d\030\001 \001(\004\022\021\n\tlist_type\030\002 \001(\r\022\r\n\005appid\030\003 \001("
      "\005\022\025\n\rnotify_client\030\004 \001(\010\"#\n!CPublishedFi"
      "le_Subscribe_Response\"v\n\"CPublishedFile_"
      "Unsubscribe_Request\022\027\n\017publishedfileid\030\001"
      " \001(\004\022\021\n\tlist_type\030\002 \001(\r\022\r\n\005appid\030\003 \001(\005\022\025"
      "\n\rnotify_client\030\004 \001(\010\"%\n#CPublishedFile_"
      "Unsubscribe_Response\">\n#CPublishedFile_C"
      "anSubscribe_Request\022\027\n\017publishedfileid\030\001"
      " \001(\004\"=\n$CPublishedFile_CanSubscribe_Resp"
      "onse\022\025\n\rcan_subscribe\030\001 \001(\010\"\314\n\n\036CPublish"
      "edFile_Publish_Request\022<\n\005appid\030\001 \001(\rB-\202"
      "\265\030)App Id this file is being published F"
      "ROM.\022C\n\016consumer_appid\030\002 \001(\rB+\202\265\030\'App Id"
      " this file is being published TO.\022K\n\rclo"
      "udfilename\030\003 \001(\tB4\202\265\0300Name of the file t"
      "o publish in the user\'s cloud.\022[\n\025previe"
      "w_cloudfilename\030\004 \001(\tB<\202\265\0308Name of the f"
      "ile to use as the published file\'s previ"
      "ew.\0225\n\005title\030\005 \001(\tB&\202\265\030\"Text title for t"
      "he published file.\022F\n\020file_description\030\006"
      " \001(\tB,\202\265\030(Text description for the publi"
      "shed file.\022L\n\tfile_type\030\007 \001(\rB9\202\265\0305(EWor"
      "kshopFileType) Type of Workshop file to "
      "publish.\022I\n\026consumer_shortcut_name\030\010 \001(\t"
      "B)\202\265\030%Shortcut name for the published fi"
      "le.\022I\n\020youtube_username\030\t \001(\tB/\202\265\030+(Opti"
      "onal) User\'s YouTube account username.\022\\"
      "\n\017youtube_videoid\030\n \001(\tBC\202\265\030\?(Optional) "
      "Video Id of a YouTube video for this pub"
      "lished file.\022\201\001\n\nvisibility\030\013 \001(\rBm\202\265\030i("
      "ERemoteStoragePublishedFileVisibility) V"
      "isibility of the published file (private"
      ", friends, public, etc.)\022k\n\014redirect_uri"
      "\030\014 \001(\tBU\202\265\030Q(Optional) If supplied, the "
      "resulting published file\'s Id is appende"
      "d to the URI.\022D\n\004tags\030\r \003(\tB6\202\265\0302Array o"
      "f text tags to apply to the published fi"
      "le.\022Y\n\017collection_type\030\016 \001(\tB@\202\265\030<(Optio"
      "nal) Type of collection the published fi"
      "le represents.\022M\n\tgame_type\030\017 \001(\tB:\202\265\0306("
      "Optional) Type of game the published fil"
      "e represents.\022[\n\003url\030\020 \001(\tBN\202\265\030J(Optiona"
      "l) If this represents a game, this is th"
      "e URL to that game\'s page.\"P\n\037CPublished"
      "File_Publish_Response\022\027\n\017publishedfileid"
      "\030\001 \001(\004\022\024\n\014redirect_uri\030\002 \001(\t\"\326\007\n!CPublis"
      "hedFile_GetDetails_Request\022P\n\020publishedf"
      "ileids\030\001 \003(\006B6\202\265\0302Set of published file "
      "Ids to retrieve details for.\022Q\n\013includet"
      "ags\030\002 \001(\010B<\202\265\0308If true, return tag infor"
      "mation in the returned details.\022c\n\031inclu"
      "deadditionalpreviews\030\003 \001(\010B@\202\265\030<If true,"
      " return preview information in the retur"
      "ned details.\022N\n\017includechildren\030\004 \001(\010B5\202"
      "\265\0301If true, return children in the retur"
      "ned details.\022R\n\rincludekvtags\030\005 \001(\010B;\202\265\030"
      "7If true, return key value tags in the r"
      "eturned details.\022L\n\014includevotes\030\006 \001(\010B6"
      "\202\265\0302If true, return vote data in the ret"
      "urned details.\022c\n\021short_description\030\010 \001("
      "\010BH\202\265\030DIf true, return a short descripti"
      "on instead of the full description.\022L\n\022i"
      "ncludeforsaledata\030\n \001(\010B0\202\265\030,If true, re"
      "turn pricing data, if applicable.\022B\n\017inc"
      "ludemetadata\030\013 \001(\010B)\202\265\030%If true, populat"
      "e the metadata field.\022U\n\010language\030\014 \001(\005:"
      "\0010B@\202\265\030<Specifies the localized text to "
      "return. Defaults to English.\022g\n\025return_p"
      "laytime_stats\030\r \001(\rBH\202\265\030DReturn playtime"
      " stats for the specified number of days "
      "before today.\"\265\026\n\024PublishedFileDetails\022\016"
      "\n\006result\030\001 \001(\r\022\027\n\017publishedfileid\030\002 \001(\004\022"
      "\017\n\007creator\030\003 \001(\006\022\025\n\rcreator_appid\030\004 \001(\r\022"
      "\026\n\016consumer_appid\030\005 \001(\r\022\033\n\023consumer_shor"
      "tcutid\030\006 \001(\r\022\020\n\010filename\030\007 \001(\t\022\021\n\tfile_s"
      "ize\030\010 \001(\004\022\031\n\021preview_file_size\030\t \001(\004\022\020\n\010"
      "file_url\030\n \001(\t\022\023\n\013preview_url\030\013 \001(\t\022\026\n\016y"
      "outubevideoid\030\014 \001(\t\022\013\n\003url\030\r \001(\t\022\025\n\rhcon"
      "tent_file\030\016 \001(\006\022\030\n\020hcontent_preview\030\017 \001("
      "\006\022\r\n\005title\030\020 \001(\t\022\030\n\020file_description\030\021 \001"
      "(\t\022\031\n\021short_description\030\022 \001(\t\022\024\n\014time_cr"
      "eated\030\023 \001(\r\022\024\n\014time_updated\030\024 \001(\r\022\022\n\nvis"
      "ibility\030\025 \001(\r\022\r\n\005flags\030\026 \001(\r\022\025\n\rworkshop"
      "_file\030\027 \001(\010\022\031\n\021workshop_accepted\030\030 \001(\010\022\032"
      "\n\022show_subscribe_all\030\031 \001(\010\022\036\n\026num_commen"
      "ts_developer\030\032 \001(\005\022\033\n\023num_comments_publi"
      "c\030\033 \001(\005\022\016\n\006banned\030\034 \001(\010\022\022\n\nban_reason\030\035 "
      "\001(\t\022\016\n\006banner\030\036 \001(\006\022\026\n\016can_be_deleted\030\037 "
      "\001(\010\022\024\n\014incompatible\030  \001(\010\022\020\n\010app_name\030! "
      "\001(\t\022\021\n\tfile_type\030\" \001(\r\022\025\n\rcan_subscribe\030"
      "# \001(\010\022\025\n\rsubscriptions\030$ \001(\r\022\021\n\tfavorite"
      "d\030% \001(\r\022\021\n\tfollowers\030& \001(\r\022\036\n\026lifetime_s"
      "ubscriptions\030\' \001(\r\022\032\n\022lifetime_favorited"
      "\030( \001(\r\022\032\n\022lifetime_followers\030) \001(\r\022\031\n\021li"
      "fetime_playtime\030> \001(\004\022\"\n\032lifetime_playti"
      "me_sessions\030\? \001(\004\022\r\n\005views\030* \001(\r\022\023\n\013imag"
      "e_width\030+ \001(\r\022\024\n\014image_height\030, \001(\r\022\021\n\ti"
      "mage_url\030- \001(\t\022\023\n\013spoiler_tag\030. \001(\010\022\022\n\ns"
      "hortcutid\030/ \001(\r\022\024\n\014shortcutname\0300 \001(\t\022\024\n"
      "\014num_children\0301 \001(\r\022\023\n\013num_reports\0302 \001(\r"
      "\022;\n\010previews\0303 \003(\0132).proto.steam.Publish"
      "edFileDetails.Preview\0223\n\004tags\0304 \003(\0132%.pr"
      "oto.steam.PublishedFileDetails.Tag\0229\n\010ch"
      "ildren\0305 \003(\0132\'.proto.steam.PublishedFile"
      "Details.Child\0227\n\006kvtags\0306 \003(\0132\'.proto.st"
      "eam.PublishedFileDetails.KVTag\022=\n\tvote_d"
      "ata\0307 \001(\0132*.proto.steam.PublishedFileDet"
      "ails.VoteData\022G\n\016playtime_stats\030@ \001(\0132/."
      "proto.steam.PublishedFileDetails.Playtim"
      "eStats\022r\n\017time_subscribed\0308 \001(\rBY\202\265\030UOnl"
      "y valid in PublishedFile.GetUserFiles an"
      "d not normal PublishedFile.GetDetail cal"
      "ls\022m\n\rfor_sale_data\0309 \001(\0132-.proto.steam."
      "PublishedFileDetails.ForSaleDataB\'\202\265\030#Pr"
      "icing information, if applicable.\0227\n\010met"
      "adata\030: \001(\tB%\202\265\030!Metadata associated wit"
      "h the item\022\032\n\022incompatible_actor\030; \001(\006\022\036"
      "\n\026incompatible_timestamp\030< \001(\r\022C\n\010langua"
      "ge\030= \001(\005:\0010B.\202\265\030*The language of the tit"
      "le and description.\032%\n\003Tag\022\013\n\003tag\030\001 \001(\t\022"
      "\021\n\tadminonly\030\002 \001(\010\032\246\001\n\007Preview\022\021\n\tprevie"
      "wid\030\001 \001(\004\022\021\n\tsortorder\030\002 \001(\r\022\013\n\003url\030\003 \001("
      "\t\022\014\n\004size\030\004 \001(\r\022\020\n\010filename\030\005 \001(\t\022\026\n\016you"
      "tubevideoid\030\006 \001(\t\022\024\n\014preview_type\030\007 \001(\r\022"
      "\032\n\022external_reference\030\010 \001(\t\032F\n\005Child\022\027\n\017"
      "publishedfileid\030\001 \001(\004\022\021\n\tsortorder\030\002 \001(\r"
      "\022\021\n\tfile_type\030\003 \001(\r\032#\n\005KVTag\022\013\n\003key\030\001 \001("
      "\t\022\r\n\005value\030\002 \001(\t\032\?\n\010VoteData\022\r\n\005score\030\001 "
      "\001(\002\022\020\n\010votes_up\030\002 \001(\r\022\022\n\nvotes_down\030\003 \001("
      "\r\032\375\001\n\013ForSaleData\022\023\n\013is_for_sale\030\001 \001(\010\022\026"
      "\n\016price_category\030\002 \001(\r\022b\n\007estatus\030\003 \001(\0162"
      "=.proto.steam.PublishedFileDetails.EPubl"
      "ishedFileForSaleStatus:\022k_PFFSS_NotForSa"
      "le\022\034\n\024price_category_floor\030\004 \001(\r\022\"\n\032pric"
      "e_is_pay_what_you_want\030\005 \001(\010\022\033\n\023discount"
      "_percentage\030\006 \001(\r\032\?\n\rPlaytimeStats\022\030\n\020pl"
      "aytime_seconds\030\001 \001(\004\022\024\n\014num_sessions\030\002 \001"
      "(\004\"\310\001\n\033EPublishedFileForSaleStatus\022\026\n\022k_"
      "PFFSS_NotForSale\020\000\022\033\n\027k_PFFSS_PendingApp"
      "roval\020\001\022\033\n\027k_PFFSS_ApprovedForSale\020\002\022\033\n\027"
      "k_PFFSS_RejectedForSale\020\003\022\033\n\027k_PFFSS_NoL"
      "ongerForSale\020\004\022\035\n\031k_PFFSS_TentativeAppro"
      "val\020\005\"e\n\"CPublishedFile_GetDetails_Respo"
      "nse\022\?\n\024publishedfiledetails\030\001 \003(\0132!.prot"
      "o.steam.PublishedFileDetails\"\346\001\n\"CPublis"
      "hedFile_GetItemInfo_Request\022\016\n\006app_id\030\001 "
      "\001(\r\022\031\n\021last_time_updated\030\002 \001(\r\022T\n\016worksh"
      "op_items\030\003 \003(\0132<.proto.steam.CPublishedF"
      "ile_GetItemInfo_Request.WorkshopItem\032\?\n\014"
      "WorkshopItem\022\031\n\021published_file_id\030\001 \001(\006\022"
      "\024\n\014time_updated\030\002 \001(\r\"\376\001\n#CPublishedFile"
      "_GetItemInfo_Response\022\023\n\013update_time\030\001 \001"
      "(\r\022Y\n\016workshop_items\030\002 \003(\0132A.proto.steam"
      ".CPublishedFile_GetItemInfo_Response.Wor"
      "kshopItemInfo\032g\n\020WorkshopItemInfo\022\031\n\021pub"
      "lished_file_id\030\001 \001(\006\022\024\n\014time_updated\030\002 \001"
      "(\r\022\023\n\013manifest_id\030\003 \001(\006\022\r\n\005flags\030\004 \001(\r\"\353"
      "\021\n#CPublishedFile_GetUserFiles_Request\022J"
      "\n\007steamid\030\001 \001(\006B9\202\265\0305Steam ID of the use"
      "r whose files are being requested.\022F\n\005ap"
      "pid\030\002 \001(\rB7\202\265\0303App Id of the app that th"
      "e files were published to.\022:\n\004page\030\004 \001(\r"
      ":\0011B)\202\265\030%(Optional) Starting page for re"
      "sults.\022P\n\nnumperpage\030\005 \001(\r:\0011B9\202\265\0305(Opti"
      "onal) The number of results, per page to"
      " return.\022C\n\004type\030\006 \001(\t:\007myfilesB,\202\265\030((Op"
      "tional) Type of files to be returned.\022Y\n"
      "\nsortmethod\030\007 \001(\t:\013lastupdatedB8\202\265\0304(Opt"
      "ional) Sorting method to use on returned"
      " values.\022;\n\007privacy\030\t \001(\rB*\202\265\030&(optional"
      ") Filter by privacy settings.\022h\n\014require"
      "dtags\030\n \003(\tBR\202\265\030N(Optional) Tags that mu"
      "st be present on a published file to sat"
      "isfy the query.\022l\n\014excludedtags\030\013 \003(\tBV\202"
      "\265\030R(Optional) Tags that must NOT be pres"
      "ent on a published file to satisfy the q"
      "uery.\022z\n\020required_kv_tags\030\036 \003(\01326.proto."
      "steam.CPublishedFile_GetUserFiles_Reques"
      "t.KVTagB(\202\265\030$Required key-value tags to "
      "match on.\022=\n\010filetype\030\016 \001(\rB+\202\265\030\'(Option"
      "al) File type to match files to.\022a\n\rcrea"
      "tor_appid\030\017 \001(\rBJ\202\265\030FApp Id of the app t"
      "hat published the files, only matched if"
      " specified.\022I\n\024match_cloud_filename\030\020 \001("
      "\tB+\202\265\030\'Match this cloud filename if spec"
      "ified.\022j\n\025cache_max_age_seconds\030\033 \001(\r:\0010"
      "BH\202\265\030DAllow stale data to be returned fo"
      "r the specified number of seconds.\022U\n\010la"
      "nguage\030\035 \001(\005:\0010B@\202\265\030<Specifies the local"
      "ized text to return. Defaults to English"
      ".\022i\n\ttotalonly\030\021 \001(\010BV\202\265\030R(Optional) If "
      "true, only return the total number of fi"
      "les that satisfy this query.\022n\n\010ids_only"
      "\030\022 \001(\010B\\\202\265\030X(Optional) If true, only ret"
      "urn the published file ids of files that"
      " satisfy this query.\0224\n\020return_vote_data"
      "\030\023 \001(\010:\004trueB\024\202\265\030\020Return vote data\0228\n\013re"
      "turn_tags\030\024 \001(\010B#\202\265\030\037Return tags in the "
      "file details\022K\n\016return_kv_tags\030\025 \001(\010:\004tr"
      "ueB-\202\265\030)Return key-value tags in the fil"
      "e details\022W\n\017return_previews\030\026 \001(\010B>\202\265\030:"
      "Return preview image and video details i"
      "n the file details\022F\n\017return_children\030\027 "
      "\001(\010B-\202\265\030)Return child item ids in the fi"
      "le details\022l\n\030return_short_description\030\030"
      " \001(\010:\004trueBD\202\265\030@Populate the short_descr"
      "iption field instead of file_description"
      "\022K\n\024return_for_sale_data\030\032 \001(\010B-\202\265\030)Retu"
      "rn pricing information, if applicable\022\?\n"
      "\017return_metadata\030\034 \001(\010:\005falseB\037\202\265\030\033Popul"
      "ate the metadata field\022g\n\025return_playtim"
      "e_stats\030\037 \001(\rBH\202\265\030DReturn playtime stats"
      " for the specified number of days before"
      " today.\032#\n\005KVTag\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002"
      " \001(\t\"\230\002\n$CPublishedFile_GetUserFiles_Res"
      "ponse\022\r\n\005total\030\001 \001(\r\022\022\n\nstartindex\030\002 \001(\r"
      "\022\?\n\024publishedfiledetails\030\003 \003(\0132!.proto.s"
      "team.PublishedFileDetails\022C\n\004apps\030\004 \003(\0132"
      "5.proto.steam.CPublishedFile_GetUserFile"
      "s_Response.App\032G\n\003App\022\r\n\005appid\030\001 \001(\r\022\014\n\004"
      "name\030\002 \001(\t\022\022\n\nshortcutid\030\003 \001(\r\022\017\n\007privat"
      "e\030\004 \001(\010\"\221\006\n\035CPublishedFile_Update_Reques"
      "t\0229\n\005appid\030\001 \001(\rB*\202\265\030&App Id this publis"
      "hed file belongs to.\022L\n\017publishedfileid\030"
      "\002 \001(\006B3\202\265\030/Published file id of the file"
      " we\'d like update.\022:\n\005title\030\003 \001(\tB+\202\265\030\'("
      "Optional) Title of the published file.\022K"
      "\n\020file_description\030\004 \001(\tB1\202\265\030-(Optional)"
      " Description of the published file.\022D\n\nv"
      "isibility\030\005 \001(\rB0\202\265\030,(Optional) Visibili"
      "ty of the published file.\022@\n\004tags\030\006 \003(\tB"
      "2\202\265\030.(Optional) Set of tags for the publ"
      "ished file.\022A\n\010filename\030\007 \001(\tB/\202\265\030+(Opti"
      "onal) Filename for the published file.\022Q"
      "\n\020preview_filename\030\010 \001(\tB7\202\265\0303(Optional)"
      " Preview filename for the published file"
      ".\022^\n\013image_width\030\017 \001(\rBI\202\265\030E(Optional) I"
      "f this is an image file, you can specify"
      " the image width.\022`\n\014image_height\030\020 \001(\rB"
      "J\202\265\030F(Optional) If this is an image file"
      ", you can specify the image height.\" \n\036C"
      "PublishedFile_Update_Response\"\270\001\n,CPubli"
      "shedFile_GetChangeHistoryEntry_Request\022c"
      "\n\017publishedfileid\030\001 \001(\006BJ\202\265\030FPublished f"
      "ile id of the file we\'d like to get the "
      "change history for.\022\021\n\ttimestamp\030\002 \001(\r\022\020"
      "\n\010language\030\003 \001(\005\"]\n-CPublishedFile_GetCh"
      "angeHistoryEntry_Response\022\032\n\022change_desc"
      "ription\030\001 \001(\t\022\020\n\010language\030\002 \001(\005\"\236\002\n\'CPub"
      "lishedFile_GetChangeHistory_Request\022c\n\017p"
      "ublishedfileid\030\001 \001(\006BJ\202\265\030FPublished file"
      " id of the file we\'d like to get the cha"
      "nge history for.\022@\n\ntotal_only\030\002 \001(\010B,\202\265"
      "\030(Return the total number of changes onl"
      "y.\022\022\n\nstartindex\030\003 \001(\r\022\r\n\005count\030\004 \001(\r\022)\n"
      "\010language\030\005 \001(\005:\0010B\024\202\265\030\020Desired language"
      "\"\331\001\n(CPublishedFile_GetChangeHistory_Res"
      "ponse\022P\n\007changes\030\001 \003(\0132\?.proto.steam.CPu"
      "blishedFile_GetChangeHistory_Response.Ch"
      "angeLog\022\r\n\005total\030\002 \001(\r\032L\n\tChangeLog\022\021\n\tt"
      "imestamp\030\001 \001(\r\022\032\n\022change_description\030\002 \001"
      "(\t\022\020\n\010language\030\003 \001(\005\"\273\004\n)CPublishedFile_"
      "RefreshVotingQueue_Request\022\r\n\005appid\030\001 \001("
      "\r\022B\n\022matching_file_type\030\002 \001(\rB&\202\265\030\"EPubl"
      "ishedFileInfoMatchingFileType\022l\n\004tags\030\003 "
      "\003(\tB^\202\265\030ZInclude files that have all the"
      " tags or any of the tags if match_all_ta"
      "gs is set to false.\022\225\001\n\016match_all_tags\030\004"
      " \001(\010:\004trueBw\202\265\030sIf true, then files must"
      " have all the tags specified.  If false,"
      " then must have at least one of the tags"
      " specified.\022I\n\rexcluded_tags\030\005 \003(\tB2\202\265\030."
      "Exclude any files that have any of these"
      " tags.\022j\n\022desired_queue_size\030\006 \001(\rBN\202\265\030J"
      "Desired number of items in the voting qu"
      "eue.  May be clamped by the server\",\n*CP"
      "ublishedFile_RefreshVotingQueue_Response"
      "\"\267\024\n!CPublishedFile_QueryFiles_Request\022L"
      "\n\nquery_type\030\001 \001(\rB8\202\265\0304enumeration EPub"
      "lishedFileQueryType in clientenums.h\022\036\n\004"
      "page\030\002 \001(\rB\020\202\265\030\014Current page\022P\n\nnumperpa"
      "ge\030\003 \001(\r:\0011B9\202\265\0305(Optional) The number o"
      "f results, per page to return.\0225\n\rcreato"
      "r_appid\030\004 \001(\rB\036\202\265\030\032App that created the "
      "files\022.\n\005appid\030\005 \001(\rB\037\202\265\030\033App that consu"
      "mes the files\022N\n\014requiredtags\030\006 \003(\tB8\202\265\030"
      "4Tags to match on. See match_all_tags pa"
      "rameter below\022l\n\014excludedtags\030\007 \003(\tBV\202\265\030"
      "R(Optional) Tags that must NOT be presen"
      "t on a published file to satisfy the que"
      "ry.\022\212\001\n\016match_all_tags\030\010 \001(\010:\004trueBl\202\265\030h"
      "If true, then items must have all the ta"
      "gs specified, otherwise they must have a"
      "t least one of the tags.\022Q\n\016required_fla"
      "gs\030\t \003(\tB9\202\265\0305Required flags that must b"
      "e set on any returned items\022K\n\romitted_f"
      "lags\030\n \003(\tB4\202\265\0300Flags that must not be s"
      "et on any returned items\022I\n\013search_text\030"
      "\013 \001(\tB4\202\265\0300Text to match in the item\'s t"
      "itle or description\0228\n\010filetype\030\014 \001(\rB&\202"
      "\265\030\"EPublishedFileInfoMatchingFileType\022P\n"
      "\025child_publishedfileid\030\r \001(\006B1\202\265\030-Find a"
      "ll items that reference the given item.\022"
      "\202\001\n\004days\030\016 \001(\rBt\202\265\030pIf query_type is k_P"
      "ublishedFileQueryType_RankedByTrend, the"
      "n this is the number of days to get vote"
      "s for [1,7].\022\260\001\n\031include_recent_votes_on"
      "ly\030\017 \001(\010B\214\001\202\265\030\207\001If query_type is k_Publi"
      "shedFileQueryType_RankedByTrend, then li"
      "mit result set just to items that have v"
      "otes within the day range given\022j\n\025cache"
      "_max_age_seconds\030\037 \001(\r:\0010BH\202\265\030DAllow sta"
      "le data to be returned for the specified"
      " number of seconds.\022`\n\010language\030! \001(\005:\0010"
      "BK\202\265\030GLanguage to search in and also wha"
      "t gets returned. Defaults to English.\022x\n"
      "\020required_kv_tags\030\" \003(\01324.proto.steam.CP"
      "ublishedFile_QueryFiles_Request.KVTagB(\202"
      "\265\030$Required key-value tags to match on.\022"
      "i\n\ttotalonly\030\020 \001(\010BV\202\265\030R(Optional) If tr"
      "ue, only return the total number of file"
      "s that satisfy this query.\022n\n\010ids_only\030#"
      " \001(\010B\\\202\265\030X(Optional) If true, only retur"
      "n the published file ids of files that s"
      "atisfy this query.\022.\n\020return_vote_data\030\021"
      " \001(\010B\024\202\265\030\020Return vote data\0228\n\013return_tag"
      "s\030\022 \001(\010B#\202\265\030\037Return tags in the file det"
      "ails\022E\n\016return_kv_tags\030\023 \001(\010B-\202\265\030)Return"
      " key-value tags in the file details\022W\n\017r"
      "eturn_previews\030\024 \001(\010B>\202\265\030:Return preview"
      " image and video details in the file det"
      "ails\022F\n\017return_children\030\025 \001(\010B-\202\265\030)Retur"
      "n child item ids in the file details\022f\n\030"
      "return_short_description\030\026 \001(\010BD\202\265\030@Popu"
      "late the short_description field instead"
      " of file_description\022K\n\024return_for_sale_"
      "data\030\036 \001(\010B-\202\265\030)Return pricing informati"
      "on, if applicable\0229\n\017return_metadata\030  \001"
      "(\010:\005falseB\031\202\265\030\025Populate the metadata\022g\n\025"
      "return_playtime_stats\030$ \001(\rBH\202\265\030DReturn "
      "playtime stats for the specified number "
      "of days before today.\032#\n\005KVTag\022\013\n\003key\030\001 "
      "\001(\t\022\r\n\005value\030\002 \001(\t\"\226\002\n\"CPublishedFile_Qu"
      "eryFiles_Response\022T\n\005total\030\001 \001(\rBE\202\265\030ANu"
      "mber of matches found, not necessarily n"
      "umber of items returned\022\231\001\n\024publishedfil"
      "edetails\030\002 \003(\0132!.proto.steam.PublishedFi"
      "leDetailsBX\202\265\030TEach file details will be"
      " populated, depending on what return val"
      "ues were requested.\"W\n,CPublishedFile_St"
      "artPlaytimeTracking_Request\022\r\n\005appid\030\001 \001"
      "(\r\022\030\n\020publishedfileids\030\002 \003(\004\"/\n-CPublish"
      "edFile_StartPlaytimeTracking_Response\"V\n"
      "+CPublishedFile_StopPlaytimeTracking_Req"
      "uest\022\r\n\005appid\030\001 \001(\r\022\030\n\020publishedfileids\030"
      "\002 \003(\004\".\n,CPublishedFile_StopPlaytimeTrac"
      "king_Response\"J\n9CPublishedFile_StopPlay"
      "timeTrackingForAllAppItems_Request\022\r\n\005ap"
      "pid\030\001 \001(\r\"<\n:CPublishedFile_StopPlaytime"
      "TrackingForAllAppItems_Response\"\215\002\n6CPub"
      "lishedFile_SetPlaytimeForControllerConfi"
      "gs_Request\022\r\n\005appid\030\001 \001(\r\022z\n\027controller_"
      "config_usage\030\002 \003(\0132Y.proto.steam.CPublis"
      "hedFile_SetPlaytimeForControllerConfigs_"
      "Request.ControllerConfigUsage\032H\n\025Control"
      "lerConfigUsage\022\027\n\017publishedfileid\030\001 \001(\004\022"
      "\026\n\016seconds_active\030\002 \001(\002\"9\n7CPublishedFil"
      "e_SetPlaytimeForControllerConfigs_Respon"
      "se\"Y\n\037CPublishedFile_AddChild_Request\022\027\n"
      "\017publishedfileid\030\001 \001(\004\022\035\n\025child_publishe"
      "dfileid\030\002 \001(\004\"\"\n CPublishedFile_AddChild"
      "_Response\"\\\n\"CPublishedFile_RemoveChild_"
      "Request\022\027\n\017publishedfileid\030\001 \001(\004\022\035\n\025chil"
      "d_publishedfileid\030\002 \001(\004\"%\n#CPublishedFil"
      "e_RemoveChild_Response2\370\032\n\rPublishedFile"
      "\022\231\001\n\tSubscribe\022-.proto.steam.CPublishedF"
      "ile_Subscribe_Request\032..proto.steam.CPub"
      "lishedFile_Subscribe_Response\"-\202\265\030)Subsc"
      "ribes the user to the published file\022\243\001\n"
      "\013Unsubscribe\022/.proto.steam.CPublishedFil"
      "e_Unsubscribe_Request\0320.proto.steam.CPub"
      "lishedFile_Unsubscribe_Response\"1\202\265\030-Uns"
      "ubscribes the user from the published fi"
      "le\022\256\001\n\014CanSubscribe\0220.proto.steam.CPubli"
      "shedFile_CanSubscribe_Request\0321.proto.st"
      "eam.CPublishedFile_CanSubscribe_Response"
      "\"9\202\265\0305Check if the user can subscribe to"
      " the published file\022\230\001\n\007Publish\022+.proto."
      "steam.CPublishedFile_Publish_Request\032,.p"
      "roto.steam.CPublishedFile_Publish_Respon"
      "se\"2\202\265\030.Publishes a clouded user file to"
      " the Workshop.\022\250\001\n\nGetDetails\022..proto.st"
      "eam.CPublishedFile_GetDetails_Request\032/."
      "proto.steam.CPublishedFile_GetDetails_Re"
      "sponse\"9\202\265\0305Retrieves information about "
      "a set of published files.\022\253\001\n\013GetItemInf"
      "o\022/.proto.steam.CPublishedFile_GetItemIn"
      "fo_Request\0320.proto.steam.CPublishedFile_"
      "GetItemInfo_Response\"9\202\265\0305Retrieves info"
      "rmation about a set of published files.\022"
      "\235\001\n\014GetUserFiles\0220.proto.steam.CPublishe"
      "dFile_GetUserFiles_Request\0321.proto.steam"
      ".CPublishedFile_GetUserFiles_Response\"(\202"
      "\265\030$Retrieves files published by a user.\022"
      "\222\001\n\006Update\022*.proto.steam.CPublishedFile_"
      "Update_Request\032+.proto.steam.CPublishedF"
      "ile_Update_Response\"/\202\265\030+Updates informa"
      "tion about a published file.\022\330\001\n\025GetChan"
      "geHistoryEntry\0229.proto.steam.CPublishedF"
      "ile_GetChangeHistoryEntry_Request\032:.prot"
      "o.steam.CPublishedFile_GetChangeHistoryE"
      "ntry_Response\"H\202\265\030DReturns data on a spe"
      "cific change history entry for a publish"
      "ed file\022\274\001\n\020GetChangeHistory\0224.proto.ste"
      "am.CPublishedFile_GetChangeHistory_Reque"
      "st\0325.proto.steam.CPublishedFile_GetChang"
      "eHistory_Response\";\202\265\0307Returns data on t"
      "he change history for a published file\022\260"
      "\001\n\022RefreshVotingQueue\0226.proto.steam.CPub"
      "lishedFile_RefreshVotingQueue_Request\0327."
      "proto.steam.CPublishedFile_RefreshVoting"
      "Queue_Response\")\202\265\030%Refresh the voting q"
      "ueue for the user\022\236\001\n\nQueryFiles\022..proto"
      ".steam.CPublishedFile_QueryFiles_Request"
      "\032/.proto.steam.CPublishedFile_QueryFiles"
      "_Response\"/\202\265\030+Performs a search query f"
      "or published files\022\313\001\n\025StartPlaytimeTrac"
      "king\0229.proto.steam.CPublishedFile_StartP"
      "laytimeTracking_Request\032:.proto.steam.CP"
      "ublishedFile_StartPlaytimeTracking_Respo"
      "nse\";\202\265\0307Start usage tracking for a give"
      "n set of published files\022\310\001\n\024StopPlaytim"
      "eTracking\0228.proto.steam.CPublishedFile_S"
      "topPlaytimeTracking_Request\0329.proto.stea"
      "m.CPublishedFile_StopPlaytimeTracking_Re"
      "sponse\";\202\265\0307Stops usage tracking for a g"
      "iven set of published files\022\205\002\n\"StopPlay"
      "timeTrackingForAllAppItems\022F.proto.steam"
      ".CPublishedFile_StopPlaytimeTrackingForA"
      "llAppItems_Request\032G.proto.steam.CPublis"
      "hedFile_StopPlaytimeTrackingForAllAppIte"
      "ms_Response\"N\202\265\030JStops usage tracking fo"
      "r all items currently tracked for the sp"
      "ecified app\022\260\002\n\037SetPlaytimeForController"
      "Configs\022C.proto.steam.CPublishedFile_Set"
      "PlaytimeForControllerConfigs_Request\032D.p"
      "roto.steam.CPublishedFile_SetPlaytimeFor"
      "ControllerConfigs_Response\"\201\001\202\265\030}Stops u"
      "sage tracking all controller configs for"
      " the given app and set the usage time fo"
      "r the for the given controller configs\022\247"
      "\001\n\010AddChild\022,.proto.steam.CPublishedFile"
      "_AddChild_Request\032-.proto.steam.CPublish"
      "edFile_AddChild_Response\">\202\265\030:Adds a par"
      "ent->child relationship between the give"
      "n items.\022\261\001\n\013RemoveChild\022/.proto.steam.C"
      "PublishedFile_RemoveChild_Request\0320.prot"
      "o.steam.CPublishedFile_RemoveChild_Respo"
      "nse\"\?\202\265\030;Removes parent->child relations"
      "hip between the given items.\032+\202\265\030\'A serv"
      "ice to access published file dataB\003\200\001\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 18598);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "steammessages_publishedfile.steamclient.proto", &protobuf_RegisterTypes);
  ::proto::steam::protobuf_steammessages_5funified_5fbase_2esteamclient_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto

const ::google::protobuf::EnumDescriptor* PublishedFileDetails_EPublishedFileForSaleStatus_descriptor() {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_enum_descriptors[0];
}
bool PublishedFileDetails_EPublishedFileForSaleStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PublishedFileDetails_EPublishedFileForSaleStatus PublishedFileDetails::k_PFFSS_NotForSale;
const PublishedFileDetails_EPublishedFileForSaleStatus PublishedFileDetails::k_PFFSS_PendingApproval;
const PublishedFileDetails_EPublishedFileForSaleStatus PublishedFileDetails::k_PFFSS_ApprovedForSale;
const PublishedFileDetails_EPublishedFileForSaleStatus PublishedFileDetails::k_PFFSS_RejectedForSale;
const PublishedFileDetails_EPublishedFileForSaleStatus PublishedFileDetails::k_PFFSS_NoLongerForSale;
const PublishedFileDetails_EPublishedFileForSaleStatus PublishedFileDetails::k_PFFSS_TentativeApproval;
const PublishedFileDetails_EPublishedFileForSaleStatus PublishedFileDetails::EPublishedFileForSaleStatus_MIN;
const PublishedFileDetails_EPublishedFileForSaleStatus PublishedFileDetails::EPublishedFileForSaleStatus_MAX;
const int PublishedFileDetails::EPublishedFileForSaleStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPublishedFile_Subscribe_Request::kPublishedfileidFieldNumber;
const int CPublishedFile_Subscribe_Request::kListTypeFieldNumber;
const int CPublishedFile_Subscribe_Request::kAppidFieldNumber;
const int CPublishedFile_Subscribe_Request::kNotifyClientFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPublishedFile_Subscribe_Request::CPublishedFile_Subscribe_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPublishedFile_Subscribe_Request)
}
CPublishedFile_Subscribe_Request::CPublishedFile_Subscribe_Request(const CPublishedFile_Subscribe_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&publishedfileid_, &from.publishedfileid_,
    reinterpret_cast<char*>(&notify_client_) -
    reinterpret_cast<char*>(&publishedfileid_) + sizeof(notify_client_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPublishedFile_Subscribe_Request)
}

void CPublishedFile_Subscribe_Request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&publishedfileid_, 0, reinterpret_cast<char*>(&notify_client_) -
    reinterpret_cast<char*>(&publishedfileid_) + sizeof(notify_client_));
}

CPublishedFile_Subscribe_Request::~CPublishedFile_Subscribe_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CPublishedFile_Subscribe_Request)
  SharedDtor();
}

void CPublishedFile_Subscribe_Request::SharedDtor() {
}

void CPublishedFile_Subscribe_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPublishedFile_Subscribe_Request::descriptor() {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CPublishedFile_Subscribe_Request& CPublishedFile_Subscribe_Request::default_instance() {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CPublishedFile_Subscribe_Request* CPublishedFile_Subscribe_Request::New(::google::protobuf::Arena* arena) const {
  CPublishedFile_Subscribe_Request* n = new CPublishedFile_Subscribe_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CPublishedFile_Subscribe_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPublishedFile_Subscribe_Request)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&publishedfileid_, 0, reinterpret_cast<char*>(&notify_client_) -
      reinterpret_cast<char*>(&publishedfileid_) + sizeof(notify_client_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CPublishedFile_Subscribe_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPublishedFile_Subscribe_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 publishedfileid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_publishedfileid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &publishedfileid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 list_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_list_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &list_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 appid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool notify_client = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_notify_client();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &notify_client_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPublishedFile_Subscribe_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPublishedFile_Subscribe_Request)
  return false;
#undef DO_
}

void CPublishedFile_Subscribe_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPublishedFile_Subscribe_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 publishedfileid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->publishedfileid(), output);
  }

  // optional uint32 list_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->list_type(), output);
  }

  // optional int32 appid = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->appid(), output);
  }

  // optional bool notify_client = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->notify_client(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPublishedFile_Subscribe_Request)
}

::google::protobuf::uint8* CPublishedFile_Subscribe_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPublishedFile_Subscribe_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 publishedfileid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->publishedfileid(), target);
  }

  // optional uint32 list_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->list_type(), target);
  }

  // optional int32 appid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->appid(), target);
  }

  // optional bool notify_client = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->notify_client(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPublishedFile_Subscribe_Request)
  return target;
}

size_t CPublishedFile_Subscribe_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPublishedFile_Subscribe_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional uint64 publishedfileid = 1;
    if (has_publishedfileid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->publishedfileid());
    }

    // optional uint32 list_type = 2;
    if (has_list_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->list_type());
    }

    // optional int32 appid = 3;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->appid());
    }

    // optional bool notify_client = 4;
    if (has_notify_client()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPublishedFile_Subscribe_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPublishedFile_Subscribe_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CPublishedFile_Subscribe_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CPublishedFile_Subscribe_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPublishedFile_Subscribe_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPublishedFile_Subscribe_Request)
    MergeFrom(*source);
  }
}

void CPublishedFile_Subscribe_Request::MergeFrom(const CPublishedFile_Subscribe_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPublishedFile_Subscribe_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      publishedfileid_ = from.publishedfileid_;
    }
    if (cached_has_bits & 0x00000002u) {
      list_type_ = from.list_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000008u) {
      notify_client_ = from.notify_client_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CPublishedFile_Subscribe_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPublishedFile_Subscribe_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPublishedFile_Subscribe_Request::CopyFrom(const CPublishedFile_Subscribe_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPublishedFile_Subscribe_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_Subscribe_Request::IsInitialized() const {
  return true;
}

void CPublishedFile_Subscribe_Request::Swap(CPublishedFile_Subscribe_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPublishedFile_Subscribe_Request::InternalSwap(CPublishedFile_Subscribe_Request* other) {
  std::swap(publishedfileid_, other->publishedfileid_);
  std::swap(list_type_, other->list_type_);
  std::swap(appid_, other->appid_);
  std::swap(notify_client_, other->notify_client_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CPublishedFile_Subscribe_Request::GetMetadata() const {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CPublishedFile_Subscribe_Request

// optional uint64 publishedfileid = 1;
bool CPublishedFile_Subscribe_Request::has_publishedfileid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CPublishedFile_Subscribe_Request::set_has_publishedfileid() {
  _has_bits_[0] |= 0x00000001u;
}
void CPublishedFile_Subscribe_Request::clear_has_publishedfileid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CPublishedFile_Subscribe_Request::clear_publishedfileid() {
  publishedfileid_ = GOOGLE_ULONGLONG(0);
  clear_has_publishedfileid();
}
::google::protobuf::uint64 CPublishedFile_Subscribe_Request::publishedfileid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_Subscribe_Request.publishedfileid)
  return publishedfileid_;
}
void CPublishedFile_Subscribe_Request::set_publishedfileid(::google::protobuf::uint64 value) {
  set_has_publishedfileid();
  publishedfileid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_Subscribe_Request.publishedfileid)
}

// optional uint32 list_type = 2;
bool CPublishedFile_Subscribe_Request::has_list_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CPublishedFile_Subscribe_Request::set_has_list_type() {
  _has_bits_[0] |= 0x00000002u;
}
void CPublishedFile_Subscribe_Request::clear_has_list_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void CPublishedFile_Subscribe_Request::clear_list_type() {
  list_type_ = 0u;
  clear_has_list_type();
}
::google::protobuf::uint32 CPublishedFile_Subscribe_Request::list_type() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_Subscribe_Request.list_type)
  return list_type_;
}
void CPublishedFile_Subscribe_Request::set_list_type(::google::protobuf::uint32 value) {
  set_has_list_type();
  list_type_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_Subscribe_Request.list_type)
}

// optional int32 appid = 3;
bool CPublishedFile_Subscribe_Request::has_appid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CPublishedFile_Subscribe_Request::set_has_appid() {
  _has_bits_[0] |= 0x00000004u;
}
void CPublishedFile_Subscribe_Request::clear_has_appid() {
  _has_bits_[0] &= ~0x00000004u;
}
void CPublishedFile_Subscribe_Request::clear_appid() {
  appid_ = 0;
  clear_has_appid();
}
::google::protobuf::int32 CPublishedFile_Subscribe_Request::appid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_Subscribe_Request.appid)
  return appid_;
}
void CPublishedFile_Subscribe_Request::set_appid(::google::protobuf::int32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_Subscribe_Request.appid)
}

// optional bool notify_client = 4;
bool CPublishedFile_Subscribe_Request::has_notify_client() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CPublishedFile_Subscribe_Request::set_has_notify_client() {
  _has_bits_[0] |= 0x00000008u;
}
void CPublishedFile_Subscribe_Request::clear_has_notify_client() {
  _has_bits_[0] &= ~0x00000008u;
}
void CPublishedFile_Subscribe_Request::clear_notify_client() {
  notify_client_ = false;
  clear_has_notify_client();
}
bool CPublishedFile_Subscribe_Request::notify_client() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_Subscribe_Request.notify_client)
  return notify_client_;
}
void CPublishedFile_Subscribe_Request::set_notify_client(bool value) {
  set_has_notify_client();
  notify_client_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_Subscribe_Request.notify_client)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPublishedFile_Subscribe_Response::CPublishedFile_Subscribe_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPublishedFile_Subscribe_Response)
}
CPublishedFile_Subscribe_Response::CPublishedFile_Subscribe_Response(const CPublishedFile_Subscribe_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPublishedFile_Subscribe_Response)
}

void CPublishedFile_Subscribe_Response::SharedCtor() {
  _cached_size_ = 0;
}

CPublishedFile_Subscribe_Response::~CPublishedFile_Subscribe_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CPublishedFile_Subscribe_Response)
  SharedDtor();
}

void CPublishedFile_Subscribe_Response::SharedDtor() {
}

void CPublishedFile_Subscribe_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPublishedFile_Subscribe_Response::descriptor() {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CPublishedFile_Subscribe_Response& CPublishedFile_Subscribe_Response::default_instance() {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CPublishedFile_Subscribe_Response* CPublishedFile_Subscribe_Response::New(::google::protobuf::Arena* arena) const {
  CPublishedFile_Subscribe_Response* n = new CPublishedFile_Subscribe_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CPublishedFile_Subscribe_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPublishedFile_Subscribe_Response)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CPublishedFile_Subscribe_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPublishedFile_Subscribe_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPublishedFile_Subscribe_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPublishedFile_Subscribe_Response)
  return false;
#undef DO_
}

void CPublishedFile_Subscribe_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPublishedFile_Subscribe_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPublishedFile_Subscribe_Response)
}

::google::protobuf::uint8* CPublishedFile_Subscribe_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPublishedFile_Subscribe_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPublishedFile_Subscribe_Response)
  return target;
}

size_t CPublishedFile_Subscribe_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPublishedFile_Subscribe_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPublishedFile_Subscribe_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPublishedFile_Subscribe_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CPublishedFile_Subscribe_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CPublishedFile_Subscribe_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPublishedFile_Subscribe_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPublishedFile_Subscribe_Response)
    MergeFrom(*source);
  }
}

void CPublishedFile_Subscribe_Response::MergeFrom(const CPublishedFile_Subscribe_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPublishedFile_Subscribe_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CPublishedFile_Subscribe_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPublishedFile_Subscribe_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPublishedFile_Subscribe_Response::CopyFrom(const CPublishedFile_Subscribe_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPublishedFile_Subscribe_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_Subscribe_Response::IsInitialized() const {
  return true;
}

void CPublishedFile_Subscribe_Response::Swap(CPublishedFile_Subscribe_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPublishedFile_Subscribe_Response::InternalSwap(CPublishedFile_Subscribe_Response* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CPublishedFile_Subscribe_Response::GetMetadata() const {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CPublishedFile_Subscribe_Response

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPublishedFile_Unsubscribe_Request::kPublishedfileidFieldNumber;
const int CPublishedFile_Unsubscribe_Request::kListTypeFieldNumber;
const int CPublishedFile_Unsubscribe_Request::kAppidFieldNumber;
const int CPublishedFile_Unsubscribe_Request::kNotifyClientFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPublishedFile_Unsubscribe_Request::CPublishedFile_Unsubscribe_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPublishedFile_Unsubscribe_Request)
}
CPublishedFile_Unsubscribe_Request::CPublishedFile_Unsubscribe_Request(const CPublishedFile_Unsubscribe_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&publishedfileid_, &from.publishedfileid_,
    reinterpret_cast<char*>(&notify_client_) -
    reinterpret_cast<char*>(&publishedfileid_) + sizeof(notify_client_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPublishedFile_Unsubscribe_Request)
}

void CPublishedFile_Unsubscribe_Request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&publishedfileid_, 0, reinterpret_cast<char*>(&notify_client_) -
    reinterpret_cast<char*>(&publishedfileid_) + sizeof(notify_client_));
}

CPublishedFile_Unsubscribe_Request::~CPublishedFile_Unsubscribe_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CPublishedFile_Unsubscribe_Request)
  SharedDtor();
}

void CPublishedFile_Unsubscribe_Request::SharedDtor() {
}

void CPublishedFile_Unsubscribe_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPublishedFile_Unsubscribe_Request::descriptor() {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CPublishedFile_Unsubscribe_Request& CPublishedFile_Unsubscribe_Request::default_instance() {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CPublishedFile_Unsubscribe_Request* CPublishedFile_Unsubscribe_Request::New(::google::protobuf::Arena* arena) const {
  CPublishedFile_Unsubscribe_Request* n = new CPublishedFile_Unsubscribe_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CPublishedFile_Unsubscribe_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPublishedFile_Unsubscribe_Request)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&publishedfileid_, 0, reinterpret_cast<char*>(&notify_client_) -
      reinterpret_cast<char*>(&publishedfileid_) + sizeof(notify_client_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CPublishedFile_Unsubscribe_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPublishedFile_Unsubscribe_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 publishedfileid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_publishedfileid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &publishedfileid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 list_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_list_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &list_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 appid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool notify_client = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_notify_client();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &notify_client_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPublishedFile_Unsubscribe_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPublishedFile_Unsubscribe_Request)
  return false;
#undef DO_
}

void CPublishedFile_Unsubscribe_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPublishedFile_Unsubscribe_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 publishedfileid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->publishedfileid(), output);
  }

  // optional uint32 list_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->list_type(), output);
  }

  // optional int32 appid = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->appid(), output);
  }

  // optional bool notify_client = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->notify_client(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPublishedFile_Unsubscribe_Request)
}

::google::protobuf::uint8* CPublishedFile_Unsubscribe_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPublishedFile_Unsubscribe_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 publishedfileid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->publishedfileid(), target);
  }

  // optional uint32 list_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->list_type(), target);
  }

  // optional int32 appid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->appid(), target);
  }

  // optional bool notify_client = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->notify_client(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPublishedFile_Unsubscribe_Request)
  return target;
}

size_t CPublishedFile_Unsubscribe_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPublishedFile_Unsubscribe_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional uint64 publishedfileid = 1;
    if (has_publishedfileid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->publishedfileid());
    }

    // optional uint32 list_type = 2;
    if (has_list_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->list_type());
    }

    // optional int32 appid = 3;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->appid());
    }

    // optional bool notify_client = 4;
    if (has_notify_client()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPublishedFile_Unsubscribe_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPublishedFile_Unsubscribe_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CPublishedFile_Unsubscribe_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CPublishedFile_Unsubscribe_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPublishedFile_Unsubscribe_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPublishedFile_Unsubscribe_Request)
    MergeFrom(*source);
  }
}

void CPublishedFile_Unsubscribe_Request::MergeFrom(const CPublishedFile_Unsubscribe_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPublishedFile_Unsubscribe_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      publishedfileid_ = from.publishedfileid_;
    }
    if (cached_has_bits & 0x00000002u) {
      list_type_ = from.list_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000008u) {
      notify_client_ = from.notify_client_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CPublishedFile_Unsubscribe_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPublishedFile_Unsubscribe_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPublishedFile_Unsubscribe_Request::CopyFrom(const CPublishedFile_Unsubscribe_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPublishedFile_Unsubscribe_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_Unsubscribe_Request::IsInitialized() const {
  return true;
}

void CPublishedFile_Unsubscribe_Request::Swap(CPublishedFile_Unsubscribe_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPublishedFile_Unsubscribe_Request::InternalSwap(CPublishedFile_Unsubscribe_Request* other) {
  std::swap(publishedfileid_, other->publishedfileid_);
  std::swap(list_type_, other->list_type_);
  std::swap(appid_, other->appid_);
  std::swap(notify_client_, other->notify_client_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CPublishedFile_Unsubscribe_Request::GetMetadata() const {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CPublishedFile_Unsubscribe_Request

// optional uint64 publishedfileid = 1;
bool CPublishedFile_Unsubscribe_Request::has_publishedfileid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CPublishedFile_Unsubscribe_Request::set_has_publishedfileid() {
  _has_bits_[0] |= 0x00000001u;
}
void CPublishedFile_Unsubscribe_Request::clear_has_publishedfileid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CPublishedFile_Unsubscribe_Request::clear_publishedfileid() {
  publishedfileid_ = GOOGLE_ULONGLONG(0);
  clear_has_publishedfileid();
}
::google::protobuf::uint64 CPublishedFile_Unsubscribe_Request::publishedfileid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_Unsubscribe_Request.publishedfileid)
  return publishedfileid_;
}
void CPublishedFile_Unsubscribe_Request::set_publishedfileid(::google::protobuf::uint64 value) {
  set_has_publishedfileid();
  publishedfileid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_Unsubscribe_Request.publishedfileid)
}

// optional uint32 list_type = 2;
bool CPublishedFile_Unsubscribe_Request::has_list_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CPublishedFile_Unsubscribe_Request::set_has_list_type() {
  _has_bits_[0] |= 0x00000002u;
}
void CPublishedFile_Unsubscribe_Request::clear_has_list_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void CPublishedFile_Unsubscribe_Request::clear_list_type() {
  list_type_ = 0u;
  clear_has_list_type();
}
::google::protobuf::uint32 CPublishedFile_Unsubscribe_Request::list_type() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_Unsubscribe_Request.list_type)
  return list_type_;
}
void CPublishedFile_Unsubscribe_Request::set_list_type(::google::protobuf::uint32 value) {
  set_has_list_type();
  list_type_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_Unsubscribe_Request.list_type)
}

// optional int32 appid = 3;
bool CPublishedFile_Unsubscribe_Request::has_appid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CPublishedFile_Unsubscribe_Request::set_has_appid() {
  _has_bits_[0] |= 0x00000004u;
}
void CPublishedFile_Unsubscribe_Request::clear_has_appid() {
  _has_bits_[0] &= ~0x00000004u;
}
void CPublishedFile_Unsubscribe_Request::clear_appid() {
  appid_ = 0;
  clear_has_appid();
}
::google::protobuf::int32 CPublishedFile_Unsubscribe_Request::appid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_Unsubscribe_Request.appid)
  return appid_;
}
void CPublishedFile_Unsubscribe_Request::set_appid(::google::protobuf::int32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_Unsubscribe_Request.appid)
}

// optional bool notify_client = 4;
bool CPublishedFile_Unsubscribe_Request::has_notify_client() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CPublishedFile_Unsubscribe_Request::set_has_notify_client() {
  _has_bits_[0] |= 0x00000008u;
}
void CPublishedFile_Unsubscribe_Request::clear_has_notify_client() {
  _has_bits_[0] &= ~0x00000008u;
}
void CPublishedFile_Unsubscribe_Request::clear_notify_client() {
  notify_client_ = false;
  clear_has_notify_client();
}
bool CPublishedFile_Unsubscribe_Request::notify_client() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_Unsubscribe_Request.notify_client)
  return notify_client_;
}
void CPublishedFile_Unsubscribe_Request::set_notify_client(bool value) {
  set_has_notify_client();
  notify_client_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_Unsubscribe_Request.notify_client)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPublishedFile_Unsubscribe_Response::CPublishedFile_Unsubscribe_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPublishedFile_Unsubscribe_Response)
}
CPublishedFile_Unsubscribe_Response::CPublishedFile_Unsubscribe_Response(const CPublishedFile_Unsubscribe_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPublishedFile_Unsubscribe_Response)
}

void CPublishedFile_Unsubscribe_Response::SharedCtor() {
  _cached_size_ = 0;
}

CPublishedFile_Unsubscribe_Response::~CPublishedFile_Unsubscribe_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CPublishedFile_Unsubscribe_Response)
  SharedDtor();
}

void CPublishedFile_Unsubscribe_Response::SharedDtor() {
}

void CPublishedFile_Unsubscribe_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPublishedFile_Unsubscribe_Response::descriptor() {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CPublishedFile_Unsubscribe_Response& CPublishedFile_Unsubscribe_Response::default_instance() {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CPublishedFile_Unsubscribe_Response* CPublishedFile_Unsubscribe_Response::New(::google::protobuf::Arena* arena) const {
  CPublishedFile_Unsubscribe_Response* n = new CPublishedFile_Unsubscribe_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CPublishedFile_Unsubscribe_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPublishedFile_Unsubscribe_Response)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CPublishedFile_Unsubscribe_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPublishedFile_Unsubscribe_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPublishedFile_Unsubscribe_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPublishedFile_Unsubscribe_Response)
  return false;
#undef DO_
}

void CPublishedFile_Unsubscribe_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPublishedFile_Unsubscribe_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPublishedFile_Unsubscribe_Response)
}

::google::protobuf::uint8* CPublishedFile_Unsubscribe_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPublishedFile_Unsubscribe_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPublishedFile_Unsubscribe_Response)
  return target;
}

size_t CPublishedFile_Unsubscribe_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPublishedFile_Unsubscribe_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPublishedFile_Unsubscribe_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPublishedFile_Unsubscribe_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CPublishedFile_Unsubscribe_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CPublishedFile_Unsubscribe_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPublishedFile_Unsubscribe_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPublishedFile_Unsubscribe_Response)
    MergeFrom(*source);
  }
}

void CPublishedFile_Unsubscribe_Response::MergeFrom(const CPublishedFile_Unsubscribe_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPublishedFile_Unsubscribe_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CPublishedFile_Unsubscribe_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPublishedFile_Unsubscribe_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPublishedFile_Unsubscribe_Response::CopyFrom(const CPublishedFile_Unsubscribe_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPublishedFile_Unsubscribe_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_Unsubscribe_Response::IsInitialized() const {
  return true;
}

void CPublishedFile_Unsubscribe_Response::Swap(CPublishedFile_Unsubscribe_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPublishedFile_Unsubscribe_Response::InternalSwap(CPublishedFile_Unsubscribe_Response* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CPublishedFile_Unsubscribe_Response::GetMetadata() const {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CPublishedFile_Unsubscribe_Response

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPublishedFile_CanSubscribe_Request::kPublishedfileidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPublishedFile_CanSubscribe_Request::CPublishedFile_CanSubscribe_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPublishedFile_CanSubscribe_Request)
}
CPublishedFile_CanSubscribe_Request::CPublishedFile_CanSubscribe_Request(const CPublishedFile_CanSubscribe_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  publishedfileid_ = from.publishedfileid_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPublishedFile_CanSubscribe_Request)
}

void CPublishedFile_CanSubscribe_Request::SharedCtor() {
  _cached_size_ = 0;
  publishedfileid_ = GOOGLE_ULONGLONG(0);
}

CPublishedFile_CanSubscribe_Request::~CPublishedFile_CanSubscribe_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CPublishedFile_CanSubscribe_Request)
  SharedDtor();
}

void CPublishedFile_CanSubscribe_Request::SharedDtor() {
}

void CPublishedFile_CanSubscribe_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPublishedFile_CanSubscribe_Request::descriptor() {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CPublishedFile_CanSubscribe_Request& CPublishedFile_CanSubscribe_Request::default_instance() {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CPublishedFile_CanSubscribe_Request* CPublishedFile_CanSubscribe_Request::New(::google::protobuf::Arena* arena) const {
  CPublishedFile_CanSubscribe_Request* n = new CPublishedFile_CanSubscribe_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CPublishedFile_CanSubscribe_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPublishedFile_CanSubscribe_Request)
  publishedfileid_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CPublishedFile_CanSubscribe_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPublishedFile_CanSubscribe_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 publishedfileid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_publishedfileid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &publishedfileid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPublishedFile_CanSubscribe_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPublishedFile_CanSubscribe_Request)
  return false;
#undef DO_
}

void CPublishedFile_CanSubscribe_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPublishedFile_CanSubscribe_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 publishedfileid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->publishedfileid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPublishedFile_CanSubscribe_Request)
}

::google::protobuf::uint8* CPublishedFile_CanSubscribe_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPublishedFile_CanSubscribe_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 publishedfileid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->publishedfileid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPublishedFile_CanSubscribe_Request)
  return target;
}

size_t CPublishedFile_CanSubscribe_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPublishedFile_CanSubscribe_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint64 publishedfileid = 1;
  if (has_publishedfileid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->publishedfileid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPublishedFile_CanSubscribe_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPublishedFile_CanSubscribe_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CPublishedFile_CanSubscribe_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CPublishedFile_CanSubscribe_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPublishedFile_CanSubscribe_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPublishedFile_CanSubscribe_Request)
    MergeFrom(*source);
  }
}

void CPublishedFile_CanSubscribe_Request::MergeFrom(const CPublishedFile_CanSubscribe_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPublishedFile_CanSubscribe_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_publishedfileid()) {
    set_publishedfileid(from.publishedfileid());
  }
}

void CPublishedFile_CanSubscribe_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPublishedFile_CanSubscribe_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPublishedFile_CanSubscribe_Request::CopyFrom(const CPublishedFile_CanSubscribe_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPublishedFile_CanSubscribe_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_CanSubscribe_Request::IsInitialized() const {
  return true;
}

void CPublishedFile_CanSubscribe_Request::Swap(CPublishedFile_CanSubscribe_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPublishedFile_CanSubscribe_Request::InternalSwap(CPublishedFile_CanSubscribe_Request* other) {
  std::swap(publishedfileid_, other->publishedfileid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CPublishedFile_CanSubscribe_Request::GetMetadata() const {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CPublishedFile_CanSubscribe_Request

// optional uint64 publishedfileid = 1;
bool CPublishedFile_CanSubscribe_Request::has_publishedfileid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CPublishedFile_CanSubscribe_Request::set_has_publishedfileid() {
  _has_bits_[0] |= 0x00000001u;
}
void CPublishedFile_CanSubscribe_Request::clear_has_publishedfileid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CPublishedFile_CanSubscribe_Request::clear_publishedfileid() {
  publishedfileid_ = GOOGLE_ULONGLONG(0);
  clear_has_publishedfileid();
}
::google::protobuf::uint64 CPublishedFile_CanSubscribe_Request::publishedfileid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_CanSubscribe_Request.publishedfileid)
  return publishedfileid_;
}
void CPublishedFile_CanSubscribe_Request::set_publishedfileid(::google::protobuf::uint64 value) {
  set_has_publishedfileid();
  publishedfileid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_CanSubscribe_Request.publishedfileid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPublishedFile_CanSubscribe_Response::kCanSubscribeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPublishedFile_CanSubscribe_Response::CPublishedFile_CanSubscribe_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPublishedFile_CanSubscribe_Response)
}
CPublishedFile_CanSubscribe_Response::CPublishedFile_CanSubscribe_Response(const CPublishedFile_CanSubscribe_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  can_subscribe_ = from.can_subscribe_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPublishedFile_CanSubscribe_Response)
}

void CPublishedFile_CanSubscribe_Response::SharedCtor() {
  _cached_size_ = 0;
  can_subscribe_ = false;
}

CPublishedFile_CanSubscribe_Response::~CPublishedFile_CanSubscribe_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CPublishedFile_CanSubscribe_Response)
  SharedDtor();
}

void CPublishedFile_CanSubscribe_Response::SharedDtor() {
}

void CPublishedFile_CanSubscribe_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPublishedFile_CanSubscribe_Response::descriptor() {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CPublishedFile_CanSubscribe_Response& CPublishedFile_CanSubscribe_Response::default_instance() {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CPublishedFile_CanSubscribe_Response* CPublishedFile_CanSubscribe_Response::New(::google::protobuf::Arena* arena) const {
  CPublishedFile_CanSubscribe_Response* n = new CPublishedFile_CanSubscribe_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CPublishedFile_CanSubscribe_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPublishedFile_CanSubscribe_Response)
  can_subscribe_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CPublishedFile_CanSubscribe_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPublishedFile_CanSubscribe_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool can_subscribe = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_can_subscribe();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_subscribe_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPublishedFile_CanSubscribe_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPublishedFile_CanSubscribe_Response)
  return false;
#undef DO_
}

void CPublishedFile_CanSubscribe_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPublishedFile_CanSubscribe_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool can_subscribe = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->can_subscribe(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPublishedFile_CanSubscribe_Response)
}

::google::protobuf::uint8* CPublishedFile_CanSubscribe_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPublishedFile_CanSubscribe_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool can_subscribe = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->can_subscribe(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPublishedFile_CanSubscribe_Response)
  return target;
}

size_t CPublishedFile_CanSubscribe_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPublishedFile_CanSubscribe_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional bool can_subscribe = 1;
  if (has_can_subscribe()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPublishedFile_CanSubscribe_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPublishedFile_CanSubscribe_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CPublishedFile_CanSubscribe_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CPublishedFile_CanSubscribe_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPublishedFile_CanSubscribe_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPublishedFile_CanSubscribe_Response)
    MergeFrom(*source);
  }
}

void CPublishedFile_CanSubscribe_Response::MergeFrom(const CPublishedFile_CanSubscribe_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPublishedFile_CanSubscribe_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_can_subscribe()) {
    set_can_subscribe(from.can_subscribe());
  }
}

void CPublishedFile_CanSubscribe_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPublishedFile_CanSubscribe_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPublishedFile_CanSubscribe_Response::CopyFrom(const CPublishedFile_CanSubscribe_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPublishedFile_CanSubscribe_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_CanSubscribe_Response::IsInitialized() const {
  return true;
}

void CPublishedFile_CanSubscribe_Response::Swap(CPublishedFile_CanSubscribe_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPublishedFile_CanSubscribe_Response::InternalSwap(CPublishedFile_CanSubscribe_Response* other) {
  std::swap(can_subscribe_, other->can_subscribe_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CPublishedFile_CanSubscribe_Response::GetMetadata() const {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CPublishedFile_CanSubscribe_Response

// optional bool can_subscribe = 1;
bool CPublishedFile_CanSubscribe_Response::has_can_subscribe() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CPublishedFile_CanSubscribe_Response::set_has_can_subscribe() {
  _has_bits_[0] |= 0x00000001u;
}
void CPublishedFile_CanSubscribe_Response::clear_has_can_subscribe() {
  _has_bits_[0] &= ~0x00000001u;
}
void CPublishedFile_CanSubscribe_Response::clear_can_subscribe() {
  can_subscribe_ = false;
  clear_has_can_subscribe();
}
bool CPublishedFile_CanSubscribe_Response::can_subscribe() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_CanSubscribe_Response.can_subscribe)
  return can_subscribe_;
}
void CPublishedFile_CanSubscribe_Response::set_can_subscribe(bool value) {
  set_has_can_subscribe();
  can_subscribe_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_CanSubscribe_Response.can_subscribe)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPublishedFile_Publish_Request::kAppidFieldNumber;
const int CPublishedFile_Publish_Request::kConsumerAppidFieldNumber;
const int CPublishedFile_Publish_Request::kCloudfilenameFieldNumber;
const int CPublishedFile_Publish_Request::kPreviewCloudfilenameFieldNumber;
const int CPublishedFile_Publish_Request::kTitleFieldNumber;
const int CPublishedFile_Publish_Request::kFileDescriptionFieldNumber;
const int CPublishedFile_Publish_Request::kFileTypeFieldNumber;
const int CPublishedFile_Publish_Request::kConsumerShortcutNameFieldNumber;
const int CPublishedFile_Publish_Request::kYoutubeUsernameFieldNumber;
const int CPublishedFile_Publish_Request::kYoutubeVideoidFieldNumber;
const int CPublishedFile_Publish_Request::kVisibilityFieldNumber;
const int CPublishedFile_Publish_Request::kRedirectUriFieldNumber;
const int CPublishedFile_Publish_Request::kTagsFieldNumber;
const int CPublishedFile_Publish_Request::kCollectionTypeFieldNumber;
const int CPublishedFile_Publish_Request::kGameTypeFieldNumber;
const int CPublishedFile_Publish_Request::kUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPublishedFile_Publish_Request::CPublishedFile_Publish_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPublishedFile_Publish_Request)
}
CPublishedFile_Publish_Request::CPublishedFile_Publish_Request(const CPublishedFile_Publish_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      tags_(from.tags_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cloudfilename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_cloudfilename()) {
    cloudfilename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cloudfilename_);
  }
  preview_cloudfilename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_preview_cloudfilename()) {
    preview_cloudfilename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.preview_cloudfilename_);
  }
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_title()) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  file_description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_file_description()) {
    file_description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_description_);
  }
  consumer_shortcut_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_consumer_shortcut_name()) {
    consumer_shortcut_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.consumer_shortcut_name_);
  }
  youtube_username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_youtube_username()) {
    youtube_username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.youtube_username_);
  }
  youtube_videoid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_youtube_videoid()) {
    youtube_videoid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.youtube_videoid_);
  }
  redirect_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_redirect_uri()) {
    redirect_uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.redirect_uri_);
  }
  collection_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_collection_type()) {
    collection_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.collection_type_);
  }
  game_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_game_type()) {
    game_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_type_);
  }
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  ::memcpy(&appid_, &from.appid_,
    reinterpret_cast<char*>(&visibility_) -
    reinterpret_cast<char*>(&appid_) + sizeof(visibility_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPublishedFile_Publish_Request)
}

void CPublishedFile_Publish_Request::SharedCtor() {
  _cached_size_ = 0;
  cloudfilename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  preview_cloudfilename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  consumer_shortcut_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  youtube_username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  youtube_videoid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  redirect_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  collection_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&appid_, 0, reinterpret_cast<char*>(&visibility_) -
    reinterpret_cast<char*>(&appid_) + sizeof(visibility_));
}

CPublishedFile_Publish_Request::~CPublishedFile_Publish_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CPublishedFile_Publish_Request)
  SharedDtor();
}

void CPublishedFile_Publish_Request::SharedDtor() {
  cloudfilename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  preview_cloudfilename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  consumer_shortcut_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  youtube_username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  youtube_videoid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  redirect_uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  collection_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CPublishedFile_Publish_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPublishedFile_Publish_Request::descriptor() {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CPublishedFile_Publish_Request& CPublishedFile_Publish_Request::default_instance() {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CPublishedFile_Publish_Request* CPublishedFile_Publish_Request::New(::google::protobuf::Arena* arena) const {
  CPublishedFile_Publish_Request* n = new CPublishedFile_Publish_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CPublishedFile_Publish_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPublishedFile_Publish_Request)
  tags_.Clear();
  if (_has_bits_[0 / 32] & 255u) {
    if (has_cloudfilename()) {
      GOOGLE_DCHECK(!cloudfilename_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*cloudfilename_.UnsafeRawStringPointer())->clear();
    }
    if (has_preview_cloudfilename()) {
      GOOGLE_DCHECK(!preview_cloudfilename_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*preview_cloudfilename_.UnsafeRawStringPointer())->clear();
    }
    if (has_title()) {
      GOOGLE_DCHECK(!title_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*title_.UnsafeRawStringPointer())->clear();
    }
    if (has_file_description()) {
      GOOGLE_DCHECK(!file_description_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*file_description_.UnsafeRawStringPointer())->clear();
    }
    if (has_consumer_shortcut_name()) {
      GOOGLE_DCHECK(!consumer_shortcut_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*consumer_shortcut_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_youtube_username()) {
      GOOGLE_DCHECK(!youtube_username_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*youtube_username_.UnsafeRawStringPointer())->clear();
    }
    if (has_youtube_videoid()) {
      GOOGLE_DCHECK(!youtube_videoid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*youtube_videoid_.UnsafeRawStringPointer())->clear();
    }
    if (has_redirect_uri()) {
      GOOGLE_DCHECK(!redirect_uri_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*redirect_uri_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[8 / 32] & 1792u) {
    if (has_collection_type()) {
      GOOGLE_DCHECK(!collection_type_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*collection_type_.UnsafeRawStringPointer())->clear();
    }
    if (has_game_type()) {
      GOOGLE_DCHECK(!game_type_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*game_type_.UnsafeRawStringPointer())->clear();
    }
    if (has_url()) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[8 / 32] & 30720u) {
    ::memset(&appid_, 0, reinterpret_cast<char*>(&visibility_) -
      reinterpret_cast<char*>(&appid_) + sizeof(visibility_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CPublishedFile_Publish_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPublishedFile_Publish_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1 [(.proto.steam.description) = "App Id this file is being published FROM."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 consumer_appid = 2 [(.proto.steam.description) = "App Id this file is being published TO."];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_consumer_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &consumer_appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string cloudfilename = 3 [(.proto.steam.description) = "Name of the file to publish in the user\'s cloud."];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cloudfilename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cloudfilename().data(), this->cloudfilename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CPublishedFile_Publish_Request.cloudfilename");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string preview_cloudfilename = 4 [(.proto.steam.description) = "Name of the file to use as the published file\'s preview."];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_preview_cloudfilename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->preview_cloudfilename().data(), this->preview_cloudfilename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CPublishedFile_Publish_Request.preview_cloudfilename");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string title = 5 [(.proto.steam.description) = "Text title for the published file."];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CPublishedFile_Publish_Request.title");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string file_description = 6 [(.proto.steam.description) = "Text description for the published file."];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file_description().data(), this->file_description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CPublishedFile_Publish_Request.file_description");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 file_type = 7 [(.proto.steam.description) = "(EWorkshopFileType) Type of Workshop file to publish."];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_file_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &file_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string consumer_shortcut_name = 8 [(.proto.steam.description) = "Shortcut name for the published file."];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_consumer_shortcut_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->consumer_shortcut_name().data(), this->consumer_shortcut_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CPublishedFile_Publish_Request.consumer_shortcut_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string youtube_username = 9 [(.proto.steam.description) = "(Optional) User\'s YouTube account username."];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_youtube_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->youtube_username().data(), this->youtube_username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CPublishedFile_Publish_Request.youtube_username");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string youtube_videoid = 10 [(.proto.steam.description) = "(Optional) Video Id of a YouTube video for this published file."];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_youtube_videoid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->youtube_videoid().data(), this->youtube_videoid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CPublishedFile_Publish_Request.youtube_videoid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 visibility = 11 [(.proto.steam.description) = "(ERemoteStoragePublishedFileVisibility) Visibility of the published file (private, friends, public, etc.)"];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_visibility();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &visibility_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string redirect_uri = 12 [(.proto.steam.description) = "(Optional) If supplied, the resulting published file\'s Id is appended to the URI."];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_redirect_uri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->redirect_uri().data(), this->redirect_uri().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CPublishedFile_Publish_Request.redirect_uri");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string tags = 13 [(.proto.steam.description) = "Array of text tags to apply to the published file."];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tags()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tags(this->tags_size() - 1).data(),
            this->tags(this->tags_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CPublishedFile_Publish_Request.tags");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string collection_type = 14 [(.proto.steam.description) = "(Optional) Type of collection the published file represents."];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_collection_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->collection_type().data(), this->collection_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CPublishedFile_Publish_Request.collection_type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string game_type = 15 [(.proto.steam.description) = "(Optional) Type of game the published file represents."];
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->game_type().data(), this->game_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CPublishedFile_Publish_Request.game_type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string url = 16 [(.proto.steam.description) = "(Optional) If this represents a game, this is the URL to that game\'s page."];
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CPublishedFile_Publish_Request.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPublishedFile_Publish_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPublishedFile_Publish_Request)
  return false;
#undef DO_
}

void CPublishedFile_Publish_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPublishedFile_Publish_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1 [(.proto.steam.description) = "App Id this file is being published FROM."];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional uint32 consumer_appid = 2 [(.proto.steam.description) = "App Id this file is being published TO."];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->consumer_appid(), output);
  }

  // optional string cloudfilename = 3 [(.proto.steam.description) = "Name of the file to publish in the user\'s cloud."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cloudfilename().data(), this->cloudfilename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPublishedFile_Publish_Request.cloudfilename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->cloudfilename(), output);
  }

  // optional string preview_cloudfilename = 4 [(.proto.steam.description) = "Name of the file to use as the published file\'s preview."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->preview_cloudfilename().data(), this->preview_cloudfilename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPublishedFile_Publish_Request.preview_cloudfilename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->preview_cloudfilename(), output);
  }

  // optional string title = 5 [(.proto.steam.description) = "Text title for the published file."];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPublishedFile_Publish_Request.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->title(), output);
  }

  // optional string file_description = 6 [(.proto.steam.description) = "Text description for the published file."];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_description().data(), this->file_description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPublishedFile_Publish_Request.file_description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->file_description(), output);
  }

  // optional uint32 file_type = 7 [(.proto.steam.description) = "(EWorkshopFileType) Type of Workshop file to publish."];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->file_type(), output);
  }

  // optional string consumer_shortcut_name = 8 [(.proto.steam.description) = "Shortcut name for the published file."];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->consumer_shortcut_name().data(), this->consumer_shortcut_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPublishedFile_Publish_Request.consumer_shortcut_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->consumer_shortcut_name(), output);
  }

  // optional string youtube_username = 9 [(.proto.steam.description) = "(Optional) User\'s YouTube account username."];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->youtube_username().data(), this->youtube_username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPublishedFile_Publish_Request.youtube_username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->youtube_username(), output);
  }

  // optional string youtube_videoid = 10 [(.proto.steam.description) = "(Optional) Video Id of a YouTube video for this published file."];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->youtube_videoid().data(), this->youtube_videoid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPublishedFile_Publish_Request.youtube_videoid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->youtube_videoid(), output);
  }

  // optional uint32 visibility = 11 [(.proto.steam.description) = "(ERemoteStoragePublishedFileVisibility) Visibility of the published file (private, friends, public, etc.)"];
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->visibility(), output);
  }

  // optional string redirect_uri = 12 [(.proto.steam.description) = "(Optional) If supplied, the resulting published file\'s Id is appended to the URI."];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->redirect_uri().data(), this->redirect_uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPublishedFile_Publish_Request.redirect_uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->redirect_uri(), output);
  }

  // repeated string tags = 13 [(.proto.steam.description) = "Array of text tags to apply to the published file."];
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tags(i).data(), this->tags(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPublishedFile_Publish_Request.tags");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->tags(i), output);
  }

  // optional string collection_type = 14 [(.proto.steam.description) = "(Optional) Type of collection the published file represents."];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->collection_type().data(), this->collection_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPublishedFile_Publish_Request.collection_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->collection_type(), output);
  }

  // optional string game_type = 15 [(.proto.steam.description) = "(Optional) Type of game the published file represents."];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_type().data(), this->game_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPublishedFile_Publish_Request.game_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->game_type(), output);
  }

  // optional string url = 16 [(.proto.steam.description) = "(Optional) If this represents a game, this is the URL to that game\'s page."];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPublishedFile_Publish_Request.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->url(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPublishedFile_Publish_Request)
}

::google::protobuf::uint8* CPublishedFile_Publish_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPublishedFile_Publish_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1 [(.proto.steam.description) = "App Id this file is being published FROM."];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional uint32 consumer_appid = 2 [(.proto.steam.description) = "App Id this file is being published TO."];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->consumer_appid(), target);
  }

  // optional string cloudfilename = 3 [(.proto.steam.description) = "Name of the file to publish in the user\'s cloud."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cloudfilename().data(), this->cloudfilename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPublishedFile_Publish_Request.cloudfilename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->cloudfilename(), target);
  }

  // optional string preview_cloudfilename = 4 [(.proto.steam.description) = "Name of the file to use as the published file\'s preview."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->preview_cloudfilename().data(), this->preview_cloudfilename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPublishedFile_Publish_Request.preview_cloudfilename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->preview_cloudfilename(), target);
  }

  // optional string title = 5 [(.proto.steam.description) = "Text title for the published file."];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPublishedFile_Publish_Request.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->title(), target);
  }

  // optional string file_description = 6 [(.proto.steam.description) = "Text description for the published file."];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_description().data(), this->file_description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPublishedFile_Publish_Request.file_description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->file_description(), target);
  }

  // optional uint32 file_type = 7 [(.proto.steam.description) = "(EWorkshopFileType) Type of Workshop file to publish."];
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->file_type(), target);
  }

  // optional string consumer_shortcut_name = 8 [(.proto.steam.description) = "Shortcut name for the published file."];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->consumer_shortcut_name().data(), this->consumer_shortcut_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPublishedFile_Publish_Request.consumer_shortcut_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->consumer_shortcut_name(), target);
  }

  // optional string youtube_username = 9 [(.proto.steam.description) = "(Optional) User\'s YouTube account username."];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->youtube_username().data(), this->youtube_username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPublishedFile_Publish_Request.youtube_username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->youtube_username(), target);
  }

  // optional string youtube_videoid = 10 [(.proto.steam.description) = "(Optional) Video Id of a YouTube video for this published file."];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->youtube_videoid().data(), this->youtube_videoid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPublishedFile_Publish_Request.youtube_videoid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->youtube_videoid(), target);
  }

  // optional uint32 visibility = 11 [(.proto.steam.description) = "(ERemoteStoragePublishedFileVisibility) Visibility of the published file (private, friends, public, etc.)"];
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->visibility(), target);
  }

  // optional string redirect_uri = 12 [(.proto.steam.description) = "(Optional) If supplied, the resulting published file\'s Id is appended to the URI."];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->redirect_uri().data(), this->redirect_uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPublishedFile_Publish_Request.redirect_uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->redirect_uri(), target);
  }

  // repeated string tags = 13 [(.proto.steam.description) = "Array of text tags to apply to the published file."];
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tags(i).data(), this->tags(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPublishedFile_Publish_Request.tags");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(13, this->tags(i), target);
  }

  // optional string collection_type = 14 [(.proto.steam.description) = "(Optional) Type of collection the published file represents."];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->collection_type().data(), this->collection_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPublishedFile_Publish_Request.collection_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->collection_type(), target);
  }

  // optional string game_type = 15 [(.proto.steam.description) = "(Optional) Type of game the published file represents."];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_type().data(), this->game_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPublishedFile_Publish_Request.game_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->game_type(), target);
  }

  // optional string url = 16 [(.proto.steam.description) = "(Optional) If this represents a game, this is the URL to that game\'s page."];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPublishedFile_Publish_Request.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->url(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPublishedFile_Publish_Request)
  return target;
}

size_t CPublishedFile_Publish_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPublishedFile_Publish_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated string tags = 13 [(.proto.steam.description) = "Array of text tags to apply to the published file."];
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->tags_size());
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tags(i));
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string cloudfilename = 3 [(.proto.steam.description) = "Name of the file to publish in the user\'s cloud."];
    if (has_cloudfilename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cloudfilename());
    }

    // optional string preview_cloudfilename = 4 [(.proto.steam.description) = "Name of the file to use as the published file\'s preview."];
    if (has_preview_cloudfilename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->preview_cloudfilename());
    }

    // optional string title = 5 [(.proto.steam.description) = "Text title for the published file."];
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string file_description = 6 [(.proto.steam.description) = "Text description for the published file."];
    if (has_file_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_description());
    }

    // optional string consumer_shortcut_name = 8 [(.proto.steam.description) = "Shortcut name for the published file."];
    if (has_consumer_shortcut_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->consumer_shortcut_name());
    }

    // optional string youtube_username = 9 [(.proto.steam.description) = "(Optional) User\'s YouTube account username."];
    if (has_youtube_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->youtube_username());
    }

    // optional string youtube_videoid = 10 [(.proto.steam.description) = "(Optional) Video Id of a YouTube video for this published file."];
    if (has_youtube_videoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->youtube_videoid());
    }

    // optional string redirect_uri = 12 [(.proto.steam.description) = "(Optional) If supplied, the resulting published file\'s Id is appended to the URI."];
    if (has_redirect_uri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->redirect_uri());
    }

  }
  if (_has_bits_[8 / 32] & 32512u) {
    // optional string collection_type = 14 [(.proto.steam.description) = "(Optional) Type of collection the published file represents."];
    if (has_collection_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->collection_type());
    }

    // optional string game_type = 15 [(.proto.steam.description) = "(Optional) Type of game the published file represents."];
    if (has_game_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game_type());
    }

    // optional string url = 16 [(.proto.steam.description) = "(Optional) If this represents a game, this is the URL to that game\'s page."];
    if (has_url()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional uint32 appid = 1 [(.proto.steam.description) = "App Id this file is being published FROM."];
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional uint32 consumer_appid = 2 [(.proto.steam.description) = "App Id this file is being published TO."];
    if (has_consumer_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->consumer_appid());
    }

    // optional uint32 file_type = 7 [(.proto.steam.description) = "(EWorkshopFileType) Type of Workshop file to publish."];
    if (has_file_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->file_type());
    }

    // optional uint32 visibility = 11 [(.proto.steam.description) = "(ERemoteStoragePublishedFileVisibility) Visibility of the published file (private, friends, public, etc.)"];
    if (has_visibility()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->visibility());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPublishedFile_Publish_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPublishedFile_Publish_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CPublishedFile_Publish_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CPublishedFile_Publish_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPublishedFile_Publish_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPublishedFile_Publish_Request)
    MergeFrom(*source);
  }
}

void CPublishedFile_Publish_Request::MergeFrom(const CPublishedFile_Publish_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPublishedFile_Publish_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_cloudfilename();
      cloudfilename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cloudfilename_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_preview_cloudfilename();
      preview_cloudfilename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.preview_cloudfilename_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_title();
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_file_description();
      file_description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_description_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_consumer_shortcut_name();
      consumer_shortcut_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.consumer_shortcut_name_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_youtube_username();
      youtube_username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.youtube_username_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_youtube_videoid();
      youtube_videoid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.youtube_videoid_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has_redirect_uri();
      redirect_uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.redirect_uri_);
    }
  }
  if (cached_has_bits & 32512u) {
    if (cached_has_bits & 0x00000100u) {
      set_has_collection_type();
      collection_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.collection_type_);
    }
    if (cached_has_bits & 0x00000200u) {
      set_has_game_type();
      game_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_type_);
    }
    if (cached_has_bits & 0x00000400u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000800u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00001000u) {
      consumer_appid_ = from.consumer_appid_;
    }
    if (cached_has_bits & 0x00002000u) {
      file_type_ = from.file_type_;
    }
    if (cached_has_bits & 0x00004000u) {
      visibility_ = from.visibility_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CPublishedFile_Publish_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPublishedFile_Publish_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPublishedFile_Publish_Request::CopyFrom(const CPublishedFile_Publish_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPublishedFile_Publish_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_Publish_Request::IsInitialized() const {
  return true;
}

void CPublishedFile_Publish_Request::Swap(CPublishedFile_Publish_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPublishedFile_Publish_Request::InternalSwap(CPublishedFile_Publish_Request* other) {
  tags_.InternalSwap(&other->tags_);
  cloudfilename_.Swap(&other->cloudfilename_);
  preview_cloudfilename_.Swap(&other->preview_cloudfilename_);
  title_.Swap(&other->title_);
  file_description_.Swap(&other->file_description_);
  consumer_shortcut_name_.Swap(&other->consumer_shortcut_name_);
  youtube_username_.Swap(&other->youtube_username_);
  youtube_videoid_.Swap(&other->youtube_videoid_);
  redirect_uri_.Swap(&other->redirect_uri_);
  collection_type_.Swap(&other->collection_type_);
  game_type_.Swap(&other->game_type_);
  url_.Swap(&other->url_);
  std::swap(appid_, other->appid_);
  std::swap(consumer_appid_, other->consumer_appid_);
  std::swap(file_type_, other->file_type_);
  std::swap(visibility_, other->visibility_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CPublishedFile_Publish_Request::GetMetadata() const {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CPublishedFile_Publish_Request

// optional uint32 appid = 1 [(.proto.steam.description) = "App Id this file is being published FROM."];
bool CPublishedFile_Publish_Request::has_appid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CPublishedFile_Publish_Request::set_has_appid() {
  _has_bits_[0] |= 0x00000800u;
}
void CPublishedFile_Publish_Request::clear_has_appid() {
  _has_bits_[0] &= ~0x00000800u;
}
void CPublishedFile_Publish_Request::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
::google::protobuf::uint32 CPublishedFile_Publish_Request::appid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_Publish_Request.appid)
  return appid_;
}
void CPublishedFile_Publish_Request::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_Publish_Request.appid)
}

// optional uint32 consumer_appid = 2 [(.proto.steam.description) = "App Id this file is being published TO."];
bool CPublishedFile_Publish_Request::has_consumer_appid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void CPublishedFile_Publish_Request::set_has_consumer_appid() {
  _has_bits_[0] |= 0x00001000u;
}
void CPublishedFile_Publish_Request::clear_has_consumer_appid() {
  _has_bits_[0] &= ~0x00001000u;
}
void CPublishedFile_Publish_Request::clear_consumer_appid() {
  consumer_appid_ = 0u;
  clear_has_consumer_appid();
}
::google::protobuf::uint32 CPublishedFile_Publish_Request::consumer_appid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_Publish_Request.consumer_appid)
  return consumer_appid_;
}
void CPublishedFile_Publish_Request::set_consumer_appid(::google::protobuf::uint32 value) {
  set_has_consumer_appid();
  consumer_appid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_Publish_Request.consumer_appid)
}

// optional string cloudfilename = 3 [(.proto.steam.description) = "Name of the file to publish in the user\'s cloud."];
bool CPublishedFile_Publish_Request::has_cloudfilename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CPublishedFile_Publish_Request::set_has_cloudfilename() {
  _has_bits_[0] |= 0x00000001u;
}
void CPublishedFile_Publish_Request::clear_has_cloudfilename() {
  _has_bits_[0] &= ~0x00000001u;
}
void CPublishedFile_Publish_Request::clear_cloudfilename() {
  cloudfilename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cloudfilename();
}
const ::std::string& CPublishedFile_Publish_Request::cloudfilename() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_Publish_Request.cloudfilename)
  return cloudfilename_.GetNoArena();
}
void CPublishedFile_Publish_Request::set_cloudfilename(const ::std::string& value) {
  set_has_cloudfilename();
  cloudfilename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_Publish_Request.cloudfilename)
}
#if LANG_CXX11
void CPublishedFile_Publish_Request::set_cloudfilename(::std::string&& value) {
  set_has_cloudfilename();
  cloudfilename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CPublishedFile_Publish_Request.cloudfilename)
}
#endif
void CPublishedFile_Publish_Request::set_cloudfilename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_cloudfilename();
  cloudfilename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CPublishedFile_Publish_Request.cloudfilename)
}
void CPublishedFile_Publish_Request::set_cloudfilename(const char* value, size_t size) {
  set_has_cloudfilename();
  cloudfilename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CPublishedFile_Publish_Request.cloudfilename)
}
::std::string* CPublishedFile_Publish_Request::mutable_cloudfilename() {
  set_has_cloudfilename();
  // @@protoc_insertion_point(field_mutable:proto.steam.CPublishedFile_Publish_Request.cloudfilename)
  return cloudfilename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CPublishedFile_Publish_Request::release_cloudfilename() {
  // @@protoc_insertion_point(field_release:proto.steam.CPublishedFile_Publish_Request.cloudfilename)
  clear_has_cloudfilename();
  return cloudfilename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CPublishedFile_Publish_Request::set_allocated_cloudfilename(::std::string* cloudfilename) {
  if (cloudfilename != NULL) {
    set_has_cloudfilename();
  } else {
    clear_has_cloudfilename();
  }
  cloudfilename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cloudfilename);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CPublishedFile_Publish_Request.cloudfilename)
}

// optional string preview_cloudfilename = 4 [(.proto.steam.description) = "Name of the file to use as the published file\'s preview."];
bool CPublishedFile_Publish_Request::has_preview_cloudfilename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CPublishedFile_Publish_Request::set_has_preview_cloudfilename() {
  _has_bits_[0] |= 0x00000002u;
}
void CPublishedFile_Publish_Request::clear_has_preview_cloudfilename() {
  _has_bits_[0] &= ~0x00000002u;
}
void CPublishedFile_Publish_Request::clear_preview_cloudfilename() {
  preview_cloudfilename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_preview_cloudfilename();
}
const ::std::string& CPublishedFile_Publish_Request::preview_cloudfilename() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_Publish_Request.preview_cloudfilename)
  return preview_cloudfilename_.GetNoArena();
}
void CPublishedFile_Publish_Request::set_preview_cloudfilename(const ::std::string& value) {
  set_has_preview_cloudfilename();
  preview_cloudfilename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_Publish_Request.preview_cloudfilename)
}
#if LANG_CXX11
void CPublishedFile_Publish_Request::set_preview_cloudfilename(::std::string&& value) {
  set_has_preview_cloudfilename();
  preview_cloudfilename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CPublishedFile_Publish_Request.preview_cloudfilename)
}
#endif
void CPublishedFile_Publish_Request::set_preview_cloudfilename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_preview_cloudfilename();
  preview_cloudfilename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CPublishedFile_Publish_Request.preview_cloudfilename)
}
void CPublishedFile_Publish_Request::set_preview_cloudfilename(const char* value, size_t size) {
  set_has_preview_cloudfilename();
  preview_cloudfilename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CPublishedFile_Publish_Request.preview_cloudfilename)
}
::std::string* CPublishedFile_Publish_Request::mutable_preview_cloudfilename() {
  set_has_preview_cloudfilename();
  // @@protoc_insertion_point(field_mutable:proto.steam.CPublishedFile_Publish_Request.preview_cloudfilename)
  return preview_cloudfilename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CPublishedFile_Publish_Request::release_preview_cloudfilename() {
  // @@protoc_insertion_point(field_release:proto.steam.CPublishedFile_Publish_Request.preview_cloudfilename)
  clear_has_preview_cloudfilename();
  return preview_cloudfilename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CPublishedFile_Publish_Request::set_allocated_preview_cloudfilename(::std::string* preview_cloudfilename) {
  if (preview_cloudfilename != NULL) {
    set_has_preview_cloudfilename();
  } else {
    clear_has_preview_cloudfilename();
  }
  preview_cloudfilename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), preview_cloudfilename);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CPublishedFile_Publish_Request.preview_cloudfilename)
}

// optional string title = 5 [(.proto.steam.description) = "Text title for the published file."];
bool CPublishedFile_Publish_Request::has_title() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CPublishedFile_Publish_Request::set_has_title() {
  _has_bits_[0] |= 0x00000004u;
}
void CPublishedFile_Publish_Request::clear_has_title() {
  _has_bits_[0] &= ~0x00000004u;
}
void CPublishedFile_Publish_Request::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
const ::std::string& CPublishedFile_Publish_Request::title() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_Publish_Request.title)
  return title_.GetNoArena();
}
void CPublishedFile_Publish_Request::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_Publish_Request.title)
}
#if LANG_CXX11
void CPublishedFile_Publish_Request::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CPublishedFile_Publish_Request.title)
}
#endif
void CPublishedFile_Publish_Request::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CPublishedFile_Publish_Request.title)
}
void CPublishedFile_Publish_Request::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CPublishedFile_Publish_Request.title)
}
::std::string* CPublishedFile_Publish_Request::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:proto.steam.CPublishedFile_Publish_Request.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CPublishedFile_Publish_Request::release_title() {
  // @@protoc_insertion_point(field_release:proto.steam.CPublishedFile_Publish_Request.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CPublishedFile_Publish_Request::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CPublishedFile_Publish_Request.title)
}

// optional string file_description = 6 [(.proto.steam.description) = "Text description for the published file."];
bool CPublishedFile_Publish_Request::has_file_description() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CPublishedFile_Publish_Request::set_has_file_description() {
  _has_bits_[0] |= 0x00000008u;
}
void CPublishedFile_Publish_Request::clear_has_file_description() {
  _has_bits_[0] &= ~0x00000008u;
}
void CPublishedFile_Publish_Request::clear_file_description() {
  file_description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_description();
}
const ::std::string& CPublishedFile_Publish_Request::file_description() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_Publish_Request.file_description)
  return file_description_.GetNoArena();
}
void CPublishedFile_Publish_Request::set_file_description(const ::std::string& value) {
  set_has_file_description();
  file_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_Publish_Request.file_description)
}
#if LANG_CXX11
void CPublishedFile_Publish_Request::set_file_description(::std::string&& value) {
  set_has_file_description();
  file_description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CPublishedFile_Publish_Request.file_description)
}
#endif
void CPublishedFile_Publish_Request::set_file_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_file_description();
  file_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CPublishedFile_Publish_Request.file_description)
}
void CPublishedFile_Publish_Request::set_file_description(const char* value, size_t size) {
  set_has_file_description();
  file_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CPublishedFile_Publish_Request.file_description)
}
::std::string* CPublishedFile_Publish_Request::mutable_file_description() {
  set_has_file_description();
  // @@protoc_insertion_point(field_mutable:proto.steam.CPublishedFile_Publish_Request.file_description)
  return file_description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CPublishedFile_Publish_Request::release_file_description() {
  // @@protoc_insertion_point(field_release:proto.steam.CPublishedFile_Publish_Request.file_description)
  clear_has_file_description();
  return file_description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CPublishedFile_Publish_Request::set_allocated_file_description(::std::string* file_description) {
  if (file_description != NULL) {
    set_has_file_description();
  } else {
    clear_has_file_description();
  }
  file_description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_description);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CPublishedFile_Publish_Request.file_description)
}

// optional uint32 file_type = 7 [(.proto.steam.description) = "(EWorkshopFileType) Type of Workshop file to publish."];
bool CPublishedFile_Publish_Request::has_file_type() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void CPublishedFile_Publish_Request::set_has_file_type() {
  _has_bits_[0] |= 0x00002000u;
}
void CPublishedFile_Publish_Request::clear_has_file_type() {
  _has_bits_[0] &= ~0x00002000u;
}
void CPublishedFile_Publish_Request::clear_file_type() {
  file_type_ = 0u;
  clear_has_file_type();
}
::google::protobuf::uint32 CPublishedFile_Publish_Request::file_type() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_Publish_Request.file_type)
  return file_type_;
}
void CPublishedFile_Publish_Request::set_file_type(::google::protobuf::uint32 value) {
  set_has_file_type();
  file_type_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_Publish_Request.file_type)
}

// optional string consumer_shortcut_name = 8 [(.proto.steam.description) = "Shortcut name for the published file."];
bool CPublishedFile_Publish_Request::has_consumer_shortcut_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CPublishedFile_Publish_Request::set_has_consumer_shortcut_name() {
  _has_bits_[0] |= 0x00000010u;
}
void CPublishedFile_Publish_Request::clear_has_consumer_shortcut_name() {
  _has_bits_[0] &= ~0x00000010u;
}
void CPublishedFile_Publish_Request::clear_consumer_shortcut_name() {
  consumer_shortcut_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_consumer_shortcut_name();
}
const ::std::string& CPublishedFile_Publish_Request::consumer_shortcut_name() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_Publish_Request.consumer_shortcut_name)
  return consumer_shortcut_name_.GetNoArena();
}
void CPublishedFile_Publish_Request::set_consumer_shortcut_name(const ::std::string& value) {
  set_has_consumer_shortcut_name();
  consumer_shortcut_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_Publish_Request.consumer_shortcut_name)
}
#if LANG_CXX11
void CPublishedFile_Publish_Request::set_consumer_shortcut_name(::std::string&& value) {
  set_has_consumer_shortcut_name();
  consumer_shortcut_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CPublishedFile_Publish_Request.consumer_shortcut_name)
}
#endif
void CPublishedFile_Publish_Request::set_consumer_shortcut_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_consumer_shortcut_name();
  consumer_shortcut_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CPublishedFile_Publish_Request.consumer_shortcut_name)
}
void CPublishedFile_Publish_Request::set_consumer_shortcut_name(const char* value, size_t size) {
  set_has_consumer_shortcut_name();
  consumer_shortcut_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CPublishedFile_Publish_Request.consumer_shortcut_name)
}
::std::string* CPublishedFile_Publish_Request::mutable_consumer_shortcut_name() {
  set_has_consumer_shortcut_name();
  // @@protoc_insertion_point(field_mutable:proto.steam.CPublishedFile_Publish_Request.consumer_shortcut_name)
  return consumer_shortcut_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CPublishedFile_Publish_Request::release_consumer_shortcut_name() {
  // @@protoc_insertion_point(field_release:proto.steam.CPublishedFile_Publish_Request.consumer_shortcut_name)
  clear_has_consumer_shortcut_name();
  return consumer_shortcut_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CPublishedFile_Publish_Request::set_allocated_consumer_shortcut_name(::std::string* consumer_shortcut_name) {
  if (consumer_shortcut_name != NULL) {
    set_has_consumer_shortcut_name();
  } else {
    clear_has_consumer_shortcut_name();
  }
  consumer_shortcut_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), consumer_shortcut_name);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CPublishedFile_Publish_Request.consumer_shortcut_name)
}

// optional string youtube_username = 9 [(.proto.steam.description) = "(Optional) User\'s YouTube account username."];
bool CPublishedFile_Publish_Request::has_youtube_username() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CPublishedFile_Publish_Request::set_has_youtube_username() {
  _has_bits_[0] |= 0x00000020u;
}
void CPublishedFile_Publish_Request::clear_has_youtube_username() {
  _has_bits_[0] &= ~0x00000020u;
}
void CPublishedFile_Publish_Request::clear_youtube_username() {
  youtube_username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_youtube_username();
}
const ::std::string& CPublishedFile_Publish_Request::youtube_username() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_Publish_Request.youtube_username)
  return youtube_username_.GetNoArena();
}
void CPublishedFile_Publish_Request::set_youtube_username(const ::std::string& value) {
  set_has_youtube_username();
  youtube_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_Publish_Request.youtube_username)
}
#if LANG_CXX11
void CPublishedFile_Publish_Request::set_youtube_username(::std::string&& value) {
  set_has_youtube_username();
  youtube_username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CPublishedFile_Publish_Request.youtube_username)
}
#endif
void CPublishedFile_Publish_Request::set_youtube_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_youtube_username();
  youtube_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CPublishedFile_Publish_Request.youtube_username)
}
void CPublishedFile_Publish_Request::set_youtube_username(const char* value, size_t size) {
  set_has_youtube_username();
  youtube_username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CPublishedFile_Publish_Request.youtube_username)
}
::std::string* CPublishedFile_Publish_Request::mutable_youtube_username() {
  set_has_youtube_username();
  // @@protoc_insertion_point(field_mutable:proto.steam.CPublishedFile_Publish_Request.youtube_username)
  return youtube_username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CPublishedFile_Publish_Request::release_youtube_username() {
  // @@protoc_insertion_point(field_release:proto.steam.CPublishedFile_Publish_Request.youtube_username)
  clear_has_youtube_username();
  return youtube_username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CPublishedFile_Publish_Request::set_allocated_youtube_username(::std::string* youtube_username) {
  if (youtube_username != NULL) {
    set_has_youtube_username();
  } else {
    clear_has_youtube_username();
  }
  youtube_username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), youtube_username);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CPublishedFile_Publish_Request.youtube_username)
}

// optional string youtube_videoid = 10 [(.proto.steam.description) = "(Optional) Video Id of a YouTube video for this published file."];
bool CPublishedFile_Publish_Request::has_youtube_videoid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CPublishedFile_Publish_Request::set_has_youtube_videoid() {
  _has_bits_[0] |= 0x00000040u;
}
void CPublishedFile_Publish_Request::clear_has_youtube_videoid() {
  _has_bits_[0] &= ~0x00000040u;
}
void CPublishedFile_Publish_Request::clear_youtube_videoid() {
  youtube_videoid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_youtube_videoid();
}
const ::std::string& CPublishedFile_Publish_Request::youtube_videoid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_Publish_Request.youtube_videoid)
  return youtube_videoid_.GetNoArena();
}
void CPublishedFile_Publish_Request::set_youtube_videoid(const ::std::string& value) {
  set_has_youtube_videoid();
  youtube_videoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_Publish_Request.youtube_videoid)
}
#if LANG_CXX11
void CPublishedFile_Publish_Request::set_youtube_videoid(::std::string&& value) {
  set_has_youtube_videoid();
  youtube_videoid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CPublishedFile_Publish_Request.youtube_videoid)
}
#endif
void CPublishedFile_Publish_Request::set_youtube_videoid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_youtube_videoid();
  youtube_videoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CPublishedFile_Publish_Request.youtube_videoid)
}
void CPublishedFile_Publish_Request::set_youtube_videoid(const char* value, size_t size) {
  set_has_youtube_videoid();
  youtube_videoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CPublishedFile_Publish_Request.youtube_videoid)
}
::std::string* CPublishedFile_Publish_Request::mutable_youtube_videoid() {
  set_has_youtube_videoid();
  // @@protoc_insertion_point(field_mutable:proto.steam.CPublishedFile_Publish_Request.youtube_videoid)
  return youtube_videoid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CPublishedFile_Publish_Request::release_youtube_videoid() {
  // @@protoc_insertion_point(field_release:proto.steam.CPublishedFile_Publish_Request.youtube_videoid)
  clear_has_youtube_videoid();
  return youtube_videoid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CPublishedFile_Publish_Request::set_allocated_youtube_videoid(::std::string* youtube_videoid) {
  if (youtube_videoid != NULL) {
    set_has_youtube_videoid();
  } else {
    clear_has_youtube_videoid();
  }
  youtube_videoid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), youtube_videoid);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CPublishedFile_Publish_Request.youtube_videoid)
}

// optional uint32 visibility = 11 [(.proto.steam.description) = "(ERemoteStoragePublishedFileVisibility) Visibility of the published file (private, friends, public, etc.)"];
bool CPublishedFile_Publish_Request::has_visibility() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void CPublishedFile_Publish_Request::set_has_visibility() {
  _has_bits_[0] |= 0x00004000u;
}
void CPublishedFile_Publish_Request::clear_has_visibility() {
  _has_bits_[0] &= ~0x00004000u;
}
void CPublishedFile_Publish_Request::clear_visibility() {
  visibility_ = 0u;
  clear_has_visibility();
}
::google::protobuf::uint32 CPublishedFile_Publish_Request::visibility() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_Publish_Request.visibility)
  return visibility_;
}
void CPublishedFile_Publish_Request::set_visibility(::google::protobuf::uint32 value) {
  set_has_visibility();
  visibility_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_Publish_Request.visibility)
}

// optional string redirect_uri = 12 [(.proto.steam.description) = "(Optional) If supplied, the resulting published file\'s Id is appended to the URI."];
bool CPublishedFile_Publish_Request::has_redirect_uri() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CPublishedFile_Publish_Request::set_has_redirect_uri() {
  _has_bits_[0] |= 0x00000080u;
}
void CPublishedFile_Publish_Request::clear_has_redirect_uri() {
  _has_bits_[0] &= ~0x00000080u;
}
void CPublishedFile_Publish_Request::clear_redirect_uri() {
  redirect_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_redirect_uri();
}
const ::std::string& CPublishedFile_Publish_Request::redirect_uri() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_Publish_Request.redirect_uri)
  return redirect_uri_.GetNoArena();
}
void CPublishedFile_Publish_Request::set_redirect_uri(const ::std::string& value) {
  set_has_redirect_uri();
  redirect_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_Publish_Request.redirect_uri)
}
#if LANG_CXX11
void CPublishedFile_Publish_Request::set_redirect_uri(::std::string&& value) {
  set_has_redirect_uri();
  redirect_uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CPublishedFile_Publish_Request.redirect_uri)
}
#endif
void CPublishedFile_Publish_Request::set_redirect_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_redirect_uri();
  redirect_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CPublishedFile_Publish_Request.redirect_uri)
}
void CPublishedFile_Publish_Request::set_redirect_uri(const char* value, size_t size) {
  set_has_redirect_uri();
  redirect_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CPublishedFile_Publish_Request.redirect_uri)
}
::std::string* CPublishedFile_Publish_Request::mutable_redirect_uri() {
  set_has_redirect_uri();
  // @@protoc_insertion_point(field_mutable:proto.steam.CPublishedFile_Publish_Request.redirect_uri)
  return redirect_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CPublishedFile_Publish_Request::release_redirect_uri() {
  // @@protoc_insertion_point(field_release:proto.steam.CPublishedFile_Publish_Request.redirect_uri)
  clear_has_redirect_uri();
  return redirect_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CPublishedFile_Publish_Request::set_allocated_redirect_uri(::std::string* redirect_uri) {
  if (redirect_uri != NULL) {
    set_has_redirect_uri();
  } else {
    clear_has_redirect_uri();
  }
  redirect_uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), redirect_uri);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CPublishedFile_Publish_Request.redirect_uri)
}

// repeated string tags = 13 [(.proto.steam.description) = "Array of text tags to apply to the published file."];
int CPublishedFile_Publish_Request::tags_size() const {
  return tags_.size();
}
void CPublishedFile_Publish_Request::clear_tags() {
  tags_.Clear();
}
const ::std::string& CPublishedFile_Publish_Request::tags(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_Publish_Request.tags)
  return tags_.Get(index);
}
::std::string* CPublishedFile_Publish_Request::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CPublishedFile_Publish_Request.tags)
  return tags_.Mutable(index);
}
void CPublishedFile_Publish_Request::set_tags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_Publish_Request.tags)
  tags_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void CPublishedFile_Publish_Request::set_tags(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_Publish_Request.tags)
  tags_.Mutable(index)->assign(std::move(value));
}
#endif
void CPublishedFile_Publish_Request::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.steam.CPublishedFile_Publish_Request.tags)
}
void CPublishedFile_Publish_Request::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CPublishedFile_Publish_Request.tags)
}
::std::string* CPublishedFile_Publish_Request::add_tags() {
  // @@protoc_insertion_point(field_add_mutable:proto.steam.CPublishedFile_Publish_Request.tags)
  return tags_.Add();
}
void CPublishedFile_Publish_Request::add_tags(const ::std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto.steam.CPublishedFile_Publish_Request.tags)
}
#if LANG_CXX11
void CPublishedFile_Publish_Request::add_tags(::std::string&& value) {
  tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:proto.steam.CPublishedFile_Publish_Request.tags)
}
#endif
void CPublishedFile_Publish_Request::add_tags(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto.steam.CPublishedFile_Publish_Request.tags)
}
void CPublishedFile_Publish_Request::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto.steam.CPublishedFile_Publish_Request.tags)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
CPublishedFile_Publish_Request::tags() const {
  // @@protoc_insertion_point(field_list:proto.steam.CPublishedFile_Publish_Request.tags)
  return tags_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
CPublishedFile_Publish_Request::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CPublishedFile_Publish_Request.tags)
  return &tags_;
}

// optional string collection_type = 14 [(.proto.steam.description) = "(Optional) Type of collection the published file represents."];
bool CPublishedFile_Publish_Request::has_collection_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CPublishedFile_Publish_Request::set_has_collection_type() {
  _has_bits_[0] |= 0x00000100u;
}
void CPublishedFile_Publish_Request::clear_has_collection_type() {
  _has_bits_[0] &= ~0x00000100u;
}
void CPublishedFile_Publish_Request::clear_collection_type() {
  collection_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_collection_type();
}
const ::std::string& CPublishedFile_Publish_Request::collection_type() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_Publish_Request.collection_type)
  return collection_type_.GetNoArena();
}
void CPublishedFile_Publish_Request::set_collection_type(const ::std::string& value) {
  set_has_collection_type();
  collection_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_Publish_Request.collection_type)
}
#if LANG_CXX11
void CPublishedFile_Publish_Request::set_collection_type(::std::string&& value) {
  set_has_collection_type();
  collection_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CPublishedFile_Publish_Request.collection_type)
}
#endif
void CPublishedFile_Publish_Request::set_collection_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_collection_type();
  collection_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CPublishedFile_Publish_Request.collection_type)
}
void CPublishedFile_Publish_Request::set_collection_type(const char* value, size_t size) {
  set_has_collection_type();
  collection_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CPublishedFile_Publish_Request.collection_type)
}
::std::string* CPublishedFile_Publish_Request::mutable_collection_type() {
  set_has_collection_type();
  // @@protoc_insertion_point(field_mutable:proto.steam.CPublishedFile_Publish_Request.collection_type)
  return collection_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CPublishedFile_Publish_Request::release_collection_type() {
  // @@protoc_insertion_point(field_release:proto.steam.CPublishedFile_Publish_Request.collection_type)
  clear_has_collection_type();
  return collection_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CPublishedFile_Publish_Request::set_allocated_collection_type(::std::string* collection_type) {
  if (collection_type != NULL) {
    set_has_collection_type();
  } else {
    clear_has_collection_type();
  }
  collection_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), collection_type);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CPublishedFile_Publish_Request.collection_type)
}

// optional string game_type = 15 [(.proto.steam.description) = "(Optional) Type of game the published file represents."];
bool CPublishedFile_Publish_Request::has_game_type() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CPublishedFile_Publish_Request::set_has_game_type() {
  _has_bits_[0] |= 0x00000200u;
}
void CPublishedFile_Publish_Request::clear_has_game_type() {
  _has_bits_[0] &= ~0x00000200u;
}
void CPublishedFile_Publish_Request::clear_game_type() {
  game_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_game_type();
}
const ::std::string& CPublishedFile_Publish_Request::game_type() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_Publish_Request.game_type)
  return game_type_.GetNoArena();
}
void CPublishedFile_Publish_Request::set_game_type(const ::std::string& value) {
  set_has_game_type();
  game_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_Publish_Request.game_type)
}
#if LANG_CXX11
void CPublishedFile_Publish_Request::set_game_type(::std::string&& value) {
  set_has_game_type();
  game_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CPublishedFile_Publish_Request.game_type)
}
#endif
void CPublishedFile_Publish_Request::set_game_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_game_type();
  game_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CPublishedFile_Publish_Request.game_type)
}
void CPublishedFile_Publish_Request::set_game_type(const char* value, size_t size) {
  set_has_game_type();
  game_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CPublishedFile_Publish_Request.game_type)
}
::std::string* CPublishedFile_Publish_Request::mutable_game_type() {
  set_has_game_type();
  // @@protoc_insertion_point(field_mutable:proto.steam.CPublishedFile_Publish_Request.game_type)
  return game_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CPublishedFile_Publish_Request::release_game_type() {
  // @@protoc_insertion_point(field_release:proto.steam.CPublishedFile_Publish_Request.game_type)
  clear_has_game_type();
  return game_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CPublishedFile_Publish_Request::set_allocated_game_type(::std::string* game_type) {
  if (game_type != NULL) {
    set_has_game_type();
  } else {
    clear_has_game_type();
  }
  game_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), game_type);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CPublishedFile_Publish_Request.game_type)
}

// optional string url = 16 [(.proto.steam.description) = "(Optional) If this represents a game, this is the URL to that game\'s page."];
bool CPublishedFile_Publish_Request::has_url() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CPublishedFile_Publish_Request::set_has_url() {
  _has_bits_[0] |= 0x00000400u;
}
void CPublishedFile_Publish_Request::clear_has_url() {
  _has_bits_[0] &= ~0x00000400u;
}
void CPublishedFile_Publish_Request::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& CPublishedFile_Publish_Request::url() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_Publish_Request.url)
  return url_.GetNoArena();
}
void CPublishedFile_Publish_Request::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_Publish_Request.url)
}
#if LANG_CXX11
void CPublishedFile_Publish_Request::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CPublishedFile_Publish_Request.url)
}
#endif
void CPublishedFile_Publish_Request::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CPublishedFile_Publish_Request.url)
}
void CPublishedFile_Publish_Request::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CPublishedFile_Publish_Request.url)
}
::std::string* CPublishedFile_Publish_Request::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:proto.steam.CPublishedFile_Publish_Request.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CPublishedFile_Publish_Request::release_url() {
  // @@protoc_insertion_point(field_release:proto.steam.CPublishedFile_Publish_Request.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CPublishedFile_Publish_Request::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CPublishedFile_Publish_Request.url)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPublishedFile_Publish_Response::kPublishedfileidFieldNumber;
const int CPublishedFile_Publish_Response::kRedirectUriFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPublishedFile_Publish_Response::CPublishedFile_Publish_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPublishedFile_Publish_Response)
}
CPublishedFile_Publish_Response::CPublishedFile_Publish_Response(const CPublishedFile_Publish_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  redirect_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_redirect_uri()) {
    redirect_uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.redirect_uri_);
  }
  publishedfileid_ = from.publishedfileid_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPublishedFile_Publish_Response)
}

void CPublishedFile_Publish_Response::SharedCtor() {
  _cached_size_ = 0;
  redirect_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  publishedfileid_ = GOOGLE_ULONGLONG(0);
}

CPublishedFile_Publish_Response::~CPublishedFile_Publish_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CPublishedFile_Publish_Response)
  SharedDtor();
}

void CPublishedFile_Publish_Response::SharedDtor() {
  redirect_uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CPublishedFile_Publish_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPublishedFile_Publish_Response::descriptor() {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CPublishedFile_Publish_Response& CPublishedFile_Publish_Response::default_instance() {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CPublishedFile_Publish_Response* CPublishedFile_Publish_Response::New(::google::protobuf::Arena* arena) const {
  CPublishedFile_Publish_Response* n = new CPublishedFile_Publish_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CPublishedFile_Publish_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPublishedFile_Publish_Response)
  if (has_redirect_uri()) {
    GOOGLE_DCHECK(!redirect_uri_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*redirect_uri_.UnsafeRawStringPointer())->clear();
  }
  publishedfileid_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CPublishedFile_Publish_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPublishedFile_Publish_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 publishedfileid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_publishedfileid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &publishedfileid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string redirect_uri = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_redirect_uri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->redirect_uri().data(), this->redirect_uri().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CPublishedFile_Publish_Response.redirect_uri");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPublishedFile_Publish_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPublishedFile_Publish_Response)
  return false;
#undef DO_
}

void CPublishedFile_Publish_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPublishedFile_Publish_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 publishedfileid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->publishedfileid(), output);
  }

  // optional string redirect_uri = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->redirect_uri().data(), this->redirect_uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPublishedFile_Publish_Response.redirect_uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->redirect_uri(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPublishedFile_Publish_Response)
}

::google::protobuf::uint8* CPublishedFile_Publish_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPublishedFile_Publish_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 publishedfileid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->publishedfileid(), target);
  }

  // optional string redirect_uri = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->redirect_uri().data(), this->redirect_uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPublishedFile_Publish_Response.redirect_uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->redirect_uri(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPublishedFile_Publish_Response)
  return target;
}

size_t CPublishedFile_Publish_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPublishedFile_Publish_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string redirect_uri = 2;
    if (has_redirect_uri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->redirect_uri());
    }

    // optional uint64 publishedfileid = 1;
    if (has_publishedfileid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->publishedfileid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPublishedFile_Publish_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPublishedFile_Publish_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CPublishedFile_Publish_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CPublishedFile_Publish_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPublishedFile_Publish_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPublishedFile_Publish_Response)
    MergeFrom(*source);
  }
}

void CPublishedFile_Publish_Response::MergeFrom(const CPublishedFile_Publish_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPublishedFile_Publish_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_redirect_uri();
      redirect_uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.redirect_uri_);
    }
    if (cached_has_bits & 0x00000002u) {
      publishedfileid_ = from.publishedfileid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CPublishedFile_Publish_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPublishedFile_Publish_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPublishedFile_Publish_Response::CopyFrom(const CPublishedFile_Publish_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPublishedFile_Publish_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_Publish_Response::IsInitialized() const {
  return true;
}

void CPublishedFile_Publish_Response::Swap(CPublishedFile_Publish_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPublishedFile_Publish_Response::InternalSwap(CPublishedFile_Publish_Response* other) {
  redirect_uri_.Swap(&other->redirect_uri_);
  std::swap(publishedfileid_, other->publishedfileid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CPublishedFile_Publish_Response::GetMetadata() const {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CPublishedFile_Publish_Response

// optional uint64 publishedfileid = 1;
bool CPublishedFile_Publish_Response::has_publishedfileid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CPublishedFile_Publish_Response::set_has_publishedfileid() {
  _has_bits_[0] |= 0x00000002u;
}
void CPublishedFile_Publish_Response::clear_has_publishedfileid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CPublishedFile_Publish_Response::clear_publishedfileid() {
  publishedfileid_ = GOOGLE_ULONGLONG(0);
  clear_has_publishedfileid();
}
::google::protobuf::uint64 CPublishedFile_Publish_Response::publishedfileid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_Publish_Response.publishedfileid)
  return publishedfileid_;
}
void CPublishedFile_Publish_Response::set_publishedfileid(::google::protobuf::uint64 value) {
  set_has_publishedfileid();
  publishedfileid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_Publish_Response.publishedfileid)
}

// optional string redirect_uri = 2;
bool CPublishedFile_Publish_Response::has_redirect_uri() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CPublishedFile_Publish_Response::set_has_redirect_uri() {
  _has_bits_[0] |= 0x00000001u;
}
void CPublishedFile_Publish_Response::clear_has_redirect_uri() {
  _has_bits_[0] &= ~0x00000001u;
}
void CPublishedFile_Publish_Response::clear_redirect_uri() {
  redirect_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_redirect_uri();
}
const ::std::string& CPublishedFile_Publish_Response::redirect_uri() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_Publish_Response.redirect_uri)
  return redirect_uri_.GetNoArena();
}
void CPublishedFile_Publish_Response::set_redirect_uri(const ::std::string& value) {
  set_has_redirect_uri();
  redirect_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_Publish_Response.redirect_uri)
}
#if LANG_CXX11
void CPublishedFile_Publish_Response::set_redirect_uri(::std::string&& value) {
  set_has_redirect_uri();
  redirect_uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CPublishedFile_Publish_Response.redirect_uri)
}
#endif
void CPublishedFile_Publish_Response::set_redirect_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_redirect_uri();
  redirect_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CPublishedFile_Publish_Response.redirect_uri)
}
void CPublishedFile_Publish_Response::set_redirect_uri(const char* value, size_t size) {
  set_has_redirect_uri();
  redirect_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CPublishedFile_Publish_Response.redirect_uri)
}
::std::string* CPublishedFile_Publish_Response::mutable_redirect_uri() {
  set_has_redirect_uri();
  // @@protoc_insertion_point(field_mutable:proto.steam.CPublishedFile_Publish_Response.redirect_uri)
  return redirect_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CPublishedFile_Publish_Response::release_redirect_uri() {
  // @@protoc_insertion_point(field_release:proto.steam.CPublishedFile_Publish_Response.redirect_uri)
  clear_has_redirect_uri();
  return redirect_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CPublishedFile_Publish_Response::set_allocated_redirect_uri(::std::string* redirect_uri) {
  if (redirect_uri != NULL) {
    set_has_redirect_uri();
  } else {
    clear_has_redirect_uri();
  }
  redirect_uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), redirect_uri);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CPublishedFile_Publish_Response.redirect_uri)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPublishedFile_GetDetails_Request::kPublishedfileidsFieldNumber;
const int CPublishedFile_GetDetails_Request::kIncludetagsFieldNumber;
const int CPublishedFile_GetDetails_Request::kIncludeadditionalpreviewsFieldNumber;
const int CPublishedFile_GetDetails_Request::kIncludechildrenFieldNumber;
const int CPublishedFile_GetDetails_Request::kIncludekvtagsFieldNumber;
const int CPublishedFile_GetDetails_Request::kIncludevotesFieldNumber;
const int CPublishedFile_GetDetails_Request::kShortDescriptionFieldNumber;
const int CPublishedFile_GetDetails_Request::kIncludeforsaledataFieldNumber;
const int CPublishedFile_GetDetails_Request::kIncludemetadataFieldNumber;
const int CPublishedFile_GetDetails_Request::kLanguageFieldNumber;
const int CPublishedFile_GetDetails_Request::kReturnPlaytimeStatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPublishedFile_GetDetails_Request::CPublishedFile_GetDetails_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPublishedFile_GetDetails_Request)
}
CPublishedFile_GetDetails_Request::CPublishedFile_GetDetails_Request(const CPublishedFile_GetDetails_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      publishedfileids_(from.publishedfileids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&includetags_, &from.includetags_,
    reinterpret_cast<char*>(&return_playtime_stats_) -
    reinterpret_cast<char*>(&includetags_) + sizeof(return_playtime_stats_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPublishedFile_GetDetails_Request)
}

void CPublishedFile_GetDetails_Request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&includetags_, 0, reinterpret_cast<char*>(&return_playtime_stats_) -
    reinterpret_cast<char*>(&includetags_) + sizeof(return_playtime_stats_));
}

CPublishedFile_GetDetails_Request::~CPublishedFile_GetDetails_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CPublishedFile_GetDetails_Request)
  SharedDtor();
}

void CPublishedFile_GetDetails_Request::SharedDtor() {
}

void CPublishedFile_GetDetails_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPublishedFile_GetDetails_Request::descriptor() {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CPublishedFile_GetDetails_Request& CPublishedFile_GetDetails_Request::default_instance() {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CPublishedFile_GetDetails_Request* CPublishedFile_GetDetails_Request::New(::google::protobuf::Arena* arena) const {
  CPublishedFile_GetDetails_Request* n = new CPublishedFile_GetDetails_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CPublishedFile_GetDetails_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPublishedFile_GetDetails_Request)
  publishedfileids_.Clear();
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&includetags_, 0, reinterpret_cast<char*>(&includemetadata_) -
      reinterpret_cast<char*>(&includetags_) + sizeof(includemetadata_));
  }
  if (_has_bits_[8 / 32] & 768u) {
    ::memset(&language_, 0, reinterpret_cast<char*>(&return_playtime_stats_) -
      reinterpret_cast<char*>(&language_) + sizeof(return_playtime_stats_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CPublishedFile_GetDetails_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPublishedFile_GetDetails_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated fixed64 publishedfileids = 1 [(.proto.steam.description) = "Set of published file Ids to retrieve details for."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 9u, input, this->mutable_publishedfileids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_publishedfileids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool includetags = 2 [(.proto.steam.description) = "If true, return tag information in the returned details."];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_includetags();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &includetags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool includeadditionalpreviews = 3 [(.proto.steam.description) = "If true, return preview information in the returned details."];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_includeadditionalpreviews();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &includeadditionalpreviews_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool includechildren = 4 [(.proto.steam.description) = "If true, return children in the returned details."];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_includechildren();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &includechildren_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool includekvtags = 5 [(.proto.steam.description) = "If true, return key value tags in the returned details."];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_includekvtags();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &includekvtags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool includevotes = 6 [(.proto.steam.description) = "If true, return vote data in the returned details."];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_includevotes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &includevotes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool short_description = 8 [(.proto.steam.description) = "If true, return a short description instead of the full description."];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_short_description();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &short_description_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool includeforsaledata = 10 [(.proto.steam.description) = "If true, return pricing data, if applicable."];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_includeforsaledata();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &includeforsaledata_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool includemetadata = 11 [(.proto.steam.description) = "If true, populate the metadata field."];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_includemetadata();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &includemetadata_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 language = 12 [default = 0, (.proto.steam.description) = "Specifies the localized text to return. Defaults to English."];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_language();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &language_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 return_playtime_stats = 13 [(.proto.steam.description) = "Return playtime stats for the specified number of days before today."];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_return_playtime_stats();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &return_playtime_stats_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPublishedFile_GetDetails_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPublishedFile_GetDetails_Request)
  return false;
#undef DO_
}

void CPublishedFile_GetDetails_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPublishedFile_GetDetails_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated fixed64 publishedfileids = 1 [(.proto.steam.description) = "Set of published file Ids to retrieve details for."];
  for (int i = 0, n = this->publishedfileids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      1, this->publishedfileids(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool includetags = 2 [(.proto.steam.description) = "If true, return tag information in the returned details."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->includetags(), output);
  }

  // optional bool includeadditionalpreviews = 3 [(.proto.steam.description) = "If true, return preview information in the returned details."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->includeadditionalpreviews(), output);
  }

  // optional bool includechildren = 4 [(.proto.steam.description) = "If true, return children in the returned details."];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->includechildren(), output);
  }

  // optional bool includekvtags = 5 [(.proto.steam.description) = "If true, return key value tags in the returned details."];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->includekvtags(), output);
  }

  // optional bool includevotes = 6 [(.proto.steam.description) = "If true, return vote data in the returned details."];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->includevotes(), output);
  }

  // optional bool short_description = 8 [(.proto.steam.description) = "If true, return a short description instead of the full description."];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->short_description(), output);
  }

  // optional bool includeforsaledata = 10 [(.proto.steam.description) = "If true, return pricing data, if applicable."];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->includeforsaledata(), output);
  }

  // optional bool includemetadata = 11 [(.proto.steam.description) = "If true, populate the metadata field."];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->includemetadata(), output);
  }

  // optional int32 language = 12 [default = 0, (.proto.steam.description) = "Specifies the localized text to return. Defaults to English."];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->language(), output);
  }

  // optional uint32 return_playtime_stats = 13 [(.proto.steam.description) = "Return playtime stats for the specified number of days before today."];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->return_playtime_stats(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPublishedFile_GetDetails_Request)
}

::google::protobuf::uint8* CPublishedFile_GetDetails_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPublishedFile_GetDetails_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated fixed64 publishedfileids = 1 [(.proto.steam.description) = "Set of published file Ids to retrieve details for."];
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFixed64ToArray(1, this->publishedfileids_, target);

  cached_has_bits = _has_bits_[0];
  // optional bool includetags = 2 [(.proto.steam.description) = "If true, return tag information in the returned details."];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->includetags(), target);
  }

  // optional bool includeadditionalpreviews = 3 [(.proto.steam.description) = "If true, return preview information in the returned details."];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->includeadditionalpreviews(), target);
  }

  // optional bool includechildren = 4 [(.proto.steam.description) = "If true, return children in the returned details."];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->includechildren(), target);
  }

  // optional bool includekvtags = 5 [(.proto.steam.description) = "If true, return key value tags in the returned details."];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->includekvtags(), target);
  }

  // optional bool includevotes = 6 [(.proto.steam.description) = "If true, return vote data in the returned details."];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->includevotes(), target);
  }

  // optional bool short_description = 8 [(.proto.steam.description) = "If true, return a short description instead of the full description."];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->short_description(), target);
  }

  // optional bool includeforsaledata = 10 [(.proto.steam.description) = "If true, return pricing data, if applicable."];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->includeforsaledata(), target);
  }

  // optional bool includemetadata = 11 [(.proto.steam.description) = "If true, populate the metadata field."];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->includemetadata(), target);
  }

  // optional int32 language = 12 [default = 0, (.proto.steam.description) = "Specifies the localized text to return. Defaults to English."];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->language(), target);
  }

  // optional uint32 return_playtime_stats = 13 [(.proto.steam.description) = "Return playtime stats for the specified number of days before today."];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->return_playtime_stats(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPublishedFile_GetDetails_Request)
  return target;
}

size_t CPublishedFile_GetDetails_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPublishedFile_GetDetails_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated fixed64 publishedfileids = 1 [(.proto.steam.description) = "Set of published file Ids to retrieve details for."];
  {
    unsigned int count = this->publishedfileids_size();
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->publishedfileids_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional bool includetags = 2 [(.proto.steam.description) = "If true, return tag information in the returned details."];
    if (has_includetags()) {
      total_size += 1 + 1;
    }

    // optional bool includeadditionalpreviews = 3 [(.proto.steam.description) = "If true, return preview information in the returned details."];
    if (has_includeadditionalpreviews()) {
      total_size += 1 + 1;
    }

    // optional bool includechildren = 4 [(.proto.steam.description) = "If true, return children in the returned details."];
    if (has_includechildren()) {
      total_size += 1 + 1;
    }

    // optional bool includekvtags = 5 [(.proto.steam.description) = "If true, return key value tags in the returned details."];
    if (has_includekvtags()) {
      total_size += 1 + 1;
    }

    // optional bool includevotes = 6 [(.proto.steam.description) = "If true, return vote data in the returned details."];
    if (has_includevotes()) {
      total_size += 1 + 1;
    }

    // optional bool short_description = 8 [(.proto.steam.description) = "If true, return a short description instead of the full description."];
    if (has_short_description()) {
      total_size += 1 + 1;
    }

    // optional bool includeforsaledata = 10 [(.proto.steam.description) = "If true, return pricing data, if applicable."];
    if (has_includeforsaledata()) {
      total_size += 1 + 1;
    }

    // optional bool includemetadata = 11 [(.proto.steam.description) = "If true, populate the metadata field."];
    if (has_includemetadata()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional int32 language = 12 [default = 0, (.proto.steam.description) = "Specifies the localized text to return. Defaults to English."];
    if (has_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->language());
    }

    // optional uint32 return_playtime_stats = 13 [(.proto.steam.description) = "Return playtime stats for the specified number of days before today."];
    if (has_return_playtime_stats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->return_playtime_stats());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPublishedFile_GetDetails_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPublishedFile_GetDetails_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CPublishedFile_GetDetails_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CPublishedFile_GetDetails_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPublishedFile_GetDetails_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPublishedFile_GetDetails_Request)
    MergeFrom(*source);
  }
}

void CPublishedFile_GetDetails_Request::MergeFrom(const CPublishedFile_GetDetails_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPublishedFile_GetDetails_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  publishedfileids_.MergeFrom(from.publishedfileids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      includetags_ = from.includetags_;
    }
    if (cached_has_bits & 0x00000002u) {
      includeadditionalpreviews_ = from.includeadditionalpreviews_;
    }
    if (cached_has_bits & 0x00000004u) {
      includechildren_ = from.includechildren_;
    }
    if (cached_has_bits & 0x00000008u) {
      includekvtags_ = from.includekvtags_;
    }
    if (cached_has_bits & 0x00000010u) {
      includevotes_ = from.includevotes_;
    }
    if (cached_has_bits & 0x00000020u) {
      short_description_ = from.short_description_;
    }
    if (cached_has_bits & 0x00000040u) {
      includeforsaledata_ = from.includeforsaledata_;
    }
    if (cached_has_bits & 0x00000080u) {
      includemetadata_ = from.includemetadata_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      language_ = from.language_;
    }
    if (cached_has_bits & 0x00000200u) {
      return_playtime_stats_ = from.return_playtime_stats_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CPublishedFile_GetDetails_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPublishedFile_GetDetails_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPublishedFile_GetDetails_Request::CopyFrom(const CPublishedFile_GetDetails_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPublishedFile_GetDetails_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_GetDetails_Request::IsInitialized() const {
  return true;
}

void CPublishedFile_GetDetails_Request::Swap(CPublishedFile_GetDetails_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPublishedFile_GetDetails_Request::InternalSwap(CPublishedFile_GetDetails_Request* other) {
  publishedfileids_.InternalSwap(&other->publishedfileids_);
  std::swap(includetags_, other->includetags_);
  std::swap(includeadditionalpreviews_, other->includeadditionalpreviews_);
  std::swap(includechildren_, other->includechildren_);
  std::swap(includekvtags_, other->includekvtags_);
  std::swap(includevotes_, other->includevotes_);
  std::swap(short_description_, other->short_description_);
  std::swap(includeforsaledata_, other->includeforsaledata_);
  std::swap(includemetadata_, other->includemetadata_);
  std::swap(language_, other->language_);
  std::swap(return_playtime_stats_, other->return_playtime_stats_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CPublishedFile_GetDetails_Request::GetMetadata() const {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CPublishedFile_GetDetails_Request

// repeated fixed64 publishedfileids = 1 [(.proto.steam.description) = "Set of published file Ids to retrieve details for."];
int CPublishedFile_GetDetails_Request::publishedfileids_size() const {
  return publishedfileids_.size();
}
void CPublishedFile_GetDetails_Request::clear_publishedfileids() {
  publishedfileids_.Clear();
}
::google::protobuf::uint64 CPublishedFile_GetDetails_Request::publishedfileids(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_GetDetails_Request.publishedfileids)
  return publishedfileids_.Get(index);
}
void CPublishedFile_GetDetails_Request::set_publishedfileids(int index, ::google::protobuf::uint64 value) {
  publishedfileids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_GetDetails_Request.publishedfileids)
}
void CPublishedFile_GetDetails_Request::add_publishedfileids(::google::protobuf::uint64 value) {
  publishedfileids_.Add(value);
  // @@protoc_insertion_point(field_add:proto.steam.CPublishedFile_GetDetails_Request.publishedfileids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CPublishedFile_GetDetails_Request::publishedfileids() const {
  // @@protoc_insertion_point(field_list:proto.steam.CPublishedFile_GetDetails_Request.publishedfileids)
  return publishedfileids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CPublishedFile_GetDetails_Request::mutable_publishedfileids() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CPublishedFile_GetDetails_Request.publishedfileids)
  return &publishedfileids_;
}

// optional bool includetags = 2 [(.proto.steam.description) = "If true, return tag information in the returned details."];
bool CPublishedFile_GetDetails_Request::has_includetags() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CPublishedFile_GetDetails_Request::set_has_includetags() {
  _has_bits_[0] |= 0x00000001u;
}
void CPublishedFile_GetDetails_Request::clear_has_includetags() {
  _has_bits_[0] &= ~0x00000001u;
}
void CPublishedFile_GetDetails_Request::clear_includetags() {
  includetags_ = false;
  clear_has_includetags();
}
bool CPublishedFile_GetDetails_Request::includetags() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_GetDetails_Request.includetags)
  return includetags_;
}
void CPublishedFile_GetDetails_Request::set_includetags(bool value) {
  set_has_includetags();
  includetags_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_GetDetails_Request.includetags)
}

// optional bool includeadditionalpreviews = 3 [(.proto.steam.description) = "If true, return preview information in the returned details."];
bool CPublishedFile_GetDetails_Request::has_includeadditionalpreviews() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CPublishedFile_GetDetails_Request::set_has_includeadditionalpreviews() {
  _has_bits_[0] |= 0x00000002u;
}
void CPublishedFile_GetDetails_Request::clear_has_includeadditionalpreviews() {
  _has_bits_[0] &= ~0x00000002u;
}
void CPublishedFile_GetDetails_Request::clear_includeadditionalpreviews() {
  includeadditionalpreviews_ = false;
  clear_has_includeadditionalpreviews();
}
bool CPublishedFile_GetDetails_Request::includeadditionalpreviews() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_GetDetails_Request.includeadditionalpreviews)
  return includeadditionalpreviews_;
}
void CPublishedFile_GetDetails_Request::set_includeadditionalpreviews(bool value) {
  set_has_includeadditionalpreviews();
  includeadditionalpreviews_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_GetDetails_Request.includeadditionalpreviews)
}

// optional bool includechildren = 4 [(.proto.steam.description) = "If true, return children in the returned details."];
bool CPublishedFile_GetDetails_Request::has_includechildren() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CPublishedFile_GetDetails_Request::set_has_includechildren() {
  _has_bits_[0] |= 0x00000004u;
}
void CPublishedFile_GetDetails_Request::clear_has_includechildren() {
  _has_bits_[0] &= ~0x00000004u;
}
void CPublishedFile_GetDetails_Request::clear_includechildren() {
  includechildren_ = false;
  clear_has_includechildren();
}
bool CPublishedFile_GetDetails_Request::includechildren() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_GetDetails_Request.includechildren)
  return includechildren_;
}
void CPublishedFile_GetDetails_Request::set_includechildren(bool value) {
  set_has_includechildren();
  includechildren_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_GetDetails_Request.includechildren)
}

// optional bool includekvtags = 5 [(.proto.steam.description) = "If true, return key value tags in the returned details."];
bool CPublishedFile_GetDetails_Request::has_includekvtags() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CPublishedFile_GetDetails_Request::set_has_includekvtags() {
  _has_bits_[0] |= 0x00000008u;
}
void CPublishedFile_GetDetails_Request::clear_has_includekvtags() {
  _has_bits_[0] &= ~0x00000008u;
}
void CPublishedFile_GetDetails_Request::clear_includekvtags() {
  includekvtags_ = false;
  clear_has_includekvtags();
}
bool CPublishedFile_GetDetails_Request::includekvtags() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_GetDetails_Request.includekvtags)
  return includekvtags_;
}
void CPublishedFile_GetDetails_Request::set_includekvtags(bool value) {
  set_has_includekvtags();
  includekvtags_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_GetDetails_Request.includekvtags)
}

// optional bool includevotes = 6 [(.proto.steam.description) = "If true, return vote data in the returned details."];
bool CPublishedFile_GetDetails_Request::has_includevotes() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CPublishedFile_GetDetails_Request::set_has_includevotes() {
  _has_bits_[0] |= 0x00000010u;
}
void CPublishedFile_GetDetails_Request::clear_has_includevotes() {
  _has_bits_[0] &= ~0x00000010u;
}
void CPublishedFile_GetDetails_Request::clear_includevotes() {
  includevotes_ = false;
  clear_has_includevotes();
}
bool CPublishedFile_GetDetails_Request::includevotes() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_GetDetails_Request.includevotes)
  return includevotes_;
}
void CPublishedFile_GetDetails_Request::set_includevotes(bool value) {
  set_has_includevotes();
  includevotes_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_GetDetails_Request.includevotes)
}

// optional bool short_description = 8 [(.proto.steam.description) = "If true, return a short description instead of the full description."];
bool CPublishedFile_GetDetails_Request::has_short_description() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CPublishedFile_GetDetails_Request::set_has_short_description() {
  _has_bits_[0] |= 0x00000020u;
}
void CPublishedFile_GetDetails_Request::clear_has_short_description() {
  _has_bits_[0] &= ~0x00000020u;
}
void CPublishedFile_GetDetails_Request::clear_short_description() {
  short_description_ = false;
  clear_has_short_description();
}
bool CPublishedFile_GetDetails_Request::short_description() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_GetDetails_Request.short_description)
  return short_description_;
}
void CPublishedFile_GetDetails_Request::set_short_description(bool value) {
  set_has_short_description();
  short_description_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_GetDetails_Request.short_description)
}

// optional bool includeforsaledata = 10 [(.proto.steam.description) = "If true, return pricing data, if applicable."];
bool CPublishedFile_GetDetails_Request::has_includeforsaledata() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CPublishedFile_GetDetails_Request::set_has_includeforsaledata() {
  _has_bits_[0] |= 0x00000040u;
}
void CPublishedFile_GetDetails_Request::clear_has_includeforsaledata() {
  _has_bits_[0] &= ~0x00000040u;
}
void CPublishedFile_GetDetails_Request::clear_includeforsaledata() {
  includeforsaledata_ = false;
  clear_has_includeforsaledata();
}
bool CPublishedFile_GetDetails_Request::includeforsaledata() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_GetDetails_Request.includeforsaledata)
  return includeforsaledata_;
}
void CPublishedFile_GetDetails_Request::set_includeforsaledata(bool value) {
  set_has_includeforsaledata();
  includeforsaledata_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_GetDetails_Request.includeforsaledata)
}

// optional bool includemetadata = 11 [(.proto.steam.description) = "If true, populate the metadata field."];
bool CPublishedFile_GetDetails_Request::has_includemetadata() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CPublishedFile_GetDetails_Request::set_has_includemetadata() {
  _has_bits_[0] |= 0x00000080u;
}
void CPublishedFile_GetDetails_Request::clear_has_includemetadata() {
  _has_bits_[0] &= ~0x00000080u;
}
void CPublishedFile_GetDetails_Request::clear_includemetadata() {
  includemetadata_ = false;
  clear_has_includemetadata();
}
bool CPublishedFile_GetDetails_Request::includemetadata() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_GetDetails_Request.includemetadata)
  return includemetadata_;
}
void CPublishedFile_GetDetails_Request::set_includemetadata(bool value) {
  set_has_includemetadata();
  includemetadata_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_GetDetails_Request.includemetadata)
}

// optional int32 language = 12 [default = 0, (.proto.steam.description) = "Specifies the localized text to return. Defaults to English."];
bool CPublishedFile_GetDetails_Request::has_language() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CPublishedFile_GetDetails_Request::set_has_language() {
  _has_bits_[0] |= 0x00000100u;
}
void CPublishedFile_GetDetails_Request::clear_has_language() {
  _has_bits_[0] &= ~0x00000100u;
}
void CPublishedFile_GetDetails_Request::clear_language() {
  language_ = 0;
  clear_has_language();
}
::google::protobuf::int32 CPublishedFile_GetDetails_Request::language() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_GetDetails_Request.language)
  return language_;
}
void CPublishedFile_GetDetails_Request::set_language(::google::protobuf::int32 value) {
  set_has_language();
  language_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_GetDetails_Request.language)
}

// optional uint32 return_playtime_stats = 13 [(.proto.steam.description) = "Return playtime stats for the specified number of days before today."];
bool CPublishedFile_GetDetails_Request::has_return_playtime_stats() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CPublishedFile_GetDetails_Request::set_has_return_playtime_stats() {
  _has_bits_[0] |= 0x00000200u;
}
void CPublishedFile_GetDetails_Request::clear_has_return_playtime_stats() {
  _has_bits_[0] &= ~0x00000200u;
}
void CPublishedFile_GetDetails_Request::clear_return_playtime_stats() {
  return_playtime_stats_ = 0u;
  clear_has_return_playtime_stats();
}
::google::protobuf::uint32 CPublishedFile_GetDetails_Request::return_playtime_stats() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_GetDetails_Request.return_playtime_stats)
  return return_playtime_stats_;
}
void CPublishedFile_GetDetails_Request::set_return_playtime_stats(::google::protobuf::uint32 value) {
  set_has_return_playtime_stats();
  return_playtime_stats_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_GetDetails_Request.return_playtime_stats)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PublishedFileDetails_Tag::kTagFieldNumber;
const int PublishedFileDetails_Tag::kAdminonlyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PublishedFileDetails_Tag::PublishedFileDetails_Tag()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.PublishedFileDetails.Tag)
}
PublishedFileDetails_Tag::PublishedFileDetails_Tag(const PublishedFileDetails_Tag& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tag()) {
    tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag_);
  }
  adminonly_ = from.adminonly_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.PublishedFileDetails.Tag)
}

void PublishedFileDetails_Tag::SharedCtor() {
  _cached_size_ = 0;
  tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  adminonly_ = false;
}

PublishedFileDetails_Tag::~PublishedFileDetails_Tag() {
  // @@protoc_insertion_point(destructor:proto.steam.PublishedFileDetails.Tag)
  SharedDtor();
}

void PublishedFileDetails_Tag::SharedDtor() {
  tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PublishedFileDetails_Tag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PublishedFileDetails_Tag::descriptor() {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PublishedFileDetails_Tag& PublishedFileDetails_Tag::default_instance() {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

PublishedFileDetails_Tag* PublishedFileDetails_Tag::New(::google::protobuf::Arena* arena) const {
  PublishedFileDetails_Tag* n = new PublishedFileDetails_Tag;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PublishedFileDetails_Tag::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.PublishedFileDetails.Tag)
  if (has_tag()) {
    GOOGLE_DCHECK(!tag_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*tag_.UnsafeRawStringPointer())->clear();
  }
  adminonly_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PublishedFileDetails_Tag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.PublishedFileDetails.Tag)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string tag = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tag().data(), this->tag().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.PublishedFileDetails.Tag.tag");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool adminonly = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_adminonly();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &adminonly_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.PublishedFileDetails.Tag)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.PublishedFileDetails.Tag)
  return false;
#undef DO_
}

void PublishedFileDetails_Tag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.PublishedFileDetails.Tag)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string tag = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag().data(), this->tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.PublishedFileDetails.Tag.tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tag(), output);
  }

  // optional bool adminonly = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->adminonly(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.PublishedFileDetails.Tag)
}

::google::protobuf::uint8* PublishedFileDetails_Tag::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.PublishedFileDetails.Tag)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string tag = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag().data(), this->tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.PublishedFileDetails.Tag.tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tag(), target);
  }

  // optional bool adminonly = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->adminonly(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.PublishedFileDetails.Tag)
  return target;
}

size_t PublishedFileDetails_Tag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.PublishedFileDetails.Tag)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string tag = 1;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tag());
    }

    // optional bool adminonly = 2;
    if (has_adminonly()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PublishedFileDetails_Tag::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.PublishedFileDetails.Tag)
  GOOGLE_DCHECK_NE(&from, this);
  const PublishedFileDetails_Tag* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PublishedFileDetails_Tag>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.PublishedFileDetails.Tag)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.PublishedFileDetails.Tag)
    MergeFrom(*source);
  }
}

void PublishedFileDetails_Tag::MergeFrom(const PublishedFileDetails_Tag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.PublishedFileDetails.Tag)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_tag();
      tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag_);
    }
    if (cached_has_bits & 0x00000002u) {
      adminonly_ = from.adminonly_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PublishedFileDetails_Tag::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.PublishedFileDetails.Tag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishedFileDetails_Tag::CopyFrom(const PublishedFileDetails_Tag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.PublishedFileDetails.Tag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishedFileDetails_Tag::IsInitialized() const {
  return true;
}

void PublishedFileDetails_Tag::Swap(PublishedFileDetails_Tag* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PublishedFileDetails_Tag::InternalSwap(PublishedFileDetails_Tag* other) {
  tag_.Swap(&other->tag_);
  std::swap(adminonly_, other->adminonly_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PublishedFileDetails_Tag::GetMetadata() const {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PublishedFileDetails_Tag

// optional string tag = 1;
bool PublishedFileDetails_Tag::has_tag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PublishedFileDetails_Tag::set_has_tag() {
  _has_bits_[0] |= 0x00000001u;
}
void PublishedFileDetails_Tag::clear_has_tag() {
  _has_bits_[0] &= ~0x00000001u;
}
void PublishedFileDetails_Tag::clear_tag() {
  tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tag();
}
const ::std::string& PublishedFileDetails_Tag::tag() const {
  // @@protoc_insertion_point(field_get:proto.steam.PublishedFileDetails.Tag.tag)
  return tag_.GetNoArena();
}
void PublishedFileDetails_Tag::set_tag(const ::std::string& value) {
  set_has_tag();
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.PublishedFileDetails.Tag.tag)
}
#if LANG_CXX11
void PublishedFileDetails_Tag::set_tag(::std::string&& value) {
  set_has_tag();
  tag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.PublishedFileDetails.Tag.tag)
}
#endif
void PublishedFileDetails_Tag::set_tag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tag();
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.PublishedFileDetails.Tag.tag)
}
void PublishedFileDetails_Tag::set_tag(const char* value, size_t size) {
  set_has_tag();
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.PublishedFileDetails.Tag.tag)
}
::std::string* PublishedFileDetails_Tag::mutable_tag() {
  set_has_tag();
  // @@protoc_insertion_point(field_mutable:proto.steam.PublishedFileDetails.Tag.tag)
  return tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PublishedFileDetails_Tag::release_tag() {
  // @@protoc_insertion_point(field_release:proto.steam.PublishedFileDetails.Tag.tag)
  clear_has_tag();
  return tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PublishedFileDetails_Tag::set_allocated_tag(::std::string* tag) {
  if (tag != NULL) {
    set_has_tag();
  } else {
    clear_has_tag();
  }
  tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tag);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.PublishedFileDetails.Tag.tag)
}

// optional bool adminonly = 2;
bool PublishedFileDetails_Tag::has_adminonly() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PublishedFileDetails_Tag::set_has_adminonly() {
  _has_bits_[0] |= 0x00000002u;
}
void PublishedFileDetails_Tag::clear_has_adminonly() {
  _has_bits_[0] &= ~0x00000002u;
}
void PublishedFileDetails_Tag::clear_adminonly() {
  adminonly_ = false;
  clear_has_adminonly();
}
bool PublishedFileDetails_Tag::adminonly() const {
  // @@protoc_insertion_point(field_get:proto.steam.PublishedFileDetails.Tag.adminonly)
  return adminonly_;
}
void PublishedFileDetails_Tag::set_adminonly(bool value) {
  set_has_adminonly();
  adminonly_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.PublishedFileDetails.Tag.adminonly)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PublishedFileDetails_Preview::kPreviewidFieldNumber;
const int PublishedFileDetails_Preview::kSortorderFieldNumber;
const int PublishedFileDetails_Preview::kUrlFieldNumber;
const int PublishedFileDetails_Preview::kSizeFieldNumber;
const int PublishedFileDetails_Preview::kFilenameFieldNumber;
const int PublishedFileDetails_Preview::kYoutubevideoidFieldNumber;
const int PublishedFileDetails_Preview::kPreviewTypeFieldNumber;
const int PublishedFileDetails_Preview::kExternalReferenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PublishedFileDetails_Preview::PublishedFileDetails_Preview()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.PublishedFileDetails.Preview)
}
PublishedFileDetails_Preview::PublishedFileDetails_Preview(const PublishedFileDetails_Preview& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_filename()) {
    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  youtubevideoid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_youtubevideoid()) {
    youtubevideoid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.youtubevideoid_);
  }
  external_reference_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_external_reference()) {
    external_reference_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.external_reference_);
  }
  ::memcpy(&previewid_, &from.previewid_,
    reinterpret_cast<char*>(&preview_type_) -
    reinterpret_cast<char*>(&previewid_) + sizeof(preview_type_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.PublishedFileDetails.Preview)
}

void PublishedFileDetails_Preview::SharedCtor() {
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  youtubevideoid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  external_reference_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&previewid_, 0, reinterpret_cast<char*>(&preview_type_) -
    reinterpret_cast<char*>(&previewid_) + sizeof(preview_type_));
}

PublishedFileDetails_Preview::~PublishedFileDetails_Preview() {
  // @@protoc_insertion_point(destructor:proto.steam.PublishedFileDetails.Preview)
  SharedDtor();
}

void PublishedFileDetails_Preview::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  youtubevideoid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  external_reference_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PublishedFileDetails_Preview::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PublishedFileDetails_Preview::descriptor() {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PublishedFileDetails_Preview& PublishedFileDetails_Preview::default_instance() {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

PublishedFileDetails_Preview* PublishedFileDetails_Preview::New(::google::protobuf::Arena* arena) const {
  PublishedFileDetails_Preview* n = new PublishedFileDetails_Preview;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PublishedFileDetails_Preview::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.PublishedFileDetails.Preview)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_url()) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
    if (has_filename()) {
      GOOGLE_DCHECK(!filename_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*filename_.UnsafeRawStringPointer())->clear();
    }
    if (has_youtubevideoid()) {
      GOOGLE_DCHECK(!youtubevideoid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*youtubevideoid_.UnsafeRawStringPointer())->clear();
    }
    if (has_external_reference()) {
      GOOGLE_DCHECK(!external_reference_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*external_reference_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 240u) {
    ::memset(&previewid_, 0, reinterpret_cast<char*>(&preview_type_) -
      reinterpret_cast<char*>(&previewid_) + sizeof(preview_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PublishedFileDetails_Preview::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.PublishedFileDetails.Preview)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 previewid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_previewid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &previewid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 sortorder = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_sortorder();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sortorder_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string url = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.PublishedFileDetails.Preview.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 size = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string filename = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.PublishedFileDetails.Preview.filename");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string youtubevideoid = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_youtubevideoid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->youtubevideoid().data(), this->youtubevideoid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.PublishedFileDetails.Preview.youtubevideoid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 preview_type = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_preview_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &preview_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string external_reference = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_external_reference()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->external_reference().data(), this->external_reference().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.PublishedFileDetails.Preview.external_reference");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.PublishedFileDetails.Preview)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.PublishedFileDetails.Preview)
  return false;
#undef DO_
}

void PublishedFileDetails_Preview::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.PublishedFileDetails.Preview)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 previewid = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->previewid(), output);
  }

  // optional uint32 sortorder = 2;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sortorder(), output);
  }

  // optional string url = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.PublishedFileDetails.Preview.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->url(), output);
  }

  // optional uint32 size = 4;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->size(), output);
  }

  // optional string filename = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.PublishedFileDetails.Preview.filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->filename(), output);
  }

  // optional string youtubevideoid = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->youtubevideoid().data(), this->youtubevideoid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.PublishedFileDetails.Preview.youtubevideoid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->youtubevideoid(), output);
  }

  // optional uint32 preview_type = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->preview_type(), output);
  }

  // optional string external_reference = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->external_reference().data(), this->external_reference().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.PublishedFileDetails.Preview.external_reference");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->external_reference(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.PublishedFileDetails.Preview)
}

::google::protobuf::uint8* PublishedFileDetails_Preview::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.PublishedFileDetails.Preview)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 previewid = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->previewid(), target);
  }

  // optional uint32 sortorder = 2;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sortorder(), target);
  }

  // optional string url = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.PublishedFileDetails.Preview.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->url(), target);
  }

  // optional uint32 size = 4;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->size(), target);
  }

  // optional string filename = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.PublishedFileDetails.Preview.filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->filename(), target);
  }

  // optional string youtubevideoid = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->youtubevideoid().data(), this->youtubevideoid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.PublishedFileDetails.Preview.youtubevideoid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->youtubevideoid(), target);
  }

  // optional uint32 preview_type = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->preview_type(), target);
  }

  // optional string external_reference = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->external_reference().data(), this->external_reference().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.PublishedFileDetails.Preview.external_reference");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->external_reference(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.PublishedFileDetails.Preview)
  return target;
}

size_t PublishedFileDetails_Preview::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.PublishedFileDetails.Preview)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string url = 3;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional string filename = 5;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional string youtubevideoid = 6;
    if (has_youtubevideoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->youtubevideoid());
    }

    // optional string external_reference = 8;
    if (has_external_reference()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->external_reference());
    }

    // optional uint64 previewid = 1;
    if (has_previewid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->previewid());
    }

    // optional uint32 sortorder = 2;
    if (has_sortorder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sortorder());
    }

    // optional uint32 size = 4;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->size());
    }

    // optional uint32 preview_type = 7;
    if (has_preview_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->preview_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PublishedFileDetails_Preview::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.PublishedFileDetails.Preview)
  GOOGLE_DCHECK_NE(&from, this);
  const PublishedFileDetails_Preview* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PublishedFileDetails_Preview>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.PublishedFileDetails.Preview)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.PublishedFileDetails.Preview)
    MergeFrom(*source);
  }
}

void PublishedFileDetails_Preview::MergeFrom(const PublishedFileDetails_Preview& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.PublishedFileDetails.Preview)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_filename();
      filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_youtubevideoid();
      youtubevideoid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.youtubevideoid_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_external_reference();
      external_reference_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.external_reference_);
    }
    if (cached_has_bits & 0x00000010u) {
      previewid_ = from.previewid_;
    }
    if (cached_has_bits & 0x00000020u) {
      sortorder_ = from.sortorder_;
    }
    if (cached_has_bits & 0x00000040u) {
      size_ = from.size_;
    }
    if (cached_has_bits & 0x00000080u) {
      preview_type_ = from.preview_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PublishedFileDetails_Preview::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.PublishedFileDetails.Preview)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishedFileDetails_Preview::CopyFrom(const PublishedFileDetails_Preview& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.PublishedFileDetails.Preview)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishedFileDetails_Preview::IsInitialized() const {
  return true;
}

void PublishedFileDetails_Preview::Swap(PublishedFileDetails_Preview* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PublishedFileDetails_Preview::InternalSwap(PublishedFileDetails_Preview* other) {
  url_.Swap(&other->url_);
  filename_.Swap(&other->filename_);
  youtubevideoid_.Swap(&other->youtubevideoid_);
  external_reference_.Swap(&other->external_reference_);
  std::swap(previewid_, other->previewid_);
  std::swap(sortorder_, other->sortorder_);
  std::swap(size_, other->size_);
  std::swap(preview_type_, other->preview_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PublishedFileDetails_Preview::GetMetadata() const {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PublishedFileDetails_Preview

// optional uint64 previewid = 1;
bool PublishedFileDetails_Preview::has_previewid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PublishedFileDetails_Preview::set_has_previewid() {
  _has_bits_[0] |= 0x00000010u;
}
void PublishedFileDetails_Preview::clear_has_previewid() {
  _has_bits_[0] &= ~0x00000010u;
}
void PublishedFileDetails_Preview::clear_previewid() {
  previewid_ = GOOGLE_ULONGLONG(0);
  clear_has_previewid();
}
::google::protobuf::uint64 PublishedFileDetails_Preview::previewid() const {
  // @@protoc_insertion_point(field_get:proto.steam.PublishedFileDetails.Preview.previewid)
  return previewid_;
}
void PublishedFileDetails_Preview::set_previewid(::google::protobuf::uint64 value) {
  set_has_previewid();
  previewid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.PublishedFileDetails.Preview.previewid)
}

// optional uint32 sortorder = 2;
bool PublishedFileDetails_Preview::has_sortorder() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PublishedFileDetails_Preview::set_has_sortorder() {
  _has_bits_[0] |= 0x00000020u;
}
void PublishedFileDetails_Preview::clear_has_sortorder() {
  _has_bits_[0] &= ~0x00000020u;
}
void PublishedFileDetails_Preview::clear_sortorder() {
  sortorder_ = 0u;
  clear_has_sortorder();
}
::google::protobuf::uint32 PublishedFileDetails_Preview::sortorder() const {
  // @@protoc_insertion_point(field_get:proto.steam.PublishedFileDetails.Preview.sortorder)
  return sortorder_;
}
void PublishedFileDetails_Preview::set_sortorder(::google::protobuf::uint32 value) {
  set_has_sortorder();
  sortorder_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.PublishedFileDetails.Preview.sortorder)
}

// optional string url = 3;
bool PublishedFileDetails_Preview::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PublishedFileDetails_Preview::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
void PublishedFileDetails_Preview::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void PublishedFileDetails_Preview::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& PublishedFileDetails_Preview::url() const {
  // @@protoc_insertion_point(field_get:proto.steam.PublishedFileDetails.Preview.url)
  return url_.GetNoArena();
}
void PublishedFileDetails_Preview::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.PublishedFileDetails.Preview.url)
}
#if LANG_CXX11
void PublishedFileDetails_Preview::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.PublishedFileDetails.Preview.url)
}
#endif
void PublishedFileDetails_Preview::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.PublishedFileDetails.Preview.url)
}
void PublishedFileDetails_Preview::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.PublishedFileDetails.Preview.url)
}
::std::string* PublishedFileDetails_Preview::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:proto.steam.PublishedFileDetails.Preview.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PublishedFileDetails_Preview::release_url() {
  // @@protoc_insertion_point(field_release:proto.steam.PublishedFileDetails.Preview.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PublishedFileDetails_Preview::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.PublishedFileDetails.Preview.url)
}

// optional uint32 size = 4;
bool PublishedFileDetails_Preview::has_size() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void PublishedFileDetails_Preview::set_has_size() {
  _has_bits_[0] |= 0x00000040u;
}
void PublishedFileDetails_Preview::clear_has_size() {
  _has_bits_[0] &= ~0x00000040u;
}
void PublishedFileDetails_Preview::clear_size() {
  size_ = 0u;
  clear_has_size();
}
::google::protobuf::uint32 PublishedFileDetails_Preview::size() const {
  // @@protoc_insertion_point(field_get:proto.steam.PublishedFileDetails.Preview.size)
  return size_;
}
void PublishedFileDetails_Preview::set_size(::google::protobuf::uint32 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.PublishedFileDetails.Preview.size)
}

// optional string filename = 5;
bool PublishedFileDetails_Preview::has_filename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PublishedFileDetails_Preview::set_has_filename() {
  _has_bits_[0] |= 0x00000002u;
}
void PublishedFileDetails_Preview::clear_has_filename() {
  _has_bits_[0] &= ~0x00000002u;
}
void PublishedFileDetails_Preview::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_filename();
}
const ::std::string& PublishedFileDetails_Preview::filename() const {
  // @@protoc_insertion_point(field_get:proto.steam.PublishedFileDetails.Preview.filename)
  return filename_.GetNoArena();
}
void PublishedFileDetails_Preview::set_filename(const ::std::string& value) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.PublishedFileDetails.Preview.filename)
}
#if LANG_CXX11
void PublishedFileDetails_Preview::set_filename(::std::string&& value) {
  set_has_filename();
  filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.PublishedFileDetails.Preview.filename)
}
#endif
void PublishedFileDetails_Preview::set_filename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.PublishedFileDetails.Preview.filename)
}
void PublishedFileDetails_Preview::set_filename(const char* value, size_t size) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.PublishedFileDetails.Preview.filename)
}
::std::string* PublishedFileDetails_Preview::mutable_filename() {
  set_has_filename();
  // @@protoc_insertion_point(field_mutable:proto.steam.PublishedFileDetails.Preview.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PublishedFileDetails_Preview::release_filename() {
  // @@protoc_insertion_point(field_release:proto.steam.PublishedFileDetails.Preview.filename)
  clear_has_filename();
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PublishedFileDetails_Preview::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    set_has_filename();
  } else {
    clear_has_filename();
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.PublishedFileDetails.Preview.filename)
}

// optional string youtubevideoid = 6;
bool PublishedFileDetails_Preview::has_youtubevideoid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PublishedFileDetails_Preview::set_has_youtubevideoid() {
  _has_bits_[0] |= 0x00000004u;
}
void PublishedFileDetails_Preview::clear_has_youtubevideoid() {
  _has_bits_[0] &= ~0x00000004u;
}
void PublishedFileDetails_Preview::clear_youtubevideoid() {
  youtubevideoid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_youtubevideoid();
}
const ::std::string& PublishedFileDetails_Preview::youtubevideoid() const {
  // @@protoc_insertion_point(field_get:proto.steam.PublishedFileDetails.Preview.youtubevideoid)
  return youtubevideoid_.GetNoArena();
}
void PublishedFileDetails_Preview::set_youtubevideoid(const ::std::string& value) {
  set_has_youtubevideoid();
  youtubevideoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.PublishedFileDetails.Preview.youtubevideoid)
}
#if LANG_CXX11
void PublishedFileDetails_Preview::set_youtubevideoid(::std::string&& value) {
  set_has_youtubevideoid();
  youtubevideoid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.PublishedFileDetails.Preview.youtubevideoid)
}
#endif
void PublishedFileDetails_Preview::set_youtubevideoid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_youtubevideoid();
  youtubevideoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.PublishedFileDetails.Preview.youtubevideoid)
}
void PublishedFileDetails_Preview::set_youtubevideoid(const char* value, size_t size) {
  set_has_youtubevideoid();
  youtubevideoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.PublishedFileDetails.Preview.youtubevideoid)
}
::std::string* PublishedFileDetails_Preview::mutable_youtubevideoid() {
  set_has_youtubevideoid();
  // @@protoc_insertion_point(field_mutable:proto.steam.PublishedFileDetails.Preview.youtubevideoid)
  return youtubevideoid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PublishedFileDetails_Preview::release_youtubevideoid() {
  // @@protoc_insertion_point(field_release:proto.steam.PublishedFileDetails.Preview.youtubevideoid)
  clear_has_youtubevideoid();
  return youtubevideoid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PublishedFileDetails_Preview::set_allocated_youtubevideoid(::std::string* youtubevideoid) {
  if (youtubevideoid != NULL) {
    set_has_youtubevideoid();
  } else {
    clear_has_youtubevideoid();
  }
  youtubevideoid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), youtubevideoid);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.PublishedFileDetails.Preview.youtubevideoid)
}

// optional uint32 preview_type = 7;
bool PublishedFileDetails_Preview::has_preview_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void PublishedFileDetails_Preview::set_has_preview_type() {
  _has_bits_[0] |= 0x00000080u;
}
void PublishedFileDetails_Preview::clear_has_preview_type() {
  _has_bits_[0] &= ~0x00000080u;
}
void PublishedFileDetails_Preview::clear_preview_type() {
  preview_type_ = 0u;
  clear_has_preview_type();
}
::google::protobuf::uint32 PublishedFileDetails_Preview::preview_type() const {
  // @@protoc_insertion_point(field_get:proto.steam.PublishedFileDetails.Preview.preview_type)
  return preview_type_;
}
void PublishedFileDetails_Preview::set_preview_type(::google::protobuf::uint32 value) {
  set_has_preview_type();
  preview_type_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.PublishedFileDetails.Preview.preview_type)
}

// optional string external_reference = 8;
bool PublishedFileDetails_Preview::has_external_reference() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PublishedFileDetails_Preview::set_has_external_reference() {
  _has_bits_[0] |= 0x00000008u;
}
void PublishedFileDetails_Preview::clear_has_external_reference() {
  _has_bits_[0] &= ~0x00000008u;
}
void PublishedFileDetails_Preview::clear_external_reference() {
  external_reference_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_external_reference();
}
const ::std::string& PublishedFileDetails_Preview::external_reference() const {
  // @@protoc_insertion_point(field_get:proto.steam.PublishedFileDetails.Preview.external_reference)
  return external_reference_.GetNoArena();
}
void PublishedFileDetails_Preview::set_external_reference(const ::std::string& value) {
  set_has_external_reference();
  external_reference_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.PublishedFileDetails.Preview.external_reference)
}
#if LANG_CXX11
void PublishedFileDetails_Preview::set_external_reference(::std::string&& value) {
  set_has_external_reference();
  external_reference_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.PublishedFileDetails.Preview.external_reference)
}
#endif
void PublishedFileDetails_Preview::set_external_reference(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_external_reference();
  external_reference_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.PublishedFileDetails.Preview.external_reference)
}
void PublishedFileDetails_Preview::set_external_reference(const char* value, size_t size) {
  set_has_external_reference();
  external_reference_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.PublishedFileDetails.Preview.external_reference)
}
::std::string* PublishedFileDetails_Preview::mutable_external_reference() {
  set_has_external_reference();
  // @@protoc_insertion_point(field_mutable:proto.steam.PublishedFileDetails.Preview.external_reference)
  return external_reference_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PublishedFileDetails_Preview::release_external_reference() {
  // @@protoc_insertion_point(field_release:proto.steam.PublishedFileDetails.Preview.external_reference)
  clear_has_external_reference();
  return external_reference_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PublishedFileDetails_Preview::set_allocated_external_reference(::std::string* external_reference) {
  if (external_reference != NULL) {
    set_has_external_reference();
  } else {
    clear_has_external_reference();
  }
  external_reference_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), external_reference);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.PublishedFileDetails.Preview.external_reference)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PublishedFileDetails_Child::kPublishedfileidFieldNumber;
const int PublishedFileDetails_Child::kSortorderFieldNumber;
const int PublishedFileDetails_Child::kFileTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PublishedFileDetails_Child::PublishedFileDetails_Child()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.PublishedFileDetails.Child)
}
PublishedFileDetails_Child::PublishedFileDetails_Child(const PublishedFileDetails_Child& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&publishedfileid_, &from.publishedfileid_,
    reinterpret_cast<char*>(&file_type_) -
    reinterpret_cast<char*>(&publishedfileid_) + sizeof(file_type_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.PublishedFileDetails.Child)
}

void PublishedFileDetails_Child::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&publishedfileid_, 0, reinterpret_cast<char*>(&file_type_) -
    reinterpret_cast<char*>(&publishedfileid_) + sizeof(file_type_));
}

PublishedFileDetails_Child::~PublishedFileDetails_Child() {
  // @@protoc_insertion_point(destructor:proto.steam.PublishedFileDetails.Child)
  SharedDtor();
}

void PublishedFileDetails_Child::SharedDtor() {
}

void PublishedFileDetails_Child::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PublishedFileDetails_Child::descriptor() {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PublishedFileDetails_Child& PublishedFileDetails_Child::default_instance() {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

PublishedFileDetails_Child* PublishedFileDetails_Child::New(::google::protobuf::Arena* arena) const {
  PublishedFileDetails_Child* n = new PublishedFileDetails_Child;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PublishedFileDetails_Child::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.PublishedFileDetails.Child)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&publishedfileid_, 0, reinterpret_cast<char*>(&file_type_) -
      reinterpret_cast<char*>(&publishedfileid_) + sizeof(file_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PublishedFileDetails_Child::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.PublishedFileDetails.Child)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 publishedfileid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_publishedfileid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &publishedfileid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 sortorder = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_sortorder();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sortorder_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 file_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_file_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &file_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.PublishedFileDetails.Child)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.PublishedFileDetails.Child)
  return false;
#undef DO_
}

void PublishedFileDetails_Child::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.PublishedFileDetails.Child)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 publishedfileid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->publishedfileid(), output);
  }

  // optional uint32 sortorder = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sortorder(), output);
  }

  // optional uint32 file_type = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->file_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.PublishedFileDetails.Child)
}

::google::protobuf::uint8* PublishedFileDetails_Child::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.PublishedFileDetails.Child)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 publishedfileid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->publishedfileid(), target);
  }

  // optional uint32 sortorder = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sortorder(), target);
  }

  // optional uint32 file_type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->file_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.PublishedFileDetails.Child)
  return target;
}

size_t PublishedFileDetails_Child::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.PublishedFileDetails.Child)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint64 publishedfileid = 1;
    if (has_publishedfileid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->publishedfileid());
    }

    // optional uint32 sortorder = 2;
    if (has_sortorder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sortorder());
    }

    // optional uint32 file_type = 3;
    if (has_file_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->file_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PublishedFileDetails_Child::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.PublishedFileDetails.Child)
  GOOGLE_DCHECK_NE(&from, this);
  const PublishedFileDetails_Child* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PublishedFileDetails_Child>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.PublishedFileDetails.Child)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.PublishedFileDetails.Child)
    MergeFrom(*source);
  }
}

void PublishedFileDetails_Child::MergeFrom(const PublishedFileDetails_Child& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.PublishedFileDetails.Child)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      publishedfileid_ = from.publishedfileid_;
    }
    if (cached_has_bits & 0x00000002u) {
      sortorder_ = from.sortorder_;
    }
    if (cached_has_bits & 0x00000004u) {
      file_type_ = from.file_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PublishedFileDetails_Child::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.PublishedFileDetails.Child)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishedFileDetails_Child::CopyFrom(const PublishedFileDetails_Child& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.PublishedFileDetails.Child)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishedFileDetails_Child::IsInitialized() const {
  return true;
}

void PublishedFileDetails_Child::Swap(PublishedFileDetails_Child* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PublishedFileDetails_Child::InternalSwap(PublishedFileDetails_Child* other) {
  std::swap(publishedfileid_, other->publishedfileid_);
  std::swap(sortorder_, other->sortorder_);
  std::swap(file_type_, other->file_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PublishedFileDetails_Child::GetMetadata() const {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PublishedFileDetails_Child

// optional uint64 publishedfileid = 1;
bool PublishedFileDetails_Child::has_publishedfileid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PublishedFileDetails_Child::set_has_publishedfileid() {
  _has_bits_[0] |= 0x00000001u;
}
void PublishedFileDetails_Child::clear_has_publishedfileid() {
  _has_bits_[0] &= ~0x00000001u;
}
void PublishedFileDetails_Child::clear_publishedfileid() {
  publishedfileid_ = GOOGLE_ULONGLONG(0);
  clear_has_publishedfileid();
}
::google::protobuf::uint64 PublishedFileDetails_Child::publishedfileid() const {
  // @@protoc_insertion_point(field_get:proto.steam.PublishedFileDetails.Child.publishedfileid)
  return publishedfileid_;
}
void PublishedFileDetails_Child::set_publishedfileid(::google::protobuf::uint64 value) {
  set_has_publishedfileid();
  publishedfileid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.PublishedFileDetails.Child.publishedfileid)
}

// optional uint32 sortorder = 2;
bool PublishedFileDetails_Child::has_sortorder() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PublishedFileDetails_Child::set_has_sortorder() {
  _has_bits_[0] |= 0x00000002u;
}
void PublishedFileDetails_Child::clear_has_sortorder() {
  _has_bits_[0] &= ~0x00000002u;
}
void PublishedFileDetails_Child::clear_sortorder() {
  sortorder_ = 0u;
  clear_has_sortorder();
}
::google::protobuf::uint32 PublishedFileDetails_Child::sortorder() const {
  // @@protoc_insertion_point(field_get:proto.steam.PublishedFileDetails.Child.sortorder)
  return sortorder_;
}
void PublishedFileDetails_Child::set_sortorder(::google::protobuf::uint32 value) {
  set_has_sortorder();
  sortorder_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.PublishedFileDetails.Child.sortorder)
}

// optional uint32 file_type = 3;
bool PublishedFileDetails_Child::has_file_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PublishedFileDetails_Child::set_has_file_type() {
  _has_bits_[0] |= 0x00000004u;
}
void PublishedFileDetails_Child::clear_has_file_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void PublishedFileDetails_Child::clear_file_type() {
  file_type_ = 0u;
  clear_has_file_type();
}
::google::protobuf::uint32 PublishedFileDetails_Child::file_type() const {
  // @@protoc_insertion_point(field_get:proto.steam.PublishedFileDetails.Child.file_type)
  return file_type_;
}
void PublishedFileDetails_Child::set_file_type(::google::protobuf::uint32 value) {
  set_has_file_type();
  file_type_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.PublishedFileDetails.Child.file_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PublishedFileDetails_KVTag::kKeyFieldNumber;
const int PublishedFileDetails_KVTag::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PublishedFileDetails_KVTag::PublishedFileDetails_KVTag()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.PublishedFileDetails.KVTag)
}
PublishedFileDetails_KVTag::PublishedFileDetails_KVTag(const PublishedFileDetails_KVTag& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_key()) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.steam.PublishedFileDetails.KVTag)
}

void PublishedFileDetails_KVTag::SharedCtor() {
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PublishedFileDetails_KVTag::~PublishedFileDetails_KVTag() {
  // @@protoc_insertion_point(destructor:proto.steam.PublishedFileDetails.KVTag)
  SharedDtor();
}

void PublishedFileDetails_KVTag::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PublishedFileDetails_KVTag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PublishedFileDetails_KVTag::descriptor() {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PublishedFileDetails_KVTag& PublishedFileDetails_KVTag::default_instance() {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

PublishedFileDetails_KVTag* PublishedFileDetails_KVTag::New(::google::protobuf::Arena* arena) const {
  PublishedFileDetails_KVTag* n = new PublishedFileDetails_KVTag;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PublishedFileDetails_KVTag::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.PublishedFileDetails.KVTag)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_key()) {
      GOOGLE_DCHECK(!key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*key_.UnsafeRawStringPointer())->clear();
    }
    if (has_value()) {
      GOOGLE_DCHECK(!value_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*value_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PublishedFileDetails_KVTag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.PublishedFileDetails.KVTag)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.PublishedFileDetails.KVTag.key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.PublishedFileDetails.KVTag.value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.PublishedFileDetails.KVTag)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.PublishedFileDetails.KVTag)
  return false;
#undef DO_
}

void PublishedFileDetails_KVTag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.PublishedFileDetails.KVTag)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.PublishedFileDetails.KVTag.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.PublishedFileDetails.KVTag.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.PublishedFileDetails.KVTag)
}

::google::protobuf::uint8* PublishedFileDetails_KVTag::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.PublishedFileDetails.KVTag)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.PublishedFileDetails.KVTag.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.PublishedFileDetails.KVTag.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.PublishedFileDetails.KVTag)
  return target;
}

size_t PublishedFileDetails_KVTag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.PublishedFileDetails.KVTag)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PublishedFileDetails_KVTag::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.PublishedFileDetails.KVTag)
  GOOGLE_DCHECK_NE(&from, this);
  const PublishedFileDetails_KVTag* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PublishedFileDetails_KVTag>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.PublishedFileDetails.KVTag)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.PublishedFileDetails.KVTag)
    MergeFrom(*source);
  }
}

void PublishedFileDetails_KVTag::MergeFrom(const PublishedFileDetails_KVTag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.PublishedFileDetails.KVTag)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
}

void PublishedFileDetails_KVTag::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.PublishedFileDetails.KVTag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishedFileDetails_KVTag::CopyFrom(const PublishedFileDetails_KVTag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.PublishedFileDetails.KVTag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishedFileDetails_KVTag::IsInitialized() const {
  return true;
}

void PublishedFileDetails_KVTag::Swap(PublishedFileDetails_KVTag* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PublishedFileDetails_KVTag::InternalSwap(PublishedFileDetails_KVTag* other) {
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PublishedFileDetails_KVTag::GetMetadata() const {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PublishedFileDetails_KVTag

// optional string key = 1;
bool PublishedFileDetails_KVTag::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PublishedFileDetails_KVTag::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void PublishedFileDetails_KVTag::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void PublishedFileDetails_KVTag::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
const ::std::string& PublishedFileDetails_KVTag::key() const {
  // @@protoc_insertion_point(field_get:proto.steam.PublishedFileDetails.KVTag.key)
  return key_.GetNoArena();
}
void PublishedFileDetails_KVTag::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.PublishedFileDetails.KVTag.key)
}
#if LANG_CXX11
void PublishedFileDetails_KVTag::set_key(::std::string&& value) {
  set_has_key();
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.PublishedFileDetails.KVTag.key)
}
#endif
void PublishedFileDetails_KVTag::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.PublishedFileDetails.KVTag.key)
}
void PublishedFileDetails_KVTag::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.PublishedFileDetails.KVTag.key)
}
::std::string* PublishedFileDetails_KVTag::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:proto.steam.PublishedFileDetails.KVTag.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PublishedFileDetails_KVTag::release_key() {
  // @@protoc_insertion_point(field_release:proto.steam.PublishedFileDetails.KVTag.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PublishedFileDetails_KVTag::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.PublishedFileDetails.KVTag.key)
}

// optional string value = 2;
bool PublishedFileDetails_KVTag::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PublishedFileDetails_KVTag::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void PublishedFileDetails_KVTag::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void PublishedFileDetails_KVTag::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
const ::std::string& PublishedFileDetails_KVTag::value() const {
  // @@protoc_insertion_point(field_get:proto.steam.PublishedFileDetails.KVTag.value)
  return value_.GetNoArena();
}
void PublishedFileDetails_KVTag::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.PublishedFileDetails.KVTag.value)
}
#if LANG_CXX11
void PublishedFileDetails_KVTag::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.PublishedFileDetails.KVTag.value)
}
#endif
void PublishedFileDetails_KVTag::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.PublishedFileDetails.KVTag.value)
}
void PublishedFileDetails_KVTag::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.PublishedFileDetails.KVTag.value)
}
::std::string* PublishedFileDetails_KVTag::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:proto.steam.PublishedFileDetails.KVTag.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PublishedFileDetails_KVTag::release_value() {
  // @@protoc_insertion_point(field_release:proto.steam.PublishedFileDetails.KVTag.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PublishedFileDetails_KVTag::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.PublishedFileDetails.KVTag.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PublishedFileDetails_VoteData::kScoreFieldNumber;
const int PublishedFileDetails_VoteData::kVotesUpFieldNumber;
const int PublishedFileDetails_VoteData::kVotesDownFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PublishedFileDetails_VoteData::PublishedFileDetails_VoteData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.PublishedFileDetails.VoteData)
}
PublishedFileDetails_VoteData::PublishedFileDetails_VoteData(const PublishedFileDetails_VoteData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&score_, &from.score_,
    reinterpret_cast<char*>(&votes_down_) -
    reinterpret_cast<char*>(&score_) + sizeof(votes_down_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.PublishedFileDetails.VoteData)
}

void PublishedFileDetails_VoteData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&score_, 0, reinterpret_cast<char*>(&votes_down_) -
    reinterpret_cast<char*>(&score_) + sizeof(votes_down_));
}

PublishedFileDetails_VoteData::~PublishedFileDetails_VoteData() {
  // @@protoc_insertion_point(destructor:proto.steam.PublishedFileDetails.VoteData)
  SharedDtor();
}

void PublishedFileDetails_VoteData::SharedDtor() {
}

void PublishedFileDetails_VoteData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PublishedFileDetails_VoteData::descriptor() {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PublishedFileDetails_VoteData& PublishedFileDetails_VoteData::default_instance() {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

PublishedFileDetails_VoteData* PublishedFileDetails_VoteData::New(::google::protobuf::Arena* arena) const {
  PublishedFileDetails_VoteData* n = new PublishedFileDetails_VoteData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PublishedFileDetails_VoteData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.PublishedFileDetails.VoteData)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&score_, 0, reinterpret_cast<char*>(&votes_down_) -
      reinterpret_cast<char*>(&score_) + sizeof(votes_down_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PublishedFileDetails_VoteData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.PublishedFileDetails.VoteData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float score = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {
          set_has_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 votes_up = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_votes_up();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &votes_up_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 votes_down = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_votes_down();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &votes_down_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.PublishedFileDetails.VoteData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.PublishedFileDetails.VoteData)
  return false;
#undef DO_
}

void PublishedFileDetails_VoteData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.PublishedFileDetails.VoteData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float score = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->score(), output);
  }

  // optional uint32 votes_up = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->votes_up(), output);
  }

  // optional uint32 votes_down = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->votes_down(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.PublishedFileDetails.VoteData)
}

::google::protobuf::uint8* PublishedFileDetails_VoteData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.PublishedFileDetails.VoteData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float score = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->score(), target);
  }

  // optional uint32 votes_up = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->votes_up(), target);
  }

  // optional uint32 votes_down = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->votes_down(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.PublishedFileDetails.VoteData)
  return target;
}

size_t PublishedFileDetails_VoteData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.PublishedFileDetails.VoteData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional float score = 1;
    if (has_score()) {
      total_size += 1 + 4;
    }

    // optional uint32 votes_up = 2;
    if (has_votes_up()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->votes_up());
    }

    // optional uint32 votes_down = 3;
    if (has_votes_down()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->votes_down());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PublishedFileDetails_VoteData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.PublishedFileDetails.VoteData)
  GOOGLE_DCHECK_NE(&from, this);
  const PublishedFileDetails_VoteData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PublishedFileDetails_VoteData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.PublishedFileDetails.VoteData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.PublishedFileDetails.VoteData)
    MergeFrom(*source);
  }
}

void PublishedFileDetails_VoteData::MergeFrom(const PublishedFileDetails_VoteData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.PublishedFileDetails.VoteData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      score_ = from.score_;
    }
    if (cached_has_bits & 0x00000002u) {
      votes_up_ = from.votes_up_;
    }
    if (cached_has_bits & 0x00000004u) {
      votes_down_ = from.votes_down_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PublishedFileDetails_VoteData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.PublishedFileDetails.VoteData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishedFileDetails_VoteData::CopyFrom(const PublishedFileDetails_VoteData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.PublishedFileDetails.VoteData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishedFileDetails_VoteData::IsInitialized() const {
  return true;
}

void PublishedFileDetails_VoteData::Swap(PublishedFileDetails_VoteData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PublishedFileDetails_VoteData::InternalSwap(PublishedFileDetails_VoteData* other) {
  std::swap(score_, other->score_);
  std::swap(votes_up_, other->votes_up_);
  std::swap(votes_down_, other->votes_down_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PublishedFileDetails_VoteData::GetMetadata() const {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PublishedFileDetails_VoteData

// optional float score = 1;
bool PublishedFileDetails_VoteData::has_score() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PublishedFileDetails_VoteData::set_has_score() {
  _has_bits_[0] |= 0x00000001u;
}
void PublishedFileDetails_VoteData::clear_has_score() {
  _has_bits_[0] &= ~0x00000001u;
}
void PublishedFileDetails_VoteData::clear_score() {
  score_ = 0;
  clear_has_score();
}
float PublishedFileDetails_VoteData::score() const {
  // @@protoc_insertion_point(field_get:proto.steam.PublishedFileDetails.VoteData.score)
  return score_;
}
void PublishedFileDetails_VoteData::set_score(float value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.PublishedFileDetails.VoteData.score)
}

// optional uint32 votes_up = 2;
bool PublishedFileDetails_VoteData::has_votes_up() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PublishedFileDetails_VoteData::set_has_votes_up() {
  _has_bits_[0] |= 0x00000002u;
}
void PublishedFileDetails_VoteData::clear_has_votes_up() {
  _has_bits_[0] &= ~0x00000002u;
}
void PublishedFileDetails_VoteData::clear_votes_up() {
  votes_up_ = 0u;
  clear_has_votes_up();
}
::google::protobuf::uint32 PublishedFileDetails_VoteData::votes_up() const {
  // @@protoc_insertion_point(field_get:proto.steam.PublishedFileDetails.VoteData.votes_up)
  return votes_up_;
}
void PublishedFileDetails_VoteData::set_votes_up(::google::protobuf::uint32 value) {
  set_has_votes_up();
  votes_up_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.PublishedFileDetails.VoteData.votes_up)
}

// optional uint32 votes_down = 3;
bool PublishedFileDetails_VoteData::has_votes_down() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PublishedFileDetails_VoteData::set_has_votes_down() {
  _has_bits_[0] |= 0x00000004u;
}
void PublishedFileDetails_VoteData::clear_has_votes_down() {
  _has_bits_[0] &= ~0x00000004u;
}
void PublishedFileDetails_VoteData::clear_votes_down() {
  votes_down_ = 0u;
  clear_has_votes_down();
}
::google::protobuf::uint32 PublishedFileDetails_VoteData::votes_down() const {
  // @@protoc_insertion_point(field_get:proto.steam.PublishedFileDetails.VoteData.votes_down)
  return votes_down_;
}
void PublishedFileDetails_VoteData::set_votes_down(::google::protobuf::uint32 value) {
  set_has_votes_down();
  votes_down_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.PublishedFileDetails.VoteData.votes_down)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PublishedFileDetails_ForSaleData::kIsForSaleFieldNumber;
const int PublishedFileDetails_ForSaleData::kPriceCategoryFieldNumber;
const int PublishedFileDetails_ForSaleData::kEstatusFieldNumber;
const int PublishedFileDetails_ForSaleData::kPriceCategoryFloorFieldNumber;
const int PublishedFileDetails_ForSaleData::kPriceIsPayWhatYouWantFieldNumber;
const int PublishedFileDetails_ForSaleData::kDiscountPercentageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PublishedFileDetails_ForSaleData::PublishedFileDetails_ForSaleData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.PublishedFileDetails.ForSaleData)
}
PublishedFileDetails_ForSaleData::PublishedFileDetails_ForSaleData(const PublishedFileDetails_ForSaleData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&price_category_, &from.price_category_,
    reinterpret_cast<char*>(&discount_percentage_) -
    reinterpret_cast<char*>(&price_category_) + sizeof(discount_percentage_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.PublishedFileDetails.ForSaleData)
}

void PublishedFileDetails_ForSaleData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&price_category_, 0, reinterpret_cast<char*>(&discount_percentage_) -
    reinterpret_cast<char*>(&price_category_) + sizeof(discount_percentage_));
}

PublishedFileDetails_ForSaleData::~PublishedFileDetails_ForSaleData() {
  // @@protoc_insertion_point(destructor:proto.steam.PublishedFileDetails.ForSaleData)
  SharedDtor();
}

void PublishedFileDetails_ForSaleData::SharedDtor() {
}

void PublishedFileDetails_ForSaleData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PublishedFileDetails_ForSaleData::descriptor() {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PublishedFileDetails_ForSaleData& PublishedFileDetails_ForSaleData::default_instance() {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

PublishedFileDetails_ForSaleData* PublishedFileDetails_ForSaleData::New(::google::protobuf::Arena* arena) const {
  PublishedFileDetails_ForSaleData* n = new PublishedFileDetails_ForSaleData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PublishedFileDetails_ForSaleData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.PublishedFileDetails.ForSaleData)
  if (_has_bits_[0 / 32] & 63u) {
    ::memset(&price_category_, 0, reinterpret_cast<char*>(&discount_percentage_) -
      reinterpret_cast<char*>(&price_category_) + sizeof(discount_percentage_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PublishedFileDetails_ForSaleData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.PublishedFileDetails.ForSaleData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_for_sale = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_is_for_sale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_for_sale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 price_category = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_price_category();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &price_category_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.steam.PublishedFileDetails.EPublishedFileForSaleStatus estatus = 3 [default = k_PFFSS_NotForSale];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::steam::PublishedFileDetails_EPublishedFileForSaleStatus_IsValid(value)) {
            set_estatus(static_cast< ::proto::steam::PublishedFileDetails_EPublishedFileForSaleStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 price_category_floor = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_price_category_floor();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &price_category_floor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool price_is_pay_what_you_want = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_price_is_pay_what_you_want();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &price_is_pay_what_you_want_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 discount_percentage = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_discount_percentage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &discount_percentage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.PublishedFileDetails.ForSaleData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.PublishedFileDetails.ForSaleData)
  return false;
#undef DO_
}

void PublishedFileDetails_ForSaleData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.PublishedFileDetails.ForSaleData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_for_sale = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_for_sale(), output);
  }

  // optional uint32 price_category = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->price_category(), output);
  }

  // optional .proto.steam.PublishedFileDetails.EPublishedFileForSaleStatus estatus = 3 [default = k_PFFSS_NotForSale];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->estatus(), output);
  }

  // optional uint32 price_category_floor = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->price_category_floor(), output);
  }

  // optional bool price_is_pay_what_you_want = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->price_is_pay_what_you_want(), output);
  }

  // optional uint32 discount_percentage = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->discount_percentage(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.PublishedFileDetails.ForSaleData)
}

::google::protobuf::uint8* PublishedFileDetails_ForSaleData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.PublishedFileDetails.ForSaleData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_for_sale = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_for_sale(), target);
  }

  // optional uint32 price_category = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->price_category(), target);
  }

  // optional .proto.steam.PublishedFileDetails.EPublishedFileForSaleStatus estatus = 3 [default = k_PFFSS_NotForSale];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->estatus(), target);
  }

  // optional uint32 price_category_floor = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->price_category_floor(), target);
  }

  // optional bool price_is_pay_what_you_want = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->price_is_pay_what_you_want(), target);
  }

  // optional uint32 discount_percentage = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->discount_percentage(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.PublishedFileDetails.ForSaleData)
  return target;
}

size_t PublishedFileDetails_ForSaleData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.PublishedFileDetails.ForSaleData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional uint32 price_category = 2;
    if (has_price_category()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->price_category());
    }

    // optional .proto.steam.PublishedFileDetails.EPublishedFileForSaleStatus estatus = 3 [default = k_PFFSS_NotForSale];
    if (has_estatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->estatus());
    }

    // optional bool is_for_sale = 1;
    if (has_is_for_sale()) {
      total_size += 1 + 1;
    }

    // optional bool price_is_pay_what_you_want = 5;
    if (has_price_is_pay_what_you_want()) {
      total_size += 1 + 1;
    }

    // optional uint32 price_category_floor = 4;
    if (has_price_category_floor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->price_category_floor());
    }

    // optional uint32 discount_percentage = 6;
    if (has_discount_percentage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->discount_percentage());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PublishedFileDetails_ForSaleData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.PublishedFileDetails.ForSaleData)
  GOOGLE_DCHECK_NE(&from, this);
  const PublishedFileDetails_ForSaleData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PublishedFileDetails_ForSaleData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.PublishedFileDetails.ForSaleData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.PublishedFileDetails.ForSaleData)
    MergeFrom(*source);
  }
}

void PublishedFileDetails_ForSaleData::MergeFrom(const PublishedFileDetails_ForSaleData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.PublishedFileDetails.ForSaleData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      price_category_ = from.price_category_;
    }
    if (cached_has_bits & 0x00000002u) {
      estatus_ = from.estatus_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_for_sale_ = from.is_for_sale_;
    }
    if (cached_has_bits & 0x00000008u) {
      price_is_pay_what_you_want_ = from.price_is_pay_what_you_want_;
    }
    if (cached_has_bits & 0x00000010u) {
      price_category_floor_ = from.price_category_floor_;
    }
    if (cached_has_bits & 0x00000020u) {
      discount_percentage_ = from.discount_percentage_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PublishedFileDetails_ForSaleData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.PublishedFileDetails.ForSaleData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishedFileDetails_ForSaleData::CopyFrom(const PublishedFileDetails_ForSaleData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.PublishedFileDetails.ForSaleData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishedFileDetails_ForSaleData::IsInitialized() const {
  return true;
}

void PublishedFileDetails_ForSaleData::Swap(PublishedFileDetails_ForSaleData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PublishedFileDetails_ForSaleData::InternalSwap(PublishedFileDetails_ForSaleData* other) {
  std::swap(price_category_, other->price_category_);
  std::swap(estatus_, other->estatus_);
  std::swap(is_for_sale_, other->is_for_sale_);
  std::swap(price_is_pay_what_you_want_, other->price_is_pay_what_you_want_);
  std::swap(price_category_floor_, other->price_category_floor_);
  std::swap(discount_percentage_, other->discount_percentage_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PublishedFileDetails_ForSaleData::GetMetadata() const {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PublishedFileDetails_ForSaleData

// optional bool is_for_sale = 1;
bool PublishedFileDetails_ForSaleData::has_is_for_sale() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PublishedFileDetails_ForSaleData::set_has_is_for_sale() {
  _has_bits_[0] |= 0x00000004u;
}
void PublishedFileDetails_ForSaleData::clear_has_is_for_sale() {
  _has_bits_[0] &= ~0x00000004u;
}
void PublishedFileDetails_ForSaleData::clear_is_for_sale() {
  is_for_sale_ = false;
  clear_has_is_for_sale();
}
bool PublishedFileDetails_ForSaleData::is_for_sale() const {
  // @@protoc_insertion_point(field_get:proto.steam.PublishedFileDetails.ForSaleData.is_for_sale)
  return is_for_sale_;
}
void PublishedFileDetails_ForSaleData::set_is_for_sale(bool value) {
  set_has_is_for_sale();
  is_for_sale_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.PublishedFileDetails.ForSaleData.is_for_sale)
}

// optional uint32 price_category = 2;
bool PublishedFileDetails_ForSaleData::has_price_category() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PublishedFileDetails_ForSaleData::set_has_price_category() {
  _has_bits_[0] |= 0x00000001u;
}
void PublishedFileDetails_ForSaleData::clear_has_price_category() {
  _has_bits_[0] &= ~0x00000001u;
}
void PublishedFileDetails_ForSaleData::clear_price_category() {
  price_category_ = 0u;
  clear_has_price_category();
}
::google::protobuf::uint32 PublishedFileDetails_ForSaleData::price_category() const {
  // @@protoc_insertion_point(field_get:proto.steam.PublishedFileDetails.ForSaleData.price_category)
  return price_category_;
}
void PublishedFileDetails_ForSaleData::set_price_category(::google::protobuf::uint32 value) {
  set_has_price_category();
  price_category_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.PublishedFileDetails.ForSaleData.price_category)
}

// optional .proto.steam.PublishedFileDetails.EPublishedFileForSaleStatus estatus = 3 [default = k_PFFSS_NotForSale];
bool PublishedFileDetails_ForSaleData::has_estatus() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PublishedFileDetails_ForSaleData::set_has_estatus() {
  _has_bits_[0] |= 0x00000002u;
}
void PublishedFileDetails_ForSaleData::clear_has_estatus() {
  _has_bits_[0] &= ~0x00000002u;
}
void PublishedFileDetails_ForSaleData::clear_estatus() {
  estatus_ = 0;
  clear_has_estatus();
}
::proto::steam::PublishedFileDetails_EPublishedFileForSaleStatus PublishedFileDetails_ForSaleData::estatus() const {
  // @@protoc_insertion_point(field_get:proto.steam.PublishedFileDetails.ForSaleData.estatus)
  return static_cast< ::proto::steam::PublishedFileDetails_EPublishedFileForSaleStatus >(estatus_);
}
void PublishedFileDetails_ForSaleData::set_estatus(::proto::steam::PublishedFileDetails_EPublishedFileForSaleStatus value) {
  assert(::proto::steam::PublishedFileDetails_EPublishedFileForSaleStatus_IsValid(value));
  set_has_estatus();
  estatus_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.PublishedFileDetails.ForSaleData.estatus)
}

// optional uint32 price_category_floor = 4;
bool PublishedFileDetails_ForSaleData::has_price_category_floor() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PublishedFileDetails_ForSaleData::set_has_price_category_floor() {
  _has_bits_[0] |= 0x00000010u;
}
void PublishedFileDetails_ForSaleData::clear_has_price_category_floor() {
  _has_bits_[0] &= ~0x00000010u;
}
void PublishedFileDetails_ForSaleData::clear_price_category_floor() {
  price_category_floor_ = 0u;
  clear_has_price_category_floor();
}
::google::protobuf::uint32 PublishedFileDetails_ForSaleData::price_category_floor() const {
  // @@protoc_insertion_point(field_get:proto.steam.PublishedFileDetails.ForSaleData.price_category_floor)
  return price_category_floor_;
}
void PublishedFileDetails_ForSaleData::set_price_category_floor(::google::protobuf::uint32 value) {
  set_has_price_category_floor();
  price_category_floor_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.PublishedFileDetails.ForSaleData.price_category_floor)
}

// optional bool price_is_pay_what_you_want = 5;
bool PublishedFileDetails_ForSaleData::has_price_is_pay_what_you_want() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PublishedFileDetails_ForSaleData::set_has_price_is_pay_what_you_want() {
  _has_bits_[0] |= 0x00000008u;
}
void PublishedFileDetails_ForSaleData::clear_has_price_is_pay_what_you_want() {
  _has_bits_[0] &= ~0x00000008u;
}
void PublishedFileDetails_ForSaleData::clear_price_is_pay_what_you_want() {
  price_is_pay_what_you_want_ = false;
  clear_has_price_is_pay_what_you_want();
}
bool PublishedFileDetails_ForSaleData::price_is_pay_what_you_want() const {
  // @@protoc_insertion_point(field_get:proto.steam.PublishedFileDetails.ForSaleData.price_is_pay_what_you_want)
  return price_is_pay_what_you_want_;
}
void PublishedFileDetails_ForSaleData::set_price_is_pay_what_you_want(bool value) {
  set_has_price_is_pay_what_you_want();
  price_is_pay_what_you_want_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.PublishedFileDetails.ForSaleData.price_is_pay_what_you_want)
}

// optional uint32 discount_percentage = 6;
bool PublishedFileDetails_ForSaleData::has_discount_percentage() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PublishedFileDetails_ForSaleData::set_has_discount_percentage() {
  _has_bits_[0] |= 0x00000020u;
}
void PublishedFileDetails_ForSaleData::clear_has_discount_percentage() {
  _has_bits_[0] &= ~0x00000020u;
}
void PublishedFileDetails_ForSaleData::clear_discount_percentage() {
  discount_percentage_ = 0u;
  clear_has_discount_percentage();
}
::google::protobuf::uint32 PublishedFileDetails_ForSaleData::discount_percentage() const {
  // @@protoc_insertion_point(field_get:proto.steam.PublishedFileDetails.ForSaleData.discount_percentage)
  return discount_percentage_;
}
void PublishedFileDetails_ForSaleData::set_discount_percentage(::google::protobuf::uint32 value) {
  set_has_discount_percentage();
  discount_percentage_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.PublishedFileDetails.ForSaleData.discount_percentage)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PublishedFileDetails_PlaytimeStats::kPlaytimeSecondsFieldNumber;
const int PublishedFileDetails_PlaytimeStats::kNumSessionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PublishedFileDetails_PlaytimeStats::PublishedFileDetails_PlaytimeStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.PublishedFileDetails.PlaytimeStats)
}
PublishedFileDetails_PlaytimeStats::PublishedFileDetails_PlaytimeStats(const PublishedFileDetails_PlaytimeStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&playtime_seconds_, &from.playtime_seconds_,
    reinterpret_cast<char*>(&num_sessions_) -
    reinterpret_cast<char*>(&playtime_seconds_) + sizeof(num_sessions_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.PublishedFileDetails.PlaytimeStats)
}

void PublishedFileDetails_PlaytimeStats::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&playtime_seconds_, 0, reinterpret_cast<char*>(&num_sessions_) -
    reinterpret_cast<char*>(&playtime_seconds_) + sizeof(num_sessions_));
}

PublishedFileDetails_PlaytimeStats::~PublishedFileDetails_PlaytimeStats() {
  // @@protoc_insertion_point(destructor:proto.steam.PublishedFileDetails.PlaytimeStats)
  SharedDtor();
}

void PublishedFileDetails_PlaytimeStats::SharedDtor() {
}

void PublishedFileDetails_PlaytimeStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PublishedFileDetails_PlaytimeStats::descriptor() {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PublishedFileDetails_PlaytimeStats& PublishedFileDetails_PlaytimeStats::default_instance() {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

PublishedFileDetails_PlaytimeStats* PublishedFileDetails_PlaytimeStats::New(::google::protobuf::Arena* arena) const {
  PublishedFileDetails_PlaytimeStats* n = new PublishedFileDetails_PlaytimeStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PublishedFileDetails_PlaytimeStats::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.PublishedFileDetails.PlaytimeStats)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&playtime_seconds_, 0, reinterpret_cast<char*>(&num_sessions_) -
      reinterpret_cast<char*>(&playtime_seconds_) + sizeof(num_sessions_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PublishedFileDetails_PlaytimeStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.PublishedFileDetails.PlaytimeStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 playtime_seconds = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_playtime_seconds();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playtime_seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 num_sessions = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_num_sessions();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &num_sessions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.PublishedFileDetails.PlaytimeStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.PublishedFileDetails.PlaytimeStats)
  return false;
#undef DO_
}

void PublishedFileDetails_PlaytimeStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.PublishedFileDetails.PlaytimeStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 playtime_seconds = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->playtime_seconds(), output);
  }

  // optional uint64 num_sessions = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->num_sessions(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.PublishedFileDetails.PlaytimeStats)
}

::google::protobuf::uint8* PublishedFileDetails_PlaytimeStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.PublishedFileDetails.PlaytimeStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 playtime_seconds = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->playtime_seconds(), target);
  }

  // optional uint64 num_sessions = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->num_sessions(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.PublishedFileDetails.PlaytimeStats)
  return target;
}

size_t PublishedFileDetails_PlaytimeStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.PublishedFileDetails.PlaytimeStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 playtime_seconds = 1;
    if (has_playtime_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playtime_seconds());
    }

    // optional uint64 num_sessions = 2;
    if (has_num_sessions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->num_sessions());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PublishedFileDetails_PlaytimeStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.PublishedFileDetails.PlaytimeStats)
  GOOGLE_DCHECK_NE(&from, this);
  const PublishedFileDetails_PlaytimeStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PublishedFileDetails_PlaytimeStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.PublishedFileDetails.PlaytimeStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.PublishedFileDetails.PlaytimeStats)
    MergeFrom(*source);
  }
}

void PublishedFileDetails_PlaytimeStats::MergeFrom(const PublishedFileDetails_PlaytimeStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.PublishedFileDetails.PlaytimeStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      playtime_seconds_ = from.playtime_seconds_;
    }
    if (cached_has_bits & 0x00000002u) {
      num_sessions_ = from.num_sessions_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PublishedFileDetails_PlaytimeStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.PublishedFileDetails.PlaytimeStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishedFileDetails_PlaytimeStats::CopyFrom(const PublishedFileDetails_PlaytimeStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.PublishedFileDetails.PlaytimeStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishedFileDetails_PlaytimeStats::IsInitialized() const {
  return true;
}

void PublishedFileDetails_PlaytimeStats::Swap(PublishedFileDetails_PlaytimeStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PublishedFileDetails_PlaytimeStats::InternalSwap(PublishedFileDetails_PlaytimeStats* other) {
  std::swap(playtime_seconds_, other->playtime_seconds_);
  std::swap(num_sessions_, other->num_sessions_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PublishedFileDetails_PlaytimeStats::GetMetadata() const {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PublishedFileDetails_PlaytimeStats

// optional uint64 playtime_seconds = 1;
bool PublishedFileDetails_PlaytimeStats::has_playtime_seconds() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PublishedFileDetails_PlaytimeStats::set_has_playtime_seconds() {
  _has_bits_[0] |= 0x00000001u;
}
void PublishedFileDetails_PlaytimeStats::clear_has_playtime_seconds() {
  _has_bits_[0] &= ~0x00000001u;
}
void PublishedFileDetails_PlaytimeStats::clear_playtime_seconds() {
  playtime_seconds_ = GOOGLE_ULONGLONG(0);
  clear_has_playtime_seconds();
}
::google::protobuf::uint64 PublishedFileDetails_PlaytimeStats::playtime_seconds() const {
  // @@protoc_insertion_point(field_get:proto.steam.PublishedFileDetails.PlaytimeStats.playtime_seconds)
  return playtime_seconds_;
}
void PublishedFileDetails_PlaytimeStats::set_playtime_seconds(::google::protobuf::uint64 value) {
  set_has_playtime_seconds();
  playtime_seconds_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.PublishedFileDetails.PlaytimeStats.playtime_seconds)
}

// optional uint64 num_sessions = 2;
bool PublishedFileDetails_PlaytimeStats::has_num_sessions() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PublishedFileDetails_PlaytimeStats::set_has_num_sessions() {
  _has_bits_[0] |= 0x00000002u;
}
void PublishedFileDetails_PlaytimeStats::clear_has_num_sessions() {
  _has_bits_[0] &= ~0x00000002u;
}
void PublishedFileDetails_PlaytimeStats::clear_num_sessions() {
  num_sessions_ = GOOGLE_ULONGLONG(0);
  clear_has_num_sessions();
}
::google::protobuf::uint64 PublishedFileDetails_PlaytimeStats::num_sessions() const {
  // @@protoc_insertion_point(field_get:proto.steam.PublishedFileDetails.PlaytimeStats.num_sessions)
  return num_sessions_;
}
void PublishedFileDetails_PlaytimeStats::set_num_sessions(::google::protobuf::uint64 value) {
  set_has_num_sessions();
  num_sessions_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.PublishedFileDetails.PlaytimeStats.num_sessions)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PublishedFileDetails::kResultFieldNumber;
const int PublishedFileDetails::kPublishedfileidFieldNumber;
const int PublishedFileDetails::kCreatorFieldNumber;
const int PublishedFileDetails::kCreatorAppidFieldNumber;
const int PublishedFileDetails::kConsumerAppidFieldNumber;
const int PublishedFileDetails::kConsumerShortcutidFieldNumber;
const int PublishedFileDetails::kFilenameFieldNumber;
const int PublishedFileDetails::kFileSizeFieldNumber;
const int PublishedFileDetails::kPreviewFileSizeFieldNumber;
const int PublishedFileDetails::kFileUrlFieldNumber;
const int PublishedFileDetails::kPreviewUrlFieldNumber;
const int PublishedFileDetails::kYoutubevideoidFieldNumber;
const int PublishedFileDetails::kUrlFieldNumber;
const int PublishedFileDetails::kHcontentFileFieldNumber;
const int PublishedFileDetails::kHcontentPreviewFieldNumber;
const int PublishedFileDetails::kTitleFieldNumber;
const int PublishedFileDetails::kFileDescriptionFieldNumber;
const int PublishedFileDetails::kShortDescriptionFieldNumber;
const int PublishedFileDetails::kTimeCreatedFieldNumber;
const int PublishedFileDetails::kTimeUpdatedFieldNumber;
const int PublishedFileDetails::kVisibilityFieldNumber;
const int PublishedFileDetails::kFlagsFieldNumber;
const int PublishedFileDetails::kWorkshopFileFieldNumber;
const int PublishedFileDetails::kWorkshopAcceptedFieldNumber;
const int PublishedFileDetails::kShowSubscribeAllFieldNumber;
const int PublishedFileDetails::kNumCommentsDeveloperFieldNumber;
const int PublishedFileDetails::kNumCommentsPublicFieldNumber;
const int PublishedFileDetails::kBannedFieldNumber;
const int PublishedFileDetails::kBanReasonFieldNumber;
const int PublishedFileDetails::kBannerFieldNumber;
const int PublishedFileDetails::kCanBeDeletedFieldNumber;
const int PublishedFileDetails::kIncompatibleFieldNumber;
const int PublishedFileDetails::kAppNameFieldNumber;
const int PublishedFileDetails::kFileTypeFieldNumber;
const int PublishedFileDetails::kCanSubscribeFieldNumber;
const int PublishedFileDetails::kSubscriptionsFieldNumber;
const int PublishedFileDetails::kFavoritedFieldNumber;
const int PublishedFileDetails::kFollowersFieldNumber;
const int PublishedFileDetails::kLifetimeSubscriptionsFieldNumber;
const int PublishedFileDetails::kLifetimeFavoritedFieldNumber;
const int PublishedFileDetails::kLifetimeFollowersFieldNumber;
const int PublishedFileDetails::kLifetimePlaytimeFieldNumber;
const int PublishedFileDetails::kLifetimePlaytimeSessionsFieldNumber;
const int PublishedFileDetails::kViewsFieldNumber;
const int PublishedFileDetails::kImageWidthFieldNumber;
const int PublishedFileDetails::kImageHeightFieldNumber;
const int PublishedFileDetails::kImageUrlFieldNumber;
const int PublishedFileDetails::kSpoilerTagFieldNumber;
const int PublishedFileDetails::kShortcutidFieldNumber;
const int PublishedFileDetails::kShortcutnameFieldNumber;
const int PublishedFileDetails::kNumChildrenFieldNumber;
const int PublishedFileDetails::kNumReportsFieldNumber;
const int PublishedFileDetails::kPreviewsFieldNumber;
const int PublishedFileDetails::kTagsFieldNumber;
const int PublishedFileDetails::kChildrenFieldNumber;
const int PublishedFileDetails::kKvtagsFieldNumber;
const int PublishedFileDetails::kVoteDataFieldNumber;
const int PublishedFileDetails::kPlaytimeStatsFieldNumber;
const int PublishedFileDetails::kTimeSubscribedFieldNumber;
const int PublishedFileDetails::kForSaleDataFieldNumber;
const int PublishedFileDetails::kMetadataFieldNumber;
const int PublishedFileDetails::kIncompatibleActorFieldNumber;
const int PublishedFileDetails::kIncompatibleTimestampFieldNumber;
const int PublishedFileDetails::kLanguageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PublishedFileDetails::PublishedFileDetails()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.PublishedFileDetails)
}
PublishedFileDetails::PublishedFileDetails(const PublishedFileDetails& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      previews_(from.previews_),
      tags_(from.tags_),
      children_(from.children_),
      kvtags_(from.kvtags_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_filename()) {
    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  file_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_file_url()) {
    file_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_url_);
  }
  preview_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_preview_url()) {
    preview_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.preview_url_);
  }
  youtubevideoid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_youtubevideoid()) {
    youtubevideoid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.youtubevideoid_);
  }
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_title()) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  file_description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_file_description()) {
    file_description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_description_);
  }
  short_description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_short_description()) {
    short_description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.short_description_);
  }
  ban_reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ban_reason()) {
    ban_reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ban_reason_);
  }
  app_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_app_name()) {
    app_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.app_name_);
  }
  image_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_image_url()) {
    image_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_url_);
  }
  shortcutname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_shortcutname()) {
    shortcutname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.shortcutname_);
  }
  metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_metadata()) {
    metadata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metadata_);
  }
  if (from.has_vote_data()) {
    vote_data_ = new ::proto::steam::PublishedFileDetails_VoteData(*from.vote_data_);
  } else {
    vote_data_ = NULL;
  }
  if (from.has_for_sale_data()) {
    for_sale_data_ = new ::proto::steam::PublishedFileDetails_ForSaleData(*from.for_sale_data_);
  } else {
    for_sale_data_ = NULL;
  }
  if (from.has_playtime_stats()) {
    playtime_stats_ = new ::proto::steam::PublishedFileDetails_PlaytimeStats(*from.playtime_stats_);
  } else {
    playtime_stats_ = NULL;
  }
  ::memcpy(&publishedfileid_, &from.publishedfileid_,
    reinterpret_cast<char*>(&lifetime_playtime_sessions_) -
    reinterpret_cast<char*>(&publishedfileid_) + sizeof(lifetime_playtime_sessions_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.PublishedFileDetails)
}

void PublishedFileDetails::SharedCtor() {
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  preview_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  youtubevideoid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  short_description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ban_reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  shortcutname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&vote_data_, 0, reinterpret_cast<char*>(&lifetime_playtime_sessions_) -
    reinterpret_cast<char*>(&vote_data_) + sizeof(lifetime_playtime_sessions_));
  _cached_size_ = 0;
}

PublishedFileDetails::~PublishedFileDetails() {
  // @@protoc_insertion_point(destructor:proto.steam.PublishedFileDetails)
  SharedDtor();
}

void PublishedFileDetails::SharedDtor() {
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  preview_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  youtubevideoid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  short_description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ban_reason_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  app_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  shortcutname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  metadata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete vote_data_;
  }
  if (this != internal_default_instance()) {
    delete for_sale_data_;
  }
  if (this != internal_default_instance()) {
    delete playtime_stats_;
  }
}

void PublishedFileDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PublishedFileDetails::descriptor() {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PublishedFileDetails& PublishedFileDetails::default_instance() {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

PublishedFileDetails* PublishedFileDetails::New(::google::protobuf::Arena* arena) const {
  PublishedFileDetails* n = new PublishedFileDetails;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PublishedFileDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.PublishedFileDetails)
  previews_.Clear();
  tags_.Clear();
  children_.Clear();
  kvtags_.Clear();
  if (_has_bits_[0 / 32] & 255u) {
    if (has_filename()) {
      GOOGLE_DCHECK(!filename_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*filename_.UnsafeRawStringPointer())->clear();
    }
    if (has_file_url()) {
      GOOGLE_DCHECK(!file_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*file_url_.UnsafeRawStringPointer())->clear();
    }
    if (has_preview_url()) {
      GOOGLE_DCHECK(!preview_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*preview_url_.UnsafeRawStringPointer())->clear();
    }
    if (has_youtubevideoid()) {
      GOOGLE_DCHECK(!youtubevideoid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*youtubevideoid_.UnsafeRawStringPointer())->clear();
    }
    if (has_url()) {
      GOOGLE_DCHECK(!url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*url_.UnsafeRawStringPointer())->clear();
    }
    if (has_title()) {
      GOOGLE_DCHECK(!title_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*title_.UnsafeRawStringPointer())->clear();
    }
    if (has_file_description()) {
      GOOGLE_DCHECK(!file_description_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*file_description_.UnsafeRawStringPointer())->clear();
    }
    if (has_short_description()) {
      GOOGLE_DCHECK(!short_description_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*short_description_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280u) {
    if (has_ban_reason()) {
      GOOGLE_DCHECK(!ban_reason_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*ban_reason_.UnsafeRawStringPointer())->clear();
    }
    if (has_app_name()) {
      GOOGLE_DCHECK(!app_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*app_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_image_url()) {
      GOOGLE_DCHECK(!image_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*image_url_.UnsafeRawStringPointer())->clear();
    }
    if (has_shortcutname()) {
      GOOGLE_DCHECK(!shortcutname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*shortcutname_.UnsafeRawStringPointer())->clear();
    }
    if (has_metadata()) {
      GOOGLE_DCHECK(!metadata_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*metadata_.UnsafeRawStringPointer())->clear();
    }
    if (has_vote_data()) {
      GOOGLE_DCHECK(vote_data_ != NULL);
      vote_data_->::proto::steam::PublishedFileDetails_VoteData::Clear();
    }
    if (has_for_sale_data()) {
      GOOGLE_DCHECK(for_sale_data_ != NULL);
      for_sale_data_->::proto::steam::PublishedFileDetails_ForSaleData::Clear();
    }
    if (has_playtime_stats()) {
      GOOGLE_DCHECK(playtime_stats_ != NULL);
      playtime_stats_->::proto::steam::PublishedFileDetails_PlaytimeStats::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    ::memset(&publishedfileid_, 0, reinterpret_cast<char*>(&preview_file_size_) -
      reinterpret_cast<char*>(&publishedfileid_) + sizeof(preview_file_size_));
  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    ::memset(&hcontent_file_, 0, reinterpret_cast<char*>(&workshop_accepted_) -
      reinterpret_cast<char*>(&hcontent_file_) + sizeof(workshop_accepted_));
  }
  if (_has_bits_[32 / 32] & 255u) {
    ::memset(&show_subscribe_all_, 0, reinterpret_cast<char*>(&can_be_deleted_) -
      reinterpret_cast<char*>(&show_subscribe_all_) + sizeof(can_be_deleted_));
  }
  if (_has_bits_[40 / 32] & 65280u) {
    ::memset(&incompatible_, 0, reinterpret_cast<char*>(&lifetime_followers_) -
      reinterpret_cast<char*>(&incompatible_) + sizeof(lifetime_followers_));
  }
  if (_has_bits_[48 / 32] & 16711680u) {
    ::memset(&views_, 0, reinterpret_cast<char*>(&incompatible_actor_) -
      reinterpret_cast<char*>(&views_) + sizeof(incompatible_actor_));
  }
  if (_has_bits_[56 / 32] & 251658240u) {
    ::memset(&incompatible_timestamp_, 0, reinterpret_cast<char*>(&lifetime_playtime_sessions_) -
      reinterpret_cast<char*>(&incompatible_timestamp_) + sizeof(lifetime_playtime_sessions_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PublishedFileDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.PublishedFileDetails)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 publishedfileid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_publishedfileid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &publishedfileid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 creator = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_creator();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &creator_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 creator_appid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_creator_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &creator_appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 consumer_appid = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_consumer_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &consumer_appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 consumer_shortcutid = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_consumer_shortcutid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &consumer_shortcutid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string filename = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.PublishedFileDetails.filename");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 file_size = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_file_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &file_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 preview_file_size = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_preview_file_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &preview_file_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string file_url = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file_url().data(), this->file_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.PublishedFileDetails.file_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string preview_url = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_preview_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->preview_url().data(), this->preview_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.PublishedFileDetails.preview_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string youtubevideoid = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_youtubevideoid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->youtubevideoid().data(), this->youtubevideoid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.PublishedFileDetails.youtubevideoid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string url = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.PublishedFileDetails.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 hcontent_file = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u)) {
          set_has_hcontent_file();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &hcontent_file_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 hcontent_preview = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(121u)) {
          set_has_hcontent_preview();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &hcontent_preview_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string title = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.PublishedFileDetails.title");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string file_description = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file_description().data(), this->file_description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.PublishedFileDetails.file_description");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string short_description = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_short_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->short_description().data(), this->short_description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.PublishedFileDetails.short_description");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time_created = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u)) {
          set_has_time_created();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_created_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time_updated = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u)) {
          set_has_time_updated();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_updated_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 visibility = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u)) {
          set_has_visibility();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &visibility_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 flags = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u)) {
          set_has_flags();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool workshop_file = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u)) {
          set_has_workshop_file();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &workshop_file_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool workshop_accepted = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u)) {
          set_has_workshop_accepted();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &workshop_accepted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool show_subscribe_all = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u)) {
          set_has_show_subscribe_all();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_subscribe_all_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_comments_developer = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u)) {
          set_has_num_comments_developer();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_comments_developer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_comments_public = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u)) {
          set_has_num_comments_public();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_comments_public_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool banned = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u)) {
          set_has_banned();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &banned_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ban_reason = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ban_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ban_reason().data(), this->ban_reason().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.PublishedFileDetails.ban_reason");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 banner = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(241u)) {
          set_has_banner();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &banner_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool can_be_deleted = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u)) {
          set_has_can_be_deleted();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_be_deleted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool incompatible = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(256u)) {
          set_has_incompatible();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &incompatible_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string app_name = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(266u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->app_name().data(), this->app_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.PublishedFileDetails.app_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 file_type = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(272u)) {
          set_has_file_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &file_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool can_subscribe = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(280u)) {
          set_has_can_subscribe();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_subscribe_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 subscriptions = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(288u)) {
          set_has_subscriptions();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &subscriptions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 favorited = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(296u)) {
          set_has_favorited();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &favorited_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 followers = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(304u)) {
          set_has_followers();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &followers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 lifetime_subscriptions = 39;
      case 39: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(312u)) {
          set_has_lifetime_subscriptions();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lifetime_subscriptions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 lifetime_favorited = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(320u)) {
          set_has_lifetime_favorited();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lifetime_favorited_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 lifetime_followers = 41;
      case 41: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(328u)) {
          set_has_lifetime_followers();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lifetime_followers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 views = 42;
      case 42: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(336u)) {
          set_has_views();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &views_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 image_width = 43;
      case 43: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(344u)) {
          set_has_image_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &image_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 image_height = 44;
      case 44: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(352u)) {
          set_has_image_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &image_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string image_url = 45;
      case 45: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(362u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->image_url().data(), this->image_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.PublishedFileDetails.image_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool spoiler_tag = 46;
      case 46: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(368u)) {
          set_has_spoiler_tag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &spoiler_tag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 shortcutid = 47;
      case 47: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(376u)) {
          set_has_shortcutid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shortcutid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string shortcutname = 48;
      case 48: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(386u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_shortcutname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->shortcutname().data(), this->shortcutname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.PublishedFileDetails.shortcutname");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_children = 49;
      case 49: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(392u)) {
          set_has_num_children();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_children_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_reports = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(400u)) {
          set_has_num_reports();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_reports_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.PublishedFileDetails.Preview previews = 51;
      case 51: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(410u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_previews()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.PublishedFileDetails.Tag tags = 52;
      case 52: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(418u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tags()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.PublishedFileDetails.Child children = 53;
      case 53: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(426u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_children()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.PublishedFileDetails.KVTag kvtags = 54;
      case 54: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(434u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_kvtags()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.steam.PublishedFileDetails.VoteData vote_data = 55;
      case 55: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(442u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vote_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time_subscribed = 56 [(.proto.steam.description) = "Only valid in PublishedFile.GetUserFiles and not normal PublishedFile.GetDetail calls"];
      case 56: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(448u)) {
          set_has_time_subscribed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_subscribed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.steam.PublishedFileDetails.ForSaleData for_sale_data = 57 [(.proto.steam.description) = "Pricing information, if applicable."];
      case 57: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(458u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_for_sale_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string metadata = 58 [(.proto.steam.description) = "Metadata associated with the item"];
      case 58: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(466u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_metadata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->metadata().data(), this->metadata().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.PublishedFileDetails.metadata");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 incompatible_actor = 59;
      case 59: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(473u)) {
          set_has_incompatible_actor();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &incompatible_actor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 incompatible_timestamp = 60;
      case 60: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(480u)) {
          set_has_incompatible_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &incompatible_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 language = 61 [default = 0, (.proto.steam.description) = "The language of the title and description."];
      case 61: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(488u)) {
          set_has_language();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &language_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 lifetime_playtime = 62;
      case 62: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(496u)) {
          set_has_lifetime_playtime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lifetime_playtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 lifetime_playtime_sessions = 63;
      case 63: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(504u)) {
          set_has_lifetime_playtime_sessions();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lifetime_playtime_sessions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.steam.PublishedFileDetails.PlaytimeStats playtime_stats = 64;
      case 64: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(514u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playtime_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.PublishedFileDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.PublishedFileDetails)
  return false;
#undef DO_
}

void PublishedFileDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.PublishedFileDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 result = 1;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  // optional uint64 publishedfileid = 2;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->publishedfileid(), output);
  }

  // optional fixed64 creator = 3;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->creator(), output);
  }

  // optional uint32 creator_appid = 4;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->creator_appid(), output);
  }

  // optional uint32 consumer_appid = 5;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->consumer_appid(), output);
  }

  // optional uint32 consumer_shortcutid = 6;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->consumer_shortcutid(), output);
  }

  // optional string filename = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.PublishedFileDetails.filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->filename(), output);
  }

  // optional uint64 file_size = 8;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->file_size(), output);
  }

  // optional uint64 preview_file_size = 9;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->preview_file_size(), output);
  }

  // optional string file_url = 10;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_url().data(), this->file_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.PublishedFileDetails.file_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->file_url(), output);
  }

  // optional string preview_url = 11;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->preview_url().data(), this->preview_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.PublishedFileDetails.preview_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->preview_url(), output);
  }

  // optional string youtubevideoid = 12;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->youtubevideoid().data(), this->youtubevideoid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.PublishedFileDetails.youtubevideoid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->youtubevideoid(), output);
  }

  // optional string url = 13;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.PublishedFileDetails.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->url(), output);
  }

  // optional fixed64 hcontent_file = 14;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(14, this->hcontent_file(), output);
  }

  // optional fixed64 hcontent_preview = 15;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(15, this->hcontent_preview(), output);
  }

  // optional string title = 16;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.PublishedFileDetails.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->title(), output);
  }

  // optional string file_description = 17;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_description().data(), this->file_description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.PublishedFileDetails.file_description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->file_description(), output);
  }

  // optional string short_description = 18;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->short_description().data(), this->short_description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.PublishedFileDetails.short_description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->short_description(), output);
  }

  // optional uint32 time_created = 19;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->time_created(), output);
  }

  // optional uint32 time_updated = 20;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->time_updated(), output);
  }

  // optional uint32 visibility = 21;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->visibility(), output);
  }

  // optional uint32 flags = 22;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->flags(), output);
  }

  // optional bool workshop_file = 23;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->workshop_file(), output);
  }

  // optional bool workshop_accepted = 24;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->workshop_accepted(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool show_subscribe_all = 25;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(25, this->show_subscribe_all(), output);
  }

  // optional int32 num_comments_developer = 26;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->num_comments_developer(), output);
  }

  // optional int32 num_comments_public = 27;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->num_comments_public(), output);
  }

  // optional bool banned = 28;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(28, this->banned(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string ban_reason = 29;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ban_reason().data(), this->ban_reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.PublishedFileDetails.ban_reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      29, this->ban_reason(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional fixed64 banner = 30;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(30, this->banner(), output);
  }

  // optional bool can_be_deleted = 31;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(31, this->can_be_deleted(), output);
  }

  // optional bool incompatible = 32;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(32, this->incompatible(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string app_name = 33;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->app_name().data(), this->app_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.PublishedFileDetails.app_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      33, this->app_name(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 file_type = 34;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(34, this->file_type(), output);
  }

  // optional bool can_subscribe = 35;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(35, this->can_subscribe(), output);
  }

  // optional uint32 subscriptions = 36;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(36, this->subscriptions(), output);
  }

  // optional uint32 favorited = 37;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(37, this->favorited(), output);
  }

  // optional uint32 followers = 38;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(38, this->followers(), output);
  }

  // optional uint32 lifetime_subscriptions = 39;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(39, this->lifetime_subscriptions(), output);
  }

  // optional uint32 lifetime_favorited = 40;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(40, this->lifetime_favorited(), output);
  }

  // optional uint32 lifetime_followers = 41;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(41, this->lifetime_followers(), output);
  }

  // optional uint32 views = 42;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(42, this->views(), output);
  }

  // optional uint32 image_width = 43;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(43, this->image_width(), output);
  }

  // optional uint32 image_height = 44;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(44, this->image_height(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string image_url = 45;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->image_url().data(), this->image_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.PublishedFileDetails.image_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      45, this->image_url(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool spoiler_tag = 46;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(46, this->spoiler_tag(), output);
  }

  // optional uint32 shortcutid = 47;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(47, this->shortcutid(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string shortcutname = 48;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->shortcutname().data(), this->shortcutname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.PublishedFileDetails.shortcutname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      48, this->shortcutname(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 num_children = 49;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(49, this->num_children(), output);
  }

  // optional uint32 num_reports = 50;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(50, this->num_reports(), output);
  }

  // repeated .proto.steam.PublishedFileDetails.Preview previews = 51;
  for (unsigned int i = 0, n = this->previews_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      51, this->previews(i), output);
  }

  // repeated .proto.steam.PublishedFileDetails.Tag tags = 52;
  for (unsigned int i = 0, n = this->tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      52, this->tags(i), output);
  }

  // repeated .proto.steam.PublishedFileDetails.Child children = 53;
  for (unsigned int i = 0, n = this->children_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      53, this->children(i), output);
  }

  // repeated .proto.steam.PublishedFileDetails.KVTag kvtags = 54;
  for (unsigned int i = 0, n = this->kvtags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      54, this->kvtags(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .proto.steam.PublishedFileDetails.VoteData vote_data = 55;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      55, *this->vote_data_, output);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 time_subscribed = 56 [(.proto.steam.description) = "Only valid in PublishedFile.GetUserFiles and not normal PublishedFile.GetDetail calls"];
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(56, this->time_subscribed(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .proto.steam.PublishedFileDetails.ForSaleData for_sale_data = 57 [(.proto.steam.description) = "Pricing information, if applicable."];
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      57, *this->for_sale_data_, output);
  }

  // optional string metadata = 58 [(.proto.steam.description) = "Metadata associated with the item"];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->metadata().data(), this->metadata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.PublishedFileDetails.metadata");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      58, this->metadata(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional fixed64 incompatible_actor = 59;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(59, this->incompatible_actor(), output);
  }

  // optional uint32 incompatible_timestamp = 60;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(60, this->incompatible_timestamp(), output);
  }

  // optional int32 language = 61 [default = 0, (.proto.steam.description) = "The language of the title and description."];
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(61, this->language(), output);
  }

  // optional uint64 lifetime_playtime = 62;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(62, this->lifetime_playtime(), output);
  }

  // optional uint64 lifetime_playtime_sessions = 63;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(63, this->lifetime_playtime_sessions(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .proto.steam.PublishedFileDetails.PlaytimeStats playtime_stats = 64;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      64, *this->playtime_stats_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.PublishedFileDetails)
}

::google::protobuf::uint8* PublishedFileDetails::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.PublishedFileDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 result = 1;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  // optional uint64 publishedfileid = 2;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->publishedfileid(), target);
  }

  // optional fixed64 creator = 3;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->creator(), target);
  }

  // optional uint32 creator_appid = 4;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->creator_appid(), target);
  }

  // optional uint32 consumer_appid = 5;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->consumer_appid(), target);
  }

  // optional uint32 consumer_shortcutid = 6;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->consumer_shortcutid(), target);
  }

  // optional string filename = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.PublishedFileDetails.filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->filename(), target);
  }

  // optional uint64 file_size = 8;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->file_size(), target);
  }

  // optional uint64 preview_file_size = 9;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->preview_file_size(), target);
  }

  // optional string file_url = 10;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_url().data(), this->file_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.PublishedFileDetails.file_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->file_url(), target);
  }

  // optional string preview_url = 11;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->preview_url().data(), this->preview_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.PublishedFileDetails.preview_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->preview_url(), target);
  }

  // optional string youtubevideoid = 12;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->youtubevideoid().data(), this->youtubevideoid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.PublishedFileDetails.youtubevideoid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->youtubevideoid(), target);
  }

  // optional string url = 13;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.PublishedFileDetails.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->url(), target);
  }

  // optional fixed64 hcontent_file = 14;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(14, this->hcontent_file(), target);
  }

  // optional fixed64 hcontent_preview = 15;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(15, this->hcontent_preview(), target);
  }

  // optional string title = 16;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.PublishedFileDetails.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->title(), target);
  }

  // optional string file_description = 17;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_description().data(), this->file_description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.PublishedFileDetails.file_description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->file_description(), target);
  }

  // optional string short_description = 18;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->short_description().data(), this->short_description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.PublishedFileDetails.short_description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->short_description(), target);
  }

  // optional uint32 time_created = 19;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->time_created(), target);
  }

  // optional uint32 time_updated = 20;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->time_updated(), target);
  }

  // optional uint32 visibility = 21;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->visibility(), target);
  }

  // optional uint32 flags = 22;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->flags(), target);
  }

  // optional bool workshop_file = 23;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->workshop_file(), target);
  }

  // optional bool workshop_accepted = 24;
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(24, this->workshop_accepted(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool show_subscribe_all = 25;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(25, this->show_subscribe_all(), target);
  }

  // optional int32 num_comments_developer = 26;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->num_comments_developer(), target);
  }

  // optional int32 num_comments_public = 27;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->num_comments_public(), target);
  }

  // optional bool banned = 28;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(28, this->banned(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string ban_reason = 29;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ban_reason().data(), this->ban_reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.PublishedFileDetails.ban_reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        29, this->ban_reason(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional fixed64 banner = 30;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(30, this->banner(), target);
  }

  // optional bool can_be_deleted = 31;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(31, this->can_be_deleted(), target);
  }

  // optional bool incompatible = 32;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(32, this->incompatible(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string app_name = 33;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->app_name().data(), this->app_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.PublishedFileDetails.app_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        33, this->app_name(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 file_type = 34;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(34, this->file_type(), target);
  }

  // optional bool can_subscribe = 35;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(35, this->can_subscribe(), target);
  }

  // optional uint32 subscriptions = 36;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(36, this->subscriptions(), target);
  }

  // optional uint32 favorited = 37;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(37, this->favorited(), target);
  }

  // optional uint32 followers = 38;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(38, this->followers(), target);
  }

  // optional uint32 lifetime_subscriptions = 39;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(39, this->lifetime_subscriptions(), target);
  }

  // optional uint32 lifetime_favorited = 40;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(40, this->lifetime_favorited(), target);
  }

  // optional uint32 lifetime_followers = 41;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(41, this->lifetime_followers(), target);
  }

  // optional uint32 views = 42;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(42, this->views(), target);
  }

  // optional uint32 image_width = 43;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(43, this->image_width(), target);
  }

  // optional uint32 image_height = 44;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(44, this->image_height(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string image_url = 45;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->image_url().data(), this->image_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.PublishedFileDetails.image_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        45, this->image_url(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool spoiler_tag = 46;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(46, this->spoiler_tag(), target);
  }

  // optional uint32 shortcutid = 47;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(47, this->shortcutid(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string shortcutname = 48;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->shortcutname().data(), this->shortcutname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.PublishedFileDetails.shortcutname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        48, this->shortcutname(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 num_children = 49;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(49, this->num_children(), target);
  }

  // optional uint32 num_reports = 50;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(50, this->num_reports(), target);
  }

  // repeated .proto.steam.PublishedFileDetails.Preview previews = 51;
  for (unsigned int i = 0, n = this->previews_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        51, this->previews(i), deterministic, target);
  }

  // repeated .proto.steam.PublishedFileDetails.Tag tags = 52;
  for (unsigned int i = 0, n = this->tags_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        52, this->tags(i), deterministic, target);
  }

  // repeated .proto.steam.PublishedFileDetails.Child children = 53;
  for (unsigned int i = 0, n = this->children_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        53, this->children(i), deterministic, target);
  }

  // repeated .proto.steam.PublishedFileDetails.KVTag kvtags = 54;
  for (unsigned int i = 0, n = this->kvtags_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        54, this->kvtags(i), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .proto.steam.PublishedFileDetails.VoteData vote_data = 55;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        55, *this->vote_data_, deterministic, target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 time_subscribed = 56 [(.proto.steam.description) = "Only valid in PublishedFile.GetUserFiles and not normal PublishedFile.GetDetail calls"];
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(56, this->time_subscribed(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .proto.steam.PublishedFileDetails.ForSaleData for_sale_data = 57 [(.proto.steam.description) = "Pricing information, if applicable."];
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        57, *this->for_sale_data_, deterministic, target);
  }

  // optional string metadata = 58 [(.proto.steam.description) = "Metadata associated with the item"];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->metadata().data(), this->metadata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.PublishedFileDetails.metadata");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        58, this->metadata(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional fixed64 incompatible_actor = 59;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(59, this->incompatible_actor(), target);
  }

  // optional uint32 incompatible_timestamp = 60;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(60, this->incompatible_timestamp(), target);
  }

  // optional int32 language = 61 [default = 0, (.proto.steam.description) = "The language of the title and description."];
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(61, this->language(), target);
  }

  // optional uint64 lifetime_playtime = 62;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(62, this->lifetime_playtime(), target);
  }

  // optional uint64 lifetime_playtime_sessions = 63;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(63, this->lifetime_playtime_sessions(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .proto.steam.PublishedFileDetails.PlaytimeStats playtime_stats = 64;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        64, *this->playtime_stats_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.PublishedFileDetails)
  return target;
}

size_t PublishedFileDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.PublishedFileDetails)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.steam.PublishedFileDetails.Preview previews = 51;
  {
    unsigned int count = this->previews_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->previews(i));
    }
  }

  // repeated .proto.steam.PublishedFileDetails.Tag tags = 52;
  {
    unsigned int count = this->tags_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tags(i));
    }
  }

  // repeated .proto.steam.PublishedFileDetails.Child children = 53;
  {
    unsigned int count = this->children_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->children(i));
    }
  }

  // repeated .proto.steam.PublishedFileDetails.KVTag kvtags = 54;
  {
    unsigned int count = this->kvtags_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->kvtags(i));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string filename = 7;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional string file_url = 10;
    if (has_file_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_url());
    }

    // optional string preview_url = 11;
    if (has_preview_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->preview_url());
    }

    // optional string youtubevideoid = 12;
    if (has_youtubevideoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->youtubevideoid());
    }

    // optional string url = 13;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional string title = 16;
    if (has_title()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string file_description = 17;
    if (has_file_description()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_description());
    }

    // optional string short_description = 18;
    if (has_short_description()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->short_description());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional string ban_reason = 29;
    if (has_ban_reason()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ban_reason());
    }

    // optional string app_name = 33;
    if (has_app_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->app_name());
    }

    // optional string image_url = 45;
    if (has_image_url()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->image_url());
    }

    // optional string shortcutname = 48;
    if (has_shortcutname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->shortcutname());
    }

    // optional string metadata = 58 [(.proto.steam.description) = "Metadata associated with the item"];
    if (has_metadata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->metadata());
    }

    // optional .proto.steam.PublishedFileDetails.VoteData vote_data = 55;
    if (has_vote_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->vote_data_);
    }

    // optional .proto.steam.PublishedFileDetails.ForSaleData for_sale_data = 57 [(.proto.steam.description) = "Pricing information, if applicable."];
    if (has_for_sale_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->for_sale_data_);
    }

    // optional .proto.steam.PublishedFileDetails.PlaytimeStats playtime_stats = 64;
    if (has_playtime_stats()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->playtime_stats_);
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional uint64 publishedfileid = 2;
    if (has_publishedfileid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->publishedfileid());
    }

    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // optional uint32 creator_appid = 4;
    if (has_creator_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->creator_appid());
    }

    // optional fixed64 creator = 3;
    if (has_creator()) {
      total_size += 1 + 8;
    }

    // optional uint32 consumer_appid = 5;
    if (has_consumer_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->consumer_appid());
    }

    // optional uint32 consumer_shortcutid = 6;
    if (has_consumer_shortcutid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->consumer_shortcutid());
    }

    // optional uint64 file_size = 8;
    if (has_file_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->file_size());
    }

    // optional uint64 preview_file_size = 9;
    if (has_preview_file_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->preview_file_size());
    }

  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    // optional fixed64 hcontent_file = 14;
    if (has_hcontent_file()) {
      total_size += 1 + 8;
    }

    // optional fixed64 hcontent_preview = 15;
    if (has_hcontent_preview()) {
      total_size += 1 + 8;
    }

    // optional uint32 time_created = 19;
    if (has_time_created()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_created());
    }

    // optional uint32 time_updated = 20;
    if (has_time_updated()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_updated());
    }

    // optional uint32 visibility = 21;
    if (has_visibility()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->visibility());
    }

    // optional uint32 flags = 22;
    if (has_flags()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

    // optional bool workshop_file = 23;
    if (has_workshop_file()) {
      total_size += 2 + 1;
    }

    // optional bool workshop_accepted = 24;
    if (has_workshop_accepted()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[32 / 32] & 255u) {
    // optional bool show_subscribe_all = 25;
    if (has_show_subscribe_all()) {
      total_size += 2 + 1;
    }

    // optional bool banned = 28;
    if (has_banned()) {
      total_size += 2 + 1;
    }

    // optional int32 num_comments_developer = 26;
    if (has_num_comments_developer()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_comments_developer());
    }

    // optional fixed64 banner = 30;
    if (has_banner()) {
      total_size += 2 + 8;
    }

    // optional int32 num_comments_public = 27;
    if (has_num_comments_public()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_comments_public());
    }

    // optional uint32 file_type = 34;
    if (has_file_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->file_type());
    }

    // optional uint32 subscriptions = 36;
    if (has_subscriptions()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->subscriptions());
    }

    // optional bool can_be_deleted = 31;
    if (has_can_be_deleted()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[40 / 32] & 65280u) {
    // optional bool incompatible = 32;
    if (has_incompatible()) {
      total_size += 2 + 1;
    }

    // optional bool can_subscribe = 35;
    if (has_can_subscribe()) {
      total_size += 2 + 1;
    }

    // optional bool spoiler_tag = 46;
    if (has_spoiler_tag()) {
      total_size += 2 + 1;
    }

    // optional uint32 favorited = 37;
    if (has_favorited()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->favorited());
    }

    // optional uint32 followers = 38;
    if (has_followers()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->followers());
    }

    // optional uint32 lifetime_subscriptions = 39;
    if (has_lifetime_subscriptions()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lifetime_subscriptions());
    }

    // optional uint32 lifetime_favorited = 40;
    if (has_lifetime_favorited()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lifetime_favorited());
    }

    // optional uint32 lifetime_followers = 41;
    if (has_lifetime_followers()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lifetime_followers());
    }

  }
  if (_has_bits_[48 / 32] & 16711680u) {
    // optional uint32 views = 42;
    if (has_views()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->views());
    }

    // optional uint32 image_width = 43;
    if (has_image_width()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->image_width());
    }

    // optional uint32 image_height = 44;
    if (has_image_height()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->image_height());
    }

    // optional uint32 shortcutid = 47;
    if (has_shortcutid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shortcutid());
    }

    // optional uint32 num_children = 49;
    if (has_num_children()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_children());
    }

    // optional uint32 num_reports = 50;
    if (has_num_reports()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_reports());
    }

    // optional uint32 time_subscribed = 56 [(.proto.steam.description) = "Only valid in PublishedFile.GetUserFiles and not normal PublishedFile.GetDetail calls"];
    if (has_time_subscribed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_subscribed());
    }

    // optional fixed64 incompatible_actor = 59;
    if (has_incompatible_actor()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[56 / 32] & 251658240u) {
    // optional uint32 incompatible_timestamp = 60;
    if (has_incompatible_timestamp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->incompatible_timestamp());
    }

    // optional int32 language = 61 [default = 0, (.proto.steam.description) = "The language of the title and description."];
    if (has_language()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->language());
    }

    // optional uint64 lifetime_playtime = 62;
    if (has_lifetime_playtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lifetime_playtime());
    }

    // optional uint64 lifetime_playtime_sessions = 63;
    if (has_lifetime_playtime_sessions()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lifetime_playtime_sessions());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PublishedFileDetails::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.PublishedFileDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const PublishedFileDetails* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PublishedFileDetails>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.PublishedFileDetails)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.PublishedFileDetails)
    MergeFrom(*source);
  }
}

void PublishedFileDetails::MergeFrom(const PublishedFileDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.PublishedFileDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  previews_.MergeFrom(from.previews_);
  tags_.MergeFrom(from.tags_);
  children_.MergeFrom(from.children_);
  kvtags_.MergeFrom(from.kvtags_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_filename();
      filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_file_url();
      file_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_url_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_preview_url();
      preview_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.preview_url_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_youtubevideoid();
      youtubevideoid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.youtubevideoid_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_title();
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_file_description();
      file_description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_description_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has_short_description();
      short_description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.short_description_);
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      set_has_ban_reason();
      ban_reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ban_reason_);
    }
    if (cached_has_bits & 0x00000200u) {
      set_has_app_name();
      app_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.app_name_);
    }
    if (cached_has_bits & 0x00000400u) {
      set_has_image_url();
      image_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_url_);
    }
    if (cached_has_bits & 0x00000800u) {
      set_has_shortcutname();
      shortcutname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.shortcutname_);
    }
    if (cached_has_bits & 0x00001000u) {
      set_has_metadata();
      metadata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.metadata_);
    }
    if (cached_has_bits & 0x00002000u) {
      mutable_vote_data()->::proto::steam::PublishedFileDetails_VoteData::MergeFrom(from.vote_data());
    }
    if (cached_has_bits & 0x00004000u) {
      mutable_for_sale_data()->::proto::steam::PublishedFileDetails_ForSaleData::MergeFrom(from.for_sale_data());
    }
    if (cached_has_bits & 0x00008000u) {
      mutable_playtime_stats()->::proto::steam::PublishedFileDetails_PlaytimeStats::MergeFrom(from.playtime_stats());
    }
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      publishedfileid_ = from.publishedfileid_;
    }
    if (cached_has_bits & 0x00020000u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00040000u) {
      creator_appid_ = from.creator_appid_;
    }
    if (cached_has_bits & 0x00080000u) {
      creator_ = from.creator_;
    }
    if (cached_has_bits & 0x00100000u) {
      consumer_appid_ = from.consumer_appid_;
    }
    if (cached_has_bits & 0x00200000u) {
      consumer_shortcutid_ = from.consumer_shortcutid_;
    }
    if (cached_has_bits & 0x00400000u) {
      file_size_ = from.file_size_;
    }
    if (cached_has_bits & 0x00800000u) {
      preview_file_size_ = from.preview_file_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      hcontent_file_ = from.hcontent_file_;
    }
    if (cached_has_bits & 0x02000000u) {
      hcontent_preview_ = from.hcontent_preview_;
    }
    if (cached_has_bits & 0x04000000u) {
      time_created_ = from.time_created_;
    }
    if (cached_has_bits & 0x08000000u) {
      time_updated_ = from.time_updated_;
    }
    if (cached_has_bits & 0x10000000u) {
      visibility_ = from.visibility_;
    }
    if (cached_has_bits & 0x20000000u) {
      flags_ = from.flags_;
    }
    if (cached_has_bits & 0x40000000u) {
      workshop_file_ = from.workshop_file_;
    }
    if (cached_has_bits & 0x80000000u) {
      workshop_accepted_ = from.workshop_accepted_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      show_subscribe_all_ = from.show_subscribe_all_;
    }
    if (cached_has_bits & 0x00000002u) {
      banned_ = from.banned_;
    }
    if (cached_has_bits & 0x00000004u) {
      num_comments_developer_ = from.num_comments_developer_;
    }
    if (cached_has_bits & 0x00000008u) {
      banner_ = from.banner_;
    }
    if (cached_has_bits & 0x00000010u) {
      num_comments_public_ = from.num_comments_public_;
    }
    if (cached_has_bits & 0x00000020u) {
      file_type_ = from.file_type_;
    }
    if (cached_has_bits & 0x00000040u) {
      subscriptions_ = from.subscriptions_;
    }
    if (cached_has_bits & 0x00000080u) {
      can_be_deleted_ = from.can_be_deleted_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      incompatible_ = from.incompatible_;
    }
    if (cached_has_bits & 0x00000200u) {
      can_subscribe_ = from.can_subscribe_;
    }
    if (cached_has_bits & 0x00000400u) {
      spoiler_tag_ = from.spoiler_tag_;
    }
    if (cached_has_bits & 0x00000800u) {
      favorited_ = from.favorited_;
    }
    if (cached_has_bits & 0x00001000u) {
      followers_ = from.followers_;
    }
    if (cached_has_bits & 0x00002000u) {
      lifetime_subscriptions_ = from.lifetime_subscriptions_;
    }
    if (cached_has_bits & 0x00004000u) {
      lifetime_favorited_ = from.lifetime_favorited_;
    }
    if (cached_has_bits & 0x00008000u) {
      lifetime_followers_ = from.lifetime_followers_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      views_ = from.views_;
    }
    if (cached_has_bits & 0x00020000u) {
      image_width_ = from.image_width_;
    }
    if (cached_has_bits & 0x00040000u) {
      image_height_ = from.image_height_;
    }
    if (cached_has_bits & 0x00080000u) {
      shortcutid_ = from.shortcutid_;
    }
    if (cached_has_bits & 0x00100000u) {
      num_children_ = from.num_children_;
    }
    if (cached_has_bits & 0x00200000u) {
      num_reports_ = from.num_reports_;
    }
    if (cached_has_bits & 0x00400000u) {
      time_subscribed_ = from.time_subscribed_;
    }
    if (cached_has_bits & 0x00800000u) {
      incompatible_actor_ = from.incompatible_actor_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 251658240u) {
    if (cached_has_bits & 0x01000000u) {
      incompatible_timestamp_ = from.incompatible_timestamp_;
    }
    if (cached_has_bits & 0x02000000u) {
      language_ = from.language_;
    }
    if (cached_has_bits & 0x04000000u) {
      lifetime_playtime_ = from.lifetime_playtime_;
    }
    if (cached_has_bits & 0x08000000u) {
      lifetime_playtime_sessions_ = from.lifetime_playtime_sessions_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void PublishedFileDetails::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.PublishedFileDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishedFileDetails::CopyFrom(const PublishedFileDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.PublishedFileDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishedFileDetails::IsInitialized() const {
  return true;
}

void PublishedFileDetails::Swap(PublishedFileDetails* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PublishedFileDetails::InternalSwap(PublishedFileDetails* other) {
  previews_.InternalSwap(&other->previews_);
  tags_.InternalSwap(&other->tags_);
  children_.InternalSwap(&other->children_);
  kvtags_.InternalSwap(&other->kvtags_);
  filename_.Swap(&other->filename_);
  file_url_.Swap(&other->file_url_);
  preview_url_.Swap(&other->preview_url_);
  youtubevideoid_.Swap(&other->youtubevideoid_);
  url_.Swap(&other->url_);
  title_.Swap(&other->title_);
  file_description_.Swap(&other->file_description_);
  short_description_.Swap(&other->short_description_);
  ban_reason_.Swap(&other->ban_reason_);
  app_name_.Swap(&other->app_name_);
  image_url_.Swap(&other->image_url_);
  shortcutname_.Swap(&other->shortcutname_);
  metadata_.Swap(&other->metadata_);
  std::swap(vote_data_, other->vote_data_);
  std::swap(for_sale_data_, other->for_sale_data_);
  std::swap(playtime_stats_, other->playtime_stats_);
  std::swap(publishedfileid_, other->publishedfileid_);
  std::swap(result_, other->result_);
  std::swap(creator_appid_, other->creator_appid_);
  std::swap(creator_, other->creator_);
  std::swap(consumer_appid_, other->consumer_appid_);
  std::swap(consumer_shortcutid_, other->consumer_shortcutid_);
  std::swap(file_size_, other->file_size_);
  std::swap(preview_file_size_, other->preview_file_size_);
  std::swap(hcontent_file_, other->hcontent_file_);
  std::swap(hcontent_preview_, other->hcontent_preview_);
  std::swap(time_created_, other->time_created_);
  std::swap(time_updated_, other->time_updated_);
  std::swap(visibility_, other->visibility_);
  std::swap(flags_, other->flags_);
  std::swap(workshop_file_, other->workshop_file_);
  std::swap(workshop_accepted_, other->workshop_accepted_);
  std::swap(show_subscribe_all_, other->show_subscribe_all_);
  std::swap(banned_, other->banned_);
  std::swap(num_comments_developer_, other->num_comments_developer_);
  std::swap(banner_, other->banner_);
  std::swap(num_comments_public_, other->num_comments_public_);
  std::swap(file_type_, other->file_type_);
  std::swap(subscriptions_, other->subscriptions_);
  std::swap(can_be_deleted_, other->can_be_deleted_);
  std::swap(incompatible_, other->incompatible_);
  std::swap(can_subscribe_, other->can_subscribe_);
  std::swap(spoiler_tag_, other->spoiler_tag_);
  std::swap(favorited_, other->favorited_);
  std::swap(followers_, other->followers_);
  std::swap(lifetime_subscriptions_, other->lifetime_subscriptions_);
  std::swap(lifetime_favorited_, other->lifetime_favorited_);
  std::swap(lifetime_followers_, other->lifetime_followers_);
  std::swap(views_, other->views_);
  std::swap(image_width_, other->image_width_);
  std::swap(image_height_, other->image_height_);
  std::swap(shortcutid_, other->shortcutid_);
  std::swap(num_children_, other->num_children_);
  std::swap(num_reports_, other->num_reports_);
  std::swap(time_subscribed_, other->time_subscribed_);
  std::swap(incompatible_actor_, other->incompatible_actor_);
  std::swap(incompatible_timestamp_, other->incompatible_timestamp_);
  std::swap(language_, other->language_);
  std::swap(lifetime_playtime_, other->lifetime_playtime_);
  std::swap(lifetime_playtime_sessions_, other->lifetime_playtime_sessions_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  std::swap(_has_bits_[1], other->_has_bits_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PublishedFileDetails::GetMetadata() const {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PublishedFileDetails

// optional uint32 result = 1;
bool PublishedFileDetails::has_result() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void PublishedFileDetails::set_has_result() {
  _has_bits_[0] |= 0x00020000u;
}
void PublishedFileDetails::clear_has_result() {
  _has_bits_[0] &= ~0x00020000u;
}
void PublishedFileDetails::clear_result() {
  result_ = 0u;
  clear_has_result();
}
::google::protobuf::uint32 PublishedFileDetails::result() const {
  // @@protoc_insertion_point(field_get:proto.steam.PublishedFileDetails.result)
  return result_;
}
void PublishedFileDetails::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.PublishedFileDetails.result)
}

// optional uint64 publishedfileid = 2;
bool PublishedFileDetails::has_publishedfileid() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void PublishedFileDetails::set_has_publishedfileid() {
  _has_bits_[0] |= 0x00010000u;
}
void PublishedFileDetails::clear_has_publishedfileid() {
  _has_bits_[0] &= ~0x00010000u;
}
void PublishedFileDetails::clear_publishedfileid() {
  publishedfileid_ = GOOGLE_ULONGLONG(0);
  clear_has_publishedfileid();
}
::google::protobuf::uint64 PublishedFileDetails::publishedfileid() const {
  // @@protoc_insertion_point(field_get:proto.steam.PublishedFileDetails.publishedfileid)
  return publishedfileid_;
}
void PublishedFileDetails::set_publishedfileid(::google::protobuf::uint64 value) {
  set_has_publishedfileid();
  publishedfileid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.PublishedFileDetails.publishedfileid)
}

// optional fixed64 creator = 3;
bool PublishedFileDetails::has_creator() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void PublishedFileDetails::set_has_creator() {
  _has_bits_[0] |= 0x00080000u;
}
void PublishedFileDetails::clear_has_creator() {
  _has_bits_[0] &= ~0x00080000u;
}
void PublishedFileDetails::clear_creator() {
  creator_ = GOOGLE_ULONGLONG(0);
  clear_has_creator();
}
::google::protobuf::uint64 PublishedFileDetails::creator() const {
  // @@protoc_insertion_point(field_get:proto.steam.PublishedFileDetails.creator)
  return creator_;
}
void PublishedFileDetails::set_creator(::google::protobuf::uint64 value) {
  set_has_creator();
  creator_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.PublishedFileDetails.creator)
}

// optional uint32 creator_appid = 4;
bool PublishedFileDetails::has_creator_appid() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void PublishedFileDetails::set_has_creator_appid() {
  _has_bits_[0] |= 0x00040000u;
}
void PublishedFileDetails::clear_has_creator_appid() {
  _has_bits_[0] &= ~0x00040000u;
}
void PublishedFileDetails::clear_creator_appid() {
  creator_appid_ = 0u;
  clear_has_creator_appid();
}
::google::protobuf::uint32 PublishedFileDetails::creator_appid() const {
  // @@protoc_insertion_point(field_get:proto.steam.PublishedFileDetails.creator_appid)
  return creator_appid_;
}
void PublishedFileDetails::set_creator_appid(::google::protobuf::uint32 value) {
  set_has_creator_appid();
  creator_appid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.PublishedFileDetails.creator_appid)
}

// optional uint32 consumer_appid = 5;
bool PublishedFileDetails::has_consumer_appid() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void PublishedFileDetails::set_has_consumer_appid() {
  _has_bits_[0] |= 0x00100000u;
}
void PublishedFileDetails::clear_has_consumer_appid() {
  _has_bits_[0] &= ~0x00100000u;
}
void PublishedFileDetails::clear_consumer_appid() {
  consumer_appid_ = 0u;
  clear_has_consumer_appid();
}
::google::protobuf::uint32 PublishedFileDetails::consumer_appid() const {
  // @@protoc_insertion_point(field_get:proto.steam.PublishedFileDetails.consumer_appid)
  return consumer_appid_;
}
void PublishedFileDetails::set_consumer_appid(::google::protobuf::uint32 value) {
  set_has_consumer_appid();
  consumer_appid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.PublishedFileDetails.consumer_appid)
}

// optional uint32 consumer_shortcutid = 6;
bool PublishedFileDetails::has_consumer_shortcutid() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void PublishedFileDetails::set_has_consumer_shortcutid() {
  _has_bits_[0] |= 0x00200000u;
}
void PublishedFileDetails::clear_has_consumer_shortcutid() {
  _has_bits_[0] &= ~0x00200000u;
}
void PublishedFileDetails::clear_consumer_shortcutid() {
  consumer_shortcutid_ = 0u;
  clear_has_consumer_shortcutid();
}
::google::protobuf::uint32 PublishedFileDetails::consumer_shortcutid() const {
  // @@protoc_insertion_point(field_get:proto.steam.PublishedFileDetails.consumer_shortcutid)
  return consumer_shortcutid_;
}
void PublishedFileDetails::set_consumer_shortcutid(::google::protobuf::uint32 value) {
  set_has_consumer_shortcutid();
  consumer_shortcutid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.PublishedFileDetails.consumer_shortcutid)
}

// optional string filename = 7;
bool PublishedFileDetails::has_filename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PublishedFileDetails::set_has_filename() {
  _has_bits_[0] |= 0x00000001u;
}
void PublishedFileDetails::clear_has_filename() {
  _has_bits_[0] &= ~0x00000001u;
}
void PublishedFileDetails::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_filename();
}
const ::std::string& PublishedFileDetails::filename() const {
  // @@protoc_insertion_point(field_get:proto.steam.PublishedFileDetails.filename)
  return filename_.GetNoArena();
}
void PublishedFileDetails::set_filename(const ::std::string& value) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.PublishedFileDetails.filename)
}
#if LANG_CXX11
void PublishedFileDetails::set_filename(::std::string&& value) {
  set_has_filename();
  filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.PublishedFileDetails.filename)
}
#endif
void PublishedFileDetails::set_filename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.PublishedFileDetails.filename)
}
void PublishedFileDetails::set_filename(const char* value, size_t size) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.PublishedFileDetails.filename)
}
::std::string* PublishedFileDetails::mutable_filename() {
  set_has_filename();
  // @@protoc_insertion_point(field_mutable:proto.steam.PublishedFileDetails.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PublishedFileDetails::release_filename() {
  // @@protoc_insertion_point(field_release:proto.steam.PublishedFileDetails.filename)
  clear_has_filename();
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PublishedFileDetails::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    set_has_filename();
  } else {
    clear_has_filename();
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.PublishedFileDetails.filename)
}

// optional uint64 file_size = 8;
bool PublishedFileDetails::has_file_size() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void PublishedFileDetails::set_has_file_size() {
  _has_bits_[0] |= 0x00400000u;
}
void PublishedFileDetails::clear_has_file_size() {
  _has_bits_[0] &= ~0x00400000u;
}
void PublishedFileDetails::clear_file_size() {
  file_size_ = GOOGLE_ULONGLONG(0);
  clear_has_file_size();
}
::google::protobuf::uint64 PublishedFileDetails::file_size() const {
  // @@protoc_insertion_point(field_get:proto.steam.PublishedFileDetails.file_size)
  return file_size_;
}
void PublishedFileDetails::set_file_size(::google::protobuf::uint64 value) {
  set_has_file_size();
  file_size_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.PublishedFileDetails.file_size)
}

// optional uint64 preview_file_size = 9;
bool PublishedFileDetails::has_preview_file_size() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void PublishedFileDetails::set_has_preview_file_size() {
  _has_bits_[0] |= 0x00800000u;
}
void PublishedFileDetails::clear_has_preview_file_size() {
  _has_bits_[0] &= ~0x00800000u;
}
void PublishedFileDetails::clear_preview_file_size() {
  preview_file_size_ = GOOGLE_ULONGLONG(0);
  clear_has_preview_file_size();
}
::google::protobuf::uint64 PublishedFileDetails::preview_file_size() const {
  // @@protoc_insertion_point(field_get:proto.steam.PublishedFileDetails.preview_file_size)
  return preview_file_size_;
}
void PublishedFileDetails::set_preview_file_size(::google::protobuf::uint64 value) {
  set_has_preview_file_size();
  preview_file_size_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.PublishedFileDetails.preview_file_size)
}

// optional string file_url = 10;
bool PublishedFileDetails::has_file_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PublishedFileDetails::set_has_file_url() {
  _has_bits_[0] |= 0x00000002u;
}
void PublishedFileDetails::clear_has_file_url() {
  _has_bits_[0] &= ~0x00000002u;
}
void PublishedFileDetails::clear_file_url() {
  file_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_url();
}
const ::std::string& PublishedFileDetails::file_url() const {
  // @@protoc_insertion_point(field_get:proto.steam.PublishedFileDetails.file_url)
  return file_url_.GetNoArena();
}
void PublishedFileDetails::set_file_url(const ::std::string& value) {
  set_has_file_url();
  file_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.PublishedFileDetails.file_url)
}
#if LANG_CXX11
void PublishedFileDetails::set_file_url(::std::string&& value) {
  set_has_file_url();
  file_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.PublishedFileDetails.file_url)
}
#endif
void PublishedFileDetails::set_file_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_file_url();
  file_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.PublishedFileDetails.file_url)
}
void PublishedFileDetails::set_file_url(const char* value, size_t size) {
  set_has_file_url();
  file_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.PublishedFileDetails.file_url)
}
::std::string* PublishedFileDetails::mutable_file_url() {
  set_has_file_url();
  // @@protoc_insertion_point(field_mutable:proto.steam.PublishedFileDetails.file_url)
  return file_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PublishedFileDetails::release_file_url() {
  // @@protoc_insertion_point(field_release:proto.steam.PublishedFileDetails.file_url)
  clear_has_file_url();
  return file_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PublishedFileDetails::set_allocated_file_url(::std::string* file_url) {
  if (file_url != NULL) {
    set_has_file_url();
  } else {
    clear_has_file_url();
  }
  file_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_url);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.PublishedFileDetails.file_url)
}

// optional string preview_url = 11;
bool PublishedFileDetails::has_preview_url() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PublishedFileDetails::set_has_preview_url() {
  _has_bits_[0] |= 0x00000004u;
}
void PublishedFileDetails::clear_has_preview_url() {
  _has_bits_[0] &= ~0x00000004u;
}
void PublishedFileDetails::clear_preview_url() {
  preview_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_preview_url();
}
const ::std::string& PublishedFileDetails::preview_url() const {
  // @@protoc_insertion_point(field_get:proto.steam.PublishedFileDetails.preview_url)
  return preview_url_.GetNoArena();
}
void PublishedFileDetails::set_preview_url(const ::std::string& value) {
  set_has_preview_url();
  preview_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.PublishedFileDetails.preview_url)
}
#if LANG_CXX11
void PublishedFileDetails::set_preview_url(::std::string&& value) {
  set_has_preview_url();
  preview_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.PublishedFileDetails.preview_url)
}
#endif
void PublishedFileDetails::set_preview_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_preview_url();
  preview_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.PublishedFileDetails.preview_url)
}
void PublishedFileDetails::set_preview_url(const char* value, size_t size) {
  set_has_preview_url();
  preview_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.PublishedFileDetails.preview_url)
}
::std::string* PublishedFileDetails::mutable_preview_url() {
  set_has_preview_url();
  // @@protoc_insertion_point(field_mutable:proto.steam.PublishedFileDetails.preview_url)
  return preview_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PublishedFileDetails::release_preview_url() {
  // @@protoc_insertion_point(field_release:proto.steam.PublishedFileDetails.preview_url)
  clear_has_preview_url();
  return preview_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PublishedFileDetails::set_allocated_preview_url(::std::string* preview_url) {
  if (preview_url != NULL) {
    set_has_preview_url();
  } else {
    clear_has_preview_url();
  }
  preview_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), preview_url);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.PublishedFileDetails.preview_url)
}

// optional string youtubevideoid = 12;
bool PublishedFileDetails::has_youtubevideoid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PublishedFileDetails::set_has_youtubevideoid() {
  _has_bits_[0] |= 0x00000008u;
}
void PublishedFileDetails::clear_has_youtubevideoid() {
  _has_bits_[0] &= ~0x00000008u;
}
void PublishedFileDetails::clear_youtubevideoid() {
  youtubevideoid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_youtubevideoid();
}
const ::std::string& PublishedFileDetails::youtubevideoid() const {
  // @@protoc_insertion_point(field_get:proto.steam.PublishedFileDetails.youtubevideoid)
  return youtubevideoid_.GetNoArena();
}
void PublishedFileDetails::set_youtubevideoid(const ::std::string& value) {
  set_has_youtubevideoid();
  youtubevideoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.PublishedFileDetails.youtubevideoid)
}
#if LANG_CXX11
void PublishedFileDetails::set_youtubevideoid(::std::string&& value) {
  set_has_youtubevideoid();
  youtubevideoid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.PublishedFileDetails.youtubevideoid)
}
#endif
void PublishedFileDetails::set_youtubevideoid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_youtubevideoid();
  youtubevideoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.PublishedFileDetails.youtubevideoid)
}
void PublishedFileDetails::set_youtubevideoid(const char* value, size_t size) {
  set_has_youtubevideoid();
  youtubevideoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.PublishedFileDetails.youtubevideoid)
}
::std::string* PublishedFileDetails::mutable_youtubevideoid() {
  set_has_youtubevideoid();
  // @@protoc_insertion_point(field_mutable:proto.steam.PublishedFileDetails.youtubevideoid)
  return youtubevideoid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PublishedFileDetails::release_youtubevideoid() {
  // @@protoc_insertion_point(field_release:proto.steam.PublishedFileDetails.youtubevideoid)
  clear_has_youtubevideoid();
  return youtubevideoid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PublishedFileDetails::set_allocated_youtubevideoid(::std::string* youtubevideoid) {
  if (youtubevideoid != NULL) {
    set_has_youtubevideoid();
  } else {
    clear_has_youtubevideoid();
  }
  youtubevideoid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), youtubevideoid);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.PublishedFileDetails.youtubevideoid)
}

// optional string url = 13;
bool PublishedFileDetails::has_url() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PublishedFileDetails::set_has_url() {
  _has_bits_[0] |= 0x00000010u;
}
void PublishedFileDetails::clear_has_url() {
  _has_bits_[0] &= ~0x00000010u;
}
void PublishedFileDetails::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
const ::std::string& PublishedFileDetails::url() const {
  // @@protoc_insertion_point(field_get:proto.steam.PublishedFileDetails.url)
  return url_.GetNoArena();
}
void PublishedFileDetails::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.PublishedFileDetails.url)
}
#if LANG_CXX11
void PublishedFileDetails::set_url(::std::string&& value) {
  set_has_url();
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.PublishedFileDetails.url)
}
#endif
void PublishedFileDetails::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.PublishedFileDetails.url)
}
void PublishedFileDetails::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.PublishedFileDetails.url)
}
::std::string* PublishedFileDetails::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:proto.steam.PublishedFileDetails.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PublishedFileDetails::release_url() {
  // @@protoc_insertion_point(field_release:proto.steam.PublishedFileDetails.url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PublishedFileDetails::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.PublishedFileDetails.url)
}

// optional fixed64 hcontent_file = 14;
bool PublishedFileDetails::has_hcontent_file() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void PublishedFileDetails::set_has_hcontent_file() {
  _has_bits_[0] |= 0x01000000u;
}
void PublishedFileDetails::clear_has_hcontent_file() {
  _has_bits_[0] &= ~0x01000000u;
}
void PublishedFileDetails::clear_hcontent_file() {
  hcontent_file_ = GOOGLE_ULONGLONG(0);
  clear_has_hcontent_file();
}
::google::protobuf::uint64 PublishedFileDetails::hcontent_file() const {
  // @@protoc_insertion_point(field_get:proto.steam.PublishedFileDetails.hcontent_file)
  return hcontent_file_;
}
void PublishedFileDetails::set_hcontent_file(::google::protobuf::uint64 value) {
  set_has_hcontent_file();
  hcontent_file_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.PublishedFileDetails.hcontent_file)
}

// optional fixed64 hcontent_preview = 15;
bool PublishedFileDetails::has_hcontent_preview() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void PublishedFileDetails::set_has_hcontent_preview() {
  _has_bits_[0] |= 0x02000000u;
}
void PublishedFileDetails::clear_has_hcontent_preview() {
  _has_bits_[0] &= ~0x02000000u;
}
void PublishedFileDetails::clear_hcontent_preview() {
  hcontent_preview_ = GOOGLE_ULONGLONG(0);
  clear_has_hcontent_preview();
}
::google::protobuf::uint64 PublishedFileDetails::hcontent_preview() const {
  // @@protoc_insertion_point(field_get:proto.steam.PublishedFileDetails.hcontent_preview)
  return hcontent_preview_;
}
void PublishedFileDetails::set_hcontent_preview(::google::protobuf::uint64 value) {
  set_has_hcontent_preview();
  hcontent_preview_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.PublishedFileDetails.hcontent_preview)
}

// optional string title = 16;
bool PublishedFileDetails::has_title() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PublishedFileDetails::set_has_title() {
  _has_bits_[0] |= 0x00000020u;
}
void PublishedFileDetails::clear_has_title() {
  _has_bits_[0] &= ~0x00000020u;
}
void PublishedFileDetails::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
const ::std::string& PublishedFileDetails::title() const {
  // @@protoc_insertion_point(field_get:proto.steam.PublishedFileDetails.title)
  return title_.GetNoArena();
}
void PublishedFileDetails::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.PublishedFileDetails.title)
}
#if LANG_CXX11
void PublishedFileDetails::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.PublishedFileDetails.title)
}
#endif
void PublishedFileDetails::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.PublishedFileDetails.title)
}
void PublishedFileDetails::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.PublishedFileDetails.title)
}
::std::string* PublishedFileDetails::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:proto.steam.PublishedFileDetails.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PublishedFileDetails::release_title() {
  // @@protoc_insertion_point(field_release:proto.steam.PublishedFileDetails.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PublishedFileDetails::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.PublishedFileDetails.title)
}

// optional string file_description = 17;
bool PublishedFileDetails::has_file_description() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void PublishedFileDetails::set_has_file_description() {
  _has_bits_[0] |= 0x00000040u;
}
void PublishedFileDetails::clear_has_file_description() {
  _has_bits_[0] &= ~0x00000040u;
}
void PublishedFileDetails::clear_file_description() {
  file_description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_description();
}
const ::std::string& PublishedFileDetails::file_description() const {
  // @@protoc_insertion_point(field_get:proto.steam.PublishedFileDetails.file_description)
  return file_description_.GetNoArena();
}
void PublishedFileDetails::set_file_description(const ::std::string& value) {
  set_has_file_description();
  file_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.PublishedFileDetails.file_description)
}
#if LANG_CXX11
void PublishedFileDetails::set_file_description(::std::string&& value) {
  set_has_file_description();
  file_description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.PublishedFileDetails.file_description)
}
#endif
void PublishedFileDetails::set_file_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_file_description();
  file_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.PublishedFileDetails.file_description)
}
void PublishedFileDetails::set_file_description(const char* value, size_t size) {
  set_has_file_description();
  file_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.PublishedFileDetails.file_description)
}
::std::string* PublishedFileDetails::mutable_file_description() {
  set_has_file_description();
  // @@protoc_insertion_point(field_mutable:proto.steam.PublishedFileDetails.file_description)
  return file_description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PublishedFileDetails::release_file_description() {
  // @@protoc_insertion_point(field_release:proto.steam.PublishedFileDetails.file_description)
  clear_has_file_description();
  return file_description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PublishedFileDetails::set_allocated_file_description(::std::string* file_description) {
  if (file_description != NULL) {
    set_has_file_description();
  } else {
    clear_has_file_description();
  }
  file_description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_description);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.PublishedFileDetails.file_description)
}

// optional string short_description = 18;
bool PublishedFileDetails::has_short_description() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void PublishedFileDetails::set_has_short_description() {
  _has_bits_[0] |= 0x00000080u;
}
void PublishedFileDetails::clear_has_short_description() {
  _has_bits_[0] &= ~0x00000080u;
}
void PublishedFileDetails::clear_short_description() {
  short_description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_short_description();
}
const ::std::string& PublishedFileDetails::short_description() const {
  // @@protoc_insertion_point(field_get:proto.steam.PublishedFileDetails.short_description)
  return short_description_.GetNoArena();
}
void PublishedFileDetails::set_short_description(const ::std::string& value) {
  set_has_short_description();
  short_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.PublishedFileDetails.short_description)
}
#if LANG_CXX11
void PublishedFileDetails::set_short_description(::std::string&& value) {
  set_has_short_description();
  short_description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.PublishedFileDetails.short_description)
}
#endif
void PublishedFileDetails::set_short_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_short_description();
  short_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.PublishedFileDetails.short_description)
}
void PublishedFileDetails::set_short_description(const char* value, size_t size) {
  set_has_short_description();
  short_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.PublishedFileDetails.short_description)
}
::std::string* PublishedFileDetails::mutable_short_description() {
  set_has_short_description();
  // @@protoc_insertion_point(field_mutable:proto.steam.PublishedFileDetails.short_description)
  return short_description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PublishedFileDetails::release_short_description() {
  // @@protoc_insertion_point(field_release:proto.steam.PublishedFileDetails.short_description)
  clear_has_short_description();
  return short_description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PublishedFileDetails::set_allocated_short_description(::std::string* short_description) {
  if (short_description != NULL) {
    set_has_short_description();
  } else {
    clear_has_short_description();
  }
  short_description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), short_description);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.PublishedFileDetails.short_description)
}

// optional uint32 time_created = 19;
bool PublishedFileDetails::has_time_created() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void PublishedFileDetails::set_has_time_created() {
  _has_bits_[0] |= 0x04000000u;
}
void PublishedFileDetails::clear_has_time_created() {
  _has_bits_[0] &= ~0x04000000u;
}
void PublishedFileDetails::clear_time_created() {
  time_created_ = 0u;
  clear_has_time_created();
}
::google::protobuf::uint32 PublishedFileDetails::time_created() const {
  // @@protoc_insertion_point(field_get:proto.steam.PublishedFileDetails.time_created)
  return time_created_;
}
void PublishedFileDetails::set_time_created(::google::protobuf::uint32 value) {
  set_has_time_created();
  time_created_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.PublishedFileDetails.time_created)
}

// optional uint32 time_updated = 20;
bool PublishedFileDetails::has_time_updated() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void PublishedFileDetails::set_has_time_updated() {
  _has_bits_[0] |= 0x08000000u;
}
void PublishedFileDetails::clear_has_time_updated() {
  _has_bits_[0] &= ~0x08000000u;
}
void PublishedFileDetails::clear_time_updated() {
  time_updated_ = 0u;
  clear_has_time_updated();
}
::google::protobuf::uint32 PublishedFileDetails::time_updated() const {
  // @@protoc_insertion_point(field_get:proto.steam.PublishedFileDetails.time_updated)
  return time_updated_;
}
void PublishedFileDetails::set_time_updated(::google::protobuf::uint32 value) {
  set_has_time_updated();
  time_updated_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.PublishedFileDetails.time_updated)
}

// optional uint32 visibility = 21;
bool PublishedFileDetails::has_visibility() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void PublishedFileDetails::set_has_visibility() {
  _has_bits_[0] |= 0x10000000u;
}
void PublishedFileDetails::clear_has_visibility() {
  _has_bits_[0] &= ~0x10000000u;
}
void PublishedFileDetails::clear_visibility() {
  visibility_ = 0u;
  clear_has_visibility();
}
::google::protobuf::uint32 PublishedFileDetails::visibility() const {
  // @@protoc_insertion_point(field_get:proto.steam.PublishedFileDetails.visibility)
  return visibility_;
}
void PublishedFileDetails::set_visibility(::google::protobuf::uint32 value) {
  set_has_visibility();
  visibility_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.PublishedFileDetails.visibility)
}

// optional uint32 flags = 22;
bool PublishedFileDetails::has_flags() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void PublishedFileDetails::set_has_flags() {
  _has_bits_[0] |= 0x20000000u;
}
void PublishedFileDetails::clear_has_flags() {
  _has_bits_[0] &= ~0x20000000u;
}
void PublishedFileDetails::clear_flags() {
  flags_ = 0u;
  clear_has_flags();
}
::google::protobuf::uint32 PublishedFileDetails::flags() const {
  // @@protoc_insertion_point(field_get:proto.steam.PublishedFileDetails.flags)
  return flags_;
}
void PublishedFileDetails::set_flags(::google::protobuf::uint32 value) {
  set_has_flags();
  flags_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.PublishedFileDetails.flags)
}

// optional bool workshop_file = 23;
bool PublishedFileDetails::has_workshop_file() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
void PublishedFileDetails::set_has_workshop_file() {
  _has_bits_[0] |= 0x40000000u;
}
void PublishedFileDetails::clear_has_workshop_file() {
  _has_bits_[0] &= ~0x40000000u;
}
void PublishedFileDetails::clear_workshop_file() {
  workshop_file_ = false;
  clear_has_workshop_file();
}
bool PublishedFileDetails::workshop_file() const {
  // @@protoc_insertion_point(field_get:proto.steam.PublishedFileDetails.workshop_file)
  return workshop_file_;
}
void PublishedFileDetails::set_workshop_file(bool value) {
  set_has_workshop_file();
  workshop_file_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.PublishedFileDetails.workshop_file)
}

// optional bool workshop_accepted = 24;
bool PublishedFileDetails::has_workshop_accepted() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
void PublishedFileDetails::set_has_workshop_accepted() {
  _has_bits_[0] |= 0x80000000u;
}
void PublishedFileDetails::clear_has_workshop_accepted() {
  _has_bits_[0] &= ~0x80000000u;
}
void PublishedFileDetails::clear_workshop_accepted() {
  workshop_accepted_ = false;
  clear_has_workshop_accepted();
}
bool PublishedFileDetails::workshop_accepted() const {
  // @@protoc_insertion_point(field_get:proto.steam.PublishedFileDetails.workshop_accepted)
  return workshop_accepted_;
}
void PublishedFileDetails::set_workshop_accepted(bool value) {
  set_has_workshop_accepted();
  workshop_accepted_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.PublishedFileDetails.workshop_accepted)
}

// optional bool show_subscribe_all = 25;
bool PublishedFileDetails::has_show_subscribe_all() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
void PublishedFileDetails::set_has_show_subscribe_all() {
  _has_bits_[1] |= 0x00000001u;
}
void PublishedFileDetails::clear_has_show_subscribe_all() {
  _has_bits_[1] &= ~0x00000001u;
}
void PublishedFileDetails::clear_show_subscribe_all() {
  show_subscribe_all_ = false;
  clear_has_show_subscribe_all();
}
bool PublishedFileDetails::show_subscribe_all() const {
  // @@protoc_insertion_point(field_get:proto.steam.PublishedFileDetails.show_subscribe_all)
  return show_subscribe_all_;
}
void PublishedFileDetails::set_show_subscribe_all(bool value) {
  set_has_show_subscribe_all();
  show_subscribe_all_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.PublishedFileDetails.show_subscribe_all)
}

// optional int32 num_comments_developer = 26;
bool PublishedFileDetails::has_num_comments_developer() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
void PublishedFileDetails::set_has_num_comments_developer() {
  _has_bits_[1] |= 0x00000004u;
}
void PublishedFileDetails::clear_has_num_comments_developer() {
  _has_bits_[1] &= ~0x00000004u;
}
void PublishedFileDetails::clear_num_comments_developer() {
  num_comments_developer_ = 0;
  clear_has_num_comments_developer();
}
::google::protobuf::int32 PublishedFileDetails::num_comments_developer() const {
  // @@protoc_insertion_point(field_get:proto.steam.PublishedFileDetails.num_comments_developer)
  return num_comments_developer_;
}
void PublishedFileDetails::set_num_comments_developer(::google::protobuf::int32 value) {
  set_has_num_comments_developer();
  num_comments_developer_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.PublishedFileDetails.num_comments_developer)
}

// optional int32 num_comments_public = 27;
bool PublishedFileDetails::has_num_comments_public() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
void PublishedFileDetails::set_has_num_comments_public() {
  _has_bits_[1] |= 0x00000010u;
}
void PublishedFileDetails::clear_has_num_comments_public() {
  _has_bits_[1] &= ~0x00000010u;
}
void PublishedFileDetails::clear_num_comments_public() {
  num_comments_public_ = 0;
  clear_has_num_comments_public();
}
::google::protobuf::int32 PublishedFileDetails::num_comments_public() const {
  // @@protoc_insertion_point(field_get:proto.steam.PublishedFileDetails.num_comments_public)
  return num_comments_public_;
}
void PublishedFileDetails::set_num_comments_public(::google::protobuf::int32 value) {
  set_has_num_comments_public();
  num_comments_public_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.PublishedFileDetails.num_comments_public)
}

// optional bool banned = 28;
bool PublishedFileDetails::has_banned() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
void PublishedFileDetails::set_has_banned() {
  _has_bits_[1] |= 0x00000002u;
}
void PublishedFileDetails::clear_has_banned() {
  _has_bits_[1] &= ~0x00000002u;
}
void PublishedFileDetails::clear_banned() {
  banned_ = false;
  clear_has_banned();
}
bool PublishedFileDetails::banned() const {
  // @@protoc_insertion_point(field_get:proto.steam.PublishedFileDetails.banned)
  return banned_;
}
void PublishedFileDetails::set_banned(bool value) {
  set_has_banned();
  banned_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.PublishedFileDetails.banned)
}

// optional string ban_reason = 29;
bool PublishedFileDetails::has_ban_reason() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void PublishedFileDetails::set_has_ban_reason() {
  _has_bits_[0] |= 0x00000100u;
}
void PublishedFileDetails::clear_has_ban_reason() {
  _has_bits_[0] &= ~0x00000100u;
}
void PublishedFileDetails::clear_ban_reason() {
  ban_reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ban_reason();
}
const ::std::string& PublishedFileDetails::ban_reason() const {
  // @@protoc_insertion_point(field_get:proto.steam.PublishedFileDetails.ban_reason)
  return ban_reason_.GetNoArena();
}
void PublishedFileDetails::set_ban_reason(const ::std::string& value) {
  set_has_ban_reason();
  ban_reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.PublishedFileDetails.ban_reason)
}
#if LANG_CXX11
void PublishedFileDetails::set_ban_reason(::std::string&& value) {
  set_has_ban_reason();
  ban_reason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.PublishedFileDetails.ban_reason)
}
#endif
void PublishedFileDetails::set_ban_reason(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ban_reason();
  ban_reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.PublishedFileDetails.ban_reason)
}
void PublishedFileDetails::set_ban_reason(const char* value, size_t size) {
  set_has_ban_reason();
  ban_reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.PublishedFileDetails.ban_reason)
}
::std::string* PublishedFileDetails::mutable_ban_reason() {
  set_has_ban_reason();
  // @@protoc_insertion_point(field_mutable:proto.steam.PublishedFileDetails.ban_reason)
  return ban_reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PublishedFileDetails::release_ban_reason() {
  // @@protoc_insertion_point(field_release:proto.steam.PublishedFileDetails.ban_reason)
  clear_has_ban_reason();
  return ban_reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PublishedFileDetails::set_allocated_ban_reason(::std::string* ban_reason) {
  if (ban_reason != NULL) {
    set_has_ban_reason();
  } else {
    clear_has_ban_reason();
  }
  ban_reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ban_reason);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.PublishedFileDetails.ban_reason)
}

// optional fixed64 banner = 30;
bool PublishedFileDetails::has_banner() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
void PublishedFileDetails::set_has_banner() {
  _has_bits_[1] |= 0x00000008u;
}
void PublishedFileDetails::clear_has_banner() {
  _has_bits_[1] &= ~0x00000008u;
}
void PublishedFileDetails::clear_banner() {
  banner_ = GOOGLE_ULONGLONG(0);
  clear_has_banner();
}
::google::protobuf::uint64 PublishedFileDetails::banner() const {
  // @@protoc_insertion_point(field_get:proto.steam.PublishedFileDetails.banner)
  return banner_;
}
void PublishedFileDetails::set_banner(::google::protobuf::uint64 value) {
  set_has_banner();
  banner_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.PublishedFileDetails.banner)
}

// optional bool can_be_deleted = 31;
bool PublishedFileDetails::has_can_be_deleted() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
void PublishedFileDetails::set_has_can_be_deleted() {
  _has_bits_[1] |= 0x00000080u;
}
void PublishedFileDetails::clear_has_can_be_deleted() {
  _has_bits_[1] &= ~0x00000080u;
}
void PublishedFileDetails::clear_can_be_deleted() {
  can_be_deleted_ = false;
  clear_has_can_be_deleted();
}
bool PublishedFileDetails::can_be_deleted() const {
  // @@protoc_insertion_point(field_get:proto.steam.PublishedFileDetails.can_be_deleted)
  return can_be_deleted_;
}
void PublishedFileDetails::set_can_be_deleted(bool value) {
  set_has_can_be_deleted();
  can_be_deleted_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.PublishedFileDetails.can_be_deleted)
}

// optional bool incompatible = 32;
bool PublishedFileDetails::has_incompatible() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
void PublishedFileDetails::set_has_incompatible() {
  _has_bits_[1] |= 0x00000100u;
}
void PublishedFileDetails::clear_has_incompatible() {
  _has_bits_[1] &= ~0x00000100u;
}
void PublishedFileDetails::clear_incompatible() {
  incompatible_ = false;
  clear_has_incompatible();
}
bool PublishedFileDetails::incompatible() const {
  // @@protoc_insertion_point(field_get:proto.steam.PublishedFileDetails.incompatible)
  return incompatible_;
}
void PublishedFileDetails::set_incompatible(bool value) {
  set_has_incompatible();
  incompatible_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.PublishedFileDetails.incompatible)
}

// optional string app_name = 33;
bool PublishedFileDetails::has_app_name() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void PublishedFileDetails::set_has_app_name() {
  _has_bits_[0] |= 0x00000200u;
}
void PublishedFileDetails::clear_has_app_name() {
  _has_bits_[0] &= ~0x00000200u;
}
void PublishedFileDetails::clear_app_name() {
  app_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_app_name();
}
const ::std::string& PublishedFileDetails::app_name() const {
  // @@protoc_insertion_point(field_get:proto.steam.PublishedFileDetails.app_name)
  return app_name_.GetNoArena();
}
void PublishedFileDetails::set_app_name(const ::std::string& value) {
  set_has_app_name();
  app_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.PublishedFileDetails.app_name)
}
#if LANG_CXX11
void PublishedFileDetails::set_app_name(::std::string&& value) {
  set_has_app_name();
  app_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.PublishedFileDetails.app_name)
}
#endif
void PublishedFileDetails::set_app_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_app_name();
  app_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.PublishedFileDetails.app_name)
}
void PublishedFileDetails::set_app_name(const char* value, size_t size) {
  set_has_app_name();
  app_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.PublishedFileDetails.app_name)
}
::std::string* PublishedFileDetails::mutable_app_name() {
  set_has_app_name();
  // @@protoc_insertion_point(field_mutable:proto.steam.PublishedFileDetails.app_name)
  return app_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PublishedFileDetails::release_app_name() {
  // @@protoc_insertion_point(field_release:proto.steam.PublishedFileDetails.app_name)
  clear_has_app_name();
  return app_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PublishedFileDetails::set_allocated_app_name(::std::string* app_name) {
  if (app_name != NULL) {
    set_has_app_name();
  } else {
    clear_has_app_name();
  }
  app_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), app_name);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.PublishedFileDetails.app_name)
}

// optional uint32 file_type = 34;
bool PublishedFileDetails::has_file_type() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
void PublishedFileDetails::set_has_file_type() {
  _has_bits_[1] |= 0x00000020u;
}
void PublishedFileDetails::clear_has_file_type() {
  _has_bits_[1] &= ~0x00000020u;
}
void PublishedFileDetails::clear_file_type() {
  file_type_ = 0u;
  clear_has_file_type();
}
::google::protobuf::uint32 PublishedFileDetails::file_type() const {
  // @@protoc_insertion_point(field_get:proto.steam.PublishedFileDetails.file_type)
  return file_type_;
}
void PublishedFileDetails::set_file_type(::google::protobuf::uint32 value) {
  set_has_file_type();
  file_type_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.PublishedFileDetails.file_type)
}

// optional bool can_subscribe = 35;
bool PublishedFileDetails::has_can_subscribe() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
void PublishedFileDetails::set_has_can_subscribe() {
  _has_bits_[1] |= 0x00000200u;
}
void PublishedFileDetails::clear_has_can_subscribe() {
  _has_bits_[1] &= ~0x00000200u;
}
void PublishedFileDetails::clear_can_subscribe() {
  can_subscribe_ = false;
  clear_has_can_subscribe();
}
bool PublishedFileDetails::can_subscribe() const {
  // @@protoc_insertion_point(field_get:proto.steam.PublishedFileDetails.can_subscribe)
  return can_subscribe_;
}
void PublishedFileDetails::set_can_subscribe(bool value) {
  set_has_can_subscribe();
  can_subscribe_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.PublishedFileDetails.can_subscribe)
}

// optional uint32 subscriptions = 36;
bool PublishedFileDetails::has_subscriptions() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
void PublishedFileDetails::set_has_subscriptions() {
  _has_bits_[1] |= 0x00000040u;
}
void PublishedFileDetails::clear_has_subscriptions() {
  _has_bits_[1] &= ~0x00000040u;
}
void PublishedFileDetails::clear_subscriptions() {
  subscriptions_ = 0u;
  clear_has_subscriptions();
}
::google::protobuf::uint32 PublishedFileDetails::subscriptions() const {
  // @@protoc_insertion_point(field_get:proto.steam.PublishedFileDetails.subscriptions)
  return subscriptions_;
}
void PublishedFileDetails::set_subscriptions(::google::protobuf::uint32 value) {
  set_has_subscriptions();
  subscriptions_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.PublishedFileDetails.subscriptions)
}

// optional uint32 favorited = 37;
bool PublishedFileDetails::has_favorited() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
void PublishedFileDetails::set_has_favorited() {
  _has_bits_[1] |= 0x00000800u;
}
void PublishedFileDetails::clear_has_favorited() {
  _has_bits_[1] &= ~0x00000800u;
}
void PublishedFileDetails::clear_favorited() {
  favorited_ = 0u;
  clear_has_favorited();
}
::google::protobuf::uint32 PublishedFileDetails::favorited() const {
  // @@protoc_insertion_point(field_get:proto.steam.PublishedFileDetails.favorited)
  return favorited_;
}
void PublishedFileDetails::set_favorited(::google::protobuf::uint32 value) {
  set_has_favorited();
  favorited_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.PublishedFileDetails.favorited)
}

// optional uint32 followers = 38;
bool PublishedFileDetails::has_followers() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
void PublishedFileDetails::set_has_followers() {
  _has_bits_[1] |= 0x00001000u;
}
void PublishedFileDetails::clear_has_followers() {
  _has_bits_[1] &= ~0x00001000u;
}
void PublishedFileDetails::clear_followers() {
  followers_ = 0u;
  clear_has_followers();
}
::google::protobuf::uint32 PublishedFileDetails::followers() const {
  // @@protoc_insertion_point(field_get:proto.steam.PublishedFileDetails.followers)
  return followers_;
}
void PublishedFileDetails::set_followers(::google::protobuf::uint32 value) {
  set_has_followers();
  followers_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.PublishedFileDetails.followers)
}

// optional uint32 lifetime_subscriptions = 39;
bool PublishedFileDetails::has_lifetime_subscriptions() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
void PublishedFileDetails::set_has_lifetime_subscriptions() {
  _has_bits_[1] |= 0x00002000u;
}
void PublishedFileDetails::clear_has_lifetime_subscriptions() {
  _has_bits_[1] &= ~0x00002000u;
}
void PublishedFileDetails::clear_lifetime_subscriptions() {
  lifetime_subscriptions_ = 0u;
  clear_has_lifetime_subscriptions();
}
::google::protobuf::uint32 PublishedFileDetails::lifetime_subscriptions() const {
  // @@protoc_insertion_point(field_get:proto.steam.PublishedFileDetails.lifetime_subscriptions)
  return lifetime_subscriptions_;
}
void PublishedFileDetails::set_lifetime_subscriptions(::google::protobuf::uint32 value) {
  set_has_lifetime_subscriptions();
  lifetime_subscriptions_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.PublishedFileDetails.lifetime_subscriptions)
}

// optional uint32 lifetime_favorited = 40;
bool PublishedFileDetails::has_lifetime_favorited() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
void PublishedFileDetails::set_has_lifetime_favorited() {
  _has_bits_[1] |= 0x00004000u;
}
void PublishedFileDetails::clear_has_lifetime_favorited() {
  _has_bits_[1] &= ~0x00004000u;
}
void PublishedFileDetails::clear_lifetime_favorited() {
  lifetime_favorited_ = 0u;
  clear_has_lifetime_favorited();
}
::google::protobuf::uint32 PublishedFileDetails::lifetime_favorited() const {
  // @@protoc_insertion_point(field_get:proto.steam.PublishedFileDetails.lifetime_favorited)
  return lifetime_favorited_;
}
void PublishedFileDetails::set_lifetime_favorited(::google::protobuf::uint32 value) {
  set_has_lifetime_favorited();
  lifetime_favorited_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.PublishedFileDetails.lifetime_favorited)
}

// optional uint32 lifetime_followers = 41;
bool PublishedFileDetails::has_lifetime_followers() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
void PublishedFileDetails::set_has_lifetime_followers() {
  _has_bits_[1] |= 0x00008000u;
}
void PublishedFileDetails::clear_has_lifetime_followers() {
  _has_bits_[1] &= ~0x00008000u;
}
void PublishedFileDetails::clear_lifetime_followers() {
  lifetime_followers_ = 0u;
  clear_has_lifetime_followers();
}
::google::protobuf::uint32 PublishedFileDetails::lifetime_followers() const {
  // @@protoc_insertion_point(field_get:proto.steam.PublishedFileDetails.lifetime_followers)
  return lifetime_followers_;
}
void PublishedFileDetails::set_lifetime_followers(::google::protobuf::uint32 value) {
  set_has_lifetime_followers();
  lifetime_followers_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.PublishedFileDetails.lifetime_followers)
}

// optional uint64 lifetime_playtime = 62;
bool PublishedFileDetails::has_lifetime_playtime() const {
  return (_has_bits_[1] & 0x04000000u) != 0;
}
void PublishedFileDetails::set_has_lifetime_playtime() {
  _has_bits_[1] |= 0x04000000u;
}
void PublishedFileDetails::clear_has_lifetime_playtime() {
  _has_bits_[1] &= ~0x04000000u;
}
void PublishedFileDetails::clear_lifetime_playtime() {
  lifetime_playtime_ = GOOGLE_ULONGLONG(0);
  clear_has_lifetime_playtime();
}
::google::protobuf::uint64 PublishedFileDetails::lifetime_playtime() const {
  // @@protoc_insertion_point(field_get:proto.steam.PublishedFileDetails.lifetime_playtime)
  return lifetime_playtime_;
}
void PublishedFileDetails::set_lifetime_playtime(::google::protobuf::uint64 value) {
  set_has_lifetime_playtime();
  lifetime_playtime_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.PublishedFileDetails.lifetime_playtime)
}

// optional uint64 lifetime_playtime_sessions = 63;
bool PublishedFileDetails::has_lifetime_playtime_sessions() const {
  return (_has_bits_[1] & 0x08000000u) != 0;
}
void PublishedFileDetails::set_has_lifetime_playtime_sessions() {
  _has_bits_[1] |= 0x08000000u;
}
void PublishedFileDetails::clear_has_lifetime_playtime_sessions() {
  _has_bits_[1] &= ~0x08000000u;
}
void PublishedFileDetails::clear_lifetime_playtime_sessions() {
  lifetime_playtime_sessions_ = GOOGLE_ULONGLONG(0);
  clear_has_lifetime_playtime_sessions();
}
::google::protobuf::uint64 PublishedFileDetails::lifetime_playtime_sessions() const {
  // @@protoc_insertion_point(field_get:proto.steam.PublishedFileDetails.lifetime_playtime_sessions)
  return lifetime_playtime_sessions_;
}
void PublishedFileDetails::set_lifetime_playtime_sessions(::google::protobuf::uint64 value) {
  set_has_lifetime_playtime_sessions();
  lifetime_playtime_sessions_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.PublishedFileDetails.lifetime_playtime_sessions)
}

// optional uint32 views = 42;
bool PublishedFileDetails::has_views() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
void PublishedFileDetails::set_has_views() {
  _has_bits_[1] |= 0x00010000u;
}
void PublishedFileDetails::clear_has_views() {
  _has_bits_[1] &= ~0x00010000u;
}
void PublishedFileDetails::clear_views() {
  views_ = 0u;
  clear_has_views();
}
::google::protobuf::uint32 PublishedFileDetails::views() const {
  // @@protoc_insertion_point(field_get:proto.steam.PublishedFileDetails.views)
  return views_;
}
void PublishedFileDetails::set_views(::google::protobuf::uint32 value) {
  set_has_views();
  views_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.PublishedFileDetails.views)
}

// optional uint32 image_width = 43;
bool PublishedFileDetails::has_image_width() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
void PublishedFileDetails::set_has_image_width() {
  _has_bits_[1] |= 0x00020000u;
}
void PublishedFileDetails::clear_has_image_width() {
  _has_bits_[1] &= ~0x00020000u;
}
void PublishedFileDetails::clear_image_width() {
  image_width_ = 0u;
  clear_has_image_width();
}
::google::protobuf::uint32 PublishedFileDetails::image_width() const {
  // @@protoc_insertion_point(field_get:proto.steam.PublishedFileDetails.image_width)
  return image_width_;
}
void PublishedFileDetails::set_image_width(::google::protobuf::uint32 value) {
  set_has_image_width();
  image_width_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.PublishedFileDetails.image_width)
}

// optional uint32 image_height = 44;
bool PublishedFileDetails::has_image_height() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
void PublishedFileDetails::set_has_image_height() {
  _has_bits_[1] |= 0x00040000u;
}
void PublishedFileDetails::clear_has_image_height() {
  _has_bits_[1] &= ~0x00040000u;
}
void PublishedFileDetails::clear_image_height() {
  image_height_ = 0u;
  clear_has_image_height();
}
::google::protobuf::uint32 PublishedFileDetails::image_height() const {
  // @@protoc_insertion_point(field_get:proto.steam.PublishedFileDetails.image_height)
  return image_height_;
}
void PublishedFileDetails::set_image_height(::google::protobuf::uint32 value) {
  set_has_image_height();
  image_height_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.PublishedFileDetails.image_height)
}

// optional string image_url = 45;
bool PublishedFileDetails::has_image_url() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void PublishedFileDetails::set_has_image_url() {
  _has_bits_[0] |= 0x00000400u;
}
void PublishedFileDetails::clear_has_image_url() {
  _has_bits_[0] &= ~0x00000400u;
}
void PublishedFileDetails::clear_image_url() {
  image_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_image_url();
}
const ::std::string& PublishedFileDetails::image_url() const {
  // @@protoc_insertion_point(field_get:proto.steam.PublishedFileDetails.image_url)
  return image_url_.GetNoArena();
}
void PublishedFileDetails::set_image_url(const ::std::string& value) {
  set_has_image_url();
  image_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.PublishedFileDetails.image_url)
}
#if LANG_CXX11
void PublishedFileDetails::set_image_url(::std::string&& value) {
  set_has_image_url();
  image_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.PublishedFileDetails.image_url)
}
#endif
void PublishedFileDetails::set_image_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_image_url();
  image_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.PublishedFileDetails.image_url)
}
void PublishedFileDetails::set_image_url(const char* value, size_t size) {
  set_has_image_url();
  image_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.PublishedFileDetails.image_url)
}
::std::string* PublishedFileDetails::mutable_image_url() {
  set_has_image_url();
  // @@protoc_insertion_point(field_mutable:proto.steam.PublishedFileDetails.image_url)
  return image_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PublishedFileDetails::release_image_url() {
  // @@protoc_insertion_point(field_release:proto.steam.PublishedFileDetails.image_url)
  clear_has_image_url();
  return image_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PublishedFileDetails::set_allocated_image_url(::std::string* image_url) {
  if (image_url != NULL) {
    set_has_image_url();
  } else {
    clear_has_image_url();
  }
  image_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image_url);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.PublishedFileDetails.image_url)
}

// optional bool spoiler_tag = 46;
bool PublishedFileDetails::has_spoiler_tag() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
void PublishedFileDetails::set_has_spoiler_tag() {
  _has_bits_[1] |= 0x00000400u;
}
void PublishedFileDetails::clear_has_spoiler_tag() {
  _has_bits_[1] &= ~0x00000400u;
}
void PublishedFileDetails::clear_spoiler_tag() {
  spoiler_tag_ = false;
  clear_has_spoiler_tag();
}
bool PublishedFileDetails::spoiler_tag() const {
  // @@protoc_insertion_point(field_get:proto.steam.PublishedFileDetails.spoiler_tag)
  return spoiler_tag_;
}
void PublishedFileDetails::set_spoiler_tag(bool value) {
  set_has_spoiler_tag();
  spoiler_tag_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.PublishedFileDetails.spoiler_tag)
}

// optional uint32 shortcutid = 47;
bool PublishedFileDetails::has_shortcutid() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
void PublishedFileDetails::set_has_shortcutid() {
  _has_bits_[1] |= 0x00080000u;
}
void PublishedFileDetails::clear_has_shortcutid() {
  _has_bits_[1] &= ~0x00080000u;
}
void PublishedFileDetails::clear_shortcutid() {
  shortcutid_ = 0u;
  clear_has_shortcutid();
}
::google::protobuf::uint32 PublishedFileDetails::shortcutid() const {
  // @@protoc_insertion_point(field_get:proto.steam.PublishedFileDetails.shortcutid)
  return shortcutid_;
}
void PublishedFileDetails::set_shortcutid(::google::protobuf::uint32 value) {
  set_has_shortcutid();
  shortcutid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.PublishedFileDetails.shortcutid)
}

// optional string shortcutname = 48;
bool PublishedFileDetails::has_shortcutname() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void PublishedFileDetails::set_has_shortcutname() {
  _has_bits_[0] |= 0x00000800u;
}
void PublishedFileDetails::clear_has_shortcutname() {
  _has_bits_[0] &= ~0x00000800u;
}
void PublishedFileDetails::clear_shortcutname() {
  shortcutname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_shortcutname();
}
const ::std::string& PublishedFileDetails::shortcutname() const {
  // @@protoc_insertion_point(field_get:proto.steam.PublishedFileDetails.shortcutname)
  return shortcutname_.GetNoArena();
}
void PublishedFileDetails::set_shortcutname(const ::std::string& value) {
  set_has_shortcutname();
  shortcutname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.PublishedFileDetails.shortcutname)
}
#if LANG_CXX11
void PublishedFileDetails::set_shortcutname(::std::string&& value) {
  set_has_shortcutname();
  shortcutname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.PublishedFileDetails.shortcutname)
}
#endif
void PublishedFileDetails::set_shortcutname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_shortcutname();
  shortcutname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.PublishedFileDetails.shortcutname)
}
void PublishedFileDetails::set_shortcutname(const char* value, size_t size) {
  set_has_shortcutname();
  shortcutname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.PublishedFileDetails.shortcutname)
}
::std::string* PublishedFileDetails::mutable_shortcutname() {
  set_has_shortcutname();
  // @@protoc_insertion_point(field_mutable:proto.steam.PublishedFileDetails.shortcutname)
  return shortcutname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PublishedFileDetails::release_shortcutname() {
  // @@protoc_insertion_point(field_release:proto.steam.PublishedFileDetails.shortcutname)
  clear_has_shortcutname();
  return shortcutname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PublishedFileDetails::set_allocated_shortcutname(::std::string* shortcutname) {
  if (shortcutname != NULL) {
    set_has_shortcutname();
  } else {
    clear_has_shortcutname();
  }
  shortcutname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), shortcutname);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.PublishedFileDetails.shortcutname)
}

// optional uint32 num_children = 49;
bool PublishedFileDetails::has_num_children() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
void PublishedFileDetails::set_has_num_children() {
  _has_bits_[1] |= 0x00100000u;
}
void PublishedFileDetails::clear_has_num_children() {
  _has_bits_[1] &= ~0x00100000u;
}
void PublishedFileDetails::clear_num_children() {
  num_children_ = 0u;
  clear_has_num_children();
}
::google::protobuf::uint32 PublishedFileDetails::num_children() const {
  // @@protoc_insertion_point(field_get:proto.steam.PublishedFileDetails.num_children)
  return num_children_;
}
void PublishedFileDetails::set_num_children(::google::protobuf::uint32 value) {
  set_has_num_children();
  num_children_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.PublishedFileDetails.num_children)
}

// optional uint32 num_reports = 50;
bool PublishedFileDetails::has_num_reports() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
void PublishedFileDetails::set_has_num_reports() {
  _has_bits_[1] |= 0x00200000u;
}
void PublishedFileDetails::clear_has_num_reports() {
  _has_bits_[1] &= ~0x00200000u;
}
void PublishedFileDetails::clear_num_reports() {
  num_reports_ = 0u;
  clear_has_num_reports();
}
::google::protobuf::uint32 PublishedFileDetails::num_reports() const {
  // @@protoc_insertion_point(field_get:proto.steam.PublishedFileDetails.num_reports)
  return num_reports_;
}
void PublishedFileDetails::set_num_reports(::google::protobuf::uint32 value) {
  set_has_num_reports();
  num_reports_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.PublishedFileDetails.num_reports)
}

// repeated .proto.steam.PublishedFileDetails.Preview previews = 51;
int PublishedFileDetails::previews_size() const {
  return previews_.size();
}
void PublishedFileDetails::clear_previews() {
  previews_.Clear();
}
const ::proto::steam::PublishedFileDetails_Preview& PublishedFileDetails::previews(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.PublishedFileDetails.previews)
  return previews_.Get(index);
}
::proto::steam::PublishedFileDetails_Preview* PublishedFileDetails::mutable_previews(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.PublishedFileDetails.previews)
  return previews_.Mutable(index);
}
::proto::steam::PublishedFileDetails_Preview* PublishedFileDetails::add_previews() {
  // @@protoc_insertion_point(field_add:proto.steam.PublishedFileDetails.previews)
  return previews_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::PublishedFileDetails_Preview >*
PublishedFileDetails::mutable_previews() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.PublishedFileDetails.previews)
  return &previews_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::PublishedFileDetails_Preview >&
PublishedFileDetails::previews() const {
  // @@protoc_insertion_point(field_list:proto.steam.PublishedFileDetails.previews)
  return previews_;
}

// repeated .proto.steam.PublishedFileDetails.Tag tags = 52;
int PublishedFileDetails::tags_size() const {
  return tags_.size();
}
void PublishedFileDetails::clear_tags() {
  tags_.Clear();
}
const ::proto::steam::PublishedFileDetails_Tag& PublishedFileDetails::tags(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.PublishedFileDetails.tags)
  return tags_.Get(index);
}
::proto::steam::PublishedFileDetails_Tag* PublishedFileDetails::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.PublishedFileDetails.tags)
  return tags_.Mutable(index);
}
::proto::steam::PublishedFileDetails_Tag* PublishedFileDetails::add_tags() {
  // @@protoc_insertion_point(field_add:proto.steam.PublishedFileDetails.tags)
  return tags_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::PublishedFileDetails_Tag >*
PublishedFileDetails::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.PublishedFileDetails.tags)
  return &tags_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::PublishedFileDetails_Tag >&
PublishedFileDetails::tags() const {
  // @@protoc_insertion_point(field_list:proto.steam.PublishedFileDetails.tags)
  return tags_;
}

// repeated .proto.steam.PublishedFileDetails.Child children = 53;
int PublishedFileDetails::children_size() const {
  return children_.size();
}
void PublishedFileDetails::clear_children() {
  children_.Clear();
}
const ::proto::steam::PublishedFileDetails_Child& PublishedFileDetails::children(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.PublishedFileDetails.children)
  return children_.Get(index);
}
::proto::steam::PublishedFileDetails_Child* PublishedFileDetails::mutable_children(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.PublishedFileDetails.children)
  return children_.Mutable(index);
}
::proto::steam::PublishedFileDetails_Child* PublishedFileDetails::add_children() {
  // @@protoc_insertion_point(field_add:proto.steam.PublishedFileDetails.children)
  return children_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::PublishedFileDetails_Child >*
PublishedFileDetails::mutable_children() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.PublishedFileDetails.children)
  return &children_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::PublishedFileDetails_Child >&
PublishedFileDetails::children() const {
  // @@protoc_insertion_point(field_list:proto.steam.PublishedFileDetails.children)
  return children_;
}

// repeated .proto.steam.PublishedFileDetails.KVTag kvtags = 54;
int PublishedFileDetails::kvtags_size() const {
  return kvtags_.size();
}
void PublishedFileDetails::clear_kvtags() {
  kvtags_.Clear();
}
const ::proto::steam::PublishedFileDetails_KVTag& PublishedFileDetails::kvtags(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.PublishedFileDetails.kvtags)
  return kvtags_.Get(index);
}
::proto::steam::PublishedFileDetails_KVTag* PublishedFileDetails::mutable_kvtags(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.PublishedFileDetails.kvtags)
  return kvtags_.Mutable(index);
}
::proto::steam::PublishedFileDetails_KVTag* PublishedFileDetails::add_kvtags() {
  // @@protoc_insertion_point(field_add:proto.steam.PublishedFileDetails.kvtags)
  return kvtags_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::PublishedFileDetails_KVTag >*
PublishedFileDetails::mutable_kvtags() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.PublishedFileDetails.kvtags)
  return &kvtags_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::PublishedFileDetails_KVTag >&
PublishedFileDetails::kvtags() const {
  // @@protoc_insertion_point(field_list:proto.steam.PublishedFileDetails.kvtags)
  return kvtags_;
}

// optional .proto.steam.PublishedFileDetails.VoteData vote_data = 55;
bool PublishedFileDetails::has_vote_data() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void PublishedFileDetails::set_has_vote_data() {
  _has_bits_[0] |= 0x00002000u;
}
void PublishedFileDetails::clear_has_vote_data() {
  _has_bits_[0] &= ~0x00002000u;
}
void PublishedFileDetails::clear_vote_data() {
  if (vote_data_ != NULL) vote_data_->::proto::steam::PublishedFileDetails_VoteData::Clear();
  clear_has_vote_data();
}
const ::proto::steam::PublishedFileDetails_VoteData& PublishedFileDetails::vote_data() const {
  // @@protoc_insertion_point(field_get:proto.steam.PublishedFileDetails.vote_data)
  return vote_data_ != NULL ? *vote_data_
                         : *::proto::steam::PublishedFileDetails_VoteData::internal_default_instance();
}
::proto::steam::PublishedFileDetails_VoteData* PublishedFileDetails::mutable_vote_data() {
  set_has_vote_data();
  if (vote_data_ == NULL) {
    vote_data_ = new ::proto::steam::PublishedFileDetails_VoteData;
  }
  // @@protoc_insertion_point(field_mutable:proto.steam.PublishedFileDetails.vote_data)
  return vote_data_;
}
::proto::steam::PublishedFileDetails_VoteData* PublishedFileDetails::release_vote_data() {
  // @@protoc_insertion_point(field_release:proto.steam.PublishedFileDetails.vote_data)
  clear_has_vote_data();
  ::proto::steam::PublishedFileDetails_VoteData* temp = vote_data_;
  vote_data_ = NULL;
  return temp;
}
void PublishedFileDetails::set_allocated_vote_data(::proto::steam::PublishedFileDetails_VoteData* vote_data) {
  delete vote_data_;
  vote_data_ = vote_data;
  if (vote_data) {
    set_has_vote_data();
  } else {
    clear_has_vote_data();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.steam.PublishedFileDetails.vote_data)
}

// optional .proto.steam.PublishedFileDetails.PlaytimeStats playtime_stats = 64;
bool PublishedFileDetails::has_playtime_stats() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void PublishedFileDetails::set_has_playtime_stats() {
  _has_bits_[0] |= 0x00008000u;
}
void PublishedFileDetails::clear_has_playtime_stats() {
  _has_bits_[0] &= ~0x00008000u;
}
void PublishedFileDetails::clear_playtime_stats() {
  if (playtime_stats_ != NULL) playtime_stats_->::proto::steam::PublishedFileDetails_PlaytimeStats::Clear();
  clear_has_playtime_stats();
}
const ::proto::steam::PublishedFileDetails_PlaytimeStats& PublishedFileDetails::playtime_stats() const {
  // @@protoc_insertion_point(field_get:proto.steam.PublishedFileDetails.playtime_stats)
  return playtime_stats_ != NULL ? *playtime_stats_
                         : *::proto::steam::PublishedFileDetails_PlaytimeStats::internal_default_instance();
}
::proto::steam::PublishedFileDetails_PlaytimeStats* PublishedFileDetails::mutable_playtime_stats() {
  set_has_playtime_stats();
  if (playtime_stats_ == NULL) {
    playtime_stats_ = new ::proto::steam::PublishedFileDetails_PlaytimeStats;
  }
  // @@protoc_insertion_point(field_mutable:proto.steam.PublishedFileDetails.playtime_stats)
  return playtime_stats_;
}
::proto::steam::PublishedFileDetails_PlaytimeStats* PublishedFileDetails::release_playtime_stats() {
  // @@protoc_insertion_point(field_release:proto.steam.PublishedFileDetails.playtime_stats)
  clear_has_playtime_stats();
  ::proto::steam::PublishedFileDetails_PlaytimeStats* temp = playtime_stats_;
  playtime_stats_ = NULL;
  return temp;
}
void PublishedFileDetails::set_allocated_playtime_stats(::proto::steam::PublishedFileDetails_PlaytimeStats* playtime_stats) {
  delete playtime_stats_;
  playtime_stats_ = playtime_stats;
  if (playtime_stats) {
    set_has_playtime_stats();
  } else {
    clear_has_playtime_stats();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.steam.PublishedFileDetails.playtime_stats)
}

// optional uint32 time_subscribed = 56 [(.proto.steam.description) = "Only valid in PublishedFile.GetUserFiles and not normal PublishedFile.GetDetail calls"];
bool PublishedFileDetails::has_time_subscribed() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
void PublishedFileDetails::set_has_time_subscribed() {
  _has_bits_[1] |= 0x00400000u;
}
void PublishedFileDetails::clear_has_time_subscribed() {
  _has_bits_[1] &= ~0x00400000u;
}
void PublishedFileDetails::clear_time_subscribed() {
  time_subscribed_ = 0u;
  clear_has_time_subscribed();
}
::google::protobuf::uint32 PublishedFileDetails::time_subscribed() const {
  // @@protoc_insertion_point(field_get:proto.steam.PublishedFileDetails.time_subscribed)
  return time_subscribed_;
}
void PublishedFileDetails::set_time_subscribed(::google::protobuf::uint32 value) {
  set_has_time_subscribed();
  time_subscribed_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.PublishedFileDetails.time_subscribed)
}

// optional .proto.steam.PublishedFileDetails.ForSaleData for_sale_data = 57 [(.proto.steam.description) = "Pricing information, if applicable."];
bool PublishedFileDetails::has_for_sale_data() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void PublishedFileDetails::set_has_for_sale_data() {
  _has_bits_[0] |= 0x00004000u;
}
void PublishedFileDetails::clear_has_for_sale_data() {
  _has_bits_[0] &= ~0x00004000u;
}
void PublishedFileDetails::clear_for_sale_data() {
  if (for_sale_data_ != NULL) for_sale_data_->::proto::steam::PublishedFileDetails_ForSaleData::Clear();
  clear_has_for_sale_data();
}
const ::proto::steam::PublishedFileDetails_ForSaleData& PublishedFileDetails::for_sale_data() const {
  // @@protoc_insertion_point(field_get:proto.steam.PublishedFileDetails.for_sale_data)
  return for_sale_data_ != NULL ? *for_sale_data_
                         : *::proto::steam::PublishedFileDetails_ForSaleData::internal_default_instance();
}
::proto::steam::PublishedFileDetails_ForSaleData* PublishedFileDetails::mutable_for_sale_data() {
  set_has_for_sale_data();
  if (for_sale_data_ == NULL) {
    for_sale_data_ = new ::proto::steam::PublishedFileDetails_ForSaleData;
  }
  // @@protoc_insertion_point(field_mutable:proto.steam.PublishedFileDetails.for_sale_data)
  return for_sale_data_;
}
::proto::steam::PublishedFileDetails_ForSaleData* PublishedFileDetails::release_for_sale_data() {
  // @@protoc_insertion_point(field_release:proto.steam.PublishedFileDetails.for_sale_data)
  clear_has_for_sale_data();
  ::proto::steam::PublishedFileDetails_ForSaleData* temp = for_sale_data_;
  for_sale_data_ = NULL;
  return temp;
}
void PublishedFileDetails::set_allocated_for_sale_data(::proto::steam::PublishedFileDetails_ForSaleData* for_sale_data) {
  delete for_sale_data_;
  for_sale_data_ = for_sale_data;
  if (for_sale_data) {
    set_has_for_sale_data();
  } else {
    clear_has_for_sale_data();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.steam.PublishedFileDetails.for_sale_data)
}

// optional string metadata = 58 [(.proto.steam.description) = "Metadata associated with the item"];
bool PublishedFileDetails::has_metadata() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void PublishedFileDetails::set_has_metadata() {
  _has_bits_[0] |= 0x00001000u;
}
void PublishedFileDetails::clear_has_metadata() {
  _has_bits_[0] &= ~0x00001000u;
}
void PublishedFileDetails::clear_metadata() {
  metadata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_metadata();
}
const ::std::string& PublishedFileDetails::metadata() const {
  // @@protoc_insertion_point(field_get:proto.steam.PublishedFileDetails.metadata)
  return metadata_.GetNoArena();
}
void PublishedFileDetails::set_metadata(const ::std::string& value) {
  set_has_metadata();
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.PublishedFileDetails.metadata)
}
#if LANG_CXX11
void PublishedFileDetails::set_metadata(::std::string&& value) {
  set_has_metadata();
  metadata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.PublishedFileDetails.metadata)
}
#endif
void PublishedFileDetails::set_metadata(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_metadata();
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.PublishedFileDetails.metadata)
}
void PublishedFileDetails::set_metadata(const char* value, size_t size) {
  set_has_metadata();
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.PublishedFileDetails.metadata)
}
::std::string* PublishedFileDetails::mutable_metadata() {
  set_has_metadata();
  // @@protoc_insertion_point(field_mutable:proto.steam.PublishedFileDetails.metadata)
  return metadata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PublishedFileDetails::release_metadata() {
  // @@protoc_insertion_point(field_release:proto.steam.PublishedFileDetails.metadata)
  clear_has_metadata();
  return metadata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PublishedFileDetails::set_allocated_metadata(::std::string* metadata) {
  if (metadata != NULL) {
    set_has_metadata();
  } else {
    clear_has_metadata();
  }
  metadata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), metadata);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.PublishedFileDetails.metadata)
}

// optional fixed64 incompatible_actor = 59;
bool PublishedFileDetails::has_incompatible_actor() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
void PublishedFileDetails::set_has_incompatible_actor() {
  _has_bits_[1] |= 0x00800000u;
}
void PublishedFileDetails::clear_has_incompatible_actor() {
  _has_bits_[1] &= ~0x00800000u;
}
void PublishedFileDetails::clear_incompatible_actor() {
  incompatible_actor_ = GOOGLE_ULONGLONG(0);
  clear_has_incompatible_actor();
}
::google::protobuf::uint64 PublishedFileDetails::incompatible_actor() const {
  // @@protoc_insertion_point(field_get:proto.steam.PublishedFileDetails.incompatible_actor)
  return incompatible_actor_;
}
void PublishedFileDetails::set_incompatible_actor(::google::protobuf::uint64 value) {
  set_has_incompatible_actor();
  incompatible_actor_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.PublishedFileDetails.incompatible_actor)
}

// optional uint32 incompatible_timestamp = 60;
bool PublishedFileDetails::has_incompatible_timestamp() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
void PublishedFileDetails::set_has_incompatible_timestamp() {
  _has_bits_[1] |= 0x01000000u;
}
void PublishedFileDetails::clear_has_incompatible_timestamp() {
  _has_bits_[1] &= ~0x01000000u;
}
void PublishedFileDetails::clear_incompatible_timestamp() {
  incompatible_timestamp_ = 0u;
  clear_has_incompatible_timestamp();
}
::google::protobuf::uint32 PublishedFileDetails::incompatible_timestamp() const {
  // @@protoc_insertion_point(field_get:proto.steam.PublishedFileDetails.incompatible_timestamp)
  return incompatible_timestamp_;
}
void PublishedFileDetails::set_incompatible_timestamp(::google::protobuf::uint32 value) {
  set_has_incompatible_timestamp();
  incompatible_timestamp_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.PublishedFileDetails.incompatible_timestamp)
}

// optional int32 language = 61 [default = 0, (.proto.steam.description) = "The language of the title and description."];
bool PublishedFileDetails::has_language() const {
  return (_has_bits_[1] & 0x02000000u) != 0;
}
void PublishedFileDetails::set_has_language() {
  _has_bits_[1] |= 0x02000000u;
}
void PublishedFileDetails::clear_has_language() {
  _has_bits_[1] &= ~0x02000000u;
}
void PublishedFileDetails::clear_language() {
  language_ = 0;
  clear_has_language();
}
::google::protobuf::int32 PublishedFileDetails::language() const {
  // @@protoc_insertion_point(field_get:proto.steam.PublishedFileDetails.language)
  return language_;
}
void PublishedFileDetails::set_language(::google::protobuf::int32 value) {
  set_has_language();
  language_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.PublishedFileDetails.language)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPublishedFile_GetDetails_Response::kPublishedfiledetailsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPublishedFile_GetDetails_Response::CPublishedFile_GetDetails_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPublishedFile_GetDetails_Response)
}
CPublishedFile_GetDetails_Response::CPublishedFile_GetDetails_Response(const CPublishedFile_GetDetails_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      publishedfiledetails_(from.publishedfiledetails_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPublishedFile_GetDetails_Response)
}

void CPublishedFile_GetDetails_Response::SharedCtor() {
  _cached_size_ = 0;
}

CPublishedFile_GetDetails_Response::~CPublishedFile_GetDetails_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CPublishedFile_GetDetails_Response)
  SharedDtor();
}

void CPublishedFile_GetDetails_Response::SharedDtor() {
}

void CPublishedFile_GetDetails_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPublishedFile_GetDetails_Response::descriptor() {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CPublishedFile_GetDetails_Response& CPublishedFile_GetDetails_Response::default_instance() {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CPublishedFile_GetDetails_Response* CPublishedFile_GetDetails_Response::New(::google::protobuf::Arena* arena) const {
  CPublishedFile_GetDetails_Response* n = new CPublishedFile_GetDetails_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CPublishedFile_GetDetails_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPublishedFile_GetDetails_Response)
  publishedfiledetails_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CPublishedFile_GetDetails_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPublishedFile_GetDetails_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.steam.PublishedFileDetails publishedfiledetails = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_publishedfiledetails()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPublishedFile_GetDetails_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPublishedFile_GetDetails_Response)
  return false;
#undef DO_
}

void CPublishedFile_GetDetails_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPublishedFile_GetDetails_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.PublishedFileDetails publishedfiledetails = 1;
  for (unsigned int i = 0, n = this->publishedfiledetails_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->publishedfiledetails(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPublishedFile_GetDetails_Response)
}

::google::protobuf::uint8* CPublishedFile_GetDetails_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPublishedFile_GetDetails_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.PublishedFileDetails publishedfiledetails = 1;
  for (unsigned int i = 0, n = this->publishedfiledetails_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->publishedfiledetails(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPublishedFile_GetDetails_Response)
  return target;
}

size_t CPublishedFile_GetDetails_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPublishedFile_GetDetails_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.steam.PublishedFileDetails publishedfiledetails = 1;
  {
    unsigned int count = this->publishedfiledetails_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->publishedfiledetails(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPublishedFile_GetDetails_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPublishedFile_GetDetails_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CPublishedFile_GetDetails_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CPublishedFile_GetDetails_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPublishedFile_GetDetails_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPublishedFile_GetDetails_Response)
    MergeFrom(*source);
  }
}

void CPublishedFile_GetDetails_Response::MergeFrom(const CPublishedFile_GetDetails_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPublishedFile_GetDetails_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  publishedfiledetails_.MergeFrom(from.publishedfiledetails_);
}

void CPublishedFile_GetDetails_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPublishedFile_GetDetails_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPublishedFile_GetDetails_Response::CopyFrom(const CPublishedFile_GetDetails_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPublishedFile_GetDetails_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_GetDetails_Response::IsInitialized() const {
  return true;
}

void CPublishedFile_GetDetails_Response::Swap(CPublishedFile_GetDetails_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPublishedFile_GetDetails_Response::InternalSwap(CPublishedFile_GetDetails_Response* other) {
  publishedfiledetails_.InternalSwap(&other->publishedfiledetails_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CPublishedFile_GetDetails_Response::GetMetadata() const {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CPublishedFile_GetDetails_Response

// repeated .proto.steam.PublishedFileDetails publishedfiledetails = 1;
int CPublishedFile_GetDetails_Response::publishedfiledetails_size() const {
  return publishedfiledetails_.size();
}
void CPublishedFile_GetDetails_Response::clear_publishedfiledetails() {
  publishedfiledetails_.Clear();
}
const ::proto::steam::PublishedFileDetails& CPublishedFile_GetDetails_Response::publishedfiledetails(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_GetDetails_Response.publishedfiledetails)
  return publishedfiledetails_.Get(index);
}
::proto::steam::PublishedFileDetails* CPublishedFile_GetDetails_Response::mutable_publishedfiledetails(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CPublishedFile_GetDetails_Response.publishedfiledetails)
  return publishedfiledetails_.Mutable(index);
}
::proto::steam::PublishedFileDetails* CPublishedFile_GetDetails_Response::add_publishedfiledetails() {
  // @@protoc_insertion_point(field_add:proto.steam.CPublishedFile_GetDetails_Response.publishedfiledetails)
  return publishedfiledetails_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::PublishedFileDetails >*
CPublishedFile_GetDetails_Response::mutable_publishedfiledetails() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CPublishedFile_GetDetails_Response.publishedfiledetails)
  return &publishedfiledetails_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::PublishedFileDetails >&
CPublishedFile_GetDetails_Response::publishedfiledetails() const {
  // @@protoc_insertion_point(field_list:proto.steam.CPublishedFile_GetDetails_Response.publishedfiledetails)
  return publishedfiledetails_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPublishedFile_GetItemInfo_Request_WorkshopItem::kPublishedFileIdFieldNumber;
const int CPublishedFile_GetItemInfo_Request_WorkshopItem::kTimeUpdatedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPublishedFile_GetItemInfo_Request_WorkshopItem::CPublishedFile_GetItemInfo_Request_WorkshopItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPublishedFile_GetItemInfo_Request.WorkshopItem)
}
CPublishedFile_GetItemInfo_Request_WorkshopItem::CPublishedFile_GetItemInfo_Request_WorkshopItem(const CPublishedFile_GetItemInfo_Request_WorkshopItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&published_file_id_, &from.published_file_id_,
    reinterpret_cast<char*>(&time_updated_) -
    reinterpret_cast<char*>(&published_file_id_) + sizeof(time_updated_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPublishedFile_GetItemInfo_Request.WorkshopItem)
}

void CPublishedFile_GetItemInfo_Request_WorkshopItem::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&published_file_id_, 0, reinterpret_cast<char*>(&time_updated_) -
    reinterpret_cast<char*>(&published_file_id_) + sizeof(time_updated_));
}

CPublishedFile_GetItemInfo_Request_WorkshopItem::~CPublishedFile_GetItemInfo_Request_WorkshopItem() {
  // @@protoc_insertion_point(destructor:proto.steam.CPublishedFile_GetItemInfo_Request.WorkshopItem)
  SharedDtor();
}

void CPublishedFile_GetItemInfo_Request_WorkshopItem::SharedDtor() {
}

void CPublishedFile_GetItemInfo_Request_WorkshopItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPublishedFile_GetItemInfo_Request_WorkshopItem::descriptor() {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CPublishedFile_GetItemInfo_Request_WorkshopItem& CPublishedFile_GetItemInfo_Request_WorkshopItem::default_instance() {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CPublishedFile_GetItemInfo_Request_WorkshopItem* CPublishedFile_GetItemInfo_Request_WorkshopItem::New(::google::protobuf::Arena* arena) const {
  CPublishedFile_GetItemInfo_Request_WorkshopItem* n = new CPublishedFile_GetItemInfo_Request_WorkshopItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CPublishedFile_GetItemInfo_Request_WorkshopItem::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPublishedFile_GetItemInfo_Request.WorkshopItem)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&published_file_id_, 0, reinterpret_cast<char*>(&time_updated_) -
      reinterpret_cast<char*>(&published_file_id_) + sizeof(time_updated_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CPublishedFile_GetItemInfo_Request_WorkshopItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPublishedFile_GetItemInfo_Request.WorkshopItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 published_file_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_published_file_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &published_file_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time_updated = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_time_updated();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_updated_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPublishedFile_GetItemInfo_Request.WorkshopItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPublishedFile_GetItemInfo_Request.WorkshopItem)
  return false;
#undef DO_
}

void CPublishedFile_GetItemInfo_Request_WorkshopItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPublishedFile_GetItemInfo_Request.WorkshopItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 published_file_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->published_file_id(), output);
  }

  // optional uint32 time_updated = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time_updated(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPublishedFile_GetItemInfo_Request.WorkshopItem)
}

::google::protobuf::uint8* CPublishedFile_GetItemInfo_Request_WorkshopItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPublishedFile_GetItemInfo_Request.WorkshopItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 published_file_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->published_file_id(), target);
  }

  // optional uint32 time_updated = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time_updated(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPublishedFile_GetItemInfo_Request.WorkshopItem)
  return target;
}

size_t CPublishedFile_GetItemInfo_Request_WorkshopItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPublishedFile_GetItemInfo_Request.WorkshopItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional fixed64 published_file_id = 1;
    if (has_published_file_id()) {
      total_size += 1 + 8;
    }

    // optional uint32 time_updated = 2;
    if (has_time_updated()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_updated());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPublishedFile_GetItemInfo_Request_WorkshopItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPublishedFile_GetItemInfo_Request.WorkshopItem)
  GOOGLE_DCHECK_NE(&from, this);
  const CPublishedFile_GetItemInfo_Request_WorkshopItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CPublishedFile_GetItemInfo_Request_WorkshopItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPublishedFile_GetItemInfo_Request.WorkshopItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPublishedFile_GetItemInfo_Request.WorkshopItem)
    MergeFrom(*source);
  }
}

void CPublishedFile_GetItemInfo_Request_WorkshopItem::MergeFrom(const CPublishedFile_GetItemInfo_Request_WorkshopItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPublishedFile_GetItemInfo_Request.WorkshopItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      published_file_id_ = from.published_file_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      time_updated_ = from.time_updated_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CPublishedFile_GetItemInfo_Request_WorkshopItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPublishedFile_GetItemInfo_Request.WorkshopItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPublishedFile_GetItemInfo_Request_WorkshopItem::CopyFrom(const CPublishedFile_GetItemInfo_Request_WorkshopItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPublishedFile_GetItemInfo_Request.WorkshopItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_GetItemInfo_Request_WorkshopItem::IsInitialized() const {
  return true;
}

void CPublishedFile_GetItemInfo_Request_WorkshopItem::Swap(CPublishedFile_GetItemInfo_Request_WorkshopItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPublishedFile_GetItemInfo_Request_WorkshopItem::InternalSwap(CPublishedFile_GetItemInfo_Request_WorkshopItem* other) {
  std::swap(published_file_id_, other->published_file_id_);
  std::swap(time_updated_, other->time_updated_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CPublishedFile_GetItemInfo_Request_WorkshopItem::GetMetadata() const {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CPublishedFile_GetItemInfo_Request_WorkshopItem

// optional fixed64 published_file_id = 1;
bool CPublishedFile_GetItemInfo_Request_WorkshopItem::has_published_file_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CPublishedFile_GetItemInfo_Request_WorkshopItem::set_has_published_file_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CPublishedFile_GetItemInfo_Request_WorkshopItem::clear_has_published_file_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CPublishedFile_GetItemInfo_Request_WorkshopItem::clear_published_file_id() {
  published_file_id_ = GOOGLE_ULONGLONG(0);
  clear_has_published_file_id();
}
::google::protobuf::uint64 CPublishedFile_GetItemInfo_Request_WorkshopItem::published_file_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_GetItemInfo_Request.WorkshopItem.published_file_id)
  return published_file_id_;
}
void CPublishedFile_GetItemInfo_Request_WorkshopItem::set_published_file_id(::google::protobuf::uint64 value) {
  set_has_published_file_id();
  published_file_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_GetItemInfo_Request.WorkshopItem.published_file_id)
}

// optional uint32 time_updated = 2;
bool CPublishedFile_GetItemInfo_Request_WorkshopItem::has_time_updated() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CPublishedFile_GetItemInfo_Request_WorkshopItem::set_has_time_updated() {
  _has_bits_[0] |= 0x00000002u;
}
void CPublishedFile_GetItemInfo_Request_WorkshopItem::clear_has_time_updated() {
  _has_bits_[0] &= ~0x00000002u;
}
void CPublishedFile_GetItemInfo_Request_WorkshopItem::clear_time_updated() {
  time_updated_ = 0u;
  clear_has_time_updated();
}
::google::protobuf::uint32 CPublishedFile_GetItemInfo_Request_WorkshopItem::time_updated() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_GetItemInfo_Request.WorkshopItem.time_updated)
  return time_updated_;
}
void CPublishedFile_GetItemInfo_Request_WorkshopItem::set_time_updated(::google::protobuf::uint32 value) {
  set_has_time_updated();
  time_updated_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_GetItemInfo_Request.WorkshopItem.time_updated)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPublishedFile_GetItemInfo_Request::kAppIdFieldNumber;
const int CPublishedFile_GetItemInfo_Request::kLastTimeUpdatedFieldNumber;
const int CPublishedFile_GetItemInfo_Request::kWorkshopItemsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPublishedFile_GetItemInfo_Request::CPublishedFile_GetItemInfo_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPublishedFile_GetItemInfo_Request)
}
CPublishedFile_GetItemInfo_Request::CPublishedFile_GetItemInfo_Request(const CPublishedFile_GetItemInfo_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      workshop_items_(from.workshop_items_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&app_id_, &from.app_id_,
    reinterpret_cast<char*>(&last_time_updated_) -
    reinterpret_cast<char*>(&app_id_) + sizeof(last_time_updated_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPublishedFile_GetItemInfo_Request)
}

void CPublishedFile_GetItemInfo_Request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&app_id_, 0, reinterpret_cast<char*>(&last_time_updated_) -
    reinterpret_cast<char*>(&app_id_) + sizeof(last_time_updated_));
}

CPublishedFile_GetItemInfo_Request::~CPublishedFile_GetItemInfo_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CPublishedFile_GetItemInfo_Request)
  SharedDtor();
}

void CPublishedFile_GetItemInfo_Request::SharedDtor() {
}

void CPublishedFile_GetItemInfo_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPublishedFile_GetItemInfo_Request::descriptor() {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CPublishedFile_GetItemInfo_Request& CPublishedFile_GetItemInfo_Request::default_instance() {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CPublishedFile_GetItemInfo_Request* CPublishedFile_GetItemInfo_Request::New(::google::protobuf::Arena* arena) const {
  CPublishedFile_GetItemInfo_Request* n = new CPublishedFile_GetItemInfo_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CPublishedFile_GetItemInfo_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPublishedFile_GetItemInfo_Request)
  workshop_items_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&app_id_, 0, reinterpret_cast<char*>(&last_time_updated_) -
      reinterpret_cast<char*>(&app_id_) + sizeof(last_time_updated_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CPublishedFile_GetItemInfo_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPublishedFile_GetItemInfo_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 app_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_app_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 last_time_updated = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_last_time_updated();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_time_updated_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CPublishedFile_GetItemInfo_Request.WorkshopItem workshop_items = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_workshop_items()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPublishedFile_GetItemInfo_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPublishedFile_GetItemInfo_Request)
  return false;
#undef DO_
}

void CPublishedFile_GetItemInfo_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPublishedFile_GetItemInfo_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->app_id(), output);
  }

  // optional uint32 last_time_updated = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->last_time_updated(), output);
  }

  // repeated .proto.steam.CPublishedFile_GetItemInfo_Request.WorkshopItem workshop_items = 3;
  for (unsigned int i = 0, n = this->workshop_items_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->workshop_items(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPublishedFile_GetItemInfo_Request)
}

::google::protobuf::uint8* CPublishedFile_GetItemInfo_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPublishedFile_GetItemInfo_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->app_id(), target);
  }

  // optional uint32 last_time_updated = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->last_time_updated(), target);
  }

  // repeated .proto.steam.CPublishedFile_GetItemInfo_Request.WorkshopItem workshop_items = 3;
  for (unsigned int i = 0, n = this->workshop_items_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->workshop_items(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPublishedFile_GetItemInfo_Request)
  return target;
}

size_t CPublishedFile_GetItemInfo_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPublishedFile_GetItemInfo_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.steam.CPublishedFile_GetItemInfo_Request.WorkshopItem workshop_items = 3;
  {
    unsigned int count = this->workshop_items_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->workshop_items(i));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 app_id = 1;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

    // optional uint32 last_time_updated = 2;
    if (has_last_time_updated()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_time_updated());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPublishedFile_GetItemInfo_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPublishedFile_GetItemInfo_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CPublishedFile_GetItemInfo_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CPublishedFile_GetItemInfo_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPublishedFile_GetItemInfo_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPublishedFile_GetItemInfo_Request)
    MergeFrom(*source);
  }
}

void CPublishedFile_GetItemInfo_Request::MergeFrom(const CPublishedFile_GetItemInfo_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPublishedFile_GetItemInfo_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  workshop_items_.MergeFrom(from.workshop_items_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      last_time_updated_ = from.last_time_updated_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CPublishedFile_GetItemInfo_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPublishedFile_GetItemInfo_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPublishedFile_GetItemInfo_Request::CopyFrom(const CPublishedFile_GetItemInfo_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPublishedFile_GetItemInfo_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_GetItemInfo_Request::IsInitialized() const {
  return true;
}

void CPublishedFile_GetItemInfo_Request::Swap(CPublishedFile_GetItemInfo_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPublishedFile_GetItemInfo_Request::InternalSwap(CPublishedFile_GetItemInfo_Request* other) {
  workshop_items_.InternalSwap(&other->workshop_items_);
  std::swap(app_id_, other->app_id_);
  std::swap(last_time_updated_, other->last_time_updated_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CPublishedFile_GetItemInfo_Request::GetMetadata() const {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CPublishedFile_GetItemInfo_Request

// optional uint32 app_id = 1;
bool CPublishedFile_GetItemInfo_Request::has_app_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CPublishedFile_GetItemInfo_Request::set_has_app_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CPublishedFile_GetItemInfo_Request::clear_has_app_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CPublishedFile_GetItemInfo_Request::clear_app_id() {
  app_id_ = 0u;
  clear_has_app_id();
}
::google::protobuf::uint32 CPublishedFile_GetItemInfo_Request::app_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_GetItemInfo_Request.app_id)
  return app_id_;
}
void CPublishedFile_GetItemInfo_Request::set_app_id(::google::protobuf::uint32 value) {
  set_has_app_id();
  app_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_GetItemInfo_Request.app_id)
}

// optional uint32 last_time_updated = 2;
bool CPublishedFile_GetItemInfo_Request::has_last_time_updated() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CPublishedFile_GetItemInfo_Request::set_has_last_time_updated() {
  _has_bits_[0] |= 0x00000002u;
}
void CPublishedFile_GetItemInfo_Request::clear_has_last_time_updated() {
  _has_bits_[0] &= ~0x00000002u;
}
void CPublishedFile_GetItemInfo_Request::clear_last_time_updated() {
  last_time_updated_ = 0u;
  clear_has_last_time_updated();
}
::google::protobuf::uint32 CPublishedFile_GetItemInfo_Request::last_time_updated() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_GetItemInfo_Request.last_time_updated)
  return last_time_updated_;
}
void CPublishedFile_GetItemInfo_Request::set_last_time_updated(::google::protobuf::uint32 value) {
  set_has_last_time_updated();
  last_time_updated_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_GetItemInfo_Request.last_time_updated)
}

// repeated .proto.steam.CPublishedFile_GetItemInfo_Request.WorkshopItem workshop_items = 3;
int CPublishedFile_GetItemInfo_Request::workshop_items_size() const {
  return workshop_items_.size();
}
void CPublishedFile_GetItemInfo_Request::clear_workshop_items() {
  workshop_items_.Clear();
}
const ::proto::steam::CPublishedFile_GetItemInfo_Request_WorkshopItem& CPublishedFile_GetItemInfo_Request::workshop_items(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_GetItemInfo_Request.workshop_items)
  return workshop_items_.Get(index);
}
::proto::steam::CPublishedFile_GetItemInfo_Request_WorkshopItem* CPublishedFile_GetItemInfo_Request::mutable_workshop_items(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CPublishedFile_GetItemInfo_Request.workshop_items)
  return workshop_items_.Mutable(index);
}
::proto::steam::CPublishedFile_GetItemInfo_Request_WorkshopItem* CPublishedFile_GetItemInfo_Request::add_workshop_items() {
  // @@protoc_insertion_point(field_add:proto.steam.CPublishedFile_GetItemInfo_Request.workshop_items)
  return workshop_items_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::CPublishedFile_GetItemInfo_Request_WorkshopItem >*
CPublishedFile_GetItemInfo_Request::mutable_workshop_items() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CPublishedFile_GetItemInfo_Request.workshop_items)
  return &workshop_items_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::CPublishedFile_GetItemInfo_Request_WorkshopItem >&
CPublishedFile_GetItemInfo_Request::workshop_items() const {
  // @@protoc_insertion_point(field_list:proto.steam.CPublishedFile_GetItemInfo_Request.workshop_items)
  return workshop_items_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPublishedFile_GetItemInfo_Response_WorkshopItemInfo::kPublishedFileIdFieldNumber;
const int CPublishedFile_GetItemInfo_Response_WorkshopItemInfo::kTimeUpdatedFieldNumber;
const int CPublishedFile_GetItemInfo_Response_WorkshopItemInfo::kManifestIdFieldNumber;
const int CPublishedFile_GetItemInfo_Response_WorkshopItemInfo::kFlagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPublishedFile_GetItemInfo_Response_WorkshopItemInfo::CPublishedFile_GetItemInfo_Response_WorkshopItemInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPublishedFile_GetItemInfo_Response.WorkshopItemInfo)
}
CPublishedFile_GetItemInfo_Response_WorkshopItemInfo::CPublishedFile_GetItemInfo_Response_WorkshopItemInfo(const CPublishedFile_GetItemInfo_Response_WorkshopItemInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&published_file_id_, &from.published_file_id_,
    reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&published_file_id_) + sizeof(flags_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPublishedFile_GetItemInfo_Response.WorkshopItemInfo)
}

void CPublishedFile_GetItemInfo_Response_WorkshopItemInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&published_file_id_, 0, reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&published_file_id_) + sizeof(flags_));
}

CPublishedFile_GetItemInfo_Response_WorkshopItemInfo::~CPublishedFile_GetItemInfo_Response_WorkshopItemInfo() {
  // @@protoc_insertion_point(destructor:proto.steam.CPublishedFile_GetItemInfo_Response.WorkshopItemInfo)
  SharedDtor();
}

void CPublishedFile_GetItemInfo_Response_WorkshopItemInfo::SharedDtor() {
}

void CPublishedFile_GetItemInfo_Response_WorkshopItemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPublishedFile_GetItemInfo_Response_WorkshopItemInfo::descriptor() {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CPublishedFile_GetItemInfo_Response_WorkshopItemInfo& CPublishedFile_GetItemInfo_Response_WorkshopItemInfo::default_instance() {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CPublishedFile_GetItemInfo_Response_WorkshopItemInfo* CPublishedFile_GetItemInfo_Response_WorkshopItemInfo::New(::google::protobuf::Arena* arena) const {
  CPublishedFile_GetItemInfo_Response_WorkshopItemInfo* n = new CPublishedFile_GetItemInfo_Response_WorkshopItemInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CPublishedFile_GetItemInfo_Response_WorkshopItemInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPublishedFile_GetItemInfo_Response.WorkshopItemInfo)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&published_file_id_, 0, reinterpret_cast<char*>(&flags_) -
      reinterpret_cast<char*>(&published_file_id_) + sizeof(flags_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CPublishedFile_GetItemInfo_Response_WorkshopItemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPublishedFile_GetItemInfo_Response.WorkshopItemInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 published_file_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_published_file_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &published_file_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time_updated = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_time_updated();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_updated_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 manifest_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_manifest_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &manifest_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 flags = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_flags();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPublishedFile_GetItemInfo_Response.WorkshopItemInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPublishedFile_GetItemInfo_Response.WorkshopItemInfo)
  return false;
#undef DO_
}

void CPublishedFile_GetItemInfo_Response_WorkshopItemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPublishedFile_GetItemInfo_Response.WorkshopItemInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 published_file_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->published_file_id(), output);
  }

  // optional uint32 time_updated = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time_updated(), output);
  }

  // optional fixed64 manifest_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->manifest_id(), output);
  }

  // optional uint32 flags = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->flags(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPublishedFile_GetItemInfo_Response.WorkshopItemInfo)
}

::google::protobuf::uint8* CPublishedFile_GetItemInfo_Response_WorkshopItemInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPublishedFile_GetItemInfo_Response.WorkshopItemInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 published_file_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->published_file_id(), target);
  }

  // optional uint32 time_updated = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time_updated(), target);
  }

  // optional fixed64 manifest_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->manifest_id(), target);
  }

  // optional uint32 flags = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->flags(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPublishedFile_GetItemInfo_Response.WorkshopItemInfo)
  return target;
}

size_t CPublishedFile_GetItemInfo_Response_WorkshopItemInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPublishedFile_GetItemInfo_Response.WorkshopItemInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional fixed64 published_file_id = 1;
    if (has_published_file_id()) {
      total_size += 1 + 8;
    }

    // optional fixed64 manifest_id = 3;
    if (has_manifest_id()) {
      total_size += 1 + 8;
    }

    // optional uint32 time_updated = 2;
    if (has_time_updated()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_updated());
    }

    // optional uint32 flags = 4;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPublishedFile_GetItemInfo_Response_WorkshopItemInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPublishedFile_GetItemInfo_Response.WorkshopItemInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CPublishedFile_GetItemInfo_Response_WorkshopItemInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CPublishedFile_GetItemInfo_Response_WorkshopItemInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPublishedFile_GetItemInfo_Response.WorkshopItemInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPublishedFile_GetItemInfo_Response.WorkshopItemInfo)
    MergeFrom(*source);
  }
}

void CPublishedFile_GetItemInfo_Response_WorkshopItemInfo::MergeFrom(const CPublishedFile_GetItemInfo_Response_WorkshopItemInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPublishedFile_GetItemInfo_Response.WorkshopItemInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      published_file_id_ = from.published_file_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      manifest_id_ = from.manifest_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      time_updated_ = from.time_updated_;
    }
    if (cached_has_bits & 0x00000008u) {
      flags_ = from.flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CPublishedFile_GetItemInfo_Response_WorkshopItemInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPublishedFile_GetItemInfo_Response.WorkshopItemInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPublishedFile_GetItemInfo_Response_WorkshopItemInfo::CopyFrom(const CPublishedFile_GetItemInfo_Response_WorkshopItemInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPublishedFile_GetItemInfo_Response.WorkshopItemInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_GetItemInfo_Response_WorkshopItemInfo::IsInitialized() const {
  return true;
}

void CPublishedFile_GetItemInfo_Response_WorkshopItemInfo::Swap(CPublishedFile_GetItemInfo_Response_WorkshopItemInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPublishedFile_GetItemInfo_Response_WorkshopItemInfo::InternalSwap(CPublishedFile_GetItemInfo_Response_WorkshopItemInfo* other) {
  std::swap(published_file_id_, other->published_file_id_);
  std::swap(manifest_id_, other->manifest_id_);
  std::swap(time_updated_, other->time_updated_);
  std::swap(flags_, other->flags_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CPublishedFile_GetItemInfo_Response_WorkshopItemInfo::GetMetadata() const {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CPublishedFile_GetItemInfo_Response_WorkshopItemInfo

// optional fixed64 published_file_id = 1;
bool CPublishedFile_GetItemInfo_Response_WorkshopItemInfo::has_published_file_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CPublishedFile_GetItemInfo_Response_WorkshopItemInfo::set_has_published_file_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CPublishedFile_GetItemInfo_Response_WorkshopItemInfo::clear_has_published_file_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CPublishedFile_GetItemInfo_Response_WorkshopItemInfo::clear_published_file_id() {
  published_file_id_ = GOOGLE_ULONGLONG(0);
  clear_has_published_file_id();
}
::google::protobuf::uint64 CPublishedFile_GetItemInfo_Response_WorkshopItemInfo::published_file_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_GetItemInfo_Response.WorkshopItemInfo.published_file_id)
  return published_file_id_;
}
void CPublishedFile_GetItemInfo_Response_WorkshopItemInfo::set_published_file_id(::google::protobuf::uint64 value) {
  set_has_published_file_id();
  published_file_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_GetItemInfo_Response.WorkshopItemInfo.published_file_id)
}

// optional uint32 time_updated = 2;
bool CPublishedFile_GetItemInfo_Response_WorkshopItemInfo::has_time_updated() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CPublishedFile_GetItemInfo_Response_WorkshopItemInfo::set_has_time_updated() {
  _has_bits_[0] |= 0x00000004u;
}
void CPublishedFile_GetItemInfo_Response_WorkshopItemInfo::clear_has_time_updated() {
  _has_bits_[0] &= ~0x00000004u;
}
void CPublishedFile_GetItemInfo_Response_WorkshopItemInfo::clear_time_updated() {
  time_updated_ = 0u;
  clear_has_time_updated();
}
::google::protobuf::uint32 CPublishedFile_GetItemInfo_Response_WorkshopItemInfo::time_updated() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_GetItemInfo_Response.WorkshopItemInfo.time_updated)
  return time_updated_;
}
void CPublishedFile_GetItemInfo_Response_WorkshopItemInfo::set_time_updated(::google::protobuf::uint32 value) {
  set_has_time_updated();
  time_updated_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_GetItemInfo_Response.WorkshopItemInfo.time_updated)
}

// optional fixed64 manifest_id = 3;
bool CPublishedFile_GetItemInfo_Response_WorkshopItemInfo::has_manifest_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CPublishedFile_GetItemInfo_Response_WorkshopItemInfo::set_has_manifest_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CPublishedFile_GetItemInfo_Response_WorkshopItemInfo::clear_has_manifest_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CPublishedFile_GetItemInfo_Response_WorkshopItemInfo::clear_manifest_id() {
  manifest_id_ = GOOGLE_ULONGLONG(0);
  clear_has_manifest_id();
}
::google::protobuf::uint64 CPublishedFile_GetItemInfo_Response_WorkshopItemInfo::manifest_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_GetItemInfo_Response.WorkshopItemInfo.manifest_id)
  return manifest_id_;
}
void CPublishedFile_GetItemInfo_Response_WorkshopItemInfo::set_manifest_id(::google::protobuf::uint64 value) {
  set_has_manifest_id();
  manifest_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_GetItemInfo_Response.WorkshopItemInfo.manifest_id)
}

// optional uint32 flags = 4;
bool CPublishedFile_GetItemInfo_Response_WorkshopItemInfo::has_flags() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CPublishedFile_GetItemInfo_Response_WorkshopItemInfo::set_has_flags() {
  _has_bits_[0] |= 0x00000008u;
}
void CPublishedFile_GetItemInfo_Response_WorkshopItemInfo::clear_has_flags() {
  _has_bits_[0] &= ~0x00000008u;
}
void CPublishedFile_GetItemInfo_Response_WorkshopItemInfo::clear_flags() {
  flags_ = 0u;
  clear_has_flags();
}
::google::protobuf::uint32 CPublishedFile_GetItemInfo_Response_WorkshopItemInfo::flags() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_GetItemInfo_Response.WorkshopItemInfo.flags)
  return flags_;
}
void CPublishedFile_GetItemInfo_Response_WorkshopItemInfo::set_flags(::google::protobuf::uint32 value) {
  set_has_flags();
  flags_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_GetItemInfo_Response.WorkshopItemInfo.flags)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPublishedFile_GetItemInfo_Response::kUpdateTimeFieldNumber;
const int CPublishedFile_GetItemInfo_Response::kWorkshopItemsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPublishedFile_GetItemInfo_Response::CPublishedFile_GetItemInfo_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPublishedFile_GetItemInfo_Response)
}
CPublishedFile_GetItemInfo_Response::CPublishedFile_GetItemInfo_Response(const CPublishedFile_GetItemInfo_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      workshop_items_(from.workshop_items_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  update_time_ = from.update_time_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPublishedFile_GetItemInfo_Response)
}

void CPublishedFile_GetItemInfo_Response::SharedCtor() {
  _cached_size_ = 0;
  update_time_ = 0u;
}

CPublishedFile_GetItemInfo_Response::~CPublishedFile_GetItemInfo_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CPublishedFile_GetItemInfo_Response)
  SharedDtor();
}

void CPublishedFile_GetItemInfo_Response::SharedDtor() {
}

void CPublishedFile_GetItemInfo_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPublishedFile_GetItemInfo_Response::descriptor() {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CPublishedFile_GetItemInfo_Response& CPublishedFile_GetItemInfo_Response::default_instance() {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CPublishedFile_GetItemInfo_Response* CPublishedFile_GetItemInfo_Response::New(::google::protobuf::Arena* arena) const {
  CPublishedFile_GetItemInfo_Response* n = new CPublishedFile_GetItemInfo_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CPublishedFile_GetItemInfo_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPublishedFile_GetItemInfo_Response)
  workshop_items_.Clear();
  update_time_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CPublishedFile_GetItemInfo_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPublishedFile_GetItemInfo_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 update_time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_update_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &update_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CPublishedFile_GetItemInfo_Response.WorkshopItemInfo workshop_items = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_workshop_items()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPublishedFile_GetItemInfo_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPublishedFile_GetItemInfo_Response)
  return false;
#undef DO_
}

void CPublishedFile_GetItemInfo_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPublishedFile_GetItemInfo_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 update_time = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->update_time(), output);
  }

  // repeated .proto.steam.CPublishedFile_GetItemInfo_Response.WorkshopItemInfo workshop_items = 2;
  for (unsigned int i = 0, n = this->workshop_items_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->workshop_items(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPublishedFile_GetItemInfo_Response)
}

::google::protobuf::uint8* CPublishedFile_GetItemInfo_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPublishedFile_GetItemInfo_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 update_time = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->update_time(), target);
  }

  // repeated .proto.steam.CPublishedFile_GetItemInfo_Response.WorkshopItemInfo workshop_items = 2;
  for (unsigned int i = 0, n = this->workshop_items_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->workshop_items(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPublishedFile_GetItemInfo_Response)
  return target;
}

size_t CPublishedFile_GetItemInfo_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPublishedFile_GetItemInfo_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.steam.CPublishedFile_GetItemInfo_Response.WorkshopItemInfo workshop_items = 2;
  {
    unsigned int count = this->workshop_items_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->workshop_items(i));
    }
  }

  // optional uint32 update_time = 1;
  if (has_update_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->update_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPublishedFile_GetItemInfo_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPublishedFile_GetItemInfo_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CPublishedFile_GetItemInfo_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CPublishedFile_GetItemInfo_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPublishedFile_GetItemInfo_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPublishedFile_GetItemInfo_Response)
    MergeFrom(*source);
  }
}

void CPublishedFile_GetItemInfo_Response::MergeFrom(const CPublishedFile_GetItemInfo_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPublishedFile_GetItemInfo_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  workshop_items_.MergeFrom(from.workshop_items_);
  if (from.has_update_time()) {
    set_update_time(from.update_time());
  }
}

void CPublishedFile_GetItemInfo_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPublishedFile_GetItemInfo_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPublishedFile_GetItemInfo_Response::CopyFrom(const CPublishedFile_GetItemInfo_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPublishedFile_GetItemInfo_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_GetItemInfo_Response::IsInitialized() const {
  return true;
}

void CPublishedFile_GetItemInfo_Response::Swap(CPublishedFile_GetItemInfo_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPublishedFile_GetItemInfo_Response::InternalSwap(CPublishedFile_GetItemInfo_Response* other) {
  workshop_items_.InternalSwap(&other->workshop_items_);
  std::swap(update_time_, other->update_time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CPublishedFile_GetItemInfo_Response::GetMetadata() const {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CPublishedFile_GetItemInfo_Response

// optional uint32 update_time = 1;
bool CPublishedFile_GetItemInfo_Response::has_update_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CPublishedFile_GetItemInfo_Response::set_has_update_time() {
  _has_bits_[0] |= 0x00000001u;
}
void CPublishedFile_GetItemInfo_Response::clear_has_update_time() {
  _has_bits_[0] &= ~0x00000001u;
}
void CPublishedFile_GetItemInfo_Response::clear_update_time() {
  update_time_ = 0u;
  clear_has_update_time();
}
::google::protobuf::uint32 CPublishedFile_GetItemInfo_Response::update_time() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_GetItemInfo_Response.update_time)
  return update_time_;
}
void CPublishedFile_GetItemInfo_Response::set_update_time(::google::protobuf::uint32 value) {
  set_has_update_time();
  update_time_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_GetItemInfo_Response.update_time)
}

// repeated .proto.steam.CPublishedFile_GetItemInfo_Response.WorkshopItemInfo workshop_items = 2;
int CPublishedFile_GetItemInfo_Response::workshop_items_size() const {
  return workshop_items_.size();
}
void CPublishedFile_GetItemInfo_Response::clear_workshop_items() {
  workshop_items_.Clear();
}
const ::proto::steam::CPublishedFile_GetItemInfo_Response_WorkshopItemInfo& CPublishedFile_GetItemInfo_Response::workshop_items(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_GetItemInfo_Response.workshop_items)
  return workshop_items_.Get(index);
}
::proto::steam::CPublishedFile_GetItemInfo_Response_WorkshopItemInfo* CPublishedFile_GetItemInfo_Response::mutable_workshop_items(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CPublishedFile_GetItemInfo_Response.workshop_items)
  return workshop_items_.Mutable(index);
}
::proto::steam::CPublishedFile_GetItemInfo_Response_WorkshopItemInfo* CPublishedFile_GetItemInfo_Response::add_workshop_items() {
  // @@protoc_insertion_point(field_add:proto.steam.CPublishedFile_GetItemInfo_Response.workshop_items)
  return workshop_items_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::CPublishedFile_GetItemInfo_Response_WorkshopItemInfo >*
CPublishedFile_GetItemInfo_Response::mutable_workshop_items() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CPublishedFile_GetItemInfo_Response.workshop_items)
  return &workshop_items_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::CPublishedFile_GetItemInfo_Response_WorkshopItemInfo >&
CPublishedFile_GetItemInfo_Response::workshop_items() const {
  // @@protoc_insertion_point(field_list:proto.steam.CPublishedFile_GetItemInfo_Response.workshop_items)
  return workshop_items_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPublishedFile_GetUserFiles_Request_KVTag::kKeyFieldNumber;
const int CPublishedFile_GetUserFiles_Request_KVTag::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPublishedFile_GetUserFiles_Request_KVTag::CPublishedFile_GetUserFiles_Request_KVTag()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPublishedFile_GetUserFiles_Request.KVTag)
}
CPublishedFile_GetUserFiles_Request_KVTag::CPublishedFile_GetUserFiles_Request_KVTag(const CPublishedFile_GetUserFiles_Request_KVTag& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_key()) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPublishedFile_GetUserFiles_Request.KVTag)
}

void CPublishedFile_GetUserFiles_Request_KVTag::SharedCtor() {
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CPublishedFile_GetUserFiles_Request_KVTag::~CPublishedFile_GetUserFiles_Request_KVTag() {
  // @@protoc_insertion_point(destructor:proto.steam.CPublishedFile_GetUserFiles_Request.KVTag)
  SharedDtor();
}

void CPublishedFile_GetUserFiles_Request_KVTag::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CPublishedFile_GetUserFiles_Request_KVTag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPublishedFile_GetUserFiles_Request_KVTag::descriptor() {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CPublishedFile_GetUserFiles_Request_KVTag& CPublishedFile_GetUserFiles_Request_KVTag::default_instance() {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CPublishedFile_GetUserFiles_Request_KVTag* CPublishedFile_GetUserFiles_Request_KVTag::New(::google::protobuf::Arena* arena) const {
  CPublishedFile_GetUserFiles_Request_KVTag* n = new CPublishedFile_GetUserFiles_Request_KVTag;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CPublishedFile_GetUserFiles_Request_KVTag::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPublishedFile_GetUserFiles_Request.KVTag)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_key()) {
      GOOGLE_DCHECK(!key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*key_.UnsafeRawStringPointer())->clear();
    }
    if (has_value()) {
      GOOGLE_DCHECK(!value_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*value_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CPublishedFile_GetUserFiles_Request_KVTag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPublishedFile_GetUserFiles_Request.KVTag)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CPublishedFile_GetUserFiles_Request.KVTag.key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CPublishedFile_GetUserFiles_Request.KVTag.value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPublishedFile_GetUserFiles_Request.KVTag)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPublishedFile_GetUserFiles_Request.KVTag)
  return false;
#undef DO_
}

void CPublishedFile_GetUserFiles_Request_KVTag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPublishedFile_GetUserFiles_Request.KVTag)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPublishedFile_GetUserFiles_Request.KVTag.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPublishedFile_GetUserFiles_Request.KVTag.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPublishedFile_GetUserFiles_Request.KVTag)
}

::google::protobuf::uint8* CPublishedFile_GetUserFiles_Request_KVTag::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPublishedFile_GetUserFiles_Request.KVTag)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPublishedFile_GetUserFiles_Request.KVTag.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPublishedFile_GetUserFiles_Request.KVTag.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPublishedFile_GetUserFiles_Request.KVTag)
  return target;
}

size_t CPublishedFile_GetUserFiles_Request_KVTag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPublishedFile_GetUserFiles_Request.KVTag)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPublishedFile_GetUserFiles_Request_KVTag::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPublishedFile_GetUserFiles_Request.KVTag)
  GOOGLE_DCHECK_NE(&from, this);
  const CPublishedFile_GetUserFiles_Request_KVTag* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CPublishedFile_GetUserFiles_Request_KVTag>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPublishedFile_GetUserFiles_Request.KVTag)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPublishedFile_GetUserFiles_Request.KVTag)
    MergeFrom(*source);
  }
}

void CPublishedFile_GetUserFiles_Request_KVTag::MergeFrom(const CPublishedFile_GetUserFiles_Request_KVTag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPublishedFile_GetUserFiles_Request.KVTag)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
}

void CPublishedFile_GetUserFiles_Request_KVTag::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPublishedFile_GetUserFiles_Request.KVTag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPublishedFile_GetUserFiles_Request_KVTag::CopyFrom(const CPublishedFile_GetUserFiles_Request_KVTag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPublishedFile_GetUserFiles_Request.KVTag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_GetUserFiles_Request_KVTag::IsInitialized() const {
  return true;
}

void CPublishedFile_GetUserFiles_Request_KVTag::Swap(CPublishedFile_GetUserFiles_Request_KVTag* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPublishedFile_GetUserFiles_Request_KVTag::InternalSwap(CPublishedFile_GetUserFiles_Request_KVTag* other) {
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CPublishedFile_GetUserFiles_Request_KVTag::GetMetadata() const {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CPublishedFile_GetUserFiles_Request_KVTag

// optional string key = 1;
bool CPublishedFile_GetUserFiles_Request_KVTag::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CPublishedFile_GetUserFiles_Request_KVTag::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void CPublishedFile_GetUserFiles_Request_KVTag::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void CPublishedFile_GetUserFiles_Request_KVTag::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
const ::std::string& CPublishedFile_GetUserFiles_Request_KVTag::key() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_GetUserFiles_Request.KVTag.key)
  return key_.GetNoArena();
}
void CPublishedFile_GetUserFiles_Request_KVTag::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_GetUserFiles_Request.KVTag.key)
}
#if LANG_CXX11
void CPublishedFile_GetUserFiles_Request_KVTag::set_key(::std::string&& value) {
  set_has_key();
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CPublishedFile_GetUserFiles_Request.KVTag.key)
}
#endif
void CPublishedFile_GetUserFiles_Request_KVTag::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CPublishedFile_GetUserFiles_Request.KVTag.key)
}
void CPublishedFile_GetUserFiles_Request_KVTag::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CPublishedFile_GetUserFiles_Request.KVTag.key)
}
::std::string* CPublishedFile_GetUserFiles_Request_KVTag::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:proto.steam.CPublishedFile_GetUserFiles_Request.KVTag.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CPublishedFile_GetUserFiles_Request_KVTag::release_key() {
  // @@protoc_insertion_point(field_release:proto.steam.CPublishedFile_GetUserFiles_Request.KVTag.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CPublishedFile_GetUserFiles_Request_KVTag::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CPublishedFile_GetUserFiles_Request.KVTag.key)
}

// optional string value = 2;
bool CPublishedFile_GetUserFiles_Request_KVTag::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CPublishedFile_GetUserFiles_Request_KVTag::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void CPublishedFile_GetUserFiles_Request_KVTag::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void CPublishedFile_GetUserFiles_Request_KVTag::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
const ::std::string& CPublishedFile_GetUserFiles_Request_KVTag::value() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_GetUserFiles_Request.KVTag.value)
  return value_.GetNoArena();
}
void CPublishedFile_GetUserFiles_Request_KVTag::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_GetUserFiles_Request.KVTag.value)
}
#if LANG_CXX11
void CPublishedFile_GetUserFiles_Request_KVTag::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CPublishedFile_GetUserFiles_Request.KVTag.value)
}
#endif
void CPublishedFile_GetUserFiles_Request_KVTag::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CPublishedFile_GetUserFiles_Request.KVTag.value)
}
void CPublishedFile_GetUserFiles_Request_KVTag::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CPublishedFile_GetUserFiles_Request.KVTag.value)
}
::std::string* CPublishedFile_GetUserFiles_Request_KVTag::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:proto.steam.CPublishedFile_GetUserFiles_Request.KVTag.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CPublishedFile_GetUserFiles_Request_KVTag::release_value() {
  // @@protoc_insertion_point(field_release:proto.steam.CPublishedFile_GetUserFiles_Request.KVTag.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CPublishedFile_GetUserFiles_Request_KVTag::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CPublishedFile_GetUserFiles_Request.KVTag.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

::google::protobuf::internal::ExplicitlyConstructed< ::std::string> CPublishedFile_GetUserFiles_Request::_default_type_;
::google::protobuf::internal::ExplicitlyConstructed< ::std::string> CPublishedFile_GetUserFiles_Request::_default_sortmethod_;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPublishedFile_GetUserFiles_Request::kSteamidFieldNumber;
const int CPublishedFile_GetUserFiles_Request::kAppidFieldNumber;
const int CPublishedFile_GetUserFiles_Request::kPageFieldNumber;
const int CPublishedFile_GetUserFiles_Request::kNumperpageFieldNumber;
const int CPublishedFile_GetUserFiles_Request::kTypeFieldNumber;
const int CPublishedFile_GetUserFiles_Request::kSortmethodFieldNumber;
const int CPublishedFile_GetUserFiles_Request::kPrivacyFieldNumber;
const int CPublishedFile_GetUserFiles_Request::kRequiredtagsFieldNumber;
const int CPublishedFile_GetUserFiles_Request::kExcludedtagsFieldNumber;
const int CPublishedFile_GetUserFiles_Request::kRequiredKvTagsFieldNumber;
const int CPublishedFile_GetUserFiles_Request::kFiletypeFieldNumber;
const int CPublishedFile_GetUserFiles_Request::kCreatorAppidFieldNumber;
const int CPublishedFile_GetUserFiles_Request::kMatchCloudFilenameFieldNumber;
const int CPublishedFile_GetUserFiles_Request::kCacheMaxAgeSecondsFieldNumber;
const int CPublishedFile_GetUserFiles_Request::kLanguageFieldNumber;
const int CPublishedFile_GetUserFiles_Request::kTotalonlyFieldNumber;
const int CPublishedFile_GetUserFiles_Request::kIdsOnlyFieldNumber;
const int CPublishedFile_GetUserFiles_Request::kReturnVoteDataFieldNumber;
const int CPublishedFile_GetUserFiles_Request::kReturnTagsFieldNumber;
const int CPublishedFile_GetUserFiles_Request::kReturnKvTagsFieldNumber;
const int CPublishedFile_GetUserFiles_Request::kReturnPreviewsFieldNumber;
const int CPublishedFile_GetUserFiles_Request::kReturnChildrenFieldNumber;
const int CPublishedFile_GetUserFiles_Request::kReturnShortDescriptionFieldNumber;
const int CPublishedFile_GetUserFiles_Request::kReturnForSaleDataFieldNumber;
const int CPublishedFile_GetUserFiles_Request::kReturnMetadataFieldNumber;
const int CPublishedFile_GetUserFiles_Request::kReturnPlaytimeStatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPublishedFile_GetUserFiles_Request::CPublishedFile_GetUserFiles_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPublishedFile_GetUserFiles_Request)
}
CPublishedFile_GetUserFiles_Request::CPublishedFile_GetUserFiles_Request(const CPublishedFile_GetUserFiles_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      requiredtags_(from.requiredtags_),
      excludedtags_(from.excludedtags_),
      required_kv_tags_(from.required_kv_tags_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&CPublishedFile_GetUserFiles_Request::_default_type_.get());
  if (from.has_type()) {
    type_.AssignWithDefault(&CPublishedFile_GetUserFiles_Request::_default_type_.get(), from.type_);
  }
  sortmethod_.UnsafeSetDefault(&CPublishedFile_GetUserFiles_Request::_default_sortmethod_.get());
  if (from.has_sortmethod()) {
    sortmethod_.AssignWithDefault(&CPublishedFile_GetUserFiles_Request::_default_sortmethod_.get(), from.sortmethod_);
  }
  match_cloud_filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_match_cloud_filename()) {
    match_cloud_filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.match_cloud_filename_);
  }
  ::memcpy(&steamid_, &from.steamid_,
    reinterpret_cast<char*>(&numperpage_) -
    reinterpret_cast<char*>(&steamid_) + sizeof(numperpage_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPublishedFile_GetUserFiles_Request)
}

void CPublishedFile_GetUserFiles_Request::SharedCtor() {
  _cached_size_ = 0;
  type_.UnsafeSetDefault(&CPublishedFile_GetUserFiles_Request::_default_type_.get());
  sortmethod_.UnsafeSetDefault(&CPublishedFile_GetUserFiles_Request::_default_sortmethod_.get());
  match_cloud_filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&steamid_, 0, reinterpret_cast<char*>(&language_) -
    reinterpret_cast<char*>(&steamid_) + sizeof(language_));
  return_vote_data_ = true;
  return_kv_tags_ = true;
  return_short_description_ = true;
  page_ = 1u;
  numperpage_ = 1u;
}

CPublishedFile_GetUserFiles_Request::~CPublishedFile_GetUserFiles_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CPublishedFile_GetUserFiles_Request)
  SharedDtor();
}

void CPublishedFile_GetUserFiles_Request::SharedDtor() {
  type_.DestroyNoArena(&CPublishedFile_GetUserFiles_Request::_default_type_.get());
  sortmethod_.DestroyNoArena(&CPublishedFile_GetUserFiles_Request::_default_sortmethod_.get());
  match_cloud_filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CPublishedFile_GetUserFiles_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPublishedFile_GetUserFiles_Request::descriptor() {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CPublishedFile_GetUserFiles_Request& CPublishedFile_GetUserFiles_Request::default_instance() {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CPublishedFile_GetUserFiles_Request* CPublishedFile_GetUserFiles_Request::New(::google::protobuf::Arena* arena) const {
  CPublishedFile_GetUserFiles_Request* n = new CPublishedFile_GetUserFiles_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CPublishedFile_GetUserFiles_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPublishedFile_GetUserFiles_Request)
  requiredtags_.Clear();
  excludedtags_.Clear();
  required_kv_tags_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    if (has_type()) {
      GOOGLE_DCHECK(!type_.IsDefault(&CPublishedFile_GetUserFiles_Request::_default_type_.get()));
      (*type_.UnsafeRawStringPointer())->assign(*&CPublishedFile_GetUserFiles_Request::_default_type_.get());
    }
    if (has_sortmethod()) {
      GOOGLE_DCHECK(!sortmethod_.IsDefault(&CPublishedFile_GetUserFiles_Request::_default_sortmethod_.get()));
      (*sortmethod_.UnsafeRawStringPointer())->assign(*&CPublishedFile_GetUserFiles_Request::_default_sortmethod_.get());
    }
    if (has_match_cloud_filename()) {
      GOOGLE_DCHECK(!match_cloud_filename_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*match_cloud_filename_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 248u) {
    ::memset(&steamid_, 0, reinterpret_cast<char*>(&creator_appid_) -
      reinterpret_cast<char*>(&steamid_) + sizeof(creator_appid_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&totalonly_, 0, reinterpret_cast<char*>(&return_playtime_stats_) -
      reinterpret_cast<char*>(&totalonly_) + sizeof(return_playtime_stats_));
  }
  if (_has_bits_[16 / 32] & 8323072u) {
    ::memset(&cache_max_age_seconds_, 0, reinterpret_cast<char*>(&language_) -
      reinterpret_cast<char*>(&cache_max_age_seconds_) + sizeof(language_));
    return_vote_data_ = true;
    return_kv_tags_ = true;
    return_short_description_ = true;
    page_ = 1u;
    numperpage_ = 1u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CPublishedFile_GetUserFiles_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPublishedFile_GetUserFiles_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1 [(.proto.steam.description) = "Steam ID of the user whose files are being requested."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 appid = 2 [(.proto.steam.description) = "App Id of the app that the files were published to."];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 page = 4 [default = 1, (.proto.steam.description) = "(Optional) Starting page for results."];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_page();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &page_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 numperpage = 5 [default = 1, (.proto.steam.description) = "(Optional) The number of results, per page to return."];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_numperpage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &numperpage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string type = 6 [default = "myfiles", (.proto.steam.description) = "(Optional) Type of files to be returned."];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CPublishedFile_GetUserFiles_Request.type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string sortmethod = 7 [default = "lastupdated", (.proto.steam.description) = "(Optional) Sorting method to use on returned values."];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sortmethod()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sortmethod().data(), this->sortmethod().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CPublishedFile_GetUserFiles_Request.sortmethod");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 privacy = 9 [(.proto.steam.description) = "(optional) Filter by privacy settings."];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_privacy();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &privacy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string requiredtags = 10 [(.proto.steam.description) = "(Optional) Tags that must be present on a published file to satisfy the query."];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_requiredtags()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->requiredtags(this->requiredtags_size() - 1).data(),
            this->requiredtags(this->requiredtags_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CPublishedFile_GetUserFiles_Request.requiredtags");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string excludedtags = 11 [(.proto.steam.description) = "(Optional) Tags that must NOT be present on a published file to satisfy the query."];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_excludedtags()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->excludedtags(this->excludedtags_size() - 1).data(),
            this->excludedtags(this->excludedtags_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CPublishedFile_GetUserFiles_Request.excludedtags");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 filetype = 14 [(.proto.steam.description) = "(Optional) File type to match files to."];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_filetype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &filetype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 creator_appid = 15 [(.proto.steam.description) = "App Id of the app that published the files, only matched if specified."];
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          set_has_creator_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &creator_appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string match_cloud_filename = 16 [(.proto.steam.description) = "Match this cloud filename if specified."];
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_match_cloud_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->match_cloud_filename().data(), this->match_cloud_filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CPublishedFile_GetUserFiles_Request.match_cloud_filename");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool totalonly = 17 [(.proto.steam.description) = "(Optional) If true, only return the total number of files that satisfy this query."];
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u)) {
          set_has_totalonly();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &totalonly_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool ids_only = 18 [(.proto.steam.description) = "(Optional) If true, only return the published file ids of files that satisfy this query."];
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u)) {
          set_has_ids_only();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ids_only_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool return_vote_data = 19 [default = true, (.proto.steam.description) = "Return vote data"];
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u)) {
          set_has_return_vote_data();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &return_vote_data_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool return_tags = 20 [(.proto.steam.description) = "Return tags in the file details"];
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u)) {
          set_has_return_tags();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &return_tags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool return_kv_tags = 21 [default = true, (.proto.steam.description) = "Return key-value tags in the file details"];
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u)) {
          set_has_return_kv_tags();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &return_kv_tags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool return_previews = 22 [(.proto.steam.description) = "Return preview image and video details in the file details"];
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u)) {
          set_has_return_previews();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &return_previews_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool return_children = 23 [(.proto.steam.description) = "Return child item ids in the file details"];
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u)) {
          set_has_return_children();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &return_children_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool return_short_description = 24 [default = true, (.proto.steam.description) = "Populate the short_description field instead of file_description"];
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u)) {
          set_has_return_short_description();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &return_short_description_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool return_for_sale_data = 26 [(.proto.steam.description) = "Return pricing information, if applicable"];
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u)) {
          set_has_return_for_sale_data();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &return_for_sale_data_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cache_max_age_seconds = 27 [default = 0, (.proto.steam.description) = "Allow stale data to be returned for the specified number of seconds."];
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u)) {
          set_has_cache_max_age_seconds();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cache_max_age_seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool return_metadata = 28 [default = false, (.proto.steam.description) = "Populate the metadata field"];
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u)) {
          set_has_return_metadata();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &return_metadata_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 language = 29 [default = 0, (.proto.steam.description) = "Specifies the localized text to return. Defaults to English."];
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(232u)) {
          set_has_language();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &language_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CPublishedFile_GetUserFiles_Request.KVTag required_kv_tags = 30 [(.proto.steam.description) = "Required key-value tags to match on."];
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_required_kv_tags()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 return_playtime_stats = 31 [(.proto.steam.description) = "Return playtime stats for the specified number of days before today."];
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u)) {
          set_has_return_playtime_stats();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &return_playtime_stats_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPublishedFile_GetUserFiles_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPublishedFile_GetUserFiles_Request)
  return false;
#undef DO_
}

void CPublishedFile_GetUserFiles_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPublishedFile_GetUserFiles_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1 [(.proto.steam.description) = "Steam ID of the user whose files are being requested."];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional uint32 appid = 2 [(.proto.steam.description) = "App Id of the app that the files were published to."];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->appid(), output);
  }

  // optional uint32 page = 4 [default = 1, (.proto.steam.description) = "(Optional) Starting page for results."];
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->page(), output);
  }

  // optional uint32 numperpage = 5 [default = 1, (.proto.steam.description) = "(Optional) The number of results, per page to return."];
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->numperpage(), output);
  }

  // optional string type = 6 [default = "myfiles", (.proto.steam.description) = "(Optional) Type of files to be returned."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPublishedFile_GetUserFiles_Request.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->type(), output);
  }

  // optional string sortmethod = 7 [default = "lastupdated", (.proto.steam.description) = "(Optional) Sorting method to use on returned values."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sortmethod().data(), this->sortmethod().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPublishedFile_GetUserFiles_Request.sortmethod");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->sortmethod(), output);
  }

  // optional uint32 privacy = 9 [(.proto.steam.description) = "(optional) Filter by privacy settings."];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->privacy(), output);
  }

  // repeated string requiredtags = 10 [(.proto.steam.description) = "(Optional) Tags that must be present on a published file to satisfy the query."];
  for (int i = 0, n = this->requiredtags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->requiredtags(i).data(), this->requiredtags(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPublishedFile_GetUserFiles_Request.requiredtags");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->requiredtags(i), output);
  }

  // repeated string excludedtags = 11 [(.proto.steam.description) = "(Optional) Tags that must NOT be present on a published file to satisfy the query."];
  for (int i = 0, n = this->excludedtags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->excludedtags(i).data(), this->excludedtags(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPublishedFile_GetUserFiles_Request.excludedtags");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->excludedtags(i), output);
  }

  // optional uint32 filetype = 14 [(.proto.steam.description) = "(Optional) File type to match files to."];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->filetype(), output);
  }

  // optional uint32 creator_appid = 15 [(.proto.steam.description) = "App Id of the app that published the files, only matched if specified."];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->creator_appid(), output);
  }

  // optional string match_cloud_filename = 16 [(.proto.steam.description) = "Match this cloud filename if specified."];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->match_cloud_filename().data(), this->match_cloud_filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPublishedFile_GetUserFiles_Request.match_cloud_filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->match_cloud_filename(), output);
  }

  // optional bool totalonly = 17 [(.proto.steam.description) = "(Optional) If true, only return the total number of files that satisfy this query."];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->totalonly(), output);
  }

  // optional bool ids_only = 18 [(.proto.steam.description) = "(Optional) If true, only return the published file ids of files that satisfy this query."];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->ids_only(), output);
  }

  // optional bool return_vote_data = 19 [default = true, (.proto.steam.description) = "Return vote data"];
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->return_vote_data(), output);
  }

  // optional bool return_tags = 20 [(.proto.steam.description) = "Return tags in the file details"];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->return_tags(), output);
  }

  // optional bool return_kv_tags = 21 [default = true, (.proto.steam.description) = "Return key-value tags in the file details"];
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->return_kv_tags(), output);
  }

  // optional bool return_previews = 22 [(.proto.steam.description) = "Return preview image and video details in the file details"];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->return_previews(), output);
  }

  // optional bool return_children = 23 [(.proto.steam.description) = "Return child item ids in the file details"];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->return_children(), output);
  }

  // optional bool return_short_description = 24 [default = true, (.proto.steam.description) = "Populate the short_description field instead of file_description"];
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->return_short_description(), output);
  }

  // optional bool return_for_sale_data = 26 [(.proto.steam.description) = "Return pricing information, if applicable"];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(26, this->return_for_sale_data(), output);
  }

  // optional uint32 cache_max_age_seconds = 27 [default = 0, (.proto.steam.description) = "Allow stale data to be returned for the specified number of seconds."];
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->cache_max_age_seconds(), output);
  }

  // optional bool return_metadata = 28 [default = false, (.proto.steam.description) = "Populate the metadata field"];
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(28, this->return_metadata(), output);
  }

  // optional int32 language = 29 [default = 0, (.proto.steam.description) = "Specifies the localized text to return. Defaults to English."];
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->language(), output);
  }

  // repeated .proto.steam.CPublishedFile_GetUserFiles_Request.KVTag required_kv_tags = 30 [(.proto.steam.description) = "Required key-value tags to match on."];
  for (unsigned int i = 0, n = this->required_kv_tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->required_kv_tags(i), output);
  }

  // optional uint32 return_playtime_stats = 31 [(.proto.steam.description) = "Return playtime stats for the specified number of days before today."];
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->return_playtime_stats(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPublishedFile_GetUserFiles_Request)
}

::google::protobuf::uint8* CPublishedFile_GetUserFiles_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPublishedFile_GetUserFiles_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1 [(.proto.steam.description) = "Steam ID of the user whose files are being requested."];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional uint32 appid = 2 [(.proto.steam.description) = "App Id of the app that the files were published to."];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->appid(), target);
  }

  // optional uint32 page = 4 [default = 1, (.proto.steam.description) = "(Optional) Starting page for results."];
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->page(), target);
  }

  // optional uint32 numperpage = 5 [default = 1, (.proto.steam.description) = "(Optional) The number of results, per page to return."];
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->numperpage(), target);
  }

  // optional string type = 6 [default = "myfiles", (.proto.steam.description) = "(Optional) Type of files to be returned."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPublishedFile_GetUserFiles_Request.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->type(), target);
  }

  // optional string sortmethod = 7 [default = "lastupdated", (.proto.steam.description) = "(Optional) Sorting method to use on returned values."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sortmethod().data(), this->sortmethod().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPublishedFile_GetUserFiles_Request.sortmethod");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->sortmethod(), target);
  }

  // optional uint32 privacy = 9 [(.proto.steam.description) = "(optional) Filter by privacy settings."];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->privacy(), target);
  }

  // repeated string requiredtags = 10 [(.proto.steam.description) = "(Optional) Tags that must be present on a published file to satisfy the query."];
  for (int i = 0, n = this->requiredtags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->requiredtags(i).data(), this->requiredtags(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPublishedFile_GetUserFiles_Request.requiredtags");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(10, this->requiredtags(i), target);
  }

  // repeated string excludedtags = 11 [(.proto.steam.description) = "(Optional) Tags that must NOT be present on a published file to satisfy the query."];
  for (int i = 0, n = this->excludedtags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->excludedtags(i).data(), this->excludedtags(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPublishedFile_GetUserFiles_Request.excludedtags");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(11, this->excludedtags(i), target);
  }

  // optional uint32 filetype = 14 [(.proto.steam.description) = "(Optional) File type to match files to."];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->filetype(), target);
  }

  // optional uint32 creator_appid = 15 [(.proto.steam.description) = "App Id of the app that published the files, only matched if specified."];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->creator_appid(), target);
  }

  // optional string match_cloud_filename = 16 [(.proto.steam.description) = "Match this cloud filename if specified."];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->match_cloud_filename().data(), this->match_cloud_filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPublishedFile_GetUserFiles_Request.match_cloud_filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->match_cloud_filename(), target);
  }

  // optional bool totalonly = 17 [(.proto.steam.description) = "(Optional) If true, only return the total number of files that satisfy this query."];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->totalonly(), target);
  }

  // optional bool ids_only = 18 [(.proto.steam.description) = "(Optional) If true, only return the published file ids of files that satisfy this query."];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->ids_only(), target);
  }

  // optional bool return_vote_data = 19 [default = true, (.proto.steam.description) = "Return vote data"];
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->return_vote_data(), target);
  }

  // optional bool return_tags = 20 [(.proto.steam.description) = "Return tags in the file details"];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->return_tags(), target);
  }

  // optional bool return_kv_tags = 21 [default = true, (.proto.steam.description) = "Return key-value tags in the file details"];
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->return_kv_tags(), target);
  }

  // optional bool return_previews = 22 [(.proto.steam.description) = "Return preview image and video details in the file details"];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->return_previews(), target);
  }

  // optional bool return_children = 23 [(.proto.steam.description) = "Return child item ids in the file details"];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->return_children(), target);
  }

  // optional bool return_short_description = 24 [default = true, (.proto.steam.description) = "Populate the short_description field instead of file_description"];
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(24, this->return_short_description(), target);
  }

  // optional bool return_for_sale_data = 26 [(.proto.steam.description) = "Return pricing information, if applicable"];
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(26, this->return_for_sale_data(), target);
  }

  // optional uint32 cache_max_age_seconds = 27 [default = 0, (.proto.steam.description) = "Allow stale data to be returned for the specified number of seconds."];
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->cache_max_age_seconds(), target);
  }

  // optional bool return_metadata = 28 [default = false, (.proto.steam.description) = "Populate the metadata field"];
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(28, this->return_metadata(), target);
  }

  // optional int32 language = 29 [default = 0, (.proto.steam.description) = "Specifies the localized text to return. Defaults to English."];
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->language(), target);
  }

  // repeated .proto.steam.CPublishedFile_GetUserFiles_Request.KVTag required_kv_tags = 30 [(.proto.steam.description) = "Required key-value tags to match on."];
  for (unsigned int i = 0, n = this->required_kv_tags_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        30, this->required_kv_tags(i), deterministic, target);
  }

  // optional uint32 return_playtime_stats = 31 [(.proto.steam.description) = "Return playtime stats for the specified number of days before today."];
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->return_playtime_stats(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPublishedFile_GetUserFiles_Request)
  return target;
}

size_t CPublishedFile_GetUserFiles_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPublishedFile_GetUserFiles_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated string requiredtags = 10 [(.proto.steam.description) = "(Optional) Tags that must be present on a published file to satisfy the query."];
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->requiredtags_size());
  for (int i = 0, n = this->requiredtags_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->requiredtags(i));
  }

  // repeated string excludedtags = 11 [(.proto.steam.description) = "(Optional) Tags that must NOT be present on a published file to satisfy the query."];
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->excludedtags_size());
  for (int i = 0, n = this->excludedtags_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->excludedtags(i));
  }

  // repeated .proto.steam.CPublishedFile_GetUserFiles_Request.KVTag required_kv_tags = 30 [(.proto.steam.description) = "Required key-value tags to match on."];
  {
    unsigned int count = this->required_kv_tags_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->required_kv_tags(i));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string type = 6 [default = "myfiles", (.proto.steam.description) = "(Optional) Type of files to be returned."];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional string sortmethod = 7 [default = "lastupdated", (.proto.steam.description) = "(Optional) Sorting method to use on returned values."];
    if (has_sortmethod()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sortmethod());
    }

    // optional string match_cloud_filename = 16 [(.proto.steam.description) = "Match this cloud filename if specified."];
    if (has_match_cloud_filename()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->match_cloud_filename());
    }

    // optional fixed64 steamid = 1 [(.proto.steam.description) = "Steam ID of the user whose files are being requested."];
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional uint32 appid = 2 [(.proto.steam.description) = "App Id of the app that the files were published to."];
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional uint32 privacy = 9 [(.proto.steam.description) = "(optional) Filter by privacy settings."];
    if (has_privacy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->privacy());
    }

    // optional uint32 filetype = 14 [(.proto.steam.description) = "(Optional) File type to match files to."];
    if (has_filetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->filetype());
    }

    // optional uint32 creator_appid = 15 [(.proto.steam.description) = "App Id of the app that published the files, only matched if specified."];
    if (has_creator_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->creator_appid());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional bool totalonly = 17 [(.proto.steam.description) = "(Optional) If true, only return the total number of files that satisfy this query."];
    if (has_totalonly()) {
      total_size += 2 + 1;
    }

    // optional bool ids_only = 18 [(.proto.steam.description) = "(Optional) If true, only return the published file ids of files that satisfy this query."];
    if (has_ids_only()) {
      total_size += 2 + 1;
    }

    // optional bool return_tags = 20 [(.proto.steam.description) = "Return tags in the file details"];
    if (has_return_tags()) {
      total_size += 2 + 1;
    }

    // optional bool return_previews = 22 [(.proto.steam.description) = "Return preview image and video details in the file details"];
    if (has_return_previews()) {
      total_size += 2 + 1;
    }

    // optional bool return_children = 23 [(.proto.steam.description) = "Return child item ids in the file details"];
    if (has_return_children()) {
      total_size += 2 + 1;
    }

    // optional bool return_for_sale_data = 26 [(.proto.steam.description) = "Return pricing information, if applicable"];
    if (has_return_for_sale_data()) {
      total_size += 2 + 1;
    }

    // optional bool return_metadata = 28 [default = false, (.proto.steam.description) = "Populate the metadata field"];
    if (has_return_metadata()) {
      total_size += 2 + 1;
    }

    // optional uint32 return_playtime_stats = 31 [(.proto.steam.description) = "Return playtime stats for the specified number of days before today."];
    if (has_return_playtime_stats()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->return_playtime_stats());
    }

  }
  if (_has_bits_[16 / 32] & 8323072u) {
    // optional uint32 cache_max_age_seconds = 27 [default = 0, (.proto.steam.description) = "Allow stale data to be returned for the specified number of seconds."];
    if (has_cache_max_age_seconds()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cache_max_age_seconds());
    }

    // optional int32 language = 29 [default = 0, (.proto.steam.description) = "Specifies the localized text to return. Defaults to English."];
    if (has_language()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->language());
    }

    // optional bool return_vote_data = 19 [default = true, (.proto.steam.description) = "Return vote data"];
    if (has_return_vote_data()) {
      total_size += 2 + 1;
    }

    // optional bool return_kv_tags = 21 [default = true, (.proto.steam.description) = "Return key-value tags in the file details"];
    if (has_return_kv_tags()) {
      total_size += 2 + 1;
    }

    // optional bool return_short_description = 24 [default = true, (.proto.steam.description) = "Populate the short_description field instead of file_description"];
    if (has_return_short_description()) {
      total_size += 2 + 1;
    }

    // optional uint32 page = 4 [default = 1, (.proto.steam.description) = "(Optional) Starting page for results."];
    if (has_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->page());
    }

    // optional uint32 numperpage = 5 [default = 1, (.proto.steam.description) = "(Optional) The number of results, per page to return."];
    if (has_numperpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->numperpage());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPublishedFile_GetUserFiles_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPublishedFile_GetUserFiles_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CPublishedFile_GetUserFiles_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CPublishedFile_GetUserFiles_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPublishedFile_GetUserFiles_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPublishedFile_GetUserFiles_Request)
    MergeFrom(*source);
  }
}

void CPublishedFile_GetUserFiles_Request::MergeFrom(const CPublishedFile_GetUserFiles_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPublishedFile_GetUserFiles_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  requiredtags_.MergeFrom(from.requiredtags_);
  excludedtags_.MergeFrom(from.excludedtags_);
  required_kv_tags_.MergeFrom(from.required_kv_tags_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_type();
      type_.AssignWithDefault(&CPublishedFile_GetUserFiles_Request::_default_type_.get(), from.type_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_sortmethod();
      sortmethod_.AssignWithDefault(&CPublishedFile_GetUserFiles_Request::_default_sortmethod_.get(), from.sortmethod_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_match_cloud_filename();
      match_cloud_filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.match_cloud_filename_);
    }
    if (cached_has_bits & 0x00000008u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000010u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000020u) {
      privacy_ = from.privacy_;
    }
    if (cached_has_bits & 0x00000040u) {
      filetype_ = from.filetype_;
    }
    if (cached_has_bits & 0x00000080u) {
      creator_appid_ = from.creator_appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      totalonly_ = from.totalonly_;
    }
    if (cached_has_bits & 0x00000200u) {
      ids_only_ = from.ids_only_;
    }
    if (cached_has_bits & 0x00000400u) {
      return_tags_ = from.return_tags_;
    }
    if (cached_has_bits & 0x00000800u) {
      return_previews_ = from.return_previews_;
    }
    if (cached_has_bits & 0x00001000u) {
      return_children_ = from.return_children_;
    }
    if (cached_has_bits & 0x00002000u) {
      return_for_sale_data_ = from.return_for_sale_data_;
    }
    if (cached_has_bits & 0x00004000u) {
      return_metadata_ = from.return_metadata_;
    }
    if (cached_has_bits & 0x00008000u) {
      return_playtime_stats_ = from.return_playtime_stats_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 8323072u) {
    if (cached_has_bits & 0x00010000u) {
      cache_max_age_seconds_ = from.cache_max_age_seconds_;
    }
    if (cached_has_bits & 0x00020000u) {
      language_ = from.language_;
    }
    if (cached_has_bits & 0x00040000u) {
      return_vote_data_ = from.return_vote_data_;
    }
    if (cached_has_bits & 0x00080000u) {
      return_kv_tags_ = from.return_kv_tags_;
    }
    if (cached_has_bits & 0x00100000u) {
      return_short_description_ = from.return_short_description_;
    }
    if (cached_has_bits & 0x00200000u) {
      page_ = from.page_;
    }
    if (cached_has_bits & 0x00400000u) {
      numperpage_ = from.numperpage_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CPublishedFile_GetUserFiles_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPublishedFile_GetUserFiles_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPublishedFile_GetUserFiles_Request::CopyFrom(const CPublishedFile_GetUserFiles_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPublishedFile_GetUserFiles_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_GetUserFiles_Request::IsInitialized() const {
  return true;
}

void CPublishedFile_GetUserFiles_Request::Swap(CPublishedFile_GetUserFiles_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPublishedFile_GetUserFiles_Request::InternalSwap(CPublishedFile_GetUserFiles_Request* other) {
  requiredtags_.InternalSwap(&other->requiredtags_);
  excludedtags_.InternalSwap(&other->excludedtags_);
  required_kv_tags_.InternalSwap(&other->required_kv_tags_);
  type_.Swap(&other->type_);
  sortmethod_.Swap(&other->sortmethod_);
  match_cloud_filename_.Swap(&other->match_cloud_filename_);
  std::swap(steamid_, other->steamid_);
  std::swap(appid_, other->appid_);
  std::swap(privacy_, other->privacy_);
  std::swap(filetype_, other->filetype_);
  std::swap(creator_appid_, other->creator_appid_);
  std::swap(totalonly_, other->totalonly_);
  std::swap(ids_only_, other->ids_only_);
  std::swap(return_tags_, other->return_tags_);
  std::swap(return_previews_, other->return_previews_);
  std::swap(return_children_, other->return_children_);
  std::swap(return_for_sale_data_, other->return_for_sale_data_);
  std::swap(return_metadata_, other->return_metadata_);
  std::swap(return_playtime_stats_, other->return_playtime_stats_);
  std::swap(cache_max_age_seconds_, other->cache_max_age_seconds_);
  std::swap(language_, other->language_);
  std::swap(return_vote_data_, other->return_vote_data_);
  std::swap(return_kv_tags_, other->return_kv_tags_);
  std::swap(return_short_description_, other->return_short_description_);
  std::swap(page_, other->page_);
  std::swap(numperpage_, other->numperpage_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CPublishedFile_GetUserFiles_Request::GetMetadata() const {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CPublishedFile_GetUserFiles_Request

// optional fixed64 steamid = 1 [(.proto.steam.description) = "Steam ID of the user whose files are being requested."];
bool CPublishedFile_GetUserFiles_Request::has_steamid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CPublishedFile_GetUserFiles_Request::set_has_steamid() {
  _has_bits_[0] |= 0x00000008u;
}
void CPublishedFile_GetUserFiles_Request::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000008u;
}
void CPublishedFile_GetUserFiles_Request::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
::google::protobuf::uint64 CPublishedFile_GetUserFiles_Request::steamid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_GetUserFiles_Request.steamid)
  return steamid_;
}
void CPublishedFile_GetUserFiles_Request::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_GetUserFiles_Request.steamid)
}

// optional uint32 appid = 2 [(.proto.steam.description) = "App Id of the app that the files were published to."];
bool CPublishedFile_GetUserFiles_Request::has_appid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CPublishedFile_GetUserFiles_Request::set_has_appid() {
  _has_bits_[0] |= 0x00000010u;
}
void CPublishedFile_GetUserFiles_Request::clear_has_appid() {
  _has_bits_[0] &= ~0x00000010u;
}
void CPublishedFile_GetUserFiles_Request::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
::google::protobuf::uint32 CPublishedFile_GetUserFiles_Request::appid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_GetUserFiles_Request.appid)
  return appid_;
}
void CPublishedFile_GetUserFiles_Request::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_GetUserFiles_Request.appid)
}

// optional uint32 page = 4 [default = 1, (.proto.steam.description) = "(Optional) Starting page for results."];
bool CPublishedFile_GetUserFiles_Request::has_page() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void CPublishedFile_GetUserFiles_Request::set_has_page() {
  _has_bits_[0] |= 0x00200000u;
}
void CPublishedFile_GetUserFiles_Request::clear_has_page() {
  _has_bits_[0] &= ~0x00200000u;
}
void CPublishedFile_GetUserFiles_Request::clear_page() {
  page_ = 1u;
  clear_has_page();
}
::google::protobuf::uint32 CPublishedFile_GetUserFiles_Request::page() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_GetUserFiles_Request.page)
  return page_;
}
void CPublishedFile_GetUserFiles_Request::set_page(::google::protobuf::uint32 value) {
  set_has_page();
  page_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_GetUserFiles_Request.page)
}

// optional uint32 numperpage = 5 [default = 1, (.proto.steam.description) = "(Optional) The number of results, per page to return."];
bool CPublishedFile_GetUserFiles_Request::has_numperpage() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void CPublishedFile_GetUserFiles_Request::set_has_numperpage() {
  _has_bits_[0] |= 0x00400000u;
}
void CPublishedFile_GetUserFiles_Request::clear_has_numperpage() {
  _has_bits_[0] &= ~0x00400000u;
}
void CPublishedFile_GetUserFiles_Request::clear_numperpage() {
  numperpage_ = 1u;
  clear_has_numperpage();
}
::google::protobuf::uint32 CPublishedFile_GetUserFiles_Request::numperpage() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_GetUserFiles_Request.numperpage)
  return numperpage_;
}
void CPublishedFile_GetUserFiles_Request::set_numperpage(::google::protobuf::uint32 value) {
  set_has_numperpage();
  numperpage_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_GetUserFiles_Request.numperpage)
}

// optional string type = 6 [default = "myfiles", (.proto.steam.description) = "(Optional) Type of files to be returned."];
bool CPublishedFile_GetUserFiles_Request::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CPublishedFile_GetUserFiles_Request::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void CPublishedFile_GetUserFiles_Request::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void CPublishedFile_GetUserFiles_Request::clear_type() {
  type_.ClearToDefaultNoArena(&CPublishedFile_GetUserFiles_Request::_default_type_.get());
  clear_has_type();
}
const ::std::string& CPublishedFile_GetUserFiles_Request::type() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_GetUserFiles_Request.type)
  return type_.GetNoArena();
}
void CPublishedFile_GetUserFiles_Request::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&CPublishedFile_GetUserFiles_Request::_default_type_.get(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_GetUserFiles_Request.type)
}
#if LANG_CXX11
void CPublishedFile_GetUserFiles_Request::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &CPublishedFile_GetUserFiles_Request::_default_type_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CPublishedFile_GetUserFiles_Request.type)
}
#endif
void CPublishedFile_GetUserFiles_Request::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_type();
  type_.SetNoArena(&CPublishedFile_GetUserFiles_Request::_default_type_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CPublishedFile_GetUserFiles_Request.type)
}
void CPublishedFile_GetUserFiles_Request::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&CPublishedFile_GetUserFiles_Request::_default_type_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CPublishedFile_GetUserFiles_Request.type)
}
::std::string* CPublishedFile_GetUserFiles_Request::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:proto.steam.CPublishedFile_GetUserFiles_Request.type)
  return type_.MutableNoArena(&CPublishedFile_GetUserFiles_Request::_default_type_.get());
}
::std::string* CPublishedFile_GetUserFiles_Request::release_type() {
  // @@protoc_insertion_point(field_release:proto.steam.CPublishedFile_GetUserFiles_Request.type)
  clear_has_type();
  return type_.ReleaseNoArena(&CPublishedFile_GetUserFiles_Request::_default_type_.get());
}
void CPublishedFile_GetUserFiles_Request::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&CPublishedFile_GetUserFiles_Request::_default_type_.get(), type);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CPublishedFile_GetUserFiles_Request.type)
}

// optional string sortmethod = 7 [default = "lastupdated", (.proto.steam.description) = "(Optional) Sorting method to use on returned values."];
bool CPublishedFile_GetUserFiles_Request::has_sortmethod() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CPublishedFile_GetUserFiles_Request::set_has_sortmethod() {
  _has_bits_[0] |= 0x00000002u;
}
void CPublishedFile_GetUserFiles_Request::clear_has_sortmethod() {
  _has_bits_[0] &= ~0x00000002u;
}
void CPublishedFile_GetUserFiles_Request::clear_sortmethod() {
  sortmethod_.ClearToDefaultNoArena(&CPublishedFile_GetUserFiles_Request::_default_sortmethod_.get());
  clear_has_sortmethod();
}
const ::std::string& CPublishedFile_GetUserFiles_Request::sortmethod() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_GetUserFiles_Request.sortmethod)
  return sortmethod_.GetNoArena();
}
void CPublishedFile_GetUserFiles_Request::set_sortmethod(const ::std::string& value) {
  set_has_sortmethod();
  sortmethod_.SetNoArena(&CPublishedFile_GetUserFiles_Request::_default_sortmethod_.get(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_GetUserFiles_Request.sortmethod)
}
#if LANG_CXX11
void CPublishedFile_GetUserFiles_Request::set_sortmethod(::std::string&& value) {
  set_has_sortmethod();
  sortmethod_.SetNoArena(
    &CPublishedFile_GetUserFiles_Request::_default_sortmethod_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CPublishedFile_GetUserFiles_Request.sortmethod)
}
#endif
void CPublishedFile_GetUserFiles_Request::set_sortmethod(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sortmethod();
  sortmethod_.SetNoArena(&CPublishedFile_GetUserFiles_Request::_default_sortmethod_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CPublishedFile_GetUserFiles_Request.sortmethod)
}
void CPublishedFile_GetUserFiles_Request::set_sortmethod(const char* value, size_t size) {
  set_has_sortmethod();
  sortmethod_.SetNoArena(&CPublishedFile_GetUserFiles_Request::_default_sortmethod_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CPublishedFile_GetUserFiles_Request.sortmethod)
}
::std::string* CPublishedFile_GetUserFiles_Request::mutable_sortmethod() {
  set_has_sortmethod();
  // @@protoc_insertion_point(field_mutable:proto.steam.CPublishedFile_GetUserFiles_Request.sortmethod)
  return sortmethod_.MutableNoArena(&CPublishedFile_GetUserFiles_Request::_default_sortmethod_.get());
}
::std::string* CPublishedFile_GetUserFiles_Request::release_sortmethod() {
  // @@protoc_insertion_point(field_release:proto.steam.CPublishedFile_GetUserFiles_Request.sortmethod)
  clear_has_sortmethod();
  return sortmethod_.ReleaseNoArena(&CPublishedFile_GetUserFiles_Request::_default_sortmethod_.get());
}
void CPublishedFile_GetUserFiles_Request::set_allocated_sortmethod(::std::string* sortmethod) {
  if (sortmethod != NULL) {
    set_has_sortmethod();
  } else {
    clear_has_sortmethod();
  }
  sortmethod_.SetAllocatedNoArena(&CPublishedFile_GetUserFiles_Request::_default_sortmethod_.get(), sortmethod);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CPublishedFile_GetUserFiles_Request.sortmethod)
}

// optional uint32 privacy = 9 [(.proto.steam.description) = "(optional) Filter by privacy settings."];
bool CPublishedFile_GetUserFiles_Request::has_privacy() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CPublishedFile_GetUserFiles_Request::set_has_privacy() {
  _has_bits_[0] |= 0x00000020u;
}
void CPublishedFile_GetUserFiles_Request::clear_has_privacy() {
  _has_bits_[0] &= ~0x00000020u;
}
void CPublishedFile_GetUserFiles_Request::clear_privacy() {
  privacy_ = 0u;
  clear_has_privacy();
}
::google::protobuf::uint32 CPublishedFile_GetUserFiles_Request::privacy() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_GetUserFiles_Request.privacy)
  return privacy_;
}
void CPublishedFile_GetUserFiles_Request::set_privacy(::google::protobuf::uint32 value) {
  set_has_privacy();
  privacy_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_GetUserFiles_Request.privacy)
}

// repeated string requiredtags = 10 [(.proto.steam.description) = "(Optional) Tags that must be present on a published file to satisfy the query."];
int CPublishedFile_GetUserFiles_Request::requiredtags_size() const {
  return requiredtags_.size();
}
void CPublishedFile_GetUserFiles_Request::clear_requiredtags() {
  requiredtags_.Clear();
}
const ::std::string& CPublishedFile_GetUserFiles_Request::requiredtags(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_GetUserFiles_Request.requiredtags)
  return requiredtags_.Get(index);
}
::std::string* CPublishedFile_GetUserFiles_Request::mutable_requiredtags(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CPublishedFile_GetUserFiles_Request.requiredtags)
  return requiredtags_.Mutable(index);
}
void CPublishedFile_GetUserFiles_Request::set_requiredtags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_GetUserFiles_Request.requiredtags)
  requiredtags_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void CPublishedFile_GetUserFiles_Request::set_requiredtags(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_GetUserFiles_Request.requiredtags)
  requiredtags_.Mutable(index)->assign(std::move(value));
}
#endif
void CPublishedFile_GetUserFiles_Request::set_requiredtags(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  requiredtags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.steam.CPublishedFile_GetUserFiles_Request.requiredtags)
}
void CPublishedFile_GetUserFiles_Request::set_requiredtags(int index, const char* value, size_t size) {
  requiredtags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CPublishedFile_GetUserFiles_Request.requiredtags)
}
::std::string* CPublishedFile_GetUserFiles_Request::add_requiredtags() {
  // @@protoc_insertion_point(field_add_mutable:proto.steam.CPublishedFile_GetUserFiles_Request.requiredtags)
  return requiredtags_.Add();
}
void CPublishedFile_GetUserFiles_Request::add_requiredtags(const ::std::string& value) {
  requiredtags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto.steam.CPublishedFile_GetUserFiles_Request.requiredtags)
}
#if LANG_CXX11
void CPublishedFile_GetUserFiles_Request::add_requiredtags(::std::string&& value) {
  requiredtags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:proto.steam.CPublishedFile_GetUserFiles_Request.requiredtags)
}
#endif
void CPublishedFile_GetUserFiles_Request::add_requiredtags(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  requiredtags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto.steam.CPublishedFile_GetUserFiles_Request.requiredtags)
}
void CPublishedFile_GetUserFiles_Request::add_requiredtags(const char* value, size_t size) {
  requiredtags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto.steam.CPublishedFile_GetUserFiles_Request.requiredtags)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
CPublishedFile_GetUserFiles_Request::requiredtags() const {
  // @@protoc_insertion_point(field_list:proto.steam.CPublishedFile_GetUserFiles_Request.requiredtags)
  return requiredtags_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
CPublishedFile_GetUserFiles_Request::mutable_requiredtags() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CPublishedFile_GetUserFiles_Request.requiredtags)
  return &requiredtags_;
}

// repeated string excludedtags = 11 [(.proto.steam.description) = "(Optional) Tags that must NOT be present on a published file to satisfy the query."];
int CPublishedFile_GetUserFiles_Request::excludedtags_size() const {
  return excludedtags_.size();
}
void CPublishedFile_GetUserFiles_Request::clear_excludedtags() {
  excludedtags_.Clear();
}
const ::std::string& CPublishedFile_GetUserFiles_Request::excludedtags(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_GetUserFiles_Request.excludedtags)
  return excludedtags_.Get(index);
}
::std::string* CPublishedFile_GetUserFiles_Request::mutable_excludedtags(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CPublishedFile_GetUserFiles_Request.excludedtags)
  return excludedtags_.Mutable(index);
}
void CPublishedFile_GetUserFiles_Request::set_excludedtags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_GetUserFiles_Request.excludedtags)
  excludedtags_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void CPublishedFile_GetUserFiles_Request::set_excludedtags(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_GetUserFiles_Request.excludedtags)
  excludedtags_.Mutable(index)->assign(std::move(value));
}
#endif
void CPublishedFile_GetUserFiles_Request::set_excludedtags(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  excludedtags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.steam.CPublishedFile_GetUserFiles_Request.excludedtags)
}
void CPublishedFile_GetUserFiles_Request::set_excludedtags(int index, const char* value, size_t size) {
  excludedtags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CPublishedFile_GetUserFiles_Request.excludedtags)
}
::std::string* CPublishedFile_GetUserFiles_Request::add_excludedtags() {
  // @@protoc_insertion_point(field_add_mutable:proto.steam.CPublishedFile_GetUserFiles_Request.excludedtags)
  return excludedtags_.Add();
}
void CPublishedFile_GetUserFiles_Request::add_excludedtags(const ::std::string& value) {
  excludedtags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto.steam.CPublishedFile_GetUserFiles_Request.excludedtags)
}
#if LANG_CXX11
void CPublishedFile_GetUserFiles_Request::add_excludedtags(::std::string&& value) {
  excludedtags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:proto.steam.CPublishedFile_GetUserFiles_Request.excludedtags)
}
#endif
void CPublishedFile_GetUserFiles_Request::add_excludedtags(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  excludedtags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto.steam.CPublishedFile_GetUserFiles_Request.excludedtags)
}
void CPublishedFile_GetUserFiles_Request::add_excludedtags(const char* value, size_t size) {
  excludedtags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto.steam.CPublishedFile_GetUserFiles_Request.excludedtags)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
CPublishedFile_GetUserFiles_Request::excludedtags() const {
  // @@protoc_insertion_point(field_list:proto.steam.CPublishedFile_GetUserFiles_Request.excludedtags)
  return excludedtags_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
CPublishedFile_GetUserFiles_Request::mutable_excludedtags() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CPublishedFile_GetUserFiles_Request.excludedtags)
  return &excludedtags_;
}

// repeated .proto.steam.CPublishedFile_GetUserFiles_Request.KVTag required_kv_tags = 30 [(.proto.steam.description) = "Required key-value tags to match on."];
int CPublishedFile_GetUserFiles_Request::required_kv_tags_size() const {
  return required_kv_tags_.size();
}
void CPublishedFile_GetUserFiles_Request::clear_required_kv_tags() {
  required_kv_tags_.Clear();
}
const ::proto::steam::CPublishedFile_GetUserFiles_Request_KVTag& CPublishedFile_GetUserFiles_Request::required_kv_tags(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_GetUserFiles_Request.required_kv_tags)
  return required_kv_tags_.Get(index);
}
::proto::steam::CPublishedFile_GetUserFiles_Request_KVTag* CPublishedFile_GetUserFiles_Request::mutable_required_kv_tags(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CPublishedFile_GetUserFiles_Request.required_kv_tags)
  return required_kv_tags_.Mutable(index);
}
::proto::steam::CPublishedFile_GetUserFiles_Request_KVTag* CPublishedFile_GetUserFiles_Request::add_required_kv_tags() {
  // @@protoc_insertion_point(field_add:proto.steam.CPublishedFile_GetUserFiles_Request.required_kv_tags)
  return required_kv_tags_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::CPublishedFile_GetUserFiles_Request_KVTag >*
CPublishedFile_GetUserFiles_Request::mutable_required_kv_tags() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CPublishedFile_GetUserFiles_Request.required_kv_tags)
  return &required_kv_tags_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::CPublishedFile_GetUserFiles_Request_KVTag >&
CPublishedFile_GetUserFiles_Request::required_kv_tags() const {
  // @@protoc_insertion_point(field_list:proto.steam.CPublishedFile_GetUserFiles_Request.required_kv_tags)
  return required_kv_tags_;
}

// optional uint32 filetype = 14 [(.proto.steam.description) = "(Optional) File type to match files to."];
bool CPublishedFile_GetUserFiles_Request::has_filetype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CPublishedFile_GetUserFiles_Request::set_has_filetype() {
  _has_bits_[0] |= 0x00000040u;
}
void CPublishedFile_GetUserFiles_Request::clear_has_filetype() {
  _has_bits_[0] &= ~0x00000040u;
}
void CPublishedFile_GetUserFiles_Request::clear_filetype() {
  filetype_ = 0u;
  clear_has_filetype();
}
::google::protobuf::uint32 CPublishedFile_GetUserFiles_Request::filetype() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_GetUserFiles_Request.filetype)
  return filetype_;
}
void CPublishedFile_GetUserFiles_Request::set_filetype(::google::protobuf::uint32 value) {
  set_has_filetype();
  filetype_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_GetUserFiles_Request.filetype)
}

// optional uint32 creator_appid = 15 [(.proto.steam.description) = "App Id of the app that published the files, only matched if specified."];
bool CPublishedFile_GetUserFiles_Request::has_creator_appid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CPublishedFile_GetUserFiles_Request::set_has_creator_appid() {
  _has_bits_[0] |= 0x00000080u;
}
void CPublishedFile_GetUserFiles_Request::clear_has_creator_appid() {
  _has_bits_[0] &= ~0x00000080u;
}
void CPublishedFile_GetUserFiles_Request::clear_creator_appid() {
  creator_appid_ = 0u;
  clear_has_creator_appid();
}
::google::protobuf::uint32 CPublishedFile_GetUserFiles_Request::creator_appid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_GetUserFiles_Request.creator_appid)
  return creator_appid_;
}
void CPublishedFile_GetUserFiles_Request::set_creator_appid(::google::protobuf::uint32 value) {
  set_has_creator_appid();
  creator_appid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_GetUserFiles_Request.creator_appid)
}

// optional string match_cloud_filename = 16 [(.proto.steam.description) = "Match this cloud filename if specified."];
bool CPublishedFile_GetUserFiles_Request::has_match_cloud_filename() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CPublishedFile_GetUserFiles_Request::set_has_match_cloud_filename() {
  _has_bits_[0] |= 0x00000004u;
}
void CPublishedFile_GetUserFiles_Request::clear_has_match_cloud_filename() {
  _has_bits_[0] &= ~0x00000004u;
}
void CPublishedFile_GetUserFiles_Request::clear_match_cloud_filename() {
  match_cloud_filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_match_cloud_filename();
}
const ::std::string& CPublishedFile_GetUserFiles_Request::match_cloud_filename() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_GetUserFiles_Request.match_cloud_filename)
  return match_cloud_filename_.GetNoArena();
}
void CPublishedFile_GetUserFiles_Request::set_match_cloud_filename(const ::std::string& value) {
  set_has_match_cloud_filename();
  match_cloud_filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_GetUserFiles_Request.match_cloud_filename)
}
#if LANG_CXX11
void CPublishedFile_GetUserFiles_Request::set_match_cloud_filename(::std::string&& value) {
  set_has_match_cloud_filename();
  match_cloud_filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CPublishedFile_GetUserFiles_Request.match_cloud_filename)
}
#endif
void CPublishedFile_GetUserFiles_Request::set_match_cloud_filename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_match_cloud_filename();
  match_cloud_filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CPublishedFile_GetUserFiles_Request.match_cloud_filename)
}
void CPublishedFile_GetUserFiles_Request::set_match_cloud_filename(const char* value, size_t size) {
  set_has_match_cloud_filename();
  match_cloud_filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CPublishedFile_GetUserFiles_Request.match_cloud_filename)
}
::std::string* CPublishedFile_GetUserFiles_Request::mutable_match_cloud_filename() {
  set_has_match_cloud_filename();
  // @@protoc_insertion_point(field_mutable:proto.steam.CPublishedFile_GetUserFiles_Request.match_cloud_filename)
  return match_cloud_filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CPublishedFile_GetUserFiles_Request::release_match_cloud_filename() {
  // @@protoc_insertion_point(field_release:proto.steam.CPublishedFile_GetUserFiles_Request.match_cloud_filename)
  clear_has_match_cloud_filename();
  return match_cloud_filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CPublishedFile_GetUserFiles_Request::set_allocated_match_cloud_filename(::std::string* match_cloud_filename) {
  if (match_cloud_filename != NULL) {
    set_has_match_cloud_filename();
  } else {
    clear_has_match_cloud_filename();
  }
  match_cloud_filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), match_cloud_filename);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CPublishedFile_GetUserFiles_Request.match_cloud_filename)
}

// optional uint32 cache_max_age_seconds = 27 [default = 0, (.proto.steam.description) = "Allow stale data to be returned for the specified number of seconds."];
bool CPublishedFile_GetUserFiles_Request::has_cache_max_age_seconds() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void CPublishedFile_GetUserFiles_Request::set_has_cache_max_age_seconds() {
  _has_bits_[0] |= 0x00010000u;
}
void CPublishedFile_GetUserFiles_Request::clear_has_cache_max_age_seconds() {
  _has_bits_[0] &= ~0x00010000u;
}
void CPublishedFile_GetUserFiles_Request::clear_cache_max_age_seconds() {
  cache_max_age_seconds_ = 0u;
  clear_has_cache_max_age_seconds();
}
::google::protobuf::uint32 CPublishedFile_GetUserFiles_Request::cache_max_age_seconds() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_GetUserFiles_Request.cache_max_age_seconds)
  return cache_max_age_seconds_;
}
void CPublishedFile_GetUserFiles_Request::set_cache_max_age_seconds(::google::protobuf::uint32 value) {
  set_has_cache_max_age_seconds();
  cache_max_age_seconds_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_GetUserFiles_Request.cache_max_age_seconds)
}

// optional int32 language = 29 [default = 0, (.proto.steam.description) = "Specifies the localized text to return. Defaults to English."];
bool CPublishedFile_GetUserFiles_Request::has_language() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void CPublishedFile_GetUserFiles_Request::set_has_language() {
  _has_bits_[0] |= 0x00020000u;
}
void CPublishedFile_GetUserFiles_Request::clear_has_language() {
  _has_bits_[0] &= ~0x00020000u;
}
void CPublishedFile_GetUserFiles_Request::clear_language() {
  language_ = 0;
  clear_has_language();
}
::google::protobuf::int32 CPublishedFile_GetUserFiles_Request::language() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_GetUserFiles_Request.language)
  return language_;
}
void CPublishedFile_GetUserFiles_Request::set_language(::google::protobuf::int32 value) {
  set_has_language();
  language_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_GetUserFiles_Request.language)
}

// optional bool totalonly = 17 [(.proto.steam.description) = "(Optional) If true, only return the total number of files that satisfy this query."];
bool CPublishedFile_GetUserFiles_Request::has_totalonly() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CPublishedFile_GetUserFiles_Request::set_has_totalonly() {
  _has_bits_[0] |= 0x00000100u;
}
void CPublishedFile_GetUserFiles_Request::clear_has_totalonly() {
  _has_bits_[0] &= ~0x00000100u;
}
void CPublishedFile_GetUserFiles_Request::clear_totalonly() {
  totalonly_ = false;
  clear_has_totalonly();
}
bool CPublishedFile_GetUserFiles_Request::totalonly() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_GetUserFiles_Request.totalonly)
  return totalonly_;
}
void CPublishedFile_GetUserFiles_Request::set_totalonly(bool value) {
  set_has_totalonly();
  totalonly_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_GetUserFiles_Request.totalonly)
}

// optional bool ids_only = 18 [(.proto.steam.description) = "(Optional) If true, only return the published file ids of files that satisfy this query."];
bool CPublishedFile_GetUserFiles_Request::has_ids_only() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CPublishedFile_GetUserFiles_Request::set_has_ids_only() {
  _has_bits_[0] |= 0x00000200u;
}
void CPublishedFile_GetUserFiles_Request::clear_has_ids_only() {
  _has_bits_[0] &= ~0x00000200u;
}
void CPublishedFile_GetUserFiles_Request::clear_ids_only() {
  ids_only_ = false;
  clear_has_ids_only();
}
bool CPublishedFile_GetUserFiles_Request::ids_only() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_GetUserFiles_Request.ids_only)
  return ids_only_;
}
void CPublishedFile_GetUserFiles_Request::set_ids_only(bool value) {
  set_has_ids_only();
  ids_only_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_GetUserFiles_Request.ids_only)
}

// optional bool return_vote_data = 19 [default = true, (.proto.steam.description) = "Return vote data"];
bool CPublishedFile_GetUserFiles_Request::has_return_vote_data() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void CPublishedFile_GetUserFiles_Request::set_has_return_vote_data() {
  _has_bits_[0] |= 0x00040000u;
}
void CPublishedFile_GetUserFiles_Request::clear_has_return_vote_data() {
  _has_bits_[0] &= ~0x00040000u;
}
void CPublishedFile_GetUserFiles_Request::clear_return_vote_data() {
  return_vote_data_ = true;
  clear_has_return_vote_data();
}
bool CPublishedFile_GetUserFiles_Request::return_vote_data() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_GetUserFiles_Request.return_vote_data)
  return return_vote_data_;
}
void CPublishedFile_GetUserFiles_Request::set_return_vote_data(bool value) {
  set_has_return_vote_data();
  return_vote_data_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_GetUserFiles_Request.return_vote_data)
}

// optional bool return_tags = 20 [(.proto.steam.description) = "Return tags in the file details"];
bool CPublishedFile_GetUserFiles_Request::has_return_tags() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CPublishedFile_GetUserFiles_Request::set_has_return_tags() {
  _has_bits_[0] |= 0x00000400u;
}
void CPublishedFile_GetUserFiles_Request::clear_has_return_tags() {
  _has_bits_[0] &= ~0x00000400u;
}
void CPublishedFile_GetUserFiles_Request::clear_return_tags() {
  return_tags_ = false;
  clear_has_return_tags();
}
bool CPublishedFile_GetUserFiles_Request::return_tags() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_GetUserFiles_Request.return_tags)
  return return_tags_;
}
void CPublishedFile_GetUserFiles_Request::set_return_tags(bool value) {
  set_has_return_tags();
  return_tags_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_GetUserFiles_Request.return_tags)
}

// optional bool return_kv_tags = 21 [default = true, (.proto.steam.description) = "Return key-value tags in the file details"];
bool CPublishedFile_GetUserFiles_Request::has_return_kv_tags() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void CPublishedFile_GetUserFiles_Request::set_has_return_kv_tags() {
  _has_bits_[0] |= 0x00080000u;
}
void CPublishedFile_GetUserFiles_Request::clear_has_return_kv_tags() {
  _has_bits_[0] &= ~0x00080000u;
}
void CPublishedFile_GetUserFiles_Request::clear_return_kv_tags() {
  return_kv_tags_ = true;
  clear_has_return_kv_tags();
}
bool CPublishedFile_GetUserFiles_Request::return_kv_tags() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_GetUserFiles_Request.return_kv_tags)
  return return_kv_tags_;
}
void CPublishedFile_GetUserFiles_Request::set_return_kv_tags(bool value) {
  set_has_return_kv_tags();
  return_kv_tags_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_GetUserFiles_Request.return_kv_tags)
}

// optional bool return_previews = 22 [(.proto.steam.description) = "Return preview image and video details in the file details"];
bool CPublishedFile_GetUserFiles_Request::has_return_previews() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CPublishedFile_GetUserFiles_Request::set_has_return_previews() {
  _has_bits_[0] |= 0x00000800u;
}
void CPublishedFile_GetUserFiles_Request::clear_has_return_previews() {
  _has_bits_[0] &= ~0x00000800u;
}
void CPublishedFile_GetUserFiles_Request::clear_return_previews() {
  return_previews_ = false;
  clear_has_return_previews();
}
bool CPublishedFile_GetUserFiles_Request::return_previews() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_GetUserFiles_Request.return_previews)
  return return_previews_;
}
void CPublishedFile_GetUserFiles_Request::set_return_previews(bool value) {
  set_has_return_previews();
  return_previews_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_GetUserFiles_Request.return_previews)
}

// optional bool return_children = 23 [(.proto.steam.description) = "Return child item ids in the file details"];
bool CPublishedFile_GetUserFiles_Request::has_return_children() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void CPublishedFile_GetUserFiles_Request::set_has_return_children() {
  _has_bits_[0] |= 0x00001000u;
}
void CPublishedFile_GetUserFiles_Request::clear_has_return_children() {
  _has_bits_[0] &= ~0x00001000u;
}
void CPublishedFile_GetUserFiles_Request::clear_return_children() {
  return_children_ = false;
  clear_has_return_children();
}
bool CPublishedFile_GetUserFiles_Request::return_children() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_GetUserFiles_Request.return_children)
  return return_children_;
}
void CPublishedFile_GetUserFiles_Request::set_return_children(bool value) {
  set_has_return_children();
  return_children_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_GetUserFiles_Request.return_children)
}

// optional bool return_short_description = 24 [default = true, (.proto.steam.description) = "Populate the short_description field instead of file_description"];
bool CPublishedFile_GetUserFiles_Request::has_return_short_description() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void CPublishedFile_GetUserFiles_Request::set_has_return_short_description() {
  _has_bits_[0] |= 0x00100000u;
}
void CPublishedFile_GetUserFiles_Request::clear_has_return_short_description() {
  _has_bits_[0] &= ~0x00100000u;
}
void CPublishedFile_GetUserFiles_Request::clear_return_short_description() {
  return_short_description_ = true;
  clear_has_return_short_description();
}
bool CPublishedFile_GetUserFiles_Request::return_short_description() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_GetUserFiles_Request.return_short_description)
  return return_short_description_;
}
void CPublishedFile_GetUserFiles_Request::set_return_short_description(bool value) {
  set_has_return_short_description();
  return_short_description_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_GetUserFiles_Request.return_short_description)
}

// optional bool return_for_sale_data = 26 [(.proto.steam.description) = "Return pricing information, if applicable"];
bool CPublishedFile_GetUserFiles_Request::has_return_for_sale_data() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void CPublishedFile_GetUserFiles_Request::set_has_return_for_sale_data() {
  _has_bits_[0] |= 0x00002000u;
}
void CPublishedFile_GetUserFiles_Request::clear_has_return_for_sale_data() {
  _has_bits_[0] &= ~0x00002000u;
}
void CPublishedFile_GetUserFiles_Request::clear_return_for_sale_data() {
  return_for_sale_data_ = false;
  clear_has_return_for_sale_data();
}
bool CPublishedFile_GetUserFiles_Request::return_for_sale_data() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_GetUserFiles_Request.return_for_sale_data)
  return return_for_sale_data_;
}
void CPublishedFile_GetUserFiles_Request::set_return_for_sale_data(bool value) {
  set_has_return_for_sale_data();
  return_for_sale_data_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_GetUserFiles_Request.return_for_sale_data)
}

// optional bool return_metadata = 28 [default = false, (.proto.steam.description) = "Populate the metadata field"];
bool CPublishedFile_GetUserFiles_Request::has_return_metadata() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void CPublishedFile_GetUserFiles_Request::set_has_return_metadata() {
  _has_bits_[0] |= 0x00004000u;
}
void CPublishedFile_GetUserFiles_Request::clear_has_return_metadata() {
  _has_bits_[0] &= ~0x00004000u;
}
void CPublishedFile_GetUserFiles_Request::clear_return_metadata() {
  return_metadata_ = false;
  clear_has_return_metadata();
}
bool CPublishedFile_GetUserFiles_Request::return_metadata() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_GetUserFiles_Request.return_metadata)
  return return_metadata_;
}
void CPublishedFile_GetUserFiles_Request::set_return_metadata(bool value) {
  set_has_return_metadata();
  return_metadata_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_GetUserFiles_Request.return_metadata)
}

// optional uint32 return_playtime_stats = 31 [(.proto.steam.description) = "Return playtime stats for the specified number of days before today."];
bool CPublishedFile_GetUserFiles_Request::has_return_playtime_stats() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void CPublishedFile_GetUserFiles_Request::set_has_return_playtime_stats() {
  _has_bits_[0] |= 0x00008000u;
}
void CPublishedFile_GetUserFiles_Request::clear_has_return_playtime_stats() {
  _has_bits_[0] &= ~0x00008000u;
}
void CPublishedFile_GetUserFiles_Request::clear_return_playtime_stats() {
  return_playtime_stats_ = 0u;
  clear_has_return_playtime_stats();
}
::google::protobuf::uint32 CPublishedFile_GetUserFiles_Request::return_playtime_stats() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_GetUserFiles_Request.return_playtime_stats)
  return return_playtime_stats_;
}
void CPublishedFile_GetUserFiles_Request::set_return_playtime_stats(::google::protobuf::uint32 value) {
  set_has_return_playtime_stats();
  return_playtime_stats_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_GetUserFiles_Request.return_playtime_stats)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPublishedFile_GetUserFiles_Response_App::kAppidFieldNumber;
const int CPublishedFile_GetUserFiles_Response_App::kNameFieldNumber;
const int CPublishedFile_GetUserFiles_Response_App::kShortcutidFieldNumber;
const int CPublishedFile_GetUserFiles_Response_App::kPrivateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPublishedFile_GetUserFiles_Response_App::CPublishedFile_GetUserFiles_Response_App()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPublishedFile_GetUserFiles_Response.App)
}
CPublishedFile_GetUserFiles_Response_App::CPublishedFile_GetUserFiles_Response_App(const CPublishedFile_GetUserFiles_Response_App& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&appid_, &from.appid_,
    reinterpret_cast<char*>(&private__) -
    reinterpret_cast<char*>(&appid_) + sizeof(private__));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPublishedFile_GetUserFiles_Response.App)
}

void CPublishedFile_GetUserFiles_Response_App::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&appid_, 0, reinterpret_cast<char*>(&private__) -
    reinterpret_cast<char*>(&appid_) + sizeof(private__));
}

CPublishedFile_GetUserFiles_Response_App::~CPublishedFile_GetUserFiles_Response_App() {
  // @@protoc_insertion_point(destructor:proto.steam.CPublishedFile_GetUserFiles_Response.App)
  SharedDtor();
}

void CPublishedFile_GetUserFiles_Response_App::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CPublishedFile_GetUserFiles_Response_App::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPublishedFile_GetUserFiles_Response_App::descriptor() {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CPublishedFile_GetUserFiles_Response_App& CPublishedFile_GetUserFiles_Response_App::default_instance() {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CPublishedFile_GetUserFiles_Response_App* CPublishedFile_GetUserFiles_Response_App::New(::google::protobuf::Arena* arena) const {
  CPublishedFile_GetUserFiles_Response_App* n = new CPublishedFile_GetUserFiles_Response_App;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CPublishedFile_GetUserFiles_Response_App::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPublishedFile_GetUserFiles_Response.App)
  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&appid_, 0, reinterpret_cast<char*>(&private__) -
      reinterpret_cast<char*>(&appid_) + sizeof(private__));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CPublishedFile_GetUserFiles_Response_App::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPublishedFile_GetUserFiles_Response.App)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CPublishedFile_GetUserFiles_Response.App.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 shortcutid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_shortcutid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shortcutid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool private = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_private_();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &private__)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPublishedFile_GetUserFiles_Response.App)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPublishedFile_GetUserFiles_Response.App)
  return false;
#undef DO_
}

void CPublishedFile_GetUserFiles_Response_App::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPublishedFile_GetUserFiles_Response.App)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPublishedFile_GetUserFiles_Response.App.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional uint32 shortcutid = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->shortcutid(), output);
  }

  // optional bool private = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->private_(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPublishedFile_GetUserFiles_Response.App)
}

::google::protobuf::uint8* CPublishedFile_GetUserFiles_Response_App::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPublishedFile_GetUserFiles_Response.App)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPublishedFile_GetUserFiles_Response.App.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 shortcutid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->shortcutid(), target);
  }

  // optional bool private = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->private_(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPublishedFile_GetUserFiles_Response.App)
  return target;
}

size_t CPublishedFile_GetUserFiles_Response_App::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPublishedFile_GetUserFiles_Response.App)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 appid = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional uint32 shortcutid = 3;
    if (has_shortcutid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shortcutid());
    }

    // optional bool private = 4;
    if (has_private_()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPublishedFile_GetUserFiles_Response_App::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPublishedFile_GetUserFiles_Response.App)
  GOOGLE_DCHECK_NE(&from, this);
  const CPublishedFile_GetUserFiles_Response_App* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CPublishedFile_GetUserFiles_Response_App>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPublishedFile_GetUserFiles_Response.App)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPublishedFile_GetUserFiles_Response.App)
    MergeFrom(*source);
  }
}

void CPublishedFile_GetUserFiles_Response_App::MergeFrom(const CPublishedFile_GetUserFiles_Response_App& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPublishedFile_GetUserFiles_Response.App)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000004u) {
      shortcutid_ = from.shortcutid_;
    }
    if (cached_has_bits & 0x00000008u) {
      private__ = from.private__;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CPublishedFile_GetUserFiles_Response_App::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPublishedFile_GetUserFiles_Response.App)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPublishedFile_GetUserFiles_Response_App::CopyFrom(const CPublishedFile_GetUserFiles_Response_App& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPublishedFile_GetUserFiles_Response.App)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_GetUserFiles_Response_App::IsInitialized() const {
  return true;
}

void CPublishedFile_GetUserFiles_Response_App::Swap(CPublishedFile_GetUserFiles_Response_App* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPublishedFile_GetUserFiles_Response_App::InternalSwap(CPublishedFile_GetUserFiles_Response_App* other) {
  name_.Swap(&other->name_);
  std::swap(appid_, other->appid_);
  std::swap(shortcutid_, other->shortcutid_);
  std::swap(private__, other->private__);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CPublishedFile_GetUserFiles_Response_App::GetMetadata() const {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CPublishedFile_GetUserFiles_Response_App

// optional uint32 appid = 1;
bool CPublishedFile_GetUserFiles_Response_App::has_appid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CPublishedFile_GetUserFiles_Response_App::set_has_appid() {
  _has_bits_[0] |= 0x00000002u;
}
void CPublishedFile_GetUserFiles_Response_App::clear_has_appid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CPublishedFile_GetUserFiles_Response_App::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
::google::protobuf::uint32 CPublishedFile_GetUserFiles_Response_App::appid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_GetUserFiles_Response.App.appid)
  return appid_;
}
void CPublishedFile_GetUserFiles_Response_App::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_GetUserFiles_Response.App.appid)
}

// optional string name = 2;
bool CPublishedFile_GetUserFiles_Response_App::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CPublishedFile_GetUserFiles_Response_App::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CPublishedFile_GetUserFiles_Response_App::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CPublishedFile_GetUserFiles_Response_App::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& CPublishedFile_GetUserFiles_Response_App::name() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_GetUserFiles_Response.App.name)
  return name_.GetNoArena();
}
void CPublishedFile_GetUserFiles_Response_App::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_GetUserFiles_Response.App.name)
}
#if LANG_CXX11
void CPublishedFile_GetUserFiles_Response_App::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CPublishedFile_GetUserFiles_Response.App.name)
}
#endif
void CPublishedFile_GetUserFiles_Response_App::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CPublishedFile_GetUserFiles_Response.App.name)
}
void CPublishedFile_GetUserFiles_Response_App::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CPublishedFile_GetUserFiles_Response.App.name)
}
::std::string* CPublishedFile_GetUserFiles_Response_App::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:proto.steam.CPublishedFile_GetUserFiles_Response.App.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CPublishedFile_GetUserFiles_Response_App::release_name() {
  // @@protoc_insertion_point(field_release:proto.steam.CPublishedFile_GetUserFiles_Response.App.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CPublishedFile_GetUserFiles_Response_App::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CPublishedFile_GetUserFiles_Response.App.name)
}

// optional uint32 shortcutid = 3;
bool CPublishedFile_GetUserFiles_Response_App::has_shortcutid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CPublishedFile_GetUserFiles_Response_App::set_has_shortcutid() {
  _has_bits_[0] |= 0x00000004u;
}
void CPublishedFile_GetUserFiles_Response_App::clear_has_shortcutid() {
  _has_bits_[0] &= ~0x00000004u;
}
void CPublishedFile_GetUserFiles_Response_App::clear_shortcutid() {
  shortcutid_ = 0u;
  clear_has_shortcutid();
}
::google::protobuf::uint32 CPublishedFile_GetUserFiles_Response_App::shortcutid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_GetUserFiles_Response.App.shortcutid)
  return shortcutid_;
}
void CPublishedFile_GetUserFiles_Response_App::set_shortcutid(::google::protobuf::uint32 value) {
  set_has_shortcutid();
  shortcutid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_GetUserFiles_Response.App.shortcutid)
}

// optional bool private = 4;
bool CPublishedFile_GetUserFiles_Response_App::has_private_() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CPublishedFile_GetUserFiles_Response_App::set_has_private_() {
  _has_bits_[0] |= 0x00000008u;
}
void CPublishedFile_GetUserFiles_Response_App::clear_has_private_() {
  _has_bits_[0] &= ~0x00000008u;
}
void CPublishedFile_GetUserFiles_Response_App::clear_private_() {
  private__ = false;
  clear_has_private_();
}
bool CPublishedFile_GetUserFiles_Response_App::private_() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_GetUserFiles_Response.App.private)
  return private__;
}
void CPublishedFile_GetUserFiles_Response_App::set_private_(bool value) {
  set_has_private_();
  private__ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_GetUserFiles_Response.App.private)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPublishedFile_GetUserFiles_Response::kTotalFieldNumber;
const int CPublishedFile_GetUserFiles_Response::kStartindexFieldNumber;
const int CPublishedFile_GetUserFiles_Response::kPublishedfiledetailsFieldNumber;
const int CPublishedFile_GetUserFiles_Response::kAppsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPublishedFile_GetUserFiles_Response::CPublishedFile_GetUserFiles_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPublishedFile_GetUserFiles_Response)
}
CPublishedFile_GetUserFiles_Response::CPublishedFile_GetUserFiles_Response(const CPublishedFile_GetUserFiles_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      publishedfiledetails_(from.publishedfiledetails_),
      apps_(from.apps_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&total_, &from.total_,
    reinterpret_cast<char*>(&startindex_) -
    reinterpret_cast<char*>(&total_) + sizeof(startindex_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPublishedFile_GetUserFiles_Response)
}

void CPublishedFile_GetUserFiles_Response::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&total_, 0, reinterpret_cast<char*>(&startindex_) -
    reinterpret_cast<char*>(&total_) + sizeof(startindex_));
}

CPublishedFile_GetUserFiles_Response::~CPublishedFile_GetUserFiles_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CPublishedFile_GetUserFiles_Response)
  SharedDtor();
}

void CPublishedFile_GetUserFiles_Response::SharedDtor() {
}

void CPublishedFile_GetUserFiles_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPublishedFile_GetUserFiles_Response::descriptor() {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CPublishedFile_GetUserFiles_Response& CPublishedFile_GetUserFiles_Response::default_instance() {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CPublishedFile_GetUserFiles_Response* CPublishedFile_GetUserFiles_Response::New(::google::protobuf::Arena* arena) const {
  CPublishedFile_GetUserFiles_Response* n = new CPublishedFile_GetUserFiles_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CPublishedFile_GetUserFiles_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPublishedFile_GetUserFiles_Response)
  publishedfiledetails_.Clear();
  apps_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&total_, 0, reinterpret_cast<char*>(&startindex_) -
      reinterpret_cast<char*>(&total_) + sizeof(startindex_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CPublishedFile_GetUserFiles_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPublishedFile_GetUserFiles_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 total = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_total();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 startindex = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_startindex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &startindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.PublishedFileDetails publishedfiledetails = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_publishedfiledetails()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CPublishedFile_GetUserFiles_Response.App apps = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_apps()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPublishedFile_GetUserFiles_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPublishedFile_GetUserFiles_Response)
  return false;
#undef DO_
}

void CPublishedFile_GetUserFiles_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPublishedFile_GetUserFiles_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 total = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->total(), output);
  }

  // optional uint32 startindex = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->startindex(), output);
  }

  // repeated .proto.steam.PublishedFileDetails publishedfiledetails = 3;
  for (unsigned int i = 0, n = this->publishedfiledetails_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->publishedfiledetails(i), output);
  }

  // repeated .proto.steam.CPublishedFile_GetUserFiles_Response.App apps = 4;
  for (unsigned int i = 0, n = this->apps_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->apps(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPublishedFile_GetUserFiles_Response)
}

::google::protobuf::uint8* CPublishedFile_GetUserFiles_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPublishedFile_GetUserFiles_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 total = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->total(), target);
  }

  // optional uint32 startindex = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->startindex(), target);
  }

  // repeated .proto.steam.PublishedFileDetails publishedfiledetails = 3;
  for (unsigned int i = 0, n = this->publishedfiledetails_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->publishedfiledetails(i), deterministic, target);
  }

  // repeated .proto.steam.CPublishedFile_GetUserFiles_Response.App apps = 4;
  for (unsigned int i = 0, n = this->apps_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->apps(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPublishedFile_GetUserFiles_Response)
  return target;
}

size_t CPublishedFile_GetUserFiles_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPublishedFile_GetUserFiles_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.steam.PublishedFileDetails publishedfiledetails = 3;
  {
    unsigned int count = this->publishedfiledetails_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->publishedfiledetails(i));
    }
  }

  // repeated .proto.steam.CPublishedFile_GetUserFiles_Response.App apps = 4;
  {
    unsigned int count = this->apps_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->apps(i));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 total = 1;
    if (has_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total());
    }

    // optional uint32 startindex = 2;
    if (has_startindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->startindex());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPublishedFile_GetUserFiles_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPublishedFile_GetUserFiles_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CPublishedFile_GetUserFiles_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CPublishedFile_GetUserFiles_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPublishedFile_GetUserFiles_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPublishedFile_GetUserFiles_Response)
    MergeFrom(*source);
  }
}

void CPublishedFile_GetUserFiles_Response::MergeFrom(const CPublishedFile_GetUserFiles_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPublishedFile_GetUserFiles_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  publishedfiledetails_.MergeFrom(from.publishedfiledetails_);
  apps_.MergeFrom(from.apps_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      total_ = from.total_;
    }
    if (cached_has_bits & 0x00000002u) {
      startindex_ = from.startindex_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CPublishedFile_GetUserFiles_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPublishedFile_GetUserFiles_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPublishedFile_GetUserFiles_Response::CopyFrom(const CPublishedFile_GetUserFiles_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPublishedFile_GetUserFiles_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_GetUserFiles_Response::IsInitialized() const {
  return true;
}

void CPublishedFile_GetUserFiles_Response::Swap(CPublishedFile_GetUserFiles_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPublishedFile_GetUserFiles_Response::InternalSwap(CPublishedFile_GetUserFiles_Response* other) {
  publishedfiledetails_.InternalSwap(&other->publishedfiledetails_);
  apps_.InternalSwap(&other->apps_);
  std::swap(total_, other->total_);
  std::swap(startindex_, other->startindex_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CPublishedFile_GetUserFiles_Response::GetMetadata() const {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CPublishedFile_GetUserFiles_Response

// optional uint32 total = 1;
bool CPublishedFile_GetUserFiles_Response::has_total() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CPublishedFile_GetUserFiles_Response::set_has_total() {
  _has_bits_[0] |= 0x00000001u;
}
void CPublishedFile_GetUserFiles_Response::clear_has_total() {
  _has_bits_[0] &= ~0x00000001u;
}
void CPublishedFile_GetUserFiles_Response::clear_total() {
  total_ = 0u;
  clear_has_total();
}
::google::protobuf::uint32 CPublishedFile_GetUserFiles_Response::total() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_GetUserFiles_Response.total)
  return total_;
}
void CPublishedFile_GetUserFiles_Response::set_total(::google::protobuf::uint32 value) {
  set_has_total();
  total_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_GetUserFiles_Response.total)
}

// optional uint32 startindex = 2;
bool CPublishedFile_GetUserFiles_Response::has_startindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CPublishedFile_GetUserFiles_Response::set_has_startindex() {
  _has_bits_[0] |= 0x00000002u;
}
void CPublishedFile_GetUserFiles_Response::clear_has_startindex() {
  _has_bits_[0] &= ~0x00000002u;
}
void CPublishedFile_GetUserFiles_Response::clear_startindex() {
  startindex_ = 0u;
  clear_has_startindex();
}
::google::protobuf::uint32 CPublishedFile_GetUserFiles_Response::startindex() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_GetUserFiles_Response.startindex)
  return startindex_;
}
void CPublishedFile_GetUserFiles_Response::set_startindex(::google::protobuf::uint32 value) {
  set_has_startindex();
  startindex_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_GetUserFiles_Response.startindex)
}

// repeated .proto.steam.PublishedFileDetails publishedfiledetails = 3;
int CPublishedFile_GetUserFiles_Response::publishedfiledetails_size() const {
  return publishedfiledetails_.size();
}
void CPublishedFile_GetUserFiles_Response::clear_publishedfiledetails() {
  publishedfiledetails_.Clear();
}
const ::proto::steam::PublishedFileDetails& CPublishedFile_GetUserFiles_Response::publishedfiledetails(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_GetUserFiles_Response.publishedfiledetails)
  return publishedfiledetails_.Get(index);
}
::proto::steam::PublishedFileDetails* CPublishedFile_GetUserFiles_Response::mutable_publishedfiledetails(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CPublishedFile_GetUserFiles_Response.publishedfiledetails)
  return publishedfiledetails_.Mutable(index);
}
::proto::steam::PublishedFileDetails* CPublishedFile_GetUserFiles_Response::add_publishedfiledetails() {
  // @@protoc_insertion_point(field_add:proto.steam.CPublishedFile_GetUserFiles_Response.publishedfiledetails)
  return publishedfiledetails_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::PublishedFileDetails >*
CPublishedFile_GetUserFiles_Response::mutable_publishedfiledetails() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CPublishedFile_GetUserFiles_Response.publishedfiledetails)
  return &publishedfiledetails_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::PublishedFileDetails >&
CPublishedFile_GetUserFiles_Response::publishedfiledetails() const {
  // @@protoc_insertion_point(field_list:proto.steam.CPublishedFile_GetUserFiles_Response.publishedfiledetails)
  return publishedfiledetails_;
}

// repeated .proto.steam.CPublishedFile_GetUserFiles_Response.App apps = 4;
int CPublishedFile_GetUserFiles_Response::apps_size() const {
  return apps_.size();
}
void CPublishedFile_GetUserFiles_Response::clear_apps() {
  apps_.Clear();
}
const ::proto::steam::CPublishedFile_GetUserFiles_Response_App& CPublishedFile_GetUserFiles_Response::apps(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_GetUserFiles_Response.apps)
  return apps_.Get(index);
}
::proto::steam::CPublishedFile_GetUserFiles_Response_App* CPublishedFile_GetUserFiles_Response::mutable_apps(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CPublishedFile_GetUserFiles_Response.apps)
  return apps_.Mutable(index);
}
::proto::steam::CPublishedFile_GetUserFiles_Response_App* CPublishedFile_GetUserFiles_Response::add_apps() {
  // @@protoc_insertion_point(field_add:proto.steam.CPublishedFile_GetUserFiles_Response.apps)
  return apps_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::CPublishedFile_GetUserFiles_Response_App >*
CPublishedFile_GetUserFiles_Response::mutable_apps() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CPublishedFile_GetUserFiles_Response.apps)
  return &apps_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::CPublishedFile_GetUserFiles_Response_App >&
CPublishedFile_GetUserFiles_Response::apps() const {
  // @@protoc_insertion_point(field_list:proto.steam.CPublishedFile_GetUserFiles_Response.apps)
  return apps_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPublishedFile_Update_Request::kAppidFieldNumber;
const int CPublishedFile_Update_Request::kPublishedfileidFieldNumber;
const int CPublishedFile_Update_Request::kTitleFieldNumber;
const int CPublishedFile_Update_Request::kFileDescriptionFieldNumber;
const int CPublishedFile_Update_Request::kVisibilityFieldNumber;
const int CPublishedFile_Update_Request::kTagsFieldNumber;
const int CPublishedFile_Update_Request::kFilenameFieldNumber;
const int CPublishedFile_Update_Request::kPreviewFilenameFieldNumber;
const int CPublishedFile_Update_Request::kImageWidthFieldNumber;
const int CPublishedFile_Update_Request::kImageHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPublishedFile_Update_Request::CPublishedFile_Update_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPublishedFile_Update_Request)
}
CPublishedFile_Update_Request::CPublishedFile_Update_Request(const CPublishedFile_Update_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      tags_(from.tags_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_title()) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  file_description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_file_description()) {
    file_description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_description_);
  }
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_filename()) {
    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  preview_filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_preview_filename()) {
    preview_filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.preview_filename_);
  }
  ::memcpy(&publishedfileid_, &from.publishedfileid_,
    reinterpret_cast<char*>(&image_height_) -
    reinterpret_cast<char*>(&publishedfileid_) + sizeof(image_height_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPublishedFile_Update_Request)
}

void CPublishedFile_Update_Request::SharedCtor() {
  _cached_size_ = 0;
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  preview_filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&publishedfileid_, 0, reinterpret_cast<char*>(&image_height_) -
    reinterpret_cast<char*>(&publishedfileid_) + sizeof(image_height_));
}

CPublishedFile_Update_Request::~CPublishedFile_Update_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CPublishedFile_Update_Request)
  SharedDtor();
}

void CPublishedFile_Update_Request::SharedDtor() {
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  preview_filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CPublishedFile_Update_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPublishedFile_Update_Request::descriptor() {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CPublishedFile_Update_Request& CPublishedFile_Update_Request::default_instance() {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CPublishedFile_Update_Request* CPublishedFile_Update_Request::New(::google::protobuf::Arena* arena) const {
  CPublishedFile_Update_Request* n = new CPublishedFile_Update_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CPublishedFile_Update_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPublishedFile_Update_Request)
  tags_.Clear();
  if (_has_bits_[0 / 32] & 15u) {
    if (has_title()) {
      GOOGLE_DCHECK(!title_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*title_.UnsafeRawStringPointer())->clear();
    }
    if (has_file_description()) {
      GOOGLE_DCHECK(!file_description_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*file_description_.UnsafeRawStringPointer())->clear();
    }
    if (has_filename()) {
      GOOGLE_DCHECK(!filename_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*filename_.UnsafeRawStringPointer())->clear();
    }
    if (has_preview_filename()) {
      GOOGLE_DCHECK(!preview_filename_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*preview_filename_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 240u) {
    ::memset(&publishedfileid_, 0, reinterpret_cast<char*>(&image_width_) -
      reinterpret_cast<char*>(&publishedfileid_) + sizeof(image_width_));
  }
  image_height_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CPublishedFile_Update_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPublishedFile_Update_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1 [(.proto.steam.description) = "App Id this published file belongs to."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 publishedfileid = 2 [(.proto.steam.description) = "Published file id of the file we\'d like update."];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_publishedfileid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &publishedfileid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string title = 3 [(.proto.steam.description) = "(Optional) Title of the published file."];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CPublishedFile_Update_Request.title");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string file_description = 4 [(.proto.steam.description) = "(Optional) Description of the published file."];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file_description().data(), this->file_description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CPublishedFile_Update_Request.file_description");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 visibility = 5 [(.proto.steam.description) = "(Optional) Visibility of the published file."];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_visibility();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &visibility_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string tags = 6 [(.proto.steam.description) = "(Optional) Set of tags for the published file."];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tags()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tags(this->tags_size() - 1).data(),
            this->tags(this->tags_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CPublishedFile_Update_Request.tags");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string filename = 7 [(.proto.steam.description) = "(Optional) Filename for the published file."];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CPublishedFile_Update_Request.filename");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string preview_filename = 8 [(.proto.steam.description) = "(Optional) Preview filename for the published file."];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_preview_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->preview_filename().data(), this->preview_filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CPublishedFile_Update_Request.preview_filename");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 image_width = 15 [(.proto.steam.description) = "(Optional) If this is an image file, you can specify the image width."];
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          set_has_image_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &image_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 image_height = 16 [(.proto.steam.description) = "(Optional) If this is an image file, you can specify the image height."];
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u)) {
          set_has_image_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &image_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPublishedFile_Update_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPublishedFile_Update_Request)
  return false;
#undef DO_
}

void CPublishedFile_Update_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPublishedFile_Update_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1 [(.proto.steam.description) = "App Id this published file belongs to."];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional fixed64 publishedfileid = 2 [(.proto.steam.description) = "Published file id of the file we\'d like update."];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->publishedfileid(), output);
  }

  // optional string title = 3 [(.proto.steam.description) = "(Optional) Title of the published file."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPublishedFile_Update_Request.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->title(), output);
  }

  // optional string file_description = 4 [(.proto.steam.description) = "(Optional) Description of the published file."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_description().data(), this->file_description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPublishedFile_Update_Request.file_description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->file_description(), output);
  }

  // optional uint32 visibility = 5 [(.proto.steam.description) = "(Optional) Visibility of the published file."];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->visibility(), output);
  }

  // repeated string tags = 6 [(.proto.steam.description) = "(Optional) Set of tags for the published file."];
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tags(i).data(), this->tags(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPublishedFile_Update_Request.tags");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->tags(i), output);
  }

  // optional string filename = 7 [(.proto.steam.description) = "(Optional) Filename for the published file."];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPublishedFile_Update_Request.filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->filename(), output);
  }

  // optional string preview_filename = 8 [(.proto.steam.description) = "(Optional) Preview filename for the published file."];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->preview_filename().data(), this->preview_filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPublishedFile_Update_Request.preview_filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->preview_filename(), output);
  }

  // optional uint32 image_width = 15 [(.proto.steam.description) = "(Optional) If this is an image file, you can specify the image width."];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->image_width(), output);
  }

  // optional uint32 image_height = 16 [(.proto.steam.description) = "(Optional) If this is an image file, you can specify the image height."];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->image_height(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPublishedFile_Update_Request)
}

::google::protobuf::uint8* CPublishedFile_Update_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPublishedFile_Update_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1 [(.proto.steam.description) = "App Id this published file belongs to."];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional fixed64 publishedfileid = 2 [(.proto.steam.description) = "Published file id of the file we\'d like update."];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->publishedfileid(), target);
  }

  // optional string title = 3 [(.proto.steam.description) = "(Optional) Title of the published file."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPublishedFile_Update_Request.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->title(), target);
  }

  // optional string file_description = 4 [(.proto.steam.description) = "(Optional) Description of the published file."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_description().data(), this->file_description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPublishedFile_Update_Request.file_description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->file_description(), target);
  }

  // optional uint32 visibility = 5 [(.proto.steam.description) = "(Optional) Visibility of the published file."];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->visibility(), target);
  }

  // repeated string tags = 6 [(.proto.steam.description) = "(Optional) Set of tags for the published file."];
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tags(i).data(), this->tags(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPublishedFile_Update_Request.tags");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->tags(i), target);
  }

  // optional string filename = 7 [(.proto.steam.description) = "(Optional) Filename for the published file."];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPublishedFile_Update_Request.filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->filename(), target);
  }

  // optional string preview_filename = 8 [(.proto.steam.description) = "(Optional) Preview filename for the published file."];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->preview_filename().data(), this->preview_filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPublishedFile_Update_Request.preview_filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->preview_filename(), target);
  }

  // optional uint32 image_width = 15 [(.proto.steam.description) = "(Optional) If this is an image file, you can specify the image width."];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->image_width(), target);
  }

  // optional uint32 image_height = 16 [(.proto.steam.description) = "(Optional) If this is an image file, you can specify the image height."];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->image_height(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPublishedFile_Update_Request)
  return target;
}

size_t CPublishedFile_Update_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPublishedFile_Update_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated string tags = 6 [(.proto.steam.description) = "(Optional) Set of tags for the published file."];
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->tags_size());
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tags(i));
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string title = 3 [(.proto.steam.description) = "(Optional) Title of the published file."];
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string file_description = 4 [(.proto.steam.description) = "(Optional) Description of the published file."];
    if (has_file_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_description());
    }

    // optional string filename = 7 [(.proto.steam.description) = "(Optional) Filename for the published file."];
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional string preview_filename = 8 [(.proto.steam.description) = "(Optional) Preview filename for the published file."];
    if (has_preview_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->preview_filename());
    }

    // optional fixed64 publishedfileid = 2 [(.proto.steam.description) = "Published file id of the file we\'d like update."];
    if (has_publishedfileid()) {
      total_size += 1 + 8;
    }

    // optional uint32 appid = 1 [(.proto.steam.description) = "App Id this published file belongs to."];
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional uint32 visibility = 5 [(.proto.steam.description) = "(Optional) Visibility of the published file."];
    if (has_visibility()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->visibility());
    }

    // optional uint32 image_width = 15 [(.proto.steam.description) = "(Optional) If this is an image file, you can specify the image width."];
    if (has_image_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->image_width());
    }

  }
  // optional uint32 image_height = 16 [(.proto.steam.description) = "(Optional) If this is an image file, you can specify the image height."];
  if (has_image_height()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->image_height());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPublishedFile_Update_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPublishedFile_Update_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CPublishedFile_Update_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CPublishedFile_Update_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPublishedFile_Update_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPublishedFile_Update_Request)
    MergeFrom(*source);
  }
}

void CPublishedFile_Update_Request::MergeFrom(const CPublishedFile_Update_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPublishedFile_Update_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_title();
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_file_description();
      file_description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_description_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_filename();
      filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_preview_filename();
      preview_filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.preview_filename_);
    }
    if (cached_has_bits & 0x00000010u) {
      publishedfileid_ = from.publishedfileid_;
    }
    if (cached_has_bits & 0x00000020u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000040u) {
      visibility_ = from.visibility_;
    }
    if (cached_has_bits & 0x00000080u) {
      image_width_ = from.image_width_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_image_height(from.image_height());
  }
}

void CPublishedFile_Update_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPublishedFile_Update_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPublishedFile_Update_Request::CopyFrom(const CPublishedFile_Update_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPublishedFile_Update_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_Update_Request::IsInitialized() const {
  return true;
}

void CPublishedFile_Update_Request::Swap(CPublishedFile_Update_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPublishedFile_Update_Request::InternalSwap(CPublishedFile_Update_Request* other) {
  tags_.InternalSwap(&other->tags_);
  title_.Swap(&other->title_);
  file_description_.Swap(&other->file_description_);
  filename_.Swap(&other->filename_);
  preview_filename_.Swap(&other->preview_filename_);
  std::swap(publishedfileid_, other->publishedfileid_);
  std::swap(appid_, other->appid_);
  std::swap(visibility_, other->visibility_);
  std::swap(image_width_, other->image_width_);
  std::swap(image_height_, other->image_height_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CPublishedFile_Update_Request::GetMetadata() const {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CPublishedFile_Update_Request

// optional uint32 appid = 1 [(.proto.steam.description) = "App Id this published file belongs to."];
bool CPublishedFile_Update_Request::has_appid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CPublishedFile_Update_Request::set_has_appid() {
  _has_bits_[0] |= 0x00000020u;
}
void CPublishedFile_Update_Request::clear_has_appid() {
  _has_bits_[0] &= ~0x00000020u;
}
void CPublishedFile_Update_Request::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
::google::protobuf::uint32 CPublishedFile_Update_Request::appid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_Update_Request.appid)
  return appid_;
}
void CPublishedFile_Update_Request::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_Update_Request.appid)
}

// optional fixed64 publishedfileid = 2 [(.proto.steam.description) = "Published file id of the file we\'d like update."];
bool CPublishedFile_Update_Request::has_publishedfileid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CPublishedFile_Update_Request::set_has_publishedfileid() {
  _has_bits_[0] |= 0x00000010u;
}
void CPublishedFile_Update_Request::clear_has_publishedfileid() {
  _has_bits_[0] &= ~0x00000010u;
}
void CPublishedFile_Update_Request::clear_publishedfileid() {
  publishedfileid_ = GOOGLE_ULONGLONG(0);
  clear_has_publishedfileid();
}
::google::protobuf::uint64 CPublishedFile_Update_Request::publishedfileid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_Update_Request.publishedfileid)
  return publishedfileid_;
}
void CPublishedFile_Update_Request::set_publishedfileid(::google::protobuf::uint64 value) {
  set_has_publishedfileid();
  publishedfileid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_Update_Request.publishedfileid)
}

// optional string title = 3 [(.proto.steam.description) = "(Optional) Title of the published file."];
bool CPublishedFile_Update_Request::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CPublishedFile_Update_Request::set_has_title() {
  _has_bits_[0] |= 0x00000001u;
}
void CPublishedFile_Update_Request::clear_has_title() {
  _has_bits_[0] &= ~0x00000001u;
}
void CPublishedFile_Update_Request::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
const ::std::string& CPublishedFile_Update_Request::title() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_Update_Request.title)
  return title_.GetNoArena();
}
void CPublishedFile_Update_Request::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_Update_Request.title)
}
#if LANG_CXX11
void CPublishedFile_Update_Request::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CPublishedFile_Update_Request.title)
}
#endif
void CPublishedFile_Update_Request::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CPublishedFile_Update_Request.title)
}
void CPublishedFile_Update_Request::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CPublishedFile_Update_Request.title)
}
::std::string* CPublishedFile_Update_Request::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:proto.steam.CPublishedFile_Update_Request.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CPublishedFile_Update_Request::release_title() {
  // @@protoc_insertion_point(field_release:proto.steam.CPublishedFile_Update_Request.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CPublishedFile_Update_Request::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CPublishedFile_Update_Request.title)
}

// optional string file_description = 4 [(.proto.steam.description) = "(Optional) Description of the published file."];
bool CPublishedFile_Update_Request::has_file_description() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CPublishedFile_Update_Request::set_has_file_description() {
  _has_bits_[0] |= 0x00000002u;
}
void CPublishedFile_Update_Request::clear_has_file_description() {
  _has_bits_[0] &= ~0x00000002u;
}
void CPublishedFile_Update_Request::clear_file_description() {
  file_description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_description();
}
const ::std::string& CPublishedFile_Update_Request::file_description() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_Update_Request.file_description)
  return file_description_.GetNoArena();
}
void CPublishedFile_Update_Request::set_file_description(const ::std::string& value) {
  set_has_file_description();
  file_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_Update_Request.file_description)
}
#if LANG_CXX11
void CPublishedFile_Update_Request::set_file_description(::std::string&& value) {
  set_has_file_description();
  file_description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CPublishedFile_Update_Request.file_description)
}
#endif
void CPublishedFile_Update_Request::set_file_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_file_description();
  file_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CPublishedFile_Update_Request.file_description)
}
void CPublishedFile_Update_Request::set_file_description(const char* value, size_t size) {
  set_has_file_description();
  file_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CPublishedFile_Update_Request.file_description)
}
::std::string* CPublishedFile_Update_Request::mutable_file_description() {
  set_has_file_description();
  // @@protoc_insertion_point(field_mutable:proto.steam.CPublishedFile_Update_Request.file_description)
  return file_description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CPublishedFile_Update_Request::release_file_description() {
  // @@protoc_insertion_point(field_release:proto.steam.CPublishedFile_Update_Request.file_description)
  clear_has_file_description();
  return file_description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CPublishedFile_Update_Request::set_allocated_file_description(::std::string* file_description) {
  if (file_description != NULL) {
    set_has_file_description();
  } else {
    clear_has_file_description();
  }
  file_description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_description);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CPublishedFile_Update_Request.file_description)
}

// optional uint32 visibility = 5 [(.proto.steam.description) = "(Optional) Visibility of the published file."];
bool CPublishedFile_Update_Request::has_visibility() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CPublishedFile_Update_Request::set_has_visibility() {
  _has_bits_[0] |= 0x00000040u;
}
void CPublishedFile_Update_Request::clear_has_visibility() {
  _has_bits_[0] &= ~0x00000040u;
}
void CPublishedFile_Update_Request::clear_visibility() {
  visibility_ = 0u;
  clear_has_visibility();
}
::google::protobuf::uint32 CPublishedFile_Update_Request::visibility() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_Update_Request.visibility)
  return visibility_;
}
void CPublishedFile_Update_Request::set_visibility(::google::protobuf::uint32 value) {
  set_has_visibility();
  visibility_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_Update_Request.visibility)
}

// repeated string tags = 6 [(.proto.steam.description) = "(Optional) Set of tags for the published file."];
int CPublishedFile_Update_Request::tags_size() const {
  return tags_.size();
}
void CPublishedFile_Update_Request::clear_tags() {
  tags_.Clear();
}
const ::std::string& CPublishedFile_Update_Request::tags(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_Update_Request.tags)
  return tags_.Get(index);
}
::std::string* CPublishedFile_Update_Request::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CPublishedFile_Update_Request.tags)
  return tags_.Mutable(index);
}
void CPublishedFile_Update_Request::set_tags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_Update_Request.tags)
  tags_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void CPublishedFile_Update_Request::set_tags(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_Update_Request.tags)
  tags_.Mutable(index)->assign(std::move(value));
}
#endif
void CPublishedFile_Update_Request::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.steam.CPublishedFile_Update_Request.tags)
}
void CPublishedFile_Update_Request::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CPublishedFile_Update_Request.tags)
}
::std::string* CPublishedFile_Update_Request::add_tags() {
  // @@protoc_insertion_point(field_add_mutable:proto.steam.CPublishedFile_Update_Request.tags)
  return tags_.Add();
}
void CPublishedFile_Update_Request::add_tags(const ::std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto.steam.CPublishedFile_Update_Request.tags)
}
#if LANG_CXX11
void CPublishedFile_Update_Request::add_tags(::std::string&& value) {
  tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:proto.steam.CPublishedFile_Update_Request.tags)
}
#endif
void CPublishedFile_Update_Request::add_tags(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto.steam.CPublishedFile_Update_Request.tags)
}
void CPublishedFile_Update_Request::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto.steam.CPublishedFile_Update_Request.tags)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
CPublishedFile_Update_Request::tags() const {
  // @@protoc_insertion_point(field_list:proto.steam.CPublishedFile_Update_Request.tags)
  return tags_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
CPublishedFile_Update_Request::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CPublishedFile_Update_Request.tags)
  return &tags_;
}

// optional string filename = 7 [(.proto.steam.description) = "(Optional) Filename for the published file."];
bool CPublishedFile_Update_Request::has_filename() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CPublishedFile_Update_Request::set_has_filename() {
  _has_bits_[0] |= 0x00000004u;
}
void CPublishedFile_Update_Request::clear_has_filename() {
  _has_bits_[0] &= ~0x00000004u;
}
void CPublishedFile_Update_Request::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_filename();
}
const ::std::string& CPublishedFile_Update_Request::filename() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_Update_Request.filename)
  return filename_.GetNoArena();
}
void CPublishedFile_Update_Request::set_filename(const ::std::string& value) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_Update_Request.filename)
}
#if LANG_CXX11
void CPublishedFile_Update_Request::set_filename(::std::string&& value) {
  set_has_filename();
  filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CPublishedFile_Update_Request.filename)
}
#endif
void CPublishedFile_Update_Request::set_filename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CPublishedFile_Update_Request.filename)
}
void CPublishedFile_Update_Request::set_filename(const char* value, size_t size) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CPublishedFile_Update_Request.filename)
}
::std::string* CPublishedFile_Update_Request::mutable_filename() {
  set_has_filename();
  // @@protoc_insertion_point(field_mutable:proto.steam.CPublishedFile_Update_Request.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CPublishedFile_Update_Request::release_filename() {
  // @@protoc_insertion_point(field_release:proto.steam.CPublishedFile_Update_Request.filename)
  clear_has_filename();
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CPublishedFile_Update_Request::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    set_has_filename();
  } else {
    clear_has_filename();
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CPublishedFile_Update_Request.filename)
}

// optional string preview_filename = 8 [(.proto.steam.description) = "(Optional) Preview filename for the published file."];
bool CPublishedFile_Update_Request::has_preview_filename() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CPublishedFile_Update_Request::set_has_preview_filename() {
  _has_bits_[0] |= 0x00000008u;
}
void CPublishedFile_Update_Request::clear_has_preview_filename() {
  _has_bits_[0] &= ~0x00000008u;
}
void CPublishedFile_Update_Request::clear_preview_filename() {
  preview_filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_preview_filename();
}
const ::std::string& CPublishedFile_Update_Request::preview_filename() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_Update_Request.preview_filename)
  return preview_filename_.GetNoArena();
}
void CPublishedFile_Update_Request::set_preview_filename(const ::std::string& value) {
  set_has_preview_filename();
  preview_filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_Update_Request.preview_filename)
}
#if LANG_CXX11
void CPublishedFile_Update_Request::set_preview_filename(::std::string&& value) {
  set_has_preview_filename();
  preview_filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CPublishedFile_Update_Request.preview_filename)
}
#endif
void CPublishedFile_Update_Request::set_preview_filename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_preview_filename();
  preview_filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CPublishedFile_Update_Request.preview_filename)
}
void CPublishedFile_Update_Request::set_preview_filename(const char* value, size_t size) {
  set_has_preview_filename();
  preview_filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CPublishedFile_Update_Request.preview_filename)
}
::std::string* CPublishedFile_Update_Request::mutable_preview_filename() {
  set_has_preview_filename();
  // @@protoc_insertion_point(field_mutable:proto.steam.CPublishedFile_Update_Request.preview_filename)
  return preview_filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CPublishedFile_Update_Request::release_preview_filename() {
  // @@protoc_insertion_point(field_release:proto.steam.CPublishedFile_Update_Request.preview_filename)
  clear_has_preview_filename();
  return preview_filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CPublishedFile_Update_Request::set_allocated_preview_filename(::std::string* preview_filename) {
  if (preview_filename != NULL) {
    set_has_preview_filename();
  } else {
    clear_has_preview_filename();
  }
  preview_filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), preview_filename);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CPublishedFile_Update_Request.preview_filename)
}

// optional uint32 image_width = 15 [(.proto.steam.description) = "(Optional) If this is an image file, you can specify the image width."];
bool CPublishedFile_Update_Request::has_image_width() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CPublishedFile_Update_Request::set_has_image_width() {
  _has_bits_[0] |= 0x00000080u;
}
void CPublishedFile_Update_Request::clear_has_image_width() {
  _has_bits_[0] &= ~0x00000080u;
}
void CPublishedFile_Update_Request::clear_image_width() {
  image_width_ = 0u;
  clear_has_image_width();
}
::google::protobuf::uint32 CPublishedFile_Update_Request::image_width() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_Update_Request.image_width)
  return image_width_;
}
void CPublishedFile_Update_Request::set_image_width(::google::protobuf::uint32 value) {
  set_has_image_width();
  image_width_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_Update_Request.image_width)
}

// optional uint32 image_height = 16 [(.proto.steam.description) = "(Optional) If this is an image file, you can specify the image height."];
bool CPublishedFile_Update_Request::has_image_height() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CPublishedFile_Update_Request::set_has_image_height() {
  _has_bits_[0] |= 0x00000100u;
}
void CPublishedFile_Update_Request::clear_has_image_height() {
  _has_bits_[0] &= ~0x00000100u;
}
void CPublishedFile_Update_Request::clear_image_height() {
  image_height_ = 0u;
  clear_has_image_height();
}
::google::protobuf::uint32 CPublishedFile_Update_Request::image_height() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_Update_Request.image_height)
  return image_height_;
}
void CPublishedFile_Update_Request::set_image_height(::google::protobuf::uint32 value) {
  set_has_image_height();
  image_height_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_Update_Request.image_height)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPublishedFile_Update_Response::CPublishedFile_Update_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPublishedFile_Update_Response)
}
CPublishedFile_Update_Response::CPublishedFile_Update_Response(const CPublishedFile_Update_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPublishedFile_Update_Response)
}

void CPublishedFile_Update_Response::SharedCtor() {
  _cached_size_ = 0;
}

CPublishedFile_Update_Response::~CPublishedFile_Update_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CPublishedFile_Update_Response)
  SharedDtor();
}

void CPublishedFile_Update_Response::SharedDtor() {
}

void CPublishedFile_Update_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPublishedFile_Update_Response::descriptor() {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CPublishedFile_Update_Response& CPublishedFile_Update_Response::default_instance() {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CPublishedFile_Update_Response* CPublishedFile_Update_Response::New(::google::protobuf::Arena* arena) const {
  CPublishedFile_Update_Response* n = new CPublishedFile_Update_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CPublishedFile_Update_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPublishedFile_Update_Response)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CPublishedFile_Update_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPublishedFile_Update_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPublishedFile_Update_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPublishedFile_Update_Response)
  return false;
#undef DO_
}

void CPublishedFile_Update_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPublishedFile_Update_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPublishedFile_Update_Response)
}

::google::protobuf::uint8* CPublishedFile_Update_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPublishedFile_Update_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPublishedFile_Update_Response)
  return target;
}

size_t CPublishedFile_Update_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPublishedFile_Update_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPublishedFile_Update_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPublishedFile_Update_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CPublishedFile_Update_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CPublishedFile_Update_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPublishedFile_Update_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPublishedFile_Update_Response)
    MergeFrom(*source);
  }
}

void CPublishedFile_Update_Response::MergeFrom(const CPublishedFile_Update_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPublishedFile_Update_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CPublishedFile_Update_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPublishedFile_Update_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPublishedFile_Update_Response::CopyFrom(const CPublishedFile_Update_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPublishedFile_Update_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_Update_Response::IsInitialized() const {
  return true;
}

void CPublishedFile_Update_Response::Swap(CPublishedFile_Update_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPublishedFile_Update_Response::InternalSwap(CPublishedFile_Update_Response* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CPublishedFile_Update_Response::GetMetadata() const {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CPublishedFile_Update_Response

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPublishedFile_GetChangeHistoryEntry_Request::kPublishedfileidFieldNumber;
const int CPublishedFile_GetChangeHistoryEntry_Request::kTimestampFieldNumber;
const int CPublishedFile_GetChangeHistoryEntry_Request::kLanguageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPublishedFile_GetChangeHistoryEntry_Request::CPublishedFile_GetChangeHistoryEntry_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPublishedFile_GetChangeHistoryEntry_Request)
}
CPublishedFile_GetChangeHistoryEntry_Request::CPublishedFile_GetChangeHistoryEntry_Request(const CPublishedFile_GetChangeHistoryEntry_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&publishedfileid_, &from.publishedfileid_,
    reinterpret_cast<char*>(&language_) -
    reinterpret_cast<char*>(&publishedfileid_) + sizeof(language_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPublishedFile_GetChangeHistoryEntry_Request)
}

void CPublishedFile_GetChangeHistoryEntry_Request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&publishedfileid_, 0, reinterpret_cast<char*>(&language_) -
    reinterpret_cast<char*>(&publishedfileid_) + sizeof(language_));
}

CPublishedFile_GetChangeHistoryEntry_Request::~CPublishedFile_GetChangeHistoryEntry_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CPublishedFile_GetChangeHistoryEntry_Request)
  SharedDtor();
}

void CPublishedFile_GetChangeHistoryEntry_Request::SharedDtor() {
}

void CPublishedFile_GetChangeHistoryEntry_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPublishedFile_GetChangeHistoryEntry_Request::descriptor() {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CPublishedFile_GetChangeHistoryEntry_Request& CPublishedFile_GetChangeHistoryEntry_Request::default_instance() {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CPublishedFile_GetChangeHistoryEntry_Request* CPublishedFile_GetChangeHistoryEntry_Request::New(::google::protobuf::Arena* arena) const {
  CPublishedFile_GetChangeHistoryEntry_Request* n = new CPublishedFile_GetChangeHistoryEntry_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CPublishedFile_GetChangeHistoryEntry_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPublishedFile_GetChangeHistoryEntry_Request)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&publishedfileid_, 0, reinterpret_cast<char*>(&language_) -
      reinterpret_cast<char*>(&publishedfileid_) + sizeof(language_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CPublishedFile_GetChangeHistoryEntry_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPublishedFile_GetChangeHistoryEntry_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 publishedfileid = 1 [(.proto.steam.description) = "Published file id of the file we\'d like to get the change history for."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_publishedfileid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &publishedfileid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 language = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_language();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &language_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPublishedFile_GetChangeHistoryEntry_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPublishedFile_GetChangeHistoryEntry_Request)
  return false;
#undef DO_
}

void CPublishedFile_GetChangeHistoryEntry_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPublishedFile_GetChangeHistoryEntry_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 publishedfileid = 1 [(.proto.steam.description) = "Published file id of the file we\'d like to get the change history for."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->publishedfileid(), output);
  }

  // optional uint32 timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->timestamp(), output);
  }

  // optional int32 language = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->language(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPublishedFile_GetChangeHistoryEntry_Request)
}

::google::protobuf::uint8* CPublishedFile_GetChangeHistoryEntry_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPublishedFile_GetChangeHistoryEntry_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 publishedfileid = 1 [(.proto.steam.description) = "Published file id of the file we\'d like to get the change history for."];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->publishedfileid(), target);
  }

  // optional uint32 timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->timestamp(), target);
  }

  // optional int32 language = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->language(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPublishedFile_GetChangeHistoryEntry_Request)
  return target;
}

size_t CPublishedFile_GetChangeHistoryEntry_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPublishedFile_GetChangeHistoryEntry_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional fixed64 publishedfileid = 1 [(.proto.steam.description) = "Published file id of the file we\'d like to get the change history for."];
    if (has_publishedfileid()) {
      total_size += 1 + 8;
    }

    // optional uint32 timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

    // optional int32 language = 3;
    if (has_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->language());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPublishedFile_GetChangeHistoryEntry_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPublishedFile_GetChangeHistoryEntry_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CPublishedFile_GetChangeHistoryEntry_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CPublishedFile_GetChangeHistoryEntry_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPublishedFile_GetChangeHistoryEntry_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPublishedFile_GetChangeHistoryEntry_Request)
    MergeFrom(*source);
  }
}

void CPublishedFile_GetChangeHistoryEntry_Request::MergeFrom(const CPublishedFile_GetChangeHistoryEntry_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPublishedFile_GetChangeHistoryEntry_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      publishedfileid_ = from.publishedfileid_;
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      language_ = from.language_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CPublishedFile_GetChangeHistoryEntry_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPublishedFile_GetChangeHistoryEntry_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPublishedFile_GetChangeHistoryEntry_Request::CopyFrom(const CPublishedFile_GetChangeHistoryEntry_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPublishedFile_GetChangeHistoryEntry_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_GetChangeHistoryEntry_Request::IsInitialized() const {
  return true;
}

void CPublishedFile_GetChangeHistoryEntry_Request::Swap(CPublishedFile_GetChangeHistoryEntry_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPublishedFile_GetChangeHistoryEntry_Request::InternalSwap(CPublishedFile_GetChangeHistoryEntry_Request* other) {
  std::swap(publishedfileid_, other->publishedfileid_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(language_, other->language_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CPublishedFile_GetChangeHistoryEntry_Request::GetMetadata() const {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CPublishedFile_GetChangeHistoryEntry_Request

// optional fixed64 publishedfileid = 1 [(.proto.steam.description) = "Published file id of the file we\'d like to get the change history for."];
bool CPublishedFile_GetChangeHistoryEntry_Request::has_publishedfileid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CPublishedFile_GetChangeHistoryEntry_Request::set_has_publishedfileid() {
  _has_bits_[0] |= 0x00000001u;
}
void CPublishedFile_GetChangeHistoryEntry_Request::clear_has_publishedfileid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CPublishedFile_GetChangeHistoryEntry_Request::clear_publishedfileid() {
  publishedfileid_ = GOOGLE_ULONGLONG(0);
  clear_has_publishedfileid();
}
::google::protobuf::uint64 CPublishedFile_GetChangeHistoryEntry_Request::publishedfileid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_GetChangeHistoryEntry_Request.publishedfileid)
  return publishedfileid_;
}
void CPublishedFile_GetChangeHistoryEntry_Request::set_publishedfileid(::google::protobuf::uint64 value) {
  set_has_publishedfileid();
  publishedfileid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_GetChangeHistoryEntry_Request.publishedfileid)
}

// optional uint32 timestamp = 2;
bool CPublishedFile_GetChangeHistoryEntry_Request::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CPublishedFile_GetChangeHistoryEntry_Request::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
void CPublishedFile_GetChangeHistoryEntry_Request::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
void CPublishedFile_GetChangeHistoryEntry_Request::clear_timestamp() {
  timestamp_ = 0u;
  clear_has_timestamp();
}
::google::protobuf::uint32 CPublishedFile_GetChangeHistoryEntry_Request::timestamp() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_GetChangeHistoryEntry_Request.timestamp)
  return timestamp_;
}
void CPublishedFile_GetChangeHistoryEntry_Request::set_timestamp(::google::protobuf::uint32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_GetChangeHistoryEntry_Request.timestamp)
}

// optional int32 language = 3;
bool CPublishedFile_GetChangeHistoryEntry_Request::has_language() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CPublishedFile_GetChangeHistoryEntry_Request::set_has_language() {
  _has_bits_[0] |= 0x00000004u;
}
void CPublishedFile_GetChangeHistoryEntry_Request::clear_has_language() {
  _has_bits_[0] &= ~0x00000004u;
}
void CPublishedFile_GetChangeHistoryEntry_Request::clear_language() {
  language_ = 0;
  clear_has_language();
}
::google::protobuf::int32 CPublishedFile_GetChangeHistoryEntry_Request::language() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_GetChangeHistoryEntry_Request.language)
  return language_;
}
void CPublishedFile_GetChangeHistoryEntry_Request::set_language(::google::protobuf::int32 value) {
  set_has_language();
  language_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_GetChangeHistoryEntry_Request.language)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPublishedFile_GetChangeHistoryEntry_Response::kChangeDescriptionFieldNumber;
const int CPublishedFile_GetChangeHistoryEntry_Response::kLanguageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPublishedFile_GetChangeHistoryEntry_Response::CPublishedFile_GetChangeHistoryEntry_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPublishedFile_GetChangeHistoryEntry_Response)
}
CPublishedFile_GetChangeHistoryEntry_Response::CPublishedFile_GetChangeHistoryEntry_Response(const CPublishedFile_GetChangeHistoryEntry_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  change_description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_change_description()) {
    change_description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.change_description_);
  }
  language_ = from.language_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPublishedFile_GetChangeHistoryEntry_Response)
}

void CPublishedFile_GetChangeHistoryEntry_Response::SharedCtor() {
  _cached_size_ = 0;
  change_description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  language_ = 0;
}

CPublishedFile_GetChangeHistoryEntry_Response::~CPublishedFile_GetChangeHistoryEntry_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CPublishedFile_GetChangeHistoryEntry_Response)
  SharedDtor();
}

void CPublishedFile_GetChangeHistoryEntry_Response::SharedDtor() {
  change_description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CPublishedFile_GetChangeHistoryEntry_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPublishedFile_GetChangeHistoryEntry_Response::descriptor() {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CPublishedFile_GetChangeHistoryEntry_Response& CPublishedFile_GetChangeHistoryEntry_Response::default_instance() {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CPublishedFile_GetChangeHistoryEntry_Response* CPublishedFile_GetChangeHistoryEntry_Response::New(::google::protobuf::Arena* arena) const {
  CPublishedFile_GetChangeHistoryEntry_Response* n = new CPublishedFile_GetChangeHistoryEntry_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CPublishedFile_GetChangeHistoryEntry_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPublishedFile_GetChangeHistoryEntry_Response)
  if (has_change_description()) {
    GOOGLE_DCHECK(!change_description_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*change_description_.UnsafeRawStringPointer())->clear();
  }
  language_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CPublishedFile_GetChangeHistoryEntry_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPublishedFile_GetChangeHistoryEntry_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string change_description = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_change_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->change_description().data(), this->change_description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CPublishedFile_GetChangeHistoryEntry_Response.change_description");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 language = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_language();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &language_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPublishedFile_GetChangeHistoryEntry_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPublishedFile_GetChangeHistoryEntry_Response)
  return false;
#undef DO_
}

void CPublishedFile_GetChangeHistoryEntry_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPublishedFile_GetChangeHistoryEntry_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string change_description = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->change_description().data(), this->change_description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPublishedFile_GetChangeHistoryEntry_Response.change_description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->change_description(), output);
  }

  // optional int32 language = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->language(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPublishedFile_GetChangeHistoryEntry_Response)
}

::google::protobuf::uint8* CPublishedFile_GetChangeHistoryEntry_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPublishedFile_GetChangeHistoryEntry_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string change_description = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->change_description().data(), this->change_description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPublishedFile_GetChangeHistoryEntry_Response.change_description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->change_description(), target);
  }

  // optional int32 language = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->language(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPublishedFile_GetChangeHistoryEntry_Response)
  return target;
}

size_t CPublishedFile_GetChangeHistoryEntry_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPublishedFile_GetChangeHistoryEntry_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string change_description = 1;
    if (has_change_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->change_description());
    }

    // optional int32 language = 2;
    if (has_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->language());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPublishedFile_GetChangeHistoryEntry_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPublishedFile_GetChangeHistoryEntry_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CPublishedFile_GetChangeHistoryEntry_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CPublishedFile_GetChangeHistoryEntry_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPublishedFile_GetChangeHistoryEntry_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPublishedFile_GetChangeHistoryEntry_Response)
    MergeFrom(*source);
  }
}

void CPublishedFile_GetChangeHistoryEntry_Response::MergeFrom(const CPublishedFile_GetChangeHistoryEntry_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPublishedFile_GetChangeHistoryEntry_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_change_description();
      change_description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.change_description_);
    }
    if (cached_has_bits & 0x00000002u) {
      language_ = from.language_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CPublishedFile_GetChangeHistoryEntry_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPublishedFile_GetChangeHistoryEntry_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPublishedFile_GetChangeHistoryEntry_Response::CopyFrom(const CPublishedFile_GetChangeHistoryEntry_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPublishedFile_GetChangeHistoryEntry_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_GetChangeHistoryEntry_Response::IsInitialized() const {
  return true;
}

void CPublishedFile_GetChangeHistoryEntry_Response::Swap(CPublishedFile_GetChangeHistoryEntry_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPublishedFile_GetChangeHistoryEntry_Response::InternalSwap(CPublishedFile_GetChangeHistoryEntry_Response* other) {
  change_description_.Swap(&other->change_description_);
  std::swap(language_, other->language_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CPublishedFile_GetChangeHistoryEntry_Response::GetMetadata() const {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CPublishedFile_GetChangeHistoryEntry_Response

// optional string change_description = 1;
bool CPublishedFile_GetChangeHistoryEntry_Response::has_change_description() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CPublishedFile_GetChangeHistoryEntry_Response::set_has_change_description() {
  _has_bits_[0] |= 0x00000001u;
}
void CPublishedFile_GetChangeHistoryEntry_Response::clear_has_change_description() {
  _has_bits_[0] &= ~0x00000001u;
}
void CPublishedFile_GetChangeHistoryEntry_Response::clear_change_description() {
  change_description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_change_description();
}
const ::std::string& CPublishedFile_GetChangeHistoryEntry_Response::change_description() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_GetChangeHistoryEntry_Response.change_description)
  return change_description_.GetNoArena();
}
void CPublishedFile_GetChangeHistoryEntry_Response::set_change_description(const ::std::string& value) {
  set_has_change_description();
  change_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_GetChangeHistoryEntry_Response.change_description)
}
#if LANG_CXX11
void CPublishedFile_GetChangeHistoryEntry_Response::set_change_description(::std::string&& value) {
  set_has_change_description();
  change_description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CPublishedFile_GetChangeHistoryEntry_Response.change_description)
}
#endif
void CPublishedFile_GetChangeHistoryEntry_Response::set_change_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_change_description();
  change_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CPublishedFile_GetChangeHistoryEntry_Response.change_description)
}
void CPublishedFile_GetChangeHistoryEntry_Response::set_change_description(const char* value, size_t size) {
  set_has_change_description();
  change_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CPublishedFile_GetChangeHistoryEntry_Response.change_description)
}
::std::string* CPublishedFile_GetChangeHistoryEntry_Response::mutable_change_description() {
  set_has_change_description();
  // @@protoc_insertion_point(field_mutable:proto.steam.CPublishedFile_GetChangeHistoryEntry_Response.change_description)
  return change_description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CPublishedFile_GetChangeHistoryEntry_Response::release_change_description() {
  // @@protoc_insertion_point(field_release:proto.steam.CPublishedFile_GetChangeHistoryEntry_Response.change_description)
  clear_has_change_description();
  return change_description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CPublishedFile_GetChangeHistoryEntry_Response::set_allocated_change_description(::std::string* change_description) {
  if (change_description != NULL) {
    set_has_change_description();
  } else {
    clear_has_change_description();
  }
  change_description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), change_description);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CPublishedFile_GetChangeHistoryEntry_Response.change_description)
}

// optional int32 language = 2;
bool CPublishedFile_GetChangeHistoryEntry_Response::has_language() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CPublishedFile_GetChangeHistoryEntry_Response::set_has_language() {
  _has_bits_[0] |= 0x00000002u;
}
void CPublishedFile_GetChangeHistoryEntry_Response::clear_has_language() {
  _has_bits_[0] &= ~0x00000002u;
}
void CPublishedFile_GetChangeHistoryEntry_Response::clear_language() {
  language_ = 0;
  clear_has_language();
}
::google::protobuf::int32 CPublishedFile_GetChangeHistoryEntry_Response::language() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_GetChangeHistoryEntry_Response.language)
  return language_;
}
void CPublishedFile_GetChangeHistoryEntry_Response::set_language(::google::protobuf::int32 value) {
  set_has_language();
  language_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_GetChangeHistoryEntry_Response.language)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPublishedFile_GetChangeHistory_Request::kPublishedfileidFieldNumber;
const int CPublishedFile_GetChangeHistory_Request::kTotalOnlyFieldNumber;
const int CPublishedFile_GetChangeHistory_Request::kStartindexFieldNumber;
const int CPublishedFile_GetChangeHistory_Request::kCountFieldNumber;
const int CPublishedFile_GetChangeHistory_Request::kLanguageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPublishedFile_GetChangeHistory_Request::CPublishedFile_GetChangeHistory_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPublishedFile_GetChangeHistory_Request)
}
CPublishedFile_GetChangeHistory_Request::CPublishedFile_GetChangeHistory_Request(const CPublishedFile_GetChangeHistory_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&publishedfileid_, &from.publishedfileid_,
    reinterpret_cast<char*>(&language_) -
    reinterpret_cast<char*>(&publishedfileid_) + sizeof(language_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPublishedFile_GetChangeHistory_Request)
}

void CPublishedFile_GetChangeHistory_Request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&publishedfileid_, 0, reinterpret_cast<char*>(&language_) -
    reinterpret_cast<char*>(&publishedfileid_) + sizeof(language_));
}

CPublishedFile_GetChangeHistory_Request::~CPublishedFile_GetChangeHistory_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CPublishedFile_GetChangeHistory_Request)
  SharedDtor();
}

void CPublishedFile_GetChangeHistory_Request::SharedDtor() {
}

void CPublishedFile_GetChangeHistory_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPublishedFile_GetChangeHistory_Request::descriptor() {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CPublishedFile_GetChangeHistory_Request& CPublishedFile_GetChangeHistory_Request::default_instance() {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CPublishedFile_GetChangeHistory_Request* CPublishedFile_GetChangeHistory_Request::New(::google::protobuf::Arena* arena) const {
  CPublishedFile_GetChangeHistory_Request* n = new CPublishedFile_GetChangeHistory_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CPublishedFile_GetChangeHistory_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPublishedFile_GetChangeHistory_Request)
  if (_has_bits_[0 / 32] & 31u) {
    ::memset(&publishedfileid_, 0, reinterpret_cast<char*>(&language_) -
      reinterpret_cast<char*>(&publishedfileid_) + sizeof(language_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CPublishedFile_GetChangeHistory_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPublishedFile_GetChangeHistory_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 publishedfileid = 1 [(.proto.steam.description) = "Published file id of the file we\'d like to get the change history for."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_publishedfileid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &publishedfileid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool total_only = 2 [(.proto.steam.description) = "Return the total number of changes only."];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_total_only();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &total_only_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 startindex = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_startindex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &startindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 count = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 language = 5 [default = 0, (.proto.steam.description) = "Desired language"];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_language();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &language_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPublishedFile_GetChangeHistory_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPublishedFile_GetChangeHistory_Request)
  return false;
#undef DO_
}

void CPublishedFile_GetChangeHistory_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPublishedFile_GetChangeHistory_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 publishedfileid = 1 [(.proto.steam.description) = "Published file id of the file we\'d like to get the change history for."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->publishedfileid(), output);
  }

  // optional bool total_only = 2 [(.proto.steam.description) = "Return the total number of changes only."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->total_only(), output);
  }

  // optional uint32 startindex = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->startindex(), output);
  }

  // optional uint32 count = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->count(), output);
  }

  // optional int32 language = 5 [default = 0, (.proto.steam.description) = "Desired language"];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->language(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPublishedFile_GetChangeHistory_Request)
}

::google::protobuf::uint8* CPublishedFile_GetChangeHistory_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPublishedFile_GetChangeHistory_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 publishedfileid = 1 [(.proto.steam.description) = "Published file id of the file we\'d like to get the change history for."];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->publishedfileid(), target);
  }

  // optional bool total_only = 2 [(.proto.steam.description) = "Return the total number of changes only."];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->total_only(), target);
  }

  // optional uint32 startindex = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->startindex(), target);
  }

  // optional uint32 count = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->count(), target);
  }

  // optional int32 language = 5 [default = 0, (.proto.steam.description) = "Desired language"];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->language(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPublishedFile_GetChangeHistory_Request)
  return target;
}

size_t CPublishedFile_GetChangeHistory_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPublishedFile_GetChangeHistory_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional fixed64 publishedfileid = 1 [(.proto.steam.description) = "Published file id of the file we\'d like to get the change history for."];
    if (has_publishedfileid()) {
      total_size += 1 + 8;
    }

    // optional bool total_only = 2 [(.proto.steam.description) = "Return the total number of changes only."];
    if (has_total_only()) {
      total_size += 1 + 1;
    }

    // optional uint32 startindex = 3;
    if (has_startindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->startindex());
    }

    // optional uint32 count = 4;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // optional int32 language = 5 [default = 0, (.proto.steam.description) = "Desired language"];
    if (has_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->language());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPublishedFile_GetChangeHistory_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPublishedFile_GetChangeHistory_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CPublishedFile_GetChangeHistory_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CPublishedFile_GetChangeHistory_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPublishedFile_GetChangeHistory_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPublishedFile_GetChangeHistory_Request)
    MergeFrom(*source);
  }
}

void CPublishedFile_GetChangeHistory_Request::MergeFrom(const CPublishedFile_GetChangeHistory_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPublishedFile_GetChangeHistory_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      publishedfileid_ = from.publishedfileid_;
    }
    if (cached_has_bits & 0x00000002u) {
      total_only_ = from.total_only_;
    }
    if (cached_has_bits & 0x00000004u) {
      startindex_ = from.startindex_;
    }
    if (cached_has_bits & 0x00000008u) {
      count_ = from.count_;
    }
    if (cached_has_bits & 0x00000010u) {
      language_ = from.language_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CPublishedFile_GetChangeHistory_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPublishedFile_GetChangeHistory_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPublishedFile_GetChangeHistory_Request::CopyFrom(const CPublishedFile_GetChangeHistory_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPublishedFile_GetChangeHistory_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_GetChangeHistory_Request::IsInitialized() const {
  return true;
}

void CPublishedFile_GetChangeHistory_Request::Swap(CPublishedFile_GetChangeHistory_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPublishedFile_GetChangeHistory_Request::InternalSwap(CPublishedFile_GetChangeHistory_Request* other) {
  std::swap(publishedfileid_, other->publishedfileid_);
  std::swap(total_only_, other->total_only_);
  std::swap(startindex_, other->startindex_);
  std::swap(count_, other->count_);
  std::swap(language_, other->language_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CPublishedFile_GetChangeHistory_Request::GetMetadata() const {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CPublishedFile_GetChangeHistory_Request

// optional fixed64 publishedfileid = 1 [(.proto.steam.description) = "Published file id of the file we\'d like to get the change history for."];
bool CPublishedFile_GetChangeHistory_Request::has_publishedfileid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CPublishedFile_GetChangeHistory_Request::set_has_publishedfileid() {
  _has_bits_[0] |= 0x00000001u;
}
void CPublishedFile_GetChangeHistory_Request::clear_has_publishedfileid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CPublishedFile_GetChangeHistory_Request::clear_publishedfileid() {
  publishedfileid_ = GOOGLE_ULONGLONG(0);
  clear_has_publishedfileid();
}
::google::protobuf::uint64 CPublishedFile_GetChangeHistory_Request::publishedfileid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_GetChangeHistory_Request.publishedfileid)
  return publishedfileid_;
}
void CPublishedFile_GetChangeHistory_Request::set_publishedfileid(::google::protobuf::uint64 value) {
  set_has_publishedfileid();
  publishedfileid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_GetChangeHistory_Request.publishedfileid)
}

// optional bool total_only = 2 [(.proto.steam.description) = "Return the total number of changes only."];
bool CPublishedFile_GetChangeHistory_Request::has_total_only() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CPublishedFile_GetChangeHistory_Request::set_has_total_only() {
  _has_bits_[0] |= 0x00000002u;
}
void CPublishedFile_GetChangeHistory_Request::clear_has_total_only() {
  _has_bits_[0] &= ~0x00000002u;
}
void CPublishedFile_GetChangeHistory_Request::clear_total_only() {
  total_only_ = false;
  clear_has_total_only();
}
bool CPublishedFile_GetChangeHistory_Request::total_only() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_GetChangeHistory_Request.total_only)
  return total_only_;
}
void CPublishedFile_GetChangeHistory_Request::set_total_only(bool value) {
  set_has_total_only();
  total_only_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_GetChangeHistory_Request.total_only)
}

// optional uint32 startindex = 3;
bool CPublishedFile_GetChangeHistory_Request::has_startindex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CPublishedFile_GetChangeHistory_Request::set_has_startindex() {
  _has_bits_[0] |= 0x00000004u;
}
void CPublishedFile_GetChangeHistory_Request::clear_has_startindex() {
  _has_bits_[0] &= ~0x00000004u;
}
void CPublishedFile_GetChangeHistory_Request::clear_startindex() {
  startindex_ = 0u;
  clear_has_startindex();
}
::google::protobuf::uint32 CPublishedFile_GetChangeHistory_Request::startindex() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_GetChangeHistory_Request.startindex)
  return startindex_;
}
void CPublishedFile_GetChangeHistory_Request::set_startindex(::google::protobuf::uint32 value) {
  set_has_startindex();
  startindex_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_GetChangeHistory_Request.startindex)
}

// optional uint32 count = 4;
bool CPublishedFile_GetChangeHistory_Request::has_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CPublishedFile_GetChangeHistory_Request::set_has_count() {
  _has_bits_[0] |= 0x00000008u;
}
void CPublishedFile_GetChangeHistory_Request::clear_has_count() {
  _has_bits_[0] &= ~0x00000008u;
}
void CPublishedFile_GetChangeHistory_Request::clear_count() {
  count_ = 0u;
  clear_has_count();
}
::google::protobuf::uint32 CPublishedFile_GetChangeHistory_Request::count() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_GetChangeHistory_Request.count)
  return count_;
}
void CPublishedFile_GetChangeHistory_Request::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_GetChangeHistory_Request.count)
}

// optional int32 language = 5 [default = 0, (.proto.steam.description) = "Desired language"];
bool CPublishedFile_GetChangeHistory_Request::has_language() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CPublishedFile_GetChangeHistory_Request::set_has_language() {
  _has_bits_[0] |= 0x00000010u;
}
void CPublishedFile_GetChangeHistory_Request::clear_has_language() {
  _has_bits_[0] &= ~0x00000010u;
}
void CPublishedFile_GetChangeHistory_Request::clear_language() {
  language_ = 0;
  clear_has_language();
}
::google::protobuf::int32 CPublishedFile_GetChangeHistory_Request::language() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_GetChangeHistory_Request.language)
  return language_;
}
void CPublishedFile_GetChangeHistory_Request::set_language(::google::protobuf::int32 value) {
  set_has_language();
  language_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_GetChangeHistory_Request.language)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPublishedFile_GetChangeHistory_Response_ChangeLog::kTimestampFieldNumber;
const int CPublishedFile_GetChangeHistory_Response_ChangeLog::kChangeDescriptionFieldNumber;
const int CPublishedFile_GetChangeHistory_Response_ChangeLog::kLanguageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPublishedFile_GetChangeHistory_Response_ChangeLog::CPublishedFile_GetChangeHistory_Response_ChangeLog()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPublishedFile_GetChangeHistory_Response.ChangeLog)
}
CPublishedFile_GetChangeHistory_Response_ChangeLog::CPublishedFile_GetChangeHistory_Response_ChangeLog(const CPublishedFile_GetChangeHistory_Response_ChangeLog& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  change_description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_change_description()) {
    change_description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.change_description_);
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    reinterpret_cast<char*>(&language_) -
    reinterpret_cast<char*>(&timestamp_) + sizeof(language_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPublishedFile_GetChangeHistory_Response.ChangeLog)
}

void CPublishedFile_GetChangeHistory_Response_ChangeLog::SharedCtor() {
  _cached_size_ = 0;
  change_description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, reinterpret_cast<char*>(&language_) -
    reinterpret_cast<char*>(&timestamp_) + sizeof(language_));
}

CPublishedFile_GetChangeHistory_Response_ChangeLog::~CPublishedFile_GetChangeHistory_Response_ChangeLog() {
  // @@protoc_insertion_point(destructor:proto.steam.CPublishedFile_GetChangeHistory_Response.ChangeLog)
  SharedDtor();
}

void CPublishedFile_GetChangeHistory_Response_ChangeLog::SharedDtor() {
  change_description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CPublishedFile_GetChangeHistory_Response_ChangeLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPublishedFile_GetChangeHistory_Response_ChangeLog::descriptor() {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CPublishedFile_GetChangeHistory_Response_ChangeLog& CPublishedFile_GetChangeHistory_Response_ChangeLog::default_instance() {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CPublishedFile_GetChangeHistory_Response_ChangeLog* CPublishedFile_GetChangeHistory_Response_ChangeLog::New(::google::protobuf::Arena* arena) const {
  CPublishedFile_GetChangeHistory_Response_ChangeLog* n = new CPublishedFile_GetChangeHistory_Response_ChangeLog;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CPublishedFile_GetChangeHistory_Response_ChangeLog::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPublishedFile_GetChangeHistory_Response.ChangeLog)
  if (has_change_description()) {
    GOOGLE_DCHECK(!change_description_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*change_description_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&timestamp_, 0, reinterpret_cast<char*>(&language_) -
      reinterpret_cast<char*>(&timestamp_) + sizeof(language_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CPublishedFile_GetChangeHistory_Response_ChangeLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPublishedFile_GetChangeHistory_Response.ChangeLog)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string change_description = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_change_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->change_description().data(), this->change_description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CPublishedFile_GetChangeHistory_Response.ChangeLog.change_description");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 language = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_language();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &language_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPublishedFile_GetChangeHistory_Response.ChangeLog)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPublishedFile_GetChangeHistory_Response.ChangeLog)
  return false;
#undef DO_
}

void CPublishedFile_GetChangeHistory_Response_ChangeLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPublishedFile_GetChangeHistory_Response.ChangeLog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 timestamp = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->timestamp(), output);
  }

  // optional string change_description = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->change_description().data(), this->change_description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPublishedFile_GetChangeHistory_Response.ChangeLog.change_description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->change_description(), output);
  }

  // optional int32 language = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->language(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPublishedFile_GetChangeHistory_Response.ChangeLog)
}

::google::protobuf::uint8* CPublishedFile_GetChangeHistory_Response_ChangeLog::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPublishedFile_GetChangeHistory_Response.ChangeLog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 timestamp = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->timestamp(), target);
  }

  // optional string change_description = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->change_description().data(), this->change_description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPublishedFile_GetChangeHistory_Response.ChangeLog.change_description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->change_description(), target);
  }

  // optional int32 language = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->language(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPublishedFile_GetChangeHistory_Response.ChangeLog)
  return target;
}

size_t CPublishedFile_GetChangeHistory_Response_ChangeLog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPublishedFile_GetChangeHistory_Response.ChangeLog)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string change_description = 2;
    if (has_change_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->change_description());
    }

    // optional uint32 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

    // optional int32 language = 3;
    if (has_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->language());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPublishedFile_GetChangeHistory_Response_ChangeLog::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPublishedFile_GetChangeHistory_Response.ChangeLog)
  GOOGLE_DCHECK_NE(&from, this);
  const CPublishedFile_GetChangeHistory_Response_ChangeLog* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CPublishedFile_GetChangeHistory_Response_ChangeLog>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPublishedFile_GetChangeHistory_Response.ChangeLog)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPublishedFile_GetChangeHistory_Response.ChangeLog)
    MergeFrom(*source);
  }
}

void CPublishedFile_GetChangeHistory_Response_ChangeLog::MergeFrom(const CPublishedFile_GetChangeHistory_Response_ChangeLog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPublishedFile_GetChangeHistory_Response.ChangeLog)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_change_description();
      change_description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.change_description_);
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      language_ = from.language_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CPublishedFile_GetChangeHistory_Response_ChangeLog::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPublishedFile_GetChangeHistory_Response.ChangeLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPublishedFile_GetChangeHistory_Response_ChangeLog::CopyFrom(const CPublishedFile_GetChangeHistory_Response_ChangeLog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPublishedFile_GetChangeHistory_Response.ChangeLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_GetChangeHistory_Response_ChangeLog::IsInitialized() const {
  return true;
}

void CPublishedFile_GetChangeHistory_Response_ChangeLog::Swap(CPublishedFile_GetChangeHistory_Response_ChangeLog* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPublishedFile_GetChangeHistory_Response_ChangeLog::InternalSwap(CPublishedFile_GetChangeHistory_Response_ChangeLog* other) {
  change_description_.Swap(&other->change_description_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(language_, other->language_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CPublishedFile_GetChangeHistory_Response_ChangeLog::GetMetadata() const {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CPublishedFile_GetChangeHistory_Response_ChangeLog

// optional uint32 timestamp = 1;
bool CPublishedFile_GetChangeHistory_Response_ChangeLog::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CPublishedFile_GetChangeHistory_Response_ChangeLog::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
void CPublishedFile_GetChangeHistory_Response_ChangeLog::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
void CPublishedFile_GetChangeHistory_Response_ChangeLog::clear_timestamp() {
  timestamp_ = 0u;
  clear_has_timestamp();
}
::google::protobuf::uint32 CPublishedFile_GetChangeHistory_Response_ChangeLog::timestamp() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_GetChangeHistory_Response.ChangeLog.timestamp)
  return timestamp_;
}
void CPublishedFile_GetChangeHistory_Response_ChangeLog::set_timestamp(::google::protobuf::uint32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_GetChangeHistory_Response.ChangeLog.timestamp)
}

// optional string change_description = 2;
bool CPublishedFile_GetChangeHistory_Response_ChangeLog::has_change_description() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CPublishedFile_GetChangeHistory_Response_ChangeLog::set_has_change_description() {
  _has_bits_[0] |= 0x00000001u;
}
void CPublishedFile_GetChangeHistory_Response_ChangeLog::clear_has_change_description() {
  _has_bits_[0] &= ~0x00000001u;
}
void CPublishedFile_GetChangeHistory_Response_ChangeLog::clear_change_description() {
  change_description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_change_description();
}
const ::std::string& CPublishedFile_GetChangeHistory_Response_ChangeLog::change_description() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_GetChangeHistory_Response.ChangeLog.change_description)
  return change_description_.GetNoArena();
}
void CPublishedFile_GetChangeHistory_Response_ChangeLog::set_change_description(const ::std::string& value) {
  set_has_change_description();
  change_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_GetChangeHistory_Response.ChangeLog.change_description)
}
#if LANG_CXX11
void CPublishedFile_GetChangeHistory_Response_ChangeLog::set_change_description(::std::string&& value) {
  set_has_change_description();
  change_description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CPublishedFile_GetChangeHistory_Response.ChangeLog.change_description)
}
#endif
void CPublishedFile_GetChangeHistory_Response_ChangeLog::set_change_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_change_description();
  change_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CPublishedFile_GetChangeHistory_Response.ChangeLog.change_description)
}
void CPublishedFile_GetChangeHistory_Response_ChangeLog::set_change_description(const char* value, size_t size) {
  set_has_change_description();
  change_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CPublishedFile_GetChangeHistory_Response.ChangeLog.change_description)
}
::std::string* CPublishedFile_GetChangeHistory_Response_ChangeLog::mutable_change_description() {
  set_has_change_description();
  // @@protoc_insertion_point(field_mutable:proto.steam.CPublishedFile_GetChangeHistory_Response.ChangeLog.change_description)
  return change_description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CPublishedFile_GetChangeHistory_Response_ChangeLog::release_change_description() {
  // @@protoc_insertion_point(field_release:proto.steam.CPublishedFile_GetChangeHistory_Response.ChangeLog.change_description)
  clear_has_change_description();
  return change_description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CPublishedFile_GetChangeHistory_Response_ChangeLog::set_allocated_change_description(::std::string* change_description) {
  if (change_description != NULL) {
    set_has_change_description();
  } else {
    clear_has_change_description();
  }
  change_description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), change_description);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CPublishedFile_GetChangeHistory_Response.ChangeLog.change_description)
}

// optional int32 language = 3;
bool CPublishedFile_GetChangeHistory_Response_ChangeLog::has_language() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CPublishedFile_GetChangeHistory_Response_ChangeLog::set_has_language() {
  _has_bits_[0] |= 0x00000004u;
}
void CPublishedFile_GetChangeHistory_Response_ChangeLog::clear_has_language() {
  _has_bits_[0] &= ~0x00000004u;
}
void CPublishedFile_GetChangeHistory_Response_ChangeLog::clear_language() {
  language_ = 0;
  clear_has_language();
}
::google::protobuf::int32 CPublishedFile_GetChangeHistory_Response_ChangeLog::language() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_GetChangeHistory_Response.ChangeLog.language)
  return language_;
}
void CPublishedFile_GetChangeHistory_Response_ChangeLog::set_language(::google::protobuf::int32 value) {
  set_has_language();
  language_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_GetChangeHistory_Response.ChangeLog.language)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPublishedFile_GetChangeHistory_Response::kChangesFieldNumber;
const int CPublishedFile_GetChangeHistory_Response::kTotalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPublishedFile_GetChangeHistory_Response::CPublishedFile_GetChangeHistory_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPublishedFile_GetChangeHistory_Response)
}
CPublishedFile_GetChangeHistory_Response::CPublishedFile_GetChangeHistory_Response(const CPublishedFile_GetChangeHistory_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      changes_(from.changes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  total_ = from.total_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPublishedFile_GetChangeHistory_Response)
}

void CPublishedFile_GetChangeHistory_Response::SharedCtor() {
  _cached_size_ = 0;
  total_ = 0u;
}

CPublishedFile_GetChangeHistory_Response::~CPublishedFile_GetChangeHistory_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CPublishedFile_GetChangeHistory_Response)
  SharedDtor();
}

void CPublishedFile_GetChangeHistory_Response::SharedDtor() {
}

void CPublishedFile_GetChangeHistory_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPublishedFile_GetChangeHistory_Response::descriptor() {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CPublishedFile_GetChangeHistory_Response& CPublishedFile_GetChangeHistory_Response::default_instance() {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CPublishedFile_GetChangeHistory_Response* CPublishedFile_GetChangeHistory_Response::New(::google::protobuf::Arena* arena) const {
  CPublishedFile_GetChangeHistory_Response* n = new CPublishedFile_GetChangeHistory_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CPublishedFile_GetChangeHistory_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPublishedFile_GetChangeHistory_Response)
  changes_.Clear();
  total_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CPublishedFile_GetChangeHistory_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPublishedFile_GetChangeHistory_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.steam.CPublishedFile_GetChangeHistory_Response.ChangeLog changes = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_changes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 total = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_total();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPublishedFile_GetChangeHistory_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPublishedFile_GetChangeHistory_Response)
  return false;
#undef DO_
}

void CPublishedFile_GetChangeHistory_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPublishedFile_GetChangeHistory_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CPublishedFile_GetChangeHistory_Response.ChangeLog changes = 1;
  for (unsigned int i = 0, n = this->changes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->changes(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 total = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->total(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPublishedFile_GetChangeHistory_Response)
}

::google::protobuf::uint8* CPublishedFile_GetChangeHistory_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPublishedFile_GetChangeHistory_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CPublishedFile_GetChangeHistory_Response.ChangeLog changes = 1;
  for (unsigned int i = 0, n = this->changes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->changes(i), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 total = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->total(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPublishedFile_GetChangeHistory_Response)
  return target;
}

size_t CPublishedFile_GetChangeHistory_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPublishedFile_GetChangeHistory_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.steam.CPublishedFile_GetChangeHistory_Response.ChangeLog changes = 1;
  {
    unsigned int count = this->changes_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->changes(i));
    }
  }

  // optional uint32 total = 2;
  if (has_total()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->total());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPublishedFile_GetChangeHistory_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPublishedFile_GetChangeHistory_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CPublishedFile_GetChangeHistory_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CPublishedFile_GetChangeHistory_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPublishedFile_GetChangeHistory_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPublishedFile_GetChangeHistory_Response)
    MergeFrom(*source);
  }
}

void CPublishedFile_GetChangeHistory_Response::MergeFrom(const CPublishedFile_GetChangeHistory_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPublishedFile_GetChangeHistory_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  changes_.MergeFrom(from.changes_);
  if (from.has_total()) {
    set_total(from.total());
  }
}

void CPublishedFile_GetChangeHistory_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPublishedFile_GetChangeHistory_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPublishedFile_GetChangeHistory_Response::CopyFrom(const CPublishedFile_GetChangeHistory_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPublishedFile_GetChangeHistory_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_GetChangeHistory_Response::IsInitialized() const {
  return true;
}

void CPublishedFile_GetChangeHistory_Response::Swap(CPublishedFile_GetChangeHistory_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPublishedFile_GetChangeHistory_Response::InternalSwap(CPublishedFile_GetChangeHistory_Response* other) {
  changes_.InternalSwap(&other->changes_);
  std::swap(total_, other->total_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CPublishedFile_GetChangeHistory_Response::GetMetadata() const {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CPublishedFile_GetChangeHistory_Response

// repeated .proto.steam.CPublishedFile_GetChangeHistory_Response.ChangeLog changes = 1;
int CPublishedFile_GetChangeHistory_Response::changes_size() const {
  return changes_.size();
}
void CPublishedFile_GetChangeHistory_Response::clear_changes() {
  changes_.Clear();
}
const ::proto::steam::CPublishedFile_GetChangeHistory_Response_ChangeLog& CPublishedFile_GetChangeHistory_Response::changes(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_GetChangeHistory_Response.changes)
  return changes_.Get(index);
}
::proto::steam::CPublishedFile_GetChangeHistory_Response_ChangeLog* CPublishedFile_GetChangeHistory_Response::mutable_changes(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CPublishedFile_GetChangeHistory_Response.changes)
  return changes_.Mutable(index);
}
::proto::steam::CPublishedFile_GetChangeHistory_Response_ChangeLog* CPublishedFile_GetChangeHistory_Response::add_changes() {
  // @@protoc_insertion_point(field_add:proto.steam.CPublishedFile_GetChangeHistory_Response.changes)
  return changes_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::CPublishedFile_GetChangeHistory_Response_ChangeLog >*
CPublishedFile_GetChangeHistory_Response::mutable_changes() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CPublishedFile_GetChangeHistory_Response.changes)
  return &changes_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::CPublishedFile_GetChangeHistory_Response_ChangeLog >&
CPublishedFile_GetChangeHistory_Response::changes() const {
  // @@protoc_insertion_point(field_list:proto.steam.CPublishedFile_GetChangeHistory_Response.changes)
  return changes_;
}

// optional uint32 total = 2;
bool CPublishedFile_GetChangeHistory_Response::has_total() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CPublishedFile_GetChangeHistory_Response::set_has_total() {
  _has_bits_[0] |= 0x00000001u;
}
void CPublishedFile_GetChangeHistory_Response::clear_has_total() {
  _has_bits_[0] &= ~0x00000001u;
}
void CPublishedFile_GetChangeHistory_Response::clear_total() {
  total_ = 0u;
  clear_has_total();
}
::google::protobuf::uint32 CPublishedFile_GetChangeHistory_Response::total() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_GetChangeHistory_Response.total)
  return total_;
}
void CPublishedFile_GetChangeHistory_Response::set_total(::google::protobuf::uint32 value) {
  set_has_total();
  total_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_GetChangeHistory_Response.total)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPublishedFile_RefreshVotingQueue_Request::kAppidFieldNumber;
const int CPublishedFile_RefreshVotingQueue_Request::kMatchingFileTypeFieldNumber;
const int CPublishedFile_RefreshVotingQueue_Request::kTagsFieldNumber;
const int CPublishedFile_RefreshVotingQueue_Request::kMatchAllTagsFieldNumber;
const int CPublishedFile_RefreshVotingQueue_Request::kExcludedTagsFieldNumber;
const int CPublishedFile_RefreshVotingQueue_Request::kDesiredQueueSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPublishedFile_RefreshVotingQueue_Request::CPublishedFile_RefreshVotingQueue_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPublishedFile_RefreshVotingQueue_Request)
}
CPublishedFile_RefreshVotingQueue_Request::CPublishedFile_RefreshVotingQueue_Request(const CPublishedFile_RefreshVotingQueue_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      tags_(from.tags_),
      excluded_tags_(from.excluded_tags_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&appid_, &from.appid_,
    reinterpret_cast<char*>(&match_all_tags_) -
    reinterpret_cast<char*>(&appid_) + sizeof(match_all_tags_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPublishedFile_RefreshVotingQueue_Request)
}

void CPublishedFile_RefreshVotingQueue_Request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&appid_, 0, reinterpret_cast<char*>(&desired_queue_size_) -
    reinterpret_cast<char*>(&appid_) + sizeof(desired_queue_size_));
  match_all_tags_ = true;
}

CPublishedFile_RefreshVotingQueue_Request::~CPublishedFile_RefreshVotingQueue_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CPublishedFile_RefreshVotingQueue_Request)
  SharedDtor();
}

void CPublishedFile_RefreshVotingQueue_Request::SharedDtor() {
}

void CPublishedFile_RefreshVotingQueue_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPublishedFile_RefreshVotingQueue_Request::descriptor() {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CPublishedFile_RefreshVotingQueue_Request& CPublishedFile_RefreshVotingQueue_Request::default_instance() {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CPublishedFile_RefreshVotingQueue_Request* CPublishedFile_RefreshVotingQueue_Request::New(::google::protobuf::Arena* arena) const {
  CPublishedFile_RefreshVotingQueue_Request* n = new CPublishedFile_RefreshVotingQueue_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CPublishedFile_RefreshVotingQueue_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPublishedFile_RefreshVotingQueue_Request)
  tags_.Clear();
  excluded_tags_.Clear();
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&appid_, 0, reinterpret_cast<char*>(&desired_queue_size_) -
      reinterpret_cast<char*>(&appid_) + sizeof(desired_queue_size_));
    match_all_tags_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CPublishedFile_RefreshVotingQueue_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPublishedFile_RefreshVotingQueue_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 matching_file_type = 2 [(.proto.steam.description) = "EPublishedFileInfoMatchingFileType"];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_matching_file_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matching_file_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string tags = 3 [(.proto.steam.description) = "Include files that have all the tags or any of the tags if match_all_tags is set to false."];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tags()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tags(this->tags_size() - 1).data(),
            this->tags(this->tags_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CPublishedFile_RefreshVotingQueue_Request.tags");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool match_all_tags = 4 [default = true, (.proto.steam.description) = "If true, then files must have all the tags specified.  If false, then must have at least one of the tags specified."];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_match_all_tags();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &match_all_tags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string excluded_tags = 5 [(.proto.steam.description) = "Exclude any files that have any of these tags."];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_excluded_tags()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->excluded_tags(this->excluded_tags_size() - 1).data(),
            this->excluded_tags(this->excluded_tags_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CPublishedFile_RefreshVotingQueue_Request.excluded_tags");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 desired_queue_size = 6 [(.proto.steam.description) = "Desired number of items in the voting queue.  May be clamped by the server"];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_desired_queue_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &desired_queue_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPublishedFile_RefreshVotingQueue_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPublishedFile_RefreshVotingQueue_Request)
  return false;
#undef DO_
}

void CPublishedFile_RefreshVotingQueue_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPublishedFile_RefreshVotingQueue_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // optional uint32 matching_file_type = 2 [(.proto.steam.description) = "EPublishedFileInfoMatchingFileType"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->matching_file_type(), output);
  }

  // repeated string tags = 3 [(.proto.steam.description) = "Include files that have all the tags or any of the tags if match_all_tags is set to false."];
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tags(i).data(), this->tags(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPublishedFile_RefreshVotingQueue_Request.tags");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->tags(i), output);
  }

  // optional bool match_all_tags = 4 [default = true, (.proto.steam.description) = "If true, then files must have all the tags specified.  If false, then must have at least one of the tags specified."];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->match_all_tags(), output);
  }

  // repeated string excluded_tags = 5 [(.proto.steam.description) = "Exclude any files that have any of these tags."];
  for (int i = 0, n = this->excluded_tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->excluded_tags(i).data(), this->excluded_tags(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPublishedFile_RefreshVotingQueue_Request.excluded_tags");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->excluded_tags(i), output);
  }

  // optional uint32 desired_queue_size = 6 [(.proto.steam.description) = "Desired number of items in the voting queue.  May be clamped by the server"];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->desired_queue_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPublishedFile_RefreshVotingQueue_Request)
}

::google::protobuf::uint8* CPublishedFile_RefreshVotingQueue_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPublishedFile_RefreshVotingQueue_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // optional uint32 matching_file_type = 2 [(.proto.steam.description) = "EPublishedFileInfoMatchingFileType"];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->matching_file_type(), target);
  }

  // repeated string tags = 3 [(.proto.steam.description) = "Include files that have all the tags or any of the tags if match_all_tags is set to false."];
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tags(i).data(), this->tags(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPublishedFile_RefreshVotingQueue_Request.tags");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->tags(i), target);
  }

  // optional bool match_all_tags = 4 [default = true, (.proto.steam.description) = "If true, then files must have all the tags specified.  If false, then must have at least one of the tags specified."];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->match_all_tags(), target);
  }

  // repeated string excluded_tags = 5 [(.proto.steam.description) = "Exclude any files that have any of these tags."];
  for (int i = 0, n = this->excluded_tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->excluded_tags(i).data(), this->excluded_tags(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPublishedFile_RefreshVotingQueue_Request.excluded_tags");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->excluded_tags(i), target);
  }

  // optional uint32 desired_queue_size = 6 [(.proto.steam.description) = "Desired number of items in the voting queue.  May be clamped by the server"];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->desired_queue_size(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPublishedFile_RefreshVotingQueue_Request)
  return target;
}

size_t CPublishedFile_RefreshVotingQueue_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPublishedFile_RefreshVotingQueue_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated string tags = 3 [(.proto.steam.description) = "Include files that have all the tags or any of the tags if match_all_tags is set to false."];
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->tags_size());
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tags(i));
  }

  // repeated string excluded_tags = 5 [(.proto.steam.description) = "Exclude any files that have any of these tags."];
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->excluded_tags_size());
  for (int i = 0, n = this->excluded_tags_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->excluded_tags(i));
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional uint32 appid = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional uint32 matching_file_type = 2 [(.proto.steam.description) = "EPublishedFileInfoMatchingFileType"];
    if (has_matching_file_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matching_file_type());
    }

    // optional uint32 desired_queue_size = 6 [(.proto.steam.description) = "Desired number of items in the voting queue.  May be clamped by the server"];
    if (has_desired_queue_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->desired_queue_size());
    }

    // optional bool match_all_tags = 4 [default = true, (.proto.steam.description) = "If true, then files must have all the tags specified.  If false, then must have at least one of the tags specified."];
    if (has_match_all_tags()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPublishedFile_RefreshVotingQueue_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPublishedFile_RefreshVotingQueue_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CPublishedFile_RefreshVotingQueue_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CPublishedFile_RefreshVotingQueue_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPublishedFile_RefreshVotingQueue_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPublishedFile_RefreshVotingQueue_Request)
    MergeFrom(*source);
  }
}

void CPublishedFile_RefreshVotingQueue_Request::MergeFrom(const CPublishedFile_RefreshVotingQueue_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPublishedFile_RefreshVotingQueue_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  excluded_tags_.MergeFrom(from.excluded_tags_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000002u) {
      matching_file_type_ = from.matching_file_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      desired_queue_size_ = from.desired_queue_size_;
    }
    if (cached_has_bits & 0x00000008u) {
      match_all_tags_ = from.match_all_tags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CPublishedFile_RefreshVotingQueue_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPublishedFile_RefreshVotingQueue_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPublishedFile_RefreshVotingQueue_Request::CopyFrom(const CPublishedFile_RefreshVotingQueue_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPublishedFile_RefreshVotingQueue_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_RefreshVotingQueue_Request::IsInitialized() const {
  return true;
}

void CPublishedFile_RefreshVotingQueue_Request::Swap(CPublishedFile_RefreshVotingQueue_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPublishedFile_RefreshVotingQueue_Request::InternalSwap(CPublishedFile_RefreshVotingQueue_Request* other) {
  tags_.InternalSwap(&other->tags_);
  excluded_tags_.InternalSwap(&other->excluded_tags_);
  std::swap(appid_, other->appid_);
  std::swap(matching_file_type_, other->matching_file_type_);
  std::swap(desired_queue_size_, other->desired_queue_size_);
  std::swap(match_all_tags_, other->match_all_tags_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CPublishedFile_RefreshVotingQueue_Request::GetMetadata() const {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CPublishedFile_RefreshVotingQueue_Request

// optional uint32 appid = 1;
bool CPublishedFile_RefreshVotingQueue_Request::has_appid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CPublishedFile_RefreshVotingQueue_Request::set_has_appid() {
  _has_bits_[0] |= 0x00000001u;
}
void CPublishedFile_RefreshVotingQueue_Request::clear_has_appid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CPublishedFile_RefreshVotingQueue_Request::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
::google::protobuf::uint32 CPublishedFile_RefreshVotingQueue_Request::appid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_RefreshVotingQueue_Request.appid)
  return appid_;
}
void CPublishedFile_RefreshVotingQueue_Request::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_RefreshVotingQueue_Request.appid)
}

// optional uint32 matching_file_type = 2 [(.proto.steam.description) = "EPublishedFileInfoMatchingFileType"];
bool CPublishedFile_RefreshVotingQueue_Request::has_matching_file_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CPublishedFile_RefreshVotingQueue_Request::set_has_matching_file_type() {
  _has_bits_[0] |= 0x00000002u;
}
void CPublishedFile_RefreshVotingQueue_Request::clear_has_matching_file_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void CPublishedFile_RefreshVotingQueue_Request::clear_matching_file_type() {
  matching_file_type_ = 0u;
  clear_has_matching_file_type();
}
::google::protobuf::uint32 CPublishedFile_RefreshVotingQueue_Request::matching_file_type() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_RefreshVotingQueue_Request.matching_file_type)
  return matching_file_type_;
}
void CPublishedFile_RefreshVotingQueue_Request::set_matching_file_type(::google::protobuf::uint32 value) {
  set_has_matching_file_type();
  matching_file_type_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_RefreshVotingQueue_Request.matching_file_type)
}

// repeated string tags = 3 [(.proto.steam.description) = "Include files that have all the tags or any of the tags if match_all_tags is set to false."];
int CPublishedFile_RefreshVotingQueue_Request::tags_size() const {
  return tags_.size();
}
void CPublishedFile_RefreshVotingQueue_Request::clear_tags() {
  tags_.Clear();
}
const ::std::string& CPublishedFile_RefreshVotingQueue_Request::tags(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_RefreshVotingQueue_Request.tags)
  return tags_.Get(index);
}
::std::string* CPublishedFile_RefreshVotingQueue_Request::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CPublishedFile_RefreshVotingQueue_Request.tags)
  return tags_.Mutable(index);
}
void CPublishedFile_RefreshVotingQueue_Request::set_tags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_RefreshVotingQueue_Request.tags)
  tags_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void CPublishedFile_RefreshVotingQueue_Request::set_tags(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_RefreshVotingQueue_Request.tags)
  tags_.Mutable(index)->assign(std::move(value));
}
#endif
void CPublishedFile_RefreshVotingQueue_Request::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.steam.CPublishedFile_RefreshVotingQueue_Request.tags)
}
void CPublishedFile_RefreshVotingQueue_Request::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CPublishedFile_RefreshVotingQueue_Request.tags)
}
::std::string* CPublishedFile_RefreshVotingQueue_Request::add_tags() {
  // @@protoc_insertion_point(field_add_mutable:proto.steam.CPublishedFile_RefreshVotingQueue_Request.tags)
  return tags_.Add();
}
void CPublishedFile_RefreshVotingQueue_Request::add_tags(const ::std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto.steam.CPublishedFile_RefreshVotingQueue_Request.tags)
}
#if LANG_CXX11
void CPublishedFile_RefreshVotingQueue_Request::add_tags(::std::string&& value) {
  tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:proto.steam.CPublishedFile_RefreshVotingQueue_Request.tags)
}
#endif
void CPublishedFile_RefreshVotingQueue_Request::add_tags(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto.steam.CPublishedFile_RefreshVotingQueue_Request.tags)
}
void CPublishedFile_RefreshVotingQueue_Request::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto.steam.CPublishedFile_RefreshVotingQueue_Request.tags)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
CPublishedFile_RefreshVotingQueue_Request::tags() const {
  // @@protoc_insertion_point(field_list:proto.steam.CPublishedFile_RefreshVotingQueue_Request.tags)
  return tags_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
CPublishedFile_RefreshVotingQueue_Request::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CPublishedFile_RefreshVotingQueue_Request.tags)
  return &tags_;
}

// optional bool match_all_tags = 4 [default = true, (.proto.steam.description) = "If true, then files must have all the tags specified.  If false, then must have at least one of the tags specified."];
bool CPublishedFile_RefreshVotingQueue_Request::has_match_all_tags() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CPublishedFile_RefreshVotingQueue_Request::set_has_match_all_tags() {
  _has_bits_[0] |= 0x00000008u;
}
void CPublishedFile_RefreshVotingQueue_Request::clear_has_match_all_tags() {
  _has_bits_[0] &= ~0x00000008u;
}
void CPublishedFile_RefreshVotingQueue_Request::clear_match_all_tags() {
  match_all_tags_ = true;
  clear_has_match_all_tags();
}
bool CPublishedFile_RefreshVotingQueue_Request::match_all_tags() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_RefreshVotingQueue_Request.match_all_tags)
  return match_all_tags_;
}
void CPublishedFile_RefreshVotingQueue_Request::set_match_all_tags(bool value) {
  set_has_match_all_tags();
  match_all_tags_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_RefreshVotingQueue_Request.match_all_tags)
}

// repeated string excluded_tags = 5 [(.proto.steam.description) = "Exclude any files that have any of these tags."];
int CPublishedFile_RefreshVotingQueue_Request::excluded_tags_size() const {
  return excluded_tags_.size();
}
void CPublishedFile_RefreshVotingQueue_Request::clear_excluded_tags() {
  excluded_tags_.Clear();
}
const ::std::string& CPublishedFile_RefreshVotingQueue_Request::excluded_tags(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_RefreshVotingQueue_Request.excluded_tags)
  return excluded_tags_.Get(index);
}
::std::string* CPublishedFile_RefreshVotingQueue_Request::mutable_excluded_tags(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CPublishedFile_RefreshVotingQueue_Request.excluded_tags)
  return excluded_tags_.Mutable(index);
}
void CPublishedFile_RefreshVotingQueue_Request::set_excluded_tags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_RefreshVotingQueue_Request.excluded_tags)
  excluded_tags_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void CPublishedFile_RefreshVotingQueue_Request::set_excluded_tags(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_RefreshVotingQueue_Request.excluded_tags)
  excluded_tags_.Mutable(index)->assign(std::move(value));
}
#endif
void CPublishedFile_RefreshVotingQueue_Request::set_excluded_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  excluded_tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.steam.CPublishedFile_RefreshVotingQueue_Request.excluded_tags)
}
void CPublishedFile_RefreshVotingQueue_Request::set_excluded_tags(int index, const char* value, size_t size) {
  excluded_tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CPublishedFile_RefreshVotingQueue_Request.excluded_tags)
}
::std::string* CPublishedFile_RefreshVotingQueue_Request::add_excluded_tags() {
  // @@protoc_insertion_point(field_add_mutable:proto.steam.CPublishedFile_RefreshVotingQueue_Request.excluded_tags)
  return excluded_tags_.Add();
}
void CPublishedFile_RefreshVotingQueue_Request::add_excluded_tags(const ::std::string& value) {
  excluded_tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto.steam.CPublishedFile_RefreshVotingQueue_Request.excluded_tags)
}
#if LANG_CXX11
void CPublishedFile_RefreshVotingQueue_Request::add_excluded_tags(::std::string&& value) {
  excluded_tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:proto.steam.CPublishedFile_RefreshVotingQueue_Request.excluded_tags)
}
#endif
void CPublishedFile_RefreshVotingQueue_Request::add_excluded_tags(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  excluded_tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto.steam.CPublishedFile_RefreshVotingQueue_Request.excluded_tags)
}
void CPublishedFile_RefreshVotingQueue_Request::add_excluded_tags(const char* value, size_t size) {
  excluded_tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto.steam.CPublishedFile_RefreshVotingQueue_Request.excluded_tags)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
CPublishedFile_RefreshVotingQueue_Request::excluded_tags() const {
  // @@protoc_insertion_point(field_list:proto.steam.CPublishedFile_RefreshVotingQueue_Request.excluded_tags)
  return excluded_tags_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
CPublishedFile_RefreshVotingQueue_Request::mutable_excluded_tags() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CPublishedFile_RefreshVotingQueue_Request.excluded_tags)
  return &excluded_tags_;
}

// optional uint32 desired_queue_size = 6 [(.proto.steam.description) = "Desired number of items in the voting queue.  May be clamped by the server"];
bool CPublishedFile_RefreshVotingQueue_Request::has_desired_queue_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CPublishedFile_RefreshVotingQueue_Request::set_has_desired_queue_size() {
  _has_bits_[0] |= 0x00000004u;
}
void CPublishedFile_RefreshVotingQueue_Request::clear_has_desired_queue_size() {
  _has_bits_[0] &= ~0x00000004u;
}
void CPublishedFile_RefreshVotingQueue_Request::clear_desired_queue_size() {
  desired_queue_size_ = 0u;
  clear_has_desired_queue_size();
}
::google::protobuf::uint32 CPublishedFile_RefreshVotingQueue_Request::desired_queue_size() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_RefreshVotingQueue_Request.desired_queue_size)
  return desired_queue_size_;
}
void CPublishedFile_RefreshVotingQueue_Request::set_desired_queue_size(::google::protobuf::uint32 value) {
  set_has_desired_queue_size();
  desired_queue_size_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_RefreshVotingQueue_Request.desired_queue_size)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPublishedFile_RefreshVotingQueue_Response::CPublishedFile_RefreshVotingQueue_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPublishedFile_RefreshVotingQueue_Response)
}
CPublishedFile_RefreshVotingQueue_Response::CPublishedFile_RefreshVotingQueue_Response(const CPublishedFile_RefreshVotingQueue_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPublishedFile_RefreshVotingQueue_Response)
}

void CPublishedFile_RefreshVotingQueue_Response::SharedCtor() {
  _cached_size_ = 0;
}

CPublishedFile_RefreshVotingQueue_Response::~CPublishedFile_RefreshVotingQueue_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CPublishedFile_RefreshVotingQueue_Response)
  SharedDtor();
}

void CPublishedFile_RefreshVotingQueue_Response::SharedDtor() {
}

void CPublishedFile_RefreshVotingQueue_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPublishedFile_RefreshVotingQueue_Response::descriptor() {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CPublishedFile_RefreshVotingQueue_Response& CPublishedFile_RefreshVotingQueue_Response::default_instance() {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CPublishedFile_RefreshVotingQueue_Response* CPublishedFile_RefreshVotingQueue_Response::New(::google::protobuf::Arena* arena) const {
  CPublishedFile_RefreshVotingQueue_Response* n = new CPublishedFile_RefreshVotingQueue_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CPublishedFile_RefreshVotingQueue_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPublishedFile_RefreshVotingQueue_Response)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CPublishedFile_RefreshVotingQueue_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPublishedFile_RefreshVotingQueue_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPublishedFile_RefreshVotingQueue_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPublishedFile_RefreshVotingQueue_Response)
  return false;
#undef DO_
}

void CPublishedFile_RefreshVotingQueue_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPublishedFile_RefreshVotingQueue_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPublishedFile_RefreshVotingQueue_Response)
}

::google::protobuf::uint8* CPublishedFile_RefreshVotingQueue_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPublishedFile_RefreshVotingQueue_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPublishedFile_RefreshVotingQueue_Response)
  return target;
}

size_t CPublishedFile_RefreshVotingQueue_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPublishedFile_RefreshVotingQueue_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPublishedFile_RefreshVotingQueue_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPublishedFile_RefreshVotingQueue_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CPublishedFile_RefreshVotingQueue_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CPublishedFile_RefreshVotingQueue_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPublishedFile_RefreshVotingQueue_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPublishedFile_RefreshVotingQueue_Response)
    MergeFrom(*source);
  }
}

void CPublishedFile_RefreshVotingQueue_Response::MergeFrom(const CPublishedFile_RefreshVotingQueue_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPublishedFile_RefreshVotingQueue_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CPublishedFile_RefreshVotingQueue_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPublishedFile_RefreshVotingQueue_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPublishedFile_RefreshVotingQueue_Response::CopyFrom(const CPublishedFile_RefreshVotingQueue_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPublishedFile_RefreshVotingQueue_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_RefreshVotingQueue_Response::IsInitialized() const {
  return true;
}

void CPublishedFile_RefreshVotingQueue_Response::Swap(CPublishedFile_RefreshVotingQueue_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPublishedFile_RefreshVotingQueue_Response::InternalSwap(CPublishedFile_RefreshVotingQueue_Response* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CPublishedFile_RefreshVotingQueue_Response::GetMetadata() const {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CPublishedFile_RefreshVotingQueue_Response

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPublishedFile_QueryFiles_Request_KVTag::kKeyFieldNumber;
const int CPublishedFile_QueryFiles_Request_KVTag::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPublishedFile_QueryFiles_Request_KVTag::CPublishedFile_QueryFiles_Request_KVTag()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPublishedFile_QueryFiles_Request.KVTag)
}
CPublishedFile_QueryFiles_Request_KVTag::CPublishedFile_QueryFiles_Request_KVTag(const CPublishedFile_QueryFiles_Request_KVTag& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_key()) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPublishedFile_QueryFiles_Request.KVTag)
}

void CPublishedFile_QueryFiles_Request_KVTag::SharedCtor() {
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CPublishedFile_QueryFiles_Request_KVTag::~CPublishedFile_QueryFiles_Request_KVTag() {
  // @@protoc_insertion_point(destructor:proto.steam.CPublishedFile_QueryFiles_Request.KVTag)
  SharedDtor();
}

void CPublishedFile_QueryFiles_Request_KVTag::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CPublishedFile_QueryFiles_Request_KVTag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPublishedFile_QueryFiles_Request_KVTag::descriptor() {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CPublishedFile_QueryFiles_Request_KVTag& CPublishedFile_QueryFiles_Request_KVTag::default_instance() {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CPublishedFile_QueryFiles_Request_KVTag* CPublishedFile_QueryFiles_Request_KVTag::New(::google::protobuf::Arena* arena) const {
  CPublishedFile_QueryFiles_Request_KVTag* n = new CPublishedFile_QueryFiles_Request_KVTag;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CPublishedFile_QueryFiles_Request_KVTag::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPublishedFile_QueryFiles_Request.KVTag)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_key()) {
      GOOGLE_DCHECK(!key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*key_.UnsafeRawStringPointer())->clear();
    }
    if (has_value()) {
      GOOGLE_DCHECK(!value_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*value_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CPublishedFile_QueryFiles_Request_KVTag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPublishedFile_QueryFiles_Request.KVTag)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CPublishedFile_QueryFiles_Request.KVTag.key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CPublishedFile_QueryFiles_Request.KVTag.value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPublishedFile_QueryFiles_Request.KVTag)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPublishedFile_QueryFiles_Request.KVTag)
  return false;
#undef DO_
}

void CPublishedFile_QueryFiles_Request_KVTag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPublishedFile_QueryFiles_Request.KVTag)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPublishedFile_QueryFiles_Request.KVTag.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPublishedFile_QueryFiles_Request.KVTag.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPublishedFile_QueryFiles_Request.KVTag)
}

::google::protobuf::uint8* CPublishedFile_QueryFiles_Request_KVTag::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPublishedFile_QueryFiles_Request.KVTag)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPublishedFile_QueryFiles_Request.KVTag.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPublishedFile_QueryFiles_Request.KVTag.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPublishedFile_QueryFiles_Request.KVTag)
  return target;
}

size_t CPublishedFile_QueryFiles_Request_KVTag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPublishedFile_QueryFiles_Request.KVTag)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPublishedFile_QueryFiles_Request_KVTag::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPublishedFile_QueryFiles_Request.KVTag)
  GOOGLE_DCHECK_NE(&from, this);
  const CPublishedFile_QueryFiles_Request_KVTag* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CPublishedFile_QueryFiles_Request_KVTag>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPublishedFile_QueryFiles_Request.KVTag)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPublishedFile_QueryFiles_Request.KVTag)
    MergeFrom(*source);
  }
}

void CPublishedFile_QueryFiles_Request_KVTag::MergeFrom(const CPublishedFile_QueryFiles_Request_KVTag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPublishedFile_QueryFiles_Request.KVTag)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
}

void CPublishedFile_QueryFiles_Request_KVTag::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPublishedFile_QueryFiles_Request.KVTag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPublishedFile_QueryFiles_Request_KVTag::CopyFrom(const CPublishedFile_QueryFiles_Request_KVTag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPublishedFile_QueryFiles_Request.KVTag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_QueryFiles_Request_KVTag::IsInitialized() const {
  return true;
}

void CPublishedFile_QueryFiles_Request_KVTag::Swap(CPublishedFile_QueryFiles_Request_KVTag* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPublishedFile_QueryFiles_Request_KVTag::InternalSwap(CPublishedFile_QueryFiles_Request_KVTag* other) {
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CPublishedFile_QueryFiles_Request_KVTag::GetMetadata() const {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CPublishedFile_QueryFiles_Request_KVTag

// optional string key = 1;
bool CPublishedFile_QueryFiles_Request_KVTag::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CPublishedFile_QueryFiles_Request_KVTag::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void CPublishedFile_QueryFiles_Request_KVTag::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void CPublishedFile_QueryFiles_Request_KVTag::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
const ::std::string& CPublishedFile_QueryFiles_Request_KVTag::key() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_QueryFiles_Request.KVTag.key)
  return key_.GetNoArena();
}
void CPublishedFile_QueryFiles_Request_KVTag::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_QueryFiles_Request.KVTag.key)
}
#if LANG_CXX11
void CPublishedFile_QueryFiles_Request_KVTag::set_key(::std::string&& value) {
  set_has_key();
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CPublishedFile_QueryFiles_Request.KVTag.key)
}
#endif
void CPublishedFile_QueryFiles_Request_KVTag::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CPublishedFile_QueryFiles_Request.KVTag.key)
}
void CPublishedFile_QueryFiles_Request_KVTag::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CPublishedFile_QueryFiles_Request.KVTag.key)
}
::std::string* CPublishedFile_QueryFiles_Request_KVTag::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:proto.steam.CPublishedFile_QueryFiles_Request.KVTag.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CPublishedFile_QueryFiles_Request_KVTag::release_key() {
  // @@protoc_insertion_point(field_release:proto.steam.CPublishedFile_QueryFiles_Request.KVTag.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CPublishedFile_QueryFiles_Request_KVTag::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CPublishedFile_QueryFiles_Request.KVTag.key)
}

// optional string value = 2;
bool CPublishedFile_QueryFiles_Request_KVTag::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CPublishedFile_QueryFiles_Request_KVTag::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void CPublishedFile_QueryFiles_Request_KVTag::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void CPublishedFile_QueryFiles_Request_KVTag::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
const ::std::string& CPublishedFile_QueryFiles_Request_KVTag::value() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_QueryFiles_Request.KVTag.value)
  return value_.GetNoArena();
}
void CPublishedFile_QueryFiles_Request_KVTag::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_QueryFiles_Request.KVTag.value)
}
#if LANG_CXX11
void CPublishedFile_QueryFiles_Request_KVTag::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CPublishedFile_QueryFiles_Request.KVTag.value)
}
#endif
void CPublishedFile_QueryFiles_Request_KVTag::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CPublishedFile_QueryFiles_Request.KVTag.value)
}
void CPublishedFile_QueryFiles_Request_KVTag::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CPublishedFile_QueryFiles_Request.KVTag.value)
}
::std::string* CPublishedFile_QueryFiles_Request_KVTag::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:proto.steam.CPublishedFile_QueryFiles_Request.KVTag.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CPublishedFile_QueryFiles_Request_KVTag::release_value() {
  // @@protoc_insertion_point(field_release:proto.steam.CPublishedFile_QueryFiles_Request.KVTag.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CPublishedFile_QueryFiles_Request_KVTag::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CPublishedFile_QueryFiles_Request.KVTag.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPublishedFile_QueryFiles_Request::kQueryTypeFieldNumber;
const int CPublishedFile_QueryFiles_Request::kPageFieldNumber;
const int CPublishedFile_QueryFiles_Request::kNumperpageFieldNumber;
const int CPublishedFile_QueryFiles_Request::kCreatorAppidFieldNumber;
const int CPublishedFile_QueryFiles_Request::kAppidFieldNumber;
const int CPublishedFile_QueryFiles_Request::kRequiredtagsFieldNumber;
const int CPublishedFile_QueryFiles_Request::kExcludedtagsFieldNumber;
const int CPublishedFile_QueryFiles_Request::kMatchAllTagsFieldNumber;
const int CPublishedFile_QueryFiles_Request::kRequiredFlagsFieldNumber;
const int CPublishedFile_QueryFiles_Request::kOmittedFlagsFieldNumber;
const int CPublishedFile_QueryFiles_Request::kSearchTextFieldNumber;
const int CPublishedFile_QueryFiles_Request::kFiletypeFieldNumber;
const int CPublishedFile_QueryFiles_Request::kChildPublishedfileidFieldNumber;
const int CPublishedFile_QueryFiles_Request::kDaysFieldNumber;
const int CPublishedFile_QueryFiles_Request::kIncludeRecentVotesOnlyFieldNumber;
const int CPublishedFile_QueryFiles_Request::kCacheMaxAgeSecondsFieldNumber;
const int CPublishedFile_QueryFiles_Request::kLanguageFieldNumber;
const int CPublishedFile_QueryFiles_Request::kRequiredKvTagsFieldNumber;
const int CPublishedFile_QueryFiles_Request::kTotalonlyFieldNumber;
const int CPublishedFile_QueryFiles_Request::kIdsOnlyFieldNumber;
const int CPublishedFile_QueryFiles_Request::kReturnVoteDataFieldNumber;
const int CPublishedFile_QueryFiles_Request::kReturnTagsFieldNumber;
const int CPublishedFile_QueryFiles_Request::kReturnKvTagsFieldNumber;
const int CPublishedFile_QueryFiles_Request::kReturnPreviewsFieldNumber;
const int CPublishedFile_QueryFiles_Request::kReturnChildrenFieldNumber;
const int CPublishedFile_QueryFiles_Request::kReturnShortDescriptionFieldNumber;
const int CPublishedFile_QueryFiles_Request::kReturnForSaleDataFieldNumber;
const int CPublishedFile_QueryFiles_Request::kReturnMetadataFieldNumber;
const int CPublishedFile_QueryFiles_Request::kReturnPlaytimeStatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPublishedFile_QueryFiles_Request::CPublishedFile_QueryFiles_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPublishedFile_QueryFiles_Request)
}
CPublishedFile_QueryFiles_Request::CPublishedFile_QueryFiles_Request(const CPublishedFile_QueryFiles_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      requiredtags_(from.requiredtags_),
      excludedtags_(from.excludedtags_),
      required_flags_(from.required_flags_),
      omitted_flags_(from.omitted_flags_),
      required_kv_tags_(from.required_kv_tags_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  search_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_search_text()) {
    search_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.search_text_);
  }
  ::memcpy(&query_type_, &from.query_type_,
    reinterpret_cast<char*>(&match_all_tags_) -
    reinterpret_cast<char*>(&query_type_) + sizeof(match_all_tags_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPublishedFile_QueryFiles_Request)
}

void CPublishedFile_QueryFiles_Request::SharedCtor() {
  _cached_size_ = 0;
  search_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&query_type_, 0, reinterpret_cast<char*>(&return_playtime_stats_) -
    reinterpret_cast<char*>(&query_type_) + sizeof(return_playtime_stats_));
  numperpage_ = 1u;
  match_all_tags_ = true;
}

CPublishedFile_QueryFiles_Request::~CPublishedFile_QueryFiles_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CPublishedFile_QueryFiles_Request)
  SharedDtor();
}

void CPublishedFile_QueryFiles_Request::SharedDtor() {
  search_text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CPublishedFile_QueryFiles_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPublishedFile_QueryFiles_Request::descriptor() {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CPublishedFile_QueryFiles_Request& CPublishedFile_QueryFiles_Request::default_instance() {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CPublishedFile_QueryFiles_Request* CPublishedFile_QueryFiles_Request::New(::google::protobuf::Arena* arena) const {
  CPublishedFile_QueryFiles_Request* n = new CPublishedFile_QueryFiles_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CPublishedFile_QueryFiles_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPublishedFile_QueryFiles_Request)
  requiredtags_.Clear();
  excludedtags_.Clear();
  required_flags_.Clear();
  omitted_flags_.Clear();
  required_kv_tags_.Clear();
  if (has_search_text()) {
    GOOGLE_DCHECK(!search_text_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*search_text_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 254u) {
    ::memset(&query_type_, 0, reinterpret_cast<char*>(&days_) -
      reinterpret_cast<char*>(&query_type_) + sizeof(days_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&return_tags_, 0, reinterpret_cast<char*>(&return_vote_data_) -
      reinterpret_cast<char*>(&return_tags_) + sizeof(return_vote_data_));
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    ::memset(&return_short_description_, 0, reinterpret_cast<char*>(&return_playtime_stats_) -
      reinterpret_cast<char*>(&return_short_description_) + sizeof(return_playtime_stats_));
    numperpage_ = 1u;
    match_all_tags_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CPublishedFile_QueryFiles_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPublishedFile_QueryFiles_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 query_type = 1 [(.proto.steam.description) = "enumeration EPublishedFileQueryType in clientenums.h"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_query_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &query_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 page = 2 [(.proto.steam.description) = "Current page"];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_page();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &page_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 numperpage = 3 [default = 1, (.proto.steam.description) = "(Optional) The number of results, per page to return."];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_numperpage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &numperpage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 creator_appid = 4 [(.proto.steam.description) = "App that created the files"];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_creator_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &creator_appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 appid = 5 [(.proto.steam.description) = "App that consumes the files"];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string requiredtags = 6 [(.proto.steam.description) = "Tags to match on. See match_all_tags parameter below"];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_requiredtags()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->requiredtags(this->requiredtags_size() - 1).data(),
            this->requiredtags(this->requiredtags_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CPublishedFile_QueryFiles_Request.requiredtags");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string excludedtags = 7 [(.proto.steam.description) = "(Optional) Tags that must NOT be present on a published file to satisfy the query."];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_excludedtags()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->excludedtags(this->excludedtags_size() - 1).data(),
            this->excludedtags(this->excludedtags_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CPublishedFile_QueryFiles_Request.excludedtags");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool match_all_tags = 8 [default = true, (.proto.steam.description) = "If true, then items must have all the tags specified, otherwise they must have at least one of the tags."];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_match_all_tags();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &match_all_tags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string required_flags = 9 [(.proto.steam.description) = "Required flags that must be set on any returned items"];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_required_flags()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->required_flags(this->required_flags_size() - 1).data(),
            this->required_flags(this->required_flags_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CPublishedFile_QueryFiles_Request.required_flags");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string omitted_flags = 10 [(.proto.steam.description) = "Flags that must not be set on any returned items"];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_omitted_flags()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->omitted_flags(this->omitted_flags_size() - 1).data(),
            this->omitted_flags(this->omitted_flags_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CPublishedFile_QueryFiles_Request.omitted_flags");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string search_text = 11 [(.proto.steam.description) = "Text to match in the item\'s title or description"];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_search_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->search_text().data(), this->search_text().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CPublishedFile_QueryFiles_Request.search_text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 filetype = 12 [(.proto.steam.description) = "EPublishedFileInfoMatchingFileType"];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_filetype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &filetype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 child_publishedfileid = 13 [(.proto.steam.description) = "Find all items that reference the given item."];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u)) {
          set_has_child_publishedfileid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &child_publishedfileid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 days = 14 [(.proto.steam.description) = "If query_type is k_PublishedFileQueryType_RankedByTrend, then this is the number of days to get votes for [1,7]."];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_days();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &days_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool include_recent_votes_only = 15 [(.proto.steam.description) = "If query_type is k_PublishedFileQueryType_RankedByTrend, then limit result set just to items that have votes within the day range given"];
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          set_has_include_recent_votes_only();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &include_recent_votes_only_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool totalonly = 16 [(.proto.steam.description) = "(Optional) If true, only return the total number of files that satisfy this query."];
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u)) {
          set_has_totalonly();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &totalonly_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool return_vote_data = 17 [(.proto.steam.description) = "Return vote data"];
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u)) {
          set_has_return_vote_data();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &return_vote_data_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool return_tags = 18 [(.proto.steam.description) = "Return tags in the file details"];
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u)) {
          set_has_return_tags();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &return_tags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool return_kv_tags = 19 [(.proto.steam.description) = "Return key-value tags in the file details"];
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u)) {
          set_has_return_kv_tags();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &return_kv_tags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool return_previews = 20 [(.proto.steam.description) = "Return preview image and video details in the file details"];
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u)) {
          set_has_return_previews();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &return_previews_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool return_children = 21 [(.proto.steam.description) = "Return child item ids in the file details"];
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u)) {
          set_has_return_children();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &return_children_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool return_short_description = 22 [(.proto.steam.description) = "Populate the short_description field instead of file_description"];
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u)) {
          set_has_return_short_description();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &return_short_description_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool return_for_sale_data = 30 [(.proto.steam.description) = "Return pricing information, if applicable"];
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u)) {
          set_has_return_for_sale_data();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &return_for_sale_data_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cache_max_age_seconds = 31 [default = 0, (.proto.steam.description) = "Allow stale data to be returned for the specified number of seconds."];
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u)) {
          set_has_cache_max_age_seconds();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cache_max_age_seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool return_metadata = 32 [default = false, (.proto.steam.description) = "Populate the metadata"];
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(256u)) {
          set_has_return_metadata();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &return_metadata_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 language = 33 [default = 0, (.proto.steam.description) = "Language to search in and also what gets returned. Defaults to English."];
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(264u)) {
          set_has_language();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &language_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CPublishedFile_QueryFiles_Request.KVTag required_kv_tags = 34 [(.proto.steam.description) = "Required key-value tags to match on."];
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(274u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_required_kv_tags()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool ids_only = 35 [(.proto.steam.description) = "(Optional) If true, only return the published file ids of files that satisfy this query."];
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(280u)) {
          set_has_ids_only();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ids_only_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 return_playtime_stats = 36 [(.proto.steam.description) = "Return playtime stats for the specified number of days before today."];
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(288u)) {
          set_has_return_playtime_stats();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &return_playtime_stats_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPublishedFile_QueryFiles_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPublishedFile_QueryFiles_Request)
  return false;
#undef DO_
}

void CPublishedFile_QueryFiles_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPublishedFile_QueryFiles_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 query_type = 1 [(.proto.steam.description) = "enumeration EPublishedFileQueryType in clientenums.h"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->query_type(), output);
  }

  // optional uint32 page = 2 [(.proto.steam.description) = "Current page"];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->page(), output);
  }

  // optional uint32 numperpage = 3 [default = 1, (.proto.steam.description) = "(Optional) The number of results, per page to return."];
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->numperpage(), output);
  }

  // optional uint32 creator_appid = 4 [(.proto.steam.description) = "App that created the files"];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->creator_appid(), output);
  }

  // optional uint32 appid = 5 [(.proto.steam.description) = "App that consumes the files"];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->appid(), output);
  }

  // repeated string requiredtags = 6 [(.proto.steam.description) = "Tags to match on. See match_all_tags parameter below"];
  for (int i = 0, n = this->requiredtags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->requiredtags(i).data(), this->requiredtags(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPublishedFile_QueryFiles_Request.requiredtags");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->requiredtags(i), output);
  }

  // repeated string excludedtags = 7 [(.proto.steam.description) = "(Optional) Tags that must NOT be present on a published file to satisfy the query."];
  for (int i = 0, n = this->excludedtags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->excludedtags(i).data(), this->excludedtags(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPublishedFile_QueryFiles_Request.excludedtags");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->excludedtags(i), output);
  }

  // optional bool match_all_tags = 8 [default = true, (.proto.steam.description) = "If true, then items must have all the tags specified, otherwise they must have at least one of the tags."];
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->match_all_tags(), output);
  }

  // repeated string required_flags = 9 [(.proto.steam.description) = "Required flags that must be set on any returned items"];
  for (int i = 0, n = this->required_flags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->required_flags(i).data(), this->required_flags(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPublishedFile_QueryFiles_Request.required_flags");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->required_flags(i), output);
  }

  // repeated string omitted_flags = 10 [(.proto.steam.description) = "Flags that must not be set on any returned items"];
  for (int i = 0, n = this->omitted_flags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->omitted_flags(i).data(), this->omitted_flags(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPublishedFile_QueryFiles_Request.omitted_flags");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->omitted_flags(i), output);
  }

  // optional string search_text = 11 [(.proto.steam.description) = "Text to match in the item\'s title or description"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->search_text().data(), this->search_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPublishedFile_QueryFiles_Request.search_text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->search_text(), output);
  }

  // optional uint32 filetype = 12 [(.proto.steam.description) = "EPublishedFileInfoMatchingFileType"];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->filetype(), output);
  }

  // optional fixed64 child_publishedfileid = 13 [(.proto.steam.description) = "Find all items that reference the given item."];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(13, this->child_publishedfileid(), output);
  }

  // optional uint32 days = 14 [(.proto.steam.description) = "If query_type is k_PublishedFileQueryType_RankedByTrend, then this is the number of days to get votes for [1,7]."];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->days(), output);
  }

  // optional bool include_recent_votes_only = 15 [(.proto.steam.description) = "If query_type is k_PublishedFileQueryType_RankedByTrend, then limit result set just to items that have votes within the day range given"];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->include_recent_votes_only(), output);
  }

  // optional bool totalonly = 16 [(.proto.steam.description) = "(Optional) If true, only return the total number of files that satisfy this query."];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->totalonly(), output);
  }

  // optional bool return_vote_data = 17 [(.proto.steam.description) = "Return vote data"];
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->return_vote_data(), output);
  }

  // optional bool return_tags = 18 [(.proto.steam.description) = "Return tags in the file details"];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->return_tags(), output);
  }

  // optional bool return_kv_tags = 19 [(.proto.steam.description) = "Return key-value tags in the file details"];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->return_kv_tags(), output);
  }

  // optional bool return_previews = 20 [(.proto.steam.description) = "Return preview image and video details in the file details"];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->return_previews(), output);
  }

  // optional bool return_children = 21 [(.proto.steam.description) = "Return child item ids in the file details"];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->return_children(), output);
  }

  // optional bool return_short_description = 22 [(.proto.steam.description) = "Populate the short_description field instead of file_description"];
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->return_short_description(), output);
  }

  // optional bool return_for_sale_data = 30 [(.proto.steam.description) = "Return pricing information, if applicable"];
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(30, this->return_for_sale_data(), output);
  }

  // optional uint32 cache_max_age_seconds = 31 [default = 0, (.proto.steam.description) = "Allow stale data to be returned for the specified number of seconds."];
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->cache_max_age_seconds(), output);
  }

  // optional bool return_metadata = 32 [default = false, (.proto.steam.description) = "Populate the metadata"];
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(32, this->return_metadata(), output);
  }

  // optional int32 language = 33 [default = 0, (.proto.steam.description) = "Language to search in and also what gets returned. Defaults to English."];
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->language(), output);
  }

  // repeated .proto.steam.CPublishedFile_QueryFiles_Request.KVTag required_kv_tags = 34 [(.proto.steam.description) = "Required key-value tags to match on."];
  for (unsigned int i = 0, n = this->required_kv_tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      34, this->required_kv_tags(i), output);
  }

  // optional bool ids_only = 35 [(.proto.steam.description) = "(Optional) If true, only return the published file ids of files that satisfy this query."];
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(35, this->ids_only(), output);
  }

  // optional uint32 return_playtime_stats = 36 [(.proto.steam.description) = "Return playtime stats for the specified number of days before today."];
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(36, this->return_playtime_stats(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPublishedFile_QueryFiles_Request)
}

::google::protobuf::uint8* CPublishedFile_QueryFiles_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPublishedFile_QueryFiles_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 query_type = 1 [(.proto.steam.description) = "enumeration EPublishedFileQueryType in clientenums.h"];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->query_type(), target);
  }

  // optional uint32 page = 2 [(.proto.steam.description) = "Current page"];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->page(), target);
  }

  // optional uint32 numperpage = 3 [default = 1, (.proto.steam.description) = "(Optional) The number of results, per page to return."];
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->numperpage(), target);
  }

  // optional uint32 creator_appid = 4 [(.proto.steam.description) = "App that created the files"];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->creator_appid(), target);
  }

  // optional uint32 appid = 5 [(.proto.steam.description) = "App that consumes the files"];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->appid(), target);
  }

  // repeated string requiredtags = 6 [(.proto.steam.description) = "Tags to match on. See match_all_tags parameter below"];
  for (int i = 0, n = this->requiredtags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->requiredtags(i).data(), this->requiredtags(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPublishedFile_QueryFiles_Request.requiredtags");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->requiredtags(i), target);
  }

  // repeated string excludedtags = 7 [(.proto.steam.description) = "(Optional) Tags that must NOT be present on a published file to satisfy the query."];
  for (int i = 0, n = this->excludedtags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->excludedtags(i).data(), this->excludedtags(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPublishedFile_QueryFiles_Request.excludedtags");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->excludedtags(i), target);
  }

  // optional bool match_all_tags = 8 [default = true, (.proto.steam.description) = "If true, then items must have all the tags specified, otherwise they must have at least one of the tags."];
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->match_all_tags(), target);
  }

  // repeated string required_flags = 9 [(.proto.steam.description) = "Required flags that must be set on any returned items"];
  for (int i = 0, n = this->required_flags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->required_flags(i).data(), this->required_flags(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPublishedFile_QueryFiles_Request.required_flags");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(9, this->required_flags(i), target);
  }

  // repeated string omitted_flags = 10 [(.proto.steam.description) = "Flags that must not be set on any returned items"];
  for (int i = 0, n = this->omitted_flags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->omitted_flags(i).data(), this->omitted_flags(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPublishedFile_QueryFiles_Request.omitted_flags");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(10, this->omitted_flags(i), target);
  }

  // optional string search_text = 11 [(.proto.steam.description) = "Text to match in the item\'s title or description"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->search_text().data(), this->search_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CPublishedFile_QueryFiles_Request.search_text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->search_text(), target);
  }

  // optional uint32 filetype = 12 [(.proto.steam.description) = "EPublishedFileInfoMatchingFileType"];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->filetype(), target);
  }

  // optional fixed64 child_publishedfileid = 13 [(.proto.steam.description) = "Find all items that reference the given item."];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(13, this->child_publishedfileid(), target);
  }

  // optional uint32 days = 14 [(.proto.steam.description) = "If query_type is k_PublishedFileQueryType_RankedByTrend, then this is the number of days to get votes for [1,7]."];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->days(), target);
  }

  // optional bool include_recent_votes_only = 15 [(.proto.steam.description) = "If query_type is k_PublishedFileQueryType_RankedByTrend, then limit result set just to items that have votes within the day range given"];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->include_recent_votes_only(), target);
  }

  // optional bool totalonly = 16 [(.proto.steam.description) = "(Optional) If true, only return the total number of files that satisfy this query."];
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->totalonly(), target);
  }

  // optional bool return_vote_data = 17 [(.proto.steam.description) = "Return vote data"];
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->return_vote_data(), target);
  }

  // optional bool return_tags = 18 [(.proto.steam.description) = "Return tags in the file details"];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->return_tags(), target);
  }

  // optional bool return_kv_tags = 19 [(.proto.steam.description) = "Return key-value tags in the file details"];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->return_kv_tags(), target);
  }

  // optional bool return_previews = 20 [(.proto.steam.description) = "Return preview image and video details in the file details"];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->return_previews(), target);
  }

  // optional bool return_children = 21 [(.proto.steam.description) = "Return child item ids in the file details"];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->return_children(), target);
  }

  // optional bool return_short_description = 22 [(.proto.steam.description) = "Populate the short_description field instead of file_description"];
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->return_short_description(), target);
  }

  // optional bool return_for_sale_data = 30 [(.proto.steam.description) = "Return pricing information, if applicable"];
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(30, this->return_for_sale_data(), target);
  }

  // optional uint32 cache_max_age_seconds = 31 [default = 0, (.proto.steam.description) = "Allow stale data to be returned for the specified number of seconds."];
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->cache_max_age_seconds(), target);
  }

  // optional bool return_metadata = 32 [default = false, (.proto.steam.description) = "Populate the metadata"];
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(32, this->return_metadata(), target);
  }

  // optional int32 language = 33 [default = 0, (.proto.steam.description) = "Language to search in and also what gets returned. Defaults to English."];
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(33, this->language(), target);
  }

  // repeated .proto.steam.CPublishedFile_QueryFiles_Request.KVTag required_kv_tags = 34 [(.proto.steam.description) = "Required key-value tags to match on."];
  for (unsigned int i = 0, n = this->required_kv_tags_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        34, this->required_kv_tags(i), deterministic, target);
  }

  // optional bool ids_only = 35 [(.proto.steam.description) = "(Optional) If true, only return the published file ids of files that satisfy this query."];
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(35, this->ids_only(), target);
  }

  // optional uint32 return_playtime_stats = 36 [(.proto.steam.description) = "Return playtime stats for the specified number of days before today."];
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(36, this->return_playtime_stats(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPublishedFile_QueryFiles_Request)
  return target;
}

size_t CPublishedFile_QueryFiles_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPublishedFile_QueryFiles_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated string requiredtags = 6 [(.proto.steam.description) = "Tags to match on. See match_all_tags parameter below"];
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->requiredtags_size());
  for (int i = 0, n = this->requiredtags_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->requiredtags(i));
  }

  // repeated string excludedtags = 7 [(.proto.steam.description) = "(Optional) Tags that must NOT be present on a published file to satisfy the query."];
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->excludedtags_size());
  for (int i = 0, n = this->excludedtags_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->excludedtags(i));
  }

  // repeated string required_flags = 9 [(.proto.steam.description) = "Required flags that must be set on any returned items"];
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->required_flags_size());
  for (int i = 0, n = this->required_flags_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->required_flags(i));
  }

  // repeated string omitted_flags = 10 [(.proto.steam.description) = "Flags that must not be set on any returned items"];
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->omitted_flags_size());
  for (int i = 0, n = this->omitted_flags_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->omitted_flags(i));
  }

  // repeated .proto.steam.CPublishedFile_QueryFiles_Request.KVTag required_kv_tags = 34 [(.proto.steam.description) = "Required key-value tags to match on."];
  {
    unsigned int count = this->required_kv_tags_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->required_kv_tags(i));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string search_text = 11 [(.proto.steam.description) = "Text to match in the item\'s title or description"];
    if (has_search_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->search_text());
    }

    // optional uint32 query_type = 1 [(.proto.steam.description) = "enumeration EPublishedFileQueryType in clientenums.h"];
    if (has_query_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->query_type());
    }

    // optional uint32 page = 2 [(.proto.steam.description) = "Current page"];
    if (has_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->page());
    }

    // optional uint32 creator_appid = 4 [(.proto.steam.description) = "App that created the files"];
    if (has_creator_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->creator_appid());
    }

    // optional uint32 appid = 5 [(.proto.steam.description) = "App that consumes the files"];
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appid());
    }

    // optional fixed64 child_publishedfileid = 13 [(.proto.steam.description) = "Find all items that reference the given item."];
    if (has_child_publishedfileid()) {
      total_size += 1 + 8;
    }

    // optional uint32 filetype = 12 [(.proto.steam.description) = "EPublishedFileInfoMatchingFileType"];
    if (has_filetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->filetype());
    }

    // optional uint32 days = 14 [(.proto.steam.description) = "If query_type is k_PublishedFileQueryType_RankedByTrend, then this is the number of days to get votes for [1,7]."];
    if (has_days()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->days());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional bool return_tags = 18 [(.proto.steam.description) = "Return tags in the file details"];
    if (has_return_tags()) {
      total_size += 2 + 1;
    }

    // optional bool return_kv_tags = 19 [(.proto.steam.description) = "Return key-value tags in the file details"];
    if (has_return_kv_tags()) {
      total_size += 2 + 1;
    }

    // optional bool return_previews = 20 [(.proto.steam.description) = "Return preview image and video details in the file details"];
    if (has_return_previews()) {
      total_size += 2 + 1;
    }

    // optional bool return_children = 21 [(.proto.steam.description) = "Return child item ids in the file details"];
    if (has_return_children()) {
      total_size += 2 + 1;
    }

    // optional bool include_recent_votes_only = 15 [(.proto.steam.description) = "If query_type is k_PublishedFileQueryType_RankedByTrend, then limit result set just to items that have votes within the day range given"];
    if (has_include_recent_votes_only()) {
      total_size += 1 + 1;
    }

    // optional bool totalonly = 16 [(.proto.steam.description) = "(Optional) If true, only return the total number of files that satisfy this query."];
    if (has_totalonly()) {
      total_size += 2 + 1;
    }

    // optional bool ids_only = 35 [(.proto.steam.description) = "(Optional) If true, only return the published file ids of files that satisfy this query."];
    if (has_ids_only()) {
      total_size += 2 + 1;
    }

    // optional bool return_vote_data = 17 [(.proto.steam.description) = "Return vote data"];
    if (has_return_vote_data()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional bool return_short_description = 22 [(.proto.steam.description) = "Populate the short_description field instead of file_description"];
    if (has_return_short_description()) {
      total_size += 2 + 1;
    }

    // optional bool return_for_sale_data = 30 [(.proto.steam.description) = "Return pricing information, if applicable"];
    if (has_return_for_sale_data()) {
      total_size += 2 + 1;
    }

    // optional bool return_metadata = 32 [default = false, (.proto.steam.description) = "Populate the metadata"];
    if (has_return_metadata()) {
      total_size += 2 + 1;
    }

    // optional uint32 cache_max_age_seconds = 31 [default = 0, (.proto.steam.description) = "Allow stale data to be returned for the specified number of seconds."];
    if (has_cache_max_age_seconds()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cache_max_age_seconds());
    }

    // optional int32 language = 33 [default = 0, (.proto.steam.description) = "Language to search in and also what gets returned. Defaults to English."];
    if (has_language()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->language());
    }

    // optional uint32 return_playtime_stats = 36 [(.proto.steam.description) = "Return playtime stats for the specified number of days before today."];
    if (has_return_playtime_stats()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->return_playtime_stats());
    }

    // optional uint32 numperpage = 3 [default = 1, (.proto.steam.description) = "(Optional) The number of results, per page to return."];
    if (has_numperpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->numperpage());
    }

    // optional bool match_all_tags = 8 [default = true, (.proto.steam.description) = "If true, then items must have all the tags specified, otherwise they must have at least one of the tags."];
    if (has_match_all_tags()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPublishedFile_QueryFiles_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPublishedFile_QueryFiles_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CPublishedFile_QueryFiles_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CPublishedFile_QueryFiles_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPublishedFile_QueryFiles_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPublishedFile_QueryFiles_Request)
    MergeFrom(*source);
  }
}

void CPublishedFile_QueryFiles_Request::MergeFrom(const CPublishedFile_QueryFiles_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPublishedFile_QueryFiles_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  requiredtags_.MergeFrom(from.requiredtags_);
  excludedtags_.MergeFrom(from.excludedtags_);
  required_flags_.MergeFrom(from.required_flags_);
  omitted_flags_.MergeFrom(from.omitted_flags_);
  required_kv_tags_.MergeFrom(from.required_kv_tags_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_search_text();
      search_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.search_text_);
    }
    if (cached_has_bits & 0x00000002u) {
      query_type_ = from.query_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      page_ = from.page_;
    }
    if (cached_has_bits & 0x00000008u) {
      creator_appid_ = from.creator_appid_;
    }
    if (cached_has_bits & 0x00000010u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000020u) {
      child_publishedfileid_ = from.child_publishedfileid_;
    }
    if (cached_has_bits & 0x00000040u) {
      filetype_ = from.filetype_;
    }
    if (cached_has_bits & 0x00000080u) {
      days_ = from.days_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      return_tags_ = from.return_tags_;
    }
    if (cached_has_bits & 0x00000200u) {
      return_kv_tags_ = from.return_kv_tags_;
    }
    if (cached_has_bits & 0x00000400u) {
      return_previews_ = from.return_previews_;
    }
    if (cached_has_bits & 0x00000800u) {
      return_children_ = from.return_children_;
    }
    if (cached_has_bits & 0x00001000u) {
      include_recent_votes_only_ = from.include_recent_votes_only_;
    }
    if (cached_has_bits & 0x00002000u) {
      totalonly_ = from.totalonly_;
    }
    if (cached_has_bits & 0x00004000u) {
      ids_only_ = from.ids_only_;
    }
    if (cached_has_bits & 0x00008000u) {
      return_vote_data_ = from.return_vote_data_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      return_short_description_ = from.return_short_description_;
    }
    if (cached_has_bits & 0x00020000u) {
      return_for_sale_data_ = from.return_for_sale_data_;
    }
    if (cached_has_bits & 0x00040000u) {
      return_metadata_ = from.return_metadata_;
    }
    if (cached_has_bits & 0x00080000u) {
      cache_max_age_seconds_ = from.cache_max_age_seconds_;
    }
    if (cached_has_bits & 0x00100000u) {
      language_ = from.language_;
    }
    if (cached_has_bits & 0x00200000u) {
      return_playtime_stats_ = from.return_playtime_stats_;
    }
    if (cached_has_bits & 0x00400000u) {
      numperpage_ = from.numperpage_;
    }
    if (cached_has_bits & 0x00800000u) {
      match_all_tags_ = from.match_all_tags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CPublishedFile_QueryFiles_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPublishedFile_QueryFiles_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPublishedFile_QueryFiles_Request::CopyFrom(const CPublishedFile_QueryFiles_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPublishedFile_QueryFiles_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_QueryFiles_Request::IsInitialized() const {
  return true;
}

void CPublishedFile_QueryFiles_Request::Swap(CPublishedFile_QueryFiles_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPublishedFile_QueryFiles_Request::InternalSwap(CPublishedFile_QueryFiles_Request* other) {
  requiredtags_.InternalSwap(&other->requiredtags_);
  excludedtags_.InternalSwap(&other->excludedtags_);
  required_flags_.InternalSwap(&other->required_flags_);
  omitted_flags_.InternalSwap(&other->omitted_flags_);
  required_kv_tags_.InternalSwap(&other->required_kv_tags_);
  search_text_.Swap(&other->search_text_);
  std::swap(query_type_, other->query_type_);
  std::swap(page_, other->page_);
  std::swap(creator_appid_, other->creator_appid_);
  std::swap(appid_, other->appid_);
  std::swap(child_publishedfileid_, other->child_publishedfileid_);
  std::swap(filetype_, other->filetype_);
  std::swap(days_, other->days_);
  std::swap(return_tags_, other->return_tags_);
  std::swap(return_kv_tags_, other->return_kv_tags_);
  std::swap(return_previews_, other->return_previews_);
  std::swap(return_children_, other->return_children_);
  std::swap(include_recent_votes_only_, other->include_recent_votes_only_);
  std::swap(totalonly_, other->totalonly_);
  std::swap(ids_only_, other->ids_only_);
  std::swap(return_vote_data_, other->return_vote_data_);
  std::swap(return_short_description_, other->return_short_description_);
  std::swap(return_for_sale_data_, other->return_for_sale_data_);
  std::swap(return_metadata_, other->return_metadata_);
  std::swap(cache_max_age_seconds_, other->cache_max_age_seconds_);
  std::swap(language_, other->language_);
  std::swap(return_playtime_stats_, other->return_playtime_stats_);
  std::swap(numperpage_, other->numperpage_);
  std::swap(match_all_tags_, other->match_all_tags_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CPublishedFile_QueryFiles_Request::GetMetadata() const {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CPublishedFile_QueryFiles_Request

// optional uint32 query_type = 1 [(.proto.steam.description) = "enumeration EPublishedFileQueryType in clientenums.h"];
bool CPublishedFile_QueryFiles_Request::has_query_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CPublishedFile_QueryFiles_Request::set_has_query_type() {
  _has_bits_[0] |= 0x00000002u;
}
void CPublishedFile_QueryFiles_Request::clear_has_query_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void CPublishedFile_QueryFiles_Request::clear_query_type() {
  query_type_ = 0u;
  clear_has_query_type();
}
::google::protobuf::uint32 CPublishedFile_QueryFiles_Request::query_type() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_QueryFiles_Request.query_type)
  return query_type_;
}
void CPublishedFile_QueryFiles_Request::set_query_type(::google::protobuf::uint32 value) {
  set_has_query_type();
  query_type_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_QueryFiles_Request.query_type)
}

// optional uint32 page = 2 [(.proto.steam.description) = "Current page"];
bool CPublishedFile_QueryFiles_Request::has_page() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CPublishedFile_QueryFiles_Request::set_has_page() {
  _has_bits_[0] |= 0x00000004u;
}
void CPublishedFile_QueryFiles_Request::clear_has_page() {
  _has_bits_[0] &= ~0x00000004u;
}
void CPublishedFile_QueryFiles_Request::clear_page() {
  page_ = 0u;
  clear_has_page();
}
::google::protobuf::uint32 CPublishedFile_QueryFiles_Request::page() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_QueryFiles_Request.page)
  return page_;
}
void CPublishedFile_QueryFiles_Request::set_page(::google::protobuf::uint32 value) {
  set_has_page();
  page_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_QueryFiles_Request.page)
}

// optional uint32 numperpage = 3 [default = 1, (.proto.steam.description) = "(Optional) The number of results, per page to return."];
bool CPublishedFile_QueryFiles_Request::has_numperpage() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void CPublishedFile_QueryFiles_Request::set_has_numperpage() {
  _has_bits_[0] |= 0x00400000u;
}
void CPublishedFile_QueryFiles_Request::clear_has_numperpage() {
  _has_bits_[0] &= ~0x00400000u;
}
void CPublishedFile_QueryFiles_Request::clear_numperpage() {
  numperpage_ = 1u;
  clear_has_numperpage();
}
::google::protobuf::uint32 CPublishedFile_QueryFiles_Request::numperpage() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_QueryFiles_Request.numperpage)
  return numperpage_;
}
void CPublishedFile_QueryFiles_Request::set_numperpage(::google::protobuf::uint32 value) {
  set_has_numperpage();
  numperpage_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_QueryFiles_Request.numperpage)
}

// optional uint32 creator_appid = 4 [(.proto.steam.description) = "App that created the files"];
bool CPublishedFile_QueryFiles_Request::has_creator_appid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CPublishedFile_QueryFiles_Request::set_has_creator_appid() {
  _has_bits_[0] |= 0x00000008u;
}
void CPublishedFile_QueryFiles_Request::clear_has_creator_appid() {
  _has_bits_[0] &= ~0x00000008u;
}
void CPublishedFile_QueryFiles_Request::clear_creator_appid() {
  creator_appid_ = 0u;
  clear_has_creator_appid();
}
::google::protobuf::uint32 CPublishedFile_QueryFiles_Request::creator_appid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_QueryFiles_Request.creator_appid)
  return creator_appid_;
}
void CPublishedFile_QueryFiles_Request::set_creator_appid(::google::protobuf::uint32 value) {
  set_has_creator_appid();
  creator_appid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_QueryFiles_Request.creator_appid)
}

// optional uint32 appid = 5 [(.proto.steam.description) = "App that consumes the files"];
bool CPublishedFile_QueryFiles_Request::has_appid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CPublishedFile_QueryFiles_Request::set_has_appid() {
  _has_bits_[0] |= 0x00000010u;
}
void CPublishedFile_QueryFiles_Request::clear_has_appid() {
  _has_bits_[0] &= ~0x00000010u;
}
void CPublishedFile_QueryFiles_Request::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
::google::protobuf::uint32 CPublishedFile_QueryFiles_Request::appid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_QueryFiles_Request.appid)
  return appid_;
}
void CPublishedFile_QueryFiles_Request::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_QueryFiles_Request.appid)
}

// repeated string requiredtags = 6 [(.proto.steam.description) = "Tags to match on. See match_all_tags parameter below"];
int CPublishedFile_QueryFiles_Request::requiredtags_size() const {
  return requiredtags_.size();
}
void CPublishedFile_QueryFiles_Request::clear_requiredtags() {
  requiredtags_.Clear();
}
const ::std::string& CPublishedFile_QueryFiles_Request::requiredtags(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_QueryFiles_Request.requiredtags)
  return requiredtags_.Get(index);
}
::std::string* CPublishedFile_QueryFiles_Request::mutable_requiredtags(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CPublishedFile_QueryFiles_Request.requiredtags)
  return requiredtags_.Mutable(index);
}
void CPublishedFile_QueryFiles_Request::set_requiredtags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_QueryFiles_Request.requiredtags)
  requiredtags_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void CPublishedFile_QueryFiles_Request::set_requiredtags(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_QueryFiles_Request.requiredtags)
  requiredtags_.Mutable(index)->assign(std::move(value));
}
#endif
void CPublishedFile_QueryFiles_Request::set_requiredtags(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  requiredtags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.steam.CPublishedFile_QueryFiles_Request.requiredtags)
}
void CPublishedFile_QueryFiles_Request::set_requiredtags(int index, const char* value, size_t size) {
  requiredtags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CPublishedFile_QueryFiles_Request.requiredtags)
}
::std::string* CPublishedFile_QueryFiles_Request::add_requiredtags() {
  // @@protoc_insertion_point(field_add_mutable:proto.steam.CPublishedFile_QueryFiles_Request.requiredtags)
  return requiredtags_.Add();
}
void CPublishedFile_QueryFiles_Request::add_requiredtags(const ::std::string& value) {
  requiredtags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto.steam.CPublishedFile_QueryFiles_Request.requiredtags)
}
#if LANG_CXX11
void CPublishedFile_QueryFiles_Request::add_requiredtags(::std::string&& value) {
  requiredtags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:proto.steam.CPublishedFile_QueryFiles_Request.requiredtags)
}
#endif
void CPublishedFile_QueryFiles_Request::add_requiredtags(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  requiredtags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto.steam.CPublishedFile_QueryFiles_Request.requiredtags)
}
void CPublishedFile_QueryFiles_Request::add_requiredtags(const char* value, size_t size) {
  requiredtags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto.steam.CPublishedFile_QueryFiles_Request.requiredtags)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
CPublishedFile_QueryFiles_Request::requiredtags() const {
  // @@protoc_insertion_point(field_list:proto.steam.CPublishedFile_QueryFiles_Request.requiredtags)
  return requiredtags_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
CPublishedFile_QueryFiles_Request::mutable_requiredtags() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CPublishedFile_QueryFiles_Request.requiredtags)
  return &requiredtags_;
}

// repeated string excludedtags = 7 [(.proto.steam.description) = "(Optional) Tags that must NOT be present on a published file to satisfy the query."];
int CPublishedFile_QueryFiles_Request::excludedtags_size() const {
  return excludedtags_.size();
}
void CPublishedFile_QueryFiles_Request::clear_excludedtags() {
  excludedtags_.Clear();
}
const ::std::string& CPublishedFile_QueryFiles_Request::excludedtags(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_QueryFiles_Request.excludedtags)
  return excludedtags_.Get(index);
}
::std::string* CPublishedFile_QueryFiles_Request::mutable_excludedtags(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CPublishedFile_QueryFiles_Request.excludedtags)
  return excludedtags_.Mutable(index);
}
void CPublishedFile_QueryFiles_Request::set_excludedtags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_QueryFiles_Request.excludedtags)
  excludedtags_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void CPublishedFile_QueryFiles_Request::set_excludedtags(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_QueryFiles_Request.excludedtags)
  excludedtags_.Mutable(index)->assign(std::move(value));
}
#endif
void CPublishedFile_QueryFiles_Request::set_excludedtags(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  excludedtags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.steam.CPublishedFile_QueryFiles_Request.excludedtags)
}
void CPublishedFile_QueryFiles_Request::set_excludedtags(int index, const char* value, size_t size) {
  excludedtags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CPublishedFile_QueryFiles_Request.excludedtags)
}
::std::string* CPublishedFile_QueryFiles_Request::add_excludedtags() {
  // @@protoc_insertion_point(field_add_mutable:proto.steam.CPublishedFile_QueryFiles_Request.excludedtags)
  return excludedtags_.Add();
}
void CPublishedFile_QueryFiles_Request::add_excludedtags(const ::std::string& value) {
  excludedtags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto.steam.CPublishedFile_QueryFiles_Request.excludedtags)
}
#if LANG_CXX11
void CPublishedFile_QueryFiles_Request::add_excludedtags(::std::string&& value) {
  excludedtags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:proto.steam.CPublishedFile_QueryFiles_Request.excludedtags)
}
#endif
void CPublishedFile_QueryFiles_Request::add_excludedtags(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  excludedtags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto.steam.CPublishedFile_QueryFiles_Request.excludedtags)
}
void CPublishedFile_QueryFiles_Request::add_excludedtags(const char* value, size_t size) {
  excludedtags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto.steam.CPublishedFile_QueryFiles_Request.excludedtags)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
CPublishedFile_QueryFiles_Request::excludedtags() const {
  // @@protoc_insertion_point(field_list:proto.steam.CPublishedFile_QueryFiles_Request.excludedtags)
  return excludedtags_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
CPublishedFile_QueryFiles_Request::mutable_excludedtags() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CPublishedFile_QueryFiles_Request.excludedtags)
  return &excludedtags_;
}

// optional bool match_all_tags = 8 [default = true, (.proto.steam.description) = "If true, then items must have all the tags specified, otherwise they must have at least one of the tags."];
bool CPublishedFile_QueryFiles_Request::has_match_all_tags() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void CPublishedFile_QueryFiles_Request::set_has_match_all_tags() {
  _has_bits_[0] |= 0x00800000u;
}
void CPublishedFile_QueryFiles_Request::clear_has_match_all_tags() {
  _has_bits_[0] &= ~0x00800000u;
}
void CPublishedFile_QueryFiles_Request::clear_match_all_tags() {
  match_all_tags_ = true;
  clear_has_match_all_tags();
}
bool CPublishedFile_QueryFiles_Request::match_all_tags() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_QueryFiles_Request.match_all_tags)
  return match_all_tags_;
}
void CPublishedFile_QueryFiles_Request::set_match_all_tags(bool value) {
  set_has_match_all_tags();
  match_all_tags_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_QueryFiles_Request.match_all_tags)
}

// repeated string required_flags = 9 [(.proto.steam.description) = "Required flags that must be set on any returned items"];
int CPublishedFile_QueryFiles_Request::required_flags_size() const {
  return required_flags_.size();
}
void CPublishedFile_QueryFiles_Request::clear_required_flags() {
  required_flags_.Clear();
}
const ::std::string& CPublishedFile_QueryFiles_Request::required_flags(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_QueryFiles_Request.required_flags)
  return required_flags_.Get(index);
}
::std::string* CPublishedFile_QueryFiles_Request::mutable_required_flags(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CPublishedFile_QueryFiles_Request.required_flags)
  return required_flags_.Mutable(index);
}
void CPublishedFile_QueryFiles_Request::set_required_flags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_QueryFiles_Request.required_flags)
  required_flags_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void CPublishedFile_QueryFiles_Request::set_required_flags(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_QueryFiles_Request.required_flags)
  required_flags_.Mutable(index)->assign(std::move(value));
}
#endif
void CPublishedFile_QueryFiles_Request::set_required_flags(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  required_flags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.steam.CPublishedFile_QueryFiles_Request.required_flags)
}
void CPublishedFile_QueryFiles_Request::set_required_flags(int index, const char* value, size_t size) {
  required_flags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CPublishedFile_QueryFiles_Request.required_flags)
}
::std::string* CPublishedFile_QueryFiles_Request::add_required_flags() {
  // @@protoc_insertion_point(field_add_mutable:proto.steam.CPublishedFile_QueryFiles_Request.required_flags)
  return required_flags_.Add();
}
void CPublishedFile_QueryFiles_Request::add_required_flags(const ::std::string& value) {
  required_flags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto.steam.CPublishedFile_QueryFiles_Request.required_flags)
}
#if LANG_CXX11
void CPublishedFile_QueryFiles_Request::add_required_flags(::std::string&& value) {
  required_flags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:proto.steam.CPublishedFile_QueryFiles_Request.required_flags)
}
#endif
void CPublishedFile_QueryFiles_Request::add_required_flags(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  required_flags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto.steam.CPublishedFile_QueryFiles_Request.required_flags)
}
void CPublishedFile_QueryFiles_Request::add_required_flags(const char* value, size_t size) {
  required_flags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto.steam.CPublishedFile_QueryFiles_Request.required_flags)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
CPublishedFile_QueryFiles_Request::required_flags() const {
  // @@protoc_insertion_point(field_list:proto.steam.CPublishedFile_QueryFiles_Request.required_flags)
  return required_flags_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
CPublishedFile_QueryFiles_Request::mutable_required_flags() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CPublishedFile_QueryFiles_Request.required_flags)
  return &required_flags_;
}

// repeated string omitted_flags = 10 [(.proto.steam.description) = "Flags that must not be set on any returned items"];
int CPublishedFile_QueryFiles_Request::omitted_flags_size() const {
  return omitted_flags_.size();
}
void CPublishedFile_QueryFiles_Request::clear_omitted_flags() {
  omitted_flags_.Clear();
}
const ::std::string& CPublishedFile_QueryFiles_Request::omitted_flags(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_QueryFiles_Request.omitted_flags)
  return omitted_flags_.Get(index);
}
::std::string* CPublishedFile_QueryFiles_Request::mutable_omitted_flags(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CPublishedFile_QueryFiles_Request.omitted_flags)
  return omitted_flags_.Mutable(index);
}
void CPublishedFile_QueryFiles_Request::set_omitted_flags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_QueryFiles_Request.omitted_flags)
  omitted_flags_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void CPublishedFile_QueryFiles_Request::set_omitted_flags(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_QueryFiles_Request.omitted_flags)
  omitted_flags_.Mutable(index)->assign(std::move(value));
}
#endif
void CPublishedFile_QueryFiles_Request::set_omitted_flags(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  omitted_flags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.steam.CPublishedFile_QueryFiles_Request.omitted_flags)
}
void CPublishedFile_QueryFiles_Request::set_omitted_flags(int index, const char* value, size_t size) {
  omitted_flags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CPublishedFile_QueryFiles_Request.omitted_flags)
}
::std::string* CPublishedFile_QueryFiles_Request::add_omitted_flags() {
  // @@protoc_insertion_point(field_add_mutable:proto.steam.CPublishedFile_QueryFiles_Request.omitted_flags)
  return omitted_flags_.Add();
}
void CPublishedFile_QueryFiles_Request::add_omitted_flags(const ::std::string& value) {
  omitted_flags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto.steam.CPublishedFile_QueryFiles_Request.omitted_flags)
}
#if LANG_CXX11
void CPublishedFile_QueryFiles_Request::add_omitted_flags(::std::string&& value) {
  omitted_flags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:proto.steam.CPublishedFile_QueryFiles_Request.omitted_flags)
}
#endif
void CPublishedFile_QueryFiles_Request::add_omitted_flags(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  omitted_flags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto.steam.CPublishedFile_QueryFiles_Request.omitted_flags)
}
void CPublishedFile_QueryFiles_Request::add_omitted_flags(const char* value, size_t size) {
  omitted_flags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto.steam.CPublishedFile_QueryFiles_Request.omitted_flags)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
CPublishedFile_QueryFiles_Request::omitted_flags() const {
  // @@protoc_insertion_point(field_list:proto.steam.CPublishedFile_QueryFiles_Request.omitted_flags)
  return omitted_flags_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
CPublishedFile_QueryFiles_Request::mutable_omitted_flags() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CPublishedFile_QueryFiles_Request.omitted_flags)
  return &omitted_flags_;
}

// optional string search_text = 11 [(.proto.steam.description) = "Text to match in the item\'s title or description"];
bool CPublishedFile_QueryFiles_Request::has_search_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CPublishedFile_QueryFiles_Request::set_has_search_text() {
  _has_bits_[0] |= 0x00000001u;
}
void CPublishedFile_QueryFiles_Request::clear_has_search_text() {
  _has_bits_[0] &= ~0x00000001u;
}
void CPublishedFile_QueryFiles_Request::clear_search_text() {
  search_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_search_text();
}
const ::std::string& CPublishedFile_QueryFiles_Request::search_text() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_QueryFiles_Request.search_text)
  return search_text_.GetNoArena();
}
void CPublishedFile_QueryFiles_Request::set_search_text(const ::std::string& value) {
  set_has_search_text();
  search_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_QueryFiles_Request.search_text)
}
#if LANG_CXX11
void CPublishedFile_QueryFiles_Request::set_search_text(::std::string&& value) {
  set_has_search_text();
  search_text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CPublishedFile_QueryFiles_Request.search_text)
}
#endif
void CPublishedFile_QueryFiles_Request::set_search_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_search_text();
  search_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CPublishedFile_QueryFiles_Request.search_text)
}
void CPublishedFile_QueryFiles_Request::set_search_text(const char* value, size_t size) {
  set_has_search_text();
  search_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CPublishedFile_QueryFiles_Request.search_text)
}
::std::string* CPublishedFile_QueryFiles_Request::mutable_search_text() {
  set_has_search_text();
  // @@protoc_insertion_point(field_mutable:proto.steam.CPublishedFile_QueryFiles_Request.search_text)
  return search_text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CPublishedFile_QueryFiles_Request::release_search_text() {
  // @@protoc_insertion_point(field_release:proto.steam.CPublishedFile_QueryFiles_Request.search_text)
  clear_has_search_text();
  return search_text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CPublishedFile_QueryFiles_Request::set_allocated_search_text(::std::string* search_text) {
  if (search_text != NULL) {
    set_has_search_text();
  } else {
    clear_has_search_text();
  }
  search_text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), search_text);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CPublishedFile_QueryFiles_Request.search_text)
}

// optional uint32 filetype = 12 [(.proto.steam.description) = "EPublishedFileInfoMatchingFileType"];
bool CPublishedFile_QueryFiles_Request::has_filetype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CPublishedFile_QueryFiles_Request::set_has_filetype() {
  _has_bits_[0] |= 0x00000040u;
}
void CPublishedFile_QueryFiles_Request::clear_has_filetype() {
  _has_bits_[0] &= ~0x00000040u;
}
void CPublishedFile_QueryFiles_Request::clear_filetype() {
  filetype_ = 0u;
  clear_has_filetype();
}
::google::protobuf::uint32 CPublishedFile_QueryFiles_Request::filetype() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_QueryFiles_Request.filetype)
  return filetype_;
}
void CPublishedFile_QueryFiles_Request::set_filetype(::google::protobuf::uint32 value) {
  set_has_filetype();
  filetype_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_QueryFiles_Request.filetype)
}

// optional fixed64 child_publishedfileid = 13 [(.proto.steam.description) = "Find all items that reference the given item."];
bool CPublishedFile_QueryFiles_Request::has_child_publishedfileid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CPublishedFile_QueryFiles_Request::set_has_child_publishedfileid() {
  _has_bits_[0] |= 0x00000020u;
}
void CPublishedFile_QueryFiles_Request::clear_has_child_publishedfileid() {
  _has_bits_[0] &= ~0x00000020u;
}
void CPublishedFile_QueryFiles_Request::clear_child_publishedfileid() {
  child_publishedfileid_ = GOOGLE_ULONGLONG(0);
  clear_has_child_publishedfileid();
}
::google::protobuf::uint64 CPublishedFile_QueryFiles_Request::child_publishedfileid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_QueryFiles_Request.child_publishedfileid)
  return child_publishedfileid_;
}
void CPublishedFile_QueryFiles_Request::set_child_publishedfileid(::google::protobuf::uint64 value) {
  set_has_child_publishedfileid();
  child_publishedfileid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_QueryFiles_Request.child_publishedfileid)
}

// optional uint32 days = 14 [(.proto.steam.description) = "If query_type is k_PublishedFileQueryType_RankedByTrend, then this is the number of days to get votes for [1,7]."];
bool CPublishedFile_QueryFiles_Request::has_days() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CPublishedFile_QueryFiles_Request::set_has_days() {
  _has_bits_[0] |= 0x00000080u;
}
void CPublishedFile_QueryFiles_Request::clear_has_days() {
  _has_bits_[0] &= ~0x00000080u;
}
void CPublishedFile_QueryFiles_Request::clear_days() {
  days_ = 0u;
  clear_has_days();
}
::google::protobuf::uint32 CPublishedFile_QueryFiles_Request::days() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_QueryFiles_Request.days)
  return days_;
}
void CPublishedFile_QueryFiles_Request::set_days(::google::protobuf::uint32 value) {
  set_has_days();
  days_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_QueryFiles_Request.days)
}

// optional bool include_recent_votes_only = 15 [(.proto.steam.description) = "If query_type is k_PublishedFileQueryType_RankedByTrend, then limit result set just to items that have votes within the day range given"];
bool CPublishedFile_QueryFiles_Request::has_include_recent_votes_only() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void CPublishedFile_QueryFiles_Request::set_has_include_recent_votes_only() {
  _has_bits_[0] |= 0x00001000u;
}
void CPublishedFile_QueryFiles_Request::clear_has_include_recent_votes_only() {
  _has_bits_[0] &= ~0x00001000u;
}
void CPublishedFile_QueryFiles_Request::clear_include_recent_votes_only() {
  include_recent_votes_only_ = false;
  clear_has_include_recent_votes_only();
}
bool CPublishedFile_QueryFiles_Request::include_recent_votes_only() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_QueryFiles_Request.include_recent_votes_only)
  return include_recent_votes_only_;
}
void CPublishedFile_QueryFiles_Request::set_include_recent_votes_only(bool value) {
  set_has_include_recent_votes_only();
  include_recent_votes_only_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_QueryFiles_Request.include_recent_votes_only)
}

// optional uint32 cache_max_age_seconds = 31 [default = 0, (.proto.steam.description) = "Allow stale data to be returned for the specified number of seconds."];
bool CPublishedFile_QueryFiles_Request::has_cache_max_age_seconds() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void CPublishedFile_QueryFiles_Request::set_has_cache_max_age_seconds() {
  _has_bits_[0] |= 0x00080000u;
}
void CPublishedFile_QueryFiles_Request::clear_has_cache_max_age_seconds() {
  _has_bits_[0] &= ~0x00080000u;
}
void CPublishedFile_QueryFiles_Request::clear_cache_max_age_seconds() {
  cache_max_age_seconds_ = 0u;
  clear_has_cache_max_age_seconds();
}
::google::protobuf::uint32 CPublishedFile_QueryFiles_Request::cache_max_age_seconds() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_QueryFiles_Request.cache_max_age_seconds)
  return cache_max_age_seconds_;
}
void CPublishedFile_QueryFiles_Request::set_cache_max_age_seconds(::google::protobuf::uint32 value) {
  set_has_cache_max_age_seconds();
  cache_max_age_seconds_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_QueryFiles_Request.cache_max_age_seconds)
}

// optional int32 language = 33 [default = 0, (.proto.steam.description) = "Language to search in and also what gets returned. Defaults to English."];
bool CPublishedFile_QueryFiles_Request::has_language() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void CPublishedFile_QueryFiles_Request::set_has_language() {
  _has_bits_[0] |= 0x00100000u;
}
void CPublishedFile_QueryFiles_Request::clear_has_language() {
  _has_bits_[0] &= ~0x00100000u;
}
void CPublishedFile_QueryFiles_Request::clear_language() {
  language_ = 0;
  clear_has_language();
}
::google::protobuf::int32 CPublishedFile_QueryFiles_Request::language() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_QueryFiles_Request.language)
  return language_;
}
void CPublishedFile_QueryFiles_Request::set_language(::google::protobuf::int32 value) {
  set_has_language();
  language_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_QueryFiles_Request.language)
}

// repeated .proto.steam.CPublishedFile_QueryFiles_Request.KVTag required_kv_tags = 34 [(.proto.steam.description) = "Required key-value tags to match on."];
int CPublishedFile_QueryFiles_Request::required_kv_tags_size() const {
  return required_kv_tags_.size();
}
void CPublishedFile_QueryFiles_Request::clear_required_kv_tags() {
  required_kv_tags_.Clear();
}
const ::proto::steam::CPublishedFile_QueryFiles_Request_KVTag& CPublishedFile_QueryFiles_Request::required_kv_tags(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_QueryFiles_Request.required_kv_tags)
  return required_kv_tags_.Get(index);
}
::proto::steam::CPublishedFile_QueryFiles_Request_KVTag* CPublishedFile_QueryFiles_Request::mutable_required_kv_tags(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CPublishedFile_QueryFiles_Request.required_kv_tags)
  return required_kv_tags_.Mutable(index);
}
::proto::steam::CPublishedFile_QueryFiles_Request_KVTag* CPublishedFile_QueryFiles_Request::add_required_kv_tags() {
  // @@protoc_insertion_point(field_add:proto.steam.CPublishedFile_QueryFiles_Request.required_kv_tags)
  return required_kv_tags_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::CPublishedFile_QueryFiles_Request_KVTag >*
CPublishedFile_QueryFiles_Request::mutable_required_kv_tags() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CPublishedFile_QueryFiles_Request.required_kv_tags)
  return &required_kv_tags_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::CPublishedFile_QueryFiles_Request_KVTag >&
CPublishedFile_QueryFiles_Request::required_kv_tags() const {
  // @@protoc_insertion_point(field_list:proto.steam.CPublishedFile_QueryFiles_Request.required_kv_tags)
  return required_kv_tags_;
}

// optional bool totalonly = 16 [(.proto.steam.description) = "(Optional) If true, only return the total number of files that satisfy this query."];
bool CPublishedFile_QueryFiles_Request::has_totalonly() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void CPublishedFile_QueryFiles_Request::set_has_totalonly() {
  _has_bits_[0] |= 0x00002000u;
}
void CPublishedFile_QueryFiles_Request::clear_has_totalonly() {
  _has_bits_[0] &= ~0x00002000u;
}
void CPublishedFile_QueryFiles_Request::clear_totalonly() {
  totalonly_ = false;
  clear_has_totalonly();
}
bool CPublishedFile_QueryFiles_Request::totalonly() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_QueryFiles_Request.totalonly)
  return totalonly_;
}
void CPublishedFile_QueryFiles_Request::set_totalonly(bool value) {
  set_has_totalonly();
  totalonly_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_QueryFiles_Request.totalonly)
}

// optional bool ids_only = 35 [(.proto.steam.description) = "(Optional) If true, only return the published file ids of files that satisfy this query."];
bool CPublishedFile_QueryFiles_Request::has_ids_only() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void CPublishedFile_QueryFiles_Request::set_has_ids_only() {
  _has_bits_[0] |= 0x00004000u;
}
void CPublishedFile_QueryFiles_Request::clear_has_ids_only() {
  _has_bits_[0] &= ~0x00004000u;
}
void CPublishedFile_QueryFiles_Request::clear_ids_only() {
  ids_only_ = false;
  clear_has_ids_only();
}
bool CPublishedFile_QueryFiles_Request::ids_only() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_QueryFiles_Request.ids_only)
  return ids_only_;
}
void CPublishedFile_QueryFiles_Request::set_ids_only(bool value) {
  set_has_ids_only();
  ids_only_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_QueryFiles_Request.ids_only)
}

// optional bool return_vote_data = 17 [(.proto.steam.description) = "Return vote data"];
bool CPublishedFile_QueryFiles_Request::has_return_vote_data() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void CPublishedFile_QueryFiles_Request::set_has_return_vote_data() {
  _has_bits_[0] |= 0x00008000u;
}
void CPublishedFile_QueryFiles_Request::clear_has_return_vote_data() {
  _has_bits_[0] &= ~0x00008000u;
}
void CPublishedFile_QueryFiles_Request::clear_return_vote_data() {
  return_vote_data_ = false;
  clear_has_return_vote_data();
}
bool CPublishedFile_QueryFiles_Request::return_vote_data() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_QueryFiles_Request.return_vote_data)
  return return_vote_data_;
}
void CPublishedFile_QueryFiles_Request::set_return_vote_data(bool value) {
  set_has_return_vote_data();
  return_vote_data_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_QueryFiles_Request.return_vote_data)
}

// optional bool return_tags = 18 [(.proto.steam.description) = "Return tags in the file details"];
bool CPublishedFile_QueryFiles_Request::has_return_tags() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CPublishedFile_QueryFiles_Request::set_has_return_tags() {
  _has_bits_[0] |= 0x00000100u;
}
void CPublishedFile_QueryFiles_Request::clear_has_return_tags() {
  _has_bits_[0] &= ~0x00000100u;
}
void CPublishedFile_QueryFiles_Request::clear_return_tags() {
  return_tags_ = false;
  clear_has_return_tags();
}
bool CPublishedFile_QueryFiles_Request::return_tags() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_QueryFiles_Request.return_tags)
  return return_tags_;
}
void CPublishedFile_QueryFiles_Request::set_return_tags(bool value) {
  set_has_return_tags();
  return_tags_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_QueryFiles_Request.return_tags)
}

// optional bool return_kv_tags = 19 [(.proto.steam.description) = "Return key-value tags in the file details"];
bool CPublishedFile_QueryFiles_Request::has_return_kv_tags() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CPublishedFile_QueryFiles_Request::set_has_return_kv_tags() {
  _has_bits_[0] |= 0x00000200u;
}
void CPublishedFile_QueryFiles_Request::clear_has_return_kv_tags() {
  _has_bits_[0] &= ~0x00000200u;
}
void CPublishedFile_QueryFiles_Request::clear_return_kv_tags() {
  return_kv_tags_ = false;
  clear_has_return_kv_tags();
}
bool CPublishedFile_QueryFiles_Request::return_kv_tags() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_QueryFiles_Request.return_kv_tags)
  return return_kv_tags_;
}
void CPublishedFile_QueryFiles_Request::set_return_kv_tags(bool value) {
  set_has_return_kv_tags();
  return_kv_tags_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_QueryFiles_Request.return_kv_tags)
}

// optional bool return_previews = 20 [(.proto.steam.description) = "Return preview image and video details in the file details"];
bool CPublishedFile_QueryFiles_Request::has_return_previews() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CPublishedFile_QueryFiles_Request::set_has_return_previews() {
  _has_bits_[0] |= 0x00000400u;
}
void CPublishedFile_QueryFiles_Request::clear_has_return_previews() {
  _has_bits_[0] &= ~0x00000400u;
}
void CPublishedFile_QueryFiles_Request::clear_return_previews() {
  return_previews_ = false;
  clear_has_return_previews();
}
bool CPublishedFile_QueryFiles_Request::return_previews() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_QueryFiles_Request.return_previews)
  return return_previews_;
}
void CPublishedFile_QueryFiles_Request::set_return_previews(bool value) {
  set_has_return_previews();
  return_previews_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_QueryFiles_Request.return_previews)
}

// optional bool return_children = 21 [(.proto.steam.description) = "Return child item ids in the file details"];
bool CPublishedFile_QueryFiles_Request::has_return_children() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CPublishedFile_QueryFiles_Request::set_has_return_children() {
  _has_bits_[0] |= 0x00000800u;
}
void CPublishedFile_QueryFiles_Request::clear_has_return_children() {
  _has_bits_[0] &= ~0x00000800u;
}
void CPublishedFile_QueryFiles_Request::clear_return_children() {
  return_children_ = false;
  clear_has_return_children();
}
bool CPublishedFile_QueryFiles_Request::return_children() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_QueryFiles_Request.return_children)
  return return_children_;
}
void CPublishedFile_QueryFiles_Request::set_return_children(bool value) {
  set_has_return_children();
  return_children_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_QueryFiles_Request.return_children)
}

// optional bool return_short_description = 22 [(.proto.steam.description) = "Populate the short_description field instead of file_description"];
bool CPublishedFile_QueryFiles_Request::has_return_short_description() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void CPublishedFile_QueryFiles_Request::set_has_return_short_description() {
  _has_bits_[0] |= 0x00010000u;
}
void CPublishedFile_QueryFiles_Request::clear_has_return_short_description() {
  _has_bits_[0] &= ~0x00010000u;
}
void CPublishedFile_QueryFiles_Request::clear_return_short_description() {
  return_short_description_ = false;
  clear_has_return_short_description();
}
bool CPublishedFile_QueryFiles_Request::return_short_description() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_QueryFiles_Request.return_short_description)
  return return_short_description_;
}
void CPublishedFile_QueryFiles_Request::set_return_short_description(bool value) {
  set_has_return_short_description();
  return_short_description_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_QueryFiles_Request.return_short_description)
}

// optional bool return_for_sale_data = 30 [(.proto.steam.description) = "Return pricing information, if applicable"];
bool CPublishedFile_QueryFiles_Request::has_return_for_sale_data() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void CPublishedFile_QueryFiles_Request::set_has_return_for_sale_data() {
  _has_bits_[0] |= 0x00020000u;
}
void CPublishedFile_QueryFiles_Request::clear_has_return_for_sale_data() {
  _has_bits_[0] &= ~0x00020000u;
}
void CPublishedFile_QueryFiles_Request::clear_return_for_sale_data() {
  return_for_sale_data_ = false;
  clear_has_return_for_sale_data();
}
bool CPublishedFile_QueryFiles_Request::return_for_sale_data() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_QueryFiles_Request.return_for_sale_data)
  return return_for_sale_data_;
}
void CPublishedFile_QueryFiles_Request::set_return_for_sale_data(bool value) {
  set_has_return_for_sale_data();
  return_for_sale_data_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_QueryFiles_Request.return_for_sale_data)
}

// optional bool return_metadata = 32 [default = false, (.proto.steam.description) = "Populate the metadata"];
bool CPublishedFile_QueryFiles_Request::has_return_metadata() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void CPublishedFile_QueryFiles_Request::set_has_return_metadata() {
  _has_bits_[0] |= 0x00040000u;
}
void CPublishedFile_QueryFiles_Request::clear_has_return_metadata() {
  _has_bits_[0] &= ~0x00040000u;
}
void CPublishedFile_QueryFiles_Request::clear_return_metadata() {
  return_metadata_ = false;
  clear_has_return_metadata();
}
bool CPublishedFile_QueryFiles_Request::return_metadata() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_QueryFiles_Request.return_metadata)
  return return_metadata_;
}
void CPublishedFile_QueryFiles_Request::set_return_metadata(bool value) {
  set_has_return_metadata();
  return_metadata_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_QueryFiles_Request.return_metadata)
}

// optional uint32 return_playtime_stats = 36 [(.proto.steam.description) = "Return playtime stats for the specified number of days before today."];
bool CPublishedFile_QueryFiles_Request::has_return_playtime_stats() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void CPublishedFile_QueryFiles_Request::set_has_return_playtime_stats() {
  _has_bits_[0] |= 0x00200000u;
}
void CPublishedFile_QueryFiles_Request::clear_has_return_playtime_stats() {
  _has_bits_[0] &= ~0x00200000u;
}
void CPublishedFile_QueryFiles_Request::clear_return_playtime_stats() {
  return_playtime_stats_ = 0u;
  clear_has_return_playtime_stats();
}
::google::protobuf::uint32 CPublishedFile_QueryFiles_Request::return_playtime_stats() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_QueryFiles_Request.return_playtime_stats)
  return return_playtime_stats_;
}
void CPublishedFile_QueryFiles_Request::set_return_playtime_stats(::google::protobuf::uint32 value) {
  set_has_return_playtime_stats();
  return_playtime_stats_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_QueryFiles_Request.return_playtime_stats)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPublishedFile_QueryFiles_Response::kTotalFieldNumber;
const int CPublishedFile_QueryFiles_Response::kPublishedfiledetailsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPublishedFile_QueryFiles_Response::CPublishedFile_QueryFiles_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPublishedFile_QueryFiles_Response)
}
CPublishedFile_QueryFiles_Response::CPublishedFile_QueryFiles_Response(const CPublishedFile_QueryFiles_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      publishedfiledetails_(from.publishedfiledetails_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  total_ = from.total_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPublishedFile_QueryFiles_Response)
}

void CPublishedFile_QueryFiles_Response::SharedCtor() {
  _cached_size_ = 0;
  total_ = 0u;
}

CPublishedFile_QueryFiles_Response::~CPublishedFile_QueryFiles_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CPublishedFile_QueryFiles_Response)
  SharedDtor();
}

void CPublishedFile_QueryFiles_Response::SharedDtor() {
}

void CPublishedFile_QueryFiles_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPublishedFile_QueryFiles_Response::descriptor() {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CPublishedFile_QueryFiles_Response& CPublishedFile_QueryFiles_Response::default_instance() {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CPublishedFile_QueryFiles_Response* CPublishedFile_QueryFiles_Response::New(::google::protobuf::Arena* arena) const {
  CPublishedFile_QueryFiles_Response* n = new CPublishedFile_QueryFiles_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CPublishedFile_QueryFiles_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPublishedFile_QueryFiles_Response)
  publishedfiledetails_.Clear();
  total_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CPublishedFile_QueryFiles_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPublishedFile_QueryFiles_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 total = 1 [(.proto.steam.description) = "Number of matches found, not necessarily number of items returned"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_total();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.PublishedFileDetails publishedfiledetails = 2 [(.proto.steam.description) = "Each file details will be populated, depending on what return values were requested."];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_publishedfiledetails()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPublishedFile_QueryFiles_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPublishedFile_QueryFiles_Response)
  return false;
#undef DO_
}

void CPublishedFile_QueryFiles_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPublishedFile_QueryFiles_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 total = 1 [(.proto.steam.description) = "Number of matches found, not necessarily number of items returned"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->total(), output);
  }

  // repeated .proto.steam.PublishedFileDetails publishedfiledetails = 2 [(.proto.steam.description) = "Each file details will be populated, depending on what return values were requested."];
  for (unsigned int i = 0, n = this->publishedfiledetails_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->publishedfiledetails(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPublishedFile_QueryFiles_Response)
}

::google::protobuf::uint8* CPublishedFile_QueryFiles_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPublishedFile_QueryFiles_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 total = 1 [(.proto.steam.description) = "Number of matches found, not necessarily number of items returned"];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->total(), target);
  }

  // repeated .proto.steam.PublishedFileDetails publishedfiledetails = 2 [(.proto.steam.description) = "Each file details will be populated, depending on what return values were requested."];
  for (unsigned int i = 0, n = this->publishedfiledetails_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->publishedfiledetails(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPublishedFile_QueryFiles_Response)
  return target;
}

size_t CPublishedFile_QueryFiles_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPublishedFile_QueryFiles_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.steam.PublishedFileDetails publishedfiledetails = 2 [(.proto.steam.description) = "Each file details will be populated, depending on what return values were requested."];
  {
    unsigned int count = this->publishedfiledetails_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->publishedfiledetails(i));
    }
  }

  // optional uint32 total = 1 [(.proto.steam.description) = "Number of matches found, not necessarily number of items returned"];
  if (has_total()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->total());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPublishedFile_QueryFiles_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPublishedFile_QueryFiles_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CPublishedFile_QueryFiles_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CPublishedFile_QueryFiles_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPublishedFile_QueryFiles_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPublishedFile_QueryFiles_Response)
    MergeFrom(*source);
  }
}

void CPublishedFile_QueryFiles_Response::MergeFrom(const CPublishedFile_QueryFiles_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPublishedFile_QueryFiles_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  publishedfiledetails_.MergeFrom(from.publishedfiledetails_);
  if (from.has_total()) {
    set_total(from.total());
  }
}

void CPublishedFile_QueryFiles_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPublishedFile_QueryFiles_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPublishedFile_QueryFiles_Response::CopyFrom(const CPublishedFile_QueryFiles_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPublishedFile_QueryFiles_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_QueryFiles_Response::IsInitialized() const {
  return true;
}

void CPublishedFile_QueryFiles_Response::Swap(CPublishedFile_QueryFiles_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPublishedFile_QueryFiles_Response::InternalSwap(CPublishedFile_QueryFiles_Response* other) {
  publishedfiledetails_.InternalSwap(&other->publishedfiledetails_);
  std::swap(total_, other->total_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CPublishedFile_QueryFiles_Response::GetMetadata() const {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CPublishedFile_QueryFiles_Response

// optional uint32 total = 1 [(.proto.steam.description) = "Number of matches found, not necessarily number of items returned"];
bool CPublishedFile_QueryFiles_Response::has_total() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CPublishedFile_QueryFiles_Response::set_has_total() {
  _has_bits_[0] |= 0x00000001u;
}
void CPublishedFile_QueryFiles_Response::clear_has_total() {
  _has_bits_[0] &= ~0x00000001u;
}
void CPublishedFile_QueryFiles_Response::clear_total() {
  total_ = 0u;
  clear_has_total();
}
::google::protobuf::uint32 CPublishedFile_QueryFiles_Response::total() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_QueryFiles_Response.total)
  return total_;
}
void CPublishedFile_QueryFiles_Response::set_total(::google::protobuf::uint32 value) {
  set_has_total();
  total_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_QueryFiles_Response.total)
}

// repeated .proto.steam.PublishedFileDetails publishedfiledetails = 2 [(.proto.steam.description) = "Each file details will be populated, depending on what return values were requested."];
int CPublishedFile_QueryFiles_Response::publishedfiledetails_size() const {
  return publishedfiledetails_.size();
}
void CPublishedFile_QueryFiles_Response::clear_publishedfiledetails() {
  publishedfiledetails_.Clear();
}
const ::proto::steam::PublishedFileDetails& CPublishedFile_QueryFiles_Response::publishedfiledetails(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_QueryFiles_Response.publishedfiledetails)
  return publishedfiledetails_.Get(index);
}
::proto::steam::PublishedFileDetails* CPublishedFile_QueryFiles_Response::mutable_publishedfiledetails(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CPublishedFile_QueryFiles_Response.publishedfiledetails)
  return publishedfiledetails_.Mutable(index);
}
::proto::steam::PublishedFileDetails* CPublishedFile_QueryFiles_Response::add_publishedfiledetails() {
  // @@protoc_insertion_point(field_add:proto.steam.CPublishedFile_QueryFiles_Response.publishedfiledetails)
  return publishedfiledetails_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::PublishedFileDetails >*
CPublishedFile_QueryFiles_Response::mutable_publishedfiledetails() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CPublishedFile_QueryFiles_Response.publishedfiledetails)
  return &publishedfiledetails_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::PublishedFileDetails >&
CPublishedFile_QueryFiles_Response::publishedfiledetails() const {
  // @@protoc_insertion_point(field_list:proto.steam.CPublishedFile_QueryFiles_Response.publishedfiledetails)
  return publishedfiledetails_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPublishedFile_StartPlaytimeTracking_Request::kAppidFieldNumber;
const int CPublishedFile_StartPlaytimeTracking_Request::kPublishedfileidsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPublishedFile_StartPlaytimeTracking_Request::CPublishedFile_StartPlaytimeTracking_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPublishedFile_StartPlaytimeTracking_Request)
}
CPublishedFile_StartPlaytimeTracking_Request::CPublishedFile_StartPlaytimeTracking_Request(const CPublishedFile_StartPlaytimeTracking_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      publishedfileids_(from.publishedfileids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  appid_ = from.appid_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPublishedFile_StartPlaytimeTracking_Request)
}

void CPublishedFile_StartPlaytimeTracking_Request::SharedCtor() {
  _cached_size_ = 0;
  appid_ = 0u;
}

CPublishedFile_StartPlaytimeTracking_Request::~CPublishedFile_StartPlaytimeTracking_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CPublishedFile_StartPlaytimeTracking_Request)
  SharedDtor();
}

void CPublishedFile_StartPlaytimeTracking_Request::SharedDtor() {
}

void CPublishedFile_StartPlaytimeTracking_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPublishedFile_StartPlaytimeTracking_Request::descriptor() {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CPublishedFile_StartPlaytimeTracking_Request& CPublishedFile_StartPlaytimeTracking_Request::default_instance() {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CPublishedFile_StartPlaytimeTracking_Request* CPublishedFile_StartPlaytimeTracking_Request::New(::google::protobuf::Arena* arena) const {
  CPublishedFile_StartPlaytimeTracking_Request* n = new CPublishedFile_StartPlaytimeTracking_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CPublishedFile_StartPlaytimeTracking_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPublishedFile_StartPlaytimeTracking_Request)
  publishedfileids_.Clear();
  appid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CPublishedFile_StartPlaytimeTracking_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPublishedFile_StartPlaytimeTracking_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 publishedfileids = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16u, input, this->mutable_publishedfileids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_publishedfileids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPublishedFile_StartPlaytimeTracking_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPublishedFile_StartPlaytimeTracking_Request)
  return false;
#undef DO_
}

void CPublishedFile_StartPlaytimeTracking_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPublishedFile_StartPlaytimeTracking_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // repeated uint64 publishedfileids = 2;
  for (int i = 0, n = this->publishedfileids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->publishedfileids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPublishedFile_StartPlaytimeTracking_Request)
}

::google::protobuf::uint8* CPublishedFile_StartPlaytimeTracking_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPublishedFile_StartPlaytimeTracking_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // repeated uint64 publishedfileids = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(2, this->publishedfileids_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPublishedFile_StartPlaytimeTracking_Request)
  return target;
}

size_t CPublishedFile_StartPlaytimeTracking_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPublishedFile_StartPlaytimeTracking_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint64 publishedfileids = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->publishedfileids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->publishedfileids_size());
    total_size += data_size;
  }

  // optional uint32 appid = 1;
  if (has_appid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->appid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPublishedFile_StartPlaytimeTracking_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPublishedFile_StartPlaytimeTracking_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CPublishedFile_StartPlaytimeTracking_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CPublishedFile_StartPlaytimeTracking_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPublishedFile_StartPlaytimeTracking_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPublishedFile_StartPlaytimeTracking_Request)
    MergeFrom(*source);
  }
}

void CPublishedFile_StartPlaytimeTracking_Request::MergeFrom(const CPublishedFile_StartPlaytimeTracking_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPublishedFile_StartPlaytimeTracking_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  publishedfileids_.MergeFrom(from.publishedfileids_);
  if (from.has_appid()) {
    set_appid(from.appid());
  }
}

void CPublishedFile_StartPlaytimeTracking_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPublishedFile_StartPlaytimeTracking_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPublishedFile_StartPlaytimeTracking_Request::CopyFrom(const CPublishedFile_StartPlaytimeTracking_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPublishedFile_StartPlaytimeTracking_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_StartPlaytimeTracking_Request::IsInitialized() const {
  return true;
}

void CPublishedFile_StartPlaytimeTracking_Request::Swap(CPublishedFile_StartPlaytimeTracking_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPublishedFile_StartPlaytimeTracking_Request::InternalSwap(CPublishedFile_StartPlaytimeTracking_Request* other) {
  publishedfileids_.InternalSwap(&other->publishedfileids_);
  std::swap(appid_, other->appid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CPublishedFile_StartPlaytimeTracking_Request::GetMetadata() const {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CPublishedFile_StartPlaytimeTracking_Request

// optional uint32 appid = 1;
bool CPublishedFile_StartPlaytimeTracking_Request::has_appid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CPublishedFile_StartPlaytimeTracking_Request::set_has_appid() {
  _has_bits_[0] |= 0x00000001u;
}
void CPublishedFile_StartPlaytimeTracking_Request::clear_has_appid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CPublishedFile_StartPlaytimeTracking_Request::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
::google::protobuf::uint32 CPublishedFile_StartPlaytimeTracking_Request::appid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_StartPlaytimeTracking_Request.appid)
  return appid_;
}
void CPublishedFile_StartPlaytimeTracking_Request::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_StartPlaytimeTracking_Request.appid)
}

// repeated uint64 publishedfileids = 2;
int CPublishedFile_StartPlaytimeTracking_Request::publishedfileids_size() const {
  return publishedfileids_.size();
}
void CPublishedFile_StartPlaytimeTracking_Request::clear_publishedfileids() {
  publishedfileids_.Clear();
}
::google::protobuf::uint64 CPublishedFile_StartPlaytimeTracking_Request::publishedfileids(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_StartPlaytimeTracking_Request.publishedfileids)
  return publishedfileids_.Get(index);
}
void CPublishedFile_StartPlaytimeTracking_Request::set_publishedfileids(int index, ::google::protobuf::uint64 value) {
  publishedfileids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_StartPlaytimeTracking_Request.publishedfileids)
}
void CPublishedFile_StartPlaytimeTracking_Request::add_publishedfileids(::google::protobuf::uint64 value) {
  publishedfileids_.Add(value);
  // @@protoc_insertion_point(field_add:proto.steam.CPublishedFile_StartPlaytimeTracking_Request.publishedfileids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CPublishedFile_StartPlaytimeTracking_Request::publishedfileids() const {
  // @@protoc_insertion_point(field_list:proto.steam.CPublishedFile_StartPlaytimeTracking_Request.publishedfileids)
  return publishedfileids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CPublishedFile_StartPlaytimeTracking_Request::mutable_publishedfileids() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CPublishedFile_StartPlaytimeTracking_Request.publishedfileids)
  return &publishedfileids_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPublishedFile_StartPlaytimeTracking_Response::CPublishedFile_StartPlaytimeTracking_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPublishedFile_StartPlaytimeTracking_Response)
}
CPublishedFile_StartPlaytimeTracking_Response::CPublishedFile_StartPlaytimeTracking_Response(const CPublishedFile_StartPlaytimeTracking_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPublishedFile_StartPlaytimeTracking_Response)
}

void CPublishedFile_StartPlaytimeTracking_Response::SharedCtor() {
  _cached_size_ = 0;
}

CPublishedFile_StartPlaytimeTracking_Response::~CPublishedFile_StartPlaytimeTracking_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CPublishedFile_StartPlaytimeTracking_Response)
  SharedDtor();
}

void CPublishedFile_StartPlaytimeTracking_Response::SharedDtor() {
}

void CPublishedFile_StartPlaytimeTracking_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPublishedFile_StartPlaytimeTracking_Response::descriptor() {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CPublishedFile_StartPlaytimeTracking_Response& CPublishedFile_StartPlaytimeTracking_Response::default_instance() {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CPublishedFile_StartPlaytimeTracking_Response* CPublishedFile_StartPlaytimeTracking_Response::New(::google::protobuf::Arena* arena) const {
  CPublishedFile_StartPlaytimeTracking_Response* n = new CPublishedFile_StartPlaytimeTracking_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CPublishedFile_StartPlaytimeTracking_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPublishedFile_StartPlaytimeTracking_Response)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CPublishedFile_StartPlaytimeTracking_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPublishedFile_StartPlaytimeTracking_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPublishedFile_StartPlaytimeTracking_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPublishedFile_StartPlaytimeTracking_Response)
  return false;
#undef DO_
}

void CPublishedFile_StartPlaytimeTracking_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPublishedFile_StartPlaytimeTracking_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPublishedFile_StartPlaytimeTracking_Response)
}

::google::protobuf::uint8* CPublishedFile_StartPlaytimeTracking_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPublishedFile_StartPlaytimeTracking_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPublishedFile_StartPlaytimeTracking_Response)
  return target;
}

size_t CPublishedFile_StartPlaytimeTracking_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPublishedFile_StartPlaytimeTracking_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPublishedFile_StartPlaytimeTracking_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPublishedFile_StartPlaytimeTracking_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CPublishedFile_StartPlaytimeTracking_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CPublishedFile_StartPlaytimeTracking_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPublishedFile_StartPlaytimeTracking_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPublishedFile_StartPlaytimeTracking_Response)
    MergeFrom(*source);
  }
}

void CPublishedFile_StartPlaytimeTracking_Response::MergeFrom(const CPublishedFile_StartPlaytimeTracking_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPublishedFile_StartPlaytimeTracking_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CPublishedFile_StartPlaytimeTracking_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPublishedFile_StartPlaytimeTracking_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPublishedFile_StartPlaytimeTracking_Response::CopyFrom(const CPublishedFile_StartPlaytimeTracking_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPublishedFile_StartPlaytimeTracking_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_StartPlaytimeTracking_Response::IsInitialized() const {
  return true;
}

void CPublishedFile_StartPlaytimeTracking_Response::Swap(CPublishedFile_StartPlaytimeTracking_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPublishedFile_StartPlaytimeTracking_Response::InternalSwap(CPublishedFile_StartPlaytimeTracking_Response* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CPublishedFile_StartPlaytimeTracking_Response::GetMetadata() const {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CPublishedFile_StartPlaytimeTracking_Response

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPublishedFile_StopPlaytimeTracking_Request::kAppidFieldNumber;
const int CPublishedFile_StopPlaytimeTracking_Request::kPublishedfileidsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPublishedFile_StopPlaytimeTracking_Request::CPublishedFile_StopPlaytimeTracking_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPublishedFile_StopPlaytimeTracking_Request)
}
CPublishedFile_StopPlaytimeTracking_Request::CPublishedFile_StopPlaytimeTracking_Request(const CPublishedFile_StopPlaytimeTracking_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      publishedfileids_(from.publishedfileids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  appid_ = from.appid_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPublishedFile_StopPlaytimeTracking_Request)
}

void CPublishedFile_StopPlaytimeTracking_Request::SharedCtor() {
  _cached_size_ = 0;
  appid_ = 0u;
}

CPublishedFile_StopPlaytimeTracking_Request::~CPublishedFile_StopPlaytimeTracking_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CPublishedFile_StopPlaytimeTracking_Request)
  SharedDtor();
}

void CPublishedFile_StopPlaytimeTracking_Request::SharedDtor() {
}

void CPublishedFile_StopPlaytimeTracking_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPublishedFile_StopPlaytimeTracking_Request::descriptor() {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CPublishedFile_StopPlaytimeTracking_Request& CPublishedFile_StopPlaytimeTracking_Request::default_instance() {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CPublishedFile_StopPlaytimeTracking_Request* CPublishedFile_StopPlaytimeTracking_Request::New(::google::protobuf::Arena* arena) const {
  CPublishedFile_StopPlaytimeTracking_Request* n = new CPublishedFile_StopPlaytimeTracking_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CPublishedFile_StopPlaytimeTracking_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPublishedFile_StopPlaytimeTracking_Request)
  publishedfileids_.Clear();
  appid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CPublishedFile_StopPlaytimeTracking_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPublishedFile_StopPlaytimeTracking_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 publishedfileids = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16u, input, this->mutable_publishedfileids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_publishedfileids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPublishedFile_StopPlaytimeTracking_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPublishedFile_StopPlaytimeTracking_Request)
  return false;
#undef DO_
}

void CPublishedFile_StopPlaytimeTracking_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPublishedFile_StopPlaytimeTracking_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // repeated uint64 publishedfileids = 2;
  for (int i = 0, n = this->publishedfileids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->publishedfileids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPublishedFile_StopPlaytimeTracking_Request)
}

::google::protobuf::uint8* CPublishedFile_StopPlaytimeTracking_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPublishedFile_StopPlaytimeTracking_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // repeated uint64 publishedfileids = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(2, this->publishedfileids_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPublishedFile_StopPlaytimeTracking_Request)
  return target;
}

size_t CPublishedFile_StopPlaytimeTracking_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPublishedFile_StopPlaytimeTracking_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint64 publishedfileids = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->publishedfileids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->publishedfileids_size());
    total_size += data_size;
  }

  // optional uint32 appid = 1;
  if (has_appid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->appid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPublishedFile_StopPlaytimeTracking_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPublishedFile_StopPlaytimeTracking_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CPublishedFile_StopPlaytimeTracking_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CPublishedFile_StopPlaytimeTracking_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPublishedFile_StopPlaytimeTracking_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPublishedFile_StopPlaytimeTracking_Request)
    MergeFrom(*source);
  }
}

void CPublishedFile_StopPlaytimeTracking_Request::MergeFrom(const CPublishedFile_StopPlaytimeTracking_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPublishedFile_StopPlaytimeTracking_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  publishedfileids_.MergeFrom(from.publishedfileids_);
  if (from.has_appid()) {
    set_appid(from.appid());
  }
}

void CPublishedFile_StopPlaytimeTracking_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPublishedFile_StopPlaytimeTracking_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPublishedFile_StopPlaytimeTracking_Request::CopyFrom(const CPublishedFile_StopPlaytimeTracking_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPublishedFile_StopPlaytimeTracking_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_StopPlaytimeTracking_Request::IsInitialized() const {
  return true;
}

void CPublishedFile_StopPlaytimeTracking_Request::Swap(CPublishedFile_StopPlaytimeTracking_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPublishedFile_StopPlaytimeTracking_Request::InternalSwap(CPublishedFile_StopPlaytimeTracking_Request* other) {
  publishedfileids_.InternalSwap(&other->publishedfileids_);
  std::swap(appid_, other->appid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CPublishedFile_StopPlaytimeTracking_Request::GetMetadata() const {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CPublishedFile_StopPlaytimeTracking_Request

// optional uint32 appid = 1;
bool CPublishedFile_StopPlaytimeTracking_Request::has_appid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CPublishedFile_StopPlaytimeTracking_Request::set_has_appid() {
  _has_bits_[0] |= 0x00000001u;
}
void CPublishedFile_StopPlaytimeTracking_Request::clear_has_appid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CPublishedFile_StopPlaytimeTracking_Request::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
::google::protobuf::uint32 CPublishedFile_StopPlaytimeTracking_Request::appid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_StopPlaytimeTracking_Request.appid)
  return appid_;
}
void CPublishedFile_StopPlaytimeTracking_Request::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_StopPlaytimeTracking_Request.appid)
}

// repeated uint64 publishedfileids = 2;
int CPublishedFile_StopPlaytimeTracking_Request::publishedfileids_size() const {
  return publishedfileids_.size();
}
void CPublishedFile_StopPlaytimeTracking_Request::clear_publishedfileids() {
  publishedfileids_.Clear();
}
::google::protobuf::uint64 CPublishedFile_StopPlaytimeTracking_Request::publishedfileids(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_StopPlaytimeTracking_Request.publishedfileids)
  return publishedfileids_.Get(index);
}
void CPublishedFile_StopPlaytimeTracking_Request::set_publishedfileids(int index, ::google::protobuf::uint64 value) {
  publishedfileids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_StopPlaytimeTracking_Request.publishedfileids)
}
void CPublishedFile_StopPlaytimeTracking_Request::add_publishedfileids(::google::protobuf::uint64 value) {
  publishedfileids_.Add(value);
  // @@protoc_insertion_point(field_add:proto.steam.CPublishedFile_StopPlaytimeTracking_Request.publishedfileids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CPublishedFile_StopPlaytimeTracking_Request::publishedfileids() const {
  // @@protoc_insertion_point(field_list:proto.steam.CPublishedFile_StopPlaytimeTracking_Request.publishedfileids)
  return publishedfileids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CPublishedFile_StopPlaytimeTracking_Request::mutable_publishedfileids() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CPublishedFile_StopPlaytimeTracking_Request.publishedfileids)
  return &publishedfileids_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPublishedFile_StopPlaytimeTracking_Response::CPublishedFile_StopPlaytimeTracking_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPublishedFile_StopPlaytimeTracking_Response)
}
CPublishedFile_StopPlaytimeTracking_Response::CPublishedFile_StopPlaytimeTracking_Response(const CPublishedFile_StopPlaytimeTracking_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPublishedFile_StopPlaytimeTracking_Response)
}

void CPublishedFile_StopPlaytimeTracking_Response::SharedCtor() {
  _cached_size_ = 0;
}

CPublishedFile_StopPlaytimeTracking_Response::~CPublishedFile_StopPlaytimeTracking_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CPublishedFile_StopPlaytimeTracking_Response)
  SharedDtor();
}

void CPublishedFile_StopPlaytimeTracking_Response::SharedDtor() {
}

void CPublishedFile_StopPlaytimeTracking_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPublishedFile_StopPlaytimeTracking_Response::descriptor() {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CPublishedFile_StopPlaytimeTracking_Response& CPublishedFile_StopPlaytimeTracking_Response::default_instance() {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CPublishedFile_StopPlaytimeTracking_Response* CPublishedFile_StopPlaytimeTracking_Response::New(::google::protobuf::Arena* arena) const {
  CPublishedFile_StopPlaytimeTracking_Response* n = new CPublishedFile_StopPlaytimeTracking_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CPublishedFile_StopPlaytimeTracking_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPublishedFile_StopPlaytimeTracking_Response)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CPublishedFile_StopPlaytimeTracking_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPublishedFile_StopPlaytimeTracking_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPublishedFile_StopPlaytimeTracking_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPublishedFile_StopPlaytimeTracking_Response)
  return false;
#undef DO_
}

void CPublishedFile_StopPlaytimeTracking_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPublishedFile_StopPlaytimeTracking_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPublishedFile_StopPlaytimeTracking_Response)
}

::google::protobuf::uint8* CPublishedFile_StopPlaytimeTracking_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPublishedFile_StopPlaytimeTracking_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPublishedFile_StopPlaytimeTracking_Response)
  return target;
}

size_t CPublishedFile_StopPlaytimeTracking_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPublishedFile_StopPlaytimeTracking_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPublishedFile_StopPlaytimeTracking_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPublishedFile_StopPlaytimeTracking_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CPublishedFile_StopPlaytimeTracking_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CPublishedFile_StopPlaytimeTracking_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPublishedFile_StopPlaytimeTracking_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPublishedFile_StopPlaytimeTracking_Response)
    MergeFrom(*source);
  }
}

void CPublishedFile_StopPlaytimeTracking_Response::MergeFrom(const CPublishedFile_StopPlaytimeTracking_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPublishedFile_StopPlaytimeTracking_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CPublishedFile_StopPlaytimeTracking_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPublishedFile_StopPlaytimeTracking_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPublishedFile_StopPlaytimeTracking_Response::CopyFrom(const CPublishedFile_StopPlaytimeTracking_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPublishedFile_StopPlaytimeTracking_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_StopPlaytimeTracking_Response::IsInitialized() const {
  return true;
}

void CPublishedFile_StopPlaytimeTracking_Response::Swap(CPublishedFile_StopPlaytimeTracking_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPublishedFile_StopPlaytimeTracking_Response::InternalSwap(CPublishedFile_StopPlaytimeTracking_Response* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CPublishedFile_StopPlaytimeTracking_Response::GetMetadata() const {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CPublishedFile_StopPlaytimeTracking_Response

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request::kAppidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request::CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request)
}
CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request::CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request(const CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  appid_ = from.appid_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request)
}

void CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request::SharedCtor() {
  _cached_size_ = 0;
  appid_ = 0u;
}

CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request::~CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request)
  SharedDtor();
}

void CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request::SharedDtor() {
}

void CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request::descriptor() {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request& CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request::default_instance() {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request* CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request::New(::google::protobuf::Arena* arena) const {
  CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request* n = new CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request)
  appid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request)
  return false;
#undef DO_
}

void CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request)
}

::google::protobuf::uint8* CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request)
  return target;
}

size_t CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 appid = 1;
  if (has_appid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->appid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request)
    MergeFrom(*source);
  }
}

void CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request::MergeFrom(const CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_appid()) {
    set_appid(from.appid());
  }
}

void CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request::CopyFrom(const CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request::IsInitialized() const {
  return true;
}

void CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request::Swap(CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request::InternalSwap(CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request* other) {
  std::swap(appid_, other->appid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request::GetMetadata() const {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request

// optional uint32 appid = 1;
bool CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request::has_appid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request::set_has_appid() {
  _has_bits_[0] |= 0x00000001u;
}
void CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request::clear_has_appid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
::google::protobuf::uint32 CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request::appid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request.appid)
  return appid_;
}
void CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request.appid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response::CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response)
}
CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response::CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response(const CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response)
}

void CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response::SharedCtor() {
  _cached_size_ = 0;
}

CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response::~CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response)
  SharedDtor();
}

void CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response::SharedDtor() {
}

void CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response::descriptor() {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response& CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response::default_instance() {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response* CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response::New(::google::protobuf::Arena* arena) const {
  CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response* n = new CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response)
  return false;
#undef DO_
}

void CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response)
}

::google::protobuf::uint8* CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response)
  return target;
}

size_t CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response)
    MergeFrom(*source);
  }
}

void CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response::MergeFrom(const CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response::CopyFrom(const CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response::IsInitialized() const {
  return true;
}

void CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response::Swap(CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response::InternalSwap(CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response::GetMetadata() const {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage::kPublishedfileidFieldNumber;
const int CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage::kSecondsActiveFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage::CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPublishedFile_SetPlaytimeForControllerConfigs_Request.ControllerConfigUsage)
}
CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage::CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage(const CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&publishedfileid_, &from.publishedfileid_,
    reinterpret_cast<char*>(&seconds_active_) -
    reinterpret_cast<char*>(&publishedfileid_) + sizeof(seconds_active_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPublishedFile_SetPlaytimeForControllerConfigs_Request.ControllerConfigUsage)
}

void CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&publishedfileid_, 0, reinterpret_cast<char*>(&seconds_active_) -
    reinterpret_cast<char*>(&publishedfileid_) + sizeof(seconds_active_));
}

CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage::~CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage() {
  // @@protoc_insertion_point(destructor:proto.steam.CPublishedFile_SetPlaytimeForControllerConfigs_Request.ControllerConfigUsage)
  SharedDtor();
}

void CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage::SharedDtor() {
}

void CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage::descriptor() {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage& CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage::default_instance() {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage* CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage::New(::google::protobuf::Arena* arena) const {
  CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage* n = new CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPublishedFile_SetPlaytimeForControllerConfigs_Request.ControllerConfigUsage)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&publishedfileid_, 0, reinterpret_cast<char*>(&seconds_active_) -
      reinterpret_cast<char*>(&publishedfileid_) + sizeof(seconds_active_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPublishedFile_SetPlaytimeForControllerConfigs_Request.ControllerConfigUsage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 publishedfileid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_publishedfileid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &publishedfileid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float seconds_active = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_seconds_active();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &seconds_active_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPublishedFile_SetPlaytimeForControllerConfigs_Request.ControllerConfigUsage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPublishedFile_SetPlaytimeForControllerConfigs_Request.ControllerConfigUsage)
  return false;
#undef DO_
}

void CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPublishedFile_SetPlaytimeForControllerConfigs_Request.ControllerConfigUsage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 publishedfileid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->publishedfileid(), output);
  }

  // optional float seconds_active = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->seconds_active(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPublishedFile_SetPlaytimeForControllerConfigs_Request.ControllerConfigUsage)
}

::google::protobuf::uint8* CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPublishedFile_SetPlaytimeForControllerConfigs_Request.ControllerConfigUsage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 publishedfileid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->publishedfileid(), target);
  }

  // optional float seconds_active = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->seconds_active(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPublishedFile_SetPlaytimeForControllerConfigs_Request.ControllerConfigUsage)
  return target;
}

size_t CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPublishedFile_SetPlaytimeForControllerConfigs_Request.ControllerConfigUsage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 publishedfileid = 1;
    if (has_publishedfileid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->publishedfileid());
    }

    // optional float seconds_active = 2;
    if (has_seconds_active()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPublishedFile_SetPlaytimeForControllerConfigs_Request.ControllerConfigUsage)
  GOOGLE_DCHECK_NE(&from, this);
  const CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPublishedFile_SetPlaytimeForControllerConfigs_Request.ControllerConfigUsage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPublishedFile_SetPlaytimeForControllerConfigs_Request.ControllerConfigUsage)
    MergeFrom(*source);
  }
}

void CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage::MergeFrom(const CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPublishedFile_SetPlaytimeForControllerConfigs_Request.ControllerConfigUsage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      publishedfileid_ = from.publishedfileid_;
    }
    if (cached_has_bits & 0x00000002u) {
      seconds_active_ = from.seconds_active_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPublishedFile_SetPlaytimeForControllerConfigs_Request.ControllerConfigUsage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage::CopyFrom(const CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPublishedFile_SetPlaytimeForControllerConfigs_Request.ControllerConfigUsage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage::IsInitialized() const {
  return true;
}

void CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage::Swap(CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage::InternalSwap(CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage* other) {
  std::swap(publishedfileid_, other->publishedfileid_);
  std::swap(seconds_active_, other->seconds_active_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage::GetMetadata() const {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage

// optional uint64 publishedfileid = 1;
bool CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage::has_publishedfileid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage::set_has_publishedfileid() {
  _has_bits_[0] |= 0x00000001u;
}
void CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage::clear_has_publishedfileid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage::clear_publishedfileid() {
  publishedfileid_ = GOOGLE_ULONGLONG(0);
  clear_has_publishedfileid();
}
::google::protobuf::uint64 CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage::publishedfileid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_SetPlaytimeForControllerConfigs_Request.ControllerConfigUsage.publishedfileid)
  return publishedfileid_;
}
void CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage::set_publishedfileid(::google::protobuf::uint64 value) {
  set_has_publishedfileid();
  publishedfileid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_SetPlaytimeForControllerConfigs_Request.ControllerConfigUsage.publishedfileid)
}

// optional float seconds_active = 2;
bool CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage::has_seconds_active() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage::set_has_seconds_active() {
  _has_bits_[0] |= 0x00000002u;
}
void CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage::clear_has_seconds_active() {
  _has_bits_[0] &= ~0x00000002u;
}
void CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage::clear_seconds_active() {
  seconds_active_ = 0;
  clear_has_seconds_active();
}
float CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage::seconds_active() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_SetPlaytimeForControllerConfigs_Request.ControllerConfigUsage.seconds_active)
  return seconds_active_;
}
void CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage::set_seconds_active(float value) {
  set_has_seconds_active();
  seconds_active_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_SetPlaytimeForControllerConfigs_Request.ControllerConfigUsage.seconds_active)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPublishedFile_SetPlaytimeForControllerConfigs_Request::kAppidFieldNumber;
const int CPublishedFile_SetPlaytimeForControllerConfigs_Request::kControllerConfigUsageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPublishedFile_SetPlaytimeForControllerConfigs_Request::CPublishedFile_SetPlaytimeForControllerConfigs_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPublishedFile_SetPlaytimeForControllerConfigs_Request)
}
CPublishedFile_SetPlaytimeForControllerConfigs_Request::CPublishedFile_SetPlaytimeForControllerConfigs_Request(const CPublishedFile_SetPlaytimeForControllerConfigs_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      controller_config_usage_(from.controller_config_usage_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  appid_ = from.appid_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPublishedFile_SetPlaytimeForControllerConfigs_Request)
}

void CPublishedFile_SetPlaytimeForControllerConfigs_Request::SharedCtor() {
  _cached_size_ = 0;
  appid_ = 0u;
}

CPublishedFile_SetPlaytimeForControllerConfigs_Request::~CPublishedFile_SetPlaytimeForControllerConfigs_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CPublishedFile_SetPlaytimeForControllerConfigs_Request)
  SharedDtor();
}

void CPublishedFile_SetPlaytimeForControllerConfigs_Request::SharedDtor() {
}

void CPublishedFile_SetPlaytimeForControllerConfigs_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPublishedFile_SetPlaytimeForControllerConfigs_Request::descriptor() {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CPublishedFile_SetPlaytimeForControllerConfigs_Request& CPublishedFile_SetPlaytimeForControllerConfigs_Request::default_instance() {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CPublishedFile_SetPlaytimeForControllerConfigs_Request* CPublishedFile_SetPlaytimeForControllerConfigs_Request::New(::google::protobuf::Arena* arena) const {
  CPublishedFile_SetPlaytimeForControllerConfigs_Request* n = new CPublishedFile_SetPlaytimeForControllerConfigs_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CPublishedFile_SetPlaytimeForControllerConfigs_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPublishedFile_SetPlaytimeForControllerConfigs_Request)
  controller_config_usage_.Clear();
  appid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CPublishedFile_SetPlaytimeForControllerConfigs_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPublishedFile_SetPlaytimeForControllerConfigs_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CPublishedFile_SetPlaytimeForControllerConfigs_Request.ControllerConfigUsage controller_config_usage = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_controller_config_usage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPublishedFile_SetPlaytimeForControllerConfigs_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPublishedFile_SetPlaytimeForControllerConfigs_Request)
  return false;
#undef DO_
}

void CPublishedFile_SetPlaytimeForControllerConfigs_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPublishedFile_SetPlaytimeForControllerConfigs_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  // repeated .proto.steam.CPublishedFile_SetPlaytimeForControllerConfigs_Request.ControllerConfigUsage controller_config_usage = 2;
  for (unsigned int i = 0, n = this->controller_config_usage_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->controller_config_usage(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPublishedFile_SetPlaytimeForControllerConfigs_Request)
}

::google::protobuf::uint8* CPublishedFile_SetPlaytimeForControllerConfigs_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPublishedFile_SetPlaytimeForControllerConfigs_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  // repeated .proto.steam.CPublishedFile_SetPlaytimeForControllerConfigs_Request.ControllerConfigUsage controller_config_usage = 2;
  for (unsigned int i = 0, n = this->controller_config_usage_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->controller_config_usage(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPublishedFile_SetPlaytimeForControllerConfigs_Request)
  return target;
}

size_t CPublishedFile_SetPlaytimeForControllerConfigs_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPublishedFile_SetPlaytimeForControllerConfigs_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.steam.CPublishedFile_SetPlaytimeForControllerConfigs_Request.ControllerConfigUsage controller_config_usage = 2;
  {
    unsigned int count = this->controller_config_usage_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->controller_config_usage(i));
    }
  }

  // optional uint32 appid = 1;
  if (has_appid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->appid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPublishedFile_SetPlaytimeForControllerConfigs_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPublishedFile_SetPlaytimeForControllerConfigs_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CPublishedFile_SetPlaytimeForControllerConfigs_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CPublishedFile_SetPlaytimeForControllerConfigs_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPublishedFile_SetPlaytimeForControllerConfigs_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPublishedFile_SetPlaytimeForControllerConfigs_Request)
    MergeFrom(*source);
  }
}

void CPublishedFile_SetPlaytimeForControllerConfigs_Request::MergeFrom(const CPublishedFile_SetPlaytimeForControllerConfigs_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPublishedFile_SetPlaytimeForControllerConfigs_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  controller_config_usage_.MergeFrom(from.controller_config_usage_);
  if (from.has_appid()) {
    set_appid(from.appid());
  }
}

void CPublishedFile_SetPlaytimeForControllerConfigs_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPublishedFile_SetPlaytimeForControllerConfigs_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPublishedFile_SetPlaytimeForControllerConfigs_Request::CopyFrom(const CPublishedFile_SetPlaytimeForControllerConfigs_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPublishedFile_SetPlaytimeForControllerConfigs_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_SetPlaytimeForControllerConfigs_Request::IsInitialized() const {
  return true;
}

void CPublishedFile_SetPlaytimeForControllerConfigs_Request::Swap(CPublishedFile_SetPlaytimeForControllerConfigs_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPublishedFile_SetPlaytimeForControllerConfigs_Request::InternalSwap(CPublishedFile_SetPlaytimeForControllerConfigs_Request* other) {
  controller_config_usage_.InternalSwap(&other->controller_config_usage_);
  std::swap(appid_, other->appid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CPublishedFile_SetPlaytimeForControllerConfigs_Request::GetMetadata() const {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CPublishedFile_SetPlaytimeForControllerConfigs_Request

// optional uint32 appid = 1;
bool CPublishedFile_SetPlaytimeForControllerConfigs_Request::has_appid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CPublishedFile_SetPlaytimeForControllerConfigs_Request::set_has_appid() {
  _has_bits_[0] |= 0x00000001u;
}
void CPublishedFile_SetPlaytimeForControllerConfigs_Request::clear_has_appid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CPublishedFile_SetPlaytimeForControllerConfigs_Request::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
::google::protobuf::uint32 CPublishedFile_SetPlaytimeForControllerConfigs_Request::appid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_SetPlaytimeForControllerConfigs_Request.appid)
  return appid_;
}
void CPublishedFile_SetPlaytimeForControllerConfigs_Request::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_SetPlaytimeForControllerConfigs_Request.appid)
}

// repeated .proto.steam.CPublishedFile_SetPlaytimeForControllerConfigs_Request.ControllerConfigUsage controller_config_usage = 2;
int CPublishedFile_SetPlaytimeForControllerConfigs_Request::controller_config_usage_size() const {
  return controller_config_usage_.size();
}
void CPublishedFile_SetPlaytimeForControllerConfigs_Request::clear_controller_config_usage() {
  controller_config_usage_.Clear();
}
const ::proto::steam::CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage& CPublishedFile_SetPlaytimeForControllerConfigs_Request::controller_config_usage(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_SetPlaytimeForControllerConfigs_Request.controller_config_usage)
  return controller_config_usage_.Get(index);
}
::proto::steam::CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage* CPublishedFile_SetPlaytimeForControllerConfigs_Request::mutable_controller_config_usage(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CPublishedFile_SetPlaytimeForControllerConfigs_Request.controller_config_usage)
  return controller_config_usage_.Mutable(index);
}
::proto::steam::CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage* CPublishedFile_SetPlaytimeForControllerConfigs_Request::add_controller_config_usage() {
  // @@protoc_insertion_point(field_add:proto.steam.CPublishedFile_SetPlaytimeForControllerConfigs_Request.controller_config_usage)
  return controller_config_usage_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage >*
CPublishedFile_SetPlaytimeForControllerConfigs_Request::mutable_controller_config_usage() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CPublishedFile_SetPlaytimeForControllerConfigs_Request.controller_config_usage)
  return &controller_config_usage_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::CPublishedFile_SetPlaytimeForControllerConfigs_Request_ControllerConfigUsage >&
CPublishedFile_SetPlaytimeForControllerConfigs_Request::controller_config_usage() const {
  // @@protoc_insertion_point(field_list:proto.steam.CPublishedFile_SetPlaytimeForControllerConfigs_Request.controller_config_usage)
  return controller_config_usage_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPublishedFile_SetPlaytimeForControllerConfigs_Response::CPublishedFile_SetPlaytimeForControllerConfigs_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPublishedFile_SetPlaytimeForControllerConfigs_Response)
}
CPublishedFile_SetPlaytimeForControllerConfigs_Response::CPublishedFile_SetPlaytimeForControllerConfigs_Response(const CPublishedFile_SetPlaytimeForControllerConfigs_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPublishedFile_SetPlaytimeForControllerConfigs_Response)
}

void CPublishedFile_SetPlaytimeForControllerConfigs_Response::SharedCtor() {
  _cached_size_ = 0;
}

CPublishedFile_SetPlaytimeForControllerConfigs_Response::~CPublishedFile_SetPlaytimeForControllerConfigs_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CPublishedFile_SetPlaytimeForControllerConfigs_Response)
  SharedDtor();
}

void CPublishedFile_SetPlaytimeForControllerConfigs_Response::SharedDtor() {
}

void CPublishedFile_SetPlaytimeForControllerConfigs_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPublishedFile_SetPlaytimeForControllerConfigs_Response::descriptor() {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CPublishedFile_SetPlaytimeForControllerConfigs_Response& CPublishedFile_SetPlaytimeForControllerConfigs_Response::default_instance() {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CPublishedFile_SetPlaytimeForControllerConfigs_Response* CPublishedFile_SetPlaytimeForControllerConfigs_Response::New(::google::protobuf::Arena* arena) const {
  CPublishedFile_SetPlaytimeForControllerConfigs_Response* n = new CPublishedFile_SetPlaytimeForControllerConfigs_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CPublishedFile_SetPlaytimeForControllerConfigs_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPublishedFile_SetPlaytimeForControllerConfigs_Response)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CPublishedFile_SetPlaytimeForControllerConfigs_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPublishedFile_SetPlaytimeForControllerConfigs_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPublishedFile_SetPlaytimeForControllerConfigs_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPublishedFile_SetPlaytimeForControllerConfigs_Response)
  return false;
#undef DO_
}

void CPublishedFile_SetPlaytimeForControllerConfigs_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPublishedFile_SetPlaytimeForControllerConfigs_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPublishedFile_SetPlaytimeForControllerConfigs_Response)
}

::google::protobuf::uint8* CPublishedFile_SetPlaytimeForControllerConfigs_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPublishedFile_SetPlaytimeForControllerConfigs_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPublishedFile_SetPlaytimeForControllerConfigs_Response)
  return target;
}

size_t CPublishedFile_SetPlaytimeForControllerConfigs_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPublishedFile_SetPlaytimeForControllerConfigs_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPublishedFile_SetPlaytimeForControllerConfigs_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPublishedFile_SetPlaytimeForControllerConfigs_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CPublishedFile_SetPlaytimeForControllerConfigs_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CPublishedFile_SetPlaytimeForControllerConfigs_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPublishedFile_SetPlaytimeForControllerConfigs_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPublishedFile_SetPlaytimeForControllerConfigs_Response)
    MergeFrom(*source);
  }
}

void CPublishedFile_SetPlaytimeForControllerConfigs_Response::MergeFrom(const CPublishedFile_SetPlaytimeForControllerConfigs_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPublishedFile_SetPlaytimeForControllerConfigs_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CPublishedFile_SetPlaytimeForControllerConfigs_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPublishedFile_SetPlaytimeForControllerConfigs_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPublishedFile_SetPlaytimeForControllerConfigs_Response::CopyFrom(const CPublishedFile_SetPlaytimeForControllerConfigs_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPublishedFile_SetPlaytimeForControllerConfigs_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_SetPlaytimeForControllerConfigs_Response::IsInitialized() const {
  return true;
}

void CPublishedFile_SetPlaytimeForControllerConfigs_Response::Swap(CPublishedFile_SetPlaytimeForControllerConfigs_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPublishedFile_SetPlaytimeForControllerConfigs_Response::InternalSwap(CPublishedFile_SetPlaytimeForControllerConfigs_Response* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CPublishedFile_SetPlaytimeForControllerConfigs_Response::GetMetadata() const {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CPublishedFile_SetPlaytimeForControllerConfigs_Response

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPublishedFile_AddChild_Request::kPublishedfileidFieldNumber;
const int CPublishedFile_AddChild_Request::kChildPublishedfileidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPublishedFile_AddChild_Request::CPublishedFile_AddChild_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPublishedFile_AddChild_Request)
}
CPublishedFile_AddChild_Request::CPublishedFile_AddChild_Request(const CPublishedFile_AddChild_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&publishedfileid_, &from.publishedfileid_,
    reinterpret_cast<char*>(&child_publishedfileid_) -
    reinterpret_cast<char*>(&publishedfileid_) + sizeof(child_publishedfileid_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPublishedFile_AddChild_Request)
}

void CPublishedFile_AddChild_Request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&publishedfileid_, 0, reinterpret_cast<char*>(&child_publishedfileid_) -
    reinterpret_cast<char*>(&publishedfileid_) + sizeof(child_publishedfileid_));
}

CPublishedFile_AddChild_Request::~CPublishedFile_AddChild_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CPublishedFile_AddChild_Request)
  SharedDtor();
}

void CPublishedFile_AddChild_Request::SharedDtor() {
}

void CPublishedFile_AddChild_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPublishedFile_AddChild_Request::descriptor() {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CPublishedFile_AddChild_Request& CPublishedFile_AddChild_Request::default_instance() {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CPublishedFile_AddChild_Request* CPublishedFile_AddChild_Request::New(::google::protobuf::Arena* arena) const {
  CPublishedFile_AddChild_Request* n = new CPublishedFile_AddChild_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CPublishedFile_AddChild_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPublishedFile_AddChild_Request)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&publishedfileid_, 0, reinterpret_cast<char*>(&child_publishedfileid_) -
      reinterpret_cast<char*>(&publishedfileid_) + sizeof(child_publishedfileid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CPublishedFile_AddChild_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPublishedFile_AddChild_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 publishedfileid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_publishedfileid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &publishedfileid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 child_publishedfileid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_child_publishedfileid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &child_publishedfileid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPublishedFile_AddChild_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPublishedFile_AddChild_Request)
  return false;
#undef DO_
}

void CPublishedFile_AddChild_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPublishedFile_AddChild_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 publishedfileid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->publishedfileid(), output);
  }

  // optional uint64 child_publishedfileid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->child_publishedfileid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPublishedFile_AddChild_Request)
}

::google::protobuf::uint8* CPublishedFile_AddChild_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPublishedFile_AddChild_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 publishedfileid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->publishedfileid(), target);
  }

  // optional uint64 child_publishedfileid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->child_publishedfileid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPublishedFile_AddChild_Request)
  return target;
}

size_t CPublishedFile_AddChild_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPublishedFile_AddChild_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 publishedfileid = 1;
    if (has_publishedfileid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->publishedfileid());
    }

    // optional uint64 child_publishedfileid = 2;
    if (has_child_publishedfileid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->child_publishedfileid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPublishedFile_AddChild_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPublishedFile_AddChild_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CPublishedFile_AddChild_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CPublishedFile_AddChild_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPublishedFile_AddChild_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPublishedFile_AddChild_Request)
    MergeFrom(*source);
  }
}

void CPublishedFile_AddChild_Request::MergeFrom(const CPublishedFile_AddChild_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPublishedFile_AddChild_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      publishedfileid_ = from.publishedfileid_;
    }
    if (cached_has_bits & 0x00000002u) {
      child_publishedfileid_ = from.child_publishedfileid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CPublishedFile_AddChild_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPublishedFile_AddChild_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPublishedFile_AddChild_Request::CopyFrom(const CPublishedFile_AddChild_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPublishedFile_AddChild_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_AddChild_Request::IsInitialized() const {
  return true;
}

void CPublishedFile_AddChild_Request::Swap(CPublishedFile_AddChild_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPublishedFile_AddChild_Request::InternalSwap(CPublishedFile_AddChild_Request* other) {
  std::swap(publishedfileid_, other->publishedfileid_);
  std::swap(child_publishedfileid_, other->child_publishedfileid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CPublishedFile_AddChild_Request::GetMetadata() const {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CPublishedFile_AddChild_Request

// optional uint64 publishedfileid = 1;
bool CPublishedFile_AddChild_Request::has_publishedfileid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CPublishedFile_AddChild_Request::set_has_publishedfileid() {
  _has_bits_[0] |= 0x00000001u;
}
void CPublishedFile_AddChild_Request::clear_has_publishedfileid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CPublishedFile_AddChild_Request::clear_publishedfileid() {
  publishedfileid_ = GOOGLE_ULONGLONG(0);
  clear_has_publishedfileid();
}
::google::protobuf::uint64 CPublishedFile_AddChild_Request::publishedfileid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_AddChild_Request.publishedfileid)
  return publishedfileid_;
}
void CPublishedFile_AddChild_Request::set_publishedfileid(::google::protobuf::uint64 value) {
  set_has_publishedfileid();
  publishedfileid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_AddChild_Request.publishedfileid)
}

// optional uint64 child_publishedfileid = 2;
bool CPublishedFile_AddChild_Request::has_child_publishedfileid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CPublishedFile_AddChild_Request::set_has_child_publishedfileid() {
  _has_bits_[0] |= 0x00000002u;
}
void CPublishedFile_AddChild_Request::clear_has_child_publishedfileid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CPublishedFile_AddChild_Request::clear_child_publishedfileid() {
  child_publishedfileid_ = GOOGLE_ULONGLONG(0);
  clear_has_child_publishedfileid();
}
::google::protobuf::uint64 CPublishedFile_AddChild_Request::child_publishedfileid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_AddChild_Request.child_publishedfileid)
  return child_publishedfileid_;
}
void CPublishedFile_AddChild_Request::set_child_publishedfileid(::google::protobuf::uint64 value) {
  set_has_child_publishedfileid();
  child_publishedfileid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_AddChild_Request.child_publishedfileid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPublishedFile_AddChild_Response::CPublishedFile_AddChild_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPublishedFile_AddChild_Response)
}
CPublishedFile_AddChild_Response::CPublishedFile_AddChild_Response(const CPublishedFile_AddChild_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPublishedFile_AddChild_Response)
}

void CPublishedFile_AddChild_Response::SharedCtor() {
  _cached_size_ = 0;
}

CPublishedFile_AddChild_Response::~CPublishedFile_AddChild_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CPublishedFile_AddChild_Response)
  SharedDtor();
}

void CPublishedFile_AddChild_Response::SharedDtor() {
}

void CPublishedFile_AddChild_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPublishedFile_AddChild_Response::descriptor() {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CPublishedFile_AddChild_Response& CPublishedFile_AddChild_Response::default_instance() {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CPublishedFile_AddChild_Response* CPublishedFile_AddChild_Response::New(::google::protobuf::Arena* arena) const {
  CPublishedFile_AddChild_Response* n = new CPublishedFile_AddChild_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CPublishedFile_AddChild_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPublishedFile_AddChild_Response)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CPublishedFile_AddChild_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPublishedFile_AddChild_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPublishedFile_AddChild_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPublishedFile_AddChild_Response)
  return false;
#undef DO_
}

void CPublishedFile_AddChild_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPublishedFile_AddChild_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPublishedFile_AddChild_Response)
}

::google::protobuf::uint8* CPublishedFile_AddChild_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPublishedFile_AddChild_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPublishedFile_AddChild_Response)
  return target;
}

size_t CPublishedFile_AddChild_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPublishedFile_AddChild_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPublishedFile_AddChild_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPublishedFile_AddChild_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CPublishedFile_AddChild_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CPublishedFile_AddChild_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPublishedFile_AddChild_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPublishedFile_AddChild_Response)
    MergeFrom(*source);
  }
}

void CPublishedFile_AddChild_Response::MergeFrom(const CPublishedFile_AddChild_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPublishedFile_AddChild_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CPublishedFile_AddChild_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPublishedFile_AddChild_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPublishedFile_AddChild_Response::CopyFrom(const CPublishedFile_AddChild_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPublishedFile_AddChild_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_AddChild_Response::IsInitialized() const {
  return true;
}

void CPublishedFile_AddChild_Response::Swap(CPublishedFile_AddChild_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPublishedFile_AddChild_Response::InternalSwap(CPublishedFile_AddChild_Response* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CPublishedFile_AddChild_Response::GetMetadata() const {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CPublishedFile_AddChild_Response

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPublishedFile_RemoveChild_Request::kPublishedfileidFieldNumber;
const int CPublishedFile_RemoveChild_Request::kChildPublishedfileidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPublishedFile_RemoveChild_Request::CPublishedFile_RemoveChild_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPublishedFile_RemoveChild_Request)
}
CPublishedFile_RemoveChild_Request::CPublishedFile_RemoveChild_Request(const CPublishedFile_RemoveChild_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&publishedfileid_, &from.publishedfileid_,
    reinterpret_cast<char*>(&child_publishedfileid_) -
    reinterpret_cast<char*>(&publishedfileid_) + sizeof(child_publishedfileid_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPublishedFile_RemoveChild_Request)
}

void CPublishedFile_RemoveChild_Request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&publishedfileid_, 0, reinterpret_cast<char*>(&child_publishedfileid_) -
    reinterpret_cast<char*>(&publishedfileid_) + sizeof(child_publishedfileid_));
}

CPublishedFile_RemoveChild_Request::~CPublishedFile_RemoveChild_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CPublishedFile_RemoveChild_Request)
  SharedDtor();
}

void CPublishedFile_RemoveChild_Request::SharedDtor() {
}

void CPublishedFile_RemoveChild_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPublishedFile_RemoveChild_Request::descriptor() {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CPublishedFile_RemoveChild_Request& CPublishedFile_RemoveChild_Request::default_instance() {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CPublishedFile_RemoveChild_Request* CPublishedFile_RemoveChild_Request::New(::google::protobuf::Arena* arena) const {
  CPublishedFile_RemoveChild_Request* n = new CPublishedFile_RemoveChild_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CPublishedFile_RemoveChild_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPublishedFile_RemoveChild_Request)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&publishedfileid_, 0, reinterpret_cast<char*>(&child_publishedfileid_) -
      reinterpret_cast<char*>(&publishedfileid_) + sizeof(child_publishedfileid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CPublishedFile_RemoveChild_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPublishedFile_RemoveChild_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 publishedfileid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_publishedfileid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &publishedfileid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 child_publishedfileid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_child_publishedfileid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &child_publishedfileid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPublishedFile_RemoveChild_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPublishedFile_RemoveChild_Request)
  return false;
#undef DO_
}

void CPublishedFile_RemoveChild_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPublishedFile_RemoveChild_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 publishedfileid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->publishedfileid(), output);
  }

  // optional uint64 child_publishedfileid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->child_publishedfileid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPublishedFile_RemoveChild_Request)
}

::google::protobuf::uint8* CPublishedFile_RemoveChild_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPublishedFile_RemoveChild_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 publishedfileid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->publishedfileid(), target);
  }

  // optional uint64 child_publishedfileid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->child_publishedfileid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPublishedFile_RemoveChild_Request)
  return target;
}

size_t CPublishedFile_RemoveChild_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPublishedFile_RemoveChild_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 publishedfileid = 1;
    if (has_publishedfileid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->publishedfileid());
    }

    // optional uint64 child_publishedfileid = 2;
    if (has_child_publishedfileid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->child_publishedfileid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPublishedFile_RemoveChild_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPublishedFile_RemoveChild_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CPublishedFile_RemoveChild_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CPublishedFile_RemoveChild_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPublishedFile_RemoveChild_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPublishedFile_RemoveChild_Request)
    MergeFrom(*source);
  }
}

void CPublishedFile_RemoveChild_Request::MergeFrom(const CPublishedFile_RemoveChild_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPublishedFile_RemoveChild_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      publishedfileid_ = from.publishedfileid_;
    }
    if (cached_has_bits & 0x00000002u) {
      child_publishedfileid_ = from.child_publishedfileid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CPublishedFile_RemoveChild_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPublishedFile_RemoveChild_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPublishedFile_RemoveChild_Request::CopyFrom(const CPublishedFile_RemoveChild_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPublishedFile_RemoveChild_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_RemoveChild_Request::IsInitialized() const {
  return true;
}

void CPublishedFile_RemoveChild_Request::Swap(CPublishedFile_RemoveChild_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPublishedFile_RemoveChild_Request::InternalSwap(CPublishedFile_RemoveChild_Request* other) {
  std::swap(publishedfileid_, other->publishedfileid_);
  std::swap(child_publishedfileid_, other->child_publishedfileid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CPublishedFile_RemoveChild_Request::GetMetadata() const {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CPublishedFile_RemoveChild_Request

// optional uint64 publishedfileid = 1;
bool CPublishedFile_RemoveChild_Request::has_publishedfileid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CPublishedFile_RemoveChild_Request::set_has_publishedfileid() {
  _has_bits_[0] |= 0x00000001u;
}
void CPublishedFile_RemoveChild_Request::clear_has_publishedfileid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CPublishedFile_RemoveChild_Request::clear_publishedfileid() {
  publishedfileid_ = GOOGLE_ULONGLONG(0);
  clear_has_publishedfileid();
}
::google::protobuf::uint64 CPublishedFile_RemoveChild_Request::publishedfileid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_RemoveChild_Request.publishedfileid)
  return publishedfileid_;
}
void CPublishedFile_RemoveChild_Request::set_publishedfileid(::google::protobuf::uint64 value) {
  set_has_publishedfileid();
  publishedfileid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_RemoveChild_Request.publishedfileid)
}

// optional uint64 child_publishedfileid = 2;
bool CPublishedFile_RemoveChild_Request::has_child_publishedfileid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CPublishedFile_RemoveChild_Request::set_has_child_publishedfileid() {
  _has_bits_[0] |= 0x00000002u;
}
void CPublishedFile_RemoveChild_Request::clear_has_child_publishedfileid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CPublishedFile_RemoveChild_Request::clear_child_publishedfileid() {
  child_publishedfileid_ = GOOGLE_ULONGLONG(0);
  clear_has_child_publishedfileid();
}
::google::protobuf::uint64 CPublishedFile_RemoveChild_Request::child_publishedfileid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPublishedFile_RemoveChild_Request.child_publishedfileid)
  return child_publishedfileid_;
}
void CPublishedFile_RemoveChild_Request::set_child_publishedfileid(::google::protobuf::uint64 value) {
  set_has_child_publishedfileid();
  child_publishedfileid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPublishedFile_RemoveChild_Request.child_publishedfileid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPublishedFile_RemoveChild_Response::CPublishedFile_RemoveChild_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPublishedFile_RemoveChild_Response)
}
CPublishedFile_RemoveChild_Response::CPublishedFile_RemoveChild_Response(const CPublishedFile_RemoveChild_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPublishedFile_RemoveChild_Response)
}

void CPublishedFile_RemoveChild_Response::SharedCtor() {
  _cached_size_ = 0;
}

CPublishedFile_RemoveChild_Response::~CPublishedFile_RemoveChild_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CPublishedFile_RemoveChild_Response)
  SharedDtor();
}

void CPublishedFile_RemoveChild_Response::SharedDtor() {
}

void CPublishedFile_RemoveChild_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPublishedFile_RemoveChild_Response::descriptor() {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CPublishedFile_RemoveChild_Response& CPublishedFile_RemoveChild_Response::default_instance() {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CPublishedFile_RemoveChild_Response* CPublishedFile_RemoveChild_Response::New(::google::protobuf::Arena* arena) const {
  CPublishedFile_RemoveChild_Response* n = new CPublishedFile_RemoveChild_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CPublishedFile_RemoveChild_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPublishedFile_RemoveChild_Response)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CPublishedFile_RemoveChild_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPublishedFile_RemoveChild_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPublishedFile_RemoveChild_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPublishedFile_RemoveChild_Response)
  return false;
#undef DO_
}

void CPublishedFile_RemoveChild_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPublishedFile_RemoveChild_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPublishedFile_RemoveChild_Response)
}

::google::protobuf::uint8* CPublishedFile_RemoveChild_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPublishedFile_RemoveChild_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPublishedFile_RemoveChild_Response)
  return target;
}

size_t CPublishedFile_RemoveChild_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPublishedFile_RemoveChild_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPublishedFile_RemoveChild_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPublishedFile_RemoveChild_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CPublishedFile_RemoveChild_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CPublishedFile_RemoveChild_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPublishedFile_RemoveChild_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPublishedFile_RemoveChild_Response)
    MergeFrom(*source);
  }
}

void CPublishedFile_RemoveChild_Response::MergeFrom(const CPublishedFile_RemoveChild_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPublishedFile_RemoveChild_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CPublishedFile_RemoveChild_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPublishedFile_RemoveChild_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPublishedFile_RemoveChild_Response::CopyFrom(const CPublishedFile_RemoveChild_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPublishedFile_RemoveChild_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPublishedFile_RemoveChild_Response::IsInitialized() const {
  return true;
}

void CPublishedFile_RemoveChild_Response::Swap(CPublishedFile_RemoveChild_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPublishedFile_RemoveChild_Response::InternalSwap(CPublishedFile_RemoveChild_Response* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CPublishedFile_RemoveChild_Response::GetMetadata() const {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CPublishedFile_RemoveChild_Response

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

PublishedFile::~PublishedFile() {}

const ::google::protobuf::ServiceDescriptor* PublishedFile::descriptor() {
  protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_service_descriptors[0];
}

const ::google::protobuf::ServiceDescriptor* PublishedFile::GetDescriptor() {
  return descriptor();
}

void PublishedFile::Subscribe(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CPublishedFile_Subscribe_Request*,
                         ::proto::steam::CPublishedFile_Subscribe_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Subscribe() not implemented.");
  done->Run();
}

void PublishedFile::Unsubscribe(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CPublishedFile_Unsubscribe_Request*,
                         ::proto::steam::CPublishedFile_Unsubscribe_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Unsubscribe() not implemented.");
  done->Run();
}

void PublishedFile::CanSubscribe(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CPublishedFile_CanSubscribe_Request*,
                         ::proto::steam::CPublishedFile_CanSubscribe_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method CanSubscribe() not implemented.");
  done->Run();
}

void PublishedFile::Publish(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CPublishedFile_Publish_Request*,
                         ::proto::steam::CPublishedFile_Publish_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Publish() not implemented.");
  done->Run();
}

void PublishedFile::GetDetails(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CPublishedFile_GetDetails_Request*,
                         ::proto::steam::CPublishedFile_GetDetails_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetDetails() not implemented.");
  done->Run();
}

void PublishedFile::GetItemInfo(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CPublishedFile_GetItemInfo_Request*,
                         ::proto::steam::CPublishedFile_GetItemInfo_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetItemInfo() not implemented.");
  done->Run();
}

void PublishedFile::GetUserFiles(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CPublishedFile_GetUserFiles_Request*,
                         ::proto::steam::CPublishedFile_GetUserFiles_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetUserFiles() not implemented.");
  done->Run();
}

void PublishedFile::Update(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CPublishedFile_Update_Request*,
                         ::proto::steam::CPublishedFile_Update_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Update() not implemented.");
  done->Run();
}

void PublishedFile::GetChangeHistoryEntry(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CPublishedFile_GetChangeHistoryEntry_Request*,
                         ::proto::steam::CPublishedFile_GetChangeHistoryEntry_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetChangeHistoryEntry() not implemented.");
  done->Run();
}

void PublishedFile::GetChangeHistory(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CPublishedFile_GetChangeHistory_Request*,
                         ::proto::steam::CPublishedFile_GetChangeHistory_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetChangeHistory() not implemented.");
  done->Run();
}

void PublishedFile::RefreshVotingQueue(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CPublishedFile_RefreshVotingQueue_Request*,
                         ::proto::steam::CPublishedFile_RefreshVotingQueue_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method RefreshVotingQueue() not implemented.");
  done->Run();
}

void PublishedFile::QueryFiles(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CPublishedFile_QueryFiles_Request*,
                         ::proto::steam::CPublishedFile_QueryFiles_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method QueryFiles() not implemented.");
  done->Run();
}

void PublishedFile::StartPlaytimeTracking(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CPublishedFile_StartPlaytimeTracking_Request*,
                         ::proto::steam::CPublishedFile_StartPlaytimeTracking_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method StartPlaytimeTracking() not implemented.");
  done->Run();
}

void PublishedFile::StopPlaytimeTracking(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CPublishedFile_StopPlaytimeTracking_Request*,
                         ::proto::steam::CPublishedFile_StopPlaytimeTracking_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method StopPlaytimeTracking() not implemented.");
  done->Run();
}

void PublishedFile::StopPlaytimeTrackingForAllAppItems(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request*,
                         ::proto::steam::CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method StopPlaytimeTrackingForAllAppItems() not implemented.");
  done->Run();
}

void PublishedFile::SetPlaytimeForControllerConfigs(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CPublishedFile_SetPlaytimeForControllerConfigs_Request*,
                         ::proto::steam::CPublishedFile_SetPlaytimeForControllerConfigs_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SetPlaytimeForControllerConfigs() not implemented.");
  done->Run();
}

void PublishedFile::AddChild(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CPublishedFile_AddChild_Request*,
                         ::proto::steam::CPublishedFile_AddChild_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method AddChild() not implemented.");
  done->Run();
}

void PublishedFile::RemoveChild(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CPublishedFile_RemoveChild_Request*,
                         ::proto::steam::CPublishedFile_RemoveChild_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method RemoveChild() not implemented.");
  done->Run();
}

void PublishedFile::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), protobuf_steammessages_5fpublishedfile_2esteamclient_2eproto::file_level_service_descriptors[0]);
  switch(method->index()) {
    case 0:
      Subscribe(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CPublishedFile_Subscribe_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CPublishedFile_Subscribe_Response*>(response),
             done);
      break;
    case 1:
      Unsubscribe(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CPublishedFile_Unsubscribe_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CPublishedFile_Unsubscribe_Response*>(response),
             done);
      break;
    case 2:
      CanSubscribe(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CPublishedFile_CanSubscribe_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CPublishedFile_CanSubscribe_Response*>(response),
             done);
      break;
    case 3:
      Publish(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CPublishedFile_Publish_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CPublishedFile_Publish_Response*>(response),
             done);
      break;
    case 4:
      GetDetails(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CPublishedFile_GetDetails_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CPublishedFile_GetDetails_Response*>(response),
             done);
      break;
    case 5:
      GetItemInfo(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CPublishedFile_GetItemInfo_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CPublishedFile_GetItemInfo_Response*>(response),
             done);
      break;
    case 6:
      GetUserFiles(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CPublishedFile_GetUserFiles_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CPublishedFile_GetUserFiles_Response*>(response),
             done);
      break;
    case 7:
      Update(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CPublishedFile_Update_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CPublishedFile_Update_Response*>(response),
             done);
      break;
    case 8:
      GetChangeHistoryEntry(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CPublishedFile_GetChangeHistoryEntry_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CPublishedFile_GetChangeHistoryEntry_Response*>(response),
             done);
      break;
    case 9:
      GetChangeHistory(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CPublishedFile_GetChangeHistory_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CPublishedFile_GetChangeHistory_Response*>(response),
             done);
      break;
    case 10:
      RefreshVotingQueue(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CPublishedFile_RefreshVotingQueue_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CPublishedFile_RefreshVotingQueue_Response*>(response),
             done);
      break;
    case 11:
      QueryFiles(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CPublishedFile_QueryFiles_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CPublishedFile_QueryFiles_Response*>(response),
             done);
      break;
    case 12:
      StartPlaytimeTracking(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CPublishedFile_StartPlaytimeTracking_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CPublishedFile_StartPlaytimeTracking_Response*>(response),
             done);
      break;
    case 13:
      StopPlaytimeTracking(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CPublishedFile_StopPlaytimeTracking_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CPublishedFile_StopPlaytimeTracking_Response*>(response),
             done);
      break;
    case 14:
      StopPlaytimeTrackingForAllAppItems(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response*>(response),
             done);
      break;
    case 15:
      SetPlaytimeForControllerConfigs(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CPublishedFile_SetPlaytimeForControllerConfigs_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CPublishedFile_SetPlaytimeForControllerConfigs_Response*>(response),
             done);
      break;
    case 16:
      AddChild(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CPublishedFile_AddChild_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CPublishedFile_AddChild_Response*>(response),
             done);
      break;
    case 17:
      RemoveChild(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CPublishedFile_RemoveChild_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CPublishedFile_RemoveChild_Response*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& PublishedFile::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::steam::CPublishedFile_Subscribe_Request::default_instance();
    case 1:
      return ::proto::steam::CPublishedFile_Unsubscribe_Request::default_instance();
    case 2:
      return ::proto::steam::CPublishedFile_CanSubscribe_Request::default_instance();
    case 3:
      return ::proto::steam::CPublishedFile_Publish_Request::default_instance();
    case 4:
      return ::proto::steam::CPublishedFile_GetDetails_Request::default_instance();
    case 5:
      return ::proto::steam::CPublishedFile_GetItemInfo_Request::default_instance();
    case 6:
      return ::proto::steam::CPublishedFile_GetUserFiles_Request::default_instance();
    case 7:
      return ::proto::steam::CPublishedFile_Update_Request::default_instance();
    case 8:
      return ::proto::steam::CPublishedFile_GetChangeHistoryEntry_Request::default_instance();
    case 9:
      return ::proto::steam::CPublishedFile_GetChangeHistory_Request::default_instance();
    case 10:
      return ::proto::steam::CPublishedFile_RefreshVotingQueue_Request::default_instance();
    case 11:
      return ::proto::steam::CPublishedFile_QueryFiles_Request::default_instance();
    case 12:
      return ::proto::steam::CPublishedFile_StartPlaytimeTracking_Request::default_instance();
    case 13:
      return ::proto::steam::CPublishedFile_StopPlaytimeTracking_Request::default_instance();
    case 14:
      return ::proto::steam::CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request::default_instance();
    case 15:
      return ::proto::steam::CPublishedFile_SetPlaytimeForControllerConfigs_Request::default_instance();
    case 16:
      return ::proto::steam::CPublishedFile_AddChild_Request::default_instance();
    case 17:
      return ::proto::steam::CPublishedFile_RemoveChild_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& PublishedFile::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::steam::CPublishedFile_Subscribe_Response::default_instance();
    case 1:
      return ::proto::steam::CPublishedFile_Unsubscribe_Response::default_instance();
    case 2:
      return ::proto::steam::CPublishedFile_CanSubscribe_Response::default_instance();
    case 3:
      return ::proto::steam::CPublishedFile_Publish_Response::default_instance();
    case 4:
      return ::proto::steam::CPublishedFile_GetDetails_Response::default_instance();
    case 5:
      return ::proto::steam::CPublishedFile_GetItemInfo_Response::default_instance();
    case 6:
      return ::proto::steam::CPublishedFile_GetUserFiles_Response::default_instance();
    case 7:
      return ::proto::steam::CPublishedFile_Update_Response::default_instance();
    case 8:
      return ::proto::steam::CPublishedFile_GetChangeHistoryEntry_Response::default_instance();
    case 9:
      return ::proto::steam::CPublishedFile_GetChangeHistory_Response::default_instance();
    case 10:
      return ::proto::steam::CPublishedFile_RefreshVotingQueue_Response::default_instance();
    case 11:
      return ::proto::steam::CPublishedFile_QueryFiles_Response::default_instance();
    case 12:
      return ::proto::steam::CPublishedFile_StartPlaytimeTracking_Response::default_instance();
    case 13:
      return ::proto::steam::CPublishedFile_StopPlaytimeTracking_Response::default_instance();
    case 14:
      return ::proto::steam::CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response::default_instance();
    case 15:
      return ::proto::steam::CPublishedFile_SetPlaytimeForControllerConfigs_Response::default_instance();
    case 16:
      return ::proto::steam::CPublishedFile_AddChild_Response::default_instance();
    case 17:
      return ::proto::steam::CPublishedFile_RemoveChild_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

PublishedFile_Stub::PublishedFile_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
PublishedFile_Stub::PublishedFile_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
PublishedFile_Stub::~PublishedFile_Stub() {
  if (owns_channel_) delete channel_;
}

void PublishedFile_Stub::Subscribe(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CPublishedFile_Subscribe_Request* request,
                              ::proto::steam::CPublishedFile_Subscribe_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void PublishedFile_Stub::Unsubscribe(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CPublishedFile_Unsubscribe_Request* request,
                              ::proto::steam::CPublishedFile_Unsubscribe_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void PublishedFile_Stub::CanSubscribe(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CPublishedFile_CanSubscribe_Request* request,
                              ::proto::steam::CPublishedFile_CanSubscribe_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void PublishedFile_Stub::Publish(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CPublishedFile_Publish_Request* request,
                              ::proto::steam::CPublishedFile_Publish_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void PublishedFile_Stub::GetDetails(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CPublishedFile_GetDetails_Request* request,
                              ::proto::steam::CPublishedFile_GetDetails_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void PublishedFile_Stub::GetItemInfo(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CPublishedFile_GetItemInfo_Request* request,
                              ::proto::steam::CPublishedFile_GetItemInfo_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}
void PublishedFile_Stub::GetUserFiles(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CPublishedFile_GetUserFiles_Request* request,
                              ::proto::steam::CPublishedFile_GetUserFiles_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(6),
                       controller, request, response, done);
}
void PublishedFile_Stub::Update(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CPublishedFile_Update_Request* request,
                              ::proto::steam::CPublishedFile_Update_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(7),
                       controller, request, response, done);
}
void PublishedFile_Stub::GetChangeHistoryEntry(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CPublishedFile_GetChangeHistoryEntry_Request* request,
                              ::proto::steam::CPublishedFile_GetChangeHistoryEntry_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(8),
                       controller, request, response, done);
}
void PublishedFile_Stub::GetChangeHistory(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CPublishedFile_GetChangeHistory_Request* request,
                              ::proto::steam::CPublishedFile_GetChangeHistory_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(9),
                       controller, request, response, done);
}
void PublishedFile_Stub::RefreshVotingQueue(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CPublishedFile_RefreshVotingQueue_Request* request,
                              ::proto::steam::CPublishedFile_RefreshVotingQueue_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(10),
                       controller, request, response, done);
}
void PublishedFile_Stub::QueryFiles(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CPublishedFile_QueryFiles_Request* request,
                              ::proto::steam::CPublishedFile_QueryFiles_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(11),
                       controller, request, response, done);
}
void PublishedFile_Stub::StartPlaytimeTracking(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CPublishedFile_StartPlaytimeTracking_Request* request,
                              ::proto::steam::CPublishedFile_StartPlaytimeTracking_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(12),
                       controller, request, response, done);
}
void PublishedFile_Stub::StopPlaytimeTracking(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CPublishedFile_StopPlaytimeTracking_Request* request,
                              ::proto::steam::CPublishedFile_StopPlaytimeTracking_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(13),
                       controller, request, response, done);
}
void PublishedFile_Stub::StopPlaytimeTrackingForAllAppItems(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CPublishedFile_StopPlaytimeTrackingForAllAppItems_Request* request,
                              ::proto::steam::CPublishedFile_StopPlaytimeTrackingForAllAppItems_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(14),
                       controller, request, response, done);
}
void PublishedFile_Stub::SetPlaytimeForControllerConfigs(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CPublishedFile_SetPlaytimeForControllerConfigs_Request* request,
                              ::proto::steam::CPublishedFile_SetPlaytimeForControllerConfigs_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(15),
                       controller, request, response, done);
}
void PublishedFile_Stub::AddChild(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CPublishedFile_AddChild_Request* request,
                              ::proto::steam::CPublishedFile_AddChild_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(16),
                       controller, request, response, done);
}
void PublishedFile_Stub::RemoveChild(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CPublishedFile_RemoveChild_Request* request,
                              ::proto::steam::CPublishedFile_RemoveChild_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(17),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace steam
}  // namespace proto

// @@protoc_insertion_point(global_scope)
