// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_player.steamclient.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "steammessages_player.steamclient.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace steam {
class CPlayer_GetGameBadgeLevels_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CPlayer_GetGameBadgeLevels_Request> {
} _CPlayer_GetGameBadgeLevels_Request_default_instance_;
class CPlayer_GetGameBadgeLevels_Response_BadgeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CPlayer_GetGameBadgeLevels_Response_Badge> {
} _CPlayer_GetGameBadgeLevels_Response_Badge_default_instance_;
class CPlayer_GetGameBadgeLevels_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CPlayer_GetGameBadgeLevels_Response> {
} _CPlayer_GetGameBadgeLevels_Response_default_instance_;
class CPlayer_GetLastPlayedTimes_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CPlayer_GetLastPlayedTimes_Request> {
} _CPlayer_GetLastPlayedTimes_Request_default_instance_;
class CPlayer_GetLastPlayedTimes_Response_GameDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CPlayer_GetLastPlayedTimes_Response_Game> {
} _CPlayer_GetLastPlayedTimes_Response_Game_default_instance_;
class CPlayer_GetLastPlayedTimes_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CPlayer_GetLastPlayedTimes_Response> {
} _CPlayer_GetLastPlayedTimes_Response_default_instance_;
class CPlayer_AcceptSSA_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CPlayer_AcceptSSA_Request> {
} _CPlayer_AcceptSSA_Request_default_instance_;
class CPlayer_AcceptSSA_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CPlayer_AcceptSSA_Response> {
} _CPlayer_AcceptSSA_Response_default_instance_;
class CPlayer_LastPlayedTimes_NotificationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CPlayer_LastPlayedTimes_Notification> {
} _CPlayer_LastPlayedTimes_Notification_default_instance_;

namespace protobuf_steammessages_5fplayer_2esteamclient_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[9];
const ::google::protobuf::ServiceDescriptor* file_level_service_descriptors[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPlayer_GetGameBadgeLevels_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPlayer_GetGameBadgeLevels_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPlayer_GetGameBadgeLevels_Request, appid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPlayer_GetGameBadgeLevels_Response_Badge, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPlayer_GetGameBadgeLevels_Response_Badge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPlayer_GetGameBadgeLevels_Response_Badge, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPlayer_GetGameBadgeLevels_Response_Badge, series_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPlayer_GetGameBadgeLevels_Response_Badge, border_color_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPlayer_GetGameBadgeLevels_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPlayer_GetGameBadgeLevels_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPlayer_GetGameBadgeLevels_Response, player_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPlayer_GetGameBadgeLevels_Response, badges_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPlayer_GetLastPlayedTimes_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPlayer_GetLastPlayedTimes_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPlayer_GetLastPlayedTimes_Request, min_last_played_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPlayer_GetLastPlayedTimes_Response_Game, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPlayer_GetLastPlayedTimes_Response_Game, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPlayer_GetLastPlayedTimes_Response_Game, appid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPlayer_GetLastPlayedTimes_Response_Game, last_playtime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPlayer_GetLastPlayedTimes_Response_Game, playtime_2weeks_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPlayer_GetLastPlayedTimes_Response_Game, playtime_forever_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPlayer_GetLastPlayedTimes_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPlayer_GetLastPlayedTimes_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPlayer_GetLastPlayedTimes_Response, games_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPlayer_AcceptSSA_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPlayer_AcceptSSA_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPlayer_AcceptSSA_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPlayer_AcceptSSA_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPlayer_LastPlayedTimes_Notification, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPlayer_LastPlayedTimes_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CPlayer_LastPlayedTimes_Notification, games_),
  ~0u,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 6, sizeof(CPlayer_GetGameBadgeLevels_Request)},
  { 7, 15, sizeof(CPlayer_GetGameBadgeLevels_Response_Badge)},
  { 18, 25, sizeof(CPlayer_GetGameBadgeLevels_Response)},
  { 27, 33, sizeof(CPlayer_GetLastPlayedTimes_Request)},
  { 34, 43, sizeof(CPlayer_GetLastPlayedTimes_Response_Game)},
  { 47, 53, sizeof(CPlayer_GetLastPlayedTimes_Response)},
  { 54, 59, sizeof(CPlayer_AcceptSSA_Request)},
  { 59, 64, sizeof(CPlayer_AcceptSSA_Response)},
  { 64, 70, sizeof(CPlayer_LastPlayedTimes_Notification)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CPlayer_GetGameBadgeLevels_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CPlayer_GetGameBadgeLevels_Response_Badge_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CPlayer_GetGameBadgeLevels_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CPlayer_GetLastPlayedTimes_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CPlayer_GetLastPlayedTimes_Response_Game_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CPlayer_GetLastPlayedTimes_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CPlayer_AcceptSSA_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CPlayer_AcceptSSA_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CPlayer_LastPlayedTimes_Notification_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "steammessages_player.steamclient.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, file_level_service_descriptors);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 9);
}

}  // namespace

void TableStruct::Shutdown() {
  _CPlayer_GetGameBadgeLevels_Request_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _CPlayer_GetGameBadgeLevels_Response_Badge_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _CPlayer_GetGameBadgeLevels_Response_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _CPlayer_GetLastPlayedTimes_Request_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _CPlayer_GetLastPlayedTimes_Response_Game_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _CPlayer_GetLastPlayedTimes_Response_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _CPlayer_AcceptSSA_Request_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _CPlayer_AcceptSSA_Response_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _CPlayer_LastPlayedTimes_Notification_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::proto::steam::protobuf_steammessages_5funified_5fbase_2esteamclient_2eproto::InitDefaults();
  _CPlayer_GetGameBadgeLevels_Request_default_instance_.DefaultConstruct();
  _CPlayer_GetGameBadgeLevels_Response_Badge_default_instance_.DefaultConstruct();
  _CPlayer_GetGameBadgeLevels_Response_default_instance_.DefaultConstruct();
  _CPlayer_GetLastPlayedTimes_Request_default_instance_.DefaultConstruct();
  _CPlayer_GetLastPlayedTimes_Response_Game_default_instance_.DefaultConstruct();
  _CPlayer_GetLastPlayedTimes_Response_default_instance_.DefaultConstruct();
  _CPlayer_AcceptSSA_Request_default_instance_.DefaultConstruct();
  _CPlayer_AcceptSSA_Response_default_instance_.DefaultConstruct();
  _CPlayer_LastPlayedTimes_Notification_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n&steammessages_player.steamclient.proto"
      "\022\013proto.steam\032,steammessages_unified_bas"
      "e.steamclient.proto\"3\n\"CPlayer_GetGameBa"
      "dgeLevels_Request\022\r\n\005appid\030\001 \001(\r\"\301\001\n#CPl"
      "ayer_GetGameBadgeLevels_Response\022\024\n\014play"
      "er_level\030\001 \001(\r\022F\n\006badges\030\002 \003(\01326.proto.s"
      "team.CPlayer_GetGameBadgeLevels_Response"
      ".Badge\032<\n\005Badge\022\r\n\005level\030\001 \001(\005\022\016\n\006series"
      "\030\002 \001(\005\022\024\n\014border_color\030\003 \001(\r\"\202\001\n\"CPlayer"
      "_GetLastPlayedTimes_Request\022\\\n\017min_last_"
      "played\030\001 \001(\rBC\202\265\030\?The most recent last-p"
      "layed time the client already knows abou"
      "t\"\314\001\n#CPlayer_GetLastPlayedTimes_Respons"
      "e\022D\n\005games\030\001 \003(\01325.proto.steam.CPlayer_G"
      "etLastPlayedTimes_Response.Game\032_\n\004Game\022"
      "\r\n\005appid\030\001 \001(\005\022\025\n\rlast_playtime\030\002 \001(\r\022\027\n"
      "\017playtime_2weeks\030\003 \001(\005\022\030\n\020playtime_forev"
      "er\030\004 \001(\005\"\033\n\031CPlayer_AcceptSSA_Request\"\034\n"
      "\032CPlayer_AcceptSSA_Response\"l\n$CPlayer_L"
      "astPlayedTimes_Notification\022D\n\005games\030\001 \003"
      "(\01325.proto.steam.CPlayer_GetLastPlayedTi"
      "mes_Response.Game2\265\004\n\006Player\022\316\001\n\022GetGame"
      "BadgeLevels\022/.proto.steam.CPlayer_GetGam"
      "eBadgeLevels_Request\0320.proto.steam.CPlay"
      "er_GetGameBadgeLevels_Response\"U\202\265\030QRetu"
      "rns the Steam Level of a user, the Badge"
      " level for the game, and if it\'s foil\022\255\001"
      "\n\030ClientGetLastPlayedTimes\022/.proto.steam"
      ".CPlayer_GetLastPlayedTimes_Request\0320.pr"
      "oto.steam.CPlayer_GetLastPlayedTimes_Res"
      "ponse\".\202\265\030*Gets the last-played times fo"
      "r the account\022{\n\tAcceptSSA\022&.proto.steam"
      ".CPlayer_AcceptSSA_Request\032\'.proto.steam"
      ".CPlayer_AcceptSSA_Response\"\035\202\265\030\031User is"
      " accepting the SSA\032-\202\265\030)A service for ac"
      "cessing Steam player data2\345\001\n\014PlayerClie"
      "nt\022\244\001\n\025NotifyLastPlayedTimes\0221.proto.ste"
      "am.CPlayer_LastPlayedTimes_Notification\032"
      "\027.proto.steam.NoResponse\"\?\202\265\030;Notificati"
      "on from server to client of more recent "
      "play time\032.\202\265\030&Steam player data client "
      "notifications\300\265\030\002B\003\200\001\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1662);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "steammessages_player.steamclient.proto", &protobuf_RegisterTypes);
  ::proto::steam::protobuf_steammessages_5funified_5fbase_2esteamclient_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_steammessages_5fplayer_2esteamclient_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPlayer_GetGameBadgeLevels_Request::kAppidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPlayer_GetGameBadgeLevels_Request::CPlayer_GetGameBadgeLevels_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fplayer_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPlayer_GetGameBadgeLevels_Request)
}
CPlayer_GetGameBadgeLevels_Request::CPlayer_GetGameBadgeLevels_Request(const CPlayer_GetGameBadgeLevels_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  appid_ = from.appid_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPlayer_GetGameBadgeLevels_Request)
}

void CPlayer_GetGameBadgeLevels_Request::SharedCtor() {
  _cached_size_ = 0;
  appid_ = 0u;
}

CPlayer_GetGameBadgeLevels_Request::~CPlayer_GetGameBadgeLevels_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CPlayer_GetGameBadgeLevels_Request)
  SharedDtor();
}

void CPlayer_GetGameBadgeLevels_Request::SharedDtor() {
}

void CPlayer_GetGameBadgeLevels_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPlayer_GetGameBadgeLevels_Request::descriptor() {
  protobuf_steammessages_5fplayer_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fplayer_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CPlayer_GetGameBadgeLevels_Request& CPlayer_GetGameBadgeLevels_Request::default_instance() {
  protobuf_steammessages_5fplayer_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CPlayer_GetGameBadgeLevels_Request* CPlayer_GetGameBadgeLevels_Request::New(::google::protobuf::Arena* arena) const {
  CPlayer_GetGameBadgeLevels_Request* n = new CPlayer_GetGameBadgeLevels_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CPlayer_GetGameBadgeLevels_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPlayer_GetGameBadgeLevels_Request)
  appid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CPlayer_GetGameBadgeLevels_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPlayer_GetGameBadgeLevels_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 appid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPlayer_GetGameBadgeLevels_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPlayer_GetGameBadgeLevels_Request)
  return false;
#undef DO_
}

void CPlayer_GetGameBadgeLevels_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPlayer_GetGameBadgeLevels_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->appid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPlayer_GetGameBadgeLevels_Request)
}

::google::protobuf::uint8* CPlayer_GetGameBadgeLevels_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPlayer_GetGameBadgeLevels_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->appid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPlayer_GetGameBadgeLevels_Request)
  return target;
}

size_t CPlayer_GetGameBadgeLevels_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPlayer_GetGameBadgeLevels_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 appid = 1;
  if (has_appid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->appid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPlayer_GetGameBadgeLevels_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPlayer_GetGameBadgeLevels_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CPlayer_GetGameBadgeLevels_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CPlayer_GetGameBadgeLevels_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPlayer_GetGameBadgeLevels_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPlayer_GetGameBadgeLevels_Request)
    MergeFrom(*source);
  }
}

void CPlayer_GetGameBadgeLevels_Request::MergeFrom(const CPlayer_GetGameBadgeLevels_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPlayer_GetGameBadgeLevels_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_appid()) {
    set_appid(from.appid());
  }
}

void CPlayer_GetGameBadgeLevels_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPlayer_GetGameBadgeLevels_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPlayer_GetGameBadgeLevels_Request::CopyFrom(const CPlayer_GetGameBadgeLevels_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPlayer_GetGameBadgeLevels_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetGameBadgeLevels_Request::IsInitialized() const {
  return true;
}

void CPlayer_GetGameBadgeLevels_Request::Swap(CPlayer_GetGameBadgeLevels_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPlayer_GetGameBadgeLevels_Request::InternalSwap(CPlayer_GetGameBadgeLevels_Request* other) {
  std::swap(appid_, other->appid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CPlayer_GetGameBadgeLevels_Request::GetMetadata() const {
  protobuf_steammessages_5fplayer_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fplayer_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CPlayer_GetGameBadgeLevels_Request

// optional uint32 appid = 1;
bool CPlayer_GetGameBadgeLevels_Request::has_appid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CPlayer_GetGameBadgeLevels_Request::set_has_appid() {
  _has_bits_[0] |= 0x00000001u;
}
void CPlayer_GetGameBadgeLevels_Request::clear_has_appid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CPlayer_GetGameBadgeLevels_Request::clear_appid() {
  appid_ = 0u;
  clear_has_appid();
}
::google::protobuf::uint32 CPlayer_GetGameBadgeLevels_Request::appid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPlayer_GetGameBadgeLevels_Request.appid)
  return appid_;
}
void CPlayer_GetGameBadgeLevels_Request::set_appid(::google::protobuf::uint32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPlayer_GetGameBadgeLevels_Request.appid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPlayer_GetGameBadgeLevels_Response_Badge::kLevelFieldNumber;
const int CPlayer_GetGameBadgeLevels_Response_Badge::kSeriesFieldNumber;
const int CPlayer_GetGameBadgeLevels_Response_Badge::kBorderColorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPlayer_GetGameBadgeLevels_Response_Badge::CPlayer_GetGameBadgeLevels_Response_Badge()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fplayer_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPlayer_GetGameBadgeLevels_Response.Badge)
}
CPlayer_GetGameBadgeLevels_Response_Badge::CPlayer_GetGameBadgeLevels_Response_Badge(const CPlayer_GetGameBadgeLevels_Response_Badge& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&level_, &from.level_,
    reinterpret_cast<char*>(&border_color_) -
    reinterpret_cast<char*>(&level_) + sizeof(border_color_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPlayer_GetGameBadgeLevels_Response.Badge)
}

void CPlayer_GetGameBadgeLevels_Response_Badge::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&level_, 0, reinterpret_cast<char*>(&border_color_) -
    reinterpret_cast<char*>(&level_) + sizeof(border_color_));
}

CPlayer_GetGameBadgeLevels_Response_Badge::~CPlayer_GetGameBadgeLevels_Response_Badge() {
  // @@protoc_insertion_point(destructor:proto.steam.CPlayer_GetGameBadgeLevels_Response.Badge)
  SharedDtor();
}

void CPlayer_GetGameBadgeLevels_Response_Badge::SharedDtor() {
}

void CPlayer_GetGameBadgeLevels_Response_Badge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPlayer_GetGameBadgeLevels_Response_Badge::descriptor() {
  protobuf_steammessages_5fplayer_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fplayer_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CPlayer_GetGameBadgeLevels_Response_Badge& CPlayer_GetGameBadgeLevels_Response_Badge::default_instance() {
  protobuf_steammessages_5fplayer_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CPlayer_GetGameBadgeLevels_Response_Badge* CPlayer_GetGameBadgeLevels_Response_Badge::New(::google::protobuf::Arena* arena) const {
  CPlayer_GetGameBadgeLevels_Response_Badge* n = new CPlayer_GetGameBadgeLevels_Response_Badge;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CPlayer_GetGameBadgeLevels_Response_Badge::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPlayer_GetGameBadgeLevels_Response.Badge)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&level_, 0, reinterpret_cast<char*>(&border_color_) -
      reinterpret_cast<char*>(&level_) + sizeof(border_color_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CPlayer_GetGameBadgeLevels_Response_Badge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPlayer_GetGameBadgeLevels_Response.Badge)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 level = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 series = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_series();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &series_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 border_color = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_border_color();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &border_color_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPlayer_GetGameBadgeLevels_Response.Badge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPlayer_GetGameBadgeLevels_Response.Badge)
  return false;
#undef DO_
}

void CPlayer_GetGameBadgeLevels_Response_Badge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPlayer_GetGameBadgeLevels_Response.Badge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 level = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }

  // optional int32 series = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->series(), output);
  }

  // optional uint32 border_color = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->border_color(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPlayer_GetGameBadgeLevels_Response.Badge)
}

::google::protobuf::uint8* CPlayer_GetGameBadgeLevels_Response_Badge::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPlayer_GetGameBadgeLevels_Response.Badge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 level = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }

  // optional int32 series = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->series(), target);
  }

  // optional uint32 border_color = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->border_color(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPlayer_GetGameBadgeLevels_Response.Badge)
  return target;
}

size_t CPlayer_GetGameBadgeLevels_Response_Badge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPlayer_GetGameBadgeLevels_Response.Badge)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 series = 2;
    if (has_series()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->series());
    }

    // optional uint32 border_color = 3;
    if (has_border_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->border_color());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPlayer_GetGameBadgeLevels_Response_Badge::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPlayer_GetGameBadgeLevels_Response.Badge)
  GOOGLE_DCHECK_NE(&from, this);
  const CPlayer_GetGameBadgeLevels_Response_Badge* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CPlayer_GetGameBadgeLevels_Response_Badge>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPlayer_GetGameBadgeLevels_Response.Badge)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPlayer_GetGameBadgeLevels_Response.Badge)
    MergeFrom(*source);
  }
}

void CPlayer_GetGameBadgeLevels_Response_Badge::MergeFrom(const CPlayer_GetGameBadgeLevels_Response_Badge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPlayer_GetGameBadgeLevels_Response.Badge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000002u) {
      series_ = from.series_;
    }
    if (cached_has_bits & 0x00000004u) {
      border_color_ = from.border_color_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CPlayer_GetGameBadgeLevels_Response_Badge::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPlayer_GetGameBadgeLevels_Response.Badge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPlayer_GetGameBadgeLevels_Response_Badge::CopyFrom(const CPlayer_GetGameBadgeLevels_Response_Badge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPlayer_GetGameBadgeLevels_Response.Badge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetGameBadgeLevels_Response_Badge::IsInitialized() const {
  return true;
}

void CPlayer_GetGameBadgeLevels_Response_Badge::Swap(CPlayer_GetGameBadgeLevels_Response_Badge* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPlayer_GetGameBadgeLevels_Response_Badge::InternalSwap(CPlayer_GetGameBadgeLevels_Response_Badge* other) {
  std::swap(level_, other->level_);
  std::swap(series_, other->series_);
  std::swap(border_color_, other->border_color_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CPlayer_GetGameBadgeLevels_Response_Badge::GetMetadata() const {
  protobuf_steammessages_5fplayer_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fplayer_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CPlayer_GetGameBadgeLevels_Response_Badge

// optional int32 level = 1;
bool CPlayer_GetGameBadgeLevels_Response_Badge::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CPlayer_GetGameBadgeLevels_Response_Badge::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
void CPlayer_GetGameBadgeLevels_Response_Badge::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
void CPlayer_GetGameBadgeLevels_Response_Badge::clear_level() {
  level_ = 0;
  clear_has_level();
}
::google::protobuf::int32 CPlayer_GetGameBadgeLevels_Response_Badge::level() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPlayer_GetGameBadgeLevels_Response.Badge.level)
  return level_;
}
void CPlayer_GetGameBadgeLevels_Response_Badge::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPlayer_GetGameBadgeLevels_Response.Badge.level)
}

// optional int32 series = 2;
bool CPlayer_GetGameBadgeLevels_Response_Badge::has_series() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CPlayer_GetGameBadgeLevels_Response_Badge::set_has_series() {
  _has_bits_[0] |= 0x00000002u;
}
void CPlayer_GetGameBadgeLevels_Response_Badge::clear_has_series() {
  _has_bits_[0] &= ~0x00000002u;
}
void CPlayer_GetGameBadgeLevels_Response_Badge::clear_series() {
  series_ = 0;
  clear_has_series();
}
::google::protobuf::int32 CPlayer_GetGameBadgeLevels_Response_Badge::series() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPlayer_GetGameBadgeLevels_Response.Badge.series)
  return series_;
}
void CPlayer_GetGameBadgeLevels_Response_Badge::set_series(::google::protobuf::int32 value) {
  set_has_series();
  series_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPlayer_GetGameBadgeLevels_Response.Badge.series)
}

// optional uint32 border_color = 3;
bool CPlayer_GetGameBadgeLevels_Response_Badge::has_border_color() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CPlayer_GetGameBadgeLevels_Response_Badge::set_has_border_color() {
  _has_bits_[0] |= 0x00000004u;
}
void CPlayer_GetGameBadgeLevels_Response_Badge::clear_has_border_color() {
  _has_bits_[0] &= ~0x00000004u;
}
void CPlayer_GetGameBadgeLevels_Response_Badge::clear_border_color() {
  border_color_ = 0u;
  clear_has_border_color();
}
::google::protobuf::uint32 CPlayer_GetGameBadgeLevels_Response_Badge::border_color() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPlayer_GetGameBadgeLevels_Response.Badge.border_color)
  return border_color_;
}
void CPlayer_GetGameBadgeLevels_Response_Badge::set_border_color(::google::protobuf::uint32 value) {
  set_has_border_color();
  border_color_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPlayer_GetGameBadgeLevels_Response.Badge.border_color)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPlayer_GetGameBadgeLevels_Response::kPlayerLevelFieldNumber;
const int CPlayer_GetGameBadgeLevels_Response::kBadgesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPlayer_GetGameBadgeLevels_Response::CPlayer_GetGameBadgeLevels_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fplayer_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPlayer_GetGameBadgeLevels_Response)
}
CPlayer_GetGameBadgeLevels_Response::CPlayer_GetGameBadgeLevels_Response(const CPlayer_GetGameBadgeLevels_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      badges_(from.badges_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  player_level_ = from.player_level_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPlayer_GetGameBadgeLevels_Response)
}

void CPlayer_GetGameBadgeLevels_Response::SharedCtor() {
  _cached_size_ = 0;
  player_level_ = 0u;
}

CPlayer_GetGameBadgeLevels_Response::~CPlayer_GetGameBadgeLevels_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CPlayer_GetGameBadgeLevels_Response)
  SharedDtor();
}

void CPlayer_GetGameBadgeLevels_Response::SharedDtor() {
}

void CPlayer_GetGameBadgeLevels_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPlayer_GetGameBadgeLevels_Response::descriptor() {
  protobuf_steammessages_5fplayer_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fplayer_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CPlayer_GetGameBadgeLevels_Response& CPlayer_GetGameBadgeLevels_Response::default_instance() {
  protobuf_steammessages_5fplayer_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CPlayer_GetGameBadgeLevels_Response* CPlayer_GetGameBadgeLevels_Response::New(::google::protobuf::Arena* arena) const {
  CPlayer_GetGameBadgeLevels_Response* n = new CPlayer_GetGameBadgeLevels_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CPlayer_GetGameBadgeLevels_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPlayer_GetGameBadgeLevels_Response)
  badges_.Clear();
  player_level_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CPlayer_GetGameBadgeLevels_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPlayer_GetGameBadgeLevels_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 player_level = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_player_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.steam.CPlayer_GetGameBadgeLevels_Response.Badge badges = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_badges()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPlayer_GetGameBadgeLevels_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPlayer_GetGameBadgeLevels_Response)
  return false;
#undef DO_
}

void CPlayer_GetGameBadgeLevels_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPlayer_GetGameBadgeLevels_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_level = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_level(), output);
  }

  // repeated .proto.steam.CPlayer_GetGameBadgeLevels_Response.Badge badges = 2;
  for (unsigned int i = 0, n = this->badges_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->badges(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPlayer_GetGameBadgeLevels_Response)
}

::google::protobuf::uint8* CPlayer_GetGameBadgeLevels_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPlayer_GetGameBadgeLevels_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_level = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_level(), target);
  }

  // repeated .proto.steam.CPlayer_GetGameBadgeLevels_Response.Badge badges = 2;
  for (unsigned int i = 0, n = this->badges_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->badges(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPlayer_GetGameBadgeLevels_Response)
  return target;
}

size_t CPlayer_GetGameBadgeLevels_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPlayer_GetGameBadgeLevels_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.steam.CPlayer_GetGameBadgeLevels_Response.Badge badges = 2;
  {
    unsigned int count = this->badges_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->badges(i));
    }
  }

  // optional uint32 player_level = 1;
  if (has_player_level()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->player_level());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPlayer_GetGameBadgeLevels_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPlayer_GetGameBadgeLevels_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CPlayer_GetGameBadgeLevels_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CPlayer_GetGameBadgeLevels_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPlayer_GetGameBadgeLevels_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPlayer_GetGameBadgeLevels_Response)
    MergeFrom(*source);
  }
}

void CPlayer_GetGameBadgeLevels_Response::MergeFrom(const CPlayer_GetGameBadgeLevels_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPlayer_GetGameBadgeLevels_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  badges_.MergeFrom(from.badges_);
  if (from.has_player_level()) {
    set_player_level(from.player_level());
  }
}

void CPlayer_GetGameBadgeLevels_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPlayer_GetGameBadgeLevels_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPlayer_GetGameBadgeLevels_Response::CopyFrom(const CPlayer_GetGameBadgeLevels_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPlayer_GetGameBadgeLevels_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetGameBadgeLevels_Response::IsInitialized() const {
  return true;
}

void CPlayer_GetGameBadgeLevels_Response::Swap(CPlayer_GetGameBadgeLevels_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPlayer_GetGameBadgeLevels_Response::InternalSwap(CPlayer_GetGameBadgeLevels_Response* other) {
  badges_.InternalSwap(&other->badges_);
  std::swap(player_level_, other->player_level_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CPlayer_GetGameBadgeLevels_Response::GetMetadata() const {
  protobuf_steammessages_5fplayer_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fplayer_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CPlayer_GetGameBadgeLevels_Response

// optional uint32 player_level = 1;
bool CPlayer_GetGameBadgeLevels_Response::has_player_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CPlayer_GetGameBadgeLevels_Response::set_has_player_level() {
  _has_bits_[0] |= 0x00000001u;
}
void CPlayer_GetGameBadgeLevels_Response::clear_has_player_level() {
  _has_bits_[0] &= ~0x00000001u;
}
void CPlayer_GetGameBadgeLevels_Response::clear_player_level() {
  player_level_ = 0u;
  clear_has_player_level();
}
::google::protobuf::uint32 CPlayer_GetGameBadgeLevels_Response::player_level() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPlayer_GetGameBadgeLevels_Response.player_level)
  return player_level_;
}
void CPlayer_GetGameBadgeLevels_Response::set_player_level(::google::protobuf::uint32 value) {
  set_has_player_level();
  player_level_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPlayer_GetGameBadgeLevels_Response.player_level)
}

// repeated .proto.steam.CPlayer_GetGameBadgeLevels_Response.Badge badges = 2;
int CPlayer_GetGameBadgeLevels_Response::badges_size() const {
  return badges_.size();
}
void CPlayer_GetGameBadgeLevels_Response::clear_badges() {
  badges_.Clear();
}
const ::proto::steam::CPlayer_GetGameBadgeLevels_Response_Badge& CPlayer_GetGameBadgeLevels_Response::badges(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CPlayer_GetGameBadgeLevels_Response.badges)
  return badges_.Get(index);
}
::proto::steam::CPlayer_GetGameBadgeLevels_Response_Badge* CPlayer_GetGameBadgeLevels_Response::mutable_badges(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CPlayer_GetGameBadgeLevels_Response.badges)
  return badges_.Mutable(index);
}
::proto::steam::CPlayer_GetGameBadgeLevels_Response_Badge* CPlayer_GetGameBadgeLevels_Response::add_badges() {
  // @@protoc_insertion_point(field_add:proto.steam.CPlayer_GetGameBadgeLevels_Response.badges)
  return badges_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::CPlayer_GetGameBadgeLevels_Response_Badge >*
CPlayer_GetGameBadgeLevels_Response::mutable_badges() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CPlayer_GetGameBadgeLevels_Response.badges)
  return &badges_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::CPlayer_GetGameBadgeLevels_Response_Badge >&
CPlayer_GetGameBadgeLevels_Response::badges() const {
  // @@protoc_insertion_point(field_list:proto.steam.CPlayer_GetGameBadgeLevels_Response.badges)
  return badges_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPlayer_GetLastPlayedTimes_Request::kMinLastPlayedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPlayer_GetLastPlayedTimes_Request::CPlayer_GetLastPlayedTimes_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fplayer_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPlayer_GetLastPlayedTimes_Request)
}
CPlayer_GetLastPlayedTimes_Request::CPlayer_GetLastPlayedTimes_Request(const CPlayer_GetLastPlayedTimes_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  min_last_played_ = from.min_last_played_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPlayer_GetLastPlayedTimes_Request)
}

void CPlayer_GetLastPlayedTimes_Request::SharedCtor() {
  _cached_size_ = 0;
  min_last_played_ = 0u;
}

CPlayer_GetLastPlayedTimes_Request::~CPlayer_GetLastPlayedTimes_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CPlayer_GetLastPlayedTimes_Request)
  SharedDtor();
}

void CPlayer_GetLastPlayedTimes_Request::SharedDtor() {
}

void CPlayer_GetLastPlayedTimes_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPlayer_GetLastPlayedTimes_Request::descriptor() {
  protobuf_steammessages_5fplayer_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fplayer_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CPlayer_GetLastPlayedTimes_Request& CPlayer_GetLastPlayedTimes_Request::default_instance() {
  protobuf_steammessages_5fplayer_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CPlayer_GetLastPlayedTimes_Request* CPlayer_GetLastPlayedTimes_Request::New(::google::protobuf::Arena* arena) const {
  CPlayer_GetLastPlayedTimes_Request* n = new CPlayer_GetLastPlayedTimes_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CPlayer_GetLastPlayedTimes_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPlayer_GetLastPlayedTimes_Request)
  min_last_played_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CPlayer_GetLastPlayedTimes_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPlayer_GetLastPlayedTimes_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 min_last_played = 1 [(.proto.steam.description) = "The most recent last-played time the client already knows about"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_min_last_played();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_last_played_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPlayer_GetLastPlayedTimes_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPlayer_GetLastPlayedTimes_Request)
  return false;
#undef DO_
}

void CPlayer_GetLastPlayedTimes_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPlayer_GetLastPlayedTimes_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 min_last_played = 1 [(.proto.steam.description) = "The most recent last-played time the client already knows about"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->min_last_played(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPlayer_GetLastPlayedTimes_Request)
}

::google::protobuf::uint8* CPlayer_GetLastPlayedTimes_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPlayer_GetLastPlayedTimes_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 min_last_played = 1 [(.proto.steam.description) = "The most recent last-played time the client already knows about"];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->min_last_played(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPlayer_GetLastPlayedTimes_Request)
  return target;
}

size_t CPlayer_GetLastPlayedTimes_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPlayer_GetLastPlayedTimes_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 min_last_played = 1 [(.proto.steam.description) = "The most recent last-played time the client already knows about"];
  if (has_min_last_played()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->min_last_played());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPlayer_GetLastPlayedTimes_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPlayer_GetLastPlayedTimes_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CPlayer_GetLastPlayedTimes_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CPlayer_GetLastPlayedTimes_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPlayer_GetLastPlayedTimes_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPlayer_GetLastPlayedTimes_Request)
    MergeFrom(*source);
  }
}

void CPlayer_GetLastPlayedTimes_Request::MergeFrom(const CPlayer_GetLastPlayedTimes_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPlayer_GetLastPlayedTimes_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_min_last_played()) {
    set_min_last_played(from.min_last_played());
  }
}

void CPlayer_GetLastPlayedTimes_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPlayer_GetLastPlayedTimes_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPlayer_GetLastPlayedTimes_Request::CopyFrom(const CPlayer_GetLastPlayedTimes_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPlayer_GetLastPlayedTimes_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetLastPlayedTimes_Request::IsInitialized() const {
  return true;
}

void CPlayer_GetLastPlayedTimes_Request::Swap(CPlayer_GetLastPlayedTimes_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPlayer_GetLastPlayedTimes_Request::InternalSwap(CPlayer_GetLastPlayedTimes_Request* other) {
  std::swap(min_last_played_, other->min_last_played_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CPlayer_GetLastPlayedTimes_Request::GetMetadata() const {
  protobuf_steammessages_5fplayer_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fplayer_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CPlayer_GetLastPlayedTimes_Request

// optional uint32 min_last_played = 1 [(.proto.steam.description) = "The most recent last-played time the client already knows about"];
bool CPlayer_GetLastPlayedTimes_Request::has_min_last_played() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CPlayer_GetLastPlayedTimes_Request::set_has_min_last_played() {
  _has_bits_[0] |= 0x00000001u;
}
void CPlayer_GetLastPlayedTimes_Request::clear_has_min_last_played() {
  _has_bits_[0] &= ~0x00000001u;
}
void CPlayer_GetLastPlayedTimes_Request::clear_min_last_played() {
  min_last_played_ = 0u;
  clear_has_min_last_played();
}
::google::protobuf::uint32 CPlayer_GetLastPlayedTimes_Request::min_last_played() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPlayer_GetLastPlayedTimes_Request.min_last_played)
  return min_last_played_;
}
void CPlayer_GetLastPlayedTimes_Request::set_min_last_played(::google::protobuf::uint32 value) {
  set_has_min_last_played();
  min_last_played_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPlayer_GetLastPlayedTimes_Request.min_last_played)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPlayer_GetLastPlayedTimes_Response_Game::kAppidFieldNumber;
const int CPlayer_GetLastPlayedTimes_Response_Game::kLastPlaytimeFieldNumber;
const int CPlayer_GetLastPlayedTimes_Response_Game::kPlaytime2WeeksFieldNumber;
const int CPlayer_GetLastPlayedTimes_Response_Game::kPlaytimeForeverFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPlayer_GetLastPlayedTimes_Response_Game::CPlayer_GetLastPlayedTimes_Response_Game()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fplayer_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPlayer_GetLastPlayedTimes_Response.Game)
}
CPlayer_GetLastPlayedTimes_Response_Game::CPlayer_GetLastPlayedTimes_Response_Game(const CPlayer_GetLastPlayedTimes_Response_Game& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&appid_, &from.appid_,
    reinterpret_cast<char*>(&playtime_forever_) -
    reinterpret_cast<char*>(&appid_) + sizeof(playtime_forever_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPlayer_GetLastPlayedTimes_Response.Game)
}

void CPlayer_GetLastPlayedTimes_Response_Game::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&appid_, 0, reinterpret_cast<char*>(&playtime_forever_) -
    reinterpret_cast<char*>(&appid_) + sizeof(playtime_forever_));
}

CPlayer_GetLastPlayedTimes_Response_Game::~CPlayer_GetLastPlayedTimes_Response_Game() {
  // @@protoc_insertion_point(destructor:proto.steam.CPlayer_GetLastPlayedTimes_Response.Game)
  SharedDtor();
}

void CPlayer_GetLastPlayedTimes_Response_Game::SharedDtor() {
}

void CPlayer_GetLastPlayedTimes_Response_Game::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPlayer_GetLastPlayedTimes_Response_Game::descriptor() {
  protobuf_steammessages_5fplayer_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fplayer_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CPlayer_GetLastPlayedTimes_Response_Game& CPlayer_GetLastPlayedTimes_Response_Game::default_instance() {
  protobuf_steammessages_5fplayer_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CPlayer_GetLastPlayedTimes_Response_Game* CPlayer_GetLastPlayedTimes_Response_Game::New(::google::protobuf::Arena* arena) const {
  CPlayer_GetLastPlayedTimes_Response_Game* n = new CPlayer_GetLastPlayedTimes_Response_Game;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CPlayer_GetLastPlayedTimes_Response_Game::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPlayer_GetLastPlayedTimes_Response.Game)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&appid_, 0, reinterpret_cast<char*>(&playtime_forever_) -
      reinterpret_cast<char*>(&appid_) + sizeof(playtime_forever_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CPlayer_GetLastPlayedTimes_Response_Game::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPlayer_GetLastPlayedTimes_Response.Game)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 appid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_appid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &appid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 last_playtime = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_last_playtime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_playtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 playtime_2weeks = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_playtime_2weeks();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playtime_2weeks_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 playtime_forever = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_playtime_forever();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playtime_forever_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPlayer_GetLastPlayedTimes_Response.Game)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPlayer_GetLastPlayedTimes_Response.Game)
  return false;
#undef DO_
}

void CPlayer_GetLastPlayedTimes_Response_Game::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPlayer_GetLastPlayedTimes_Response.Game)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->appid(), output);
  }

  // optional uint32 last_playtime = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->last_playtime(), output);
  }

  // optional int32 playtime_2weeks = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->playtime_2weeks(), output);
  }

  // optional int32 playtime_forever = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->playtime_forever(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPlayer_GetLastPlayedTimes_Response.Game)
}

::google::protobuf::uint8* CPlayer_GetLastPlayedTimes_Response_Game::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPlayer_GetLastPlayedTimes_Response.Game)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 appid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->appid(), target);
  }

  // optional uint32 last_playtime = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->last_playtime(), target);
  }

  // optional int32 playtime_2weeks = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->playtime_2weeks(), target);
  }

  // optional int32 playtime_forever = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->playtime_forever(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPlayer_GetLastPlayedTimes_Response.Game)
  return target;
}

size_t CPlayer_GetLastPlayedTimes_Response_Game::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPlayer_GetLastPlayedTimes_Response.Game)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional int32 appid = 1;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->appid());
    }

    // optional uint32 last_playtime = 2;
    if (has_last_playtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_playtime());
    }

    // optional int32 playtime_2weeks = 3;
    if (has_playtime_2weeks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playtime_2weeks());
    }

    // optional int32 playtime_forever = 4;
    if (has_playtime_forever()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playtime_forever());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPlayer_GetLastPlayedTimes_Response_Game::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPlayer_GetLastPlayedTimes_Response.Game)
  GOOGLE_DCHECK_NE(&from, this);
  const CPlayer_GetLastPlayedTimes_Response_Game* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CPlayer_GetLastPlayedTimes_Response_Game>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPlayer_GetLastPlayedTimes_Response.Game)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPlayer_GetLastPlayedTimes_Response.Game)
    MergeFrom(*source);
  }
}

void CPlayer_GetLastPlayedTimes_Response_Game::MergeFrom(const CPlayer_GetLastPlayedTimes_Response_Game& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPlayer_GetLastPlayedTimes_Response.Game)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000002u) {
      last_playtime_ = from.last_playtime_;
    }
    if (cached_has_bits & 0x00000004u) {
      playtime_2weeks_ = from.playtime_2weeks_;
    }
    if (cached_has_bits & 0x00000008u) {
      playtime_forever_ = from.playtime_forever_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CPlayer_GetLastPlayedTimes_Response_Game::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPlayer_GetLastPlayedTimes_Response.Game)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPlayer_GetLastPlayedTimes_Response_Game::CopyFrom(const CPlayer_GetLastPlayedTimes_Response_Game& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPlayer_GetLastPlayedTimes_Response.Game)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetLastPlayedTimes_Response_Game::IsInitialized() const {
  return true;
}

void CPlayer_GetLastPlayedTimes_Response_Game::Swap(CPlayer_GetLastPlayedTimes_Response_Game* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPlayer_GetLastPlayedTimes_Response_Game::InternalSwap(CPlayer_GetLastPlayedTimes_Response_Game* other) {
  std::swap(appid_, other->appid_);
  std::swap(last_playtime_, other->last_playtime_);
  std::swap(playtime_2weeks_, other->playtime_2weeks_);
  std::swap(playtime_forever_, other->playtime_forever_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CPlayer_GetLastPlayedTimes_Response_Game::GetMetadata() const {
  protobuf_steammessages_5fplayer_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fplayer_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CPlayer_GetLastPlayedTimes_Response_Game

// optional int32 appid = 1;
bool CPlayer_GetLastPlayedTimes_Response_Game::has_appid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CPlayer_GetLastPlayedTimes_Response_Game::set_has_appid() {
  _has_bits_[0] |= 0x00000001u;
}
void CPlayer_GetLastPlayedTimes_Response_Game::clear_has_appid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CPlayer_GetLastPlayedTimes_Response_Game::clear_appid() {
  appid_ = 0;
  clear_has_appid();
}
::google::protobuf::int32 CPlayer_GetLastPlayedTimes_Response_Game::appid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPlayer_GetLastPlayedTimes_Response.Game.appid)
  return appid_;
}
void CPlayer_GetLastPlayedTimes_Response_Game::set_appid(::google::protobuf::int32 value) {
  set_has_appid();
  appid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPlayer_GetLastPlayedTimes_Response.Game.appid)
}

// optional uint32 last_playtime = 2;
bool CPlayer_GetLastPlayedTimes_Response_Game::has_last_playtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CPlayer_GetLastPlayedTimes_Response_Game::set_has_last_playtime() {
  _has_bits_[0] |= 0x00000002u;
}
void CPlayer_GetLastPlayedTimes_Response_Game::clear_has_last_playtime() {
  _has_bits_[0] &= ~0x00000002u;
}
void CPlayer_GetLastPlayedTimes_Response_Game::clear_last_playtime() {
  last_playtime_ = 0u;
  clear_has_last_playtime();
}
::google::protobuf::uint32 CPlayer_GetLastPlayedTimes_Response_Game::last_playtime() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPlayer_GetLastPlayedTimes_Response.Game.last_playtime)
  return last_playtime_;
}
void CPlayer_GetLastPlayedTimes_Response_Game::set_last_playtime(::google::protobuf::uint32 value) {
  set_has_last_playtime();
  last_playtime_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPlayer_GetLastPlayedTimes_Response.Game.last_playtime)
}

// optional int32 playtime_2weeks = 3;
bool CPlayer_GetLastPlayedTimes_Response_Game::has_playtime_2weeks() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CPlayer_GetLastPlayedTimes_Response_Game::set_has_playtime_2weeks() {
  _has_bits_[0] |= 0x00000004u;
}
void CPlayer_GetLastPlayedTimes_Response_Game::clear_has_playtime_2weeks() {
  _has_bits_[0] &= ~0x00000004u;
}
void CPlayer_GetLastPlayedTimes_Response_Game::clear_playtime_2weeks() {
  playtime_2weeks_ = 0;
  clear_has_playtime_2weeks();
}
::google::protobuf::int32 CPlayer_GetLastPlayedTimes_Response_Game::playtime_2weeks() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPlayer_GetLastPlayedTimes_Response.Game.playtime_2weeks)
  return playtime_2weeks_;
}
void CPlayer_GetLastPlayedTimes_Response_Game::set_playtime_2weeks(::google::protobuf::int32 value) {
  set_has_playtime_2weeks();
  playtime_2weeks_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPlayer_GetLastPlayedTimes_Response.Game.playtime_2weeks)
}

// optional int32 playtime_forever = 4;
bool CPlayer_GetLastPlayedTimes_Response_Game::has_playtime_forever() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CPlayer_GetLastPlayedTimes_Response_Game::set_has_playtime_forever() {
  _has_bits_[0] |= 0x00000008u;
}
void CPlayer_GetLastPlayedTimes_Response_Game::clear_has_playtime_forever() {
  _has_bits_[0] &= ~0x00000008u;
}
void CPlayer_GetLastPlayedTimes_Response_Game::clear_playtime_forever() {
  playtime_forever_ = 0;
  clear_has_playtime_forever();
}
::google::protobuf::int32 CPlayer_GetLastPlayedTimes_Response_Game::playtime_forever() const {
  // @@protoc_insertion_point(field_get:proto.steam.CPlayer_GetLastPlayedTimes_Response.Game.playtime_forever)
  return playtime_forever_;
}
void CPlayer_GetLastPlayedTimes_Response_Game::set_playtime_forever(::google::protobuf::int32 value) {
  set_has_playtime_forever();
  playtime_forever_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CPlayer_GetLastPlayedTimes_Response.Game.playtime_forever)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPlayer_GetLastPlayedTimes_Response::kGamesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPlayer_GetLastPlayedTimes_Response::CPlayer_GetLastPlayedTimes_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fplayer_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPlayer_GetLastPlayedTimes_Response)
}
CPlayer_GetLastPlayedTimes_Response::CPlayer_GetLastPlayedTimes_Response(const CPlayer_GetLastPlayedTimes_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      games_(from.games_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPlayer_GetLastPlayedTimes_Response)
}

void CPlayer_GetLastPlayedTimes_Response::SharedCtor() {
  _cached_size_ = 0;
}

CPlayer_GetLastPlayedTimes_Response::~CPlayer_GetLastPlayedTimes_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CPlayer_GetLastPlayedTimes_Response)
  SharedDtor();
}

void CPlayer_GetLastPlayedTimes_Response::SharedDtor() {
}

void CPlayer_GetLastPlayedTimes_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPlayer_GetLastPlayedTimes_Response::descriptor() {
  protobuf_steammessages_5fplayer_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fplayer_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CPlayer_GetLastPlayedTimes_Response& CPlayer_GetLastPlayedTimes_Response::default_instance() {
  protobuf_steammessages_5fplayer_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CPlayer_GetLastPlayedTimes_Response* CPlayer_GetLastPlayedTimes_Response::New(::google::protobuf::Arena* arena) const {
  CPlayer_GetLastPlayedTimes_Response* n = new CPlayer_GetLastPlayedTimes_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CPlayer_GetLastPlayedTimes_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPlayer_GetLastPlayedTimes_Response)
  games_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CPlayer_GetLastPlayedTimes_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPlayer_GetLastPlayedTimes_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.steam.CPlayer_GetLastPlayedTimes_Response.Game games = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_games()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPlayer_GetLastPlayedTimes_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPlayer_GetLastPlayedTimes_Response)
  return false;
#undef DO_
}

void CPlayer_GetLastPlayedTimes_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPlayer_GetLastPlayedTimes_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CPlayer_GetLastPlayedTimes_Response.Game games = 1;
  for (unsigned int i = 0, n = this->games_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->games(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPlayer_GetLastPlayedTimes_Response)
}

::google::protobuf::uint8* CPlayer_GetLastPlayedTimes_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPlayer_GetLastPlayedTimes_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CPlayer_GetLastPlayedTimes_Response.Game games = 1;
  for (unsigned int i = 0, n = this->games_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->games(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPlayer_GetLastPlayedTimes_Response)
  return target;
}

size_t CPlayer_GetLastPlayedTimes_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPlayer_GetLastPlayedTimes_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.steam.CPlayer_GetLastPlayedTimes_Response.Game games = 1;
  {
    unsigned int count = this->games_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->games(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPlayer_GetLastPlayedTimes_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPlayer_GetLastPlayedTimes_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CPlayer_GetLastPlayedTimes_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CPlayer_GetLastPlayedTimes_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPlayer_GetLastPlayedTimes_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPlayer_GetLastPlayedTimes_Response)
    MergeFrom(*source);
  }
}

void CPlayer_GetLastPlayedTimes_Response::MergeFrom(const CPlayer_GetLastPlayedTimes_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPlayer_GetLastPlayedTimes_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  games_.MergeFrom(from.games_);
}

void CPlayer_GetLastPlayedTimes_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPlayer_GetLastPlayedTimes_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPlayer_GetLastPlayedTimes_Response::CopyFrom(const CPlayer_GetLastPlayedTimes_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPlayer_GetLastPlayedTimes_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_GetLastPlayedTimes_Response::IsInitialized() const {
  return true;
}

void CPlayer_GetLastPlayedTimes_Response::Swap(CPlayer_GetLastPlayedTimes_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPlayer_GetLastPlayedTimes_Response::InternalSwap(CPlayer_GetLastPlayedTimes_Response* other) {
  games_.InternalSwap(&other->games_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CPlayer_GetLastPlayedTimes_Response::GetMetadata() const {
  protobuf_steammessages_5fplayer_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fplayer_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CPlayer_GetLastPlayedTimes_Response

// repeated .proto.steam.CPlayer_GetLastPlayedTimes_Response.Game games = 1;
int CPlayer_GetLastPlayedTimes_Response::games_size() const {
  return games_.size();
}
void CPlayer_GetLastPlayedTimes_Response::clear_games() {
  games_.Clear();
}
const ::proto::steam::CPlayer_GetLastPlayedTimes_Response_Game& CPlayer_GetLastPlayedTimes_Response::games(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CPlayer_GetLastPlayedTimes_Response.games)
  return games_.Get(index);
}
::proto::steam::CPlayer_GetLastPlayedTimes_Response_Game* CPlayer_GetLastPlayedTimes_Response::mutable_games(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CPlayer_GetLastPlayedTimes_Response.games)
  return games_.Mutable(index);
}
::proto::steam::CPlayer_GetLastPlayedTimes_Response_Game* CPlayer_GetLastPlayedTimes_Response::add_games() {
  // @@protoc_insertion_point(field_add:proto.steam.CPlayer_GetLastPlayedTimes_Response.games)
  return games_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::CPlayer_GetLastPlayedTimes_Response_Game >*
CPlayer_GetLastPlayedTimes_Response::mutable_games() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CPlayer_GetLastPlayedTimes_Response.games)
  return &games_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::CPlayer_GetLastPlayedTimes_Response_Game >&
CPlayer_GetLastPlayedTimes_Response::games() const {
  // @@protoc_insertion_point(field_list:proto.steam.CPlayer_GetLastPlayedTimes_Response.games)
  return games_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPlayer_AcceptSSA_Request::CPlayer_AcceptSSA_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fplayer_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPlayer_AcceptSSA_Request)
}
CPlayer_AcceptSSA_Request::CPlayer_AcceptSSA_Request(const CPlayer_AcceptSSA_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPlayer_AcceptSSA_Request)
}

void CPlayer_AcceptSSA_Request::SharedCtor() {
  _cached_size_ = 0;
}

CPlayer_AcceptSSA_Request::~CPlayer_AcceptSSA_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CPlayer_AcceptSSA_Request)
  SharedDtor();
}

void CPlayer_AcceptSSA_Request::SharedDtor() {
}

void CPlayer_AcceptSSA_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPlayer_AcceptSSA_Request::descriptor() {
  protobuf_steammessages_5fplayer_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fplayer_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CPlayer_AcceptSSA_Request& CPlayer_AcceptSSA_Request::default_instance() {
  protobuf_steammessages_5fplayer_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CPlayer_AcceptSSA_Request* CPlayer_AcceptSSA_Request::New(::google::protobuf::Arena* arena) const {
  CPlayer_AcceptSSA_Request* n = new CPlayer_AcceptSSA_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CPlayer_AcceptSSA_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPlayer_AcceptSSA_Request)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CPlayer_AcceptSSA_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPlayer_AcceptSSA_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPlayer_AcceptSSA_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPlayer_AcceptSSA_Request)
  return false;
#undef DO_
}

void CPlayer_AcceptSSA_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPlayer_AcceptSSA_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPlayer_AcceptSSA_Request)
}

::google::protobuf::uint8* CPlayer_AcceptSSA_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPlayer_AcceptSSA_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPlayer_AcceptSSA_Request)
  return target;
}

size_t CPlayer_AcceptSSA_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPlayer_AcceptSSA_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPlayer_AcceptSSA_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPlayer_AcceptSSA_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CPlayer_AcceptSSA_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CPlayer_AcceptSSA_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPlayer_AcceptSSA_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPlayer_AcceptSSA_Request)
    MergeFrom(*source);
  }
}

void CPlayer_AcceptSSA_Request::MergeFrom(const CPlayer_AcceptSSA_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPlayer_AcceptSSA_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CPlayer_AcceptSSA_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPlayer_AcceptSSA_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPlayer_AcceptSSA_Request::CopyFrom(const CPlayer_AcceptSSA_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPlayer_AcceptSSA_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_AcceptSSA_Request::IsInitialized() const {
  return true;
}

void CPlayer_AcceptSSA_Request::Swap(CPlayer_AcceptSSA_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPlayer_AcceptSSA_Request::InternalSwap(CPlayer_AcceptSSA_Request* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CPlayer_AcceptSSA_Request::GetMetadata() const {
  protobuf_steammessages_5fplayer_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fplayer_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CPlayer_AcceptSSA_Request

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPlayer_AcceptSSA_Response::CPlayer_AcceptSSA_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fplayer_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPlayer_AcceptSSA_Response)
}
CPlayer_AcceptSSA_Response::CPlayer_AcceptSSA_Response(const CPlayer_AcceptSSA_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPlayer_AcceptSSA_Response)
}

void CPlayer_AcceptSSA_Response::SharedCtor() {
  _cached_size_ = 0;
}

CPlayer_AcceptSSA_Response::~CPlayer_AcceptSSA_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CPlayer_AcceptSSA_Response)
  SharedDtor();
}

void CPlayer_AcceptSSA_Response::SharedDtor() {
}

void CPlayer_AcceptSSA_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPlayer_AcceptSSA_Response::descriptor() {
  protobuf_steammessages_5fplayer_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fplayer_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CPlayer_AcceptSSA_Response& CPlayer_AcceptSSA_Response::default_instance() {
  protobuf_steammessages_5fplayer_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CPlayer_AcceptSSA_Response* CPlayer_AcceptSSA_Response::New(::google::protobuf::Arena* arena) const {
  CPlayer_AcceptSSA_Response* n = new CPlayer_AcceptSSA_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CPlayer_AcceptSSA_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPlayer_AcceptSSA_Response)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CPlayer_AcceptSSA_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPlayer_AcceptSSA_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPlayer_AcceptSSA_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPlayer_AcceptSSA_Response)
  return false;
#undef DO_
}

void CPlayer_AcceptSSA_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPlayer_AcceptSSA_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPlayer_AcceptSSA_Response)
}

::google::protobuf::uint8* CPlayer_AcceptSSA_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPlayer_AcceptSSA_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPlayer_AcceptSSA_Response)
  return target;
}

size_t CPlayer_AcceptSSA_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPlayer_AcceptSSA_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPlayer_AcceptSSA_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPlayer_AcceptSSA_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CPlayer_AcceptSSA_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CPlayer_AcceptSSA_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPlayer_AcceptSSA_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPlayer_AcceptSSA_Response)
    MergeFrom(*source);
  }
}

void CPlayer_AcceptSSA_Response::MergeFrom(const CPlayer_AcceptSSA_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPlayer_AcceptSSA_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CPlayer_AcceptSSA_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPlayer_AcceptSSA_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPlayer_AcceptSSA_Response::CopyFrom(const CPlayer_AcceptSSA_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPlayer_AcceptSSA_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_AcceptSSA_Response::IsInitialized() const {
  return true;
}

void CPlayer_AcceptSSA_Response::Swap(CPlayer_AcceptSSA_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPlayer_AcceptSSA_Response::InternalSwap(CPlayer_AcceptSSA_Response* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CPlayer_AcceptSSA_Response::GetMetadata() const {
  protobuf_steammessages_5fplayer_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fplayer_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CPlayer_AcceptSSA_Response

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CPlayer_LastPlayedTimes_Notification::kGamesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CPlayer_LastPlayedTimes_Notification::CPlayer_LastPlayedTimes_Notification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fplayer_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CPlayer_LastPlayedTimes_Notification)
}
CPlayer_LastPlayedTimes_Notification::CPlayer_LastPlayedTimes_Notification(const CPlayer_LastPlayedTimes_Notification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      games_(from.games_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CPlayer_LastPlayedTimes_Notification)
}

void CPlayer_LastPlayedTimes_Notification::SharedCtor() {
  _cached_size_ = 0;
}

CPlayer_LastPlayedTimes_Notification::~CPlayer_LastPlayedTimes_Notification() {
  // @@protoc_insertion_point(destructor:proto.steam.CPlayer_LastPlayedTimes_Notification)
  SharedDtor();
}

void CPlayer_LastPlayedTimes_Notification::SharedDtor() {
}

void CPlayer_LastPlayedTimes_Notification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CPlayer_LastPlayedTimes_Notification::descriptor() {
  protobuf_steammessages_5fplayer_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fplayer_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CPlayer_LastPlayedTimes_Notification& CPlayer_LastPlayedTimes_Notification::default_instance() {
  protobuf_steammessages_5fplayer_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CPlayer_LastPlayedTimes_Notification* CPlayer_LastPlayedTimes_Notification::New(::google::protobuf::Arena* arena) const {
  CPlayer_LastPlayedTimes_Notification* n = new CPlayer_LastPlayedTimes_Notification;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CPlayer_LastPlayedTimes_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CPlayer_LastPlayedTimes_Notification)
  games_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CPlayer_LastPlayedTimes_Notification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CPlayer_LastPlayedTimes_Notification)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.steam.CPlayer_GetLastPlayedTimes_Response.Game games = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_games()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CPlayer_LastPlayedTimes_Notification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CPlayer_LastPlayedTimes_Notification)
  return false;
#undef DO_
}

void CPlayer_LastPlayedTimes_Notification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CPlayer_LastPlayedTimes_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CPlayer_GetLastPlayedTimes_Response.Game games = 1;
  for (unsigned int i = 0, n = this->games_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->games(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CPlayer_LastPlayedTimes_Notification)
}

::google::protobuf::uint8* CPlayer_LastPlayedTimes_Notification::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CPlayer_LastPlayedTimes_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CPlayer_GetLastPlayedTimes_Response.Game games = 1;
  for (unsigned int i = 0, n = this->games_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->games(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CPlayer_LastPlayedTimes_Notification)
  return target;
}

size_t CPlayer_LastPlayedTimes_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CPlayer_LastPlayedTimes_Notification)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.steam.CPlayer_GetLastPlayedTimes_Response.Game games = 1;
  {
    unsigned int count = this->games_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->games(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPlayer_LastPlayedTimes_Notification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CPlayer_LastPlayedTimes_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CPlayer_LastPlayedTimes_Notification* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CPlayer_LastPlayedTimes_Notification>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CPlayer_LastPlayedTimes_Notification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CPlayer_LastPlayedTimes_Notification)
    MergeFrom(*source);
  }
}

void CPlayer_LastPlayedTimes_Notification::MergeFrom(const CPlayer_LastPlayedTimes_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CPlayer_LastPlayedTimes_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  games_.MergeFrom(from.games_);
}

void CPlayer_LastPlayedTimes_Notification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CPlayer_LastPlayedTimes_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPlayer_LastPlayedTimes_Notification::CopyFrom(const CPlayer_LastPlayedTimes_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CPlayer_LastPlayedTimes_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPlayer_LastPlayedTimes_Notification::IsInitialized() const {
  return true;
}

void CPlayer_LastPlayedTimes_Notification::Swap(CPlayer_LastPlayedTimes_Notification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CPlayer_LastPlayedTimes_Notification::InternalSwap(CPlayer_LastPlayedTimes_Notification* other) {
  games_.InternalSwap(&other->games_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CPlayer_LastPlayedTimes_Notification::GetMetadata() const {
  protobuf_steammessages_5fplayer_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fplayer_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CPlayer_LastPlayedTimes_Notification

// repeated .proto.steam.CPlayer_GetLastPlayedTimes_Response.Game games = 1;
int CPlayer_LastPlayedTimes_Notification::games_size() const {
  return games_.size();
}
void CPlayer_LastPlayedTimes_Notification::clear_games() {
  games_.Clear();
}
const ::proto::steam::CPlayer_GetLastPlayedTimes_Response_Game& CPlayer_LastPlayedTimes_Notification::games(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CPlayer_LastPlayedTimes_Notification.games)
  return games_.Get(index);
}
::proto::steam::CPlayer_GetLastPlayedTimes_Response_Game* CPlayer_LastPlayedTimes_Notification::mutable_games(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CPlayer_LastPlayedTimes_Notification.games)
  return games_.Mutable(index);
}
::proto::steam::CPlayer_GetLastPlayedTimes_Response_Game* CPlayer_LastPlayedTimes_Notification::add_games() {
  // @@protoc_insertion_point(field_add:proto.steam.CPlayer_LastPlayedTimes_Notification.games)
  return games_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::CPlayer_GetLastPlayedTimes_Response_Game >*
CPlayer_LastPlayedTimes_Notification::mutable_games() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CPlayer_LastPlayedTimes_Notification.games)
  return &games_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::CPlayer_GetLastPlayedTimes_Response_Game >&
CPlayer_LastPlayedTimes_Notification::games() const {
  // @@protoc_insertion_point(field_list:proto.steam.CPlayer_LastPlayedTimes_Notification.games)
  return games_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

Player::~Player() {}

const ::google::protobuf::ServiceDescriptor* Player::descriptor() {
  protobuf_steammessages_5fplayer_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fplayer_2esteamclient_2eproto::file_level_service_descriptors[0];
}

const ::google::protobuf::ServiceDescriptor* Player::GetDescriptor() {
  return descriptor();
}

void Player::GetGameBadgeLevels(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CPlayer_GetGameBadgeLevels_Request*,
                         ::proto::steam::CPlayer_GetGameBadgeLevels_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetGameBadgeLevels() not implemented.");
  done->Run();
}

void Player::ClientGetLastPlayedTimes(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CPlayer_GetLastPlayedTimes_Request*,
                         ::proto::steam::CPlayer_GetLastPlayedTimes_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ClientGetLastPlayedTimes() not implemented.");
  done->Run();
}

void Player::AcceptSSA(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CPlayer_AcceptSSA_Request*,
                         ::proto::steam::CPlayer_AcceptSSA_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method AcceptSSA() not implemented.");
  done->Run();
}

void Player::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), protobuf_steammessages_5fplayer_2esteamclient_2eproto::file_level_service_descriptors[0]);
  switch(method->index()) {
    case 0:
      GetGameBadgeLevels(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CPlayer_GetGameBadgeLevels_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CPlayer_GetGameBadgeLevels_Response*>(response),
             done);
      break;
    case 1:
      ClientGetLastPlayedTimes(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CPlayer_GetLastPlayedTimes_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CPlayer_GetLastPlayedTimes_Response*>(response),
             done);
      break;
    case 2:
      AcceptSSA(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CPlayer_AcceptSSA_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CPlayer_AcceptSSA_Response*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& Player::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::steam::CPlayer_GetGameBadgeLevels_Request::default_instance();
    case 1:
      return ::proto::steam::CPlayer_GetLastPlayedTimes_Request::default_instance();
    case 2:
      return ::proto::steam::CPlayer_AcceptSSA_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& Player::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::steam::CPlayer_GetGameBadgeLevels_Response::default_instance();
    case 1:
      return ::proto::steam::CPlayer_GetLastPlayedTimes_Response::default_instance();
    case 2:
      return ::proto::steam::CPlayer_AcceptSSA_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

Player_Stub::Player_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
Player_Stub::Player_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
Player_Stub::~Player_Stub() {
  if (owns_channel_) delete channel_;
}

void Player_Stub::GetGameBadgeLevels(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CPlayer_GetGameBadgeLevels_Request* request,
                              ::proto::steam::CPlayer_GetGameBadgeLevels_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void Player_Stub::ClientGetLastPlayedTimes(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CPlayer_GetLastPlayedTimes_Request* request,
                              ::proto::steam::CPlayer_GetLastPlayedTimes_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void Player_Stub::AcceptSSA(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CPlayer_AcceptSSA_Request* request,
                              ::proto::steam::CPlayer_AcceptSSA_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
// ===================================================================

PlayerClient::~PlayerClient() {}

const ::google::protobuf::ServiceDescriptor* PlayerClient::descriptor() {
  protobuf_steammessages_5fplayer_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fplayer_2esteamclient_2eproto::file_level_service_descriptors[1];
}

const ::google::protobuf::ServiceDescriptor* PlayerClient::GetDescriptor() {
  return descriptor();
}

void PlayerClient::NotifyLastPlayedTimes(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CPlayer_LastPlayedTimes_Notification*,
                         ::proto::steam::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyLastPlayedTimes() not implemented.");
  done->Run();
}

void PlayerClient::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), protobuf_steammessages_5fplayer_2esteamclient_2eproto::file_level_service_descriptors[1]);
  switch(method->index()) {
    case 0:
      NotifyLastPlayedTimes(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CPlayer_LastPlayedTimes_Notification*>(request),
             ::google::protobuf::down_cast< ::proto::steam::NoResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& PlayerClient::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::steam::CPlayer_LastPlayedTimes_Notification::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& PlayerClient::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::steam::NoResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

PlayerClient_Stub::PlayerClient_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
PlayerClient_Stub::PlayerClient_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
PlayerClient_Stub::~PlayerClient_Stub() {
  if (owns_channel_) delete channel_;
}

void PlayerClient_Stub::NotifyLastPlayedTimes(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CPlayer_LastPlayedTimes_Notification* request,
                              ::proto::steam::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace steam
}  // namespace proto

// @@protoc_insertion_point(global_scope)
