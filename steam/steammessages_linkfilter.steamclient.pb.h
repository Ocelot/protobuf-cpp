// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_linkfilter.steamclient.proto

#ifndef PROTOBUF_steammessages_5flinkfilter_2esteamclient_2eproto__INCLUDED
#define PROTOBUF_steammessages_5flinkfilter_2esteamclient_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "steammessages_unified_base.steamclient.pb.h"
// @@protoc_insertion_point(includes)
namespace proto {
namespace steam {
class CCommunity_GetLinkFilterHashPrefixes_Request;
class CCommunity_GetLinkFilterHashPrefixes_RequestDefaultTypeInternal;
extern CCommunity_GetLinkFilterHashPrefixes_RequestDefaultTypeInternal _CCommunity_GetLinkFilterHashPrefixes_Request_default_instance_;
class CCommunity_GetLinkFilterHashPrefixes_Response;
class CCommunity_GetLinkFilterHashPrefixes_ResponseDefaultTypeInternal;
extern CCommunity_GetLinkFilterHashPrefixes_ResponseDefaultTypeInternal _CCommunity_GetLinkFilterHashPrefixes_Response_default_instance_;
class CCommunity_GetLinkFilterHashes_Request;
class CCommunity_GetLinkFilterHashes_RequestDefaultTypeInternal;
extern CCommunity_GetLinkFilterHashes_RequestDefaultTypeInternal _CCommunity_GetLinkFilterHashes_Request_default_instance_;
class CCommunity_GetLinkFilterHashes_Response;
class CCommunity_GetLinkFilterHashes_ResponseDefaultTypeInternal;
extern CCommunity_GetLinkFilterHashes_ResponseDefaultTypeInternal _CCommunity_GetLinkFilterHashes_Response_default_instance_;
class CCommunity_GetLinkFilterListVersion_Request;
class CCommunity_GetLinkFilterListVersion_RequestDefaultTypeInternal;
extern CCommunity_GetLinkFilterListVersion_RequestDefaultTypeInternal _CCommunity_GetLinkFilterListVersion_Request_default_instance_;
class CCommunity_GetLinkFilterListVersion_Response;
class CCommunity_GetLinkFilterListVersion_ResponseDefaultTypeInternal;
extern CCommunity_GetLinkFilterListVersion_ResponseDefaultTypeInternal _CCommunity_GetLinkFilterListVersion_Response_default_instance_;
class NoResponse;
class NoResponseDefaultTypeInternal;
extern NoResponseDefaultTypeInternal _NoResponse_default_instance_;
}  // namespace steam
}  // namespace proto

namespace proto {
namespace steam {

namespace protobuf_steammessages_5flinkfilter_2esteamclient_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_steammessages_5flinkfilter_2esteamclient_2eproto

// ===================================================================

class CCommunity_GetLinkFilterHashPrefixes_Request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CCommunity_GetLinkFilterHashPrefixes_Request) */ {
 public:
  CCommunity_GetLinkFilterHashPrefixes_Request();
  virtual ~CCommunity_GetLinkFilterHashPrefixes_Request();

  CCommunity_GetLinkFilterHashPrefixes_Request(const CCommunity_GetLinkFilterHashPrefixes_Request& from);

  inline CCommunity_GetLinkFilterHashPrefixes_Request& operator=(const CCommunity_GetLinkFilterHashPrefixes_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CCommunity_GetLinkFilterHashPrefixes_Request& default_instance();

  static inline const CCommunity_GetLinkFilterHashPrefixes_Request* internal_default_instance() {
    return reinterpret_cast<const CCommunity_GetLinkFilterHashPrefixes_Request*>(
               &_CCommunity_GetLinkFilterHashPrefixes_Request_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(CCommunity_GetLinkFilterHashPrefixes_Request* other);

  // implements Message ----------------------------------------------

  inline CCommunity_GetLinkFilterHashPrefixes_Request* New() const PROTOBUF_FINAL { return New(NULL); }

  CCommunity_GetLinkFilterHashPrefixes_Request* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CCommunity_GetLinkFilterHashPrefixes_Request& from);
  void MergeFrom(const CCommunity_GetLinkFilterHashPrefixes_Request& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CCommunity_GetLinkFilterHashPrefixes_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 hit_type = 1 [(.proto.steam.description) = "The retrieved hits will be filtered to this type."];
  bool has_hit_type() const;
  void clear_hit_type();
  static const int kHitTypeFieldNumber = 1;
  ::google::protobuf::uint32 hit_type() const;
  void set_hit_type(::google::protobuf::uint32 value);

  // optional uint32 count = 2 [(.proto.steam.description) = "The number of hits to retrieve in a single batch. Specify 0 for no limit."];
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 2;
  ::google::protobuf::uint32 count() const;
  void set_count(::google::protobuf::uint32 value);

  // optional uint64 start = 3 [(.proto.steam.description) = "The starting count when retrieving hits in batches."];
  bool has_start() const;
  void clear_start();
  static const int kStartFieldNumber = 3;
  ::google::protobuf::uint64 start() const;
  void set_start(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CCommunity_GetLinkFilterHashPrefixes_Request)
 private:
  void set_has_hit_type();
  void clear_has_hit_type();
  void set_has_count();
  void clear_has_count();
  void set_has_start();
  void clear_has_start();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 hit_type_;
  ::google::protobuf::uint32 count_;
  ::google::protobuf::uint64 start_;
  friend struct protobuf_steammessages_5flinkfilter_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CCommunity_GetLinkFilterHashPrefixes_Response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CCommunity_GetLinkFilterHashPrefixes_Response) */ {
 public:
  CCommunity_GetLinkFilterHashPrefixes_Response();
  virtual ~CCommunity_GetLinkFilterHashPrefixes_Response();

  CCommunity_GetLinkFilterHashPrefixes_Response(const CCommunity_GetLinkFilterHashPrefixes_Response& from);

  inline CCommunity_GetLinkFilterHashPrefixes_Response& operator=(const CCommunity_GetLinkFilterHashPrefixes_Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CCommunity_GetLinkFilterHashPrefixes_Response& default_instance();

  static inline const CCommunity_GetLinkFilterHashPrefixes_Response* internal_default_instance() {
    return reinterpret_cast<const CCommunity_GetLinkFilterHashPrefixes_Response*>(
               &_CCommunity_GetLinkFilterHashPrefixes_Response_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(CCommunity_GetLinkFilterHashPrefixes_Response* other);

  // implements Message ----------------------------------------------

  inline CCommunity_GetLinkFilterHashPrefixes_Response* New() const PROTOBUF_FINAL { return New(NULL); }

  CCommunity_GetLinkFilterHashPrefixes_Response* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CCommunity_GetLinkFilterHashPrefixes_Response& from);
  void MergeFrom(const CCommunity_GetLinkFilterHashPrefixes_Response& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CCommunity_GetLinkFilterHashPrefixes_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 hash_prefixes = 1 [(.proto.steam.description) = "The first 32 bits of the SHA1 hashes of each hit requested."];
  int hash_prefixes_size() const;
  void clear_hash_prefixes();
  static const int kHashPrefixesFieldNumber = 1;
  ::google::protobuf::uint32 hash_prefixes(int index) const;
  void set_hash_prefixes(int index, ::google::protobuf::uint32 value);
  void add_hash_prefixes(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      hash_prefixes() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_hash_prefixes();

  // @@protoc_insertion_point(class_scope:proto.steam.CCommunity_GetLinkFilterHashPrefixes_Response)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > hash_prefixes_;
  friend struct protobuf_steammessages_5flinkfilter_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CCommunity_GetLinkFilterHashes_Request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CCommunity_GetLinkFilterHashes_Request) */ {
 public:
  CCommunity_GetLinkFilterHashes_Request();
  virtual ~CCommunity_GetLinkFilterHashes_Request();

  CCommunity_GetLinkFilterHashes_Request(const CCommunity_GetLinkFilterHashes_Request& from);

  inline CCommunity_GetLinkFilterHashes_Request& operator=(const CCommunity_GetLinkFilterHashes_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CCommunity_GetLinkFilterHashes_Request& default_instance();

  static inline const CCommunity_GetLinkFilterHashes_Request* internal_default_instance() {
    return reinterpret_cast<const CCommunity_GetLinkFilterHashes_Request*>(
               &_CCommunity_GetLinkFilterHashes_Request_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(CCommunity_GetLinkFilterHashes_Request* other);

  // implements Message ----------------------------------------------

  inline CCommunity_GetLinkFilterHashes_Request* New() const PROTOBUF_FINAL { return New(NULL); }

  CCommunity_GetLinkFilterHashes_Request* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CCommunity_GetLinkFilterHashes_Request& from);
  void MergeFrom(const CCommunity_GetLinkFilterHashes_Request& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CCommunity_GetLinkFilterHashes_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 hit_type = 1 [(.proto.steam.description) = "The retrieved hits will be filtered to this type."];
  bool has_hit_type() const;
  void clear_hit_type();
  static const int kHitTypeFieldNumber = 1;
  ::google::protobuf::uint32 hit_type() const;
  void set_hit_type(::google::protobuf::uint32 value);

  // optional uint32 count = 2 [(.proto.steam.description) = "The number of hits to retrieve in a single batch. Specify 0 for no limit."];
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 2;
  ::google::protobuf::uint32 count() const;
  void set_count(::google::protobuf::uint32 value);

  // optional uint64 start = 3 [(.proto.steam.description) = "The starting count when retrieving hits in batches."];
  bool has_start() const;
  void clear_start();
  static const int kStartFieldNumber = 3;
  ::google::protobuf::uint64 start() const;
  void set_start(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CCommunity_GetLinkFilterHashes_Request)
 private:
  void set_has_hit_type();
  void clear_has_hit_type();
  void set_has_count();
  void clear_has_count();
  void set_has_start();
  void clear_has_start();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 hit_type_;
  ::google::protobuf::uint32 count_;
  ::google::protobuf::uint64 start_;
  friend struct protobuf_steammessages_5flinkfilter_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CCommunity_GetLinkFilterHashes_Response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CCommunity_GetLinkFilterHashes_Response) */ {
 public:
  CCommunity_GetLinkFilterHashes_Response();
  virtual ~CCommunity_GetLinkFilterHashes_Response();

  CCommunity_GetLinkFilterHashes_Response(const CCommunity_GetLinkFilterHashes_Response& from);

  inline CCommunity_GetLinkFilterHashes_Response& operator=(const CCommunity_GetLinkFilterHashes_Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CCommunity_GetLinkFilterHashes_Response& default_instance();

  static inline const CCommunity_GetLinkFilterHashes_Response* internal_default_instance() {
    return reinterpret_cast<const CCommunity_GetLinkFilterHashes_Response*>(
               &_CCommunity_GetLinkFilterHashes_Response_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(CCommunity_GetLinkFilterHashes_Response* other);

  // implements Message ----------------------------------------------

  inline CCommunity_GetLinkFilterHashes_Response* New() const PROTOBUF_FINAL { return New(NULL); }

  CCommunity_GetLinkFilterHashes_Response* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CCommunity_GetLinkFilterHashes_Response& from);
  void MergeFrom(const CCommunity_GetLinkFilterHashes_Response& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CCommunity_GetLinkFilterHashes_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes hashes = 1 [(.proto.steam.description) = "A list of hashes returned from our request."];
  int hashes_size() const;
  void clear_hashes();
  static const int kHashesFieldNumber = 1;
  const ::std::string& hashes(int index) const;
  ::std::string* mutable_hashes(int index);
  void set_hashes(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_hashes(int index, ::std::string&& value);
  #endif
  void set_hashes(int index, const char* value);
  void set_hashes(int index, const void* value, size_t size);
  ::std::string* add_hashes();
  void add_hashes(const ::std::string& value);
  #if LANG_CXX11
  void add_hashes(::std::string&& value);
  #endif
  void add_hashes(const char* value);
  void add_hashes(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& hashes() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_hashes();

  // @@protoc_insertion_point(class_scope:proto.steam.CCommunity_GetLinkFilterHashes_Response)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> hashes_;
  friend struct protobuf_steammessages_5flinkfilter_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CCommunity_GetLinkFilterListVersion_Request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CCommunity_GetLinkFilterListVersion_Request) */ {
 public:
  CCommunity_GetLinkFilterListVersion_Request();
  virtual ~CCommunity_GetLinkFilterListVersion_Request();

  CCommunity_GetLinkFilterListVersion_Request(const CCommunity_GetLinkFilterListVersion_Request& from);

  inline CCommunity_GetLinkFilterListVersion_Request& operator=(const CCommunity_GetLinkFilterListVersion_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CCommunity_GetLinkFilterListVersion_Request& default_instance();

  static inline const CCommunity_GetLinkFilterListVersion_Request* internal_default_instance() {
    return reinterpret_cast<const CCommunity_GetLinkFilterListVersion_Request*>(
               &_CCommunity_GetLinkFilterListVersion_Request_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(CCommunity_GetLinkFilterListVersion_Request* other);

  // implements Message ----------------------------------------------

  inline CCommunity_GetLinkFilterListVersion_Request* New() const PROTOBUF_FINAL { return New(NULL); }

  CCommunity_GetLinkFilterListVersion_Request* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CCommunity_GetLinkFilterListVersion_Request& from);
  void MergeFrom(const CCommunity_GetLinkFilterListVersion_Request& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CCommunity_GetLinkFilterListVersion_Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 hit_type = 1 [(.proto.steam.description) = "The version hashes for this type\'s chunks will be returned."];
  bool has_hit_type() const;
  void clear_hit_type();
  static const int kHitTypeFieldNumber = 1;
  ::google::protobuf::uint32 hit_type() const;
  void set_hit_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CCommunity_GetLinkFilterListVersion_Request)
 private:
  void set_has_hit_type();
  void clear_has_hit_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 hit_type_;
  friend struct protobuf_steammessages_5flinkfilter_2esteamclient_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CCommunity_GetLinkFilterListVersion_Response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.steam.CCommunity_GetLinkFilterListVersion_Response) */ {
 public:
  CCommunity_GetLinkFilterListVersion_Response();
  virtual ~CCommunity_GetLinkFilterListVersion_Response();

  CCommunity_GetLinkFilterListVersion_Response(const CCommunity_GetLinkFilterListVersion_Response& from);

  inline CCommunity_GetLinkFilterListVersion_Response& operator=(const CCommunity_GetLinkFilterListVersion_Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CCommunity_GetLinkFilterListVersion_Response& default_instance();

  static inline const CCommunity_GetLinkFilterListVersion_Response* internal_default_instance() {
    return reinterpret_cast<const CCommunity_GetLinkFilterListVersion_Response*>(
               &_CCommunity_GetLinkFilterListVersion_Response_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(CCommunity_GetLinkFilterListVersion_Response* other);

  // implements Message ----------------------------------------------

  inline CCommunity_GetLinkFilterListVersion_Response* New() const PROTOBUF_FINAL { return New(NULL); }

  CCommunity_GetLinkFilterListVersion_Response* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CCommunity_GetLinkFilterListVersion_Response& from);
  void MergeFrom(const CCommunity_GetLinkFilterListVersion_Response& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CCommunity_GetLinkFilterListVersion_Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string version = 1 [(.proto.steam.description) = "A hash built using the IDs of the contained hits."];
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // optional uint64 count = 2 [(.proto.steam.description) = "The number of hits of this type"];
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 2;
  ::google::protobuf::uint64 count() const;
  void set_count(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.steam.CCommunity_GetLinkFilterListVersion_Response)
 private:
  void set_has_version();
  void clear_has_version();
  void set_has_count();
  void clear_has_count();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  ::google::protobuf::uint64 count_;
  friend struct protobuf_steammessages_5flinkfilter_2esteamclient_2eproto::TableStruct;
};
// ===================================================================

class CommunityLinkFilter_Stub;

class CommunityLinkFilter : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline CommunityLinkFilter() {};
 public:
  virtual ~CommunityLinkFilter();

  typedef CommunityLinkFilter_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void GetLinkFilterHashPrefixes(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CCommunity_GetLinkFilterHashPrefixes_Request* request,
                       ::proto::steam::CCommunity_GetLinkFilterHashPrefixes_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetLinkFilterHashes(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CCommunity_GetLinkFilterHashes_Request* request,
                       ::proto::steam::CCommunity_GetLinkFilterHashes_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void GetLinkFilterListVersion(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CCommunity_GetLinkFilterListVersion_Request* request,
                       ::proto::steam::CCommunity_GetLinkFilterListVersion_Response* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(CommunityLinkFilter);
};

class CommunityLinkFilter_Stub : public CommunityLinkFilter {
 public:
  CommunityLinkFilter_Stub(::google::protobuf::RpcChannel* channel);
  CommunityLinkFilter_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~CommunityLinkFilter_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements CommunityLinkFilter ------------------------------------------

  void GetLinkFilterHashPrefixes(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CCommunity_GetLinkFilterHashPrefixes_Request* request,
                       ::proto::steam::CCommunity_GetLinkFilterHashPrefixes_Response* response,
                       ::google::protobuf::Closure* done);
  void GetLinkFilterHashes(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CCommunity_GetLinkFilterHashes_Request* request,
                       ::proto::steam::CCommunity_GetLinkFilterHashes_Response* response,
                       ::google::protobuf::Closure* done);
  void GetLinkFilterListVersion(::google::protobuf::RpcController* controller,
                       const ::proto::steam::CCommunity_GetLinkFilterListVersion_Request* request,
                       ::proto::steam::CCommunity_GetLinkFilterListVersion_Response* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(CommunityLinkFilter_Stub);
};


// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// CCommunity_GetLinkFilterHashPrefixes_Request

// optional uint32 hit_type = 1 [(.proto.steam.description) = "The retrieved hits will be filtered to this type."];
inline bool CCommunity_GetLinkFilterHashPrefixes_Request::has_hit_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CCommunity_GetLinkFilterHashPrefixes_Request::set_has_hit_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CCommunity_GetLinkFilterHashPrefixes_Request::clear_has_hit_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CCommunity_GetLinkFilterHashPrefixes_Request::clear_hit_type() {
  hit_type_ = 0u;
  clear_has_hit_type();
}
inline ::google::protobuf::uint32 CCommunity_GetLinkFilterHashPrefixes_Request::hit_type() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCommunity_GetLinkFilterHashPrefixes_Request.hit_type)
  return hit_type_;
}
inline void CCommunity_GetLinkFilterHashPrefixes_Request::set_hit_type(::google::protobuf::uint32 value) {
  set_has_hit_type();
  hit_type_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCommunity_GetLinkFilterHashPrefixes_Request.hit_type)
}

// optional uint32 count = 2 [(.proto.steam.description) = "The number of hits to retrieve in a single batch. Specify 0 for no limit."];
inline bool CCommunity_GetLinkFilterHashPrefixes_Request::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CCommunity_GetLinkFilterHashPrefixes_Request::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CCommunity_GetLinkFilterHashPrefixes_Request::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CCommunity_GetLinkFilterHashPrefixes_Request::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 CCommunity_GetLinkFilterHashPrefixes_Request::count() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCommunity_GetLinkFilterHashPrefixes_Request.count)
  return count_;
}
inline void CCommunity_GetLinkFilterHashPrefixes_Request::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCommunity_GetLinkFilterHashPrefixes_Request.count)
}

// optional uint64 start = 3 [(.proto.steam.description) = "The starting count when retrieving hits in batches."];
inline bool CCommunity_GetLinkFilterHashPrefixes_Request::has_start() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CCommunity_GetLinkFilterHashPrefixes_Request::set_has_start() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CCommunity_GetLinkFilterHashPrefixes_Request::clear_has_start() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CCommunity_GetLinkFilterHashPrefixes_Request::clear_start() {
  start_ = GOOGLE_ULONGLONG(0);
  clear_has_start();
}
inline ::google::protobuf::uint64 CCommunity_GetLinkFilterHashPrefixes_Request::start() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCommunity_GetLinkFilterHashPrefixes_Request.start)
  return start_;
}
inline void CCommunity_GetLinkFilterHashPrefixes_Request::set_start(::google::protobuf::uint64 value) {
  set_has_start();
  start_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCommunity_GetLinkFilterHashPrefixes_Request.start)
}

// -------------------------------------------------------------------

// CCommunity_GetLinkFilterHashPrefixes_Response

// repeated uint32 hash_prefixes = 1 [(.proto.steam.description) = "The first 32 bits of the SHA1 hashes of each hit requested."];
inline int CCommunity_GetLinkFilterHashPrefixes_Response::hash_prefixes_size() const {
  return hash_prefixes_.size();
}
inline void CCommunity_GetLinkFilterHashPrefixes_Response::clear_hash_prefixes() {
  hash_prefixes_.Clear();
}
inline ::google::protobuf::uint32 CCommunity_GetLinkFilterHashPrefixes_Response::hash_prefixes(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CCommunity_GetLinkFilterHashPrefixes_Response.hash_prefixes)
  return hash_prefixes_.Get(index);
}
inline void CCommunity_GetLinkFilterHashPrefixes_Response::set_hash_prefixes(int index, ::google::protobuf::uint32 value) {
  hash_prefixes_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.steam.CCommunity_GetLinkFilterHashPrefixes_Response.hash_prefixes)
}
inline void CCommunity_GetLinkFilterHashPrefixes_Response::add_hash_prefixes(::google::protobuf::uint32 value) {
  hash_prefixes_.Add(value);
  // @@protoc_insertion_point(field_add:proto.steam.CCommunity_GetLinkFilterHashPrefixes_Response.hash_prefixes)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CCommunity_GetLinkFilterHashPrefixes_Response::hash_prefixes() const {
  // @@protoc_insertion_point(field_list:proto.steam.CCommunity_GetLinkFilterHashPrefixes_Response.hash_prefixes)
  return hash_prefixes_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CCommunity_GetLinkFilterHashPrefixes_Response::mutable_hash_prefixes() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CCommunity_GetLinkFilterHashPrefixes_Response.hash_prefixes)
  return &hash_prefixes_;
}

// -------------------------------------------------------------------

// CCommunity_GetLinkFilterHashes_Request

// optional uint32 hit_type = 1 [(.proto.steam.description) = "The retrieved hits will be filtered to this type."];
inline bool CCommunity_GetLinkFilterHashes_Request::has_hit_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CCommunity_GetLinkFilterHashes_Request::set_has_hit_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CCommunity_GetLinkFilterHashes_Request::clear_has_hit_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CCommunity_GetLinkFilterHashes_Request::clear_hit_type() {
  hit_type_ = 0u;
  clear_has_hit_type();
}
inline ::google::protobuf::uint32 CCommunity_GetLinkFilterHashes_Request::hit_type() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCommunity_GetLinkFilterHashes_Request.hit_type)
  return hit_type_;
}
inline void CCommunity_GetLinkFilterHashes_Request::set_hit_type(::google::protobuf::uint32 value) {
  set_has_hit_type();
  hit_type_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCommunity_GetLinkFilterHashes_Request.hit_type)
}

// optional uint32 count = 2 [(.proto.steam.description) = "The number of hits to retrieve in a single batch. Specify 0 for no limit."];
inline bool CCommunity_GetLinkFilterHashes_Request::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CCommunity_GetLinkFilterHashes_Request::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CCommunity_GetLinkFilterHashes_Request::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CCommunity_GetLinkFilterHashes_Request::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 CCommunity_GetLinkFilterHashes_Request::count() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCommunity_GetLinkFilterHashes_Request.count)
  return count_;
}
inline void CCommunity_GetLinkFilterHashes_Request::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCommunity_GetLinkFilterHashes_Request.count)
}

// optional uint64 start = 3 [(.proto.steam.description) = "The starting count when retrieving hits in batches."];
inline bool CCommunity_GetLinkFilterHashes_Request::has_start() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CCommunity_GetLinkFilterHashes_Request::set_has_start() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CCommunity_GetLinkFilterHashes_Request::clear_has_start() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CCommunity_GetLinkFilterHashes_Request::clear_start() {
  start_ = GOOGLE_ULONGLONG(0);
  clear_has_start();
}
inline ::google::protobuf::uint64 CCommunity_GetLinkFilterHashes_Request::start() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCommunity_GetLinkFilterHashes_Request.start)
  return start_;
}
inline void CCommunity_GetLinkFilterHashes_Request::set_start(::google::protobuf::uint64 value) {
  set_has_start();
  start_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCommunity_GetLinkFilterHashes_Request.start)
}

// -------------------------------------------------------------------

// CCommunity_GetLinkFilterHashes_Response

// repeated bytes hashes = 1 [(.proto.steam.description) = "A list of hashes returned from our request."];
inline int CCommunity_GetLinkFilterHashes_Response::hashes_size() const {
  return hashes_.size();
}
inline void CCommunity_GetLinkFilterHashes_Response::clear_hashes() {
  hashes_.Clear();
}
inline const ::std::string& CCommunity_GetLinkFilterHashes_Response::hashes(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CCommunity_GetLinkFilterHashes_Response.hashes)
  return hashes_.Get(index);
}
inline ::std::string* CCommunity_GetLinkFilterHashes_Response::mutable_hashes(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CCommunity_GetLinkFilterHashes_Response.hashes)
  return hashes_.Mutable(index);
}
inline void CCommunity_GetLinkFilterHashes_Response::set_hashes(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:proto.steam.CCommunity_GetLinkFilterHashes_Response.hashes)
  hashes_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void CCommunity_GetLinkFilterHashes_Response::set_hashes(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:proto.steam.CCommunity_GetLinkFilterHashes_Response.hashes)
  hashes_.Mutable(index)->assign(std::move(value));
}
#endif
inline void CCommunity_GetLinkFilterHashes_Response::set_hashes(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  hashes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.steam.CCommunity_GetLinkFilterHashes_Response.hashes)
}
inline void CCommunity_GetLinkFilterHashes_Response::set_hashes(int index, const void* value, size_t size) {
  hashes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CCommunity_GetLinkFilterHashes_Response.hashes)
}
inline ::std::string* CCommunity_GetLinkFilterHashes_Response::add_hashes() {
  // @@protoc_insertion_point(field_add_mutable:proto.steam.CCommunity_GetLinkFilterHashes_Response.hashes)
  return hashes_.Add();
}
inline void CCommunity_GetLinkFilterHashes_Response::add_hashes(const ::std::string& value) {
  hashes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto.steam.CCommunity_GetLinkFilterHashes_Response.hashes)
}
#if LANG_CXX11
inline void CCommunity_GetLinkFilterHashes_Response::add_hashes(::std::string&& value) {
  hashes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:proto.steam.CCommunity_GetLinkFilterHashes_Response.hashes)
}
#endif
inline void CCommunity_GetLinkFilterHashes_Response::add_hashes(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  hashes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto.steam.CCommunity_GetLinkFilterHashes_Response.hashes)
}
inline void CCommunity_GetLinkFilterHashes_Response::add_hashes(const void* value, size_t size) {
  hashes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto.steam.CCommunity_GetLinkFilterHashes_Response.hashes)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CCommunity_GetLinkFilterHashes_Response::hashes() const {
  // @@protoc_insertion_point(field_list:proto.steam.CCommunity_GetLinkFilterHashes_Response.hashes)
  return hashes_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CCommunity_GetLinkFilterHashes_Response::mutable_hashes() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CCommunity_GetLinkFilterHashes_Response.hashes)
  return &hashes_;
}

// -------------------------------------------------------------------

// CCommunity_GetLinkFilterListVersion_Request

// optional uint32 hit_type = 1 [(.proto.steam.description) = "The version hashes for this type\'s chunks will be returned."];
inline bool CCommunity_GetLinkFilterListVersion_Request::has_hit_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CCommunity_GetLinkFilterListVersion_Request::set_has_hit_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CCommunity_GetLinkFilterListVersion_Request::clear_has_hit_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CCommunity_GetLinkFilterListVersion_Request::clear_hit_type() {
  hit_type_ = 0u;
  clear_has_hit_type();
}
inline ::google::protobuf::uint32 CCommunity_GetLinkFilterListVersion_Request::hit_type() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCommunity_GetLinkFilterListVersion_Request.hit_type)
  return hit_type_;
}
inline void CCommunity_GetLinkFilterListVersion_Request::set_hit_type(::google::protobuf::uint32 value) {
  set_has_hit_type();
  hit_type_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCommunity_GetLinkFilterListVersion_Request.hit_type)
}

// -------------------------------------------------------------------

// CCommunity_GetLinkFilterListVersion_Response

// optional string version = 1 [(.proto.steam.description) = "A hash built using the IDs of the contained hits."];
inline bool CCommunity_GetLinkFilterListVersion_Response::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CCommunity_GetLinkFilterListVersion_Response::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CCommunity_GetLinkFilterListVersion_Response::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CCommunity_GetLinkFilterListVersion_Response::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_version();
}
inline const ::std::string& CCommunity_GetLinkFilterListVersion_Response::version() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCommunity_GetLinkFilterListVersion_Response.version)
  return version_.GetNoArena();
}
inline void CCommunity_GetLinkFilterListVersion_Response::set_version(const ::std::string& value) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CCommunity_GetLinkFilterListVersion_Response.version)
}
#if LANG_CXX11
inline void CCommunity_GetLinkFilterListVersion_Response::set_version(::std::string&& value) {
  set_has_version();
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CCommunity_GetLinkFilterListVersion_Response.version)
}
#endif
inline void CCommunity_GetLinkFilterListVersion_Response::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CCommunity_GetLinkFilterListVersion_Response.version)
}
inline void CCommunity_GetLinkFilterListVersion_Response::set_version(const char* value, size_t size) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CCommunity_GetLinkFilterListVersion_Response.version)
}
inline ::std::string* CCommunity_GetLinkFilterListVersion_Response::mutable_version() {
  set_has_version();
  // @@protoc_insertion_point(field_mutable:proto.steam.CCommunity_GetLinkFilterListVersion_Response.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CCommunity_GetLinkFilterListVersion_Response::release_version() {
  // @@protoc_insertion_point(field_release:proto.steam.CCommunity_GetLinkFilterListVersion_Response.version)
  clear_has_version();
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CCommunity_GetLinkFilterListVersion_Response::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    set_has_version();
  } else {
    clear_has_version();
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CCommunity_GetLinkFilterListVersion_Response.version)
}

// optional uint64 count = 2 [(.proto.steam.description) = "The number of hits of this type"];
inline bool CCommunity_GetLinkFilterListVersion_Response::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CCommunity_GetLinkFilterListVersion_Response::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CCommunity_GetLinkFilterListVersion_Response::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CCommunity_GetLinkFilterListVersion_Response::clear_count() {
  count_ = GOOGLE_ULONGLONG(0);
  clear_has_count();
}
inline ::google::protobuf::uint64 CCommunity_GetLinkFilterListVersion_Response::count() const {
  // @@protoc_insertion_point(field_get:proto.steam.CCommunity_GetLinkFilterListVersion_Response.count)
  return count_;
}
inline void CCommunity_GetLinkFilterListVersion_Response::set_count(::google::protobuf::uint64 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CCommunity_GetLinkFilterListVersion_Response.count)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace steam
}  // namespace proto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_steammessages_5flinkfilter_2esteamclient_2eproto__INCLUDED
