// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_broadcast.steamclient.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "steammessages_broadcast.steamclient.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace steam {
class CBroadcast_BeginBroadcastSession_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_BeginBroadcastSession_Request> {
} _CBroadcast_BeginBroadcastSession_Request_default_instance_;
class CBroadcast_BeginBroadcastSession_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_BeginBroadcastSession_Response> {
} _CBroadcast_BeginBroadcastSession_Response_default_instance_;
class CBroadcast_EndBroadcastSession_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_EndBroadcastSession_Request> {
} _CBroadcast_EndBroadcastSession_Request_default_instance_;
class CBroadcast_EndBroadcastSession_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_EndBroadcastSession_Response> {
} _CBroadcast_EndBroadcastSession_Response_default_instance_;
class CBroadcast_StartBroadcastUpload_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_StartBroadcastUpload_Request> {
} _CBroadcast_StartBroadcastUpload_Request_default_instance_;
class CBroadcast_StartBroadcastUpload_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_StartBroadcastUpload_Response> {
} _CBroadcast_StartBroadcastUpload_Response_default_instance_;
class CBroadcast_NotifyBroadcastUploadStop_NotificationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_NotifyBroadcastUploadStop_Notification> {
} _CBroadcast_NotifyBroadcastUploadStop_Notification_default_instance_;
class CBroadcast_WatchBroadcast_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_WatchBroadcast_Request> {
} _CBroadcast_WatchBroadcast_Request_default_instance_;
class CBroadcast_WatchBroadcast_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_WatchBroadcast_Response> {
} _CBroadcast_WatchBroadcast_Response_default_instance_;
class CBroadcast_GetBroadcastStatus_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_GetBroadcastStatus_Request> {
} _CBroadcast_GetBroadcastStatus_Request_default_instance_;
class CBroadcast_GetBroadcastStatus_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_GetBroadcastStatus_Response> {
} _CBroadcast_GetBroadcastStatus_Response_default_instance_;
class CBroadcast_InviteToBroadcast_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_InviteToBroadcast_Request> {
} _CBroadcast_InviteToBroadcast_Request_default_instance_;
class CBroadcast_InviteToBroadcast_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_InviteToBroadcast_Response> {
} _CBroadcast_InviteToBroadcast_Response_default_instance_;
class CBroadcast_SendBroadcastStateToServer_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_SendBroadcastStateToServer_Request> {
} _CBroadcast_SendBroadcastStateToServer_Request_default_instance_;
class CBroadcast_SendBroadcastStateToServer_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_SendBroadcastStateToServer_Response> {
} _CBroadcast_SendBroadcastStateToServer_Response_default_instance_;
class CBroadcast_NotifyBroadcastSessionHeartbeat_NotificationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_NotifyBroadcastSessionHeartbeat_Notification> {
} _CBroadcast_NotifyBroadcastSessionHeartbeat_Notification_default_instance_;
class CBroadcast_GetBroadcastChatInfo_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_GetBroadcastChatInfo_Request> {
} _CBroadcast_GetBroadcastChatInfo_Request_default_instance_;
class CBroadcast_GetBroadcastChatInfo_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_GetBroadcastChatInfo_Response> {
} _CBroadcast_GetBroadcastChatInfo_Response_default_instance_;
class CBroadcast_PostChatMessage_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_PostChatMessage_Request> {
} _CBroadcast_PostChatMessage_Request_default_instance_;
class CBroadcast_PostChatMessage_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_PostChatMessage_Response> {
} _CBroadcast_PostChatMessage_Response_default_instance_;
class CBroadcast_MuteBroadcastChatUser_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_MuteBroadcastChatUser_Request> {
} _CBroadcast_MuteBroadcastChatUser_Request_default_instance_;
class CBroadcast_MuteBroadcastChatUser_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_MuteBroadcastChatUser_Response> {
} _CBroadcast_MuteBroadcastChatUser_Response_default_instance_;
class CBroadcast_RemoveUserChatText_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_RemoveUserChatText_Request> {
} _CBroadcast_RemoveUserChatText_Request_default_instance_;
class CBroadcast_RemoveUserChatText_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_RemoveUserChatText_Response> {
} _CBroadcast_RemoveUserChatText_Response_default_instance_;
class CBroadcast_GetBroadcastChatUserNames_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_GetBroadcastChatUserNames_Request> {
} _CBroadcast_GetBroadcastChatUserNames_Request_default_instance_;
class CBroadcast_GetBroadcastChatUserNames_Response_PersonaNameDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_GetBroadcastChatUserNames_Response_PersonaName> {
} _CBroadcast_GetBroadcastChatUserNames_Response_PersonaName_default_instance_;
class CBroadcast_GetBroadcastChatUserNames_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_GetBroadcastChatUserNames_Response> {
} _CBroadcast_GetBroadcastChatUserNames_Response_default_instance_;
class CBroadcast_BroadcastViewerState_NotificationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_BroadcastViewerState_Notification> {
} _CBroadcast_BroadcastViewerState_Notification_default_instance_;
class CBroadcast_WaitingBroadcastViewer_NotificationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_WaitingBroadcastViewer_Notification> {
} _CBroadcast_WaitingBroadcastViewer_Notification_default_instance_;
class CBroadcast_StopBroadcastUpload_NotificationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_StopBroadcastUpload_Notification> {
} _CBroadcast_StopBroadcastUpload_Notification_default_instance_;
class CBroadcast_SessionClosed_NotificationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_SessionClosed_Notification> {
} _CBroadcast_SessionClosed_Notification_default_instance_;
class CBroadcast_ViewerBroadcastInvite_NotificationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_ViewerBroadcastInvite_Notification> {
} _CBroadcast_ViewerBroadcastInvite_Notification_default_instance_;
class CBroadcast_BroadcastStatus_NotificationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CBroadcast_BroadcastStatus_Notification> {
} _CBroadcast_BroadcastStatus_Notification_default_instance_;

namespace protobuf_steammessages_5fbroadcast_2esteamclient_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[33];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];
const ::google::protobuf::ServiceDescriptor* file_level_service_descriptors[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_BeginBroadcastSession_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_BeginBroadcastSession_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_BeginBroadcastSession_Request, permission_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_BeginBroadcastSession_Request, gameid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_BeginBroadcastSession_Request, client_instance_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_BeginBroadcastSession_Request, title_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_BeginBroadcastSession_Request, cellid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_BeginBroadcastSession_Request, rtmp_token_),
  3,
  1,
  2,
  0,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_BeginBroadcastSession_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_BeginBroadcastSession_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_BeginBroadcastSession_Response, broadcast_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_EndBroadcastSession_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_EndBroadcastSession_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_EndBroadcastSession_Request, broadcast_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_EndBroadcastSession_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_EndBroadcastSession_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_StartBroadcastUpload_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_StartBroadcastUpload_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_StartBroadcastUpload_Request, broadcast_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_StartBroadcastUpload_Request, cellid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_StartBroadcastUpload_Request, as_rtmp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_StartBroadcastUpload_Request, delay_seconds_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_StartBroadcastUpload_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_StartBroadcastUpload_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_StartBroadcastUpload_Response, upload_token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_StartBroadcastUpload_Response, upload_address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_StartBroadcastUpload_Response, upload_relay_id_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_NotifyBroadcastUploadStop_Notification, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_NotifyBroadcastUploadStop_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_NotifyBroadcastUploadStop_Notification, broadcast_relay_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_NotifyBroadcastUploadStop_Notification, upload_result_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_WatchBroadcast_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_WatchBroadcast_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_WatchBroadcast_Request, steamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_WatchBroadcast_Request, existing_broadcast_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_WatchBroadcast_Request, viewer_token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_WatchBroadcast_Request, client_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_WatchBroadcast_Request, client_cell_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_WatchBroadcast_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_WatchBroadcast_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_WatchBroadcast_Response, response_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_WatchBroadcast_Response, mpd_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_WatchBroadcast_Response, broadcast_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_WatchBroadcast_Response, gameid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_WatchBroadcast_Response, title_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_WatchBroadcast_Response, num_viewers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_WatchBroadcast_Response, permission_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_WatchBroadcast_Response, is_rtmp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_WatchBroadcast_Response, seconds_delay_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_WatchBroadcast_Response, viewer_token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_WatchBroadcast_Response, hls_m3u8_master_url_),
  10,
  0,
  3,
  4,
  1,
  5,
  6,
  7,
  8,
  9,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_GetBroadcastStatus_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_GetBroadcastStatus_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_GetBroadcastStatus_Request, steamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_GetBroadcastStatus_Request, broadcast_id_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_GetBroadcastStatus_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_GetBroadcastStatus_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_GetBroadcastStatus_Response, gameid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_GetBroadcastStatus_Response, title_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_GetBroadcastStatus_Response, num_viewers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_GetBroadcastStatus_Response, permission_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_GetBroadcastStatus_Response, is_rtmp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_GetBroadcastStatus_Response, seconds_delay_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_GetBroadcastStatus_Response, is_publisher_),
  1,
  0,
  2,
  3,
  5,
  4,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_InviteToBroadcast_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_InviteToBroadcast_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_InviteToBroadcast_Request, steamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_InviteToBroadcast_Request, approval_response_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_InviteToBroadcast_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_InviteToBroadcast_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_InviteToBroadcast_Response, success_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_SendBroadcastStateToServer_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_SendBroadcastStateToServer_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_SendBroadcastStateToServer_Request, permission_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_SendBroadcastStateToServer_Request, gameid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_SendBroadcastStateToServer_Request, title_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_SendBroadcastStateToServer_Request, game_data_config_),
  3,
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_SendBroadcastStateToServer_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_SendBroadcastStateToServer_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_NotifyBroadcastSessionHeartbeat_Notification, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_NotifyBroadcastSessionHeartbeat_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_NotifyBroadcastSessionHeartbeat_Notification, broadcast_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_GetBroadcastChatInfo_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_GetBroadcastChatInfo_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_GetBroadcastChatInfo_Request, steamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_GetBroadcastChatInfo_Request, broadcast_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_GetBroadcastChatInfo_Request, client_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_GetBroadcastChatInfo_Request, client_cell_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_GetBroadcastChatInfo_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_GetBroadcastChatInfo_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_GetBroadcastChatInfo_Response, chat_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_GetBroadcastChatInfo_Response, view_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_GetBroadcastChatInfo_Response, view_url_template_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_PostChatMessage_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_PostChatMessage_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_PostChatMessage_Request, chat_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_PostChatMessage_Request, message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_PostChatMessage_Request, instance_id_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_PostChatMessage_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_PostChatMessage_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_PostChatMessage_Response, persona_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_PostChatMessage_Response, in_game_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_PostChatMessage_Response, result_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_MuteBroadcastChatUser_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_MuteBroadcastChatUser_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_MuteBroadcastChatUser_Request, chat_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_MuteBroadcastChatUser_Request, user_steamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_MuteBroadcastChatUser_Request, muted_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_MuteBroadcastChatUser_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_MuteBroadcastChatUser_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_RemoveUserChatText_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_RemoveUserChatText_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_RemoveUserChatText_Request, chat_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_RemoveUserChatText_Request, user_steamid_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_RemoveUserChatText_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_RemoveUserChatText_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_GetBroadcastChatUserNames_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_GetBroadcastChatUserNames_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_GetBroadcastChatUserNames_Request, chat_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_GetBroadcastChatUserNames_Request, user_steamid_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_GetBroadcastChatUserNames_Response_PersonaName, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_GetBroadcastChatUserNames_Response_PersonaName, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_GetBroadcastChatUserNames_Response_PersonaName, steam_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_GetBroadcastChatUserNames_Response_PersonaName, persona_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_GetBroadcastChatUserNames_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_GetBroadcastChatUserNames_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_GetBroadcastChatUserNames_Response, persona_names_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_BroadcastViewerState_Notification, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_BroadcastViewerState_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_BroadcastViewerState_Notification, steamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_BroadcastViewerState_Notification, state_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_WaitingBroadcastViewer_Notification, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_WaitingBroadcastViewer_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_WaitingBroadcastViewer_Notification, broadcast_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_StopBroadcastUpload_Notification, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_StopBroadcastUpload_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_StopBroadcastUpload_Notification, broadcast_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_StopBroadcastUpload_Notification, broadcast_relay_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_StopBroadcastUpload_Notification, upload_result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_StopBroadcastUpload_Notification, too_many_poor_uploads_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_SessionClosed_Notification, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_SessionClosed_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_SessionClosed_Notification, broadcast_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_ViewerBroadcastInvite_Notification, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_ViewerBroadcastInvite_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_ViewerBroadcastInvite_Notification, broadcaster_steamid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_BroadcastStatus_Notification, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_BroadcastStatus_Notification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_BroadcastStatus_Notification, broadcast_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CBroadcast_BroadcastStatus_Notification, num_viewers_),
  0,
  1,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 11, sizeof(CBroadcast_BeginBroadcastSession_Request)},
  { 17, 23, sizeof(CBroadcast_BeginBroadcastSession_Response)},
  { 24, 30, sizeof(CBroadcast_EndBroadcastSession_Request)},
  { 31, 36, sizeof(CBroadcast_EndBroadcastSession_Response)},
  { 36, 45, sizeof(CBroadcast_StartBroadcastUpload_Request)},
  { 49, 57, sizeof(CBroadcast_StartBroadcastUpload_Response)},
  { 60, 67, sizeof(CBroadcast_NotifyBroadcastUploadStop_Notification)},
  { 69, 79, sizeof(CBroadcast_WatchBroadcast_Request)},
  { 84, 100, sizeof(CBroadcast_WatchBroadcast_Response)},
  { 111, 118, sizeof(CBroadcast_GetBroadcastStatus_Request)},
  { 120, 132, sizeof(CBroadcast_GetBroadcastStatus_Response)},
  { 139, 146, sizeof(CBroadcast_InviteToBroadcast_Request)},
  { 148, 154, sizeof(CBroadcast_InviteToBroadcast_Response)},
  { 155, 164, sizeof(CBroadcast_SendBroadcastStateToServer_Request)},
  { 168, 173, sizeof(CBroadcast_SendBroadcastStateToServer_Response)},
  { 173, 179, sizeof(CBroadcast_NotifyBroadcastSessionHeartbeat_Notification)},
  { 180, 189, sizeof(CBroadcast_GetBroadcastChatInfo_Request)},
  { 193, 201, sizeof(CBroadcast_GetBroadcastChatInfo_Response)},
  { 204, 212, sizeof(CBroadcast_PostChatMessage_Request)},
  { 215, 223, sizeof(CBroadcast_PostChatMessage_Response)},
  { 226, 234, sizeof(CBroadcast_MuteBroadcastChatUser_Request)},
  { 237, 242, sizeof(CBroadcast_MuteBroadcastChatUser_Response)},
  { 242, 249, sizeof(CBroadcast_RemoveUserChatText_Request)},
  { 251, 256, sizeof(CBroadcast_RemoveUserChatText_Response)},
  { 256, 263, sizeof(CBroadcast_GetBroadcastChatUserNames_Request)},
  { 265, 272, sizeof(CBroadcast_GetBroadcastChatUserNames_Response_PersonaName)},
  { 274, 280, sizeof(CBroadcast_GetBroadcastChatUserNames_Response)},
  { 281, 288, sizeof(CBroadcast_BroadcastViewerState_Notification)},
  { 290, 296, sizeof(CBroadcast_WaitingBroadcastViewer_Notification)},
  { 297, 306, sizeof(CBroadcast_StopBroadcastUpload_Notification)},
  { 310, 316, sizeof(CBroadcast_SessionClosed_Notification)},
  { 317, 323, sizeof(CBroadcast_ViewerBroadcastInvite_Notification)},
  { 324, 331, sizeof(CBroadcast_BroadcastStatus_Notification)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CBroadcast_BeginBroadcastSession_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CBroadcast_BeginBroadcastSession_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CBroadcast_EndBroadcastSession_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CBroadcast_EndBroadcastSession_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CBroadcast_StartBroadcastUpload_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CBroadcast_StartBroadcastUpload_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CBroadcast_NotifyBroadcastUploadStop_Notification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CBroadcast_WatchBroadcast_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CBroadcast_WatchBroadcast_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CBroadcast_GetBroadcastStatus_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CBroadcast_GetBroadcastStatus_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CBroadcast_InviteToBroadcast_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CBroadcast_InviteToBroadcast_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CBroadcast_SendBroadcastStateToServer_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CBroadcast_SendBroadcastStateToServer_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CBroadcast_NotifyBroadcastSessionHeartbeat_Notification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CBroadcast_GetBroadcastChatInfo_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CBroadcast_GetBroadcastChatInfo_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CBroadcast_PostChatMessage_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CBroadcast_PostChatMessage_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CBroadcast_MuteBroadcastChatUser_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CBroadcast_MuteBroadcastChatUser_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CBroadcast_RemoveUserChatText_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CBroadcast_RemoveUserChatText_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CBroadcast_GetBroadcastChatUserNames_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CBroadcast_GetBroadcastChatUserNames_Response_PersonaName_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CBroadcast_GetBroadcastChatUserNames_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CBroadcast_BroadcastViewerState_Notification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CBroadcast_WaitingBroadcastViewer_Notification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CBroadcast_StopBroadcastUpload_Notification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CBroadcast_SessionClosed_Notification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CBroadcast_ViewerBroadcastInvite_Notification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CBroadcast_BroadcastStatus_Notification_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "steammessages_broadcast.steamclient.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, file_level_service_descriptors);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 33);
}

}  // namespace

void TableStruct::Shutdown() {
  _CBroadcast_BeginBroadcastSession_Request_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _CBroadcast_BeginBroadcastSession_Response_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _CBroadcast_EndBroadcastSession_Request_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _CBroadcast_EndBroadcastSession_Response_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _CBroadcast_StartBroadcastUpload_Request_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _CBroadcast_StartBroadcastUpload_Response_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _CBroadcast_NotifyBroadcastUploadStop_Notification_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _CBroadcast_WatchBroadcast_Request_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _CBroadcast_WatchBroadcast_Response_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _CBroadcast_GetBroadcastStatus_Request_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _CBroadcast_GetBroadcastStatus_Response_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _CBroadcast_InviteToBroadcast_Request_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _CBroadcast_InviteToBroadcast_Response_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _CBroadcast_SendBroadcastStateToServer_Request_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _CBroadcast_SendBroadcastStateToServer_Response_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _CBroadcast_NotifyBroadcastSessionHeartbeat_Notification_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _CBroadcast_GetBroadcastChatInfo_Request_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _CBroadcast_GetBroadcastChatInfo_Response_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _CBroadcast_PostChatMessage_Request_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _CBroadcast_PostChatMessage_Response_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _CBroadcast_MuteBroadcastChatUser_Request_default_instance_.Shutdown();
  delete file_level_metadata[20].reflection;
  _CBroadcast_MuteBroadcastChatUser_Response_default_instance_.Shutdown();
  delete file_level_metadata[21].reflection;
  _CBroadcast_RemoveUserChatText_Request_default_instance_.Shutdown();
  delete file_level_metadata[22].reflection;
  _CBroadcast_RemoveUserChatText_Response_default_instance_.Shutdown();
  delete file_level_metadata[23].reflection;
  _CBroadcast_GetBroadcastChatUserNames_Request_default_instance_.Shutdown();
  delete file_level_metadata[24].reflection;
  _CBroadcast_GetBroadcastChatUserNames_Response_PersonaName_default_instance_.Shutdown();
  delete file_level_metadata[25].reflection;
  _CBroadcast_GetBroadcastChatUserNames_Response_default_instance_.Shutdown();
  delete file_level_metadata[26].reflection;
  _CBroadcast_BroadcastViewerState_Notification_default_instance_.Shutdown();
  delete file_level_metadata[27].reflection;
  _CBroadcast_WaitingBroadcastViewer_Notification_default_instance_.Shutdown();
  delete file_level_metadata[28].reflection;
  _CBroadcast_StopBroadcastUpload_Notification_default_instance_.Shutdown();
  delete file_level_metadata[29].reflection;
  _CBroadcast_SessionClosed_Notification_default_instance_.Shutdown();
  delete file_level_metadata[30].reflection;
  _CBroadcast_ViewerBroadcastInvite_Notification_default_instance_.Shutdown();
  delete file_level_metadata[31].reflection;
  _CBroadcast_BroadcastStatus_Notification_default_instance_.Shutdown();
  delete file_level_metadata[32].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::proto::steam::protobuf_steammessages_5funified_5fbase_2esteamclient_2eproto::InitDefaults();
  _CBroadcast_BeginBroadcastSession_Request_default_instance_.DefaultConstruct();
  _CBroadcast_BeginBroadcastSession_Response_default_instance_.DefaultConstruct();
  _CBroadcast_EndBroadcastSession_Request_default_instance_.DefaultConstruct();
  _CBroadcast_EndBroadcastSession_Response_default_instance_.DefaultConstruct();
  _CBroadcast_StartBroadcastUpload_Request_default_instance_.DefaultConstruct();
  _CBroadcast_StartBroadcastUpload_Response_default_instance_.DefaultConstruct();
  _CBroadcast_NotifyBroadcastUploadStop_Notification_default_instance_.DefaultConstruct();
  _CBroadcast_WatchBroadcast_Request_default_instance_.DefaultConstruct();
  _CBroadcast_WatchBroadcast_Response_default_instance_.DefaultConstruct();
  _CBroadcast_GetBroadcastStatus_Request_default_instance_.DefaultConstruct();
  _CBroadcast_GetBroadcastStatus_Response_default_instance_.DefaultConstruct();
  _CBroadcast_InviteToBroadcast_Request_default_instance_.DefaultConstruct();
  _CBroadcast_InviteToBroadcast_Response_default_instance_.DefaultConstruct();
  _CBroadcast_SendBroadcastStateToServer_Request_default_instance_.DefaultConstruct();
  _CBroadcast_SendBroadcastStateToServer_Response_default_instance_.DefaultConstruct();
  _CBroadcast_NotifyBroadcastSessionHeartbeat_Notification_default_instance_.DefaultConstruct();
  _CBroadcast_GetBroadcastChatInfo_Request_default_instance_.DefaultConstruct();
  _CBroadcast_GetBroadcastChatInfo_Response_default_instance_.DefaultConstruct();
  _CBroadcast_PostChatMessage_Request_default_instance_.DefaultConstruct();
  _CBroadcast_PostChatMessage_Response_default_instance_.DefaultConstruct();
  _CBroadcast_MuteBroadcastChatUser_Request_default_instance_.DefaultConstruct();
  _CBroadcast_MuteBroadcastChatUser_Response_default_instance_.DefaultConstruct();
  _CBroadcast_RemoveUserChatText_Request_default_instance_.DefaultConstruct();
  _CBroadcast_RemoveUserChatText_Response_default_instance_.DefaultConstruct();
  _CBroadcast_GetBroadcastChatUserNames_Request_default_instance_.DefaultConstruct();
  _CBroadcast_GetBroadcastChatUserNames_Response_PersonaName_default_instance_.DefaultConstruct();
  _CBroadcast_GetBroadcastChatUserNames_Response_default_instance_.DefaultConstruct();
  _CBroadcast_BroadcastViewerState_Notification_default_instance_.DefaultConstruct();
  _CBroadcast_WaitingBroadcastViewer_Notification_default_instance_.DefaultConstruct();
  _CBroadcast_StopBroadcastUpload_Notification_default_instance_.DefaultConstruct();
  _CBroadcast_SessionClosed_Notification_default_instance_.DefaultConstruct();
  _CBroadcast_ViewerBroadcastInvite_Notification_default_instance_.DefaultConstruct();
  _CBroadcast_BroadcastStatus_Notification_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n)steammessages_broadcast.steamclient.pr"
      "oto\022\013proto.steam\032,steammessages_unified_"
      "base.steamclient.proto\"\235\001\n(CBroadcast_Be"
      "ginBroadcastSession_Request\022\022\n\npermissio"
      "n\030\001 \001(\005\022\016\n\006gameid\030\002 \001(\004\022\032\n\022client_instan"
      "ce_id\030\003 \001(\004\022\r\n\005title\030\004 \001(\t\022\016\n\006cellid\030\005 \001"
      "(\r\022\022\n\nrtmp_token\030\006 \001(\004\"A\n)CBroadcast_Beg"
      "inBroadcastSession_Response\022\024\n\014broadcast"
      "_id\030\001 \001(\006\">\n&CBroadcast_EndBroadcastSess"
      "ion_Request\022\024\n\014broadcast_id\030\001 \001(\006\")\n\'CBr"
      "oadcast_EndBroadcastSession_Response\"w\n\'"
      "CBroadcast_StartBroadcastUpload_Request\022"
      "\024\n\014broadcast_id\030\001 \001(\006\022\016\n\006cellid\030\002 \001(\r\022\017\n"
      "\007as_rtmp\030\003 \001(\010\022\025\n\rdelay_seconds\030\004 \001(\r\"q\n"
      "(CBroadcast_StartBroadcastUpload_Respons"
      "e\022\024\n\014upload_token\030\001 \001(\t\022\026\n\016upload_addres"
      "s\030\002 \001(\t\022\027\n\017upload_relay_id\030\003 \001(\006\"f\n1CBro"
      "adcast_NotifyBroadcastUploadStop_Notific"
      "ation\022\032\n\022broadcast_relay_id\030\001 \001(\006\022\025\n\rupl"
      "oad_result\030\002 \001(\r\"\264\002\n!CBroadcast_WatchBro"
      "adcast_Request\022)\n\007steamid\030\001 \001(\006B\030\202\265\030\024bro"
      "adcaster steamID.\022X\n\025existing_broadcast_"
      "id\030\002 \001(\006B9\202\265\0305broadcast session ID (opti"
      "onal, rejoin if specified).\022b\n\014viewer_to"
      "ken\030\003 \001(\006BL\202\265\030Hviewer token received fro"
      "m last WatchRequest call, from browser s"
      "torage.\022\021\n\tclient_ip\030\004 \001(\r\022\023\n\013client_cel"
      "l\030\005 \001(\r\"\251\006\n\"CBroadcast_WatchBroadcast_Re"
      "sponse\022g\n\010response\030\001 \001(\0162>.proto.steam.C"
      "Broadcast_WatchBroadcast_Response.EWatch"
      "Response:\025k_EWatchResponseReady\022\017\n\007mpd_u"
      "rl\030\002 \001(\t\022\024\n\014broadcast_id\030\003 \001(\006\022\016\n\006gameid"
      "\030\004 \001(\004\022\r\n\005title\030\005 \001(\t\022\023\n\013num_viewers\030\006 \001"
      "(\r\022\022\n\npermission\030\007 \001(\005\022\017\n\007is_rtmp\030\010 \001(\010\022"
      "\025\n\rseconds_delay\030\t \001(\005\022\024\n\014viewer_token\030\n"
      " \001(\006\022\033\n\023hls_m3u8_master_url\030\013 \001(\t\"\317\003\n\016EW"
      "atchResponse\022\031\n\025k_EWatchResponseReady\020\001\022"
      " \n\034k_EWatchResponseNotAvailable\020\002\022&\n\"k_E"
      "WatchResponseWaitingForApproval\020\003\022#\n\037k_E"
      "WatchResponseWaitingForStart\020\004\022\"\n\036k_EWat"
      "chResponseInvalidSession\020\005\022%\n!k_EWatchRe"
      "sponseTooManyBroadcasts\020\006\022\'\n#k_EWatchRes"
      "ponseWaitingForReconnect\020\007\022&\n\"k_EWatchRe"
      "sponseSystemNotSupported\020\010\022\"\n\036k_EWatchRe"
      "sponseUserRestricted\020\t\022#\n\037k_EWatchRespon"
      "seClientOutOfDate\020\n\022%\n!k_EWatchResponseP"
      "oorUploadQuality\020\013\022\'\n#k_EWatchResponseMi"
      "ssingSubscription\020\014\"N\n%CBroadcast_GetBro"
      "adcastStatus_Request\022\017\n\007steamid\030\001 \001(\006\022\024\n"
      "\014broadcast_id\030\002 \001(\006\"\256\001\n&CBroadcast_GetBr"
      "oadcastStatus_Response\022\016\n\006gameid\030\001 \001(\004\022\r"
      "\n\005title\030\002 \001(\t\022\023\n\013num_viewers\030\003 \001(\r\022\022\n\npe"
      "rmission\030\004 \001(\005\022\017\n\007is_rtmp\030\005 \001(\010\022\025\n\rsecon"
      "ds_delay\030\006 \001(\005\022\024\n\014is_publisher\030\007 \001(\010\"R\n$"
      "CBroadcast_InviteToBroadcast_Request\022\017\n\007"
      "steamid\030\001 \001(\006\022\031\n\021approval_response\030\002 \001(\010"
      "\"8\n%CBroadcast_InviteToBroadcast_Respons"
      "e\022\017\n\007success\030\001 \001(\010\"|\n-CBroadcast_SendBro"
      "adcastStateToServer_Request\022\022\n\npermissio"
      "n\030\001 \001(\005\022\016\n\006gameid\030\002 \001(\004\022\r\n\005title\030\003 \001(\t\022\030"
      "\n\020game_data_config\030\004 \001(\t\"0\n.CBroadcast_S"
      "endBroadcastStateToServer_Response\"O\n7CB"
      "roadcast_NotifyBroadcastSessionHeartbeat"
      "_Notification\022\024\n\014broadcast_id\030\001 \001(\006\"x\n\'C"
      "Broadcast_GetBroadcastChatInfo_Request\022\017"
      "\n\007steamid\030\001 \001(\006\022\024\n\014broadcast_id\030\002 \001(\006\022\021\n"
      "\tclient_ip\030\003 \001(\r\022\023\n\013client_cell\030\004 \001(\r\"h\n"
      "(CBroadcast_GetBroadcastChatInfo_Respons"
      "e\022\017\n\007chat_id\030\001 \001(\006\022\020\n\010view_url\030\002 \001(\t\022\031\n\021"
      "view_url_template\030\003 \001(\t\"[\n\"CBroadcast_Po"
      "stChatMessage_Request\022\017\n\007chat_id\030\001 \001(\006\022\017"
      "\n\007message\030\002 \001(\t\022\023\n\013instance_id\030\003 \001(\r\"\\\n#"
      "CBroadcast_PostChatMessage_Response\022\024\n\014p"
      "ersona_name\030\001 \001(\t\022\017\n\007in_game\030\002 \001(\010\022\016\n\006re"
      "sult\030\003 \001(\005\"`\n(CBroadcast_MuteBroadcastCh"
      "atUser_Request\022\017\n\007chat_id\030\001 \001(\006\022\024\n\014user_"
      "steamid\030\002 \001(\006\022\r\n\005muted\030\003 \001(\010\"+\n)CBroadca"
      "st_MuteBroadcastChatUser_Response\"N\n%CBr"
      "oadcast_RemoveUserChatText_Request\022\017\n\007ch"
      "at_id\030\001 \001(\006\022\024\n\014user_steamid\030\002 \001(\006\"(\n&CBr"
      "oadcast_RemoveUserChatText_Response\"U\n,C"
      "Broadcast_GetBroadcastChatUserNames_Requ"
      "est\022\017\n\007chat_id\030\001 \001(\006\022\024\n\014user_steamid\030\002 \003"
      "(\006\"\300\001\n-CBroadcast_GetBroadcastChatUserNa"
      "mes_Response\022]\n\rpersona_names\030\001 \003(\0132F.pr"
      "oto.steam.CBroadcast_GetBroadcastChatUse"
      "rNames_Response.PersonaName\0320\n\013PersonaNa"
      "me\022\020\n\010steam_id\030\001 \001(\006\022\017\n\007persona\030\002 \001(\t\"\204\002"
      "\n,CBroadcast_BroadcastViewerState_Notifi"
      "cation\022\017\n\007steamid\030\001 \001(\006\022m\n\005state\030\002 \001(\0162F"
      ".proto.steam.CBroadcast_BroadcastViewerS"
      "tate_Notification.EViewerState:\026k_EViewe"
      "rNeedsApproval\"T\n\014EViewerState\022\032\n\026k_EVie"
      "werNeedsApproval\020\001\022\025\n\021k_EViewerWatching\020"
      "\002\022\021\n\rk_EViewerLeft\020\003\"F\n.CBroadcast_Waiti"
      "ngBroadcastViewer_Notification\022\024\n\014broadc"
      "ast_id\030\001 \001(\006\"\225\001\n+CBroadcast_StopBroadcas"
      "tUpload_Notification\022\024\n\014broadcast_id\030\001 \001"
      "(\006\022\032\n\022broadcast_relay_id\030\002 \001(\006\022\025\n\rupload"
      "_result\030\003 \001(\r\022\035\n\025too_many_poor_uploads\030\004"
      " \001(\010\"=\n%CBroadcast_SessionClosed_Notific"
      "ation\022\024\n\014broadcast_id\030\001 \001(\006\"L\n-CBroadcas"
      "t_ViewerBroadcastInvite_Notification\022\033\n\023"
      "broadcaster_steamid\030\001 \001(\006\"T\n\'CBroadcast_"
      "BroadcastStatus_Notification\022\024\n\014broadcas"
      "t_id\030\001 \001(\006\022\023\n\013num_viewers\030\002 \001(\0052\261\025\n\tBroa"
      "dcast\022\205\002\n\025BeginBroadcastSession\0225.proto."
      "steam.CBroadcast_BeginBroadcastSession_R"
      "equest\0326.proto.steam.CBroadcast_BeginBro"
      "adcastSession_Response\"}\202\265\030yRequest from"
      " client to directory to begin a broadcas"
      "t session. No data being sent to relay; "
      "just available for broadcast.\022\322\001\n\023EndBro"
      "adcastSession\0223.proto.steam.CBroadcast_E"
      "ndBroadcastSession_Request\0324.proto.steam"
      ".CBroadcast_EndBroadcastSession_Response"
      "\"P\202\265\030LRequest from client to stop a broa"
      "dcast session. Any uploads will terminat"
      "e.\022\304\001\n\024StartBroadcastUpload\0224.proto.stea"
      "m.CBroadcast_StartBroadcastUpload_Reques"
      "t\0325.proto.steam.CBroadcast_StartBroadcas"
      "tUpload_Response\"\?\202\265\030;Request from clien"
      "t to begin sending video for a broadcast"
      ".\022\261\001\n\031NotifyBroadcastUploadStop\022>.proto."
      "steam.CBroadcast_NotifyBroadcastUploadSt"
      "op_Notification\032\027.proto.steam.NoResponse"
      "\";\202\265\0307Tells directory that client stoppe"
      "d uploading broadcast\022\237\001\n\016WatchBroadcast"
      "\022..proto.steam.CBroadcast_WatchBroadcast"
      "_Request\032/.proto.steam.CBroadcast_WatchB"
      "roadcast_Response\",\202\265\030(Request from view"
      "er to watch a broadcast\022\256\001\n\022GetBroadcast"
      "Status\0222.proto.steam.CBroadcast_GetBroad"
      "castStatus_Request\0323.proto.steam.CBroadc"
      "ast_GetBroadcastStatus_Response\"/\202\265\030+Req"
      "uest from viewer about broadcast details"
      "\022\272\001\n\021InviteToBroadcast\0221.proto.steam.CBr"
      "oadcast_InviteToBroadcast_Request\0322.prot"
      "o.steam.CBroadcast_InviteToBroadcast_Res"
      "ponse\">\202\265\030:Invites another steam user to"
      " watch the caller\'s broadcast\022\340\001\n\032SendBr"
      "oadcastStateToServer\022:.proto.steam.CBroa"
      "dcast_SendBroadcastStateToServer_Request"
      "\032;.proto.steam.CBroadcast_SendBroadcastS"
      "tateToServer_Response\"I\202\265\030ESends users c"
      "urrent broadcast state (permissions, gam"
      "e) to the server\022\272\001\n\037NotifyBroadcastSess"
      "ionHeartbeat\022D.proto.steam.CBroadcast_No"
      "tifyBroadcastSessionHeartbeat_Notificati"
      "on\032\027.proto.steam.NoResponse\"8\202\265\0304Tells d"
      "irectory broadcast session is still avai"
      "lable\022\254\001\n\024GetBroadcastChatInfo\0224.proto.s"
      "team.CBroadcast_GetBroadcastChatInfo_Req"
      "uest\0325.proto.steam.CBroadcast_GetBroadca"
      "stChatInfo_Response\"\'\202\265\030#Gets chat room "
      "info for a broadcast\022\242\001\n\017PostChatMessage"
      "\022/.proto.steam.CBroadcast_PostChatMessag"
      "e_Request\0320.proto.steam.CBroadcast_PostC"
      "hatMessage_Response\",\202\265\030(Post chat messa"
      "ge to specified chat room\022\256\001\n\025MuteBroadc"
      "astChatUser\0225.proto.steam.CBroadcast_Mut"
      "eBroadcastChatUser_Request\0326.proto.steam"
      ".CBroadcast_MuteBroadcastChatUser_Respon"
      "se\"&\202\265\030\"Mute a user in your broadcast ch"
      "at\022\254\001\n\022RemoveUserChatText\0222.proto.steam."
      "CBroadcast_RemoveUserChatText_Request\0323."
      "proto.steam.CBroadcast_RemoveUserChatTex"
      "t_Response\"-\202\265\030)Tell all viewers to remo"
      "ve user chat text\022\273\001\n\031GetBroadcastChatUs"
      "erNames\0229.proto.steam.CBroadcast_GetBroa"
      "dcastChatUserNames_Request\032:.proto.steam"
      ".CBroadcast_GetBroadcastChatUserNames_Re"
      "sponse\"\'\202\265\030#Get names for list of users "
      "in chat\032*\202\265\030&Methods for Steam broadcast"
      " operations2\372\t\n\017BroadcastClient\022\271\001\n\032Noti"
      "fyBroadcastViewerState\0229.proto.steam.CBr"
      "oadcast_BroadcastViewerState_Notificatio"
      "n\032\027.proto.steam.NoResponse\"G\202\265\030CNotifica"
      "tion from server to client that a viewer"
      "s state has changed\022\325\001\n\034NotifyWaitingBro"
      "adcastViewer\022;.proto.steam.CBroadcast_Wa"
      "itingBroadcastViewer_Notification\032\027.prot"
      "o.steam.NoResponse\"_\202\265\030[Notification fro"
      "m server to client one or more users is "
      "waiting for user to start broadcast\022\356\001\n\031"
      "NotifyStopBroadcastUpload\0228.proto.steam."
      "CBroadcast_StopBroadcastUpload_Notificat"
      "ion\032\027.proto.steam.NoResponse\"~\202\265\030zNotifi"
      "cation from server to client telling it "
      "to stop uploading when the last viewer h"
      "as disconnected from their broadcast\022\315\001\n"
      "\023NotifySessionClosed\0222.proto.steam.CBroa"
      "dcast_SessionClosed_Notification\032\027.proto"
      ".steam.NoResponse\"i\202\265\030eNotification from"
      " server to client telling it a session h"
      "as been closed unexpectedly by the direc"
      "tory\022\333\001\n\033NotifyViewerBroadcastInvite\022:.p"
      "roto.steam.CBroadcast_ViewerBroadcastInv"
      "ite_Notification\032\027.proto.steam.NoRespons"
      "e\"g\202\265\030cNotification from server to clien"
      "t that a broadcaster is inviting a viewe"
      "r to watch their broadcast\022\255\001\n\025NotifyBro"
      "adcastStatus\0224.proto.steam.CBroadcast_Br"
      "oadcastStatus_Notification\032\027.proto.steam"
      ".NoResponse\"E\202\265\030ANotification from serve"
      "r to client about current broadcast stat"
      "us\032\004\300\265\030\002B\003\200\001\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 8253);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "steammessages_broadcast.steamclient.proto", &protobuf_RegisterTypes);
  ::proto::steam::protobuf_steammessages_5funified_5fbase_2esteamclient_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_steammessages_5fbroadcast_2esteamclient_2eproto

const ::google::protobuf::EnumDescriptor* CBroadcast_WatchBroadcast_Response_EWatchResponse_descriptor() {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_enum_descriptors[0];
}
bool CBroadcast_WatchBroadcast_Response_EWatchResponse_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CBroadcast_WatchBroadcast_Response_EWatchResponse CBroadcast_WatchBroadcast_Response::k_EWatchResponseReady;
const CBroadcast_WatchBroadcast_Response_EWatchResponse CBroadcast_WatchBroadcast_Response::k_EWatchResponseNotAvailable;
const CBroadcast_WatchBroadcast_Response_EWatchResponse CBroadcast_WatchBroadcast_Response::k_EWatchResponseWaitingForApproval;
const CBroadcast_WatchBroadcast_Response_EWatchResponse CBroadcast_WatchBroadcast_Response::k_EWatchResponseWaitingForStart;
const CBroadcast_WatchBroadcast_Response_EWatchResponse CBroadcast_WatchBroadcast_Response::k_EWatchResponseInvalidSession;
const CBroadcast_WatchBroadcast_Response_EWatchResponse CBroadcast_WatchBroadcast_Response::k_EWatchResponseTooManyBroadcasts;
const CBroadcast_WatchBroadcast_Response_EWatchResponse CBroadcast_WatchBroadcast_Response::k_EWatchResponseWaitingForReconnect;
const CBroadcast_WatchBroadcast_Response_EWatchResponse CBroadcast_WatchBroadcast_Response::k_EWatchResponseSystemNotSupported;
const CBroadcast_WatchBroadcast_Response_EWatchResponse CBroadcast_WatchBroadcast_Response::k_EWatchResponseUserRestricted;
const CBroadcast_WatchBroadcast_Response_EWatchResponse CBroadcast_WatchBroadcast_Response::k_EWatchResponseClientOutOfDate;
const CBroadcast_WatchBroadcast_Response_EWatchResponse CBroadcast_WatchBroadcast_Response::k_EWatchResponsePoorUploadQuality;
const CBroadcast_WatchBroadcast_Response_EWatchResponse CBroadcast_WatchBroadcast_Response::k_EWatchResponseMissingSubscription;
const CBroadcast_WatchBroadcast_Response_EWatchResponse CBroadcast_WatchBroadcast_Response::EWatchResponse_MIN;
const CBroadcast_WatchBroadcast_Response_EWatchResponse CBroadcast_WatchBroadcast_Response::EWatchResponse_MAX;
const int CBroadcast_WatchBroadcast_Response::EWatchResponse_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CBroadcast_BroadcastViewerState_Notification_EViewerState_descriptor() {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_enum_descriptors[1];
}
bool CBroadcast_BroadcastViewerState_Notification_EViewerState_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CBroadcast_BroadcastViewerState_Notification_EViewerState CBroadcast_BroadcastViewerState_Notification::k_EViewerNeedsApproval;
const CBroadcast_BroadcastViewerState_Notification_EViewerState CBroadcast_BroadcastViewerState_Notification::k_EViewerWatching;
const CBroadcast_BroadcastViewerState_Notification_EViewerState CBroadcast_BroadcastViewerState_Notification::k_EViewerLeft;
const CBroadcast_BroadcastViewerState_Notification_EViewerState CBroadcast_BroadcastViewerState_Notification::EViewerState_MIN;
const CBroadcast_BroadcastViewerState_Notification_EViewerState CBroadcast_BroadcastViewerState_Notification::EViewerState_MAX;
const int CBroadcast_BroadcastViewerState_Notification::EViewerState_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_BeginBroadcastSession_Request::kPermissionFieldNumber;
const int CBroadcast_BeginBroadcastSession_Request::kGameidFieldNumber;
const int CBroadcast_BeginBroadcastSession_Request::kClientInstanceIdFieldNumber;
const int CBroadcast_BeginBroadcastSession_Request::kTitleFieldNumber;
const int CBroadcast_BeginBroadcastSession_Request::kCellidFieldNumber;
const int CBroadcast_BeginBroadcastSession_Request::kRtmpTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_BeginBroadcastSession_Request::CBroadcast_BeginBroadcastSession_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CBroadcast_BeginBroadcastSession_Request)
}
CBroadcast_BeginBroadcastSession_Request::CBroadcast_BeginBroadcastSession_Request(const CBroadcast_BeginBroadcastSession_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_title()) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  ::memcpy(&gameid_, &from.gameid_,
    reinterpret_cast<char*>(&rtmp_token_) -
    reinterpret_cast<char*>(&gameid_) + sizeof(rtmp_token_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CBroadcast_BeginBroadcastSession_Request)
}

void CBroadcast_BeginBroadcastSession_Request::SharedCtor() {
  _cached_size_ = 0;
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&gameid_, 0, reinterpret_cast<char*>(&rtmp_token_) -
    reinterpret_cast<char*>(&gameid_) + sizeof(rtmp_token_));
}

CBroadcast_BeginBroadcastSession_Request::~CBroadcast_BeginBroadcastSession_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CBroadcast_BeginBroadcastSession_Request)
  SharedDtor();
}

void CBroadcast_BeginBroadcastSession_Request::SharedDtor() {
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CBroadcast_BeginBroadcastSession_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CBroadcast_BeginBroadcastSession_Request::descriptor() {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CBroadcast_BeginBroadcastSession_Request& CBroadcast_BeginBroadcastSession_Request::default_instance() {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CBroadcast_BeginBroadcastSession_Request* CBroadcast_BeginBroadcastSession_Request::New(::google::protobuf::Arena* arena) const {
  CBroadcast_BeginBroadcastSession_Request* n = new CBroadcast_BeginBroadcastSession_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CBroadcast_BeginBroadcastSession_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CBroadcast_BeginBroadcastSession_Request)
  if (has_title()) {
    GOOGLE_DCHECK(!title_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*title_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 62u) {
    ::memset(&gameid_, 0, reinterpret_cast<char*>(&rtmp_token_) -
      reinterpret_cast<char*>(&gameid_) + sizeof(rtmp_token_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CBroadcast_BeginBroadcastSession_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CBroadcast_BeginBroadcastSession_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 permission = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_permission();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &permission_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 gameid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_gameid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gameid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 client_instance_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_client_instance_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &client_instance_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string title = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CBroadcast_BeginBroadcastSession_Request.title");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cellid = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_cellid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cellid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 rtmp_token = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_rtmp_token();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rtmp_token_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CBroadcast_BeginBroadcastSession_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CBroadcast_BeginBroadcastSession_Request)
  return false;
#undef DO_
}

void CBroadcast_BeginBroadcastSession_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CBroadcast_BeginBroadcastSession_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 permission = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->permission(), output);
  }

  // optional uint64 gameid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->gameid(), output);
  }

  // optional uint64 client_instance_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->client_instance_id(), output);
  }

  // optional string title = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CBroadcast_BeginBroadcastSession_Request.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->title(), output);
  }

  // optional uint32 cellid = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->cellid(), output);
  }

  // optional uint64 rtmp_token = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->rtmp_token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CBroadcast_BeginBroadcastSession_Request)
}

::google::protobuf::uint8* CBroadcast_BeginBroadcastSession_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CBroadcast_BeginBroadcastSession_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 permission = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->permission(), target);
  }

  // optional uint64 gameid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->gameid(), target);
  }

  // optional uint64 client_instance_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->client_instance_id(), target);
  }

  // optional string title = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CBroadcast_BeginBroadcastSession_Request.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->title(), target);
  }

  // optional uint32 cellid = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->cellid(), target);
  }

  // optional uint64 rtmp_token = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->rtmp_token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CBroadcast_BeginBroadcastSession_Request)
  return target;
}

size_t CBroadcast_BeginBroadcastSession_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CBroadcast_BeginBroadcastSession_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional string title = 4;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional uint64 gameid = 2;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gameid());
    }

    // optional uint64 client_instance_id = 3;
    if (has_client_instance_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->client_instance_id());
    }

    // optional int32 permission = 1;
    if (has_permission()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->permission());
    }

    // optional uint32 cellid = 5;
    if (has_cellid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cellid());
    }

    // optional uint64 rtmp_token = 6;
    if (has_rtmp_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rtmp_token());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CBroadcast_BeginBroadcastSession_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CBroadcast_BeginBroadcastSession_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_BeginBroadcastSession_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CBroadcast_BeginBroadcastSession_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CBroadcast_BeginBroadcastSession_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CBroadcast_BeginBroadcastSession_Request)
    MergeFrom(*source);
  }
}

void CBroadcast_BeginBroadcastSession_Request::MergeFrom(const CBroadcast_BeginBroadcastSession_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CBroadcast_BeginBroadcastSession_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_title();
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (cached_has_bits & 0x00000002u) {
      gameid_ = from.gameid_;
    }
    if (cached_has_bits & 0x00000004u) {
      client_instance_id_ = from.client_instance_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      permission_ = from.permission_;
    }
    if (cached_has_bits & 0x00000010u) {
      cellid_ = from.cellid_;
    }
    if (cached_has_bits & 0x00000020u) {
      rtmp_token_ = from.rtmp_token_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CBroadcast_BeginBroadcastSession_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CBroadcast_BeginBroadcastSession_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_BeginBroadcastSession_Request::CopyFrom(const CBroadcast_BeginBroadcastSession_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CBroadcast_BeginBroadcastSession_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_BeginBroadcastSession_Request::IsInitialized() const {
  return true;
}

void CBroadcast_BeginBroadcastSession_Request::Swap(CBroadcast_BeginBroadcastSession_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_BeginBroadcastSession_Request::InternalSwap(CBroadcast_BeginBroadcastSession_Request* other) {
  title_.Swap(&other->title_);
  std::swap(gameid_, other->gameid_);
  std::swap(client_instance_id_, other->client_instance_id_);
  std::swap(permission_, other->permission_);
  std::swap(cellid_, other->cellid_);
  std::swap(rtmp_token_, other->rtmp_token_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CBroadcast_BeginBroadcastSession_Request::GetMetadata() const {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CBroadcast_BeginBroadcastSession_Request

// optional int32 permission = 1;
bool CBroadcast_BeginBroadcastSession_Request::has_permission() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CBroadcast_BeginBroadcastSession_Request::set_has_permission() {
  _has_bits_[0] |= 0x00000008u;
}
void CBroadcast_BeginBroadcastSession_Request::clear_has_permission() {
  _has_bits_[0] &= ~0x00000008u;
}
void CBroadcast_BeginBroadcastSession_Request::clear_permission() {
  permission_ = 0;
  clear_has_permission();
}
::google::protobuf::int32 CBroadcast_BeginBroadcastSession_Request::permission() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_BeginBroadcastSession_Request.permission)
  return permission_;
}
void CBroadcast_BeginBroadcastSession_Request::set_permission(::google::protobuf::int32 value) {
  set_has_permission();
  permission_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_BeginBroadcastSession_Request.permission)
}

// optional uint64 gameid = 2;
bool CBroadcast_BeginBroadcastSession_Request::has_gameid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CBroadcast_BeginBroadcastSession_Request::set_has_gameid() {
  _has_bits_[0] |= 0x00000002u;
}
void CBroadcast_BeginBroadcastSession_Request::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CBroadcast_BeginBroadcastSession_Request::clear_gameid() {
  gameid_ = GOOGLE_ULONGLONG(0);
  clear_has_gameid();
}
::google::protobuf::uint64 CBroadcast_BeginBroadcastSession_Request::gameid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_BeginBroadcastSession_Request.gameid)
  return gameid_;
}
void CBroadcast_BeginBroadcastSession_Request::set_gameid(::google::protobuf::uint64 value) {
  set_has_gameid();
  gameid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_BeginBroadcastSession_Request.gameid)
}

// optional uint64 client_instance_id = 3;
bool CBroadcast_BeginBroadcastSession_Request::has_client_instance_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CBroadcast_BeginBroadcastSession_Request::set_has_client_instance_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CBroadcast_BeginBroadcastSession_Request::clear_has_client_instance_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CBroadcast_BeginBroadcastSession_Request::clear_client_instance_id() {
  client_instance_id_ = GOOGLE_ULONGLONG(0);
  clear_has_client_instance_id();
}
::google::protobuf::uint64 CBroadcast_BeginBroadcastSession_Request::client_instance_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_BeginBroadcastSession_Request.client_instance_id)
  return client_instance_id_;
}
void CBroadcast_BeginBroadcastSession_Request::set_client_instance_id(::google::protobuf::uint64 value) {
  set_has_client_instance_id();
  client_instance_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_BeginBroadcastSession_Request.client_instance_id)
}

// optional string title = 4;
bool CBroadcast_BeginBroadcastSession_Request::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CBroadcast_BeginBroadcastSession_Request::set_has_title() {
  _has_bits_[0] |= 0x00000001u;
}
void CBroadcast_BeginBroadcastSession_Request::clear_has_title() {
  _has_bits_[0] &= ~0x00000001u;
}
void CBroadcast_BeginBroadcastSession_Request::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
const ::std::string& CBroadcast_BeginBroadcastSession_Request::title() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_BeginBroadcastSession_Request.title)
  return title_.GetNoArena();
}
void CBroadcast_BeginBroadcastSession_Request::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_BeginBroadcastSession_Request.title)
}
#if LANG_CXX11
void CBroadcast_BeginBroadcastSession_Request::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CBroadcast_BeginBroadcastSession_Request.title)
}
#endif
void CBroadcast_BeginBroadcastSession_Request::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CBroadcast_BeginBroadcastSession_Request.title)
}
void CBroadcast_BeginBroadcastSession_Request::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CBroadcast_BeginBroadcastSession_Request.title)
}
::std::string* CBroadcast_BeginBroadcastSession_Request::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:proto.steam.CBroadcast_BeginBroadcastSession_Request.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CBroadcast_BeginBroadcastSession_Request::release_title() {
  // @@protoc_insertion_point(field_release:proto.steam.CBroadcast_BeginBroadcastSession_Request.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CBroadcast_BeginBroadcastSession_Request::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CBroadcast_BeginBroadcastSession_Request.title)
}

// optional uint32 cellid = 5;
bool CBroadcast_BeginBroadcastSession_Request::has_cellid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CBroadcast_BeginBroadcastSession_Request::set_has_cellid() {
  _has_bits_[0] |= 0x00000010u;
}
void CBroadcast_BeginBroadcastSession_Request::clear_has_cellid() {
  _has_bits_[0] &= ~0x00000010u;
}
void CBroadcast_BeginBroadcastSession_Request::clear_cellid() {
  cellid_ = 0u;
  clear_has_cellid();
}
::google::protobuf::uint32 CBroadcast_BeginBroadcastSession_Request::cellid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_BeginBroadcastSession_Request.cellid)
  return cellid_;
}
void CBroadcast_BeginBroadcastSession_Request::set_cellid(::google::protobuf::uint32 value) {
  set_has_cellid();
  cellid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_BeginBroadcastSession_Request.cellid)
}

// optional uint64 rtmp_token = 6;
bool CBroadcast_BeginBroadcastSession_Request::has_rtmp_token() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CBroadcast_BeginBroadcastSession_Request::set_has_rtmp_token() {
  _has_bits_[0] |= 0x00000020u;
}
void CBroadcast_BeginBroadcastSession_Request::clear_has_rtmp_token() {
  _has_bits_[0] &= ~0x00000020u;
}
void CBroadcast_BeginBroadcastSession_Request::clear_rtmp_token() {
  rtmp_token_ = GOOGLE_ULONGLONG(0);
  clear_has_rtmp_token();
}
::google::protobuf::uint64 CBroadcast_BeginBroadcastSession_Request::rtmp_token() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_BeginBroadcastSession_Request.rtmp_token)
  return rtmp_token_;
}
void CBroadcast_BeginBroadcastSession_Request::set_rtmp_token(::google::protobuf::uint64 value) {
  set_has_rtmp_token();
  rtmp_token_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_BeginBroadcastSession_Request.rtmp_token)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_BeginBroadcastSession_Response::kBroadcastIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_BeginBroadcastSession_Response::CBroadcast_BeginBroadcastSession_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CBroadcast_BeginBroadcastSession_Response)
}
CBroadcast_BeginBroadcastSession_Response::CBroadcast_BeginBroadcastSession_Response(const CBroadcast_BeginBroadcastSession_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  broadcast_id_ = from.broadcast_id_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CBroadcast_BeginBroadcastSession_Response)
}

void CBroadcast_BeginBroadcastSession_Response::SharedCtor() {
  _cached_size_ = 0;
  broadcast_id_ = GOOGLE_ULONGLONG(0);
}

CBroadcast_BeginBroadcastSession_Response::~CBroadcast_BeginBroadcastSession_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CBroadcast_BeginBroadcastSession_Response)
  SharedDtor();
}

void CBroadcast_BeginBroadcastSession_Response::SharedDtor() {
}

void CBroadcast_BeginBroadcastSession_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CBroadcast_BeginBroadcastSession_Response::descriptor() {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CBroadcast_BeginBroadcastSession_Response& CBroadcast_BeginBroadcastSession_Response::default_instance() {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CBroadcast_BeginBroadcastSession_Response* CBroadcast_BeginBroadcastSession_Response::New(::google::protobuf::Arena* arena) const {
  CBroadcast_BeginBroadcastSession_Response* n = new CBroadcast_BeginBroadcastSession_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CBroadcast_BeginBroadcastSession_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CBroadcast_BeginBroadcastSession_Response)
  broadcast_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CBroadcast_BeginBroadcastSession_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CBroadcast_BeginBroadcastSession_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 broadcast_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_broadcast_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &broadcast_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CBroadcast_BeginBroadcastSession_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CBroadcast_BeginBroadcastSession_Response)
  return false;
#undef DO_
}

void CBroadcast_BeginBroadcastSession_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CBroadcast_BeginBroadcastSession_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->broadcast_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CBroadcast_BeginBroadcastSession_Response)
}

::google::protobuf::uint8* CBroadcast_BeginBroadcastSession_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CBroadcast_BeginBroadcastSession_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->broadcast_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CBroadcast_BeginBroadcastSession_Response)
  return target;
}

size_t CBroadcast_BeginBroadcastSession_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CBroadcast_BeginBroadcastSession_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional fixed64 broadcast_id = 1;
  if (has_broadcast_id()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CBroadcast_BeginBroadcastSession_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CBroadcast_BeginBroadcastSession_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_BeginBroadcastSession_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CBroadcast_BeginBroadcastSession_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CBroadcast_BeginBroadcastSession_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CBroadcast_BeginBroadcastSession_Response)
    MergeFrom(*source);
  }
}

void CBroadcast_BeginBroadcastSession_Response::MergeFrom(const CBroadcast_BeginBroadcastSession_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CBroadcast_BeginBroadcastSession_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_broadcast_id()) {
    set_broadcast_id(from.broadcast_id());
  }
}

void CBroadcast_BeginBroadcastSession_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CBroadcast_BeginBroadcastSession_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_BeginBroadcastSession_Response::CopyFrom(const CBroadcast_BeginBroadcastSession_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CBroadcast_BeginBroadcastSession_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_BeginBroadcastSession_Response::IsInitialized() const {
  return true;
}

void CBroadcast_BeginBroadcastSession_Response::Swap(CBroadcast_BeginBroadcastSession_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_BeginBroadcastSession_Response::InternalSwap(CBroadcast_BeginBroadcastSession_Response* other) {
  std::swap(broadcast_id_, other->broadcast_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CBroadcast_BeginBroadcastSession_Response::GetMetadata() const {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CBroadcast_BeginBroadcastSession_Response

// optional fixed64 broadcast_id = 1;
bool CBroadcast_BeginBroadcastSession_Response::has_broadcast_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CBroadcast_BeginBroadcastSession_Response::set_has_broadcast_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CBroadcast_BeginBroadcastSession_Response::clear_has_broadcast_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CBroadcast_BeginBroadcastSession_Response::clear_broadcast_id() {
  broadcast_id_ = GOOGLE_ULONGLONG(0);
  clear_has_broadcast_id();
}
::google::protobuf::uint64 CBroadcast_BeginBroadcastSession_Response::broadcast_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_BeginBroadcastSession_Response.broadcast_id)
  return broadcast_id_;
}
void CBroadcast_BeginBroadcastSession_Response::set_broadcast_id(::google::protobuf::uint64 value) {
  set_has_broadcast_id();
  broadcast_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_BeginBroadcastSession_Response.broadcast_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_EndBroadcastSession_Request::kBroadcastIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_EndBroadcastSession_Request::CBroadcast_EndBroadcastSession_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CBroadcast_EndBroadcastSession_Request)
}
CBroadcast_EndBroadcastSession_Request::CBroadcast_EndBroadcastSession_Request(const CBroadcast_EndBroadcastSession_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  broadcast_id_ = from.broadcast_id_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CBroadcast_EndBroadcastSession_Request)
}

void CBroadcast_EndBroadcastSession_Request::SharedCtor() {
  _cached_size_ = 0;
  broadcast_id_ = GOOGLE_ULONGLONG(0);
}

CBroadcast_EndBroadcastSession_Request::~CBroadcast_EndBroadcastSession_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CBroadcast_EndBroadcastSession_Request)
  SharedDtor();
}

void CBroadcast_EndBroadcastSession_Request::SharedDtor() {
}

void CBroadcast_EndBroadcastSession_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CBroadcast_EndBroadcastSession_Request::descriptor() {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CBroadcast_EndBroadcastSession_Request& CBroadcast_EndBroadcastSession_Request::default_instance() {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CBroadcast_EndBroadcastSession_Request* CBroadcast_EndBroadcastSession_Request::New(::google::protobuf::Arena* arena) const {
  CBroadcast_EndBroadcastSession_Request* n = new CBroadcast_EndBroadcastSession_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CBroadcast_EndBroadcastSession_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CBroadcast_EndBroadcastSession_Request)
  broadcast_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CBroadcast_EndBroadcastSession_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CBroadcast_EndBroadcastSession_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 broadcast_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_broadcast_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &broadcast_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CBroadcast_EndBroadcastSession_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CBroadcast_EndBroadcastSession_Request)
  return false;
#undef DO_
}

void CBroadcast_EndBroadcastSession_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CBroadcast_EndBroadcastSession_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->broadcast_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CBroadcast_EndBroadcastSession_Request)
}

::google::protobuf::uint8* CBroadcast_EndBroadcastSession_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CBroadcast_EndBroadcastSession_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->broadcast_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CBroadcast_EndBroadcastSession_Request)
  return target;
}

size_t CBroadcast_EndBroadcastSession_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CBroadcast_EndBroadcastSession_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional fixed64 broadcast_id = 1;
  if (has_broadcast_id()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CBroadcast_EndBroadcastSession_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CBroadcast_EndBroadcastSession_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_EndBroadcastSession_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CBroadcast_EndBroadcastSession_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CBroadcast_EndBroadcastSession_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CBroadcast_EndBroadcastSession_Request)
    MergeFrom(*source);
  }
}

void CBroadcast_EndBroadcastSession_Request::MergeFrom(const CBroadcast_EndBroadcastSession_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CBroadcast_EndBroadcastSession_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_broadcast_id()) {
    set_broadcast_id(from.broadcast_id());
  }
}

void CBroadcast_EndBroadcastSession_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CBroadcast_EndBroadcastSession_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_EndBroadcastSession_Request::CopyFrom(const CBroadcast_EndBroadcastSession_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CBroadcast_EndBroadcastSession_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_EndBroadcastSession_Request::IsInitialized() const {
  return true;
}

void CBroadcast_EndBroadcastSession_Request::Swap(CBroadcast_EndBroadcastSession_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_EndBroadcastSession_Request::InternalSwap(CBroadcast_EndBroadcastSession_Request* other) {
  std::swap(broadcast_id_, other->broadcast_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CBroadcast_EndBroadcastSession_Request::GetMetadata() const {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CBroadcast_EndBroadcastSession_Request

// optional fixed64 broadcast_id = 1;
bool CBroadcast_EndBroadcastSession_Request::has_broadcast_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CBroadcast_EndBroadcastSession_Request::set_has_broadcast_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CBroadcast_EndBroadcastSession_Request::clear_has_broadcast_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CBroadcast_EndBroadcastSession_Request::clear_broadcast_id() {
  broadcast_id_ = GOOGLE_ULONGLONG(0);
  clear_has_broadcast_id();
}
::google::protobuf::uint64 CBroadcast_EndBroadcastSession_Request::broadcast_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_EndBroadcastSession_Request.broadcast_id)
  return broadcast_id_;
}
void CBroadcast_EndBroadcastSession_Request::set_broadcast_id(::google::protobuf::uint64 value) {
  set_has_broadcast_id();
  broadcast_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_EndBroadcastSession_Request.broadcast_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_EndBroadcastSession_Response::CBroadcast_EndBroadcastSession_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CBroadcast_EndBroadcastSession_Response)
}
CBroadcast_EndBroadcastSession_Response::CBroadcast_EndBroadcastSession_Response(const CBroadcast_EndBroadcastSession_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CBroadcast_EndBroadcastSession_Response)
}

void CBroadcast_EndBroadcastSession_Response::SharedCtor() {
  _cached_size_ = 0;
}

CBroadcast_EndBroadcastSession_Response::~CBroadcast_EndBroadcastSession_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CBroadcast_EndBroadcastSession_Response)
  SharedDtor();
}

void CBroadcast_EndBroadcastSession_Response::SharedDtor() {
}

void CBroadcast_EndBroadcastSession_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CBroadcast_EndBroadcastSession_Response::descriptor() {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CBroadcast_EndBroadcastSession_Response& CBroadcast_EndBroadcastSession_Response::default_instance() {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CBroadcast_EndBroadcastSession_Response* CBroadcast_EndBroadcastSession_Response::New(::google::protobuf::Arena* arena) const {
  CBroadcast_EndBroadcastSession_Response* n = new CBroadcast_EndBroadcastSession_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CBroadcast_EndBroadcastSession_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CBroadcast_EndBroadcastSession_Response)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CBroadcast_EndBroadcastSession_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CBroadcast_EndBroadcastSession_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CBroadcast_EndBroadcastSession_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CBroadcast_EndBroadcastSession_Response)
  return false;
#undef DO_
}

void CBroadcast_EndBroadcastSession_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CBroadcast_EndBroadcastSession_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CBroadcast_EndBroadcastSession_Response)
}

::google::protobuf::uint8* CBroadcast_EndBroadcastSession_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CBroadcast_EndBroadcastSession_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CBroadcast_EndBroadcastSession_Response)
  return target;
}

size_t CBroadcast_EndBroadcastSession_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CBroadcast_EndBroadcastSession_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CBroadcast_EndBroadcastSession_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CBroadcast_EndBroadcastSession_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_EndBroadcastSession_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CBroadcast_EndBroadcastSession_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CBroadcast_EndBroadcastSession_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CBroadcast_EndBroadcastSession_Response)
    MergeFrom(*source);
  }
}

void CBroadcast_EndBroadcastSession_Response::MergeFrom(const CBroadcast_EndBroadcastSession_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CBroadcast_EndBroadcastSession_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CBroadcast_EndBroadcastSession_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CBroadcast_EndBroadcastSession_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_EndBroadcastSession_Response::CopyFrom(const CBroadcast_EndBroadcastSession_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CBroadcast_EndBroadcastSession_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_EndBroadcastSession_Response::IsInitialized() const {
  return true;
}

void CBroadcast_EndBroadcastSession_Response::Swap(CBroadcast_EndBroadcastSession_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_EndBroadcastSession_Response::InternalSwap(CBroadcast_EndBroadcastSession_Response* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CBroadcast_EndBroadcastSession_Response::GetMetadata() const {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CBroadcast_EndBroadcastSession_Response

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_StartBroadcastUpload_Request::kBroadcastIdFieldNumber;
const int CBroadcast_StartBroadcastUpload_Request::kCellidFieldNumber;
const int CBroadcast_StartBroadcastUpload_Request::kAsRtmpFieldNumber;
const int CBroadcast_StartBroadcastUpload_Request::kDelaySecondsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_StartBroadcastUpload_Request::CBroadcast_StartBroadcastUpload_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CBroadcast_StartBroadcastUpload_Request)
}
CBroadcast_StartBroadcastUpload_Request::CBroadcast_StartBroadcastUpload_Request(const CBroadcast_StartBroadcastUpload_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&broadcast_id_, &from.broadcast_id_,
    reinterpret_cast<char*>(&delay_seconds_) -
    reinterpret_cast<char*>(&broadcast_id_) + sizeof(delay_seconds_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CBroadcast_StartBroadcastUpload_Request)
}

void CBroadcast_StartBroadcastUpload_Request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&broadcast_id_, 0, reinterpret_cast<char*>(&delay_seconds_) -
    reinterpret_cast<char*>(&broadcast_id_) + sizeof(delay_seconds_));
}

CBroadcast_StartBroadcastUpload_Request::~CBroadcast_StartBroadcastUpload_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CBroadcast_StartBroadcastUpload_Request)
  SharedDtor();
}

void CBroadcast_StartBroadcastUpload_Request::SharedDtor() {
}

void CBroadcast_StartBroadcastUpload_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CBroadcast_StartBroadcastUpload_Request::descriptor() {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CBroadcast_StartBroadcastUpload_Request& CBroadcast_StartBroadcastUpload_Request::default_instance() {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CBroadcast_StartBroadcastUpload_Request* CBroadcast_StartBroadcastUpload_Request::New(::google::protobuf::Arena* arena) const {
  CBroadcast_StartBroadcastUpload_Request* n = new CBroadcast_StartBroadcastUpload_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CBroadcast_StartBroadcastUpload_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CBroadcast_StartBroadcastUpload_Request)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&broadcast_id_, 0, reinterpret_cast<char*>(&delay_seconds_) -
      reinterpret_cast<char*>(&broadcast_id_) + sizeof(delay_seconds_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CBroadcast_StartBroadcastUpload_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CBroadcast_StartBroadcastUpload_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 broadcast_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_broadcast_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &broadcast_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cellid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_cellid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cellid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool as_rtmp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_as_rtmp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &as_rtmp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 delay_seconds = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_delay_seconds();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &delay_seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CBroadcast_StartBroadcastUpload_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CBroadcast_StartBroadcastUpload_Request)
  return false;
#undef DO_
}

void CBroadcast_StartBroadcastUpload_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CBroadcast_StartBroadcastUpload_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->broadcast_id(), output);
  }

  // optional uint32 cellid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cellid(), output);
  }

  // optional bool as_rtmp = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->as_rtmp(), output);
  }

  // optional uint32 delay_seconds = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->delay_seconds(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CBroadcast_StartBroadcastUpload_Request)
}

::google::protobuf::uint8* CBroadcast_StartBroadcastUpload_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CBroadcast_StartBroadcastUpload_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->broadcast_id(), target);
  }

  // optional uint32 cellid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cellid(), target);
  }

  // optional bool as_rtmp = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->as_rtmp(), target);
  }

  // optional uint32 delay_seconds = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->delay_seconds(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CBroadcast_StartBroadcastUpload_Request)
  return target;
}

size_t CBroadcast_StartBroadcastUpload_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CBroadcast_StartBroadcastUpload_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional fixed64 broadcast_id = 1;
    if (has_broadcast_id()) {
      total_size += 1 + 8;
    }

    // optional uint32 cellid = 2;
    if (has_cellid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cellid());
    }

    // optional bool as_rtmp = 3;
    if (has_as_rtmp()) {
      total_size += 1 + 1;
    }

    // optional uint32 delay_seconds = 4;
    if (has_delay_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->delay_seconds());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CBroadcast_StartBroadcastUpload_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CBroadcast_StartBroadcastUpload_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_StartBroadcastUpload_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CBroadcast_StartBroadcastUpload_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CBroadcast_StartBroadcastUpload_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CBroadcast_StartBroadcastUpload_Request)
    MergeFrom(*source);
  }
}

void CBroadcast_StartBroadcastUpload_Request::MergeFrom(const CBroadcast_StartBroadcastUpload_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CBroadcast_StartBroadcastUpload_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      broadcast_id_ = from.broadcast_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      cellid_ = from.cellid_;
    }
    if (cached_has_bits & 0x00000004u) {
      as_rtmp_ = from.as_rtmp_;
    }
    if (cached_has_bits & 0x00000008u) {
      delay_seconds_ = from.delay_seconds_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CBroadcast_StartBroadcastUpload_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CBroadcast_StartBroadcastUpload_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_StartBroadcastUpload_Request::CopyFrom(const CBroadcast_StartBroadcastUpload_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CBroadcast_StartBroadcastUpload_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_StartBroadcastUpload_Request::IsInitialized() const {
  return true;
}

void CBroadcast_StartBroadcastUpload_Request::Swap(CBroadcast_StartBroadcastUpload_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_StartBroadcastUpload_Request::InternalSwap(CBroadcast_StartBroadcastUpload_Request* other) {
  std::swap(broadcast_id_, other->broadcast_id_);
  std::swap(cellid_, other->cellid_);
  std::swap(as_rtmp_, other->as_rtmp_);
  std::swap(delay_seconds_, other->delay_seconds_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CBroadcast_StartBroadcastUpload_Request::GetMetadata() const {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CBroadcast_StartBroadcastUpload_Request

// optional fixed64 broadcast_id = 1;
bool CBroadcast_StartBroadcastUpload_Request::has_broadcast_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CBroadcast_StartBroadcastUpload_Request::set_has_broadcast_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CBroadcast_StartBroadcastUpload_Request::clear_has_broadcast_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CBroadcast_StartBroadcastUpload_Request::clear_broadcast_id() {
  broadcast_id_ = GOOGLE_ULONGLONG(0);
  clear_has_broadcast_id();
}
::google::protobuf::uint64 CBroadcast_StartBroadcastUpload_Request::broadcast_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_StartBroadcastUpload_Request.broadcast_id)
  return broadcast_id_;
}
void CBroadcast_StartBroadcastUpload_Request::set_broadcast_id(::google::protobuf::uint64 value) {
  set_has_broadcast_id();
  broadcast_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_StartBroadcastUpload_Request.broadcast_id)
}

// optional uint32 cellid = 2;
bool CBroadcast_StartBroadcastUpload_Request::has_cellid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CBroadcast_StartBroadcastUpload_Request::set_has_cellid() {
  _has_bits_[0] |= 0x00000002u;
}
void CBroadcast_StartBroadcastUpload_Request::clear_has_cellid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CBroadcast_StartBroadcastUpload_Request::clear_cellid() {
  cellid_ = 0u;
  clear_has_cellid();
}
::google::protobuf::uint32 CBroadcast_StartBroadcastUpload_Request::cellid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_StartBroadcastUpload_Request.cellid)
  return cellid_;
}
void CBroadcast_StartBroadcastUpload_Request::set_cellid(::google::protobuf::uint32 value) {
  set_has_cellid();
  cellid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_StartBroadcastUpload_Request.cellid)
}

// optional bool as_rtmp = 3;
bool CBroadcast_StartBroadcastUpload_Request::has_as_rtmp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CBroadcast_StartBroadcastUpload_Request::set_has_as_rtmp() {
  _has_bits_[0] |= 0x00000004u;
}
void CBroadcast_StartBroadcastUpload_Request::clear_has_as_rtmp() {
  _has_bits_[0] &= ~0x00000004u;
}
void CBroadcast_StartBroadcastUpload_Request::clear_as_rtmp() {
  as_rtmp_ = false;
  clear_has_as_rtmp();
}
bool CBroadcast_StartBroadcastUpload_Request::as_rtmp() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_StartBroadcastUpload_Request.as_rtmp)
  return as_rtmp_;
}
void CBroadcast_StartBroadcastUpload_Request::set_as_rtmp(bool value) {
  set_has_as_rtmp();
  as_rtmp_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_StartBroadcastUpload_Request.as_rtmp)
}

// optional uint32 delay_seconds = 4;
bool CBroadcast_StartBroadcastUpload_Request::has_delay_seconds() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CBroadcast_StartBroadcastUpload_Request::set_has_delay_seconds() {
  _has_bits_[0] |= 0x00000008u;
}
void CBroadcast_StartBroadcastUpload_Request::clear_has_delay_seconds() {
  _has_bits_[0] &= ~0x00000008u;
}
void CBroadcast_StartBroadcastUpload_Request::clear_delay_seconds() {
  delay_seconds_ = 0u;
  clear_has_delay_seconds();
}
::google::protobuf::uint32 CBroadcast_StartBroadcastUpload_Request::delay_seconds() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_StartBroadcastUpload_Request.delay_seconds)
  return delay_seconds_;
}
void CBroadcast_StartBroadcastUpload_Request::set_delay_seconds(::google::protobuf::uint32 value) {
  set_has_delay_seconds();
  delay_seconds_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_StartBroadcastUpload_Request.delay_seconds)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_StartBroadcastUpload_Response::kUploadTokenFieldNumber;
const int CBroadcast_StartBroadcastUpload_Response::kUploadAddressFieldNumber;
const int CBroadcast_StartBroadcastUpload_Response::kUploadRelayIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_StartBroadcastUpload_Response::CBroadcast_StartBroadcastUpload_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CBroadcast_StartBroadcastUpload_Response)
}
CBroadcast_StartBroadcastUpload_Response::CBroadcast_StartBroadcastUpload_Response(const CBroadcast_StartBroadcastUpload_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  upload_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_upload_token()) {
    upload_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.upload_token_);
  }
  upload_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_upload_address()) {
    upload_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.upload_address_);
  }
  upload_relay_id_ = from.upload_relay_id_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CBroadcast_StartBroadcastUpload_Response)
}

void CBroadcast_StartBroadcastUpload_Response::SharedCtor() {
  _cached_size_ = 0;
  upload_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  upload_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  upload_relay_id_ = GOOGLE_ULONGLONG(0);
}

CBroadcast_StartBroadcastUpload_Response::~CBroadcast_StartBroadcastUpload_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CBroadcast_StartBroadcastUpload_Response)
  SharedDtor();
}

void CBroadcast_StartBroadcastUpload_Response::SharedDtor() {
  upload_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  upload_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CBroadcast_StartBroadcastUpload_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CBroadcast_StartBroadcastUpload_Response::descriptor() {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CBroadcast_StartBroadcastUpload_Response& CBroadcast_StartBroadcastUpload_Response::default_instance() {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CBroadcast_StartBroadcastUpload_Response* CBroadcast_StartBroadcastUpload_Response::New(::google::protobuf::Arena* arena) const {
  CBroadcast_StartBroadcastUpload_Response* n = new CBroadcast_StartBroadcastUpload_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CBroadcast_StartBroadcastUpload_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CBroadcast_StartBroadcastUpload_Response)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_upload_token()) {
      GOOGLE_DCHECK(!upload_token_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*upload_token_.UnsafeRawStringPointer())->clear();
    }
    if (has_upload_address()) {
      GOOGLE_DCHECK(!upload_address_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*upload_address_.UnsafeRawStringPointer())->clear();
    }
  }
  upload_relay_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CBroadcast_StartBroadcastUpload_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CBroadcast_StartBroadcastUpload_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string upload_token = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_upload_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->upload_token().data(), this->upload_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CBroadcast_StartBroadcastUpload_Response.upload_token");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string upload_address = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_upload_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->upload_address().data(), this->upload_address().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CBroadcast_StartBroadcastUpload_Response.upload_address");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 upload_relay_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_upload_relay_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &upload_relay_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CBroadcast_StartBroadcastUpload_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CBroadcast_StartBroadcastUpload_Response)
  return false;
#undef DO_
}

void CBroadcast_StartBroadcastUpload_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CBroadcast_StartBroadcastUpload_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string upload_token = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->upload_token().data(), this->upload_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CBroadcast_StartBroadcastUpload_Response.upload_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->upload_token(), output);
  }

  // optional string upload_address = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->upload_address().data(), this->upload_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CBroadcast_StartBroadcastUpload_Response.upload_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->upload_address(), output);
  }

  // optional fixed64 upload_relay_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->upload_relay_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CBroadcast_StartBroadcastUpload_Response)
}

::google::protobuf::uint8* CBroadcast_StartBroadcastUpload_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CBroadcast_StartBroadcastUpload_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string upload_token = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->upload_token().data(), this->upload_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CBroadcast_StartBroadcastUpload_Response.upload_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->upload_token(), target);
  }

  // optional string upload_address = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->upload_address().data(), this->upload_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CBroadcast_StartBroadcastUpload_Response.upload_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->upload_address(), target);
  }

  // optional fixed64 upload_relay_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->upload_relay_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CBroadcast_StartBroadcastUpload_Response)
  return target;
}

size_t CBroadcast_StartBroadcastUpload_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CBroadcast_StartBroadcastUpload_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string upload_token = 1;
    if (has_upload_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->upload_token());
    }

    // optional string upload_address = 2;
    if (has_upload_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->upload_address());
    }

    // optional fixed64 upload_relay_id = 3;
    if (has_upload_relay_id()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CBroadcast_StartBroadcastUpload_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CBroadcast_StartBroadcastUpload_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_StartBroadcastUpload_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CBroadcast_StartBroadcastUpload_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CBroadcast_StartBroadcastUpload_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CBroadcast_StartBroadcastUpload_Response)
    MergeFrom(*source);
  }
}

void CBroadcast_StartBroadcastUpload_Response::MergeFrom(const CBroadcast_StartBroadcastUpload_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CBroadcast_StartBroadcastUpload_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_upload_token();
      upload_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.upload_token_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_upload_address();
      upload_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.upload_address_);
    }
    if (cached_has_bits & 0x00000004u) {
      upload_relay_id_ = from.upload_relay_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CBroadcast_StartBroadcastUpload_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CBroadcast_StartBroadcastUpload_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_StartBroadcastUpload_Response::CopyFrom(const CBroadcast_StartBroadcastUpload_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CBroadcast_StartBroadcastUpload_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_StartBroadcastUpload_Response::IsInitialized() const {
  return true;
}

void CBroadcast_StartBroadcastUpload_Response::Swap(CBroadcast_StartBroadcastUpload_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_StartBroadcastUpload_Response::InternalSwap(CBroadcast_StartBroadcastUpload_Response* other) {
  upload_token_.Swap(&other->upload_token_);
  upload_address_.Swap(&other->upload_address_);
  std::swap(upload_relay_id_, other->upload_relay_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CBroadcast_StartBroadcastUpload_Response::GetMetadata() const {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CBroadcast_StartBroadcastUpload_Response

// optional string upload_token = 1;
bool CBroadcast_StartBroadcastUpload_Response::has_upload_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CBroadcast_StartBroadcastUpload_Response::set_has_upload_token() {
  _has_bits_[0] |= 0x00000001u;
}
void CBroadcast_StartBroadcastUpload_Response::clear_has_upload_token() {
  _has_bits_[0] &= ~0x00000001u;
}
void CBroadcast_StartBroadcastUpload_Response::clear_upload_token() {
  upload_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_upload_token();
}
const ::std::string& CBroadcast_StartBroadcastUpload_Response::upload_token() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_StartBroadcastUpload_Response.upload_token)
  return upload_token_.GetNoArena();
}
void CBroadcast_StartBroadcastUpload_Response::set_upload_token(const ::std::string& value) {
  set_has_upload_token();
  upload_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_StartBroadcastUpload_Response.upload_token)
}
#if LANG_CXX11
void CBroadcast_StartBroadcastUpload_Response::set_upload_token(::std::string&& value) {
  set_has_upload_token();
  upload_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CBroadcast_StartBroadcastUpload_Response.upload_token)
}
#endif
void CBroadcast_StartBroadcastUpload_Response::set_upload_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_upload_token();
  upload_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CBroadcast_StartBroadcastUpload_Response.upload_token)
}
void CBroadcast_StartBroadcastUpload_Response::set_upload_token(const char* value, size_t size) {
  set_has_upload_token();
  upload_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CBroadcast_StartBroadcastUpload_Response.upload_token)
}
::std::string* CBroadcast_StartBroadcastUpload_Response::mutable_upload_token() {
  set_has_upload_token();
  // @@protoc_insertion_point(field_mutable:proto.steam.CBroadcast_StartBroadcastUpload_Response.upload_token)
  return upload_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CBroadcast_StartBroadcastUpload_Response::release_upload_token() {
  // @@protoc_insertion_point(field_release:proto.steam.CBroadcast_StartBroadcastUpload_Response.upload_token)
  clear_has_upload_token();
  return upload_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CBroadcast_StartBroadcastUpload_Response::set_allocated_upload_token(::std::string* upload_token) {
  if (upload_token != NULL) {
    set_has_upload_token();
  } else {
    clear_has_upload_token();
  }
  upload_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), upload_token);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CBroadcast_StartBroadcastUpload_Response.upload_token)
}

// optional string upload_address = 2;
bool CBroadcast_StartBroadcastUpload_Response::has_upload_address() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CBroadcast_StartBroadcastUpload_Response::set_has_upload_address() {
  _has_bits_[0] |= 0x00000002u;
}
void CBroadcast_StartBroadcastUpload_Response::clear_has_upload_address() {
  _has_bits_[0] &= ~0x00000002u;
}
void CBroadcast_StartBroadcastUpload_Response::clear_upload_address() {
  upload_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_upload_address();
}
const ::std::string& CBroadcast_StartBroadcastUpload_Response::upload_address() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_StartBroadcastUpload_Response.upload_address)
  return upload_address_.GetNoArena();
}
void CBroadcast_StartBroadcastUpload_Response::set_upload_address(const ::std::string& value) {
  set_has_upload_address();
  upload_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_StartBroadcastUpload_Response.upload_address)
}
#if LANG_CXX11
void CBroadcast_StartBroadcastUpload_Response::set_upload_address(::std::string&& value) {
  set_has_upload_address();
  upload_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CBroadcast_StartBroadcastUpload_Response.upload_address)
}
#endif
void CBroadcast_StartBroadcastUpload_Response::set_upload_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_upload_address();
  upload_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CBroadcast_StartBroadcastUpload_Response.upload_address)
}
void CBroadcast_StartBroadcastUpload_Response::set_upload_address(const char* value, size_t size) {
  set_has_upload_address();
  upload_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CBroadcast_StartBroadcastUpload_Response.upload_address)
}
::std::string* CBroadcast_StartBroadcastUpload_Response::mutable_upload_address() {
  set_has_upload_address();
  // @@protoc_insertion_point(field_mutable:proto.steam.CBroadcast_StartBroadcastUpload_Response.upload_address)
  return upload_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CBroadcast_StartBroadcastUpload_Response::release_upload_address() {
  // @@protoc_insertion_point(field_release:proto.steam.CBroadcast_StartBroadcastUpload_Response.upload_address)
  clear_has_upload_address();
  return upload_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CBroadcast_StartBroadcastUpload_Response::set_allocated_upload_address(::std::string* upload_address) {
  if (upload_address != NULL) {
    set_has_upload_address();
  } else {
    clear_has_upload_address();
  }
  upload_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), upload_address);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CBroadcast_StartBroadcastUpload_Response.upload_address)
}

// optional fixed64 upload_relay_id = 3;
bool CBroadcast_StartBroadcastUpload_Response::has_upload_relay_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CBroadcast_StartBroadcastUpload_Response::set_has_upload_relay_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CBroadcast_StartBroadcastUpload_Response::clear_has_upload_relay_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CBroadcast_StartBroadcastUpload_Response::clear_upload_relay_id() {
  upload_relay_id_ = GOOGLE_ULONGLONG(0);
  clear_has_upload_relay_id();
}
::google::protobuf::uint64 CBroadcast_StartBroadcastUpload_Response::upload_relay_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_StartBroadcastUpload_Response.upload_relay_id)
  return upload_relay_id_;
}
void CBroadcast_StartBroadcastUpload_Response::set_upload_relay_id(::google::protobuf::uint64 value) {
  set_has_upload_relay_id();
  upload_relay_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_StartBroadcastUpload_Response.upload_relay_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_NotifyBroadcastUploadStop_Notification::kBroadcastRelayIdFieldNumber;
const int CBroadcast_NotifyBroadcastUploadStop_Notification::kUploadResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_NotifyBroadcastUploadStop_Notification::CBroadcast_NotifyBroadcastUploadStop_Notification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CBroadcast_NotifyBroadcastUploadStop_Notification)
}
CBroadcast_NotifyBroadcastUploadStop_Notification::CBroadcast_NotifyBroadcastUploadStop_Notification(const CBroadcast_NotifyBroadcastUploadStop_Notification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&broadcast_relay_id_, &from.broadcast_relay_id_,
    reinterpret_cast<char*>(&upload_result_) -
    reinterpret_cast<char*>(&broadcast_relay_id_) + sizeof(upload_result_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CBroadcast_NotifyBroadcastUploadStop_Notification)
}

void CBroadcast_NotifyBroadcastUploadStop_Notification::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&broadcast_relay_id_, 0, reinterpret_cast<char*>(&upload_result_) -
    reinterpret_cast<char*>(&broadcast_relay_id_) + sizeof(upload_result_));
}

CBroadcast_NotifyBroadcastUploadStop_Notification::~CBroadcast_NotifyBroadcastUploadStop_Notification() {
  // @@protoc_insertion_point(destructor:proto.steam.CBroadcast_NotifyBroadcastUploadStop_Notification)
  SharedDtor();
}

void CBroadcast_NotifyBroadcastUploadStop_Notification::SharedDtor() {
}

void CBroadcast_NotifyBroadcastUploadStop_Notification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CBroadcast_NotifyBroadcastUploadStop_Notification::descriptor() {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CBroadcast_NotifyBroadcastUploadStop_Notification& CBroadcast_NotifyBroadcastUploadStop_Notification::default_instance() {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CBroadcast_NotifyBroadcastUploadStop_Notification* CBroadcast_NotifyBroadcastUploadStop_Notification::New(::google::protobuf::Arena* arena) const {
  CBroadcast_NotifyBroadcastUploadStop_Notification* n = new CBroadcast_NotifyBroadcastUploadStop_Notification;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CBroadcast_NotifyBroadcastUploadStop_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CBroadcast_NotifyBroadcastUploadStop_Notification)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&broadcast_relay_id_, 0, reinterpret_cast<char*>(&upload_result_) -
      reinterpret_cast<char*>(&broadcast_relay_id_) + sizeof(upload_result_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CBroadcast_NotifyBroadcastUploadStop_Notification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CBroadcast_NotifyBroadcastUploadStop_Notification)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 broadcast_relay_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_broadcast_relay_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &broadcast_relay_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 upload_result = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_upload_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &upload_result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CBroadcast_NotifyBroadcastUploadStop_Notification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CBroadcast_NotifyBroadcastUploadStop_Notification)
  return false;
#undef DO_
}

void CBroadcast_NotifyBroadcastUploadStop_Notification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CBroadcast_NotifyBroadcastUploadStop_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_relay_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->broadcast_relay_id(), output);
  }

  // optional uint32 upload_result = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->upload_result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CBroadcast_NotifyBroadcastUploadStop_Notification)
}

::google::protobuf::uint8* CBroadcast_NotifyBroadcastUploadStop_Notification::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CBroadcast_NotifyBroadcastUploadStop_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_relay_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->broadcast_relay_id(), target);
  }

  // optional uint32 upload_result = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->upload_result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CBroadcast_NotifyBroadcastUploadStop_Notification)
  return target;
}

size_t CBroadcast_NotifyBroadcastUploadStop_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CBroadcast_NotifyBroadcastUploadStop_Notification)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional fixed64 broadcast_relay_id = 1;
    if (has_broadcast_relay_id()) {
      total_size += 1 + 8;
    }

    // optional uint32 upload_result = 2;
    if (has_upload_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->upload_result());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CBroadcast_NotifyBroadcastUploadStop_Notification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CBroadcast_NotifyBroadcastUploadStop_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_NotifyBroadcastUploadStop_Notification* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CBroadcast_NotifyBroadcastUploadStop_Notification>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CBroadcast_NotifyBroadcastUploadStop_Notification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CBroadcast_NotifyBroadcastUploadStop_Notification)
    MergeFrom(*source);
  }
}

void CBroadcast_NotifyBroadcastUploadStop_Notification::MergeFrom(const CBroadcast_NotifyBroadcastUploadStop_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CBroadcast_NotifyBroadcastUploadStop_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      broadcast_relay_id_ = from.broadcast_relay_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      upload_result_ = from.upload_result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CBroadcast_NotifyBroadcastUploadStop_Notification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CBroadcast_NotifyBroadcastUploadStop_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_NotifyBroadcastUploadStop_Notification::CopyFrom(const CBroadcast_NotifyBroadcastUploadStop_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CBroadcast_NotifyBroadcastUploadStop_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_NotifyBroadcastUploadStop_Notification::IsInitialized() const {
  return true;
}

void CBroadcast_NotifyBroadcastUploadStop_Notification::Swap(CBroadcast_NotifyBroadcastUploadStop_Notification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_NotifyBroadcastUploadStop_Notification::InternalSwap(CBroadcast_NotifyBroadcastUploadStop_Notification* other) {
  std::swap(broadcast_relay_id_, other->broadcast_relay_id_);
  std::swap(upload_result_, other->upload_result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CBroadcast_NotifyBroadcastUploadStop_Notification::GetMetadata() const {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CBroadcast_NotifyBroadcastUploadStop_Notification

// optional fixed64 broadcast_relay_id = 1;
bool CBroadcast_NotifyBroadcastUploadStop_Notification::has_broadcast_relay_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CBroadcast_NotifyBroadcastUploadStop_Notification::set_has_broadcast_relay_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CBroadcast_NotifyBroadcastUploadStop_Notification::clear_has_broadcast_relay_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CBroadcast_NotifyBroadcastUploadStop_Notification::clear_broadcast_relay_id() {
  broadcast_relay_id_ = GOOGLE_ULONGLONG(0);
  clear_has_broadcast_relay_id();
}
::google::protobuf::uint64 CBroadcast_NotifyBroadcastUploadStop_Notification::broadcast_relay_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_NotifyBroadcastUploadStop_Notification.broadcast_relay_id)
  return broadcast_relay_id_;
}
void CBroadcast_NotifyBroadcastUploadStop_Notification::set_broadcast_relay_id(::google::protobuf::uint64 value) {
  set_has_broadcast_relay_id();
  broadcast_relay_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_NotifyBroadcastUploadStop_Notification.broadcast_relay_id)
}

// optional uint32 upload_result = 2;
bool CBroadcast_NotifyBroadcastUploadStop_Notification::has_upload_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CBroadcast_NotifyBroadcastUploadStop_Notification::set_has_upload_result() {
  _has_bits_[0] |= 0x00000002u;
}
void CBroadcast_NotifyBroadcastUploadStop_Notification::clear_has_upload_result() {
  _has_bits_[0] &= ~0x00000002u;
}
void CBroadcast_NotifyBroadcastUploadStop_Notification::clear_upload_result() {
  upload_result_ = 0u;
  clear_has_upload_result();
}
::google::protobuf::uint32 CBroadcast_NotifyBroadcastUploadStop_Notification::upload_result() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_NotifyBroadcastUploadStop_Notification.upload_result)
  return upload_result_;
}
void CBroadcast_NotifyBroadcastUploadStop_Notification::set_upload_result(::google::protobuf::uint32 value) {
  set_has_upload_result();
  upload_result_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_NotifyBroadcastUploadStop_Notification.upload_result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_WatchBroadcast_Request::kSteamidFieldNumber;
const int CBroadcast_WatchBroadcast_Request::kExistingBroadcastIdFieldNumber;
const int CBroadcast_WatchBroadcast_Request::kViewerTokenFieldNumber;
const int CBroadcast_WatchBroadcast_Request::kClientIpFieldNumber;
const int CBroadcast_WatchBroadcast_Request::kClientCellFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_WatchBroadcast_Request::CBroadcast_WatchBroadcast_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CBroadcast_WatchBroadcast_Request)
}
CBroadcast_WatchBroadcast_Request::CBroadcast_WatchBroadcast_Request(const CBroadcast_WatchBroadcast_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    reinterpret_cast<char*>(&client_cell_) -
    reinterpret_cast<char*>(&steamid_) + sizeof(client_cell_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CBroadcast_WatchBroadcast_Request)
}

void CBroadcast_WatchBroadcast_Request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&steamid_, 0, reinterpret_cast<char*>(&client_cell_) -
    reinterpret_cast<char*>(&steamid_) + sizeof(client_cell_));
}

CBroadcast_WatchBroadcast_Request::~CBroadcast_WatchBroadcast_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CBroadcast_WatchBroadcast_Request)
  SharedDtor();
}

void CBroadcast_WatchBroadcast_Request::SharedDtor() {
}

void CBroadcast_WatchBroadcast_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CBroadcast_WatchBroadcast_Request::descriptor() {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CBroadcast_WatchBroadcast_Request& CBroadcast_WatchBroadcast_Request::default_instance() {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CBroadcast_WatchBroadcast_Request* CBroadcast_WatchBroadcast_Request::New(::google::protobuf::Arena* arena) const {
  CBroadcast_WatchBroadcast_Request* n = new CBroadcast_WatchBroadcast_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CBroadcast_WatchBroadcast_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CBroadcast_WatchBroadcast_Request)
  if (_has_bits_[0 / 32] & 31u) {
    ::memset(&steamid_, 0, reinterpret_cast<char*>(&client_cell_) -
      reinterpret_cast<char*>(&steamid_) + sizeof(client_cell_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CBroadcast_WatchBroadcast_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CBroadcast_WatchBroadcast_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1 [(.proto.steam.description) = "broadcaster steamID."];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 existing_broadcast_id = 2 [(.proto.steam.description) = "broadcast session ID (optional, rejoin if specified)."];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_existing_broadcast_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &existing_broadcast_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 viewer_token = 3 [(.proto.steam.description) = "viewer token received from last WatchRequest call, from browser storage."];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_viewer_token();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &viewer_token_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 client_ip = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_client_ip();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 client_cell = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_client_cell();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_cell_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CBroadcast_WatchBroadcast_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CBroadcast_WatchBroadcast_Request)
  return false;
#undef DO_
}

void CBroadcast_WatchBroadcast_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CBroadcast_WatchBroadcast_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1 [(.proto.steam.description) = "broadcaster steamID."];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional fixed64 existing_broadcast_id = 2 [(.proto.steam.description) = "broadcast session ID (optional, rejoin if specified)."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->existing_broadcast_id(), output);
  }

  // optional fixed64 viewer_token = 3 [(.proto.steam.description) = "viewer token received from last WatchRequest call, from browser storage."];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->viewer_token(), output);
  }

  // optional uint32 client_ip = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->client_ip(), output);
  }

  // optional uint32 client_cell = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->client_cell(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CBroadcast_WatchBroadcast_Request)
}

::google::protobuf::uint8* CBroadcast_WatchBroadcast_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CBroadcast_WatchBroadcast_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1 [(.proto.steam.description) = "broadcaster steamID."];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional fixed64 existing_broadcast_id = 2 [(.proto.steam.description) = "broadcast session ID (optional, rejoin if specified)."];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->existing_broadcast_id(), target);
  }

  // optional fixed64 viewer_token = 3 [(.proto.steam.description) = "viewer token received from last WatchRequest call, from browser storage."];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->viewer_token(), target);
  }

  // optional uint32 client_ip = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->client_ip(), target);
  }

  // optional uint32 client_cell = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->client_cell(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CBroadcast_WatchBroadcast_Request)
  return target;
}

size_t CBroadcast_WatchBroadcast_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CBroadcast_WatchBroadcast_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional fixed64 steamid = 1 [(.proto.steam.description) = "broadcaster steamID."];
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional fixed64 existing_broadcast_id = 2 [(.proto.steam.description) = "broadcast session ID (optional, rejoin if specified)."];
    if (has_existing_broadcast_id()) {
      total_size += 1 + 8;
    }

    // optional fixed64 viewer_token = 3 [(.proto.steam.description) = "viewer token received from last WatchRequest call, from browser storage."];
    if (has_viewer_token()) {
      total_size += 1 + 8;
    }

    // optional uint32 client_ip = 4;
    if (has_client_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_ip());
    }

    // optional uint32 client_cell = 5;
    if (has_client_cell()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_cell());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CBroadcast_WatchBroadcast_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CBroadcast_WatchBroadcast_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_WatchBroadcast_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CBroadcast_WatchBroadcast_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CBroadcast_WatchBroadcast_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CBroadcast_WatchBroadcast_Request)
    MergeFrom(*source);
  }
}

void CBroadcast_WatchBroadcast_Request::MergeFrom(const CBroadcast_WatchBroadcast_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CBroadcast_WatchBroadcast_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      existing_broadcast_id_ = from.existing_broadcast_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      viewer_token_ = from.viewer_token_;
    }
    if (cached_has_bits & 0x00000008u) {
      client_ip_ = from.client_ip_;
    }
    if (cached_has_bits & 0x00000010u) {
      client_cell_ = from.client_cell_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CBroadcast_WatchBroadcast_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CBroadcast_WatchBroadcast_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_WatchBroadcast_Request::CopyFrom(const CBroadcast_WatchBroadcast_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CBroadcast_WatchBroadcast_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_WatchBroadcast_Request::IsInitialized() const {
  return true;
}

void CBroadcast_WatchBroadcast_Request::Swap(CBroadcast_WatchBroadcast_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_WatchBroadcast_Request::InternalSwap(CBroadcast_WatchBroadcast_Request* other) {
  std::swap(steamid_, other->steamid_);
  std::swap(existing_broadcast_id_, other->existing_broadcast_id_);
  std::swap(viewer_token_, other->viewer_token_);
  std::swap(client_ip_, other->client_ip_);
  std::swap(client_cell_, other->client_cell_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CBroadcast_WatchBroadcast_Request::GetMetadata() const {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CBroadcast_WatchBroadcast_Request

// optional fixed64 steamid = 1 [(.proto.steam.description) = "broadcaster steamID."];
bool CBroadcast_WatchBroadcast_Request::has_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CBroadcast_WatchBroadcast_Request::set_has_steamid() {
  _has_bits_[0] |= 0x00000001u;
}
void CBroadcast_WatchBroadcast_Request::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CBroadcast_WatchBroadcast_Request::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
::google::protobuf::uint64 CBroadcast_WatchBroadcast_Request::steamid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_WatchBroadcast_Request.steamid)
  return steamid_;
}
void CBroadcast_WatchBroadcast_Request::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_WatchBroadcast_Request.steamid)
}

// optional fixed64 existing_broadcast_id = 2 [(.proto.steam.description) = "broadcast session ID (optional, rejoin if specified)."];
bool CBroadcast_WatchBroadcast_Request::has_existing_broadcast_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CBroadcast_WatchBroadcast_Request::set_has_existing_broadcast_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CBroadcast_WatchBroadcast_Request::clear_has_existing_broadcast_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CBroadcast_WatchBroadcast_Request::clear_existing_broadcast_id() {
  existing_broadcast_id_ = GOOGLE_ULONGLONG(0);
  clear_has_existing_broadcast_id();
}
::google::protobuf::uint64 CBroadcast_WatchBroadcast_Request::existing_broadcast_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_WatchBroadcast_Request.existing_broadcast_id)
  return existing_broadcast_id_;
}
void CBroadcast_WatchBroadcast_Request::set_existing_broadcast_id(::google::protobuf::uint64 value) {
  set_has_existing_broadcast_id();
  existing_broadcast_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_WatchBroadcast_Request.existing_broadcast_id)
}

// optional fixed64 viewer_token = 3 [(.proto.steam.description) = "viewer token received from last WatchRequest call, from browser storage."];
bool CBroadcast_WatchBroadcast_Request::has_viewer_token() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CBroadcast_WatchBroadcast_Request::set_has_viewer_token() {
  _has_bits_[0] |= 0x00000004u;
}
void CBroadcast_WatchBroadcast_Request::clear_has_viewer_token() {
  _has_bits_[0] &= ~0x00000004u;
}
void CBroadcast_WatchBroadcast_Request::clear_viewer_token() {
  viewer_token_ = GOOGLE_ULONGLONG(0);
  clear_has_viewer_token();
}
::google::protobuf::uint64 CBroadcast_WatchBroadcast_Request::viewer_token() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_WatchBroadcast_Request.viewer_token)
  return viewer_token_;
}
void CBroadcast_WatchBroadcast_Request::set_viewer_token(::google::protobuf::uint64 value) {
  set_has_viewer_token();
  viewer_token_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_WatchBroadcast_Request.viewer_token)
}

// optional uint32 client_ip = 4;
bool CBroadcast_WatchBroadcast_Request::has_client_ip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CBroadcast_WatchBroadcast_Request::set_has_client_ip() {
  _has_bits_[0] |= 0x00000008u;
}
void CBroadcast_WatchBroadcast_Request::clear_has_client_ip() {
  _has_bits_[0] &= ~0x00000008u;
}
void CBroadcast_WatchBroadcast_Request::clear_client_ip() {
  client_ip_ = 0u;
  clear_has_client_ip();
}
::google::protobuf::uint32 CBroadcast_WatchBroadcast_Request::client_ip() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_WatchBroadcast_Request.client_ip)
  return client_ip_;
}
void CBroadcast_WatchBroadcast_Request::set_client_ip(::google::protobuf::uint32 value) {
  set_has_client_ip();
  client_ip_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_WatchBroadcast_Request.client_ip)
}

// optional uint32 client_cell = 5;
bool CBroadcast_WatchBroadcast_Request::has_client_cell() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CBroadcast_WatchBroadcast_Request::set_has_client_cell() {
  _has_bits_[0] |= 0x00000010u;
}
void CBroadcast_WatchBroadcast_Request::clear_has_client_cell() {
  _has_bits_[0] &= ~0x00000010u;
}
void CBroadcast_WatchBroadcast_Request::clear_client_cell() {
  client_cell_ = 0u;
  clear_has_client_cell();
}
::google::protobuf::uint32 CBroadcast_WatchBroadcast_Request::client_cell() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_WatchBroadcast_Request.client_cell)
  return client_cell_;
}
void CBroadcast_WatchBroadcast_Request::set_client_cell(::google::protobuf::uint32 value) {
  set_has_client_cell();
  client_cell_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_WatchBroadcast_Request.client_cell)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_WatchBroadcast_Response::kResponseFieldNumber;
const int CBroadcast_WatchBroadcast_Response::kMpdUrlFieldNumber;
const int CBroadcast_WatchBroadcast_Response::kBroadcastIdFieldNumber;
const int CBroadcast_WatchBroadcast_Response::kGameidFieldNumber;
const int CBroadcast_WatchBroadcast_Response::kTitleFieldNumber;
const int CBroadcast_WatchBroadcast_Response::kNumViewersFieldNumber;
const int CBroadcast_WatchBroadcast_Response::kPermissionFieldNumber;
const int CBroadcast_WatchBroadcast_Response::kIsRtmpFieldNumber;
const int CBroadcast_WatchBroadcast_Response::kSecondsDelayFieldNumber;
const int CBroadcast_WatchBroadcast_Response::kViewerTokenFieldNumber;
const int CBroadcast_WatchBroadcast_Response::kHlsM3U8MasterUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_WatchBroadcast_Response::CBroadcast_WatchBroadcast_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CBroadcast_WatchBroadcast_Response)
}
CBroadcast_WatchBroadcast_Response::CBroadcast_WatchBroadcast_Response(const CBroadcast_WatchBroadcast_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  mpd_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_mpd_url()) {
    mpd_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mpd_url_);
  }
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_title()) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  hls_m3u8_master_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_hls_m3u8_master_url()) {
    hls_m3u8_master_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hls_m3u8_master_url_);
  }
  ::memcpy(&broadcast_id_, &from.broadcast_id_,
    reinterpret_cast<char*>(&response_) -
    reinterpret_cast<char*>(&broadcast_id_) + sizeof(response_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CBroadcast_WatchBroadcast_Response)
}

void CBroadcast_WatchBroadcast_Response::SharedCtor() {
  _cached_size_ = 0;
  mpd_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hls_m3u8_master_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&broadcast_id_, 0, reinterpret_cast<char*>(&viewer_token_) -
    reinterpret_cast<char*>(&broadcast_id_) + sizeof(viewer_token_));
  response_ = 1;
}

CBroadcast_WatchBroadcast_Response::~CBroadcast_WatchBroadcast_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CBroadcast_WatchBroadcast_Response)
  SharedDtor();
}

void CBroadcast_WatchBroadcast_Response::SharedDtor() {
  mpd_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hls_m3u8_master_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CBroadcast_WatchBroadcast_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CBroadcast_WatchBroadcast_Response::descriptor() {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CBroadcast_WatchBroadcast_Response& CBroadcast_WatchBroadcast_Response::default_instance() {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CBroadcast_WatchBroadcast_Response* CBroadcast_WatchBroadcast_Response::New(::google::protobuf::Arena* arena) const {
  CBroadcast_WatchBroadcast_Response* n = new CBroadcast_WatchBroadcast_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CBroadcast_WatchBroadcast_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CBroadcast_WatchBroadcast_Response)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_mpd_url()) {
      GOOGLE_DCHECK(!mpd_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*mpd_url_.UnsafeRawStringPointer())->clear();
    }
    if (has_title()) {
      GOOGLE_DCHECK(!title_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*title_.UnsafeRawStringPointer())->clear();
    }
    if (has_hls_m3u8_master_url()) {
      GOOGLE_DCHECK(!hls_m3u8_master_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*hls_m3u8_master_url_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 248u) {
    ::memset(&broadcast_id_, 0, reinterpret_cast<char*>(&is_rtmp_) -
      reinterpret_cast<char*>(&broadcast_id_) + sizeof(is_rtmp_));
  }
  if (_has_bits_[8 / 32] & 1792u) {
    ::memset(&seconds_delay_, 0, reinterpret_cast<char*>(&viewer_token_) -
      reinterpret_cast<char*>(&seconds_delay_) + sizeof(viewer_token_));
    response_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CBroadcast_WatchBroadcast_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CBroadcast_WatchBroadcast_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.steam.CBroadcast_WatchBroadcast_Response.EWatchResponse response = 1 [default = k_EWatchResponseReady];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::steam::CBroadcast_WatchBroadcast_Response_EWatchResponse_IsValid(value)) {
            set_response(static_cast< ::proto::steam::CBroadcast_WatchBroadcast_Response_EWatchResponse >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string mpd_url = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mpd_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mpd_url().data(), this->mpd_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CBroadcast_WatchBroadcast_Response.mpd_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 broadcast_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_broadcast_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &broadcast_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 gameid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_gameid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gameid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string title = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CBroadcast_WatchBroadcast_Response.title");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_viewers = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_num_viewers();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_viewers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 permission = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_permission();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &permission_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_rtmp = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_is_rtmp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_rtmp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 seconds_delay = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_seconds_delay();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seconds_delay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 viewer_token = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u)) {
          set_has_viewer_token();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &viewer_token_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string hls_m3u8_master_url = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hls_m3u8_master_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hls_m3u8_master_url().data(), this->hls_m3u8_master_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CBroadcast_WatchBroadcast_Response.hls_m3u8_master_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CBroadcast_WatchBroadcast_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CBroadcast_WatchBroadcast_Response)
  return false;
#undef DO_
}

void CBroadcast_WatchBroadcast_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CBroadcast_WatchBroadcast_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.steam.CBroadcast_WatchBroadcast_Response.EWatchResponse response = 1 [default = k_EWatchResponseReady];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->response(), output);
  }

  // optional string mpd_url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mpd_url().data(), this->mpd_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CBroadcast_WatchBroadcast_Response.mpd_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->mpd_url(), output);
  }

  // optional fixed64 broadcast_id = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->broadcast_id(), output);
  }

  // optional uint64 gameid = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->gameid(), output);
  }

  // optional string title = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CBroadcast_WatchBroadcast_Response.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->title(), output);
  }

  // optional uint32 num_viewers = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->num_viewers(), output);
  }

  // optional int32 permission = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->permission(), output);
  }

  // optional bool is_rtmp = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->is_rtmp(), output);
  }

  // optional int32 seconds_delay = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->seconds_delay(), output);
  }

  // optional fixed64 viewer_token = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(10, this->viewer_token(), output);
  }

  // optional string hls_m3u8_master_url = 11;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hls_m3u8_master_url().data(), this->hls_m3u8_master_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CBroadcast_WatchBroadcast_Response.hls_m3u8_master_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->hls_m3u8_master_url(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CBroadcast_WatchBroadcast_Response)
}

::google::protobuf::uint8* CBroadcast_WatchBroadcast_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CBroadcast_WatchBroadcast_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.steam.CBroadcast_WatchBroadcast_Response.EWatchResponse response = 1 [default = k_EWatchResponseReady];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->response(), target);
  }

  // optional string mpd_url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mpd_url().data(), this->mpd_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CBroadcast_WatchBroadcast_Response.mpd_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->mpd_url(), target);
  }

  // optional fixed64 broadcast_id = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->broadcast_id(), target);
  }

  // optional uint64 gameid = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->gameid(), target);
  }

  // optional string title = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CBroadcast_WatchBroadcast_Response.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->title(), target);
  }

  // optional uint32 num_viewers = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->num_viewers(), target);
  }

  // optional int32 permission = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->permission(), target);
  }

  // optional bool is_rtmp = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->is_rtmp(), target);
  }

  // optional int32 seconds_delay = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->seconds_delay(), target);
  }

  // optional fixed64 viewer_token = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(10, this->viewer_token(), target);
  }

  // optional string hls_m3u8_master_url = 11;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hls_m3u8_master_url().data(), this->hls_m3u8_master_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CBroadcast_WatchBroadcast_Response.hls_m3u8_master_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->hls_m3u8_master_url(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CBroadcast_WatchBroadcast_Response)
  return target;
}

size_t CBroadcast_WatchBroadcast_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CBroadcast_WatchBroadcast_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string mpd_url = 2;
    if (has_mpd_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mpd_url());
    }

    // optional string title = 5;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string hls_m3u8_master_url = 11;
    if (has_hls_m3u8_master_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hls_m3u8_master_url());
    }

    // optional fixed64 broadcast_id = 3;
    if (has_broadcast_id()) {
      total_size += 1 + 8;
    }

    // optional uint64 gameid = 4;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gameid());
    }

    // optional uint32 num_viewers = 6;
    if (has_num_viewers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_viewers());
    }

    // optional int32 permission = 7;
    if (has_permission()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->permission());
    }

    // optional bool is_rtmp = 8;
    if (has_is_rtmp()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional int32 seconds_delay = 9;
    if (has_seconds_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seconds_delay());
    }

    // optional fixed64 viewer_token = 10;
    if (has_viewer_token()) {
      total_size += 1 + 8;
    }

    // optional .proto.steam.CBroadcast_WatchBroadcast_Response.EWatchResponse response = 1 [default = k_EWatchResponseReady];
    if (has_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->response());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CBroadcast_WatchBroadcast_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CBroadcast_WatchBroadcast_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_WatchBroadcast_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CBroadcast_WatchBroadcast_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CBroadcast_WatchBroadcast_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CBroadcast_WatchBroadcast_Response)
    MergeFrom(*source);
  }
}

void CBroadcast_WatchBroadcast_Response::MergeFrom(const CBroadcast_WatchBroadcast_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CBroadcast_WatchBroadcast_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_mpd_url();
      mpd_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mpd_url_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_title();
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_hls_m3u8_master_url();
      hls_m3u8_master_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hls_m3u8_master_url_);
    }
    if (cached_has_bits & 0x00000008u) {
      broadcast_id_ = from.broadcast_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      gameid_ = from.gameid_;
    }
    if (cached_has_bits & 0x00000020u) {
      num_viewers_ = from.num_viewers_;
    }
    if (cached_has_bits & 0x00000040u) {
      permission_ = from.permission_;
    }
    if (cached_has_bits & 0x00000080u) {
      is_rtmp_ = from.is_rtmp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      seconds_delay_ = from.seconds_delay_;
    }
    if (cached_has_bits & 0x00000200u) {
      viewer_token_ = from.viewer_token_;
    }
    if (cached_has_bits & 0x00000400u) {
      response_ = from.response_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CBroadcast_WatchBroadcast_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CBroadcast_WatchBroadcast_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_WatchBroadcast_Response::CopyFrom(const CBroadcast_WatchBroadcast_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CBroadcast_WatchBroadcast_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_WatchBroadcast_Response::IsInitialized() const {
  return true;
}

void CBroadcast_WatchBroadcast_Response::Swap(CBroadcast_WatchBroadcast_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_WatchBroadcast_Response::InternalSwap(CBroadcast_WatchBroadcast_Response* other) {
  mpd_url_.Swap(&other->mpd_url_);
  title_.Swap(&other->title_);
  hls_m3u8_master_url_.Swap(&other->hls_m3u8_master_url_);
  std::swap(broadcast_id_, other->broadcast_id_);
  std::swap(gameid_, other->gameid_);
  std::swap(num_viewers_, other->num_viewers_);
  std::swap(permission_, other->permission_);
  std::swap(is_rtmp_, other->is_rtmp_);
  std::swap(seconds_delay_, other->seconds_delay_);
  std::swap(viewer_token_, other->viewer_token_);
  std::swap(response_, other->response_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CBroadcast_WatchBroadcast_Response::GetMetadata() const {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CBroadcast_WatchBroadcast_Response

// optional .proto.steam.CBroadcast_WatchBroadcast_Response.EWatchResponse response = 1 [default = k_EWatchResponseReady];
bool CBroadcast_WatchBroadcast_Response::has_response() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CBroadcast_WatchBroadcast_Response::set_has_response() {
  _has_bits_[0] |= 0x00000400u;
}
void CBroadcast_WatchBroadcast_Response::clear_has_response() {
  _has_bits_[0] &= ~0x00000400u;
}
void CBroadcast_WatchBroadcast_Response::clear_response() {
  response_ = 1;
  clear_has_response();
}
::proto::steam::CBroadcast_WatchBroadcast_Response_EWatchResponse CBroadcast_WatchBroadcast_Response::response() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_WatchBroadcast_Response.response)
  return static_cast< ::proto::steam::CBroadcast_WatchBroadcast_Response_EWatchResponse >(response_);
}
void CBroadcast_WatchBroadcast_Response::set_response(::proto::steam::CBroadcast_WatchBroadcast_Response_EWatchResponse value) {
  assert(::proto::steam::CBroadcast_WatchBroadcast_Response_EWatchResponse_IsValid(value));
  set_has_response();
  response_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_WatchBroadcast_Response.response)
}

// optional string mpd_url = 2;
bool CBroadcast_WatchBroadcast_Response::has_mpd_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CBroadcast_WatchBroadcast_Response::set_has_mpd_url() {
  _has_bits_[0] |= 0x00000001u;
}
void CBroadcast_WatchBroadcast_Response::clear_has_mpd_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void CBroadcast_WatchBroadcast_Response::clear_mpd_url() {
  mpd_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mpd_url();
}
const ::std::string& CBroadcast_WatchBroadcast_Response::mpd_url() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_WatchBroadcast_Response.mpd_url)
  return mpd_url_.GetNoArena();
}
void CBroadcast_WatchBroadcast_Response::set_mpd_url(const ::std::string& value) {
  set_has_mpd_url();
  mpd_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_WatchBroadcast_Response.mpd_url)
}
#if LANG_CXX11
void CBroadcast_WatchBroadcast_Response::set_mpd_url(::std::string&& value) {
  set_has_mpd_url();
  mpd_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CBroadcast_WatchBroadcast_Response.mpd_url)
}
#endif
void CBroadcast_WatchBroadcast_Response::set_mpd_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mpd_url();
  mpd_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CBroadcast_WatchBroadcast_Response.mpd_url)
}
void CBroadcast_WatchBroadcast_Response::set_mpd_url(const char* value, size_t size) {
  set_has_mpd_url();
  mpd_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CBroadcast_WatchBroadcast_Response.mpd_url)
}
::std::string* CBroadcast_WatchBroadcast_Response::mutable_mpd_url() {
  set_has_mpd_url();
  // @@protoc_insertion_point(field_mutable:proto.steam.CBroadcast_WatchBroadcast_Response.mpd_url)
  return mpd_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CBroadcast_WatchBroadcast_Response::release_mpd_url() {
  // @@protoc_insertion_point(field_release:proto.steam.CBroadcast_WatchBroadcast_Response.mpd_url)
  clear_has_mpd_url();
  return mpd_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CBroadcast_WatchBroadcast_Response::set_allocated_mpd_url(::std::string* mpd_url) {
  if (mpd_url != NULL) {
    set_has_mpd_url();
  } else {
    clear_has_mpd_url();
  }
  mpd_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mpd_url);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CBroadcast_WatchBroadcast_Response.mpd_url)
}

// optional fixed64 broadcast_id = 3;
bool CBroadcast_WatchBroadcast_Response::has_broadcast_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CBroadcast_WatchBroadcast_Response::set_has_broadcast_id() {
  _has_bits_[0] |= 0x00000008u;
}
void CBroadcast_WatchBroadcast_Response::clear_has_broadcast_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void CBroadcast_WatchBroadcast_Response::clear_broadcast_id() {
  broadcast_id_ = GOOGLE_ULONGLONG(0);
  clear_has_broadcast_id();
}
::google::protobuf::uint64 CBroadcast_WatchBroadcast_Response::broadcast_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_WatchBroadcast_Response.broadcast_id)
  return broadcast_id_;
}
void CBroadcast_WatchBroadcast_Response::set_broadcast_id(::google::protobuf::uint64 value) {
  set_has_broadcast_id();
  broadcast_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_WatchBroadcast_Response.broadcast_id)
}

// optional uint64 gameid = 4;
bool CBroadcast_WatchBroadcast_Response::has_gameid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CBroadcast_WatchBroadcast_Response::set_has_gameid() {
  _has_bits_[0] |= 0x00000010u;
}
void CBroadcast_WatchBroadcast_Response::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000010u;
}
void CBroadcast_WatchBroadcast_Response::clear_gameid() {
  gameid_ = GOOGLE_ULONGLONG(0);
  clear_has_gameid();
}
::google::protobuf::uint64 CBroadcast_WatchBroadcast_Response::gameid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_WatchBroadcast_Response.gameid)
  return gameid_;
}
void CBroadcast_WatchBroadcast_Response::set_gameid(::google::protobuf::uint64 value) {
  set_has_gameid();
  gameid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_WatchBroadcast_Response.gameid)
}

// optional string title = 5;
bool CBroadcast_WatchBroadcast_Response::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CBroadcast_WatchBroadcast_Response::set_has_title() {
  _has_bits_[0] |= 0x00000002u;
}
void CBroadcast_WatchBroadcast_Response::clear_has_title() {
  _has_bits_[0] &= ~0x00000002u;
}
void CBroadcast_WatchBroadcast_Response::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
const ::std::string& CBroadcast_WatchBroadcast_Response::title() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_WatchBroadcast_Response.title)
  return title_.GetNoArena();
}
void CBroadcast_WatchBroadcast_Response::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_WatchBroadcast_Response.title)
}
#if LANG_CXX11
void CBroadcast_WatchBroadcast_Response::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CBroadcast_WatchBroadcast_Response.title)
}
#endif
void CBroadcast_WatchBroadcast_Response::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CBroadcast_WatchBroadcast_Response.title)
}
void CBroadcast_WatchBroadcast_Response::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CBroadcast_WatchBroadcast_Response.title)
}
::std::string* CBroadcast_WatchBroadcast_Response::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:proto.steam.CBroadcast_WatchBroadcast_Response.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CBroadcast_WatchBroadcast_Response::release_title() {
  // @@protoc_insertion_point(field_release:proto.steam.CBroadcast_WatchBroadcast_Response.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CBroadcast_WatchBroadcast_Response::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CBroadcast_WatchBroadcast_Response.title)
}

// optional uint32 num_viewers = 6;
bool CBroadcast_WatchBroadcast_Response::has_num_viewers() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CBroadcast_WatchBroadcast_Response::set_has_num_viewers() {
  _has_bits_[0] |= 0x00000020u;
}
void CBroadcast_WatchBroadcast_Response::clear_has_num_viewers() {
  _has_bits_[0] &= ~0x00000020u;
}
void CBroadcast_WatchBroadcast_Response::clear_num_viewers() {
  num_viewers_ = 0u;
  clear_has_num_viewers();
}
::google::protobuf::uint32 CBroadcast_WatchBroadcast_Response::num_viewers() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_WatchBroadcast_Response.num_viewers)
  return num_viewers_;
}
void CBroadcast_WatchBroadcast_Response::set_num_viewers(::google::protobuf::uint32 value) {
  set_has_num_viewers();
  num_viewers_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_WatchBroadcast_Response.num_viewers)
}

// optional int32 permission = 7;
bool CBroadcast_WatchBroadcast_Response::has_permission() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CBroadcast_WatchBroadcast_Response::set_has_permission() {
  _has_bits_[0] |= 0x00000040u;
}
void CBroadcast_WatchBroadcast_Response::clear_has_permission() {
  _has_bits_[0] &= ~0x00000040u;
}
void CBroadcast_WatchBroadcast_Response::clear_permission() {
  permission_ = 0;
  clear_has_permission();
}
::google::protobuf::int32 CBroadcast_WatchBroadcast_Response::permission() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_WatchBroadcast_Response.permission)
  return permission_;
}
void CBroadcast_WatchBroadcast_Response::set_permission(::google::protobuf::int32 value) {
  set_has_permission();
  permission_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_WatchBroadcast_Response.permission)
}

// optional bool is_rtmp = 8;
bool CBroadcast_WatchBroadcast_Response::has_is_rtmp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CBroadcast_WatchBroadcast_Response::set_has_is_rtmp() {
  _has_bits_[0] |= 0x00000080u;
}
void CBroadcast_WatchBroadcast_Response::clear_has_is_rtmp() {
  _has_bits_[0] &= ~0x00000080u;
}
void CBroadcast_WatchBroadcast_Response::clear_is_rtmp() {
  is_rtmp_ = false;
  clear_has_is_rtmp();
}
bool CBroadcast_WatchBroadcast_Response::is_rtmp() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_WatchBroadcast_Response.is_rtmp)
  return is_rtmp_;
}
void CBroadcast_WatchBroadcast_Response::set_is_rtmp(bool value) {
  set_has_is_rtmp();
  is_rtmp_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_WatchBroadcast_Response.is_rtmp)
}

// optional int32 seconds_delay = 9;
bool CBroadcast_WatchBroadcast_Response::has_seconds_delay() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CBroadcast_WatchBroadcast_Response::set_has_seconds_delay() {
  _has_bits_[0] |= 0x00000100u;
}
void CBroadcast_WatchBroadcast_Response::clear_has_seconds_delay() {
  _has_bits_[0] &= ~0x00000100u;
}
void CBroadcast_WatchBroadcast_Response::clear_seconds_delay() {
  seconds_delay_ = 0;
  clear_has_seconds_delay();
}
::google::protobuf::int32 CBroadcast_WatchBroadcast_Response::seconds_delay() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_WatchBroadcast_Response.seconds_delay)
  return seconds_delay_;
}
void CBroadcast_WatchBroadcast_Response::set_seconds_delay(::google::protobuf::int32 value) {
  set_has_seconds_delay();
  seconds_delay_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_WatchBroadcast_Response.seconds_delay)
}

// optional fixed64 viewer_token = 10;
bool CBroadcast_WatchBroadcast_Response::has_viewer_token() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CBroadcast_WatchBroadcast_Response::set_has_viewer_token() {
  _has_bits_[0] |= 0x00000200u;
}
void CBroadcast_WatchBroadcast_Response::clear_has_viewer_token() {
  _has_bits_[0] &= ~0x00000200u;
}
void CBroadcast_WatchBroadcast_Response::clear_viewer_token() {
  viewer_token_ = GOOGLE_ULONGLONG(0);
  clear_has_viewer_token();
}
::google::protobuf::uint64 CBroadcast_WatchBroadcast_Response::viewer_token() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_WatchBroadcast_Response.viewer_token)
  return viewer_token_;
}
void CBroadcast_WatchBroadcast_Response::set_viewer_token(::google::protobuf::uint64 value) {
  set_has_viewer_token();
  viewer_token_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_WatchBroadcast_Response.viewer_token)
}

// optional string hls_m3u8_master_url = 11;
bool CBroadcast_WatchBroadcast_Response::has_hls_m3u8_master_url() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CBroadcast_WatchBroadcast_Response::set_has_hls_m3u8_master_url() {
  _has_bits_[0] |= 0x00000004u;
}
void CBroadcast_WatchBroadcast_Response::clear_has_hls_m3u8_master_url() {
  _has_bits_[0] &= ~0x00000004u;
}
void CBroadcast_WatchBroadcast_Response::clear_hls_m3u8_master_url() {
  hls_m3u8_master_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hls_m3u8_master_url();
}
const ::std::string& CBroadcast_WatchBroadcast_Response::hls_m3u8_master_url() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_WatchBroadcast_Response.hls_m3u8_master_url)
  return hls_m3u8_master_url_.GetNoArena();
}
void CBroadcast_WatchBroadcast_Response::set_hls_m3u8_master_url(const ::std::string& value) {
  set_has_hls_m3u8_master_url();
  hls_m3u8_master_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_WatchBroadcast_Response.hls_m3u8_master_url)
}
#if LANG_CXX11
void CBroadcast_WatchBroadcast_Response::set_hls_m3u8_master_url(::std::string&& value) {
  set_has_hls_m3u8_master_url();
  hls_m3u8_master_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CBroadcast_WatchBroadcast_Response.hls_m3u8_master_url)
}
#endif
void CBroadcast_WatchBroadcast_Response::set_hls_m3u8_master_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_hls_m3u8_master_url();
  hls_m3u8_master_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CBroadcast_WatchBroadcast_Response.hls_m3u8_master_url)
}
void CBroadcast_WatchBroadcast_Response::set_hls_m3u8_master_url(const char* value, size_t size) {
  set_has_hls_m3u8_master_url();
  hls_m3u8_master_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CBroadcast_WatchBroadcast_Response.hls_m3u8_master_url)
}
::std::string* CBroadcast_WatchBroadcast_Response::mutable_hls_m3u8_master_url() {
  set_has_hls_m3u8_master_url();
  // @@protoc_insertion_point(field_mutable:proto.steam.CBroadcast_WatchBroadcast_Response.hls_m3u8_master_url)
  return hls_m3u8_master_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CBroadcast_WatchBroadcast_Response::release_hls_m3u8_master_url() {
  // @@protoc_insertion_point(field_release:proto.steam.CBroadcast_WatchBroadcast_Response.hls_m3u8_master_url)
  clear_has_hls_m3u8_master_url();
  return hls_m3u8_master_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CBroadcast_WatchBroadcast_Response::set_allocated_hls_m3u8_master_url(::std::string* hls_m3u8_master_url) {
  if (hls_m3u8_master_url != NULL) {
    set_has_hls_m3u8_master_url();
  } else {
    clear_has_hls_m3u8_master_url();
  }
  hls_m3u8_master_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hls_m3u8_master_url);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CBroadcast_WatchBroadcast_Response.hls_m3u8_master_url)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_GetBroadcastStatus_Request::kSteamidFieldNumber;
const int CBroadcast_GetBroadcastStatus_Request::kBroadcastIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_GetBroadcastStatus_Request::CBroadcast_GetBroadcastStatus_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CBroadcast_GetBroadcastStatus_Request)
}
CBroadcast_GetBroadcastStatus_Request::CBroadcast_GetBroadcastStatus_Request(const CBroadcast_GetBroadcastStatus_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    reinterpret_cast<char*>(&broadcast_id_) -
    reinterpret_cast<char*>(&steamid_) + sizeof(broadcast_id_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CBroadcast_GetBroadcastStatus_Request)
}

void CBroadcast_GetBroadcastStatus_Request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&steamid_, 0, reinterpret_cast<char*>(&broadcast_id_) -
    reinterpret_cast<char*>(&steamid_) + sizeof(broadcast_id_));
}

CBroadcast_GetBroadcastStatus_Request::~CBroadcast_GetBroadcastStatus_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CBroadcast_GetBroadcastStatus_Request)
  SharedDtor();
}

void CBroadcast_GetBroadcastStatus_Request::SharedDtor() {
}

void CBroadcast_GetBroadcastStatus_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CBroadcast_GetBroadcastStatus_Request::descriptor() {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CBroadcast_GetBroadcastStatus_Request& CBroadcast_GetBroadcastStatus_Request::default_instance() {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CBroadcast_GetBroadcastStatus_Request* CBroadcast_GetBroadcastStatus_Request::New(::google::protobuf::Arena* arena) const {
  CBroadcast_GetBroadcastStatus_Request* n = new CBroadcast_GetBroadcastStatus_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CBroadcast_GetBroadcastStatus_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CBroadcast_GetBroadcastStatus_Request)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&steamid_, 0, reinterpret_cast<char*>(&broadcast_id_) -
      reinterpret_cast<char*>(&steamid_) + sizeof(broadcast_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CBroadcast_GetBroadcastStatus_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CBroadcast_GetBroadcastStatus_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 broadcast_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_broadcast_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &broadcast_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CBroadcast_GetBroadcastStatus_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CBroadcast_GetBroadcastStatus_Request)
  return false;
#undef DO_
}

void CBroadcast_GetBroadcastStatus_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CBroadcast_GetBroadcastStatus_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional fixed64 broadcast_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->broadcast_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CBroadcast_GetBroadcastStatus_Request)
}

::google::protobuf::uint8* CBroadcast_GetBroadcastStatus_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CBroadcast_GetBroadcastStatus_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional fixed64 broadcast_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->broadcast_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CBroadcast_GetBroadcastStatus_Request)
  return target;
}

size_t CBroadcast_GetBroadcastStatus_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CBroadcast_GetBroadcastStatus_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional fixed64 steamid = 1;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional fixed64 broadcast_id = 2;
    if (has_broadcast_id()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CBroadcast_GetBroadcastStatus_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CBroadcast_GetBroadcastStatus_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_GetBroadcastStatus_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CBroadcast_GetBroadcastStatus_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CBroadcast_GetBroadcastStatus_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CBroadcast_GetBroadcastStatus_Request)
    MergeFrom(*source);
  }
}

void CBroadcast_GetBroadcastStatus_Request::MergeFrom(const CBroadcast_GetBroadcastStatus_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CBroadcast_GetBroadcastStatus_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      broadcast_id_ = from.broadcast_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CBroadcast_GetBroadcastStatus_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CBroadcast_GetBroadcastStatus_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_GetBroadcastStatus_Request::CopyFrom(const CBroadcast_GetBroadcastStatus_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CBroadcast_GetBroadcastStatus_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_GetBroadcastStatus_Request::IsInitialized() const {
  return true;
}

void CBroadcast_GetBroadcastStatus_Request::Swap(CBroadcast_GetBroadcastStatus_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_GetBroadcastStatus_Request::InternalSwap(CBroadcast_GetBroadcastStatus_Request* other) {
  std::swap(steamid_, other->steamid_);
  std::swap(broadcast_id_, other->broadcast_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CBroadcast_GetBroadcastStatus_Request::GetMetadata() const {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CBroadcast_GetBroadcastStatus_Request

// optional fixed64 steamid = 1;
bool CBroadcast_GetBroadcastStatus_Request::has_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CBroadcast_GetBroadcastStatus_Request::set_has_steamid() {
  _has_bits_[0] |= 0x00000001u;
}
void CBroadcast_GetBroadcastStatus_Request::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CBroadcast_GetBroadcastStatus_Request::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
::google::protobuf::uint64 CBroadcast_GetBroadcastStatus_Request::steamid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_GetBroadcastStatus_Request.steamid)
  return steamid_;
}
void CBroadcast_GetBroadcastStatus_Request::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_GetBroadcastStatus_Request.steamid)
}

// optional fixed64 broadcast_id = 2;
bool CBroadcast_GetBroadcastStatus_Request::has_broadcast_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CBroadcast_GetBroadcastStatus_Request::set_has_broadcast_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CBroadcast_GetBroadcastStatus_Request::clear_has_broadcast_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CBroadcast_GetBroadcastStatus_Request::clear_broadcast_id() {
  broadcast_id_ = GOOGLE_ULONGLONG(0);
  clear_has_broadcast_id();
}
::google::protobuf::uint64 CBroadcast_GetBroadcastStatus_Request::broadcast_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_GetBroadcastStatus_Request.broadcast_id)
  return broadcast_id_;
}
void CBroadcast_GetBroadcastStatus_Request::set_broadcast_id(::google::protobuf::uint64 value) {
  set_has_broadcast_id();
  broadcast_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_GetBroadcastStatus_Request.broadcast_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_GetBroadcastStatus_Response::kGameidFieldNumber;
const int CBroadcast_GetBroadcastStatus_Response::kTitleFieldNumber;
const int CBroadcast_GetBroadcastStatus_Response::kNumViewersFieldNumber;
const int CBroadcast_GetBroadcastStatus_Response::kPermissionFieldNumber;
const int CBroadcast_GetBroadcastStatus_Response::kIsRtmpFieldNumber;
const int CBroadcast_GetBroadcastStatus_Response::kSecondsDelayFieldNumber;
const int CBroadcast_GetBroadcastStatus_Response::kIsPublisherFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_GetBroadcastStatus_Response::CBroadcast_GetBroadcastStatus_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CBroadcast_GetBroadcastStatus_Response)
}
CBroadcast_GetBroadcastStatus_Response::CBroadcast_GetBroadcastStatus_Response(const CBroadcast_GetBroadcastStatus_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_title()) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  ::memcpy(&gameid_, &from.gameid_,
    reinterpret_cast<char*>(&is_publisher_) -
    reinterpret_cast<char*>(&gameid_) + sizeof(is_publisher_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CBroadcast_GetBroadcastStatus_Response)
}

void CBroadcast_GetBroadcastStatus_Response::SharedCtor() {
  _cached_size_ = 0;
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&gameid_, 0, reinterpret_cast<char*>(&is_publisher_) -
    reinterpret_cast<char*>(&gameid_) + sizeof(is_publisher_));
}

CBroadcast_GetBroadcastStatus_Response::~CBroadcast_GetBroadcastStatus_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CBroadcast_GetBroadcastStatus_Response)
  SharedDtor();
}

void CBroadcast_GetBroadcastStatus_Response::SharedDtor() {
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CBroadcast_GetBroadcastStatus_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CBroadcast_GetBroadcastStatus_Response::descriptor() {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CBroadcast_GetBroadcastStatus_Response& CBroadcast_GetBroadcastStatus_Response::default_instance() {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CBroadcast_GetBroadcastStatus_Response* CBroadcast_GetBroadcastStatus_Response::New(::google::protobuf::Arena* arena) const {
  CBroadcast_GetBroadcastStatus_Response* n = new CBroadcast_GetBroadcastStatus_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CBroadcast_GetBroadcastStatus_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CBroadcast_GetBroadcastStatus_Response)
  if (has_title()) {
    GOOGLE_DCHECK(!title_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*title_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 126u) {
    ::memset(&gameid_, 0, reinterpret_cast<char*>(&is_publisher_) -
      reinterpret_cast<char*>(&gameid_) + sizeof(is_publisher_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CBroadcast_GetBroadcastStatus_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CBroadcast_GetBroadcastStatus_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 gameid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_gameid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gameid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string title = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CBroadcast_GetBroadcastStatus_Response.title");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_viewers = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_num_viewers();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_viewers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 permission = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_permission();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &permission_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_rtmp = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_is_rtmp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_rtmp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 seconds_delay = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_seconds_delay();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seconds_delay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_publisher = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_is_publisher();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_publisher_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CBroadcast_GetBroadcastStatus_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CBroadcast_GetBroadcastStatus_Response)
  return false;
#undef DO_
}

void CBroadcast_GetBroadcastStatus_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CBroadcast_GetBroadcastStatus_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 gameid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->gameid(), output);
  }

  // optional string title = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CBroadcast_GetBroadcastStatus_Response.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->title(), output);
  }

  // optional uint32 num_viewers = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->num_viewers(), output);
  }

  // optional int32 permission = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->permission(), output);
  }

  // optional bool is_rtmp = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_rtmp(), output);
  }

  // optional int32 seconds_delay = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->seconds_delay(), output);
  }

  // optional bool is_publisher = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_publisher(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CBroadcast_GetBroadcastStatus_Response)
}

::google::protobuf::uint8* CBroadcast_GetBroadcastStatus_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CBroadcast_GetBroadcastStatus_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 gameid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->gameid(), target);
  }

  // optional string title = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CBroadcast_GetBroadcastStatus_Response.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }

  // optional uint32 num_viewers = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->num_viewers(), target);
  }

  // optional int32 permission = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->permission(), target);
  }

  // optional bool is_rtmp = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_rtmp(), target);
  }

  // optional int32 seconds_delay = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->seconds_delay(), target);
  }

  // optional bool is_publisher = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_publisher(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CBroadcast_GetBroadcastStatus_Response)
  return target;
}

size_t CBroadcast_GetBroadcastStatus_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CBroadcast_GetBroadcastStatus_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional string title = 2;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional uint64 gameid = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gameid());
    }

    // optional uint32 num_viewers = 3;
    if (has_num_viewers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_viewers());
    }

    // optional int32 permission = 4;
    if (has_permission()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->permission());
    }

    // optional int32 seconds_delay = 6;
    if (has_seconds_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seconds_delay());
    }

    // optional bool is_rtmp = 5;
    if (has_is_rtmp()) {
      total_size += 1 + 1;
    }

    // optional bool is_publisher = 7;
    if (has_is_publisher()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CBroadcast_GetBroadcastStatus_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CBroadcast_GetBroadcastStatus_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_GetBroadcastStatus_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CBroadcast_GetBroadcastStatus_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CBroadcast_GetBroadcastStatus_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CBroadcast_GetBroadcastStatus_Response)
    MergeFrom(*source);
  }
}

void CBroadcast_GetBroadcastStatus_Response::MergeFrom(const CBroadcast_GetBroadcastStatus_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CBroadcast_GetBroadcastStatus_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_title();
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (cached_has_bits & 0x00000002u) {
      gameid_ = from.gameid_;
    }
    if (cached_has_bits & 0x00000004u) {
      num_viewers_ = from.num_viewers_;
    }
    if (cached_has_bits & 0x00000008u) {
      permission_ = from.permission_;
    }
    if (cached_has_bits & 0x00000010u) {
      seconds_delay_ = from.seconds_delay_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_rtmp_ = from.is_rtmp_;
    }
    if (cached_has_bits & 0x00000040u) {
      is_publisher_ = from.is_publisher_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CBroadcast_GetBroadcastStatus_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CBroadcast_GetBroadcastStatus_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_GetBroadcastStatus_Response::CopyFrom(const CBroadcast_GetBroadcastStatus_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CBroadcast_GetBroadcastStatus_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_GetBroadcastStatus_Response::IsInitialized() const {
  return true;
}

void CBroadcast_GetBroadcastStatus_Response::Swap(CBroadcast_GetBroadcastStatus_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_GetBroadcastStatus_Response::InternalSwap(CBroadcast_GetBroadcastStatus_Response* other) {
  title_.Swap(&other->title_);
  std::swap(gameid_, other->gameid_);
  std::swap(num_viewers_, other->num_viewers_);
  std::swap(permission_, other->permission_);
  std::swap(seconds_delay_, other->seconds_delay_);
  std::swap(is_rtmp_, other->is_rtmp_);
  std::swap(is_publisher_, other->is_publisher_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CBroadcast_GetBroadcastStatus_Response::GetMetadata() const {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CBroadcast_GetBroadcastStatus_Response

// optional uint64 gameid = 1;
bool CBroadcast_GetBroadcastStatus_Response::has_gameid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CBroadcast_GetBroadcastStatus_Response::set_has_gameid() {
  _has_bits_[0] |= 0x00000002u;
}
void CBroadcast_GetBroadcastStatus_Response::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CBroadcast_GetBroadcastStatus_Response::clear_gameid() {
  gameid_ = GOOGLE_ULONGLONG(0);
  clear_has_gameid();
}
::google::protobuf::uint64 CBroadcast_GetBroadcastStatus_Response::gameid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_GetBroadcastStatus_Response.gameid)
  return gameid_;
}
void CBroadcast_GetBroadcastStatus_Response::set_gameid(::google::protobuf::uint64 value) {
  set_has_gameid();
  gameid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_GetBroadcastStatus_Response.gameid)
}

// optional string title = 2;
bool CBroadcast_GetBroadcastStatus_Response::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CBroadcast_GetBroadcastStatus_Response::set_has_title() {
  _has_bits_[0] |= 0x00000001u;
}
void CBroadcast_GetBroadcastStatus_Response::clear_has_title() {
  _has_bits_[0] &= ~0x00000001u;
}
void CBroadcast_GetBroadcastStatus_Response::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
const ::std::string& CBroadcast_GetBroadcastStatus_Response::title() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_GetBroadcastStatus_Response.title)
  return title_.GetNoArena();
}
void CBroadcast_GetBroadcastStatus_Response::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_GetBroadcastStatus_Response.title)
}
#if LANG_CXX11
void CBroadcast_GetBroadcastStatus_Response::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CBroadcast_GetBroadcastStatus_Response.title)
}
#endif
void CBroadcast_GetBroadcastStatus_Response::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CBroadcast_GetBroadcastStatus_Response.title)
}
void CBroadcast_GetBroadcastStatus_Response::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CBroadcast_GetBroadcastStatus_Response.title)
}
::std::string* CBroadcast_GetBroadcastStatus_Response::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:proto.steam.CBroadcast_GetBroadcastStatus_Response.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CBroadcast_GetBroadcastStatus_Response::release_title() {
  // @@protoc_insertion_point(field_release:proto.steam.CBroadcast_GetBroadcastStatus_Response.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CBroadcast_GetBroadcastStatus_Response::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CBroadcast_GetBroadcastStatus_Response.title)
}

// optional uint32 num_viewers = 3;
bool CBroadcast_GetBroadcastStatus_Response::has_num_viewers() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CBroadcast_GetBroadcastStatus_Response::set_has_num_viewers() {
  _has_bits_[0] |= 0x00000004u;
}
void CBroadcast_GetBroadcastStatus_Response::clear_has_num_viewers() {
  _has_bits_[0] &= ~0x00000004u;
}
void CBroadcast_GetBroadcastStatus_Response::clear_num_viewers() {
  num_viewers_ = 0u;
  clear_has_num_viewers();
}
::google::protobuf::uint32 CBroadcast_GetBroadcastStatus_Response::num_viewers() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_GetBroadcastStatus_Response.num_viewers)
  return num_viewers_;
}
void CBroadcast_GetBroadcastStatus_Response::set_num_viewers(::google::protobuf::uint32 value) {
  set_has_num_viewers();
  num_viewers_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_GetBroadcastStatus_Response.num_viewers)
}

// optional int32 permission = 4;
bool CBroadcast_GetBroadcastStatus_Response::has_permission() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CBroadcast_GetBroadcastStatus_Response::set_has_permission() {
  _has_bits_[0] |= 0x00000008u;
}
void CBroadcast_GetBroadcastStatus_Response::clear_has_permission() {
  _has_bits_[0] &= ~0x00000008u;
}
void CBroadcast_GetBroadcastStatus_Response::clear_permission() {
  permission_ = 0;
  clear_has_permission();
}
::google::protobuf::int32 CBroadcast_GetBroadcastStatus_Response::permission() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_GetBroadcastStatus_Response.permission)
  return permission_;
}
void CBroadcast_GetBroadcastStatus_Response::set_permission(::google::protobuf::int32 value) {
  set_has_permission();
  permission_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_GetBroadcastStatus_Response.permission)
}

// optional bool is_rtmp = 5;
bool CBroadcast_GetBroadcastStatus_Response::has_is_rtmp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CBroadcast_GetBroadcastStatus_Response::set_has_is_rtmp() {
  _has_bits_[0] |= 0x00000020u;
}
void CBroadcast_GetBroadcastStatus_Response::clear_has_is_rtmp() {
  _has_bits_[0] &= ~0x00000020u;
}
void CBroadcast_GetBroadcastStatus_Response::clear_is_rtmp() {
  is_rtmp_ = false;
  clear_has_is_rtmp();
}
bool CBroadcast_GetBroadcastStatus_Response::is_rtmp() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_GetBroadcastStatus_Response.is_rtmp)
  return is_rtmp_;
}
void CBroadcast_GetBroadcastStatus_Response::set_is_rtmp(bool value) {
  set_has_is_rtmp();
  is_rtmp_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_GetBroadcastStatus_Response.is_rtmp)
}

// optional int32 seconds_delay = 6;
bool CBroadcast_GetBroadcastStatus_Response::has_seconds_delay() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CBroadcast_GetBroadcastStatus_Response::set_has_seconds_delay() {
  _has_bits_[0] |= 0x00000010u;
}
void CBroadcast_GetBroadcastStatus_Response::clear_has_seconds_delay() {
  _has_bits_[0] &= ~0x00000010u;
}
void CBroadcast_GetBroadcastStatus_Response::clear_seconds_delay() {
  seconds_delay_ = 0;
  clear_has_seconds_delay();
}
::google::protobuf::int32 CBroadcast_GetBroadcastStatus_Response::seconds_delay() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_GetBroadcastStatus_Response.seconds_delay)
  return seconds_delay_;
}
void CBroadcast_GetBroadcastStatus_Response::set_seconds_delay(::google::protobuf::int32 value) {
  set_has_seconds_delay();
  seconds_delay_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_GetBroadcastStatus_Response.seconds_delay)
}

// optional bool is_publisher = 7;
bool CBroadcast_GetBroadcastStatus_Response::has_is_publisher() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CBroadcast_GetBroadcastStatus_Response::set_has_is_publisher() {
  _has_bits_[0] |= 0x00000040u;
}
void CBroadcast_GetBroadcastStatus_Response::clear_has_is_publisher() {
  _has_bits_[0] &= ~0x00000040u;
}
void CBroadcast_GetBroadcastStatus_Response::clear_is_publisher() {
  is_publisher_ = false;
  clear_has_is_publisher();
}
bool CBroadcast_GetBroadcastStatus_Response::is_publisher() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_GetBroadcastStatus_Response.is_publisher)
  return is_publisher_;
}
void CBroadcast_GetBroadcastStatus_Response::set_is_publisher(bool value) {
  set_has_is_publisher();
  is_publisher_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_GetBroadcastStatus_Response.is_publisher)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_InviteToBroadcast_Request::kSteamidFieldNumber;
const int CBroadcast_InviteToBroadcast_Request::kApprovalResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_InviteToBroadcast_Request::CBroadcast_InviteToBroadcast_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CBroadcast_InviteToBroadcast_Request)
}
CBroadcast_InviteToBroadcast_Request::CBroadcast_InviteToBroadcast_Request(const CBroadcast_InviteToBroadcast_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    reinterpret_cast<char*>(&approval_response_) -
    reinterpret_cast<char*>(&steamid_) + sizeof(approval_response_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CBroadcast_InviteToBroadcast_Request)
}

void CBroadcast_InviteToBroadcast_Request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&steamid_, 0, reinterpret_cast<char*>(&approval_response_) -
    reinterpret_cast<char*>(&steamid_) + sizeof(approval_response_));
}

CBroadcast_InviteToBroadcast_Request::~CBroadcast_InviteToBroadcast_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CBroadcast_InviteToBroadcast_Request)
  SharedDtor();
}

void CBroadcast_InviteToBroadcast_Request::SharedDtor() {
}

void CBroadcast_InviteToBroadcast_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CBroadcast_InviteToBroadcast_Request::descriptor() {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CBroadcast_InviteToBroadcast_Request& CBroadcast_InviteToBroadcast_Request::default_instance() {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CBroadcast_InviteToBroadcast_Request* CBroadcast_InviteToBroadcast_Request::New(::google::protobuf::Arena* arena) const {
  CBroadcast_InviteToBroadcast_Request* n = new CBroadcast_InviteToBroadcast_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CBroadcast_InviteToBroadcast_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CBroadcast_InviteToBroadcast_Request)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&steamid_, 0, reinterpret_cast<char*>(&approval_response_) -
      reinterpret_cast<char*>(&steamid_) + sizeof(approval_response_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CBroadcast_InviteToBroadcast_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CBroadcast_InviteToBroadcast_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool approval_response = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_approval_response();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &approval_response_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CBroadcast_InviteToBroadcast_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CBroadcast_InviteToBroadcast_Request)
  return false;
#undef DO_
}

void CBroadcast_InviteToBroadcast_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CBroadcast_InviteToBroadcast_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional bool approval_response = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->approval_response(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CBroadcast_InviteToBroadcast_Request)
}

::google::protobuf::uint8* CBroadcast_InviteToBroadcast_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CBroadcast_InviteToBroadcast_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional bool approval_response = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->approval_response(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CBroadcast_InviteToBroadcast_Request)
  return target;
}

size_t CBroadcast_InviteToBroadcast_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CBroadcast_InviteToBroadcast_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional fixed64 steamid = 1;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional bool approval_response = 2;
    if (has_approval_response()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CBroadcast_InviteToBroadcast_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CBroadcast_InviteToBroadcast_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_InviteToBroadcast_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CBroadcast_InviteToBroadcast_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CBroadcast_InviteToBroadcast_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CBroadcast_InviteToBroadcast_Request)
    MergeFrom(*source);
  }
}

void CBroadcast_InviteToBroadcast_Request::MergeFrom(const CBroadcast_InviteToBroadcast_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CBroadcast_InviteToBroadcast_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      approval_response_ = from.approval_response_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CBroadcast_InviteToBroadcast_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CBroadcast_InviteToBroadcast_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_InviteToBroadcast_Request::CopyFrom(const CBroadcast_InviteToBroadcast_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CBroadcast_InviteToBroadcast_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_InviteToBroadcast_Request::IsInitialized() const {
  return true;
}

void CBroadcast_InviteToBroadcast_Request::Swap(CBroadcast_InviteToBroadcast_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_InviteToBroadcast_Request::InternalSwap(CBroadcast_InviteToBroadcast_Request* other) {
  std::swap(steamid_, other->steamid_);
  std::swap(approval_response_, other->approval_response_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CBroadcast_InviteToBroadcast_Request::GetMetadata() const {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CBroadcast_InviteToBroadcast_Request

// optional fixed64 steamid = 1;
bool CBroadcast_InviteToBroadcast_Request::has_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CBroadcast_InviteToBroadcast_Request::set_has_steamid() {
  _has_bits_[0] |= 0x00000001u;
}
void CBroadcast_InviteToBroadcast_Request::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CBroadcast_InviteToBroadcast_Request::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
::google::protobuf::uint64 CBroadcast_InviteToBroadcast_Request::steamid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_InviteToBroadcast_Request.steamid)
  return steamid_;
}
void CBroadcast_InviteToBroadcast_Request::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_InviteToBroadcast_Request.steamid)
}

// optional bool approval_response = 2;
bool CBroadcast_InviteToBroadcast_Request::has_approval_response() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CBroadcast_InviteToBroadcast_Request::set_has_approval_response() {
  _has_bits_[0] |= 0x00000002u;
}
void CBroadcast_InviteToBroadcast_Request::clear_has_approval_response() {
  _has_bits_[0] &= ~0x00000002u;
}
void CBroadcast_InviteToBroadcast_Request::clear_approval_response() {
  approval_response_ = false;
  clear_has_approval_response();
}
bool CBroadcast_InviteToBroadcast_Request::approval_response() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_InviteToBroadcast_Request.approval_response)
  return approval_response_;
}
void CBroadcast_InviteToBroadcast_Request::set_approval_response(bool value) {
  set_has_approval_response();
  approval_response_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_InviteToBroadcast_Request.approval_response)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_InviteToBroadcast_Response::kSuccessFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_InviteToBroadcast_Response::CBroadcast_InviteToBroadcast_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CBroadcast_InviteToBroadcast_Response)
}
CBroadcast_InviteToBroadcast_Response::CBroadcast_InviteToBroadcast_Response(const CBroadcast_InviteToBroadcast_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CBroadcast_InviteToBroadcast_Response)
}

void CBroadcast_InviteToBroadcast_Response::SharedCtor() {
  _cached_size_ = 0;
  success_ = false;
}

CBroadcast_InviteToBroadcast_Response::~CBroadcast_InviteToBroadcast_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CBroadcast_InviteToBroadcast_Response)
  SharedDtor();
}

void CBroadcast_InviteToBroadcast_Response::SharedDtor() {
}

void CBroadcast_InviteToBroadcast_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CBroadcast_InviteToBroadcast_Response::descriptor() {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CBroadcast_InviteToBroadcast_Response& CBroadcast_InviteToBroadcast_Response::default_instance() {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CBroadcast_InviteToBroadcast_Response* CBroadcast_InviteToBroadcast_Response::New(::google::protobuf::Arena* arena) const {
  CBroadcast_InviteToBroadcast_Response* n = new CBroadcast_InviteToBroadcast_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CBroadcast_InviteToBroadcast_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CBroadcast_InviteToBroadcast_Response)
  success_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CBroadcast_InviteToBroadcast_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CBroadcast_InviteToBroadcast_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool success = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_success();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CBroadcast_InviteToBroadcast_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CBroadcast_InviteToBroadcast_Response)
  return false;
#undef DO_
}

void CBroadcast_InviteToBroadcast_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CBroadcast_InviteToBroadcast_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool success = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CBroadcast_InviteToBroadcast_Response)
}

::google::protobuf::uint8* CBroadcast_InviteToBroadcast_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CBroadcast_InviteToBroadcast_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool success = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CBroadcast_InviteToBroadcast_Response)
  return target;
}

size_t CBroadcast_InviteToBroadcast_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CBroadcast_InviteToBroadcast_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional bool success = 1;
  if (has_success()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CBroadcast_InviteToBroadcast_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CBroadcast_InviteToBroadcast_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_InviteToBroadcast_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CBroadcast_InviteToBroadcast_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CBroadcast_InviteToBroadcast_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CBroadcast_InviteToBroadcast_Response)
    MergeFrom(*source);
  }
}

void CBroadcast_InviteToBroadcast_Response::MergeFrom(const CBroadcast_InviteToBroadcast_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CBroadcast_InviteToBroadcast_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_success()) {
    set_success(from.success());
  }
}

void CBroadcast_InviteToBroadcast_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CBroadcast_InviteToBroadcast_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_InviteToBroadcast_Response::CopyFrom(const CBroadcast_InviteToBroadcast_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CBroadcast_InviteToBroadcast_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_InviteToBroadcast_Response::IsInitialized() const {
  return true;
}

void CBroadcast_InviteToBroadcast_Response::Swap(CBroadcast_InviteToBroadcast_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_InviteToBroadcast_Response::InternalSwap(CBroadcast_InviteToBroadcast_Response* other) {
  std::swap(success_, other->success_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CBroadcast_InviteToBroadcast_Response::GetMetadata() const {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CBroadcast_InviteToBroadcast_Response

// optional bool success = 1;
bool CBroadcast_InviteToBroadcast_Response::has_success() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CBroadcast_InviteToBroadcast_Response::set_has_success() {
  _has_bits_[0] |= 0x00000001u;
}
void CBroadcast_InviteToBroadcast_Response::clear_has_success() {
  _has_bits_[0] &= ~0x00000001u;
}
void CBroadcast_InviteToBroadcast_Response::clear_success() {
  success_ = false;
  clear_has_success();
}
bool CBroadcast_InviteToBroadcast_Response::success() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_InviteToBroadcast_Response.success)
  return success_;
}
void CBroadcast_InviteToBroadcast_Response::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_InviteToBroadcast_Response.success)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_SendBroadcastStateToServer_Request::kPermissionFieldNumber;
const int CBroadcast_SendBroadcastStateToServer_Request::kGameidFieldNumber;
const int CBroadcast_SendBroadcastStateToServer_Request::kTitleFieldNumber;
const int CBroadcast_SendBroadcastStateToServer_Request::kGameDataConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_SendBroadcastStateToServer_Request::CBroadcast_SendBroadcastStateToServer_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CBroadcast_SendBroadcastStateToServer_Request)
}
CBroadcast_SendBroadcastStateToServer_Request::CBroadcast_SendBroadcastStateToServer_Request(const CBroadcast_SendBroadcastStateToServer_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_title()) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  game_data_config_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_game_data_config()) {
    game_data_config_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_data_config_);
  }
  ::memcpy(&gameid_, &from.gameid_,
    reinterpret_cast<char*>(&permission_) -
    reinterpret_cast<char*>(&gameid_) + sizeof(permission_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CBroadcast_SendBroadcastStateToServer_Request)
}

void CBroadcast_SendBroadcastStateToServer_Request::SharedCtor() {
  _cached_size_ = 0;
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_data_config_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&gameid_, 0, reinterpret_cast<char*>(&permission_) -
    reinterpret_cast<char*>(&gameid_) + sizeof(permission_));
}

CBroadcast_SendBroadcastStateToServer_Request::~CBroadcast_SendBroadcastStateToServer_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CBroadcast_SendBroadcastStateToServer_Request)
  SharedDtor();
}

void CBroadcast_SendBroadcastStateToServer_Request::SharedDtor() {
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_data_config_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CBroadcast_SendBroadcastStateToServer_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CBroadcast_SendBroadcastStateToServer_Request::descriptor() {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CBroadcast_SendBroadcastStateToServer_Request& CBroadcast_SendBroadcastStateToServer_Request::default_instance() {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CBroadcast_SendBroadcastStateToServer_Request* CBroadcast_SendBroadcastStateToServer_Request::New(::google::protobuf::Arena* arena) const {
  CBroadcast_SendBroadcastStateToServer_Request* n = new CBroadcast_SendBroadcastStateToServer_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CBroadcast_SendBroadcastStateToServer_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CBroadcast_SendBroadcastStateToServer_Request)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_title()) {
      GOOGLE_DCHECK(!title_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*title_.UnsafeRawStringPointer())->clear();
    }
    if (has_game_data_config()) {
      GOOGLE_DCHECK(!game_data_config_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*game_data_config_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&gameid_, 0, reinterpret_cast<char*>(&permission_) -
      reinterpret_cast<char*>(&gameid_) + sizeof(permission_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CBroadcast_SendBroadcastStateToServer_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CBroadcast_SendBroadcastStateToServer_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 permission = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_permission();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &permission_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 gameid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_gameid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gameid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string title = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CBroadcast_SendBroadcastStateToServer_Request.title");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string game_data_config = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_data_config()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->game_data_config().data(), this->game_data_config().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CBroadcast_SendBroadcastStateToServer_Request.game_data_config");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CBroadcast_SendBroadcastStateToServer_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CBroadcast_SendBroadcastStateToServer_Request)
  return false;
#undef DO_
}

void CBroadcast_SendBroadcastStateToServer_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CBroadcast_SendBroadcastStateToServer_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 permission = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->permission(), output);
  }

  // optional uint64 gameid = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->gameid(), output);
  }

  // optional string title = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CBroadcast_SendBroadcastStateToServer_Request.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->title(), output);
  }

  // optional string game_data_config = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_data_config().data(), this->game_data_config().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CBroadcast_SendBroadcastStateToServer_Request.game_data_config");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->game_data_config(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CBroadcast_SendBroadcastStateToServer_Request)
}

::google::protobuf::uint8* CBroadcast_SendBroadcastStateToServer_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CBroadcast_SendBroadcastStateToServer_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 permission = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->permission(), target);
  }

  // optional uint64 gameid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->gameid(), target);
  }

  // optional string title = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CBroadcast_SendBroadcastStateToServer_Request.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->title(), target);
  }

  // optional string game_data_config = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_data_config().data(), this->game_data_config().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CBroadcast_SendBroadcastStateToServer_Request.game_data_config");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->game_data_config(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CBroadcast_SendBroadcastStateToServer_Request)
  return target;
}

size_t CBroadcast_SendBroadcastStateToServer_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CBroadcast_SendBroadcastStateToServer_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string title = 3;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string game_data_config = 4;
    if (has_game_data_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game_data_config());
    }

    // optional uint64 gameid = 2;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gameid());
    }

    // optional int32 permission = 1;
    if (has_permission()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->permission());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CBroadcast_SendBroadcastStateToServer_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CBroadcast_SendBroadcastStateToServer_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_SendBroadcastStateToServer_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CBroadcast_SendBroadcastStateToServer_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CBroadcast_SendBroadcastStateToServer_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CBroadcast_SendBroadcastStateToServer_Request)
    MergeFrom(*source);
  }
}

void CBroadcast_SendBroadcastStateToServer_Request::MergeFrom(const CBroadcast_SendBroadcastStateToServer_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CBroadcast_SendBroadcastStateToServer_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_title();
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_game_data_config();
      game_data_config_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_data_config_);
    }
    if (cached_has_bits & 0x00000004u) {
      gameid_ = from.gameid_;
    }
    if (cached_has_bits & 0x00000008u) {
      permission_ = from.permission_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CBroadcast_SendBroadcastStateToServer_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CBroadcast_SendBroadcastStateToServer_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_SendBroadcastStateToServer_Request::CopyFrom(const CBroadcast_SendBroadcastStateToServer_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CBroadcast_SendBroadcastStateToServer_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_SendBroadcastStateToServer_Request::IsInitialized() const {
  return true;
}

void CBroadcast_SendBroadcastStateToServer_Request::Swap(CBroadcast_SendBroadcastStateToServer_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_SendBroadcastStateToServer_Request::InternalSwap(CBroadcast_SendBroadcastStateToServer_Request* other) {
  title_.Swap(&other->title_);
  game_data_config_.Swap(&other->game_data_config_);
  std::swap(gameid_, other->gameid_);
  std::swap(permission_, other->permission_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CBroadcast_SendBroadcastStateToServer_Request::GetMetadata() const {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CBroadcast_SendBroadcastStateToServer_Request

// optional int32 permission = 1;
bool CBroadcast_SendBroadcastStateToServer_Request::has_permission() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CBroadcast_SendBroadcastStateToServer_Request::set_has_permission() {
  _has_bits_[0] |= 0x00000008u;
}
void CBroadcast_SendBroadcastStateToServer_Request::clear_has_permission() {
  _has_bits_[0] &= ~0x00000008u;
}
void CBroadcast_SendBroadcastStateToServer_Request::clear_permission() {
  permission_ = 0;
  clear_has_permission();
}
::google::protobuf::int32 CBroadcast_SendBroadcastStateToServer_Request::permission() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_SendBroadcastStateToServer_Request.permission)
  return permission_;
}
void CBroadcast_SendBroadcastStateToServer_Request::set_permission(::google::protobuf::int32 value) {
  set_has_permission();
  permission_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_SendBroadcastStateToServer_Request.permission)
}

// optional uint64 gameid = 2;
bool CBroadcast_SendBroadcastStateToServer_Request::has_gameid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CBroadcast_SendBroadcastStateToServer_Request::set_has_gameid() {
  _has_bits_[0] |= 0x00000004u;
}
void CBroadcast_SendBroadcastStateToServer_Request::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000004u;
}
void CBroadcast_SendBroadcastStateToServer_Request::clear_gameid() {
  gameid_ = GOOGLE_ULONGLONG(0);
  clear_has_gameid();
}
::google::protobuf::uint64 CBroadcast_SendBroadcastStateToServer_Request::gameid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_SendBroadcastStateToServer_Request.gameid)
  return gameid_;
}
void CBroadcast_SendBroadcastStateToServer_Request::set_gameid(::google::protobuf::uint64 value) {
  set_has_gameid();
  gameid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_SendBroadcastStateToServer_Request.gameid)
}

// optional string title = 3;
bool CBroadcast_SendBroadcastStateToServer_Request::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CBroadcast_SendBroadcastStateToServer_Request::set_has_title() {
  _has_bits_[0] |= 0x00000001u;
}
void CBroadcast_SendBroadcastStateToServer_Request::clear_has_title() {
  _has_bits_[0] &= ~0x00000001u;
}
void CBroadcast_SendBroadcastStateToServer_Request::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
const ::std::string& CBroadcast_SendBroadcastStateToServer_Request::title() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_SendBroadcastStateToServer_Request.title)
  return title_.GetNoArena();
}
void CBroadcast_SendBroadcastStateToServer_Request::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_SendBroadcastStateToServer_Request.title)
}
#if LANG_CXX11
void CBroadcast_SendBroadcastStateToServer_Request::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CBroadcast_SendBroadcastStateToServer_Request.title)
}
#endif
void CBroadcast_SendBroadcastStateToServer_Request::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CBroadcast_SendBroadcastStateToServer_Request.title)
}
void CBroadcast_SendBroadcastStateToServer_Request::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CBroadcast_SendBroadcastStateToServer_Request.title)
}
::std::string* CBroadcast_SendBroadcastStateToServer_Request::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:proto.steam.CBroadcast_SendBroadcastStateToServer_Request.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CBroadcast_SendBroadcastStateToServer_Request::release_title() {
  // @@protoc_insertion_point(field_release:proto.steam.CBroadcast_SendBroadcastStateToServer_Request.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CBroadcast_SendBroadcastStateToServer_Request::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CBroadcast_SendBroadcastStateToServer_Request.title)
}

// optional string game_data_config = 4;
bool CBroadcast_SendBroadcastStateToServer_Request::has_game_data_config() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CBroadcast_SendBroadcastStateToServer_Request::set_has_game_data_config() {
  _has_bits_[0] |= 0x00000002u;
}
void CBroadcast_SendBroadcastStateToServer_Request::clear_has_game_data_config() {
  _has_bits_[0] &= ~0x00000002u;
}
void CBroadcast_SendBroadcastStateToServer_Request::clear_game_data_config() {
  game_data_config_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_game_data_config();
}
const ::std::string& CBroadcast_SendBroadcastStateToServer_Request::game_data_config() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_SendBroadcastStateToServer_Request.game_data_config)
  return game_data_config_.GetNoArena();
}
void CBroadcast_SendBroadcastStateToServer_Request::set_game_data_config(const ::std::string& value) {
  set_has_game_data_config();
  game_data_config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_SendBroadcastStateToServer_Request.game_data_config)
}
#if LANG_CXX11
void CBroadcast_SendBroadcastStateToServer_Request::set_game_data_config(::std::string&& value) {
  set_has_game_data_config();
  game_data_config_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CBroadcast_SendBroadcastStateToServer_Request.game_data_config)
}
#endif
void CBroadcast_SendBroadcastStateToServer_Request::set_game_data_config(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_game_data_config();
  game_data_config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CBroadcast_SendBroadcastStateToServer_Request.game_data_config)
}
void CBroadcast_SendBroadcastStateToServer_Request::set_game_data_config(const char* value, size_t size) {
  set_has_game_data_config();
  game_data_config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CBroadcast_SendBroadcastStateToServer_Request.game_data_config)
}
::std::string* CBroadcast_SendBroadcastStateToServer_Request::mutable_game_data_config() {
  set_has_game_data_config();
  // @@protoc_insertion_point(field_mutable:proto.steam.CBroadcast_SendBroadcastStateToServer_Request.game_data_config)
  return game_data_config_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CBroadcast_SendBroadcastStateToServer_Request::release_game_data_config() {
  // @@protoc_insertion_point(field_release:proto.steam.CBroadcast_SendBroadcastStateToServer_Request.game_data_config)
  clear_has_game_data_config();
  return game_data_config_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CBroadcast_SendBroadcastStateToServer_Request::set_allocated_game_data_config(::std::string* game_data_config) {
  if (game_data_config != NULL) {
    set_has_game_data_config();
  } else {
    clear_has_game_data_config();
  }
  game_data_config_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), game_data_config);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CBroadcast_SendBroadcastStateToServer_Request.game_data_config)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_SendBroadcastStateToServer_Response::CBroadcast_SendBroadcastStateToServer_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CBroadcast_SendBroadcastStateToServer_Response)
}
CBroadcast_SendBroadcastStateToServer_Response::CBroadcast_SendBroadcastStateToServer_Response(const CBroadcast_SendBroadcastStateToServer_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CBroadcast_SendBroadcastStateToServer_Response)
}

void CBroadcast_SendBroadcastStateToServer_Response::SharedCtor() {
  _cached_size_ = 0;
}

CBroadcast_SendBroadcastStateToServer_Response::~CBroadcast_SendBroadcastStateToServer_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CBroadcast_SendBroadcastStateToServer_Response)
  SharedDtor();
}

void CBroadcast_SendBroadcastStateToServer_Response::SharedDtor() {
}

void CBroadcast_SendBroadcastStateToServer_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CBroadcast_SendBroadcastStateToServer_Response::descriptor() {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CBroadcast_SendBroadcastStateToServer_Response& CBroadcast_SendBroadcastStateToServer_Response::default_instance() {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CBroadcast_SendBroadcastStateToServer_Response* CBroadcast_SendBroadcastStateToServer_Response::New(::google::protobuf::Arena* arena) const {
  CBroadcast_SendBroadcastStateToServer_Response* n = new CBroadcast_SendBroadcastStateToServer_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CBroadcast_SendBroadcastStateToServer_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CBroadcast_SendBroadcastStateToServer_Response)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CBroadcast_SendBroadcastStateToServer_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CBroadcast_SendBroadcastStateToServer_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CBroadcast_SendBroadcastStateToServer_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CBroadcast_SendBroadcastStateToServer_Response)
  return false;
#undef DO_
}

void CBroadcast_SendBroadcastStateToServer_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CBroadcast_SendBroadcastStateToServer_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CBroadcast_SendBroadcastStateToServer_Response)
}

::google::protobuf::uint8* CBroadcast_SendBroadcastStateToServer_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CBroadcast_SendBroadcastStateToServer_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CBroadcast_SendBroadcastStateToServer_Response)
  return target;
}

size_t CBroadcast_SendBroadcastStateToServer_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CBroadcast_SendBroadcastStateToServer_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CBroadcast_SendBroadcastStateToServer_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CBroadcast_SendBroadcastStateToServer_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_SendBroadcastStateToServer_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CBroadcast_SendBroadcastStateToServer_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CBroadcast_SendBroadcastStateToServer_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CBroadcast_SendBroadcastStateToServer_Response)
    MergeFrom(*source);
  }
}

void CBroadcast_SendBroadcastStateToServer_Response::MergeFrom(const CBroadcast_SendBroadcastStateToServer_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CBroadcast_SendBroadcastStateToServer_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CBroadcast_SendBroadcastStateToServer_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CBroadcast_SendBroadcastStateToServer_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_SendBroadcastStateToServer_Response::CopyFrom(const CBroadcast_SendBroadcastStateToServer_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CBroadcast_SendBroadcastStateToServer_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_SendBroadcastStateToServer_Response::IsInitialized() const {
  return true;
}

void CBroadcast_SendBroadcastStateToServer_Response::Swap(CBroadcast_SendBroadcastStateToServer_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_SendBroadcastStateToServer_Response::InternalSwap(CBroadcast_SendBroadcastStateToServer_Response* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CBroadcast_SendBroadcastStateToServer_Response::GetMetadata() const {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CBroadcast_SendBroadcastStateToServer_Response

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::kBroadcastIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::CBroadcast_NotifyBroadcastSessionHeartbeat_Notification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CBroadcast_NotifyBroadcastSessionHeartbeat_Notification)
}
CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::CBroadcast_NotifyBroadcastSessionHeartbeat_Notification(const CBroadcast_NotifyBroadcastSessionHeartbeat_Notification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  broadcast_id_ = from.broadcast_id_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CBroadcast_NotifyBroadcastSessionHeartbeat_Notification)
}

void CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::SharedCtor() {
  _cached_size_ = 0;
  broadcast_id_ = GOOGLE_ULONGLONG(0);
}

CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::~CBroadcast_NotifyBroadcastSessionHeartbeat_Notification() {
  // @@protoc_insertion_point(destructor:proto.steam.CBroadcast_NotifyBroadcastSessionHeartbeat_Notification)
  SharedDtor();
}

void CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::SharedDtor() {
}

void CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::descriptor() {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CBroadcast_NotifyBroadcastSessionHeartbeat_Notification& CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::default_instance() {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CBroadcast_NotifyBroadcastSessionHeartbeat_Notification* CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::New(::google::protobuf::Arena* arena) const {
  CBroadcast_NotifyBroadcastSessionHeartbeat_Notification* n = new CBroadcast_NotifyBroadcastSessionHeartbeat_Notification;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CBroadcast_NotifyBroadcastSessionHeartbeat_Notification)
  broadcast_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CBroadcast_NotifyBroadcastSessionHeartbeat_Notification)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 broadcast_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_broadcast_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &broadcast_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CBroadcast_NotifyBroadcastSessionHeartbeat_Notification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CBroadcast_NotifyBroadcastSessionHeartbeat_Notification)
  return false;
#undef DO_
}

void CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CBroadcast_NotifyBroadcastSessionHeartbeat_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->broadcast_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CBroadcast_NotifyBroadcastSessionHeartbeat_Notification)
}

::google::protobuf::uint8* CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CBroadcast_NotifyBroadcastSessionHeartbeat_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->broadcast_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CBroadcast_NotifyBroadcastSessionHeartbeat_Notification)
  return target;
}

size_t CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CBroadcast_NotifyBroadcastSessionHeartbeat_Notification)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional fixed64 broadcast_id = 1;
  if (has_broadcast_id()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CBroadcast_NotifyBroadcastSessionHeartbeat_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_NotifyBroadcastSessionHeartbeat_Notification* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CBroadcast_NotifyBroadcastSessionHeartbeat_Notification>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CBroadcast_NotifyBroadcastSessionHeartbeat_Notification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CBroadcast_NotifyBroadcastSessionHeartbeat_Notification)
    MergeFrom(*source);
  }
}

void CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::MergeFrom(const CBroadcast_NotifyBroadcastSessionHeartbeat_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CBroadcast_NotifyBroadcastSessionHeartbeat_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_broadcast_id()) {
    set_broadcast_id(from.broadcast_id());
  }
}

void CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CBroadcast_NotifyBroadcastSessionHeartbeat_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::CopyFrom(const CBroadcast_NotifyBroadcastSessionHeartbeat_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CBroadcast_NotifyBroadcastSessionHeartbeat_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::IsInitialized() const {
  return true;
}

void CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::Swap(CBroadcast_NotifyBroadcastSessionHeartbeat_Notification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::InternalSwap(CBroadcast_NotifyBroadcastSessionHeartbeat_Notification* other) {
  std::swap(broadcast_id_, other->broadcast_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::GetMetadata() const {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CBroadcast_NotifyBroadcastSessionHeartbeat_Notification

// optional fixed64 broadcast_id = 1;
bool CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::has_broadcast_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::set_has_broadcast_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::clear_has_broadcast_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::clear_broadcast_id() {
  broadcast_id_ = GOOGLE_ULONGLONG(0);
  clear_has_broadcast_id();
}
::google::protobuf::uint64 CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::broadcast_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_NotifyBroadcastSessionHeartbeat_Notification.broadcast_id)
  return broadcast_id_;
}
void CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::set_broadcast_id(::google::protobuf::uint64 value) {
  set_has_broadcast_id();
  broadcast_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_NotifyBroadcastSessionHeartbeat_Notification.broadcast_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_GetBroadcastChatInfo_Request::kSteamidFieldNumber;
const int CBroadcast_GetBroadcastChatInfo_Request::kBroadcastIdFieldNumber;
const int CBroadcast_GetBroadcastChatInfo_Request::kClientIpFieldNumber;
const int CBroadcast_GetBroadcastChatInfo_Request::kClientCellFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_GetBroadcastChatInfo_Request::CBroadcast_GetBroadcastChatInfo_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CBroadcast_GetBroadcastChatInfo_Request)
}
CBroadcast_GetBroadcastChatInfo_Request::CBroadcast_GetBroadcastChatInfo_Request(const CBroadcast_GetBroadcastChatInfo_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    reinterpret_cast<char*>(&client_cell_) -
    reinterpret_cast<char*>(&steamid_) + sizeof(client_cell_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CBroadcast_GetBroadcastChatInfo_Request)
}

void CBroadcast_GetBroadcastChatInfo_Request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&steamid_, 0, reinterpret_cast<char*>(&client_cell_) -
    reinterpret_cast<char*>(&steamid_) + sizeof(client_cell_));
}

CBroadcast_GetBroadcastChatInfo_Request::~CBroadcast_GetBroadcastChatInfo_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CBroadcast_GetBroadcastChatInfo_Request)
  SharedDtor();
}

void CBroadcast_GetBroadcastChatInfo_Request::SharedDtor() {
}

void CBroadcast_GetBroadcastChatInfo_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CBroadcast_GetBroadcastChatInfo_Request::descriptor() {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CBroadcast_GetBroadcastChatInfo_Request& CBroadcast_GetBroadcastChatInfo_Request::default_instance() {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CBroadcast_GetBroadcastChatInfo_Request* CBroadcast_GetBroadcastChatInfo_Request::New(::google::protobuf::Arena* arena) const {
  CBroadcast_GetBroadcastChatInfo_Request* n = new CBroadcast_GetBroadcastChatInfo_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CBroadcast_GetBroadcastChatInfo_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CBroadcast_GetBroadcastChatInfo_Request)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&steamid_, 0, reinterpret_cast<char*>(&client_cell_) -
      reinterpret_cast<char*>(&steamid_) + sizeof(client_cell_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CBroadcast_GetBroadcastChatInfo_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CBroadcast_GetBroadcastChatInfo_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 broadcast_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_broadcast_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &broadcast_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 client_ip = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_client_ip();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 client_cell = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_client_cell();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_cell_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CBroadcast_GetBroadcastChatInfo_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CBroadcast_GetBroadcastChatInfo_Request)
  return false;
#undef DO_
}

void CBroadcast_GetBroadcastChatInfo_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CBroadcast_GetBroadcastChatInfo_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional fixed64 broadcast_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->broadcast_id(), output);
  }

  // optional uint32 client_ip = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->client_ip(), output);
  }

  // optional uint32 client_cell = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->client_cell(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CBroadcast_GetBroadcastChatInfo_Request)
}

::google::protobuf::uint8* CBroadcast_GetBroadcastChatInfo_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CBroadcast_GetBroadcastChatInfo_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional fixed64 broadcast_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->broadcast_id(), target);
  }

  // optional uint32 client_ip = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->client_ip(), target);
  }

  // optional uint32 client_cell = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->client_cell(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CBroadcast_GetBroadcastChatInfo_Request)
  return target;
}

size_t CBroadcast_GetBroadcastChatInfo_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CBroadcast_GetBroadcastChatInfo_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional fixed64 steamid = 1;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional fixed64 broadcast_id = 2;
    if (has_broadcast_id()) {
      total_size += 1 + 8;
    }

    // optional uint32 client_ip = 3;
    if (has_client_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_ip());
    }

    // optional uint32 client_cell = 4;
    if (has_client_cell()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_cell());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CBroadcast_GetBroadcastChatInfo_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CBroadcast_GetBroadcastChatInfo_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_GetBroadcastChatInfo_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CBroadcast_GetBroadcastChatInfo_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CBroadcast_GetBroadcastChatInfo_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CBroadcast_GetBroadcastChatInfo_Request)
    MergeFrom(*source);
  }
}

void CBroadcast_GetBroadcastChatInfo_Request::MergeFrom(const CBroadcast_GetBroadcastChatInfo_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CBroadcast_GetBroadcastChatInfo_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      broadcast_id_ = from.broadcast_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      client_ip_ = from.client_ip_;
    }
    if (cached_has_bits & 0x00000008u) {
      client_cell_ = from.client_cell_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CBroadcast_GetBroadcastChatInfo_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CBroadcast_GetBroadcastChatInfo_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_GetBroadcastChatInfo_Request::CopyFrom(const CBroadcast_GetBroadcastChatInfo_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CBroadcast_GetBroadcastChatInfo_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_GetBroadcastChatInfo_Request::IsInitialized() const {
  return true;
}

void CBroadcast_GetBroadcastChatInfo_Request::Swap(CBroadcast_GetBroadcastChatInfo_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_GetBroadcastChatInfo_Request::InternalSwap(CBroadcast_GetBroadcastChatInfo_Request* other) {
  std::swap(steamid_, other->steamid_);
  std::swap(broadcast_id_, other->broadcast_id_);
  std::swap(client_ip_, other->client_ip_);
  std::swap(client_cell_, other->client_cell_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CBroadcast_GetBroadcastChatInfo_Request::GetMetadata() const {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CBroadcast_GetBroadcastChatInfo_Request

// optional fixed64 steamid = 1;
bool CBroadcast_GetBroadcastChatInfo_Request::has_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CBroadcast_GetBroadcastChatInfo_Request::set_has_steamid() {
  _has_bits_[0] |= 0x00000001u;
}
void CBroadcast_GetBroadcastChatInfo_Request::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CBroadcast_GetBroadcastChatInfo_Request::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
::google::protobuf::uint64 CBroadcast_GetBroadcastChatInfo_Request::steamid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_GetBroadcastChatInfo_Request.steamid)
  return steamid_;
}
void CBroadcast_GetBroadcastChatInfo_Request::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_GetBroadcastChatInfo_Request.steamid)
}

// optional fixed64 broadcast_id = 2;
bool CBroadcast_GetBroadcastChatInfo_Request::has_broadcast_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CBroadcast_GetBroadcastChatInfo_Request::set_has_broadcast_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CBroadcast_GetBroadcastChatInfo_Request::clear_has_broadcast_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CBroadcast_GetBroadcastChatInfo_Request::clear_broadcast_id() {
  broadcast_id_ = GOOGLE_ULONGLONG(0);
  clear_has_broadcast_id();
}
::google::protobuf::uint64 CBroadcast_GetBroadcastChatInfo_Request::broadcast_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_GetBroadcastChatInfo_Request.broadcast_id)
  return broadcast_id_;
}
void CBroadcast_GetBroadcastChatInfo_Request::set_broadcast_id(::google::protobuf::uint64 value) {
  set_has_broadcast_id();
  broadcast_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_GetBroadcastChatInfo_Request.broadcast_id)
}

// optional uint32 client_ip = 3;
bool CBroadcast_GetBroadcastChatInfo_Request::has_client_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CBroadcast_GetBroadcastChatInfo_Request::set_has_client_ip() {
  _has_bits_[0] |= 0x00000004u;
}
void CBroadcast_GetBroadcastChatInfo_Request::clear_has_client_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
void CBroadcast_GetBroadcastChatInfo_Request::clear_client_ip() {
  client_ip_ = 0u;
  clear_has_client_ip();
}
::google::protobuf::uint32 CBroadcast_GetBroadcastChatInfo_Request::client_ip() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_GetBroadcastChatInfo_Request.client_ip)
  return client_ip_;
}
void CBroadcast_GetBroadcastChatInfo_Request::set_client_ip(::google::protobuf::uint32 value) {
  set_has_client_ip();
  client_ip_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_GetBroadcastChatInfo_Request.client_ip)
}

// optional uint32 client_cell = 4;
bool CBroadcast_GetBroadcastChatInfo_Request::has_client_cell() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CBroadcast_GetBroadcastChatInfo_Request::set_has_client_cell() {
  _has_bits_[0] |= 0x00000008u;
}
void CBroadcast_GetBroadcastChatInfo_Request::clear_has_client_cell() {
  _has_bits_[0] &= ~0x00000008u;
}
void CBroadcast_GetBroadcastChatInfo_Request::clear_client_cell() {
  client_cell_ = 0u;
  clear_has_client_cell();
}
::google::protobuf::uint32 CBroadcast_GetBroadcastChatInfo_Request::client_cell() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_GetBroadcastChatInfo_Request.client_cell)
  return client_cell_;
}
void CBroadcast_GetBroadcastChatInfo_Request::set_client_cell(::google::protobuf::uint32 value) {
  set_has_client_cell();
  client_cell_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_GetBroadcastChatInfo_Request.client_cell)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_GetBroadcastChatInfo_Response::kChatIdFieldNumber;
const int CBroadcast_GetBroadcastChatInfo_Response::kViewUrlFieldNumber;
const int CBroadcast_GetBroadcastChatInfo_Response::kViewUrlTemplateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_GetBroadcastChatInfo_Response::CBroadcast_GetBroadcastChatInfo_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CBroadcast_GetBroadcastChatInfo_Response)
}
CBroadcast_GetBroadcastChatInfo_Response::CBroadcast_GetBroadcastChatInfo_Response(const CBroadcast_GetBroadcastChatInfo_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  view_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_view_url()) {
    view_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.view_url_);
  }
  view_url_template_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_view_url_template()) {
    view_url_template_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.view_url_template_);
  }
  chat_id_ = from.chat_id_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CBroadcast_GetBroadcastChatInfo_Response)
}

void CBroadcast_GetBroadcastChatInfo_Response::SharedCtor() {
  _cached_size_ = 0;
  view_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  view_url_template_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chat_id_ = GOOGLE_ULONGLONG(0);
}

CBroadcast_GetBroadcastChatInfo_Response::~CBroadcast_GetBroadcastChatInfo_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CBroadcast_GetBroadcastChatInfo_Response)
  SharedDtor();
}

void CBroadcast_GetBroadcastChatInfo_Response::SharedDtor() {
  view_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  view_url_template_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CBroadcast_GetBroadcastChatInfo_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CBroadcast_GetBroadcastChatInfo_Response::descriptor() {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CBroadcast_GetBroadcastChatInfo_Response& CBroadcast_GetBroadcastChatInfo_Response::default_instance() {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CBroadcast_GetBroadcastChatInfo_Response* CBroadcast_GetBroadcastChatInfo_Response::New(::google::protobuf::Arena* arena) const {
  CBroadcast_GetBroadcastChatInfo_Response* n = new CBroadcast_GetBroadcastChatInfo_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CBroadcast_GetBroadcastChatInfo_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CBroadcast_GetBroadcastChatInfo_Response)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_view_url()) {
      GOOGLE_DCHECK(!view_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*view_url_.UnsafeRawStringPointer())->clear();
    }
    if (has_view_url_template()) {
      GOOGLE_DCHECK(!view_url_template_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*view_url_template_.UnsafeRawStringPointer())->clear();
    }
  }
  chat_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CBroadcast_GetBroadcastChatInfo_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CBroadcast_GetBroadcastChatInfo_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 chat_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_chat_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &chat_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string view_url = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_view_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->view_url().data(), this->view_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CBroadcast_GetBroadcastChatInfo_Response.view_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string view_url_template = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_view_url_template()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->view_url_template().data(), this->view_url_template().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CBroadcast_GetBroadcastChatInfo_Response.view_url_template");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CBroadcast_GetBroadcastChatInfo_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CBroadcast_GetBroadcastChatInfo_Response)
  return false;
#undef DO_
}

void CBroadcast_GetBroadcastChatInfo_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CBroadcast_GetBroadcastChatInfo_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 chat_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->chat_id(), output);
  }

  // optional string view_url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->view_url().data(), this->view_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CBroadcast_GetBroadcastChatInfo_Response.view_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->view_url(), output);
  }

  // optional string view_url_template = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->view_url_template().data(), this->view_url_template().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CBroadcast_GetBroadcastChatInfo_Response.view_url_template");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->view_url_template(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CBroadcast_GetBroadcastChatInfo_Response)
}

::google::protobuf::uint8* CBroadcast_GetBroadcastChatInfo_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CBroadcast_GetBroadcastChatInfo_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 chat_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->chat_id(), target);
  }

  // optional string view_url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->view_url().data(), this->view_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CBroadcast_GetBroadcastChatInfo_Response.view_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->view_url(), target);
  }

  // optional string view_url_template = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->view_url_template().data(), this->view_url_template().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CBroadcast_GetBroadcastChatInfo_Response.view_url_template");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->view_url_template(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CBroadcast_GetBroadcastChatInfo_Response)
  return target;
}

size_t CBroadcast_GetBroadcastChatInfo_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CBroadcast_GetBroadcastChatInfo_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string view_url = 2;
    if (has_view_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->view_url());
    }

    // optional string view_url_template = 3;
    if (has_view_url_template()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->view_url_template());
    }

    // optional fixed64 chat_id = 1;
    if (has_chat_id()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CBroadcast_GetBroadcastChatInfo_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CBroadcast_GetBroadcastChatInfo_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_GetBroadcastChatInfo_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CBroadcast_GetBroadcastChatInfo_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CBroadcast_GetBroadcastChatInfo_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CBroadcast_GetBroadcastChatInfo_Response)
    MergeFrom(*source);
  }
}

void CBroadcast_GetBroadcastChatInfo_Response::MergeFrom(const CBroadcast_GetBroadcastChatInfo_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CBroadcast_GetBroadcastChatInfo_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_view_url();
      view_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.view_url_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_view_url_template();
      view_url_template_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.view_url_template_);
    }
    if (cached_has_bits & 0x00000004u) {
      chat_id_ = from.chat_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CBroadcast_GetBroadcastChatInfo_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CBroadcast_GetBroadcastChatInfo_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_GetBroadcastChatInfo_Response::CopyFrom(const CBroadcast_GetBroadcastChatInfo_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CBroadcast_GetBroadcastChatInfo_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_GetBroadcastChatInfo_Response::IsInitialized() const {
  return true;
}

void CBroadcast_GetBroadcastChatInfo_Response::Swap(CBroadcast_GetBroadcastChatInfo_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_GetBroadcastChatInfo_Response::InternalSwap(CBroadcast_GetBroadcastChatInfo_Response* other) {
  view_url_.Swap(&other->view_url_);
  view_url_template_.Swap(&other->view_url_template_);
  std::swap(chat_id_, other->chat_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CBroadcast_GetBroadcastChatInfo_Response::GetMetadata() const {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CBroadcast_GetBroadcastChatInfo_Response

// optional fixed64 chat_id = 1;
bool CBroadcast_GetBroadcastChatInfo_Response::has_chat_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CBroadcast_GetBroadcastChatInfo_Response::set_has_chat_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CBroadcast_GetBroadcastChatInfo_Response::clear_has_chat_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CBroadcast_GetBroadcastChatInfo_Response::clear_chat_id() {
  chat_id_ = GOOGLE_ULONGLONG(0);
  clear_has_chat_id();
}
::google::protobuf::uint64 CBroadcast_GetBroadcastChatInfo_Response::chat_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_GetBroadcastChatInfo_Response.chat_id)
  return chat_id_;
}
void CBroadcast_GetBroadcastChatInfo_Response::set_chat_id(::google::protobuf::uint64 value) {
  set_has_chat_id();
  chat_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_GetBroadcastChatInfo_Response.chat_id)
}

// optional string view_url = 2;
bool CBroadcast_GetBroadcastChatInfo_Response::has_view_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CBroadcast_GetBroadcastChatInfo_Response::set_has_view_url() {
  _has_bits_[0] |= 0x00000001u;
}
void CBroadcast_GetBroadcastChatInfo_Response::clear_has_view_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void CBroadcast_GetBroadcastChatInfo_Response::clear_view_url() {
  view_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_view_url();
}
const ::std::string& CBroadcast_GetBroadcastChatInfo_Response::view_url() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_GetBroadcastChatInfo_Response.view_url)
  return view_url_.GetNoArena();
}
void CBroadcast_GetBroadcastChatInfo_Response::set_view_url(const ::std::string& value) {
  set_has_view_url();
  view_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_GetBroadcastChatInfo_Response.view_url)
}
#if LANG_CXX11
void CBroadcast_GetBroadcastChatInfo_Response::set_view_url(::std::string&& value) {
  set_has_view_url();
  view_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CBroadcast_GetBroadcastChatInfo_Response.view_url)
}
#endif
void CBroadcast_GetBroadcastChatInfo_Response::set_view_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_view_url();
  view_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CBroadcast_GetBroadcastChatInfo_Response.view_url)
}
void CBroadcast_GetBroadcastChatInfo_Response::set_view_url(const char* value, size_t size) {
  set_has_view_url();
  view_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CBroadcast_GetBroadcastChatInfo_Response.view_url)
}
::std::string* CBroadcast_GetBroadcastChatInfo_Response::mutable_view_url() {
  set_has_view_url();
  // @@protoc_insertion_point(field_mutable:proto.steam.CBroadcast_GetBroadcastChatInfo_Response.view_url)
  return view_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CBroadcast_GetBroadcastChatInfo_Response::release_view_url() {
  // @@protoc_insertion_point(field_release:proto.steam.CBroadcast_GetBroadcastChatInfo_Response.view_url)
  clear_has_view_url();
  return view_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CBroadcast_GetBroadcastChatInfo_Response::set_allocated_view_url(::std::string* view_url) {
  if (view_url != NULL) {
    set_has_view_url();
  } else {
    clear_has_view_url();
  }
  view_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), view_url);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CBroadcast_GetBroadcastChatInfo_Response.view_url)
}

// optional string view_url_template = 3;
bool CBroadcast_GetBroadcastChatInfo_Response::has_view_url_template() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CBroadcast_GetBroadcastChatInfo_Response::set_has_view_url_template() {
  _has_bits_[0] |= 0x00000002u;
}
void CBroadcast_GetBroadcastChatInfo_Response::clear_has_view_url_template() {
  _has_bits_[0] &= ~0x00000002u;
}
void CBroadcast_GetBroadcastChatInfo_Response::clear_view_url_template() {
  view_url_template_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_view_url_template();
}
const ::std::string& CBroadcast_GetBroadcastChatInfo_Response::view_url_template() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_GetBroadcastChatInfo_Response.view_url_template)
  return view_url_template_.GetNoArena();
}
void CBroadcast_GetBroadcastChatInfo_Response::set_view_url_template(const ::std::string& value) {
  set_has_view_url_template();
  view_url_template_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_GetBroadcastChatInfo_Response.view_url_template)
}
#if LANG_CXX11
void CBroadcast_GetBroadcastChatInfo_Response::set_view_url_template(::std::string&& value) {
  set_has_view_url_template();
  view_url_template_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CBroadcast_GetBroadcastChatInfo_Response.view_url_template)
}
#endif
void CBroadcast_GetBroadcastChatInfo_Response::set_view_url_template(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_view_url_template();
  view_url_template_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CBroadcast_GetBroadcastChatInfo_Response.view_url_template)
}
void CBroadcast_GetBroadcastChatInfo_Response::set_view_url_template(const char* value, size_t size) {
  set_has_view_url_template();
  view_url_template_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CBroadcast_GetBroadcastChatInfo_Response.view_url_template)
}
::std::string* CBroadcast_GetBroadcastChatInfo_Response::mutable_view_url_template() {
  set_has_view_url_template();
  // @@protoc_insertion_point(field_mutable:proto.steam.CBroadcast_GetBroadcastChatInfo_Response.view_url_template)
  return view_url_template_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CBroadcast_GetBroadcastChatInfo_Response::release_view_url_template() {
  // @@protoc_insertion_point(field_release:proto.steam.CBroadcast_GetBroadcastChatInfo_Response.view_url_template)
  clear_has_view_url_template();
  return view_url_template_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CBroadcast_GetBroadcastChatInfo_Response::set_allocated_view_url_template(::std::string* view_url_template) {
  if (view_url_template != NULL) {
    set_has_view_url_template();
  } else {
    clear_has_view_url_template();
  }
  view_url_template_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), view_url_template);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CBroadcast_GetBroadcastChatInfo_Response.view_url_template)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_PostChatMessage_Request::kChatIdFieldNumber;
const int CBroadcast_PostChatMessage_Request::kMessageFieldNumber;
const int CBroadcast_PostChatMessage_Request::kInstanceIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_PostChatMessage_Request::CBroadcast_PostChatMessage_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CBroadcast_PostChatMessage_Request)
}
CBroadcast_PostChatMessage_Request::CBroadcast_PostChatMessage_Request(const CBroadcast_PostChatMessage_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_message()) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  ::memcpy(&chat_id_, &from.chat_id_,
    reinterpret_cast<char*>(&instance_id_) -
    reinterpret_cast<char*>(&chat_id_) + sizeof(instance_id_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CBroadcast_PostChatMessage_Request)
}

void CBroadcast_PostChatMessage_Request::SharedCtor() {
  _cached_size_ = 0;
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&chat_id_, 0, reinterpret_cast<char*>(&instance_id_) -
    reinterpret_cast<char*>(&chat_id_) + sizeof(instance_id_));
}

CBroadcast_PostChatMessage_Request::~CBroadcast_PostChatMessage_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CBroadcast_PostChatMessage_Request)
  SharedDtor();
}

void CBroadcast_PostChatMessage_Request::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CBroadcast_PostChatMessage_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CBroadcast_PostChatMessage_Request::descriptor() {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CBroadcast_PostChatMessage_Request& CBroadcast_PostChatMessage_Request::default_instance() {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CBroadcast_PostChatMessage_Request* CBroadcast_PostChatMessage_Request::New(::google::protobuf::Arena* arena) const {
  CBroadcast_PostChatMessage_Request* n = new CBroadcast_PostChatMessage_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CBroadcast_PostChatMessage_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CBroadcast_PostChatMessage_Request)
  if (has_message()) {
    GOOGLE_DCHECK(!message_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*message_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&chat_id_, 0, reinterpret_cast<char*>(&instance_id_) -
      reinterpret_cast<char*>(&chat_id_) + sizeof(instance_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CBroadcast_PostChatMessage_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CBroadcast_PostChatMessage_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 chat_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_chat_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &chat_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string message = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CBroadcast_PostChatMessage_Request.message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 instance_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_instance_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &instance_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CBroadcast_PostChatMessage_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CBroadcast_PostChatMessage_Request)
  return false;
#undef DO_
}

void CBroadcast_PostChatMessage_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CBroadcast_PostChatMessage_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 chat_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->chat_id(), output);
  }

  // optional string message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CBroadcast_PostChatMessage_Request.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  // optional uint32 instance_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->instance_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CBroadcast_PostChatMessage_Request)
}

::google::protobuf::uint8* CBroadcast_PostChatMessage_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CBroadcast_PostChatMessage_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 chat_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->chat_id(), target);
  }

  // optional string message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CBroadcast_PostChatMessage_Request.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  // optional uint32 instance_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->instance_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CBroadcast_PostChatMessage_Request)
  return target;
}

size_t CBroadcast_PostChatMessage_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CBroadcast_PostChatMessage_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional fixed64 chat_id = 1;
    if (has_chat_id()) {
      total_size += 1 + 8;
    }

    // optional uint32 instance_id = 3;
    if (has_instance_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->instance_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CBroadcast_PostChatMessage_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CBroadcast_PostChatMessage_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_PostChatMessage_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CBroadcast_PostChatMessage_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CBroadcast_PostChatMessage_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CBroadcast_PostChatMessage_Request)
    MergeFrom(*source);
  }
}

void CBroadcast_PostChatMessage_Request::MergeFrom(const CBroadcast_PostChatMessage_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CBroadcast_PostChatMessage_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_message();
      message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
    if (cached_has_bits & 0x00000002u) {
      chat_id_ = from.chat_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      instance_id_ = from.instance_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CBroadcast_PostChatMessage_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CBroadcast_PostChatMessage_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_PostChatMessage_Request::CopyFrom(const CBroadcast_PostChatMessage_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CBroadcast_PostChatMessage_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_PostChatMessage_Request::IsInitialized() const {
  return true;
}

void CBroadcast_PostChatMessage_Request::Swap(CBroadcast_PostChatMessage_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_PostChatMessage_Request::InternalSwap(CBroadcast_PostChatMessage_Request* other) {
  message_.Swap(&other->message_);
  std::swap(chat_id_, other->chat_id_);
  std::swap(instance_id_, other->instance_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CBroadcast_PostChatMessage_Request::GetMetadata() const {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CBroadcast_PostChatMessage_Request

// optional fixed64 chat_id = 1;
bool CBroadcast_PostChatMessage_Request::has_chat_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CBroadcast_PostChatMessage_Request::set_has_chat_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CBroadcast_PostChatMessage_Request::clear_has_chat_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CBroadcast_PostChatMessage_Request::clear_chat_id() {
  chat_id_ = GOOGLE_ULONGLONG(0);
  clear_has_chat_id();
}
::google::protobuf::uint64 CBroadcast_PostChatMessage_Request::chat_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_PostChatMessage_Request.chat_id)
  return chat_id_;
}
void CBroadcast_PostChatMessage_Request::set_chat_id(::google::protobuf::uint64 value) {
  set_has_chat_id();
  chat_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_PostChatMessage_Request.chat_id)
}

// optional string message = 2;
bool CBroadcast_PostChatMessage_Request::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CBroadcast_PostChatMessage_Request::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
void CBroadcast_PostChatMessage_Request::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
void CBroadcast_PostChatMessage_Request::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
const ::std::string& CBroadcast_PostChatMessage_Request::message() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_PostChatMessage_Request.message)
  return message_.GetNoArena();
}
void CBroadcast_PostChatMessage_Request::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_PostChatMessage_Request.message)
}
#if LANG_CXX11
void CBroadcast_PostChatMessage_Request::set_message(::std::string&& value) {
  set_has_message();
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CBroadcast_PostChatMessage_Request.message)
}
#endif
void CBroadcast_PostChatMessage_Request::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CBroadcast_PostChatMessage_Request.message)
}
void CBroadcast_PostChatMessage_Request::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CBroadcast_PostChatMessage_Request.message)
}
::std::string* CBroadcast_PostChatMessage_Request::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:proto.steam.CBroadcast_PostChatMessage_Request.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CBroadcast_PostChatMessage_Request::release_message() {
  // @@protoc_insertion_point(field_release:proto.steam.CBroadcast_PostChatMessage_Request.message)
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CBroadcast_PostChatMessage_Request::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CBroadcast_PostChatMessage_Request.message)
}

// optional uint32 instance_id = 3;
bool CBroadcast_PostChatMessage_Request::has_instance_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CBroadcast_PostChatMessage_Request::set_has_instance_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CBroadcast_PostChatMessage_Request::clear_has_instance_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CBroadcast_PostChatMessage_Request::clear_instance_id() {
  instance_id_ = 0u;
  clear_has_instance_id();
}
::google::protobuf::uint32 CBroadcast_PostChatMessage_Request::instance_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_PostChatMessage_Request.instance_id)
  return instance_id_;
}
void CBroadcast_PostChatMessage_Request::set_instance_id(::google::protobuf::uint32 value) {
  set_has_instance_id();
  instance_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_PostChatMessage_Request.instance_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_PostChatMessage_Response::kPersonaNameFieldNumber;
const int CBroadcast_PostChatMessage_Response::kInGameFieldNumber;
const int CBroadcast_PostChatMessage_Response::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_PostChatMessage_Response::CBroadcast_PostChatMessage_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CBroadcast_PostChatMessage_Response)
}
CBroadcast_PostChatMessage_Response::CBroadcast_PostChatMessage_Response(const CBroadcast_PostChatMessage_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  persona_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_persona_name()) {
    persona_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.persona_name_);
  }
  ::memcpy(&in_game_, &from.in_game_,
    reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&in_game_) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CBroadcast_PostChatMessage_Response)
}

void CBroadcast_PostChatMessage_Response::SharedCtor() {
  _cached_size_ = 0;
  persona_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&in_game_, 0, reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&in_game_) + sizeof(result_));
}

CBroadcast_PostChatMessage_Response::~CBroadcast_PostChatMessage_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CBroadcast_PostChatMessage_Response)
  SharedDtor();
}

void CBroadcast_PostChatMessage_Response::SharedDtor() {
  persona_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CBroadcast_PostChatMessage_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CBroadcast_PostChatMessage_Response::descriptor() {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CBroadcast_PostChatMessage_Response& CBroadcast_PostChatMessage_Response::default_instance() {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CBroadcast_PostChatMessage_Response* CBroadcast_PostChatMessage_Response::New(::google::protobuf::Arena* arena) const {
  CBroadcast_PostChatMessage_Response* n = new CBroadcast_PostChatMessage_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CBroadcast_PostChatMessage_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CBroadcast_PostChatMessage_Response)
  if (has_persona_name()) {
    GOOGLE_DCHECK(!persona_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*persona_name_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&in_game_, 0, reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&in_game_) + sizeof(result_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CBroadcast_PostChatMessage_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CBroadcast_PostChatMessage_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string persona_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_persona_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->persona_name().data(), this->persona_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CBroadcast_PostChatMessage_Response.persona_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool in_game = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_in_game();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &in_game_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 result = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CBroadcast_PostChatMessage_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CBroadcast_PostChatMessage_Response)
  return false;
#undef DO_
}

void CBroadcast_PostChatMessage_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CBroadcast_PostChatMessage_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string persona_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->persona_name().data(), this->persona_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CBroadcast_PostChatMessage_Response.persona_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->persona_name(), output);
  }

  // optional bool in_game = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->in_game(), output);
  }

  // optional int32 result = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CBroadcast_PostChatMessage_Response)
}

::google::protobuf::uint8* CBroadcast_PostChatMessage_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CBroadcast_PostChatMessage_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string persona_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->persona_name().data(), this->persona_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CBroadcast_PostChatMessage_Response.persona_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->persona_name(), target);
  }

  // optional bool in_game = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->in_game(), target);
  }

  // optional int32 result = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CBroadcast_PostChatMessage_Response)
  return target;
}

size_t CBroadcast_PostChatMessage_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CBroadcast_PostChatMessage_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string persona_name = 1;
    if (has_persona_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->persona_name());
    }

    // optional bool in_game = 2;
    if (has_in_game()) {
      total_size += 1 + 1;
    }

    // optional int32 result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CBroadcast_PostChatMessage_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CBroadcast_PostChatMessage_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_PostChatMessage_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CBroadcast_PostChatMessage_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CBroadcast_PostChatMessage_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CBroadcast_PostChatMessage_Response)
    MergeFrom(*source);
  }
}

void CBroadcast_PostChatMessage_Response::MergeFrom(const CBroadcast_PostChatMessage_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CBroadcast_PostChatMessage_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_persona_name();
      persona_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.persona_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      in_game_ = from.in_game_;
    }
    if (cached_has_bits & 0x00000004u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CBroadcast_PostChatMessage_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CBroadcast_PostChatMessage_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_PostChatMessage_Response::CopyFrom(const CBroadcast_PostChatMessage_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CBroadcast_PostChatMessage_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_PostChatMessage_Response::IsInitialized() const {
  return true;
}

void CBroadcast_PostChatMessage_Response::Swap(CBroadcast_PostChatMessage_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_PostChatMessage_Response::InternalSwap(CBroadcast_PostChatMessage_Response* other) {
  persona_name_.Swap(&other->persona_name_);
  std::swap(in_game_, other->in_game_);
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CBroadcast_PostChatMessage_Response::GetMetadata() const {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CBroadcast_PostChatMessage_Response

// optional string persona_name = 1;
bool CBroadcast_PostChatMessage_Response::has_persona_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CBroadcast_PostChatMessage_Response::set_has_persona_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CBroadcast_PostChatMessage_Response::clear_has_persona_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CBroadcast_PostChatMessage_Response::clear_persona_name() {
  persona_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_persona_name();
}
const ::std::string& CBroadcast_PostChatMessage_Response::persona_name() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_PostChatMessage_Response.persona_name)
  return persona_name_.GetNoArena();
}
void CBroadcast_PostChatMessage_Response::set_persona_name(const ::std::string& value) {
  set_has_persona_name();
  persona_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_PostChatMessage_Response.persona_name)
}
#if LANG_CXX11
void CBroadcast_PostChatMessage_Response::set_persona_name(::std::string&& value) {
  set_has_persona_name();
  persona_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CBroadcast_PostChatMessage_Response.persona_name)
}
#endif
void CBroadcast_PostChatMessage_Response::set_persona_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_persona_name();
  persona_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CBroadcast_PostChatMessage_Response.persona_name)
}
void CBroadcast_PostChatMessage_Response::set_persona_name(const char* value, size_t size) {
  set_has_persona_name();
  persona_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CBroadcast_PostChatMessage_Response.persona_name)
}
::std::string* CBroadcast_PostChatMessage_Response::mutable_persona_name() {
  set_has_persona_name();
  // @@protoc_insertion_point(field_mutable:proto.steam.CBroadcast_PostChatMessage_Response.persona_name)
  return persona_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CBroadcast_PostChatMessage_Response::release_persona_name() {
  // @@protoc_insertion_point(field_release:proto.steam.CBroadcast_PostChatMessage_Response.persona_name)
  clear_has_persona_name();
  return persona_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CBroadcast_PostChatMessage_Response::set_allocated_persona_name(::std::string* persona_name) {
  if (persona_name != NULL) {
    set_has_persona_name();
  } else {
    clear_has_persona_name();
  }
  persona_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), persona_name);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CBroadcast_PostChatMessage_Response.persona_name)
}

// optional bool in_game = 2;
bool CBroadcast_PostChatMessage_Response::has_in_game() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CBroadcast_PostChatMessage_Response::set_has_in_game() {
  _has_bits_[0] |= 0x00000002u;
}
void CBroadcast_PostChatMessage_Response::clear_has_in_game() {
  _has_bits_[0] &= ~0x00000002u;
}
void CBroadcast_PostChatMessage_Response::clear_in_game() {
  in_game_ = false;
  clear_has_in_game();
}
bool CBroadcast_PostChatMessage_Response::in_game() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_PostChatMessage_Response.in_game)
  return in_game_;
}
void CBroadcast_PostChatMessage_Response::set_in_game(bool value) {
  set_has_in_game();
  in_game_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_PostChatMessage_Response.in_game)
}

// optional int32 result = 3;
bool CBroadcast_PostChatMessage_Response::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CBroadcast_PostChatMessage_Response::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
void CBroadcast_PostChatMessage_Response::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
void CBroadcast_PostChatMessage_Response::clear_result() {
  result_ = 0;
  clear_has_result();
}
::google::protobuf::int32 CBroadcast_PostChatMessage_Response::result() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_PostChatMessage_Response.result)
  return result_;
}
void CBroadcast_PostChatMessage_Response::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_PostChatMessage_Response.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_MuteBroadcastChatUser_Request::kChatIdFieldNumber;
const int CBroadcast_MuteBroadcastChatUser_Request::kUserSteamidFieldNumber;
const int CBroadcast_MuteBroadcastChatUser_Request::kMutedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_MuteBroadcastChatUser_Request::CBroadcast_MuteBroadcastChatUser_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CBroadcast_MuteBroadcastChatUser_Request)
}
CBroadcast_MuteBroadcastChatUser_Request::CBroadcast_MuteBroadcastChatUser_Request(const CBroadcast_MuteBroadcastChatUser_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&chat_id_, &from.chat_id_,
    reinterpret_cast<char*>(&muted_) -
    reinterpret_cast<char*>(&chat_id_) + sizeof(muted_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CBroadcast_MuteBroadcastChatUser_Request)
}

void CBroadcast_MuteBroadcastChatUser_Request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&chat_id_, 0, reinterpret_cast<char*>(&muted_) -
    reinterpret_cast<char*>(&chat_id_) + sizeof(muted_));
}

CBroadcast_MuteBroadcastChatUser_Request::~CBroadcast_MuteBroadcastChatUser_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CBroadcast_MuteBroadcastChatUser_Request)
  SharedDtor();
}

void CBroadcast_MuteBroadcastChatUser_Request::SharedDtor() {
}

void CBroadcast_MuteBroadcastChatUser_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CBroadcast_MuteBroadcastChatUser_Request::descriptor() {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CBroadcast_MuteBroadcastChatUser_Request& CBroadcast_MuteBroadcastChatUser_Request::default_instance() {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CBroadcast_MuteBroadcastChatUser_Request* CBroadcast_MuteBroadcastChatUser_Request::New(::google::protobuf::Arena* arena) const {
  CBroadcast_MuteBroadcastChatUser_Request* n = new CBroadcast_MuteBroadcastChatUser_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CBroadcast_MuteBroadcastChatUser_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CBroadcast_MuteBroadcastChatUser_Request)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&chat_id_, 0, reinterpret_cast<char*>(&muted_) -
      reinterpret_cast<char*>(&chat_id_) + sizeof(muted_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CBroadcast_MuteBroadcastChatUser_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CBroadcast_MuteBroadcastChatUser_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 chat_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_chat_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &chat_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 user_steamid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_user_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &user_steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool muted = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_muted();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &muted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CBroadcast_MuteBroadcastChatUser_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CBroadcast_MuteBroadcastChatUser_Request)
  return false;
#undef DO_
}

void CBroadcast_MuteBroadcastChatUser_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CBroadcast_MuteBroadcastChatUser_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 chat_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->chat_id(), output);
  }

  // optional fixed64 user_steamid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->user_steamid(), output);
  }

  // optional bool muted = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->muted(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CBroadcast_MuteBroadcastChatUser_Request)
}

::google::protobuf::uint8* CBroadcast_MuteBroadcastChatUser_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CBroadcast_MuteBroadcastChatUser_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 chat_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->chat_id(), target);
  }

  // optional fixed64 user_steamid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->user_steamid(), target);
  }

  // optional bool muted = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->muted(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CBroadcast_MuteBroadcastChatUser_Request)
  return target;
}

size_t CBroadcast_MuteBroadcastChatUser_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CBroadcast_MuteBroadcastChatUser_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional fixed64 chat_id = 1;
    if (has_chat_id()) {
      total_size += 1 + 8;
    }

    // optional fixed64 user_steamid = 2;
    if (has_user_steamid()) {
      total_size += 1 + 8;
    }

    // optional bool muted = 3;
    if (has_muted()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CBroadcast_MuteBroadcastChatUser_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CBroadcast_MuteBroadcastChatUser_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_MuteBroadcastChatUser_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CBroadcast_MuteBroadcastChatUser_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CBroadcast_MuteBroadcastChatUser_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CBroadcast_MuteBroadcastChatUser_Request)
    MergeFrom(*source);
  }
}

void CBroadcast_MuteBroadcastChatUser_Request::MergeFrom(const CBroadcast_MuteBroadcastChatUser_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CBroadcast_MuteBroadcastChatUser_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      chat_id_ = from.chat_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      user_steamid_ = from.user_steamid_;
    }
    if (cached_has_bits & 0x00000004u) {
      muted_ = from.muted_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CBroadcast_MuteBroadcastChatUser_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CBroadcast_MuteBroadcastChatUser_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_MuteBroadcastChatUser_Request::CopyFrom(const CBroadcast_MuteBroadcastChatUser_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CBroadcast_MuteBroadcastChatUser_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_MuteBroadcastChatUser_Request::IsInitialized() const {
  return true;
}

void CBroadcast_MuteBroadcastChatUser_Request::Swap(CBroadcast_MuteBroadcastChatUser_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_MuteBroadcastChatUser_Request::InternalSwap(CBroadcast_MuteBroadcastChatUser_Request* other) {
  std::swap(chat_id_, other->chat_id_);
  std::swap(user_steamid_, other->user_steamid_);
  std::swap(muted_, other->muted_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CBroadcast_MuteBroadcastChatUser_Request::GetMetadata() const {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CBroadcast_MuteBroadcastChatUser_Request

// optional fixed64 chat_id = 1;
bool CBroadcast_MuteBroadcastChatUser_Request::has_chat_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CBroadcast_MuteBroadcastChatUser_Request::set_has_chat_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CBroadcast_MuteBroadcastChatUser_Request::clear_has_chat_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CBroadcast_MuteBroadcastChatUser_Request::clear_chat_id() {
  chat_id_ = GOOGLE_ULONGLONG(0);
  clear_has_chat_id();
}
::google::protobuf::uint64 CBroadcast_MuteBroadcastChatUser_Request::chat_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_MuteBroadcastChatUser_Request.chat_id)
  return chat_id_;
}
void CBroadcast_MuteBroadcastChatUser_Request::set_chat_id(::google::protobuf::uint64 value) {
  set_has_chat_id();
  chat_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_MuteBroadcastChatUser_Request.chat_id)
}

// optional fixed64 user_steamid = 2;
bool CBroadcast_MuteBroadcastChatUser_Request::has_user_steamid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CBroadcast_MuteBroadcastChatUser_Request::set_has_user_steamid() {
  _has_bits_[0] |= 0x00000002u;
}
void CBroadcast_MuteBroadcastChatUser_Request::clear_has_user_steamid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CBroadcast_MuteBroadcastChatUser_Request::clear_user_steamid() {
  user_steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_user_steamid();
}
::google::protobuf::uint64 CBroadcast_MuteBroadcastChatUser_Request::user_steamid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_MuteBroadcastChatUser_Request.user_steamid)
  return user_steamid_;
}
void CBroadcast_MuteBroadcastChatUser_Request::set_user_steamid(::google::protobuf::uint64 value) {
  set_has_user_steamid();
  user_steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_MuteBroadcastChatUser_Request.user_steamid)
}

// optional bool muted = 3;
bool CBroadcast_MuteBroadcastChatUser_Request::has_muted() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CBroadcast_MuteBroadcastChatUser_Request::set_has_muted() {
  _has_bits_[0] |= 0x00000004u;
}
void CBroadcast_MuteBroadcastChatUser_Request::clear_has_muted() {
  _has_bits_[0] &= ~0x00000004u;
}
void CBroadcast_MuteBroadcastChatUser_Request::clear_muted() {
  muted_ = false;
  clear_has_muted();
}
bool CBroadcast_MuteBroadcastChatUser_Request::muted() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_MuteBroadcastChatUser_Request.muted)
  return muted_;
}
void CBroadcast_MuteBroadcastChatUser_Request::set_muted(bool value) {
  set_has_muted();
  muted_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_MuteBroadcastChatUser_Request.muted)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_MuteBroadcastChatUser_Response::CBroadcast_MuteBroadcastChatUser_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CBroadcast_MuteBroadcastChatUser_Response)
}
CBroadcast_MuteBroadcastChatUser_Response::CBroadcast_MuteBroadcastChatUser_Response(const CBroadcast_MuteBroadcastChatUser_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CBroadcast_MuteBroadcastChatUser_Response)
}

void CBroadcast_MuteBroadcastChatUser_Response::SharedCtor() {
  _cached_size_ = 0;
}

CBroadcast_MuteBroadcastChatUser_Response::~CBroadcast_MuteBroadcastChatUser_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CBroadcast_MuteBroadcastChatUser_Response)
  SharedDtor();
}

void CBroadcast_MuteBroadcastChatUser_Response::SharedDtor() {
}

void CBroadcast_MuteBroadcastChatUser_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CBroadcast_MuteBroadcastChatUser_Response::descriptor() {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CBroadcast_MuteBroadcastChatUser_Response& CBroadcast_MuteBroadcastChatUser_Response::default_instance() {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CBroadcast_MuteBroadcastChatUser_Response* CBroadcast_MuteBroadcastChatUser_Response::New(::google::protobuf::Arena* arena) const {
  CBroadcast_MuteBroadcastChatUser_Response* n = new CBroadcast_MuteBroadcastChatUser_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CBroadcast_MuteBroadcastChatUser_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CBroadcast_MuteBroadcastChatUser_Response)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CBroadcast_MuteBroadcastChatUser_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CBroadcast_MuteBroadcastChatUser_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CBroadcast_MuteBroadcastChatUser_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CBroadcast_MuteBroadcastChatUser_Response)
  return false;
#undef DO_
}

void CBroadcast_MuteBroadcastChatUser_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CBroadcast_MuteBroadcastChatUser_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CBroadcast_MuteBroadcastChatUser_Response)
}

::google::protobuf::uint8* CBroadcast_MuteBroadcastChatUser_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CBroadcast_MuteBroadcastChatUser_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CBroadcast_MuteBroadcastChatUser_Response)
  return target;
}

size_t CBroadcast_MuteBroadcastChatUser_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CBroadcast_MuteBroadcastChatUser_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CBroadcast_MuteBroadcastChatUser_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CBroadcast_MuteBroadcastChatUser_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_MuteBroadcastChatUser_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CBroadcast_MuteBroadcastChatUser_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CBroadcast_MuteBroadcastChatUser_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CBroadcast_MuteBroadcastChatUser_Response)
    MergeFrom(*source);
  }
}

void CBroadcast_MuteBroadcastChatUser_Response::MergeFrom(const CBroadcast_MuteBroadcastChatUser_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CBroadcast_MuteBroadcastChatUser_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CBroadcast_MuteBroadcastChatUser_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CBroadcast_MuteBroadcastChatUser_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_MuteBroadcastChatUser_Response::CopyFrom(const CBroadcast_MuteBroadcastChatUser_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CBroadcast_MuteBroadcastChatUser_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_MuteBroadcastChatUser_Response::IsInitialized() const {
  return true;
}

void CBroadcast_MuteBroadcastChatUser_Response::Swap(CBroadcast_MuteBroadcastChatUser_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_MuteBroadcastChatUser_Response::InternalSwap(CBroadcast_MuteBroadcastChatUser_Response* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CBroadcast_MuteBroadcastChatUser_Response::GetMetadata() const {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CBroadcast_MuteBroadcastChatUser_Response

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_RemoveUserChatText_Request::kChatIdFieldNumber;
const int CBroadcast_RemoveUserChatText_Request::kUserSteamidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_RemoveUserChatText_Request::CBroadcast_RemoveUserChatText_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CBroadcast_RemoveUserChatText_Request)
}
CBroadcast_RemoveUserChatText_Request::CBroadcast_RemoveUserChatText_Request(const CBroadcast_RemoveUserChatText_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&chat_id_, &from.chat_id_,
    reinterpret_cast<char*>(&user_steamid_) -
    reinterpret_cast<char*>(&chat_id_) + sizeof(user_steamid_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CBroadcast_RemoveUserChatText_Request)
}

void CBroadcast_RemoveUserChatText_Request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&chat_id_, 0, reinterpret_cast<char*>(&user_steamid_) -
    reinterpret_cast<char*>(&chat_id_) + sizeof(user_steamid_));
}

CBroadcast_RemoveUserChatText_Request::~CBroadcast_RemoveUserChatText_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CBroadcast_RemoveUserChatText_Request)
  SharedDtor();
}

void CBroadcast_RemoveUserChatText_Request::SharedDtor() {
}

void CBroadcast_RemoveUserChatText_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CBroadcast_RemoveUserChatText_Request::descriptor() {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CBroadcast_RemoveUserChatText_Request& CBroadcast_RemoveUserChatText_Request::default_instance() {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CBroadcast_RemoveUserChatText_Request* CBroadcast_RemoveUserChatText_Request::New(::google::protobuf::Arena* arena) const {
  CBroadcast_RemoveUserChatText_Request* n = new CBroadcast_RemoveUserChatText_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CBroadcast_RemoveUserChatText_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CBroadcast_RemoveUserChatText_Request)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&chat_id_, 0, reinterpret_cast<char*>(&user_steamid_) -
      reinterpret_cast<char*>(&chat_id_) + sizeof(user_steamid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CBroadcast_RemoveUserChatText_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CBroadcast_RemoveUserChatText_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 chat_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_chat_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &chat_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 user_steamid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_user_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &user_steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CBroadcast_RemoveUserChatText_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CBroadcast_RemoveUserChatText_Request)
  return false;
#undef DO_
}

void CBroadcast_RemoveUserChatText_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CBroadcast_RemoveUserChatText_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 chat_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->chat_id(), output);
  }

  // optional fixed64 user_steamid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->user_steamid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CBroadcast_RemoveUserChatText_Request)
}

::google::protobuf::uint8* CBroadcast_RemoveUserChatText_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CBroadcast_RemoveUserChatText_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 chat_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->chat_id(), target);
  }

  // optional fixed64 user_steamid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->user_steamid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CBroadcast_RemoveUserChatText_Request)
  return target;
}

size_t CBroadcast_RemoveUserChatText_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CBroadcast_RemoveUserChatText_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional fixed64 chat_id = 1;
    if (has_chat_id()) {
      total_size += 1 + 8;
    }

    // optional fixed64 user_steamid = 2;
    if (has_user_steamid()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CBroadcast_RemoveUserChatText_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CBroadcast_RemoveUserChatText_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_RemoveUserChatText_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CBroadcast_RemoveUserChatText_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CBroadcast_RemoveUserChatText_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CBroadcast_RemoveUserChatText_Request)
    MergeFrom(*source);
  }
}

void CBroadcast_RemoveUserChatText_Request::MergeFrom(const CBroadcast_RemoveUserChatText_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CBroadcast_RemoveUserChatText_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      chat_id_ = from.chat_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      user_steamid_ = from.user_steamid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CBroadcast_RemoveUserChatText_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CBroadcast_RemoveUserChatText_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_RemoveUserChatText_Request::CopyFrom(const CBroadcast_RemoveUserChatText_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CBroadcast_RemoveUserChatText_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_RemoveUserChatText_Request::IsInitialized() const {
  return true;
}

void CBroadcast_RemoveUserChatText_Request::Swap(CBroadcast_RemoveUserChatText_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_RemoveUserChatText_Request::InternalSwap(CBroadcast_RemoveUserChatText_Request* other) {
  std::swap(chat_id_, other->chat_id_);
  std::swap(user_steamid_, other->user_steamid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CBroadcast_RemoveUserChatText_Request::GetMetadata() const {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CBroadcast_RemoveUserChatText_Request

// optional fixed64 chat_id = 1;
bool CBroadcast_RemoveUserChatText_Request::has_chat_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CBroadcast_RemoveUserChatText_Request::set_has_chat_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CBroadcast_RemoveUserChatText_Request::clear_has_chat_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CBroadcast_RemoveUserChatText_Request::clear_chat_id() {
  chat_id_ = GOOGLE_ULONGLONG(0);
  clear_has_chat_id();
}
::google::protobuf::uint64 CBroadcast_RemoveUserChatText_Request::chat_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_RemoveUserChatText_Request.chat_id)
  return chat_id_;
}
void CBroadcast_RemoveUserChatText_Request::set_chat_id(::google::protobuf::uint64 value) {
  set_has_chat_id();
  chat_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_RemoveUserChatText_Request.chat_id)
}

// optional fixed64 user_steamid = 2;
bool CBroadcast_RemoveUserChatText_Request::has_user_steamid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CBroadcast_RemoveUserChatText_Request::set_has_user_steamid() {
  _has_bits_[0] |= 0x00000002u;
}
void CBroadcast_RemoveUserChatText_Request::clear_has_user_steamid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CBroadcast_RemoveUserChatText_Request::clear_user_steamid() {
  user_steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_user_steamid();
}
::google::protobuf::uint64 CBroadcast_RemoveUserChatText_Request::user_steamid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_RemoveUserChatText_Request.user_steamid)
  return user_steamid_;
}
void CBroadcast_RemoveUserChatText_Request::set_user_steamid(::google::protobuf::uint64 value) {
  set_has_user_steamid();
  user_steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_RemoveUserChatText_Request.user_steamid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_RemoveUserChatText_Response::CBroadcast_RemoveUserChatText_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CBroadcast_RemoveUserChatText_Response)
}
CBroadcast_RemoveUserChatText_Response::CBroadcast_RemoveUserChatText_Response(const CBroadcast_RemoveUserChatText_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CBroadcast_RemoveUserChatText_Response)
}

void CBroadcast_RemoveUserChatText_Response::SharedCtor() {
  _cached_size_ = 0;
}

CBroadcast_RemoveUserChatText_Response::~CBroadcast_RemoveUserChatText_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CBroadcast_RemoveUserChatText_Response)
  SharedDtor();
}

void CBroadcast_RemoveUserChatText_Response::SharedDtor() {
}

void CBroadcast_RemoveUserChatText_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CBroadcast_RemoveUserChatText_Response::descriptor() {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CBroadcast_RemoveUserChatText_Response& CBroadcast_RemoveUserChatText_Response::default_instance() {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CBroadcast_RemoveUserChatText_Response* CBroadcast_RemoveUserChatText_Response::New(::google::protobuf::Arena* arena) const {
  CBroadcast_RemoveUserChatText_Response* n = new CBroadcast_RemoveUserChatText_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CBroadcast_RemoveUserChatText_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CBroadcast_RemoveUserChatText_Response)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CBroadcast_RemoveUserChatText_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CBroadcast_RemoveUserChatText_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CBroadcast_RemoveUserChatText_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CBroadcast_RemoveUserChatText_Response)
  return false;
#undef DO_
}

void CBroadcast_RemoveUserChatText_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CBroadcast_RemoveUserChatText_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CBroadcast_RemoveUserChatText_Response)
}

::google::protobuf::uint8* CBroadcast_RemoveUserChatText_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CBroadcast_RemoveUserChatText_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CBroadcast_RemoveUserChatText_Response)
  return target;
}

size_t CBroadcast_RemoveUserChatText_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CBroadcast_RemoveUserChatText_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CBroadcast_RemoveUserChatText_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CBroadcast_RemoveUserChatText_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_RemoveUserChatText_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CBroadcast_RemoveUserChatText_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CBroadcast_RemoveUserChatText_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CBroadcast_RemoveUserChatText_Response)
    MergeFrom(*source);
  }
}

void CBroadcast_RemoveUserChatText_Response::MergeFrom(const CBroadcast_RemoveUserChatText_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CBroadcast_RemoveUserChatText_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CBroadcast_RemoveUserChatText_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CBroadcast_RemoveUserChatText_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_RemoveUserChatText_Response::CopyFrom(const CBroadcast_RemoveUserChatText_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CBroadcast_RemoveUserChatText_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_RemoveUserChatText_Response::IsInitialized() const {
  return true;
}

void CBroadcast_RemoveUserChatText_Response::Swap(CBroadcast_RemoveUserChatText_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_RemoveUserChatText_Response::InternalSwap(CBroadcast_RemoveUserChatText_Response* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CBroadcast_RemoveUserChatText_Response::GetMetadata() const {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CBroadcast_RemoveUserChatText_Response

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_GetBroadcastChatUserNames_Request::kChatIdFieldNumber;
const int CBroadcast_GetBroadcastChatUserNames_Request::kUserSteamidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_GetBroadcastChatUserNames_Request::CBroadcast_GetBroadcastChatUserNames_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CBroadcast_GetBroadcastChatUserNames_Request)
}
CBroadcast_GetBroadcastChatUserNames_Request::CBroadcast_GetBroadcastChatUserNames_Request(const CBroadcast_GetBroadcastChatUserNames_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      user_steamid_(from.user_steamid_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chat_id_ = from.chat_id_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CBroadcast_GetBroadcastChatUserNames_Request)
}

void CBroadcast_GetBroadcastChatUserNames_Request::SharedCtor() {
  _cached_size_ = 0;
  chat_id_ = GOOGLE_ULONGLONG(0);
}

CBroadcast_GetBroadcastChatUserNames_Request::~CBroadcast_GetBroadcastChatUserNames_Request() {
  // @@protoc_insertion_point(destructor:proto.steam.CBroadcast_GetBroadcastChatUserNames_Request)
  SharedDtor();
}

void CBroadcast_GetBroadcastChatUserNames_Request::SharedDtor() {
}

void CBroadcast_GetBroadcastChatUserNames_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CBroadcast_GetBroadcastChatUserNames_Request::descriptor() {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CBroadcast_GetBroadcastChatUserNames_Request& CBroadcast_GetBroadcastChatUserNames_Request::default_instance() {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CBroadcast_GetBroadcastChatUserNames_Request* CBroadcast_GetBroadcastChatUserNames_Request::New(::google::protobuf::Arena* arena) const {
  CBroadcast_GetBroadcastChatUserNames_Request* n = new CBroadcast_GetBroadcastChatUserNames_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CBroadcast_GetBroadcastChatUserNames_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CBroadcast_GetBroadcastChatUserNames_Request)
  user_steamid_.Clear();
  chat_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CBroadcast_GetBroadcastChatUserNames_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CBroadcast_GetBroadcastChatUserNames_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 chat_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_chat_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &chat_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated fixed64 user_steamid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 17u, input, this->mutable_user_steamid())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_user_steamid())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CBroadcast_GetBroadcastChatUserNames_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CBroadcast_GetBroadcastChatUserNames_Request)
  return false;
#undef DO_
}

void CBroadcast_GetBroadcastChatUserNames_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CBroadcast_GetBroadcastChatUserNames_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 chat_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->chat_id(), output);
  }

  // repeated fixed64 user_steamid = 2;
  for (int i = 0, n = this->user_steamid_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      2, this->user_steamid(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CBroadcast_GetBroadcastChatUserNames_Request)
}

::google::protobuf::uint8* CBroadcast_GetBroadcastChatUserNames_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CBroadcast_GetBroadcastChatUserNames_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 chat_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->chat_id(), target);
  }

  // repeated fixed64 user_steamid = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFixed64ToArray(2, this->user_steamid_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CBroadcast_GetBroadcastChatUserNames_Request)
  return target;
}

size_t CBroadcast_GetBroadcastChatUserNames_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CBroadcast_GetBroadcastChatUserNames_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated fixed64 user_steamid = 2;
  {
    unsigned int count = this->user_steamid_size();
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->user_steamid_size());
    total_size += data_size;
  }

  // optional fixed64 chat_id = 1;
  if (has_chat_id()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CBroadcast_GetBroadcastChatUserNames_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CBroadcast_GetBroadcastChatUserNames_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_GetBroadcastChatUserNames_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CBroadcast_GetBroadcastChatUserNames_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CBroadcast_GetBroadcastChatUserNames_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CBroadcast_GetBroadcastChatUserNames_Request)
    MergeFrom(*source);
  }
}

void CBroadcast_GetBroadcastChatUserNames_Request::MergeFrom(const CBroadcast_GetBroadcastChatUserNames_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CBroadcast_GetBroadcastChatUserNames_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  user_steamid_.MergeFrom(from.user_steamid_);
  if (from.has_chat_id()) {
    set_chat_id(from.chat_id());
  }
}

void CBroadcast_GetBroadcastChatUserNames_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CBroadcast_GetBroadcastChatUserNames_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_GetBroadcastChatUserNames_Request::CopyFrom(const CBroadcast_GetBroadcastChatUserNames_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CBroadcast_GetBroadcastChatUserNames_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_GetBroadcastChatUserNames_Request::IsInitialized() const {
  return true;
}

void CBroadcast_GetBroadcastChatUserNames_Request::Swap(CBroadcast_GetBroadcastChatUserNames_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_GetBroadcastChatUserNames_Request::InternalSwap(CBroadcast_GetBroadcastChatUserNames_Request* other) {
  user_steamid_.InternalSwap(&other->user_steamid_);
  std::swap(chat_id_, other->chat_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CBroadcast_GetBroadcastChatUserNames_Request::GetMetadata() const {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CBroadcast_GetBroadcastChatUserNames_Request

// optional fixed64 chat_id = 1;
bool CBroadcast_GetBroadcastChatUserNames_Request::has_chat_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CBroadcast_GetBroadcastChatUserNames_Request::set_has_chat_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CBroadcast_GetBroadcastChatUserNames_Request::clear_has_chat_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CBroadcast_GetBroadcastChatUserNames_Request::clear_chat_id() {
  chat_id_ = GOOGLE_ULONGLONG(0);
  clear_has_chat_id();
}
::google::protobuf::uint64 CBroadcast_GetBroadcastChatUserNames_Request::chat_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_GetBroadcastChatUserNames_Request.chat_id)
  return chat_id_;
}
void CBroadcast_GetBroadcastChatUserNames_Request::set_chat_id(::google::protobuf::uint64 value) {
  set_has_chat_id();
  chat_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_GetBroadcastChatUserNames_Request.chat_id)
}

// repeated fixed64 user_steamid = 2;
int CBroadcast_GetBroadcastChatUserNames_Request::user_steamid_size() const {
  return user_steamid_.size();
}
void CBroadcast_GetBroadcastChatUserNames_Request::clear_user_steamid() {
  user_steamid_.Clear();
}
::google::protobuf::uint64 CBroadcast_GetBroadcastChatUserNames_Request::user_steamid(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_GetBroadcastChatUserNames_Request.user_steamid)
  return user_steamid_.Get(index);
}
void CBroadcast_GetBroadcastChatUserNames_Request::set_user_steamid(int index, ::google::protobuf::uint64 value) {
  user_steamid_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_GetBroadcastChatUserNames_Request.user_steamid)
}
void CBroadcast_GetBroadcastChatUserNames_Request::add_user_steamid(::google::protobuf::uint64 value) {
  user_steamid_.Add(value);
  // @@protoc_insertion_point(field_add:proto.steam.CBroadcast_GetBroadcastChatUserNames_Request.user_steamid)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CBroadcast_GetBroadcastChatUserNames_Request::user_steamid() const {
  // @@protoc_insertion_point(field_list:proto.steam.CBroadcast_GetBroadcastChatUserNames_Request.user_steamid)
  return user_steamid_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CBroadcast_GetBroadcastChatUserNames_Request::mutable_user_steamid() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CBroadcast_GetBroadcastChatUserNames_Request.user_steamid)
  return &user_steamid_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::kSteamIdFieldNumber;
const int CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::kPersonaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::CBroadcast_GetBroadcastChatUserNames_Response_PersonaName()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.PersonaName)
}
CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::CBroadcast_GetBroadcastChatUserNames_Response_PersonaName(const CBroadcast_GetBroadcastChatUserNames_Response_PersonaName& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  persona_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_persona()) {
    persona_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.persona_);
  }
  steam_id_ = from.steam_id_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.PersonaName)
}

void CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::SharedCtor() {
  _cached_size_ = 0;
  persona_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  steam_id_ = GOOGLE_ULONGLONG(0);
}

CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::~CBroadcast_GetBroadcastChatUserNames_Response_PersonaName() {
  // @@protoc_insertion_point(destructor:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.PersonaName)
  SharedDtor();
}

void CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::SharedDtor() {
  persona_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::descriptor() {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CBroadcast_GetBroadcastChatUserNames_Response_PersonaName& CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::default_instance() {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CBroadcast_GetBroadcastChatUserNames_Response_PersonaName* CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::New(::google::protobuf::Arena* arena) const {
  CBroadcast_GetBroadcastChatUserNames_Response_PersonaName* n = new CBroadcast_GetBroadcastChatUserNames_Response_PersonaName;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.PersonaName)
  if (has_persona()) {
    GOOGLE_DCHECK(!persona_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*persona_.UnsafeRawStringPointer())->clear();
  }
  steam_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.PersonaName)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_steam_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string persona = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_persona()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->persona().data(), this->persona().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.PersonaName.persona");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.PersonaName)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.PersonaName)
  return false;
#undef DO_
}

void CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.PersonaName)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }

  // optional string persona = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->persona().data(), this->persona().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.PersonaName.persona");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->persona(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.PersonaName)
}

::google::protobuf::uint8* CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.PersonaName)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id(), target);
  }

  // optional string persona = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->persona().data(), this->persona().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.PersonaName.persona");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->persona(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.PersonaName)
  return target;
}

size_t CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.PersonaName)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string persona = 2;
    if (has_persona()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->persona());
    }

    // optional fixed64 steam_id = 1;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.PersonaName)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_GetBroadcastChatUserNames_Response_PersonaName* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CBroadcast_GetBroadcastChatUserNames_Response_PersonaName>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.PersonaName)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.PersonaName)
    MergeFrom(*source);
  }
}

void CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::MergeFrom(const CBroadcast_GetBroadcastChatUserNames_Response_PersonaName& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.PersonaName)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_persona();
      persona_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.persona_);
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_ = from.steam_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.PersonaName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::CopyFrom(const CBroadcast_GetBroadcastChatUserNames_Response_PersonaName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.PersonaName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::IsInitialized() const {
  return true;
}

void CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::Swap(CBroadcast_GetBroadcastChatUserNames_Response_PersonaName* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::InternalSwap(CBroadcast_GetBroadcastChatUserNames_Response_PersonaName* other) {
  persona_.Swap(&other->persona_);
  std::swap(steam_id_, other->steam_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::GetMetadata() const {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CBroadcast_GetBroadcastChatUserNames_Response_PersonaName

// optional fixed64 steam_id = 1;
bool CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::has_steam_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::set_has_steam_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::clear_has_steam_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::clear_steam_id() {
  steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id();
}
::google::protobuf::uint64 CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::steam_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.PersonaName.steam_id)
  return steam_id_;
}
void CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::set_steam_id(::google::protobuf::uint64 value) {
  set_has_steam_id();
  steam_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.PersonaName.steam_id)
}

// optional string persona = 2;
bool CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::has_persona() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::set_has_persona() {
  _has_bits_[0] |= 0x00000001u;
}
void CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::clear_has_persona() {
  _has_bits_[0] &= ~0x00000001u;
}
void CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::clear_persona() {
  persona_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_persona();
}
const ::std::string& CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::persona() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.PersonaName.persona)
  return persona_.GetNoArena();
}
void CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::set_persona(const ::std::string& value) {
  set_has_persona();
  persona_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.PersonaName.persona)
}
#if LANG_CXX11
void CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::set_persona(::std::string&& value) {
  set_has_persona();
  persona_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.PersonaName.persona)
}
#endif
void CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::set_persona(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_persona();
  persona_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.PersonaName.persona)
}
void CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::set_persona(const char* value, size_t size) {
  set_has_persona();
  persona_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.PersonaName.persona)
}
::std::string* CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::mutable_persona() {
  set_has_persona();
  // @@protoc_insertion_point(field_mutable:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.PersonaName.persona)
  return persona_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::release_persona() {
  // @@protoc_insertion_point(field_release:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.PersonaName.persona)
  clear_has_persona();
  return persona_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CBroadcast_GetBroadcastChatUserNames_Response_PersonaName::set_allocated_persona(::std::string* persona) {
  if (persona != NULL) {
    set_has_persona();
  } else {
    clear_has_persona();
  }
  persona_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), persona);
  // @@protoc_insertion_point(field_set_allocated:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.PersonaName.persona)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_GetBroadcastChatUserNames_Response::kPersonaNamesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_GetBroadcastChatUserNames_Response::CBroadcast_GetBroadcastChatUserNames_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response)
}
CBroadcast_GetBroadcastChatUserNames_Response::CBroadcast_GetBroadcastChatUserNames_Response(const CBroadcast_GetBroadcastChatUserNames_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      persona_names_(from.persona_names_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response)
}

void CBroadcast_GetBroadcastChatUserNames_Response::SharedCtor() {
  _cached_size_ = 0;
}

CBroadcast_GetBroadcastChatUserNames_Response::~CBroadcast_GetBroadcastChatUserNames_Response() {
  // @@protoc_insertion_point(destructor:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response)
  SharedDtor();
}

void CBroadcast_GetBroadcastChatUserNames_Response::SharedDtor() {
}

void CBroadcast_GetBroadcastChatUserNames_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CBroadcast_GetBroadcastChatUserNames_Response::descriptor() {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CBroadcast_GetBroadcastChatUserNames_Response& CBroadcast_GetBroadcastChatUserNames_Response::default_instance() {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CBroadcast_GetBroadcastChatUserNames_Response* CBroadcast_GetBroadcastChatUserNames_Response::New(::google::protobuf::Arena* arena) const {
  CBroadcast_GetBroadcastChatUserNames_Response* n = new CBroadcast_GetBroadcastChatUserNames_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CBroadcast_GetBroadcastChatUserNames_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response)
  persona_names_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CBroadcast_GetBroadcastChatUserNames_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.PersonaName persona_names = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_persona_names()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response)
  return false;
#undef DO_
}

void CBroadcast_GetBroadcastChatUserNames_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.PersonaName persona_names = 1;
  for (unsigned int i = 0, n = this->persona_names_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->persona_names(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response)
}

::google::protobuf::uint8* CBroadcast_GetBroadcastChatUserNames_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.PersonaName persona_names = 1;
  for (unsigned int i = 0, n = this->persona_names_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->persona_names(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response)
  return target;
}

size_t CBroadcast_GetBroadcastChatUserNames_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.PersonaName persona_names = 1;
  {
    unsigned int count = this->persona_names_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->persona_names(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CBroadcast_GetBroadcastChatUserNames_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_GetBroadcastChatUserNames_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CBroadcast_GetBroadcastChatUserNames_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response)
    MergeFrom(*source);
  }
}

void CBroadcast_GetBroadcastChatUserNames_Response::MergeFrom(const CBroadcast_GetBroadcastChatUserNames_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  persona_names_.MergeFrom(from.persona_names_);
}

void CBroadcast_GetBroadcastChatUserNames_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_GetBroadcastChatUserNames_Response::CopyFrom(const CBroadcast_GetBroadcastChatUserNames_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_GetBroadcastChatUserNames_Response::IsInitialized() const {
  return true;
}

void CBroadcast_GetBroadcastChatUserNames_Response::Swap(CBroadcast_GetBroadcastChatUserNames_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_GetBroadcastChatUserNames_Response::InternalSwap(CBroadcast_GetBroadcastChatUserNames_Response* other) {
  persona_names_.InternalSwap(&other->persona_names_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CBroadcast_GetBroadcastChatUserNames_Response::GetMetadata() const {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CBroadcast_GetBroadcastChatUserNames_Response

// repeated .proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.PersonaName persona_names = 1;
int CBroadcast_GetBroadcastChatUserNames_Response::persona_names_size() const {
  return persona_names_.size();
}
void CBroadcast_GetBroadcastChatUserNames_Response::clear_persona_names() {
  persona_names_.Clear();
}
const ::proto::steam::CBroadcast_GetBroadcastChatUserNames_Response_PersonaName& CBroadcast_GetBroadcastChatUserNames_Response::persona_names(int index) const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.persona_names)
  return persona_names_.Get(index);
}
::proto::steam::CBroadcast_GetBroadcastChatUserNames_Response_PersonaName* CBroadcast_GetBroadcastChatUserNames_Response::mutable_persona_names(int index) {
  // @@protoc_insertion_point(field_mutable:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.persona_names)
  return persona_names_.Mutable(index);
}
::proto::steam::CBroadcast_GetBroadcastChatUserNames_Response_PersonaName* CBroadcast_GetBroadcastChatUserNames_Response::add_persona_names() {
  // @@protoc_insertion_point(field_add:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.persona_names)
  return persona_names_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::steam::CBroadcast_GetBroadcastChatUserNames_Response_PersonaName >*
CBroadcast_GetBroadcastChatUserNames_Response::mutable_persona_names() {
  // @@protoc_insertion_point(field_mutable_list:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.persona_names)
  return &persona_names_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::steam::CBroadcast_GetBroadcastChatUserNames_Response_PersonaName >&
CBroadcast_GetBroadcastChatUserNames_Response::persona_names() const {
  // @@protoc_insertion_point(field_list:proto.steam.CBroadcast_GetBroadcastChatUserNames_Response.persona_names)
  return persona_names_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_BroadcastViewerState_Notification::kSteamidFieldNumber;
const int CBroadcast_BroadcastViewerState_Notification::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_BroadcastViewerState_Notification::CBroadcast_BroadcastViewerState_Notification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CBroadcast_BroadcastViewerState_Notification)
}
CBroadcast_BroadcastViewerState_Notification::CBroadcast_BroadcastViewerState_Notification(const CBroadcast_BroadcastViewerState_Notification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&steamid_) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CBroadcast_BroadcastViewerState_Notification)
}

void CBroadcast_BroadcastViewerState_Notification::SharedCtor() {
  _cached_size_ = 0;
  steamid_ = GOOGLE_ULONGLONG(0);
  state_ = 1;
}

CBroadcast_BroadcastViewerState_Notification::~CBroadcast_BroadcastViewerState_Notification() {
  // @@protoc_insertion_point(destructor:proto.steam.CBroadcast_BroadcastViewerState_Notification)
  SharedDtor();
}

void CBroadcast_BroadcastViewerState_Notification::SharedDtor() {
}

void CBroadcast_BroadcastViewerState_Notification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CBroadcast_BroadcastViewerState_Notification::descriptor() {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CBroadcast_BroadcastViewerState_Notification& CBroadcast_BroadcastViewerState_Notification::default_instance() {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CBroadcast_BroadcastViewerState_Notification* CBroadcast_BroadcastViewerState_Notification::New(::google::protobuf::Arena* arena) const {
  CBroadcast_BroadcastViewerState_Notification* n = new CBroadcast_BroadcastViewerState_Notification;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CBroadcast_BroadcastViewerState_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CBroadcast_BroadcastViewerState_Notification)
  if (_has_bits_[0 / 32] & 3u) {
    steamid_ = GOOGLE_ULONGLONG(0);
    state_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CBroadcast_BroadcastViewerState_Notification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CBroadcast_BroadcastViewerState_Notification)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.steam.CBroadcast_BroadcastViewerState_Notification.EViewerState state = 2 [default = k_EViewerNeedsApproval];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::steam::CBroadcast_BroadcastViewerState_Notification_EViewerState_IsValid(value)) {
            set_state(static_cast< ::proto::steam::CBroadcast_BroadcastViewerState_Notification_EViewerState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CBroadcast_BroadcastViewerState_Notification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CBroadcast_BroadcastViewerState_Notification)
  return false;
#undef DO_
}

void CBroadcast_BroadcastViewerState_Notification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CBroadcast_BroadcastViewerState_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steamid(), output);
  }

  // optional .proto.steam.CBroadcast_BroadcastViewerState_Notification.EViewerState state = 2 [default = k_EViewerNeedsApproval];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CBroadcast_BroadcastViewerState_Notification)
}

::google::protobuf::uint8* CBroadcast_BroadcastViewerState_Notification::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CBroadcast_BroadcastViewerState_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steamid(), target);
  }

  // optional .proto.steam.CBroadcast_BroadcastViewerState_Notification.EViewerState state = 2 [default = k_EViewerNeedsApproval];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CBroadcast_BroadcastViewerState_Notification)
  return target;
}

size_t CBroadcast_BroadcastViewerState_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CBroadcast_BroadcastViewerState_Notification)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional fixed64 steamid = 1;
    if (has_steamid()) {
      total_size += 1 + 8;
    }

    // optional .proto.steam.CBroadcast_BroadcastViewerState_Notification.EViewerState state = 2 [default = k_EViewerNeedsApproval];
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CBroadcast_BroadcastViewerState_Notification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CBroadcast_BroadcastViewerState_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_BroadcastViewerState_Notification* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CBroadcast_BroadcastViewerState_Notification>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CBroadcast_BroadcastViewerState_Notification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CBroadcast_BroadcastViewerState_Notification)
    MergeFrom(*source);
  }
}

void CBroadcast_BroadcastViewerState_Notification::MergeFrom(const CBroadcast_BroadcastViewerState_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CBroadcast_BroadcastViewerState_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      state_ = from.state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CBroadcast_BroadcastViewerState_Notification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CBroadcast_BroadcastViewerState_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_BroadcastViewerState_Notification::CopyFrom(const CBroadcast_BroadcastViewerState_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CBroadcast_BroadcastViewerState_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_BroadcastViewerState_Notification::IsInitialized() const {
  return true;
}

void CBroadcast_BroadcastViewerState_Notification::Swap(CBroadcast_BroadcastViewerState_Notification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_BroadcastViewerState_Notification::InternalSwap(CBroadcast_BroadcastViewerState_Notification* other) {
  std::swap(steamid_, other->steamid_);
  std::swap(state_, other->state_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CBroadcast_BroadcastViewerState_Notification::GetMetadata() const {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CBroadcast_BroadcastViewerState_Notification

// optional fixed64 steamid = 1;
bool CBroadcast_BroadcastViewerState_Notification::has_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CBroadcast_BroadcastViewerState_Notification::set_has_steamid() {
  _has_bits_[0] |= 0x00000001u;
}
void CBroadcast_BroadcastViewerState_Notification::clear_has_steamid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CBroadcast_BroadcastViewerState_Notification::clear_steamid() {
  steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_steamid();
}
::google::protobuf::uint64 CBroadcast_BroadcastViewerState_Notification::steamid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_BroadcastViewerState_Notification.steamid)
  return steamid_;
}
void CBroadcast_BroadcastViewerState_Notification::set_steamid(::google::protobuf::uint64 value) {
  set_has_steamid();
  steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_BroadcastViewerState_Notification.steamid)
}

// optional .proto.steam.CBroadcast_BroadcastViewerState_Notification.EViewerState state = 2 [default = k_EViewerNeedsApproval];
bool CBroadcast_BroadcastViewerState_Notification::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CBroadcast_BroadcastViewerState_Notification::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
void CBroadcast_BroadcastViewerState_Notification::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
void CBroadcast_BroadcastViewerState_Notification::clear_state() {
  state_ = 1;
  clear_has_state();
}
::proto::steam::CBroadcast_BroadcastViewerState_Notification_EViewerState CBroadcast_BroadcastViewerState_Notification::state() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_BroadcastViewerState_Notification.state)
  return static_cast< ::proto::steam::CBroadcast_BroadcastViewerState_Notification_EViewerState >(state_);
}
void CBroadcast_BroadcastViewerState_Notification::set_state(::proto::steam::CBroadcast_BroadcastViewerState_Notification_EViewerState value) {
  assert(::proto::steam::CBroadcast_BroadcastViewerState_Notification_EViewerState_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_BroadcastViewerState_Notification.state)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_WaitingBroadcastViewer_Notification::kBroadcastIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_WaitingBroadcastViewer_Notification::CBroadcast_WaitingBroadcastViewer_Notification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CBroadcast_WaitingBroadcastViewer_Notification)
}
CBroadcast_WaitingBroadcastViewer_Notification::CBroadcast_WaitingBroadcastViewer_Notification(const CBroadcast_WaitingBroadcastViewer_Notification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  broadcast_id_ = from.broadcast_id_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CBroadcast_WaitingBroadcastViewer_Notification)
}

void CBroadcast_WaitingBroadcastViewer_Notification::SharedCtor() {
  _cached_size_ = 0;
  broadcast_id_ = GOOGLE_ULONGLONG(0);
}

CBroadcast_WaitingBroadcastViewer_Notification::~CBroadcast_WaitingBroadcastViewer_Notification() {
  // @@protoc_insertion_point(destructor:proto.steam.CBroadcast_WaitingBroadcastViewer_Notification)
  SharedDtor();
}

void CBroadcast_WaitingBroadcastViewer_Notification::SharedDtor() {
}

void CBroadcast_WaitingBroadcastViewer_Notification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CBroadcast_WaitingBroadcastViewer_Notification::descriptor() {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CBroadcast_WaitingBroadcastViewer_Notification& CBroadcast_WaitingBroadcastViewer_Notification::default_instance() {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CBroadcast_WaitingBroadcastViewer_Notification* CBroadcast_WaitingBroadcastViewer_Notification::New(::google::protobuf::Arena* arena) const {
  CBroadcast_WaitingBroadcastViewer_Notification* n = new CBroadcast_WaitingBroadcastViewer_Notification;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CBroadcast_WaitingBroadcastViewer_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CBroadcast_WaitingBroadcastViewer_Notification)
  broadcast_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CBroadcast_WaitingBroadcastViewer_Notification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CBroadcast_WaitingBroadcastViewer_Notification)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 broadcast_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_broadcast_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &broadcast_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CBroadcast_WaitingBroadcastViewer_Notification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CBroadcast_WaitingBroadcastViewer_Notification)
  return false;
#undef DO_
}

void CBroadcast_WaitingBroadcastViewer_Notification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CBroadcast_WaitingBroadcastViewer_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->broadcast_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CBroadcast_WaitingBroadcastViewer_Notification)
}

::google::protobuf::uint8* CBroadcast_WaitingBroadcastViewer_Notification::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CBroadcast_WaitingBroadcastViewer_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->broadcast_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CBroadcast_WaitingBroadcastViewer_Notification)
  return target;
}

size_t CBroadcast_WaitingBroadcastViewer_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CBroadcast_WaitingBroadcastViewer_Notification)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional fixed64 broadcast_id = 1;
  if (has_broadcast_id()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CBroadcast_WaitingBroadcastViewer_Notification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CBroadcast_WaitingBroadcastViewer_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_WaitingBroadcastViewer_Notification* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CBroadcast_WaitingBroadcastViewer_Notification>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CBroadcast_WaitingBroadcastViewer_Notification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CBroadcast_WaitingBroadcastViewer_Notification)
    MergeFrom(*source);
  }
}

void CBroadcast_WaitingBroadcastViewer_Notification::MergeFrom(const CBroadcast_WaitingBroadcastViewer_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CBroadcast_WaitingBroadcastViewer_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_broadcast_id()) {
    set_broadcast_id(from.broadcast_id());
  }
}

void CBroadcast_WaitingBroadcastViewer_Notification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CBroadcast_WaitingBroadcastViewer_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_WaitingBroadcastViewer_Notification::CopyFrom(const CBroadcast_WaitingBroadcastViewer_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CBroadcast_WaitingBroadcastViewer_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_WaitingBroadcastViewer_Notification::IsInitialized() const {
  return true;
}

void CBroadcast_WaitingBroadcastViewer_Notification::Swap(CBroadcast_WaitingBroadcastViewer_Notification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_WaitingBroadcastViewer_Notification::InternalSwap(CBroadcast_WaitingBroadcastViewer_Notification* other) {
  std::swap(broadcast_id_, other->broadcast_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CBroadcast_WaitingBroadcastViewer_Notification::GetMetadata() const {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CBroadcast_WaitingBroadcastViewer_Notification

// optional fixed64 broadcast_id = 1;
bool CBroadcast_WaitingBroadcastViewer_Notification::has_broadcast_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CBroadcast_WaitingBroadcastViewer_Notification::set_has_broadcast_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CBroadcast_WaitingBroadcastViewer_Notification::clear_has_broadcast_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CBroadcast_WaitingBroadcastViewer_Notification::clear_broadcast_id() {
  broadcast_id_ = GOOGLE_ULONGLONG(0);
  clear_has_broadcast_id();
}
::google::protobuf::uint64 CBroadcast_WaitingBroadcastViewer_Notification::broadcast_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_WaitingBroadcastViewer_Notification.broadcast_id)
  return broadcast_id_;
}
void CBroadcast_WaitingBroadcastViewer_Notification::set_broadcast_id(::google::protobuf::uint64 value) {
  set_has_broadcast_id();
  broadcast_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_WaitingBroadcastViewer_Notification.broadcast_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_StopBroadcastUpload_Notification::kBroadcastIdFieldNumber;
const int CBroadcast_StopBroadcastUpload_Notification::kBroadcastRelayIdFieldNumber;
const int CBroadcast_StopBroadcastUpload_Notification::kUploadResultFieldNumber;
const int CBroadcast_StopBroadcastUpload_Notification::kTooManyPoorUploadsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_StopBroadcastUpload_Notification::CBroadcast_StopBroadcastUpload_Notification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CBroadcast_StopBroadcastUpload_Notification)
}
CBroadcast_StopBroadcastUpload_Notification::CBroadcast_StopBroadcastUpload_Notification(const CBroadcast_StopBroadcastUpload_Notification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&broadcast_id_, &from.broadcast_id_,
    reinterpret_cast<char*>(&too_many_poor_uploads_) -
    reinterpret_cast<char*>(&broadcast_id_) + sizeof(too_many_poor_uploads_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CBroadcast_StopBroadcastUpload_Notification)
}

void CBroadcast_StopBroadcastUpload_Notification::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&broadcast_id_, 0, reinterpret_cast<char*>(&too_many_poor_uploads_) -
    reinterpret_cast<char*>(&broadcast_id_) + sizeof(too_many_poor_uploads_));
}

CBroadcast_StopBroadcastUpload_Notification::~CBroadcast_StopBroadcastUpload_Notification() {
  // @@protoc_insertion_point(destructor:proto.steam.CBroadcast_StopBroadcastUpload_Notification)
  SharedDtor();
}

void CBroadcast_StopBroadcastUpload_Notification::SharedDtor() {
}

void CBroadcast_StopBroadcastUpload_Notification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CBroadcast_StopBroadcastUpload_Notification::descriptor() {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CBroadcast_StopBroadcastUpload_Notification& CBroadcast_StopBroadcastUpload_Notification::default_instance() {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CBroadcast_StopBroadcastUpload_Notification* CBroadcast_StopBroadcastUpload_Notification::New(::google::protobuf::Arena* arena) const {
  CBroadcast_StopBroadcastUpload_Notification* n = new CBroadcast_StopBroadcastUpload_Notification;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CBroadcast_StopBroadcastUpload_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CBroadcast_StopBroadcastUpload_Notification)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&broadcast_id_, 0, reinterpret_cast<char*>(&too_many_poor_uploads_) -
      reinterpret_cast<char*>(&broadcast_id_) + sizeof(too_many_poor_uploads_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CBroadcast_StopBroadcastUpload_Notification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CBroadcast_StopBroadcastUpload_Notification)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 broadcast_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_broadcast_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &broadcast_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 broadcast_relay_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_broadcast_relay_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &broadcast_relay_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 upload_result = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_upload_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &upload_result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool too_many_poor_uploads = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_too_many_poor_uploads();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &too_many_poor_uploads_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CBroadcast_StopBroadcastUpload_Notification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CBroadcast_StopBroadcastUpload_Notification)
  return false;
#undef DO_
}

void CBroadcast_StopBroadcastUpload_Notification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CBroadcast_StopBroadcastUpload_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->broadcast_id(), output);
  }

  // optional fixed64 broadcast_relay_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->broadcast_relay_id(), output);
  }

  // optional uint32 upload_result = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->upload_result(), output);
  }

  // optional bool too_many_poor_uploads = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->too_many_poor_uploads(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CBroadcast_StopBroadcastUpload_Notification)
}

::google::protobuf::uint8* CBroadcast_StopBroadcastUpload_Notification::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CBroadcast_StopBroadcastUpload_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->broadcast_id(), target);
  }

  // optional fixed64 broadcast_relay_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->broadcast_relay_id(), target);
  }

  // optional uint32 upload_result = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->upload_result(), target);
  }

  // optional bool too_many_poor_uploads = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->too_many_poor_uploads(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CBroadcast_StopBroadcastUpload_Notification)
  return target;
}

size_t CBroadcast_StopBroadcastUpload_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CBroadcast_StopBroadcastUpload_Notification)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional fixed64 broadcast_id = 1;
    if (has_broadcast_id()) {
      total_size += 1 + 8;
    }

    // optional fixed64 broadcast_relay_id = 2;
    if (has_broadcast_relay_id()) {
      total_size += 1 + 8;
    }

    // optional uint32 upload_result = 3;
    if (has_upload_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->upload_result());
    }

    // optional bool too_many_poor_uploads = 4;
    if (has_too_many_poor_uploads()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CBroadcast_StopBroadcastUpload_Notification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CBroadcast_StopBroadcastUpload_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_StopBroadcastUpload_Notification* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CBroadcast_StopBroadcastUpload_Notification>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CBroadcast_StopBroadcastUpload_Notification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CBroadcast_StopBroadcastUpload_Notification)
    MergeFrom(*source);
  }
}

void CBroadcast_StopBroadcastUpload_Notification::MergeFrom(const CBroadcast_StopBroadcastUpload_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CBroadcast_StopBroadcastUpload_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      broadcast_id_ = from.broadcast_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      broadcast_relay_id_ = from.broadcast_relay_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      upload_result_ = from.upload_result_;
    }
    if (cached_has_bits & 0x00000008u) {
      too_many_poor_uploads_ = from.too_many_poor_uploads_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CBroadcast_StopBroadcastUpload_Notification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CBroadcast_StopBroadcastUpload_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_StopBroadcastUpload_Notification::CopyFrom(const CBroadcast_StopBroadcastUpload_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CBroadcast_StopBroadcastUpload_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_StopBroadcastUpload_Notification::IsInitialized() const {
  return true;
}

void CBroadcast_StopBroadcastUpload_Notification::Swap(CBroadcast_StopBroadcastUpload_Notification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_StopBroadcastUpload_Notification::InternalSwap(CBroadcast_StopBroadcastUpload_Notification* other) {
  std::swap(broadcast_id_, other->broadcast_id_);
  std::swap(broadcast_relay_id_, other->broadcast_relay_id_);
  std::swap(upload_result_, other->upload_result_);
  std::swap(too_many_poor_uploads_, other->too_many_poor_uploads_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CBroadcast_StopBroadcastUpload_Notification::GetMetadata() const {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CBroadcast_StopBroadcastUpload_Notification

// optional fixed64 broadcast_id = 1;
bool CBroadcast_StopBroadcastUpload_Notification::has_broadcast_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CBroadcast_StopBroadcastUpload_Notification::set_has_broadcast_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CBroadcast_StopBroadcastUpload_Notification::clear_has_broadcast_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CBroadcast_StopBroadcastUpload_Notification::clear_broadcast_id() {
  broadcast_id_ = GOOGLE_ULONGLONG(0);
  clear_has_broadcast_id();
}
::google::protobuf::uint64 CBroadcast_StopBroadcastUpload_Notification::broadcast_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_StopBroadcastUpload_Notification.broadcast_id)
  return broadcast_id_;
}
void CBroadcast_StopBroadcastUpload_Notification::set_broadcast_id(::google::protobuf::uint64 value) {
  set_has_broadcast_id();
  broadcast_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_StopBroadcastUpload_Notification.broadcast_id)
}

// optional fixed64 broadcast_relay_id = 2;
bool CBroadcast_StopBroadcastUpload_Notification::has_broadcast_relay_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CBroadcast_StopBroadcastUpload_Notification::set_has_broadcast_relay_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CBroadcast_StopBroadcastUpload_Notification::clear_has_broadcast_relay_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CBroadcast_StopBroadcastUpload_Notification::clear_broadcast_relay_id() {
  broadcast_relay_id_ = GOOGLE_ULONGLONG(0);
  clear_has_broadcast_relay_id();
}
::google::protobuf::uint64 CBroadcast_StopBroadcastUpload_Notification::broadcast_relay_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_StopBroadcastUpload_Notification.broadcast_relay_id)
  return broadcast_relay_id_;
}
void CBroadcast_StopBroadcastUpload_Notification::set_broadcast_relay_id(::google::protobuf::uint64 value) {
  set_has_broadcast_relay_id();
  broadcast_relay_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_StopBroadcastUpload_Notification.broadcast_relay_id)
}

// optional uint32 upload_result = 3;
bool CBroadcast_StopBroadcastUpload_Notification::has_upload_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CBroadcast_StopBroadcastUpload_Notification::set_has_upload_result() {
  _has_bits_[0] |= 0x00000004u;
}
void CBroadcast_StopBroadcastUpload_Notification::clear_has_upload_result() {
  _has_bits_[0] &= ~0x00000004u;
}
void CBroadcast_StopBroadcastUpload_Notification::clear_upload_result() {
  upload_result_ = 0u;
  clear_has_upload_result();
}
::google::protobuf::uint32 CBroadcast_StopBroadcastUpload_Notification::upload_result() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_StopBroadcastUpload_Notification.upload_result)
  return upload_result_;
}
void CBroadcast_StopBroadcastUpload_Notification::set_upload_result(::google::protobuf::uint32 value) {
  set_has_upload_result();
  upload_result_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_StopBroadcastUpload_Notification.upload_result)
}

// optional bool too_many_poor_uploads = 4;
bool CBroadcast_StopBroadcastUpload_Notification::has_too_many_poor_uploads() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CBroadcast_StopBroadcastUpload_Notification::set_has_too_many_poor_uploads() {
  _has_bits_[0] |= 0x00000008u;
}
void CBroadcast_StopBroadcastUpload_Notification::clear_has_too_many_poor_uploads() {
  _has_bits_[0] &= ~0x00000008u;
}
void CBroadcast_StopBroadcastUpload_Notification::clear_too_many_poor_uploads() {
  too_many_poor_uploads_ = false;
  clear_has_too_many_poor_uploads();
}
bool CBroadcast_StopBroadcastUpload_Notification::too_many_poor_uploads() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_StopBroadcastUpload_Notification.too_many_poor_uploads)
  return too_many_poor_uploads_;
}
void CBroadcast_StopBroadcastUpload_Notification::set_too_many_poor_uploads(bool value) {
  set_has_too_many_poor_uploads();
  too_many_poor_uploads_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_StopBroadcastUpload_Notification.too_many_poor_uploads)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_SessionClosed_Notification::kBroadcastIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_SessionClosed_Notification::CBroadcast_SessionClosed_Notification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CBroadcast_SessionClosed_Notification)
}
CBroadcast_SessionClosed_Notification::CBroadcast_SessionClosed_Notification(const CBroadcast_SessionClosed_Notification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  broadcast_id_ = from.broadcast_id_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CBroadcast_SessionClosed_Notification)
}

void CBroadcast_SessionClosed_Notification::SharedCtor() {
  _cached_size_ = 0;
  broadcast_id_ = GOOGLE_ULONGLONG(0);
}

CBroadcast_SessionClosed_Notification::~CBroadcast_SessionClosed_Notification() {
  // @@protoc_insertion_point(destructor:proto.steam.CBroadcast_SessionClosed_Notification)
  SharedDtor();
}

void CBroadcast_SessionClosed_Notification::SharedDtor() {
}

void CBroadcast_SessionClosed_Notification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CBroadcast_SessionClosed_Notification::descriptor() {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CBroadcast_SessionClosed_Notification& CBroadcast_SessionClosed_Notification::default_instance() {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CBroadcast_SessionClosed_Notification* CBroadcast_SessionClosed_Notification::New(::google::protobuf::Arena* arena) const {
  CBroadcast_SessionClosed_Notification* n = new CBroadcast_SessionClosed_Notification;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CBroadcast_SessionClosed_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CBroadcast_SessionClosed_Notification)
  broadcast_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CBroadcast_SessionClosed_Notification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CBroadcast_SessionClosed_Notification)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 broadcast_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_broadcast_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &broadcast_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CBroadcast_SessionClosed_Notification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CBroadcast_SessionClosed_Notification)
  return false;
#undef DO_
}

void CBroadcast_SessionClosed_Notification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CBroadcast_SessionClosed_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->broadcast_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CBroadcast_SessionClosed_Notification)
}

::google::protobuf::uint8* CBroadcast_SessionClosed_Notification::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CBroadcast_SessionClosed_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->broadcast_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CBroadcast_SessionClosed_Notification)
  return target;
}

size_t CBroadcast_SessionClosed_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CBroadcast_SessionClosed_Notification)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional fixed64 broadcast_id = 1;
  if (has_broadcast_id()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CBroadcast_SessionClosed_Notification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CBroadcast_SessionClosed_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_SessionClosed_Notification* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CBroadcast_SessionClosed_Notification>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CBroadcast_SessionClosed_Notification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CBroadcast_SessionClosed_Notification)
    MergeFrom(*source);
  }
}

void CBroadcast_SessionClosed_Notification::MergeFrom(const CBroadcast_SessionClosed_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CBroadcast_SessionClosed_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_broadcast_id()) {
    set_broadcast_id(from.broadcast_id());
  }
}

void CBroadcast_SessionClosed_Notification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CBroadcast_SessionClosed_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_SessionClosed_Notification::CopyFrom(const CBroadcast_SessionClosed_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CBroadcast_SessionClosed_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_SessionClosed_Notification::IsInitialized() const {
  return true;
}

void CBroadcast_SessionClosed_Notification::Swap(CBroadcast_SessionClosed_Notification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_SessionClosed_Notification::InternalSwap(CBroadcast_SessionClosed_Notification* other) {
  std::swap(broadcast_id_, other->broadcast_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CBroadcast_SessionClosed_Notification::GetMetadata() const {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CBroadcast_SessionClosed_Notification

// optional fixed64 broadcast_id = 1;
bool CBroadcast_SessionClosed_Notification::has_broadcast_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CBroadcast_SessionClosed_Notification::set_has_broadcast_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CBroadcast_SessionClosed_Notification::clear_has_broadcast_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CBroadcast_SessionClosed_Notification::clear_broadcast_id() {
  broadcast_id_ = GOOGLE_ULONGLONG(0);
  clear_has_broadcast_id();
}
::google::protobuf::uint64 CBroadcast_SessionClosed_Notification::broadcast_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_SessionClosed_Notification.broadcast_id)
  return broadcast_id_;
}
void CBroadcast_SessionClosed_Notification::set_broadcast_id(::google::protobuf::uint64 value) {
  set_has_broadcast_id();
  broadcast_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_SessionClosed_Notification.broadcast_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_ViewerBroadcastInvite_Notification::kBroadcasterSteamidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_ViewerBroadcastInvite_Notification::CBroadcast_ViewerBroadcastInvite_Notification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CBroadcast_ViewerBroadcastInvite_Notification)
}
CBroadcast_ViewerBroadcastInvite_Notification::CBroadcast_ViewerBroadcastInvite_Notification(const CBroadcast_ViewerBroadcastInvite_Notification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  broadcaster_steamid_ = from.broadcaster_steamid_;
  // @@protoc_insertion_point(copy_constructor:proto.steam.CBroadcast_ViewerBroadcastInvite_Notification)
}

void CBroadcast_ViewerBroadcastInvite_Notification::SharedCtor() {
  _cached_size_ = 0;
  broadcaster_steamid_ = GOOGLE_ULONGLONG(0);
}

CBroadcast_ViewerBroadcastInvite_Notification::~CBroadcast_ViewerBroadcastInvite_Notification() {
  // @@protoc_insertion_point(destructor:proto.steam.CBroadcast_ViewerBroadcastInvite_Notification)
  SharedDtor();
}

void CBroadcast_ViewerBroadcastInvite_Notification::SharedDtor() {
}

void CBroadcast_ViewerBroadcastInvite_Notification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CBroadcast_ViewerBroadcastInvite_Notification::descriptor() {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CBroadcast_ViewerBroadcastInvite_Notification& CBroadcast_ViewerBroadcastInvite_Notification::default_instance() {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CBroadcast_ViewerBroadcastInvite_Notification* CBroadcast_ViewerBroadcastInvite_Notification::New(::google::protobuf::Arena* arena) const {
  CBroadcast_ViewerBroadcastInvite_Notification* n = new CBroadcast_ViewerBroadcastInvite_Notification;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CBroadcast_ViewerBroadcastInvite_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CBroadcast_ViewerBroadcastInvite_Notification)
  broadcaster_steamid_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CBroadcast_ViewerBroadcastInvite_Notification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CBroadcast_ViewerBroadcastInvite_Notification)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 broadcaster_steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_broadcaster_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &broadcaster_steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CBroadcast_ViewerBroadcastInvite_Notification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CBroadcast_ViewerBroadcastInvite_Notification)
  return false;
#undef DO_
}

void CBroadcast_ViewerBroadcastInvite_Notification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CBroadcast_ViewerBroadcastInvite_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcaster_steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->broadcaster_steamid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CBroadcast_ViewerBroadcastInvite_Notification)
}

::google::protobuf::uint8* CBroadcast_ViewerBroadcastInvite_Notification::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CBroadcast_ViewerBroadcastInvite_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcaster_steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->broadcaster_steamid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CBroadcast_ViewerBroadcastInvite_Notification)
  return target;
}

size_t CBroadcast_ViewerBroadcastInvite_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CBroadcast_ViewerBroadcastInvite_Notification)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional fixed64 broadcaster_steamid = 1;
  if (has_broadcaster_steamid()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CBroadcast_ViewerBroadcastInvite_Notification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CBroadcast_ViewerBroadcastInvite_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_ViewerBroadcastInvite_Notification* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CBroadcast_ViewerBroadcastInvite_Notification>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CBroadcast_ViewerBroadcastInvite_Notification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CBroadcast_ViewerBroadcastInvite_Notification)
    MergeFrom(*source);
  }
}

void CBroadcast_ViewerBroadcastInvite_Notification::MergeFrom(const CBroadcast_ViewerBroadcastInvite_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CBroadcast_ViewerBroadcastInvite_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_broadcaster_steamid()) {
    set_broadcaster_steamid(from.broadcaster_steamid());
  }
}

void CBroadcast_ViewerBroadcastInvite_Notification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CBroadcast_ViewerBroadcastInvite_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_ViewerBroadcastInvite_Notification::CopyFrom(const CBroadcast_ViewerBroadcastInvite_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CBroadcast_ViewerBroadcastInvite_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_ViewerBroadcastInvite_Notification::IsInitialized() const {
  return true;
}

void CBroadcast_ViewerBroadcastInvite_Notification::Swap(CBroadcast_ViewerBroadcastInvite_Notification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_ViewerBroadcastInvite_Notification::InternalSwap(CBroadcast_ViewerBroadcastInvite_Notification* other) {
  std::swap(broadcaster_steamid_, other->broadcaster_steamid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CBroadcast_ViewerBroadcastInvite_Notification::GetMetadata() const {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CBroadcast_ViewerBroadcastInvite_Notification

// optional fixed64 broadcaster_steamid = 1;
bool CBroadcast_ViewerBroadcastInvite_Notification::has_broadcaster_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CBroadcast_ViewerBroadcastInvite_Notification::set_has_broadcaster_steamid() {
  _has_bits_[0] |= 0x00000001u;
}
void CBroadcast_ViewerBroadcastInvite_Notification::clear_has_broadcaster_steamid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CBroadcast_ViewerBroadcastInvite_Notification::clear_broadcaster_steamid() {
  broadcaster_steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_broadcaster_steamid();
}
::google::protobuf::uint64 CBroadcast_ViewerBroadcastInvite_Notification::broadcaster_steamid() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_ViewerBroadcastInvite_Notification.broadcaster_steamid)
  return broadcaster_steamid_;
}
void CBroadcast_ViewerBroadcastInvite_Notification::set_broadcaster_steamid(::google::protobuf::uint64 value) {
  set_has_broadcaster_steamid();
  broadcaster_steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_ViewerBroadcastInvite_Notification.broadcaster_steamid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CBroadcast_BroadcastStatus_Notification::kBroadcastIdFieldNumber;
const int CBroadcast_BroadcastStatus_Notification::kNumViewersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CBroadcast_BroadcastStatus_Notification::CBroadcast_BroadcastStatus_Notification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.steam.CBroadcast_BroadcastStatus_Notification)
}
CBroadcast_BroadcastStatus_Notification::CBroadcast_BroadcastStatus_Notification(const CBroadcast_BroadcastStatus_Notification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&broadcast_id_, &from.broadcast_id_,
    reinterpret_cast<char*>(&num_viewers_) -
    reinterpret_cast<char*>(&broadcast_id_) + sizeof(num_viewers_));
  // @@protoc_insertion_point(copy_constructor:proto.steam.CBroadcast_BroadcastStatus_Notification)
}

void CBroadcast_BroadcastStatus_Notification::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&broadcast_id_, 0, reinterpret_cast<char*>(&num_viewers_) -
    reinterpret_cast<char*>(&broadcast_id_) + sizeof(num_viewers_));
}

CBroadcast_BroadcastStatus_Notification::~CBroadcast_BroadcastStatus_Notification() {
  // @@protoc_insertion_point(destructor:proto.steam.CBroadcast_BroadcastStatus_Notification)
  SharedDtor();
}

void CBroadcast_BroadcastStatus_Notification::SharedDtor() {
}

void CBroadcast_BroadcastStatus_Notification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CBroadcast_BroadcastStatus_Notification::descriptor() {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CBroadcast_BroadcastStatus_Notification& CBroadcast_BroadcastStatus_Notification::default_instance() {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::InitDefaults();
  return *internal_default_instance();
}

CBroadcast_BroadcastStatus_Notification* CBroadcast_BroadcastStatus_Notification::New(::google::protobuf::Arena* arena) const {
  CBroadcast_BroadcastStatus_Notification* n = new CBroadcast_BroadcastStatus_Notification;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CBroadcast_BroadcastStatus_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.steam.CBroadcast_BroadcastStatus_Notification)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&broadcast_id_, 0, reinterpret_cast<char*>(&num_viewers_) -
      reinterpret_cast<char*>(&broadcast_id_) + sizeof(num_viewers_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CBroadcast_BroadcastStatus_Notification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.steam.CBroadcast_BroadcastStatus_Notification)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 broadcast_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_broadcast_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &broadcast_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_viewers = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_num_viewers();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_viewers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.steam.CBroadcast_BroadcastStatus_Notification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.steam.CBroadcast_BroadcastStatus_Notification)
  return false;
#undef DO_
}

void CBroadcast_BroadcastStatus_Notification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.steam.CBroadcast_BroadcastStatus_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->broadcast_id(), output);
  }

  // optional int32 num_viewers = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num_viewers(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.steam.CBroadcast_BroadcastStatus_Notification)
}

::google::protobuf::uint8* CBroadcast_BroadcastStatus_Notification::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.steam.CBroadcast_BroadcastStatus_Notification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 broadcast_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->broadcast_id(), target);
  }

  // optional int32 num_viewers = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num_viewers(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.steam.CBroadcast_BroadcastStatus_Notification)
  return target;
}

size_t CBroadcast_BroadcastStatus_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.steam.CBroadcast_BroadcastStatus_Notification)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional fixed64 broadcast_id = 1;
    if (has_broadcast_id()) {
      total_size += 1 + 8;
    }

    // optional int32 num_viewers = 2;
    if (has_num_viewers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_viewers());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CBroadcast_BroadcastStatus_Notification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.steam.CBroadcast_BroadcastStatus_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  const CBroadcast_BroadcastStatus_Notification* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CBroadcast_BroadcastStatus_Notification>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.steam.CBroadcast_BroadcastStatus_Notification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.steam.CBroadcast_BroadcastStatus_Notification)
    MergeFrom(*source);
  }
}

void CBroadcast_BroadcastStatus_Notification::MergeFrom(const CBroadcast_BroadcastStatus_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.steam.CBroadcast_BroadcastStatus_Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      broadcast_id_ = from.broadcast_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      num_viewers_ = from.num_viewers_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CBroadcast_BroadcastStatus_Notification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.steam.CBroadcast_BroadcastStatus_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CBroadcast_BroadcastStatus_Notification::CopyFrom(const CBroadcast_BroadcastStatus_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.steam.CBroadcast_BroadcastStatus_Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CBroadcast_BroadcastStatus_Notification::IsInitialized() const {
  return true;
}

void CBroadcast_BroadcastStatus_Notification::Swap(CBroadcast_BroadcastStatus_Notification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CBroadcast_BroadcastStatus_Notification::InternalSwap(CBroadcast_BroadcastStatus_Notification* other) {
  std::swap(broadcast_id_, other->broadcast_id_);
  std::swap(num_viewers_, other->num_viewers_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CBroadcast_BroadcastStatus_Notification::GetMetadata() const {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CBroadcast_BroadcastStatus_Notification

// optional fixed64 broadcast_id = 1;
bool CBroadcast_BroadcastStatus_Notification::has_broadcast_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CBroadcast_BroadcastStatus_Notification::set_has_broadcast_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CBroadcast_BroadcastStatus_Notification::clear_has_broadcast_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CBroadcast_BroadcastStatus_Notification::clear_broadcast_id() {
  broadcast_id_ = GOOGLE_ULONGLONG(0);
  clear_has_broadcast_id();
}
::google::protobuf::uint64 CBroadcast_BroadcastStatus_Notification::broadcast_id() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_BroadcastStatus_Notification.broadcast_id)
  return broadcast_id_;
}
void CBroadcast_BroadcastStatus_Notification::set_broadcast_id(::google::protobuf::uint64 value) {
  set_has_broadcast_id();
  broadcast_id_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_BroadcastStatus_Notification.broadcast_id)
}

// optional int32 num_viewers = 2;
bool CBroadcast_BroadcastStatus_Notification::has_num_viewers() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CBroadcast_BroadcastStatus_Notification::set_has_num_viewers() {
  _has_bits_[0] |= 0x00000002u;
}
void CBroadcast_BroadcastStatus_Notification::clear_has_num_viewers() {
  _has_bits_[0] &= ~0x00000002u;
}
void CBroadcast_BroadcastStatus_Notification::clear_num_viewers() {
  num_viewers_ = 0;
  clear_has_num_viewers();
}
::google::protobuf::int32 CBroadcast_BroadcastStatus_Notification::num_viewers() const {
  // @@protoc_insertion_point(field_get:proto.steam.CBroadcast_BroadcastStatus_Notification.num_viewers)
  return num_viewers_;
}
void CBroadcast_BroadcastStatus_Notification::set_num_viewers(::google::protobuf::int32 value) {
  set_has_num_viewers();
  num_viewers_ = value;
  // @@protoc_insertion_point(field_set:proto.steam.CBroadcast_BroadcastStatus_Notification.num_viewers)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

Broadcast::~Broadcast() {}

const ::google::protobuf::ServiceDescriptor* Broadcast::descriptor() {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_service_descriptors[0];
}

const ::google::protobuf::ServiceDescriptor* Broadcast::GetDescriptor() {
  return descriptor();
}

void Broadcast::BeginBroadcastSession(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CBroadcast_BeginBroadcastSession_Request*,
                         ::proto::steam::CBroadcast_BeginBroadcastSession_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method BeginBroadcastSession() not implemented.");
  done->Run();
}

void Broadcast::EndBroadcastSession(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CBroadcast_EndBroadcastSession_Request*,
                         ::proto::steam::CBroadcast_EndBroadcastSession_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method EndBroadcastSession() not implemented.");
  done->Run();
}

void Broadcast::StartBroadcastUpload(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CBroadcast_StartBroadcastUpload_Request*,
                         ::proto::steam::CBroadcast_StartBroadcastUpload_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method StartBroadcastUpload() not implemented.");
  done->Run();
}

void Broadcast::NotifyBroadcastUploadStop(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CBroadcast_NotifyBroadcastUploadStop_Notification*,
                         ::proto::steam::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyBroadcastUploadStop() not implemented.");
  done->Run();
}

void Broadcast::WatchBroadcast(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CBroadcast_WatchBroadcast_Request*,
                         ::proto::steam::CBroadcast_WatchBroadcast_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method WatchBroadcast() not implemented.");
  done->Run();
}

void Broadcast::GetBroadcastStatus(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CBroadcast_GetBroadcastStatus_Request*,
                         ::proto::steam::CBroadcast_GetBroadcastStatus_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetBroadcastStatus() not implemented.");
  done->Run();
}

void Broadcast::InviteToBroadcast(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CBroadcast_InviteToBroadcast_Request*,
                         ::proto::steam::CBroadcast_InviteToBroadcast_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method InviteToBroadcast() not implemented.");
  done->Run();
}

void Broadcast::SendBroadcastStateToServer(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CBroadcast_SendBroadcastStateToServer_Request*,
                         ::proto::steam::CBroadcast_SendBroadcastStateToServer_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SendBroadcastStateToServer() not implemented.");
  done->Run();
}

void Broadcast::NotifyBroadcastSessionHeartbeat(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CBroadcast_NotifyBroadcastSessionHeartbeat_Notification*,
                         ::proto::steam::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyBroadcastSessionHeartbeat() not implemented.");
  done->Run();
}

void Broadcast::GetBroadcastChatInfo(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CBroadcast_GetBroadcastChatInfo_Request*,
                         ::proto::steam::CBroadcast_GetBroadcastChatInfo_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetBroadcastChatInfo() not implemented.");
  done->Run();
}

void Broadcast::PostChatMessage(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CBroadcast_PostChatMessage_Request*,
                         ::proto::steam::CBroadcast_PostChatMessage_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method PostChatMessage() not implemented.");
  done->Run();
}

void Broadcast::MuteBroadcastChatUser(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CBroadcast_MuteBroadcastChatUser_Request*,
                         ::proto::steam::CBroadcast_MuteBroadcastChatUser_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method MuteBroadcastChatUser() not implemented.");
  done->Run();
}

void Broadcast::RemoveUserChatText(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CBroadcast_RemoveUserChatText_Request*,
                         ::proto::steam::CBroadcast_RemoveUserChatText_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method RemoveUserChatText() not implemented.");
  done->Run();
}

void Broadcast::GetBroadcastChatUserNames(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CBroadcast_GetBroadcastChatUserNames_Request*,
                         ::proto::steam::CBroadcast_GetBroadcastChatUserNames_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetBroadcastChatUserNames() not implemented.");
  done->Run();
}

void Broadcast::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_service_descriptors[0]);
  switch(method->index()) {
    case 0:
      BeginBroadcastSession(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CBroadcast_BeginBroadcastSession_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CBroadcast_BeginBroadcastSession_Response*>(response),
             done);
      break;
    case 1:
      EndBroadcastSession(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CBroadcast_EndBroadcastSession_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CBroadcast_EndBroadcastSession_Response*>(response),
             done);
      break;
    case 2:
      StartBroadcastUpload(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CBroadcast_StartBroadcastUpload_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CBroadcast_StartBroadcastUpload_Response*>(response),
             done);
      break;
    case 3:
      NotifyBroadcastUploadStop(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CBroadcast_NotifyBroadcastUploadStop_Notification*>(request),
             ::google::protobuf::down_cast< ::proto::steam::NoResponse*>(response),
             done);
      break;
    case 4:
      WatchBroadcast(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CBroadcast_WatchBroadcast_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CBroadcast_WatchBroadcast_Response*>(response),
             done);
      break;
    case 5:
      GetBroadcastStatus(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CBroadcast_GetBroadcastStatus_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CBroadcast_GetBroadcastStatus_Response*>(response),
             done);
      break;
    case 6:
      InviteToBroadcast(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CBroadcast_InviteToBroadcast_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CBroadcast_InviteToBroadcast_Response*>(response),
             done);
      break;
    case 7:
      SendBroadcastStateToServer(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CBroadcast_SendBroadcastStateToServer_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CBroadcast_SendBroadcastStateToServer_Response*>(response),
             done);
      break;
    case 8:
      NotifyBroadcastSessionHeartbeat(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CBroadcast_NotifyBroadcastSessionHeartbeat_Notification*>(request),
             ::google::protobuf::down_cast< ::proto::steam::NoResponse*>(response),
             done);
      break;
    case 9:
      GetBroadcastChatInfo(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CBroadcast_GetBroadcastChatInfo_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CBroadcast_GetBroadcastChatInfo_Response*>(response),
             done);
      break;
    case 10:
      PostChatMessage(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CBroadcast_PostChatMessage_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CBroadcast_PostChatMessage_Response*>(response),
             done);
      break;
    case 11:
      MuteBroadcastChatUser(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CBroadcast_MuteBroadcastChatUser_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CBroadcast_MuteBroadcastChatUser_Response*>(response),
             done);
      break;
    case 12:
      RemoveUserChatText(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CBroadcast_RemoveUserChatText_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CBroadcast_RemoveUserChatText_Response*>(response),
             done);
      break;
    case 13:
      GetBroadcastChatUserNames(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CBroadcast_GetBroadcastChatUserNames_Request*>(request),
             ::google::protobuf::down_cast< ::proto::steam::CBroadcast_GetBroadcastChatUserNames_Response*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& Broadcast::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::steam::CBroadcast_BeginBroadcastSession_Request::default_instance();
    case 1:
      return ::proto::steam::CBroadcast_EndBroadcastSession_Request::default_instance();
    case 2:
      return ::proto::steam::CBroadcast_StartBroadcastUpload_Request::default_instance();
    case 3:
      return ::proto::steam::CBroadcast_NotifyBroadcastUploadStop_Notification::default_instance();
    case 4:
      return ::proto::steam::CBroadcast_WatchBroadcast_Request::default_instance();
    case 5:
      return ::proto::steam::CBroadcast_GetBroadcastStatus_Request::default_instance();
    case 6:
      return ::proto::steam::CBroadcast_InviteToBroadcast_Request::default_instance();
    case 7:
      return ::proto::steam::CBroadcast_SendBroadcastStateToServer_Request::default_instance();
    case 8:
      return ::proto::steam::CBroadcast_NotifyBroadcastSessionHeartbeat_Notification::default_instance();
    case 9:
      return ::proto::steam::CBroadcast_GetBroadcastChatInfo_Request::default_instance();
    case 10:
      return ::proto::steam::CBroadcast_PostChatMessage_Request::default_instance();
    case 11:
      return ::proto::steam::CBroadcast_MuteBroadcastChatUser_Request::default_instance();
    case 12:
      return ::proto::steam::CBroadcast_RemoveUserChatText_Request::default_instance();
    case 13:
      return ::proto::steam::CBroadcast_GetBroadcastChatUserNames_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& Broadcast::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::steam::CBroadcast_BeginBroadcastSession_Response::default_instance();
    case 1:
      return ::proto::steam::CBroadcast_EndBroadcastSession_Response::default_instance();
    case 2:
      return ::proto::steam::CBroadcast_StartBroadcastUpload_Response::default_instance();
    case 3:
      return ::proto::steam::NoResponse::default_instance();
    case 4:
      return ::proto::steam::CBroadcast_WatchBroadcast_Response::default_instance();
    case 5:
      return ::proto::steam::CBroadcast_GetBroadcastStatus_Response::default_instance();
    case 6:
      return ::proto::steam::CBroadcast_InviteToBroadcast_Response::default_instance();
    case 7:
      return ::proto::steam::CBroadcast_SendBroadcastStateToServer_Response::default_instance();
    case 8:
      return ::proto::steam::NoResponse::default_instance();
    case 9:
      return ::proto::steam::CBroadcast_GetBroadcastChatInfo_Response::default_instance();
    case 10:
      return ::proto::steam::CBroadcast_PostChatMessage_Response::default_instance();
    case 11:
      return ::proto::steam::CBroadcast_MuteBroadcastChatUser_Response::default_instance();
    case 12:
      return ::proto::steam::CBroadcast_RemoveUserChatText_Response::default_instance();
    case 13:
      return ::proto::steam::CBroadcast_GetBroadcastChatUserNames_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

Broadcast_Stub::Broadcast_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
Broadcast_Stub::Broadcast_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
Broadcast_Stub::~Broadcast_Stub() {
  if (owns_channel_) delete channel_;
}

void Broadcast_Stub::BeginBroadcastSession(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CBroadcast_BeginBroadcastSession_Request* request,
                              ::proto::steam::CBroadcast_BeginBroadcastSession_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void Broadcast_Stub::EndBroadcastSession(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CBroadcast_EndBroadcastSession_Request* request,
                              ::proto::steam::CBroadcast_EndBroadcastSession_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void Broadcast_Stub::StartBroadcastUpload(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CBroadcast_StartBroadcastUpload_Request* request,
                              ::proto::steam::CBroadcast_StartBroadcastUpload_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void Broadcast_Stub::NotifyBroadcastUploadStop(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CBroadcast_NotifyBroadcastUploadStop_Notification* request,
                              ::proto::steam::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void Broadcast_Stub::WatchBroadcast(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CBroadcast_WatchBroadcast_Request* request,
                              ::proto::steam::CBroadcast_WatchBroadcast_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void Broadcast_Stub::GetBroadcastStatus(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CBroadcast_GetBroadcastStatus_Request* request,
                              ::proto::steam::CBroadcast_GetBroadcastStatus_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}
void Broadcast_Stub::InviteToBroadcast(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CBroadcast_InviteToBroadcast_Request* request,
                              ::proto::steam::CBroadcast_InviteToBroadcast_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(6),
                       controller, request, response, done);
}
void Broadcast_Stub::SendBroadcastStateToServer(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CBroadcast_SendBroadcastStateToServer_Request* request,
                              ::proto::steam::CBroadcast_SendBroadcastStateToServer_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(7),
                       controller, request, response, done);
}
void Broadcast_Stub::NotifyBroadcastSessionHeartbeat(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CBroadcast_NotifyBroadcastSessionHeartbeat_Notification* request,
                              ::proto::steam::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(8),
                       controller, request, response, done);
}
void Broadcast_Stub::GetBroadcastChatInfo(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CBroadcast_GetBroadcastChatInfo_Request* request,
                              ::proto::steam::CBroadcast_GetBroadcastChatInfo_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(9),
                       controller, request, response, done);
}
void Broadcast_Stub::PostChatMessage(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CBroadcast_PostChatMessage_Request* request,
                              ::proto::steam::CBroadcast_PostChatMessage_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(10),
                       controller, request, response, done);
}
void Broadcast_Stub::MuteBroadcastChatUser(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CBroadcast_MuteBroadcastChatUser_Request* request,
                              ::proto::steam::CBroadcast_MuteBroadcastChatUser_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(11),
                       controller, request, response, done);
}
void Broadcast_Stub::RemoveUserChatText(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CBroadcast_RemoveUserChatText_Request* request,
                              ::proto::steam::CBroadcast_RemoveUserChatText_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(12),
                       controller, request, response, done);
}
void Broadcast_Stub::GetBroadcastChatUserNames(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CBroadcast_GetBroadcastChatUserNames_Request* request,
                              ::proto::steam::CBroadcast_GetBroadcastChatUserNames_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(13),
                       controller, request, response, done);
}
// ===================================================================

BroadcastClient::~BroadcastClient() {}

const ::google::protobuf::ServiceDescriptor* BroadcastClient::descriptor() {
  protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_service_descriptors[1];
}

const ::google::protobuf::ServiceDescriptor* BroadcastClient::GetDescriptor() {
  return descriptor();
}

void BroadcastClient::NotifyBroadcastViewerState(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CBroadcast_BroadcastViewerState_Notification*,
                         ::proto::steam::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyBroadcastViewerState() not implemented.");
  done->Run();
}

void BroadcastClient::NotifyWaitingBroadcastViewer(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CBroadcast_WaitingBroadcastViewer_Notification*,
                         ::proto::steam::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyWaitingBroadcastViewer() not implemented.");
  done->Run();
}

void BroadcastClient::NotifyStopBroadcastUpload(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CBroadcast_StopBroadcastUpload_Notification*,
                         ::proto::steam::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyStopBroadcastUpload() not implemented.");
  done->Run();
}

void BroadcastClient::NotifySessionClosed(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CBroadcast_SessionClosed_Notification*,
                         ::proto::steam::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifySessionClosed() not implemented.");
  done->Run();
}

void BroadcastClient::NotifyViewerBroadcastInvite(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CBroadcast_ViewerBroadcastInvite_Notification*,
                         ::proto::steam::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyViewerBroadcastInvite() not implemented.");
  done->Run();
}

void BroadcastClient::NotifyBroadcastStatus(::google::protobuf::RpcController* controller,
                         const ::proto::steam::CBroadcast_BroadcastStatus_Notification*,
                         ::proto::steam::NoResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method NotifyBroadcastStatus() not implemented.");
  done->Run();
}

void BroadcastClient::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), protobuf_steammessages_5fbroadcast_2esteamclient_2eproto::file_level_service_descriptors[1]);
  switch(method->index()) {
    case 0:
      NotifyBroadcastViewerState(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CBroadcast_BroadcastViewerState_Notification*>(request),
             ::google::protobuf::down_cast< ::proto::steam::NoResponse*>(response),
             done);
      break;
    case 1:
      NotifyWaitingBroadcastViewer(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CBroadcast_WaitingBroadcastViewer_Notification*>(request),
             ::google::protobuf::down_cast< ::proto::steam::NoResponse*>(response),
             done);
      break;
    case 2:
      NotifyStopBroadcastUpload(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CBroadcast_StopBroadcastUpload_Notification*>(request),
             ::google::protobuf::down_cast< ::proto::steam::NoResponse*>(response),
             done);
      break;
    case 3:
      NotifySessionClosed(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CBroadcast_SessionClosed_Notification*>(request),
             ::google::protobuf::down_cast< ::proto::steam::NoResponse*>(response),
             done);
      break;
    case 4:
      NotifyViewerBroadcastInvite(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CBroadcast_ViewerBroadcastInvite_Notification*>(request),
             ::google::protobuf::down_cast< ::proto::steam::NoResponse*>(response),
             done);
      break;
    case 5:
      NotifyBroadcastStatus(controller,
             ::google::protobuf::down_cast<const ::proto::steam::CBroadcast_BroadcastStatus_Notification*>(request),
             ::google::protobuf::down_cast< ::proto::steam::NoResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& BroadcastClient::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::steam::CBroadcast_BroadcastViewerState_Notification::default_instance();
    case 1:
      return ::proto::steam::CBroadcast_WaitingBroadcastViewer_Notification::default_instance();
    case 2:
      return ::proto::steam::CBroadcast_StopBroadcastUpload_Notification::default_instance();
    case 3:
      return ::proto::steam::CBroadcast_SessionClosed_Notification::default_instance();
    case 4:
      return ::proto::steam::CBroadcast_ViewerBroadcastInvite_Notification::default_instance();
    case 5:
      return ::proto::steam::CBroadcast_BroadcastStatus_Notification::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& BroadcastClient::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::proto::steam::NoResponse::default_instance();
    case 1:
      return ::proto::steam::NoResponse::default_instance();
    case 2:
      return ::proto::steam::NoResponse::default_instance();
    case 3:
      return ::proto::steam::NoResponse::default_instance();
    case 4:
      return ::proto::steam::NoResponse::default_instance();
    case 5:
      return ::proto::steam::NoResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

BroadcastClient_Stub::BroadcastClient_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
BroadcastClient_Stub::BroadcastClient_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
BroadcastClient_Stub::~BroadcastClient_Stub() {
  if (owns_channel_) delete channel_;
}

void BroadcastClient_Stub::NotifyBroadcastViewerState(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CBroadcast_BroadcastViewerState_Notification* request,
                              ::proto::steam::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void BroadcastClient_Stub::NotifyWaitingBroadcastViewer(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CBroadcast_WaitingBroadcastViewer_Notification* request,
                              ::proto::steam::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void BroadcastClient_Stub::NotifyStopBroadcastUpload(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CBroadcast_StopBroadcastUpload_Notification* request,
                              ::proto::steam::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void BroadcastClient_Stub::NotifySessionClosed(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CBroadcast_SessionClosed_Notification* request,
                              ::proto::steam::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void BroadcastClient_Stub::NotifyViewerBroadcastInvite(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CBroadcast_ViewerBroadcastInvite_Notification* request,
                              ::proto::steam::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void BroadcastClient_Stub::NotifyBroadcastStatus(::google::protobuf::RpcController* controller,
                              const ::proto::steam::CBroadcast_BroadcastStatus_Notification* request,
                              ::proto::steam::NoResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace steam
}  // namespace proto

// @@protoc_insertion_point(global_scope)
