// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_usermessages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dota_usermessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace dota {
class CDOTAUserMsg_AIDebugLineDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_AIDebugLine> {
} _CDOTAUserMsg_AIDebugLine_default_instance_;
class CDOTAUserMsg_PingDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_Ping> {
} _CDOTAUserMsg_Ping_default_instance_;
class CDOTAUserMsg_SwapVerifyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_SwapVerify> {
} _CDOTAUserMsg_SwapVerify_default_instance_;
class CDOTAUserMsg_ChatEventDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_ChatEvent> {
} _CDOTAUserMsg_ChatEvent_default_instance_;
class CDOTAUserMsg_CombatLogShowDeathDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_CombatLogShowDeath> {
} _CDOTAUserMsg_CombatLogShowDeath_default_instance_;
class CDOTAUserMsg_BotChatDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_BotChat> {
} _CDOTAUserMsg_BotChat_default_instance_;
class CDOTAUserMsg_CombatHeroPositionsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_CombatHeroPositions> {
} _CDOTAUserMsg_CombatHeroPositions_default_instance_;
class CDOTAUserMsg_MiniKillCamInfo_Attacker_AbilityDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability> {
} _CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability_default_instance_;
class CDOTAUserMsg_MiniKillCamInfo_AttackerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_MiniKillCamInfo_Attacker> {
} _CDOTAUserMsg_MiniKillCamInfo_Attacker_default_instance_;
class CDOTAUserMsg_MiniKillCamInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_MiniKillCamInfo> {
} _CDOTAUserMsg_MiniKillCamInfo_default_instance_;
class CDOTAUserMsg_GlobalLightColorDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_GlobalLightColor> {
} _CDOTAUserMsg_GlobalLightColor_default_instance_;
class CDOTAUserMsg_GlobalLightDirectionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_GlobalLightDirection> {
} _CDOTAUserMsg_GlobalLightDirection_default_instance_;
class CDOTAUserMsg_LocationPingDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_LocationPing> {
} _CDOTAUserMsg_LocationPing_default_instance_;
class CDOTAUserMsg_ItemAlertDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_ItemAlert> {
} _CDOTAUserMsg_ItemAlert_default_instance_;
class CDOTAUserMsg_EnemyItemAlertDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_EnemyItemAlert> {
} _CDOTAUserMsg_EnemyItemAlert_default_instance_;
class CDOTAUserMsg_ModifierAlertDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_ModifierAlert> {
} _CDOTAUserMsg_ModifierAlert_default_instance_;
class CDOTAUserMsg_HPManaAlertDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_HPManaAlert> {
} _CDOTAUserMsg_HPManaAlert_default_instance_;
class CDOTAUserMsg_GlyphAlertDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_GlyphAlert> {
} _CDOTAUserMsg_GlyphAlert_default_instance_;
class CDOTAUserMsg_WillPurchaseAlertDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_WillPurchaseAlert> {
} _CDOTAUserMsg_WillPurchaseAlert_default_instance_;
class CDOTAUserMsg_BuyBackStateAlertDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_BuyBackStateAlert> {
} _CDOTAUserMsg_BuyBackStateAlert_default_instance_;
class CDOTAUserMsg_QuickBuyAlertDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_QuickBuyAlert> {
} _CDOTAUserMsg_QuickBuyAlert_default_instance_;
class CDOTAUserMsg_CourierKilledAlert_LostItemDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_CourierKilledAlert_LostItem> {
} _CDOTAUserMsg_CourierKilledAlert_LostItem_default_instance_;
class CDOTAUserMsg_CourierKilledAlertDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_CourierKilledAlert> {
} _CDOTAUserMsg_CourierKilledAlert_default_instance_;
class CDOTAUserMsg_MinimapEventDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_MinimapEvent> {
} _CDOTAUserMsg_MinimapEvent_default_instance_;
class CDOTAUserMsg_MapLineDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_MapLine> {
} _CDOTAUserMsg_MapLine_default_instance_;
class CDOTAUserMsg_MinimapDebugPointDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_MinimapDebugPoint> {
} _CDOTAUserMsg_MinimapDebugPoint_default_instance_;
class CDOTAUserMsg_CreateLinearProjectileDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_CreateLinearProjectile> {
} _CDOTAUserMsg_CreateLinearProjectile_default_instance_;
class CDOTAUserMsg_DestroyLinearProjectileDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_DestroyLinearProjectile> {
} _CDOTAUserMsg_DestroyLinearProjectile_default_instance_;
class CDOTAUserMsg_DodgeTrackingProjectilesDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_DodgeTrackingProjectiles> {
} _CDOTAUserMsg_DodgeTrackingProjectiles_default_instance_;
class CDOTAUserMsg_SpectatorPlayerClickDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_SpectatorPlayerClick> {
} _CDOTAUserMsg_SpectatorPlayerClick_default_instance_;
class CDOTAUserMsg_SpectatorPlayerUnitOrdersDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_SpectatorPlayerUnitOrders> {
} _CDOTAUserMsg_SpectatorPlayerUnitOrders_default_instance_;
class CDOTAUserMsg_NevermoreRequiemDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_NevermoreRequiem> {
} _CDOTAUserMsg_NevermoreRequiem_default_instance_;
class CDOTAUserMsg_InvalidCommandDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_InvalidCommand> {
} _CDOTAUserMsg_InvalidCommand_default_instance_;
class CDOTAUserMsg_HudErrorDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_HudError> {
} _CDOTAUserMsg_HudError_default_instance_;
class CDOTAUserMsg_SharedCooldownDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_SharedCooldown> {
} _CDOTAUserMsg_SharedCooldown_default_instance_;
class CDOTAUserMsg_SetNextAutobuyItemDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_SetNextAutobuyItem> {
} _CDOTAUserMsg_SetNextAutobuyItem_default_instance_;
class CDOTAUserMsg_HalloweenDropsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_HalloweenDrops> {
} _CDOTAUserMsg_HalloweenDrops_default_instance_;
class CDOTAUserMsg_PredictionResult_PredictionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_PredictionResult_Prediction> {
} _CDOTAUserMsg_PredictionResult_Prediction_default_instance_;
class CDOTAUserMsg_PredictionResultDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_PredictionResult> {
} _CDOTAUserMsg_PredictionResult_default_instance_;
class CDOTAResponseQuerySerialized_FactDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAResponseQuerySerialized_Fact> {
} _CDOTAResponseQuerySerialized_Fact_default_instance_;
class CDOTAResponseQuerySerializedDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAResponseQuerySerialized> {
} _CDOTAResponseQuerySerialized_default_instance_;
class CDOTASpeechMatchOnClientDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTASpeechMatchOnClient> {
} _CDOTASpeechMatchOnClient_default_instance_;
class CDOTAUserMsg_UnitEvent_SpeechDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_UnitEvent_Speech> {
} _CDOTAUserMsg_UnitEvent_Speech_default_instance_;
class CDOTAUserMsg_UnitEvent_SpeechMuteDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_UnitEvent_SpeechMute> {
} _CDOTAUserMsg_UnitEvent_SpeechMute_default_instance_;
class CDOTAUserMsg_UnitEvent_AddGestureDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_UnitEvent_AddGesture> {
} _CDOTAUserMsg_UnitEvent_AddGesture_default_instance_;
class CDOTAUserMsg_UnitEvent_RemoveGestureDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_UnitEvent_RemoveGesture> {
} _CDOTAUserMsg_UnitEvent_RemoveGesture_default_instance_;
class CDOTAUserMsg_UnitEvent_BloodImpactDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_UnitEvent_BloodImpact> {
} _CDOTAUserMsg_UnitEvent_BloodImpact_default_instance_;
class CDOTAUserMsg_UnitEvent_FadeGestureDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_UnitEvent_FadeGesture> {
} _CDOTAUserMsg_UnitEvent_FadeGesture_default_instance_;
class CDOTAUserMsg_UnitEventDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_UnitEvent> {
} _CDOTAUserMsg_UnitEvent_default_instance_;
class CDOTAUserMsg_ItemPurchasedDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_ItemPurchased> {
} _CDOTAUserMsg_ItemPurchased_default_instance_;
class CDOTAUserMsg_ItemFoundDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_ItemFound> {
} _CDOTAUserMsg_ItemFound_default_instance_;
class CDOTAUserMsg_ParticleManager_ReleaseParticleIndexDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_ParticleManager_ReleaseParticleIndex> {
} _CDOTAUserMsg_ParticleManager_ReleaseParticleIndex_default_instance_;
class CDOTAUserMsg_ParticleManager_CreateParticleDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_ParticleManager_CreateParticle> {
} _CDOTAUserMsg_ParticleManager_CreateParticle_default_instance_;
class CDOTAUserMsg_ParticleManager_DestroyParticleDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_ParticleManager_DestroyParticle> {
} _CDOTAUserMsg_ParticleManager_DestroyParticle_default_instance_;
class CDOTAUserMsg_ParticleManager_DestroyParticleInvolvingDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_ParticleManager_DestroyParticleInvolving> {
} _CDOTAUserMsg_ParticleManager_DestroyParticleInvolving_default_instance_;
class CDOTAUserMsg_ParticleManager_UpdateParticleDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_ParticleManager_UpdateParticle> {
} _CDOTAUserMsg_ParticleManager_UpdateParticle_default_instance_;
class CDOTAUserMsg_ParticleManager_UpdateParticleFwdDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_ParticleManager_UpdateParticleFwd> {
} _CDOTAUserMsg_ParticleManager_UpdateParticleFwd_default_instance_;
class CDOTAUserMsg_ParticleManager_UpdateParticleOrientDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_ParticleManager_UpdateParticleOrient> {
} _CDOTAUserMsg_ParticleManager_UpdateParticleOrient_default_instance_;
class CDOTAUserMsg_ParticleManager_UpdateParticleFallbackDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_ParticleManager_UpdateParticleFallback> {
} _CDOTAUserMsg_ParticleManager_UpdateParticleFallback_default_instance_;
class CDOTAUserMsg_ParticleManager_UpdateParticleOffsetDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_ParticleManager_UpdateParticleOffset> {
} _CDOTAUserMsg_ParticleManager_UpdateParticleOffset_default_instance_;
class CDOTAUserMsg_ParticleManager_UpdateParticleEntDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_ParticleManager_UpdateParticleEnt> {
} _CDOTAUserMsg_ParticleManager_UpdateParticleEnt_default_instance_;
class CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozenDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen> {
} _CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen_default_instance_;
class CDOTAUserMsg_ParticleManager_UpdateParticleShouldDrawDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw> {
} _CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw_default_instance_;
class CDOTAUserMsg_ParticleManager_ChangeControlPointAttachmentDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_ParticleManager_ChangeControlPointAttachment> {
} _CDOTAUserMsg_ParticleManager_ChangeControlPointAttachment_default_instance_;
class CDOTAUserMsg_ParticleManager_UpdateEntityPositionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_ParticleManager_UpdateEntityPosition> {
} _CDOTAUserMsg_ParticleManager_UpdateEntityPosition_default_instance_;
class CDOTAUserMsg_ParticleManager_SetParticleFoWPropertiesDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_ParticleManager_SetParticleFoWProperties> {
} _CDOTAUserMsg_ParticleManager_SetParticleFoWProperties_default_instance_;
class CDOTAUserMsg_ParticleManager_SetParticleTextDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_ParticleManager_SetParticleText> {
} _CDOTAUserMsg_ParticleManager_SetParticleText_default_instance_;
class CDOTAUserMsg_ParticleManagerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_ParticleManager> {
} _CDOTAUserMsg_ParticleManager_default_instance_;
class CDOTAUserMsg_OverheadEventDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_OverheadEvent> {
} _CDOTAUserMsg_OverheadEvent_default_instance_;
class CDOTAUserMsg_TutorialTipInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_TutorialTipInfo> {
} _CDOTAUserMsg_TutorialTipInfo_default_instance_;
class CDOTAUserMsg_TutorialFinishDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_TutorialFinish> {
} _CDOTAUserMsg_TutorialFinish_default_instance_;
class CDOTAUserMsg_TutorialMinimapPositionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_TutorialMinimapPosition> {
} _CDOTAUserMsg_TutorialMinimapPosition_default_instance_;
class CDOTAUserMsg_SendGenericToolTipDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_SendGenericToolTip> {
} _CDOTAUserMsg_SendGenericToolTip_default_instance_;
class CDOTAUserMsg_WorldLineDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_WorldLine> {
} _CDOTAUserMsg_WorldLine_default_instance_;
class CDOTAUserMsg_ChatWheelDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_ChatWheel> {
} _CDOTAUserMsg_ChatWheel_default_instance_;
class CDOTAUserMsg_ReceivedXmasGiftDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_ReceivedXmasGift> {
} _CDOTAUserMsg_ReceivedXmasGift_default_instance_;
class CDOTAUserMsg_ShowSurveyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_ShowSurvey> {
} _CDOTAUserMsg_ShowSurvey_default_instance_;
class CDOTAUserMsg_UpdateSharedContentDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_UpdateSharedContent> {
} _CDOTAUserMsg_UpdateSharedContent_default_instance_;
class CDOTAUserMsg_TutorialRequestExpDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_TutorialRequestExp> {
} _CDOTAUserMsg_TutorialRequestExp_default_instance_;
class CDOTAUserMsg_TutorialFadeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_TutorialFade> {
} _CDOTAUserMsg_TutorialFade_default_instance_;
class CDOTAUserMsg_TutorialPingMinimapDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_TutorialPingMinimap> {
} _CDOTAUserMsg_TutorialPingMinimap_default_instance_;
class CDOTAUserMsg_GamerulesStateChangedDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_GamerulesStateChanged> {
} _CDOTAUserMsg_GamerulesStateChanged_default_instance_;
class CDOTAUserMsg_AddQuestLogEntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_AddQuestLogEntry> {
} _CDOTAUserMsg_AddQuestLogEntry_default_instance_;
class CDOTAUserMsg_SendStatPopupDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_SendStatPopup> {
} _CDOTAUserMsg_SendStatPopup_default_instance_;
class CDOTAUserMsg_DismissAllStatPopupsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_DismissAllStatPopups> {
} _CDOTAUserMsg_DismissAllStatPopups_default_instance_;
class CDOTAUserMsg_SendRoshanSpectatorPhaseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_SendRoshanSpectatorPhase> {
} _CDOTAUserMsg_SendRoshanSpectatorPhase_default_instance_;
class CDOTAUserMsg_SendRoshanPopupDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_SendRoshanPopup> {
} _CDOTAUserMsg_SendRoshanPopup_default_instance_;
class CDOTAUserMsg_SendFinalGoldDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_SendFinalGold> {
} _CDOTAUserMsg_SendFinalGold_default_instance_;
class CDOTAUserMsg_CustomMsgDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_CustomMsg> {
} _CDOTAUserMsg_CustomMsg_default_instance_;
class CDOTAUserMsg_CoachHUDPingDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_CoachHUDPing> {
} _CDOTAUserMsg_CoachHUDPing_default_instance_;
class CDOTAUserMsg_ClientLoadGridNavDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_ClientLoadGridNav> {
} _CDOTAUserMsg_ClientLoadGridNav_default_instance_;
class CDOTAUserMsg_TE_ProjectileDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_TE_Projectile> {
} _CDOTAUserMsg_TE_Projectile_default_instance_;
class CDOTAUserMsg_TE_ProjectileLocDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_TE_ProjectileLoc> {
} _CDOTAUserMsg_TE_ProjectileLoc_default_instance_;
class CDOTAUserMsg_TE_DotaBloodImpactDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_TE_DotaBloodImpact> {
} _CDOTAUserMsg_TE_DotaBloodImpact_default_instance_;
class CDOTAUserMsg_AbilityPingDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_AbilityPing> {
} _CDOTAUserMsg_AbilityPing_default_instance_;
class CDOTAUserMsg_TE_UnitAnimationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_TE_UnitAnimation> {
} _CDOTAUserMsg_TE_UnitAnimation_default_instance_;
class CDOTAUserMsg_TE_UnitAnimationEndDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_TE_UnitAnimationEnd> {
} _CDOTAUserMsg_TE_UnitAnimationEnd_default_instance_;
class CDOTAUserMsg_ShowGenericPopupDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_ShowGenericPopup> {
} _CDOTAUserMsg_ShowGenericPopup_default_instance_;
class CDOTAUserMsg_VoteStartDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_VoteStart> {
} _CDOTAUserMsg_VoteStart_default_instance_;
class CDOTAUserMsg_VoteUpdateDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_VoteUpdate> {
} _CDOTAUserMsg_VoteUpdate_default_instance_;
class CDOTAUserMsg_VoteEndDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_VoteEnd> {
} _CDOTAUserMsg_VoteEnd_default_instance_;
class CDOTAUserMsg_BoosterStatePlayerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_BoosterStatePlayer> {
} _CDOTAUserMsg_BoosterStatePlayer_default_instance_;
class CDOTAUserMsg_BoosterStateDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_BoosterState> {
} _CDOTAUserMsg_BoosterState_default_instance_;
class CDOTAUserMsg_PlayerMMRDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_PlayerMMR> {
} _CDOTAUserMsg_PlayerMMR_default_instance_;
class CDOTAUserMsg_AbilityStealDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_AbilitySteal> {
} _CDOTAUserMsg_AbilitySteal_default_instance_;
class CDOTAUserMsg_StatsHeroLookupDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_StatsHeroLookup> {
} _CDOTAUserMsg_StatsHeroLookup_default_instance_;
class CDOTAUserMsg_StatsHeroPositionInfo_PositionPairDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_StatsHeroPositionInfo_PositionPair> {
} _CDOTAUserMsg_StatsHeroPositionInfo_PositionPair_default_instance_;
class CDOTAUserMsg_StatsHeroPositionInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_StatsHeroPositionInfo> {
} _CDOTAUserMsg_StatsHeroPositionInfo_default_instance_;
class CDOTAUserMsg_StatsHeroMinuteDetailsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_StatsHeroMinuteDetails> {
} _CDOTAUserMsg_StatsHeroMinuteDetails_default_instance_;
class CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformanceDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance> {
} _CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance_default_instance_;
class CDOTAUserMsg_StatsTeamMinuteDetailsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_StatsTeamMinuteDetails> {
} _CDOTAUserMsg_StatsTeamMinuteDetails_default_instance_;
class CDOTAUserMsg_StatsPlayerKillShareDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_StatsPlayerKillShare> {
} _CDOTAUserMsg_StatsPlayerKillShare_default_instance_;
class CDOTAUserMsg_StatsKillDetailsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_StatsKillDetails> {
} _CDOTAUserMsg_StatsKillDetails_default_instance_;
class CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetailsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails> {
} _CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails_default_instance_;
class CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetailsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails> {
} _CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails_default_instance_;
class CDOTAUserMsg_StatsMatchDetailsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_StatsMatchDetails> {
} _CDOTAUserMsg_StatsMatchDetails_default_instance_;
class CDOTAUserMsg_MiniTauntDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_MiniTaunt> {
} _CDOTAUserMsg_MiniTaunt_default_instance_;
class CDOTAUserMsg_SpeechBubbleDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_SpeechBubble> {
} _CDOTAUserMsg_SpeechBubble_default_instance_;
class CDOTAUserMsg_CustomHeaderMessageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_CustomHeaderMessage> {
} _CDOTAUserMsg_CustomHeaderMessage_default_instance_;
class CMsgHeroAbilityStatDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgHeroAbilityStat> {
} _CMsgHeroAbilityStat_default_instance_;
class CMsgCombatAnalyzerPlayerStatDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgCombatAnalyzerPlayerStat> {
} _CMsgCombatAnalyzerPlayerStat_default_instance_;
class CMsgCombatAnalyzerStatsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgCombatAnalyzerStats> {
} _CMsgCombatAnalyzerStats_default_instance_;
class CDOTAUserMsg_BeastChatDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_BeastChat> {
} _CDOTAUserMsg_BeastChat_default_instance_;
class CDOTAUserMsg_CustomHudElement_CreateDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_CustomHudElement_Create> {
} _CDOTAUserMsg_CustomHudElement_Create_default_instance_;
class CDOTAUserMsg_CustomHudElement_ModifyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_CustomHudElement_Modify> {
} _CDOTAUserMsg_CustomHudElement_Modify_default_instance_;
class CDOTAUserMsg_CustomHudElement_DestroyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_CustomHudElement_Destroy> {
} _CDOTAUserMsg_CustomHudElement_Destroy_default_instance_;
class CDOTAUserMsg_CompendiumStatePlayerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_CompendiumStatePlayer> {
} _CDOTAUserMsg_CompendiumStatePlayer_default_instance_;
class CDOTAUserMsg_CompendiumStateDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_CompendiumState> {
} _CDOTAUserMsg_CompendiumState_default_instance_;
class CDOTAUserMsg_ProjectionAbilityDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_ProjectionAbility> {
} _CDOTAUserMsg_ProjectionAbility_default_instance_;
class CDOTAUserMsg_ProjectionEventDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_ProjectionEvent> {
} _CDOTAUserMsg_ProjectionEvent_default_instance_;
class CDOTAUserMsg_XPAlertDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_XPAlert> {
} _CDOTAUserMsg_XPAlert_default_instance_;
class CDOTAUserMsg_UpdateQuestProgressDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_UpdateQuestProgress> {
} _CDOTAUserMsg_UpdateQuestProgress_default_instance_;
class CDOTAUserMsg_QuestStatusDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_QuestStatus> {
} _CDOTAUserMsg_QuestStatus_default_instance_;
class CDOTAUserMsg_SuggestHeroPickDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_SuggestHeroPick> {
} _CDOTAUserMsg_SuggestHeroPick_default_instance_;
class CDOTAUserMsg_SuggestHeroRoleDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_SuggestHeroRole> {
} _CDOTAUserMsg_SuggestHeroRole_default_instance_;
class CDOTAUserMsg_KillcamDamageTakenDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_KillcamDamageTaken> {
} _CDOTAUserMsg_KillcamDamageTaken_default_instance_;
class CDOTAUserMsg_SelectPenaltyGoldDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_SelectPenaltyGold> {
} _CDOTAUserMsg_SelectPenaltyGold_default_instance_;
class CDOTAUserMsg_RollDiceResultDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_RollDiceResult> {
} _CDOTAUserMsg_RollDiceResult_default_instance_;
class CDOTAUserMsg_FlipCoinResultDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_FlipCoinResult> {
} _CDOTAUserMsg_FlipCoinResult_default_instance_;
class CDOTAUserMessage_RequestItemSuggestionsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMessage_RequestItemSuggestions> {
} _CDOTAUserMessage_RequestItemSuggestions_default_instance_;
class CDOTAUserMessage_TeamCaptainChangedDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMessage_TeamCaptainChanged> {
} _CDOTAUserMessage_TeamCaptainChanged_default_instance_;
class CDOTAUserMsg_ChatWheelCooldownDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAUserMsg_ChatWheelCooldown> {
} _CDOTAUserMsg_ChatWheelCooldown_default_instance_;

namespace protobuf_dota_5fusermessages_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[142];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[17];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_AIDebugLine, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_AIDebugLine, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_AIDebugLine, message_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_Ping, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_Ping, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_Ping, ping_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_Ping, loss_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SwapVerify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SwapVerify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SwapVerify, player_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ChatEvent, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ChatEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ChatEvent, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ChatEvent, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ChatEvent, playerid_1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ChatEvent, playerid_2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ChatEvent, playerid_3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ChatEvent, playerid_4_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ChatEvent, playerid_5_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ChatEvent, playerid_6_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ChatEvent, value2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ChatEvent, value3_),
  4,
  0,
  5,
  6,
  7,
  8,
  9,
  3,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CombatLogShowDeath, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CombatLogShowDeath, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_BotChat, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_BotChat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_BotChat, player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_BotChat, message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_BotChat, target_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_BotChat, team_only_),
  2,
  0,
  1,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CombatHeroPositions, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CombatHeroPositions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CombatHeroPositions, index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CombatHeroPositions, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CombatHeroPositions, world_pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CombatHeroPositions, health_),
  1,
  2,
  0,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability, ability_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability, damage_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_MiniKillCamInfo_Attacker, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_MiniKillCamInfo_Attacker, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_MiniKillCamInfo_Attacker, attacker_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_MiniKillCamInfo_Attacker, total_damage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_MiniKillCamInfo_Attacker, abilities_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_MiniKillCamInfo_Attacker, attacker_name_),
  1,
  2,
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_MiniKillCamInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_MiniKillCamInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_MiniKillCamInfo, attackers_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_GlobalLightColor, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_GlobalLightColor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_GlobalLightColor, color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_GlobalLightColor, duration_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_GlobalLightDirection, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_GlobalLightDirection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_GlobalLightDirection, direction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_GlobalLightDirection, duration_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_LocationPing, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_LocationPing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_LocationPing, player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_LocationPing, location_ping_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ItemAlert, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ItemAlert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ItemAlert, player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ItemAlert, item_alert_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_EnemyItemAlert, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_EnemyItemAlert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_EnemyItemAlert, player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_EnemyItemAlert, target_player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_EnemyItemAlert, itemid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_EnemyItemAlert, rune_type_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ModifierAlert, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ModifierAlert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ModifierAlert, player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ModifierAlert, class_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ModifierAlert, stack_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ModifierAlert, is_debuff_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ModifierAlert, target_entindex_),
  1,
  0,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_HPManaAlert, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_HPManaAlert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_HPManaAlert, player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_HPManaAlert, target_entindex_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_GlyphAlert, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_GlyphAlert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_GlyphAlert, player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_GlyphAlert, negative_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_WillPurchaseAlert, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_WillPurchaseAlert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_WillPurchaseAlert, itemid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_WillPurchaseAlert, player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_WillPurchaseAlert, gold_remaining_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_WillPurchaseAlert, suggestion_player_id_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_BuyBackStateAlert, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_BuyBackStateAlert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_BuyBackStateAlert, player_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_QuickBuyAlert, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_QuickBuyAlert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_QuickBuyAlert, player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_QuickBuyAlert, itemid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_QuickBuyAlert, gold_required_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CourierKilledAlert_LostItem, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CourierKilledAlert_LostItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CourierKilledAlert_LostItem, item_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CourierKilledAlert_LostItem, quantity_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CourierKilledAlert, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CourierKilledAlert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CourierKilledAlert, team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CourierKilledAlert, gold_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CourierKilledAlert, entity_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CourierKilledAlert, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CourierKilledAlert, lost_items_),
  0,
  1,
  2,
  3,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_MinimapEvent, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_MinimapEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_MinimapEvent, event_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_MinimapEvent, entity_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_MinimapEvent, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_MinimapEvent, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_MinimapEvent, duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_MinimapEvent, target_entity_handle_),
  0,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_MapLine, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_MapLine, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_MapLine, player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_MapLine, mapline_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_MinimapDebugPoint, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_MinimapDebugPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_MinimapDebugPoint, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_MinimapDebugPoint, color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_MinimapDebugPoint, size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_MinimapDebugPoint, duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_MinimapDebugPoint, index_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CreateLinearProjectile, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CreateLinearProjectile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CreateLinearProjectile, origin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CreateLinearProjectile, velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CreateLinearProjectile, entindex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CreateLinearProjectile, particle_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CreateLinearProjectile, handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CreateLinearProjectile, acceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CreateLinearProjectile, max_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CreateLinearProjectile, fow_radius_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CreateLinearProjectile, sticky_fow_reveal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CreateLinearProjectile, distance_),
  0,
  1,
  4,
  3,
  5,
  2,
  6,
  7,
  8,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_DestroyLinearProjectile, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_DestroyLinearProjectile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_DestroyLinearProjectile, handle_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_DodgeTrackingProjectiles, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_DodgeTrackingProjectiles, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_DodgeTrackingProjectiles, entindex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_DodgeTrackingProjectiles, attacks_only_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SpectatorPlayerClick, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SpectatorPlayerClick, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SpectatorPlayerClick, entindex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SpectatorPlayerClick, order_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SpectatorPlayerClick, target_index_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SpectatorPlayerUnitOrders, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SpectatorPlayerUnitOrders, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SpectatorPlayerUnitOrders, entindex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SpectatorPlayerUnitOrders, order_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SpectatorPlayerUnitOrders, units_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SpectatorPlayerUnitOrders, target_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SpectatorPlayerUnitOrders, ability_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SpectatorPlayerUnitOrders, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SpectatorPlayerUnitOrders, queue_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SpectatorPlayerUnitOrders, sequence_number_),
  1,
  2,
  ~0u,
  3,
  4,
  0,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_NevermoreRequiem, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_NevermoreRequiem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_NevermoreRequiem, entity_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_NevermoreRequiem, lines_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_NevermoreRequiem, origin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_NevermoreRequiem, reverse_),
  1,
  2,
  0,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_InvalidCommand, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_InvalidCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_InvalidCommand, message_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_HudError, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_HudError, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_HudError, order_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SharedCooldown, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SharedCooldown, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SharedCooldown, entindex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SharedCooldown, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SharedCooldown, cooldown_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SharedCooldown, name_index_),
  1,
  0,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SetNextAutobuyItem, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SetNextAutobuyItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SetNextAutobuyItem, name_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_HalloweenDrops, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_HalloweenDrops, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_HalloweenDrops, item_defs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_HalloweenDrops, player_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_HalloweenDrops, prize_list_),
  ~0u,
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_PredictionResult_Prediction, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_PredictionResult_Prediction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_PredictionResult_Prediction, item_def_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_PredictionResult_Prediction, num_correct_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_PredictionResult_Prediction, num_fails_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_PredictionResult_Prediction, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_PredictionResult_Prediction, granted_item_defs_),
  0,
  1,
  2,
  3,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_PredictionResult, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_PredictionResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_PredictionResult, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_PredictionResult, match_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_PredictionResult, correct_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_PredictionResult, predictions_),
  1,
  0,
  2,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAResponseQuerySerialized_Fact, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAResponseQuerySerialized_Fact, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAResponseQuerySerialized_Fact, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAResponseQuerySerialized_Fact, valtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAResponseQuerySerialized_Fact, val_numeric_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAResponseQuerySerialized_Fact, val_string_),
  1,
  3,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAResponseQuerySerialized, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAResponseQuerySerialized, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAResponseQuerySerialized, facts_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASpeechMatchOnClient, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASpeechMatchOnClient, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASpeechMatchOnClient, concept_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASpeechMatchOnClient, recipient_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASpeechMatchOnClient, responsequery_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASpeechMatchOnClient, randomseed_),
  1,
  2,
  0,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent_Speech, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent_Speech, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent_Speech, concept_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent_Speech, response_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent_Speech, recipient_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent_Speech, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent_Speech, muteable_),
  1,
  0,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent_SpeechMute, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent_SpeechMute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent_SpeechMute, delay_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent_AddGesture, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent_AddGesture, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent_AddGesture, activity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent_AddGesture, slot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent_AddGesture, fade_in_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent_AddGesture, fade_out_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent_AddGesture, playback_rate_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent_RemoveGesture, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent_RemoveGesture, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent_RemoveGesture, activity_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent_BloodImpact, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent_BloodImpact, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent_BloodImpact, scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent_BloodImpact, x_normal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent_BloodImpact, y_normal_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent_FadeGesture, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent_FadeGesture, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent_FadeGesture, activity_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent, msg_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent, entity_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent, speech_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent, speech_mute_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent, add_gesture_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent, remove_gesture_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent, blood_impact_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent, fade_gesture_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent, speech_match_on_client_),
  7,
  8,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ItemPurchased, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ItemPurchased, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ItemPurchased, item_index_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ItemFound, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ItemFound, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ItemFound, player_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ItemFound, quality_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ItemFound, rarity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ItemFound, method_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ItemFound, itemdef_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_ReleaseParticleIndex, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_ReleaseParticleIndex, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_CreateParticle, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_CreateParticle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_CreateParticle, particle_name_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_CreateParticle, attach_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_CreateParticle, entity_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_CreateParticle, entity_handle_for_modifiers_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_DestroyParticle, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_DestroyParticle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_DestroyParticle, destroy_immediately_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_DestroyParticleInvolving, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_DestroyParticleInvolving, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_DestroyParticleInvolving, destroy_immediately_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_DestroyParticleInvolving, entity_handle_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticle, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticle, control_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticle, position_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticleFwd, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticleFwd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticleFwd, control_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticleFwd, forward_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticleOrient, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticleOrient, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticleOrient, control_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticleOrient, forward_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticleOrient, right_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticleOrient, up_),
  3,
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticleFallback, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticleFallback, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticleFallback, control_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticleFallback, position_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticleOffset, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticleOffset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticleOffset, control_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticleOffset, origin_offset_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticleEnt, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticleEnt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticleEnt, control_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticleEnt, entity_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticleEnt, attach_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticleEnt, attachment_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticleEnt, fallback_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticleEnt, include_wearables_),
  1,
  2,
  3,
  4,
  0,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen, set_frozen_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw, should_draw_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_ChangeControlPointAttachment, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_ChangeControlPointAttachment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_ChangeControlPointAttachment, attachment_old_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_ChangeControlPointAttachment, attachment_new_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_ChangeControlPointAttachment, entity_handle_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateEntityPosition, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateEntityPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateEntityPosition, entity_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateEntityPosition, position_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_SetParticleFoWProperties, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_SetParticleFoWProperties, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_SetParticleFoWProperties, fow_control_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_SetParticleFoWProperties, fow_control_point2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_SetParticleFoWProperties, fow_radius_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_SetParticleText, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_SetParticleText, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_SetParticleText, text_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager, index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager, release_particle_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager, create_particle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager, destroy_particle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager, destroy_particle_involving_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager, update_particle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager, update_particle_fwd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager, update_particle_orient_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager, update_particle_fallback_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager, update_particle_offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager, update_particle_ent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager, update_particle_should_draw_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager, update_particle_set_frozen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager, change_control_point_attachment_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager, update_entity_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager, set_particle_fow_properties_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager, set_particle_text_),
  16,
  17,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_OverheadEvent, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_OverheadEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_OverheadEvent, message_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_OverheadEvent, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_OverheadEvent, target_player_entindex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_OverheadEvent, target_entindex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_OverheadEvent, source_player_entindex_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_TutorialTipInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_TutorialTipInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_TutorialTipInfo, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_TutorialTipInfo, progress_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_TutorialFinish, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_TutorialFinish, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_TutorialFinish, heading_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_TutorialFinish, emblem_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_TutorialFinish, body_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_TutorialFinish, success_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_TutorialMinimapPosition, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_TutorialMinimapPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SendGenericToolTip, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SendGenericToolTip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SendGenericToolTip, title_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SendGenericToolTip, text_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SendGenericToolTip, entindex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SendGenericToolTip, close_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_WorldLine, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_WorldLine, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_WorldLine, player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_WorldLine, worldline_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ChatWheel, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ChatWheel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ChatWheel, chat_message_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ChatWheel, player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ChatWheel, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ChatWheel, param_hero_id_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ReceivedXmasGift, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ReceivedXmasGift, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ReceivedXmasGift, player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ReceivedXmasGift, item_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ReceivedXmasGift, inventory_slot_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ShowSurvey, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ShowSurvey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ShowSurvey, survey_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ShowSurvey, match_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ShowSurvey, response_style_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ShowSurvey, teammate_hero_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ShowSurvey, teammate_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ShowSurvey, teammate_account_id_),
  3,
  2,
  0,
  4,
  1,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UpdateSharedContent, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UpdateSharedContent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UpdateSharedContent, slot_type_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_TutorialRequestExp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_TutorialRequestExp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_TutorialFade, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_TutorialFade, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_TutorialFade, tgt_alpha_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_TutorialPingMinimap, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_TutorialPingMinimap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_TutorialPingMinimap, player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_TutorialPingMinimap, pos_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_TutorialPingMinimap, pos_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_TutorialPingMinimap, pos_z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_TutorialPingMinimap, entity_index_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_GamerulesStateChanged, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_GamerulesStateChanged, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_GamerulesStateChanged, state_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_AddQuestLogEntry, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_AddQuestLogEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_AddQuestLogEntry, npc_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_AddQuestLogEntry, npc_dialog_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SendStatPopup, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SendStatPopup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SendStatPopup, player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SendStatPopup, statpopup_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_DismissAllStatPopups, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_DismissAllStatPopups, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_DismissAllStatPopups, dismissallmsg_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SendRoshanSpectatorPhase, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SendRoshanSpectatorPhase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SendRoshanSpectatorPhase, phase_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SendRoshanSpectatorPhase, phase_start_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SendRoshanSpectatorPhase, phase_length_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SendRoshanPopup, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SendRoshanPopup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SendRoshanPopup, reclaimed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SendRoshanPopup, gametime_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SendFinalGold, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SendFinalGold, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SendFinalGold, reliable_gold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SendFinalGold, unreliable_gold_),
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CustomMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CustomMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CustomMsg, message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CustomMsg, player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CustomMsg, value_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CoachHUDPing, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CoachHUDPing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CoachHUDPing, player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CoachHUDPing, hud_ping_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ClientLoadGridNav, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ClientLoadGridNav, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_TE_Projectile, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_TE_Projectile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_TE_Projectile, hsource_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_TE_Projectile, htarget_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_TE_Projectile, movespeed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_TE_Projectile, sourceattachment_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_TE_Projectile, particlesystemhandle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_TE_Projectile, dodgeable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_TE_Projectile, isattack_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_TE_Projectile, isevaded_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_TE_Projectile, expiretime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_TE_Projectile, maximpacttime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_TE_Projectile, colorgemcolor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_TE_Projectile, launch_tick_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_TE_ProjectileLoc, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_TE_ProjectileLoc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_TE_ProjectileLoc, vsourceloc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_TE_ProjectileLoc, htarget_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_TE_ProjectileLoc, movespeed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_TE_ProjectileLoc, particlesystemhandle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_TE_ProjectileLoc, dodgeable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_TE_ProjectileLoc, isattack_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_TE_ProjectileLoc, isevaded_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_TE_ProjectileLoc, expiretime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_TE_ProjectileLoc, vtargetloc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_TE_ProjectileLoc, colorgemcolor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_TE_ProjectileLoc, launch_tick_),
  0,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  1,
  9,
  10,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_TE_DotaBloodImpact, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_TE_DotaBloodImpact, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_TE_DotaBloodImpact, entity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_TE_DotaBloodImpact, scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_TE_DotaBloodImpact, xnormal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_TE_DotaBloodImpact, ynormal_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_AbilityPing, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_AbilityPing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_AbilityPing, player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_AbilityPing, ability_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_AbilityPing, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_AbilityPing, cooldown_seconds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_AbilityPing, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_AbilityPing, passive_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_AbilityPing, mana_needed_),
  0,
  1,
  6,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_TE_UnitAnimation, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_TE_UnitAnimation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_TE_UnitAnimation, entity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_TE_UnitAnimation, sequencevariant_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_TE_UnitAnimation, playbackrate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_TE_UnitAnimation, castpoint_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_TE_UnitAnimation, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_TE_UnitAnimation, activity_),
  0,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_TE_UnitAnimationEnd, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_TE_UnitAnimationEnd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_TE_UnitAnimationEnd, entity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_TE_UnitAnimationEnd, snap_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ShowGenericPopup, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ShowGenericPopup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ShowGenericPopup, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ShowGenericPopup, body_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ShowGenericPopup, param1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ShowGenericPopup, param2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ShowGenericPopup, tint_screen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ShowGenericPopup, show_no_other_dialogs_),
  0,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_VoteStart, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_VoteStart, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_VoteStart, title_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_VoteStart, duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_VoteStart, choice_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_VoteStart, choices_),
  0,
  1,
  2,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_VoteUpdate, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_VoteUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_VoteUpdate, choice_counts_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_VoteEnd, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_VoteEnd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_VoteEnd, selected_choice_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_BoosterStatePlayer, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_BoosterStatePlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_BoosterStatePlayer, player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_BoosterStatePlayer, bonus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_BoosterStatePlayer, event_bonus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_BoosterStatePlayer, bonus_item_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_BoosterStatePlayer, event_bonus_item_id_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_BoosterState, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_BoosterState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_BoosterState, boosted_players_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_PlayerMMR, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_PlayerMMR, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_PlayerMMR, mmr_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_AbilitySteal, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_AbilitySteal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_AbilitySteal, player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_AbilitySteal, ability_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_AbilitySteal, ability_level_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsHeroLookup, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsHeroLookup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsHeroLookup, player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsHeroLookup, hero_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsHeroLookup, hero_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsHeroLookup, persona_),
  2,
  3,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsHeroPositionInfo_PositionPair, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsHeroPositionInfo_PositionPair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsHeroPositionInfo_PositionPair, position_category_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsHeroPositionInfo_PositionPair, position_count_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsHeroPositionInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsHeroPositionInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsHeroPositionInfo, average_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsHeroPositionInfo, position_details_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsHeroMinuteDetails, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsHeroMinuteDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsHeroMinuteDetails, last_hits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsHeroMinuteDetails, hero_kills_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsHeroMinuteDetails, hero_damage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsHeroMinuteDetails, tower_damage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsHeroMinuteDetails, position_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsHeroMinuteDetails, total_xp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsHeroMinuteDetails, net_worth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsHeroMinuteDetails, harvested_creep_gold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsHeroMinuteDetails, claimed_farm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsHeroMinuteDetails, wards_placed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsHeroMinuteDetails, runes_collected_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsHeroMinuteDetails, tps_used_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsHeroMinuteDetails, mana_spent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsHeroMinuteDetails, damage_absorbed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsHeroMinuteDetails, damage_done_),
  1,
  2,
  3,
  4,
  0,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance, location_category_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance, stat_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance, value_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsTeamMinuteDetails, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsTeamMinuteDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsTeamMinuteDetails, player_stats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsTeamMinuteDetails, tower_kills_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsTeamMinuteDetails, barrack_kills_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsTeamMinuteDetails, available_lane_creep_gold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsTeamMinuteDetails, balance_kill_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsTeamMinuteDetails, balance_tower_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsTeamMinuteDetails, balance_barracks_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsTeamMinuteDetails, balance_gold_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsTeamMinuteDetails, balance_xp_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsTeamMinuteDetails, lane_performance_),
  ~0u,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsPlayerKillShare, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsPlayerKillShare, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsPlayerKillShare, player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsPlayerKillShare, kill_share_percent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsPlayerKillShare, player_loc_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsPlayerKillShare, player_loc_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsPlayerKillShare, health_percent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsPlayerKillShare, mana_percent_),
  0,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsKillDetails, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsKillDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsKillDetails, victim_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsKillDetails, kill_shares_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsKillDetails, damage_to_kill_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsKillDetails, effective_health_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsKillDetails, death_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsKillDetails, killer_id_),
  0,
  ~0u,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails, participants_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails, deaths_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails, gold_delta_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails, xp_delta_),
  ~0u,
  ~0u,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails, start_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails, end_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails, radiant_fight_details_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails, dire_fight_details_),
  2,
  3,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsMatchDetails, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsMatchDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsMatchDetails, hero_lookup_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsMatchDetails, radiant_stats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsMatchDetails, dire_stats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsMatchDetails, radiant_kills_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsMatchDetails, dire_kills_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_StatsMatchDetails, fight_details_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_MiniTaunt, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_MiniTaunt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_MiniTaunt, taunting_player_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SpeechBubble, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SpeechBubble, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SpeechBubble, destroy_all_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CustomHeaderMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CustomHeaderMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CustomHeaderMessage, player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CustomHeaderMessage, duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CustomHeaderMessage, message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CustomHeaderMessage, value_),
  1,
  2,
  0,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHeroAbilityStat, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHeroAbilityStat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHeroAbilityStat, stat_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHeroAbilityStat, int_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgHeroAbilityStat, float_value_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCombatAnalyzerPlayerStat, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCombatAnalyzerPlayerStat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCombatAnalyzerPlayerStat, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCombatAnalyzerPlayerStat, hero_ability_stats_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCombatAnalyzerStats, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCombatAnalyzerStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCombatAnalyzerStats, match_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCombatAnalyzerStats, player_stats_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_BeastChat, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_BeastChat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_BeastChat, team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_BeastChat, format_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_BeastChat, message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_BeastChat, target_),
  3,
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CustomHudElement_Create, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CustomHudElement_Create, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CustomHudElement_Create, element_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CustomHudElement_Create, layout_filename_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CustomHudElement_Create, data_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CustomHudElement_Modify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CustomHudElement_Modify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CustomHudElement_Modify, element_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CustomHudElement_Modify, modify_visible_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CustomHudElement_Modify, data_),
  0,
  2,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CustomHudElement_Destroy, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CustomHudElement_Destroy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CustomHudElement_Destroy, element_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CompendiumStatePlayer, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CompendiumStatePlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CompendiumStatePlayer, player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CompendiumStatePlayer, level_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CompendiumState, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CompendiumState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CompendiumState, compendium_players_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ProjectionAbility, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ProjectionAbility, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ProjectionAbility, ability_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ProjectionAbility, caster_ent_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ProjectionAbility, caster_team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ProjectionAbility, channel_end_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ProjectionAbility, origin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ProjectionAbility, track_caster_only_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ProjectionAbility, end_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ProjectionAbility, victim_ent_index_),
  1,
  2,
  3,
  4,
  0,
  5,
  6,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ProjectionEvent, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ProjectionEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ProjectionEvent, event_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ProjectionEvent, team_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_XPAlert, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_XPAlert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_XPAlert, player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_XPAlert, target_entindex_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UpdateQuestProgress, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UpdateQuestProgress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_QuestStatus, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_QuestStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_QuestStatus, player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_QuestStatus, quest_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_QuestStatus, challenge_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_QuestStatus, progress_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_QuestStatus, goal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_QuestStatus, query_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_QuestStatus, fail_gametime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_QuestStatus, item_id_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SuggestHeroPick, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SuggestHeroPick, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SuggestHeroPick, player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SuggestHeroPick, hero_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SuggestHeroPick, ban_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SuggestHeroRole, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SuggestHeroRole, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SuggestHeroRole, player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SuggestHeroRole, hero_role_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_KillcamDamageTaken, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_KillcamDamageTaken, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_KillcamDamageTaken, player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_KillcamDamageTaken, damage_taken_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_KillcamDamageTaken, item_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_KillcamDamageTaken, item_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_KillcamDamageTaken, hero_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_KillcamDamageTaken, damage_color_),
  2,
  3,
  4,
  5,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SelectPenaltyGold, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SelectPenaltyGold, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SelectPenaltyGold, player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SelectPenaltyGold, cost_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_RollDiceResult, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_RollDiceResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_RollDiceResult, player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_RollDiceResult, channel_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_RollDiceResult, roll_min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_RollDiceResult, roll_max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_RollDiceResult, result_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_FlipCoinResult, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_FlipCoinResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_FlipCoinResult, player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_FlipCoinResult, channel_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_FlipCoinResult, result_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMessage_RequestItemSuggestions, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMessage_RequestItemSuggestions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMessage_RequestItemSuggestions, player_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMessage_TeamCaptainChanged, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMessage_TeamCaptainChanged, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMessage_TeamCaptainChanged, team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMessage_TeamCaptainChanged, captain_player_id_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ChatWheelCooldown, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ChatWheelCooldown, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ChatWheelCooldown, message_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ChatWheelCooldown, cooldown_remaining_),
  0,
  1,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 6, sizeof(CDOTAUserMsg_AIDebugLine)},
  { 7, 14, sizeof(CDOTAUserMsg_Ping)},
  { 16, 22, sizeof(CDOTAUserMsg_SwapVerify)},
  { 23, 38, sizeof(CDOTAUserMsg_ChatEvent)},
  { 48, 53, sizeof(CDOTAUserMsg_CombatLogShowDeath)},
  { 53, 62, sizeof(CDOTAUserMsg_BotChat)},
  { 66, 75, sizeof(CDOTAUserMsg_CombatHeroPositions)},
  { 79, 86, sizeof(CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability)},
  { 88, 97, sizeof(CDOTAUserMsg_MiniKillCamInfo_Attacker)},
  { 101, 107, sizeof(CDOTAUserMsg_MiniKillCamInfo)},
  { 108, 115, sizeof(CDOTAUserMsg_GlobalLightColor)},
  { 117, 124, sizeof(CDOTAUserMsg_GlobalLightDirection)},
  { 126, 133, sizeof(CDOTAUserMsg_LocationPing)},
  { 135, 142, sizeof(CDOTAUserMsg_ItemAlert)},
  { 144, 153, sizeof(CDOTAUserMsg_EnemyItemAlert)},
  { 157, 167, sizeof(CDOTAUserMsg_ModifierAlert)},
  { 172, 179, sizeof(CDOTAUserMsg_HPManaAlert)},
  { 181, 188, sizeof(CDOTAUserMsg_GlyphAlert)},
  { 190, 199, sizeof(CDOTAUserMsg_WillPurchaseAlert)},
  { 203, 209, sizeof(CDOTAUserMsg_BuyBackStateAlert)},
  { 210, 218, sizeof(CDOTAUserMsg_QuickBuyAlert)},
  { 221, 228, sizeof(CDOTAUserMsg_CourierKilledAlert_LostItem)},
  { 230, 240, sizeof(CDOTAUserMsg_CourierKilledAlert)},
  { 245, 256, sizeof(CDOTAUserMsg_MinimapEvent)},
  { 262, 269, sizeof(CDOTAUserMsg_MapLine)},
  { 271, 281, sizeof(CDOTAUserMsg_MinimapDebugPoint)},
  { 286, 301, sizeof(CDOTAUserMsg_CreateLinearProjectile)},
  { 311, 317, sizeof(CDOTAUserMsg_DestroyLinearProjectile)},
  { 318, 325, sizeof(CDOTAUserMsg_DodgeTrackingProjectiles)},
  { 327, 335, sizeof(CDOTAUserMsg_SpectatorPlayerClick)},
  { 338, 351, sizeof(CDOTAUserMsg_SpectatorPlayerUnitOrders)},
  { 359, 368, sizeof(CDOTAUserMsg_NevermoreRequiem)},
  { 372, 378, sizeof(CDOTAUserMsg_InvalidCommand)},
  { 379, 385, sizeof(CDOTAUserMsg_HudError)},
  { 386, 395, sizeof(CDOTAUserMsg_SharedCooldown)},
  { 399, 405, sizeof(CDOTAUserMsg_SetNextAutobuyItem)},
  { 406, 414, sizeof(CDOTAUserMsg_HalloweenDrops)},
  { 417, 427, sizeof(CDOTAUserMsg_PredictionResult_Prediction)},
  { 432, 441, sizeof(CDOTAUserMsg_PredictionResult)},
  { 445, 454, sizeof(CDOTAResponseQuerySerialized_Fact)},
  { 458, 464, sizeof(CDOTAResponseQuerySerialized)},
  { 465, 474, sizeof(CDOTASpeechMatchOnClient)},
  { 478, 488, sizeof(CDOTAUserMsg_UnitEvent_Speech)},
  { 493, 499, sizeof(CDOTAUserMsg_UnitEvent_SpeechMute)},
  { 500, 510, sizeof(CDOTAUserMsg_UnitEvent_AddGesture)},
  { 515, 521, sizeof(CDOTAUserMsg_UnitEvent_RemoveGesture)},
  { 522, 530, sizeof(CDOTAUserMsg_UnitEvent_BloodImpact)},
  { 533, 539, sizeof(CDOTAUserMsg_UnitEvent_FadeGesture)},
  { 540, 554, sizeof(CDOTAUserMsg_UnitEvent)},
  { 563, 569, sizeof(CDOTAUserMsg_ItemPurchased)},
  { 570, 580, sizeof(CDOTAUserMsg_ItemFound)},
  { 585, 590, sizeof(CDOTAUserMsg_ParticleManager_ReleaseParticleIndex)},
  { 590, 599, sizeof(CDOTAUserMsg_ParticleManager_CreateParticle)},
  { 603, 609, sizeof(CDOTAUserMsg_ParticleManager_DestroyParticle)},
  { 610, 617, sizeof(CDOTAUserMsg_ParticleManager_DestroyParticleInvolving)},
  { 619, 626, sizeof(CDOTAUserMsg_ParticleManager_UpdateParticle)},
  { 628, 635, sizeof(CDOTAUserMsg_ParticleManager_UpdateParticleFwd)},
  { 637, 646, sizeof(CDOTAUserMsg_ParticleManager_UpdateParticleOrient)},
  { 650, 657, sizeof(CDOTAUserMsg_ParticleManager_UpdateParticleFallback)},
  { 659, 666, sizeof(CDOTAUserMsg_ParticleManager_UpdateParticleOffset)},
  { 668, 679, sizeof(CDOTAUserMsg_ParticleManager_UpdateParticleEnt)},
  { 685, 691, sizeof(CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen)},
  { 692, 698, sizeof(CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw)},
  { 699, 707, sizeof(CDOTAUserMsg_ParticleManager_ChangeControlPointAttachment)},
  { 710, 717, sizeof(CDOTAUserMsg_ParticleManager_UpdateEntityPosition)},
  { 719, 727, sizeof(CDOTAUserMsg_ParticleManager_SetParticleFoWProperties)},
  { 730, 736, sizeof(CDOTAUserMsg_ParticleManager_SetParticleText)},
  { 737, 760, sizeof(CDOTAUserMsg_ParticleManager)},
  { 778, 788, sizeof(CDOTAUserMsg_OverheadEvent)},
  { 793, 800, sizeof(CDOTAUserMsg_TutorialTipInfo)},
  { 802, 811, sizeof(CDOTAUserMsg_TutorialFinish)},
  { 815, 820, sizeof(CDOTAUserMsg_TutorialMinimapPosition)},
  { 820, 829, sizeof(CDOTAUserMsg_SendGenericToolTip)},
  { 833, 840, sizeof(CDOTAUserMsg_WorldLine)},
  { 842, 851, sizeof(CDOTAUserMsg_ChatWheel)},
  { 855, 863, sizeof(CDOTAUserMsg_ReceivedXmasGift)},
  { 866, 877, sizeof(CDOTAUserMsg_ShowSurvey)},
  { 883, 889, sizeof(CDOTAUserMsg_UpdateSharedContent)},
  { 890, 895, sizeof(CDOTAUserMsg_TutorialRequestExp)},
  { 895, 901, sizeof(CDOTAUserMsg_TutorialFade)},
  { 902, 912, sizeof(CDOTAUserMsg_TutorialPingMinimap)},
  { 917, 923, sizeof(CDOTAUserMsg_GamerulesStateChanged)},
  { 924, 931, sizeof(CDOTAUserMsg_AddQuestLogEntry)},
  { 933, 940, sizeof(CDOTAUserMsg_SendStatPopup)},
  { 942, 948, sizeof(CDOTAUserMsg_DismissAllStatPopups)},
  { 949, 957, sizeof(CDOTAUserMsg_SendRoshanSpectatorPhase)},
  { 960, 967, sizeof(CDOTAUserMsg_SendRoshanPopup)},
  { 969, 976, sizeof(CDOTAUserMsg_SendFinalGold)},
  { 978, 986, sizeof(CDOTAUserMsg_CustomMsg)},
  { 989, 996, sizeof(CDOTAUserMsg_CoachHUDPing)},
  { 998, 1003, sizeof(CDOTAUserMsg_ClientLoadGridNav)},
  { 1003, 1020, sizeof(CDOTAUserMsg_TE_Projectile)},
  { 1032, 1048, sizeof(CDOTAUserMsg_TE_ProjectileLoc)},
  { 1059, 1068, sizeof(CDOTAUserMsg_TE_DotaBloodImpact)},
  { 1072, 1084, sizeof(CDOTAUserMsg_AbilityPing)},
  { 1091, 1102, sizeof(CDOTAUserMsg_TE_UnitAnimation)},
  { 1108, 1115, sizeof(CDOTAUserMsg_TE_UnitAnimationEnd)},
  { 1117, 1128, sizeof(CDOTAUserMsg_ShowGenericPopup)},
  { 1134, 1143, sizeof(CDOTAUserMsg_VoteStart)},
  { 1147, 1153, sizeof(CDOTAUserMsg_VoteUpdate)},
  { 1154, 1160, sizeof(CDOTAUserMsg_VoteEnd)},
  { 1161, 1171, sizeof(CDOTAUserMsg_BoosterStatePlayer)},
  { 1176, 1182, sizeof(CDOTAUserMsg_BoosterState)},
  { 1183, 1189, sizeof(CDOTAUserMsg_PlayerMMR)},
  { 1190, 1198, sizeof(CDOTAUserMsg_AbilitySteal)},
  { 1201, 1210, sizeof(CDOTAUserMsg_StatsHeroLookup)},
  { 1214, 1221, sizeof(CDOTAUserMsg_StatsHeroPositionInfo_PositionPair)},
  { 1223, 1230, sizeof(CDOTAUserMsg_StatsHeroPositionInfo)},
  { 1232, 1252, sizeof(CDOTAUserMsg_StatsHeroMinuteDetails)},
  { 1267, 1275, sizeof(CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance)},
  { 1278, 1293, sizeof(CDOTAUserMsg_StatsTeamMinuteDetails)},
  { 1303, 1314, sizeof(CDOTAUserMsg_StatsPlayerKillShare)},
  { 1320, 1331, sizeof(CDOTAUserMsg_StatsKillDetails)},
  { 1337, 1346, sizeof(CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails)},
  { 1350, 1359, sizeof(CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails)},
  { 1363, 1374, sizeof(CDOTAUserMsg_StatsMatchDetails)},
  { 1380, 1386, sizeof(CDOTAUserMsg_MiniTaunt)},
  { 1387, 1393, sizeof(CDOTAUserMsg_SpeechBubble)},
  { 1394, 1403, sizeof(CDOTAUserMsg_CustomHeaderMessage)},
  { 1407, 1415, sizeof(CMsgHeroAbilityStat)},
  { 1418, 1425, sizeof(CMsgCombatAnalyzerPlayerStat)},
  { 1427, 1434, sizeof(CMsgCombatAnalyzerStats)},
  { 1436, 1445, sizeof(CDOTAUserMsg_BeastChat)},
  { 1449, 1457, sizeof(CDOTAUserMsg_CustomHudElement_Create)},
  { 1460, 1468, sizeof(CDOTAUserMsg_CustomHudElement_Modify)},
  { 1471, 1477, sizeof(CDOTAUserMsg_CustomHudElement_Destroy)},
  { 1478, 1485, sizeof(CDOTAUserMsg_CompendiumStatePlayer)},
  { 1487, 1493, sizeof(CDOTAUserMsg_CompendiumState)},
  { 1494, 1507, sizeof(CDOTAUserMsg_ProjectionAbility)},
  { 1515, 1522, sizeof(CDOTAUserMsg_ProjectionEvent)},
  { 1524, 1531, sizeof(CDOTAUserMsg_XPAlert)},
  { 1533, 1538, sizeof(CDOTAUserMsg_UpdateQuestProgress)},
  { 1538, 1551, sizeof(CDOTAUserMsg_QuestStatus)},
  { 1559, 1567, sizeof(CDOTAUserMsg_SuggestHeroPick)},
  { 1570, 1577, sizeof(CDOTAUserMsg_SuggestHeroRole)},
  { 1579, 1590, sizeof(CDOTAUserMsg_KillcamDamageTaken)},
  { 1596, 1603, sizeof(CDOTAUserMsg_SelectPenaltyGold)},
  { 1605, 1615, sizeof(CDOTAUserMsg_RollDiceResult)},
  { 1620, 1628, sizeof(CDOTAUserMsg_FlipCoinResult)},
  { 1631, 1637, sizeof(CDOTAUserMessage_RequestItemSuggestions)},
  { 1638, 1645, sizeof(CDOTAUserMessage_TeamCaptainChanged)},
  { 1647, 1654, sizeof(CDOTAUserMsg_ChatWheelCooldown)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_AIDebugLine_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_Ping_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_SwapVerify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_ChatEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_CombatLogShowDeath_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_BotChat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_CombatHeroPositions_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_MiniKillCamInfo_Attacker_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_MiniKillCamInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_GlobalLightColor_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_GlobalLightDirection_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_LocationPing_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_ItemAlert_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_EnemyItemAlert_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_ModifierAlert_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_HPManaAlert_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_GlyphAlert_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_WillPurchaseAlert_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_BuyBackStateAlert_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_QuickBuyAlert_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_CourierKilledAlert_LostItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_CourierKilledAlert_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_MinimapEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_MapLine_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_MinimapDebugPoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_CreateLinearProjectile_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_DestroyLinearProjectile_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_DodgeTrackingProjectiles_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_SpectatorPlayerClick_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_SpectatorPlayerUnitOrders_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_NevermoreRequiem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_InvalidCommand_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_HudError_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_SharedCooldown_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_SetNextAutobuyItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_HalloweenDrops_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_PredictionResult_Prediction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_PredictionResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAResponseQuerySerialized_Fact_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAResponseQuerySerialized_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTASpeechMatchOnClient_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_UnitEvent_Speech_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_UnitEvent_SpeechMute_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_UnitEvent_AddGesture_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_UnitEvent_RemoveGesture_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_UnitEvent_BloodImpact_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_UnitEvent_FadeGesture_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_UnitEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_ItemPurchased_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_ItemFound_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_ParticleManager_ReleaseParticleIndex_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_ParticleManager_CreateParticle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_ParticleManager_DestroyParticle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_ParticleManager_DestroyParticleInvolving_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_ParticleManager_UpdateParticle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_ParticleManager_UpdateParticleFwd_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_ParticleManager_UpdateParticleOrient_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_ParticleManager_UpdateParticleFallback_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_ParticleManager_UpdateParticleOffset_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_ParticleManager_UpdateParticleEnt_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_ParticleManager_ChangeControlPointAttachment_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_ParticleManager_UpdateEntityPosition_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_ParticleManager_SetParticleFoWProperties_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_ParticleManager_SetParticleText_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_ParticleManager_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_OverheadEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_TutorialTipInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_TutorialFinish_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_TutorialMinimapPosition_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_SendGenericToolTip_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_WorldLine_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_ChatWheel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_ReceivedXmasGift_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_ShowSurvey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_UpdateSharedContent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_TutorialRequestExp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_TutorialFade_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_TutorialPingMinimap_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_GamerulesStateChanged_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_AddQuestLogEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_SendStatPopup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_DismissAllStatPopups_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_SendRoshanSpectatorPhase_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_SendRoshanPopup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_SendFinalGold_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_CustomMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_CoachHUDPing_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_ClientLoadGridNav_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_TE_Projectile_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_TE_ProjectileLoc_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_TE_DotaBloodImpact_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_AbilityPing_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_TE_UnitAnimation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_TE_UnitAnimationEnd_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_ShowGenericPopup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_VoteStart_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_VoteUpdate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_VoteEnd_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_BoosterStatePlayer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_BoosterState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_PlayerMMR_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_AbilitySteal_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_StatsHeroLookup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_StatsHeroPositionInfo_PositionPair_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_StatsHeroPositionInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_StatsHeroMinuteDetails_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_StatsTeamMinuteDetails_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_StatsPlayerKillShare_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_StatsKillDetails_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_StatsMatchDetails_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_MiniTaunt_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_SpeechBubble_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_CustomHeaderMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgHeroAbilityStat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgCombatAnalyzerPlayerStat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgCombatAnalyzerStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_BeastChat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_CustomHudElement_Create_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_CustomHudElement_Modify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_CustomHudElement_Destroy_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_CompendiumStatePlayer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_CompendiumState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_ProjectionAbility_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_ProjectionEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_XPAlert_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_UpdateQuestProgress_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_QuestStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_SuggestHeroPick_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_SuggestHeroRole_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_KillcamDamageTaken_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_SelectPenaltyGold_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_RollDiceResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_FlipCoinResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMessage_RequestItemSuggestions_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMessage_TeamCaptainChanged_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAUserMsg_ChatWheelCooldown_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "dota_usermessages.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 142);
}

}  // namespace

void TableStruct::Shutdown() {
  _CDOTAUserMsg_AIDebugLine_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _CDOTAUserMsg_Ping_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _CDOTAUserMsg_SwapVerify_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _CDOTAUserMsg_ChatEvent_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _CDOTAUserMsg_CombatLogShowDeath_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _CDOTAUserMsg_BotChat_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _CDOTAUserMsg_CombatHeroPositions_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _CDOTAUserMsg_MiniKillCamInfo_Attacker_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _CDOTAUserMsg_MiniKillCamInfo_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _CDOTAUserMsg_GlobalLightColor_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _CDOTAUserMsg_GlobalLightDirection_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _CDOTAUserMsg_LocationPing_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _CDOTAUserMsg_ItemAlert_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _CDOTAUserMsg_EnemyItemAlert_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _CDOTAUserMsg_ModifierAlert_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _CDOTAUserMsg_HPManaAlert_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _CDOTAUserMsg_GlyphAlert_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _CDOTAUserMsg_WillPurchaseAlert_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _CDOTAUserMsg_BuyBackStateAlert_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _CDOTAUserMsg_QuickBuyAlert_default_instance_.Shutdown();
  delete file_level_metadata[20].reflection;
  _CDOTAUserMsg_CourierKilledAlert_LostItem_default_instance_.Shutdown();
  delete file_level_metadata[21].reflection;
  _CDOTAUserMsg_CourierKilledAlert_default_instance_.Shutdown();
  delete file_level_metadata[22].reflection;
  _CDOTAUserMsg_MinimapEvent_default_instance_.Shutdown();
  delete file_level_metadata[23].reflection;
  _CDOTAUserMsg_MapLine_default_instance_.Shutdown();
  delete file_level_metadata[24].reflection;
  _CDOTAUserMsg_MinimapDebugPoint_default_instance_.Shutdown();
  delete file_level_metadata[25].reflection;
  _CDOTAUserMsg_CreateLinearProjectile_default_instance_.Shutdown();
  delete file_level_metadata[26].reflection;
  _CDOTAUserMsg_DestroyLinearProjectile_default_instance_.Shutdown();
  delete file_level_metadata[27].reflection;
  _CDOTAUserMsg_DodgeTrackingProjectiles_default_instance_.Shutdown();
  delete file_level_metadata[28].reflection;
  _CDOTAUserMsg_SpectatorPlayerClick_default_instance_.Shutdown();
  delete file_level_metadata[29].reflection;
  _CDOTAUserMsg_SpectatorPlayerUnitOrders_default_instance_.Shutdown();
  delete file_level_metadata[30].reflection;
  _CDOTAUserMsg_NevermoreRequiem_default_instance_.Shutdown();
  delete file_level_metadata[31].reflection;
  _CDOTAUserMsg_InvalidCommand_default_instance_.Shutdown();
  delete file_level_metadata[32].reflection;
  _CDOTAUserMsg_HudError_default_instance_.Shutdown();
  delete file_level_metadata[33].reflection;
  _CDOTAUserMsg_SharedCooldown_default_instance_.Shutdown();
  delete file_level_metadata[34].reflection;
  _CDOTAUserMsg_SetNextAutobuyItem_default_instance_.Shutdown();
  delete file_level_metadata[35].reflection;
  _CDOTAUserMsg_HalloweenDrops_default_instance_.Shutdown();
  delete file_level_metadata[36].reflection;
  _CDOTAUserMsg_PredictionResult_Prediction_default_instance_.Shutdown();
  delete file_level_metadata[37].reflection;
  _CDOTAUserMsg_PredictionResult_default_instance_.Shutdown();
  delete file_level_metadata[38].reflection;
  _CDOTAResponseQuerySerialized_Fact_default_instance_.Shutdown();
  delete file_level_metadata[39].reflection;
  _CDOTAResponseQuerySerialized_default_instance_.Shutdown();
  delete file_level_metadata[40].reflection;
  _CDOTASpeechMatchOnClient_default_instance_.Shutdown();
  delete file_level_metadata[41].reflection;
  _CDOTAUserMsg_UnitEvent_Speech_default_instance_.Shutdown();
  delete file_level_metadata[42].reflection;
  _CDOTAUserMsg_UnitEvent_SpeechMute_default_instance_.Shutdown();
  delete file_level_metadata[43].reflection;
  _CDOTAUserMsg_UnitEvent_AddGesture_default_instance_.Shutdown();
  delete file_level_metadata[44].reflection;
  _CDOTAUserMsg_UnitEvent_RemoveGesture_default_instance_.Shutdown();
  delete file_level_metadata[45].reflection;
  _CDOTAUserMsg_UnitEvent_BloodImpact_default_instance_.Shutdown();
  delete file_level_metadata[46].reflection;
  _CDOTAUserMsg_UnitEvent_FadeGesture_default_instance_.Shutdown();
  delete file_level_metadata[47].reflection;
  _CDOTAUserMsg_UnitEvent_default_instance_.Shutdown();
  delete file_level_metadata[48].reflection;
  _CDOTAUserMsg_ItemPurchased_default_instance_.Shutdown();
  delete file_level_metadata[49].reflection;
  _CDOTAUserMsg_ItemFound_default_instance_.Shutdown();
  delete file_level_metadata[50].reflection;
  _CDOTAUserMsg_ParticleManager_ReleaseParticleIndex_default_instance_.Shutdown();
  delete file_level_metadata[51].reflection;
  _CDOTAUserMsg_ParticleManager_CreateParticle_default_instance_.Shutdown();
  delete file_level_metadata[52].reflection;
  _CDOTAUserMsg_ParticleManager_DestroyParticle_default_instance_.Shutdown();
  delete file_level_metadata[53].reflection;
  _CDOTAUserMsg_ParticleManager_DestroyParticleInvolving_default_instance_.Shutdown();
  delete file_level_metadata[54].reflection;
  _CDOTAUserMsg_ParticleManager_UpdateParticle_default_instance_.Shutdown();
  delete file_level_metadata[55].reflection;
  _CDOTAUserMsg_ParticleManager_UpdateParticleFwd_default_instance_.Shutdown();
  delete file_level_metadata[56].reflection;
  _CDOTAUserMsg_ParticleManager_UpdateParticleOrient_default_instance_.Shutdown();
  delete file_level_metadata[57].reflection;
  _CDOTAUserMsg_ParticleManager_UpdateParticleFallback_default_instance_.Shutdown();
  delete file_level_metadata[58].reflection;
  _CDOTAUserMsg_ParticleManager_UpdateParticleOffset_default_instance_.Shutdown();
  delete file_level_metadata[59].reflection;
  _CDOTAUserMsg_ParticleManager_UpdateParticleEnt_default_instance_.Shutdown();
  delete file_level_metadata[60].reflection;
  _CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen_default_instance_.Shutdown();
  delete file_level_metadata[61].reflection;
  _CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw_default_instance_.Shutdown();
  delete file_level_metadata[62].reflection;
  _CDOTAUserMsg_ParticleManager_ChangeControlPointAttachment_default_instance_.Shutdown();
  delete file_level_metadata[63].reflection;
  _CDOTAUserMsg_ParticleManager_UpdateEntityPosition_default_instance_.Shutdown();
  delete file_level_metadata[64].reflection;
  _CDOTAUserMsg_ParticleManager_SetParticleFoWProperties_default_instance_.Shutdown();
  delete file_level_metadata[65].reflection;
  _CDOTAUserMsg_ParticleManager_SetParticleText_default_instance_.Shutdown();
  delete file_level_metadata[66].reflection;
  _CDOTAUserMsg_ParticleManager_default_instance_.Shutdown();
  delete file_level_metadata[67].reflection;
  _CDOTAUserMsg_OverheadEvent_default_instance_.Shutdown();
  delete file_level_metadata[68].reflection;
  _CDOTAUserMsg_TutorialTipInfo_default_instance_.Shutdown();
  delete file_level_metadata[69].reflection;
  _CDOTAUserMsg_TutorialFinish_default_instance_.Shutdown();
  delete file_level_metadata[70].reflection;
  _CDOTAUserMsg_TutorialMinimapPosition_default_instance_.Shutdown();
  delete file_level_metadata[71].reflection;
  _CDOTAUserMsg_SendGenericToolTip_default_instance_.Shutdown();
  delete file_level_metadata[72].reflection;
  _CDOTAUserMsg_WorldLine_default_instance_.Shutdown();
  delete file_level_metadata[73].reflection;
  _CDOTAUserMsg_ChatWheel_default_instance_.Shutdown();
  delete file_level_metadata[74].reflection;
  _CDOTAUserMsg_ReceivedXmasGift_default_instance_.Shutdown();
  delete file_level_metadata[75].reflection;
  _CDOTAUserMsg_ShowSurvey_default_instance_.Shutdown();
  delete file_level_metadata[76].reflection;
  _CDOTAUserMsg_UpdateSharedContent_default_instance_.Shutdown();
  delete file_level_metadata[77].reflection;
  _CDOTAUserMsg_TutorialRequestExp_default_instance_.Shutdown();
  delete file_level_metadata[78].reflection;
  _CDOTAUserMsg_TutorialFade_default_instance_.Shutdown();
  delete file_level_metadata[79].reflection;
  _CDOTAUserMsg_TutorialPingMinimap_default_instance_.Shutdown();
  delete file_level_metadata[80].reflection;
  _CDOTAUserMsg_GamerulesStateChanged_default_instance_.Shutdown();
  delete file_level_metadata[81].reflection;
  _CDOTAUserMsg_AddQuestLogEntry_default_instance_.Shutdown();
  delete file_level_metadata[82].reflection;
  _CDOTAUserMsg_SendStatPopup_default_instance_.Shutdown();
  delete file_level_metadata[83].reflection;
  _CDOTAUserMsg_DismissAllStatPopups_default_instance_.Shutdown();
  delete file_level_metadata[84].reflection;
  _CDOTAUserMsg_SendRoshanSpectatorPhase_default_instance_.Shutdown();
  delete file_level_metadata[85].reflection;
  _CDOTAUserMsg_SendRoshanPopup_default_instance_.Shutdown();
  delete file_level_metadata[86].reflection;
  _CDOTAUserMsg_SendFinalGold_default_instance_.Shutdown();
  delete file_level_metadata[87].reflection;
  _CDOTAUserMsg_CustomMsg_default_instance_.Shutdown();
  delete file_level_metadata[88].reflection;
  _CDOTAUserMsg_CoachHUDPing_default_instance_.Shutdown();
  delete file_level_metadata[89].reflection;
  _CDOTAUserMsg_ClientLoadGridNav_default_instance_.Shutdown();
  delete file_level_metadata[90].reflection;
  _CDOTAUserMsg_TE_Projectile_default_instance_.Shutdown();
  delete file_level_metadata[91].reflection;
  _CDOTAUserMsg_TE_ProjectileLoc_default_instance_.Shutdown();
  delete file_level_metadata[92].reflection;
  _CDOTAUserMsg_TE_DotaBloodImpact_default_instance_.Shutdown();
  delete file_level_metadata[93].reflection;
  _CDOTAUserMsg_AbilityPing_default_instance_.Shutdown();
  delete file_level_metadata[94].reflection;
  _CDOTAUserMsg_TE_UnitAnimation_default_instance_.Shutdown();
  delete file_level_metadata[95].reflection;
  _CDOTAUserMsg_TE_UnitAnimationEnd_default_instance_.Shutdown();
  delete file_level_metadata[96].reflection;
  _CDOTAUserMsg_ShowGenericPopup_default_instance_.Shutdown();
  delete file_level_metadata[97].reflection;
  _CDOTAUserMsg_VoteStart_default_instance_.Shutdown();
  delete file_level_metadata[98].reflection;
  _CDOTAUserMsg_VoteUpdate_default_instance_.Shutdown();
  delete file_level_metadata[99].reflection;
  _CDOTAUserMsg_VoteEnd_default_instance_.Shutdown();
  delete file_level_metadata[100].reflection;
  _CDOTAUserMsg_BoosterStatePlayer_default_instance_.Shutdown();
  delete file_level_metadata[101].reflection;
  _CDOTAUserMsg_BoosterState_default_instance_.Shutdown();
  delete file_level_metadata[102].reflection;
  _CDOTAUserMsg_PlayerMMR_default_instance_.Shutdown();
  delete file_level_metadata[103].reflection;
  _CDOTAUserMsg_AbilitySteal_default_instance_.Shutdown();
  delete file_level_metadata[104].reflection;
  _CDOTAUserMsg_StatsHeroLookup_default_instance_.Shutdown();
  delete file_level_metadata[105].reflection;
  _CDOTAUserMsg_StatsHeroPositionInfo_PositionPair_default_instance_.Shutdown();
  delete file_level_metadata[106].reflection;
  _CDOTAUserMsg_StatsHeroPositionInfo_default_instance_.Shutdown();
  delete file_level_metadata[107].reflection;
  _CDOTAUserMsg_StatsHeroMinuteDetails_default_instance_.Shutdown();
  delete file_level_metadata[108].reflection;
  _CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance_default_instance_.Shutdown();
  delete file_level_metadata[109].reflection;
  _CDOTAUserMsg_StatsTeamMinuteDetails_default_instance_.Shutdown();
  delete file_level_metadata[110].reflection;
  _CDOTAUserMsg_StatsPlayerKillShare_default_instance_.Shutdown();
  delete file_level_metadata[111].reflection;
  _CDOTAUserMsg_StatsKillDetails_default_instance_.Shutdown();
  delete file_level_metadata[112].reflection;
  _CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails_default_instance_.Shutdown();
  delete file_level_metadata[113].reflection;
  _CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails_default_instance_.Shutdown();
  delete file_level_metadata[114].reflection;
  _CDOTAUserMsg_StatsMatchDetails_default_instance_.Shutdown();
  delete file_level_metadata[115].reflection;
  _CDOTAUserMsg_MiniTaunt_default_instance_.Shutdown();
  delete file_level_metadata[116].reflection;
  _CDOTAUserMsg_SpeechBubble_default_instance_.Shutdown();
  delete file_level_metadata[117].reflection;
  _CDOTAUserMsg_CustomHeaderMessage_default_instance_.Shutdown();
  delete file_level_metadata[118].reflection;
  _CMsgHeroAbilityStat_default_instance_.Shutdown();
  delete file_level_metadata[119].reflection;
  _CMsgCombatAnalyzerPlayerStat_default_instance_.Shutdown();
  delete file_level_metadata[120].reflection;
  _CMsgCombatAnalyzerStats_default_instance_.Shutdown();
  delete file_level_metadata[121].reflection;
  _CDOTAUserMsg_BeastChat_default_instance_.Shutdown();
  delete file_level_metadata[122].reflection;
  _CDOTAUserMsg_CustomHudElement_Create_default_instance_.Shutdown();
  delete file_level_metadata[123].reflection;
  _CDOTAUserMsg_CustomHudElement_Modify_default_instance_.Shutdown();
  delete file_level_metadata[124].reflection;
  _CDOTAUserMsg_CustomHudElement_Destroy_default_instance_.Shutdown();
  delete file_level_metadata[125].reflection;
  _CDOTAUserMsg_CompendiumStatePlayer_default_instance_.Shutdown();
  delete file_level_metadata[126].reflection;
  _CDOTAUserMsg_CompendiumState_default_instance_.Shutdown();
  delete file_level_metadata[127].reflection;
  _CDOTAUserMsg_ProjectionAbility_default_instance_.Shutdown();
  delete file_level_metadata[128].reflection;
  _CDOTAUserMsg_ProjectionEvent_default_instance_.Shutdown();
  delete file_level_metadata[129].reflection;
  _CDOTAUserMsg_XPAlert_default_instance_.Shutdown();
  delete file_level_metadata[130].reflection;
  _CDOTAUserMsg_UpdateQuestProgress_default_instance_.Shutdown();
  delete file_level_metadata[131].reflection;
  _CDOTAUserMsg_QuestStatus_default_instance_.Shutdown();
  delete file_level_metadata[132].reflection;
  _CDOTAUserMsg_SuggestHeroPick_default_instance_.Shutdown();
  delete file_level_metadata[133].reflection;
  _CDOTAUserMsg_SuggestHeroRole_default_instance_.Shutdown();
  delete file_level_metadata[134].reflection;
  _CDOTAUserMsg_KillcamDamageTaken_default_instance_.Shutdown();
  delete file_level_metadata[135].reflection;
  _CDOTAUserMsg_SelectPenaltyGold_default_instance_.Shutdown();
  delete file_level_metadata[136].reflection;
  _CDOTAUserMsg_RollDiceResult_default_instance_.Shutdown();
  delete file_level_metadata[137].reflection;
  _CDOTAUserMsg_FlipCoinResult_default_instance_.Shutdown();
  delete file_level_metadata[138].reflection;
  _CDOTAUserMessage_RequestItemSuggestions_default_instance_.Shutdown();
  delete file_level_metadata[139].reflection;
  _CDOTAUserMessage_TeamCaptainChanged_default_instance_.Shutdown();
  delete file_level_metadata[140].reflection;
  _CDOTAUserMsg_ChatWheelCooldown_default_instance_.Shutdown();
  delete file_level_metadata[141].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::proto::dota::protobuf_networkbasetypes_2eproto::InitDefaults();
  ::proto::dota::protobuf_dota_5fcommonmessages_2eproto::InitDefaults();
  _CDOTAUserMsg_AIDebugLine_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_Ping_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_SwapVerify_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_ChatEvent_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_CombatLogShowDeath_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_BotChat_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_CombatHeroPositions_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_MiniKillCamInfo_Attacker_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_MiniKillCamInfo_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_GlobalLightColor_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_GlobalLightDirection_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_LocationPing_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_ItemAlert_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_EnemyItemAlert_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_ModifierAlert_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_HPManaAlert_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_GlyphAlert_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_WillPurchaseAlert_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_BuyBackStateAlert_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_QuickBuyAlert_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_CourierKilledAlert_LostItem_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_CourierKilledAlert_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_MinimapEvent_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_MapLine_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_MinimapDebugPoint_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_CreateLinearProjectile_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_DestroyLinearProjectile_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_DodgeTrackingProjectiles_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_SpectatorPlayerClick_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_SpectatorPlayerUnitOrders_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_NevermoreRequiem_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_InvalidCommand_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_HudError_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_SharedCooldown_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_SetNextAutobuyItem_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_HalloweenDrops_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_PredictionResult_Prediction_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_PredictionResult_default_instance_.DefaultConstruct();
  _CDOTAResponseQuerySerialized_Fact_default_instance_.DefaultConstruct();
  _CDOTAResponseQuerySerialized_default_instance_.DefaultConstruct();
  _CDOTASpeechMatchOnClient_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_UnitEvent_Speech_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_UnitEvent_SpeechMute_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_UnitEvent_AddGesture_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_UnitEvent_RemoveGesture_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_UnitEvent_BloodImpact_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_UnitEvent_FadeGesture_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_UnitEvent_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_ItemPurchased_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_ItemFound_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_ParticleManager_ReleaseParticleIndex_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_ParticleManager_CreateParticle_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_ParticleManager_DestroyParticle_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_ParticleManager_DestroyParticleInvolving_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_ParticleManager_UpdateParticle_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_ParticleManager_UpdateParticleFwd_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_ParticleManager_UpdateParticleOrient_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_ParticleManager_UpdateParticleFallback_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_ParticleManager_UpdateParticleOffset_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_ParticleManager_UpdateParticleEnt_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_ParticleManager_ChangeControlPointAttachment_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_ParticleManager_UpdateEntityPosition_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_ParticleManager_SetParticleFoWProperties_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_ParticleManager_SetParticleText_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_ParticleManager_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_OverheadEvent_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_TutorialTipInfo_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_TutorialFinish_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_TutorialMinimapPosition_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_SendGenericToolTip_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_WorldLine_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_ChatWheel_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_ReceivedXmasGift_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_ShowSurvey_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_UpdateSharedContent_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_TutorialRequestExp_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_TutorialFade_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_TutorialPingMinimap_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_GamerulesStateChanged_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_AddQuestLogEntry_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_SendStatPopup_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_DismissAllStatPopups_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_SendRoshanSpectatorPhase_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_SendRoshanPopup_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_SendFinalGold_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_CustomMsg_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_CoachHUDPing_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_ClientLoadGridNav_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_TE_Projectile_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_TE_ProjectileLoc_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_TE_DotaBloodImpact_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_AbilityPing_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_TE_UnitAnimation_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_TE_UnitAnimationEnd_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_ShowGenericPopup_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_VoteStart_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_VoteUpdate_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_VoteEnd_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_BoosterStatePlayer_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_BoosterState_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_PlayerMMR_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_AbilitySteal_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_StatsHeroLookup_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_StatsHeroPositionInfo_PositionPair_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_StatsHeroPositionInfo_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_StatsHeroMinuteDetails_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_StatsTeamMinuteDetails_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_StatsPlayerKillShare_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_StatsKillDetails_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_StatsMatchDetails_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_MiniTaunt_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_SpeechBubble_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_CustomHeaderMessage_default_instance_.DefaultConstruct();
  _CMsgHeroAbilityStat_default_instance_.DefaultConstruct();
  _CMsgCombatAnalyzerPlayerStat_default_instance_.DefaultConstruct();
  _CMsgCombatAnalyzerStats_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_BeastChat_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_CustomHudElement_Create_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_CustomHudElement_Modify_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_CustomHudElement_Destroy_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_CompendiumStatePlayer_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_CompendiumState_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_ProjectionAbility_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_ProjectionEvent_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_XPAlert_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_UpdateQuestProgress_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_QuestStatus_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_SuggestHeroPick_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_SuggestHeroRole_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_KillcamDamageTaken_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_SelectPenaltyGold_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_RollDiceResult_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_FlipCoinResult_default_instance_.DefaultConstruct();
  _CDOTAUserMessage_RequestItemSuggestions_default_instance_.DefaultConstruct();
  _CDOTAUserMessage_TeamCaptainChanged_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_ChatWheelCooldown_default_instance_.DefaultConstruct();
  _CDOTAUserMsg_CombatHeroPositions_default_instance_.get_mutable()->world_pos_ = const_cast< ::proto::dota::CMsgVector2D*>(
      ::proto::dota::CMsgVector2D::internal_default_instance());
  _CDOTAUserMsg_GlobalLightDirection_default_instance_.get_mutable()->direction_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
  _CDOTAUserMsg_LocationPing_default_instance_.get_mutable()->location_ping_ = const_cast< ::proto::dota::CDOTAMsg_LocationPing*>(
      ::proto::dota::CDOTAMsg_LocationPing::internal_default_instance());
  _CDOTAUserMsg_ItemAlert_default_instance_.get_mutable()->item_alert_ = const_cast< ::proto::dota::CDOTAMsg_ItemAlert*>(
      ::proto::dota::CDOTAMsg_ItemAlert::internal_default_instance());
  _CDOTAUserMsg_MapLine_default_instance_.get_mutable()->mapline_ = const_cast< ::proto::dota::CDOTAMsg_MapLine*>(
      ::proto::dota::CDOTAMsg_MapLine::internal_default_instance());
  _CDOTAUserMsg_MinimapDebugPoint_default_instance_.get_mutable()->location_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
  _CDOTAUserMsg_CreateLinearProjectile_default_instance_.get_mutable()->origin_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
  _CDOTAUserMsg_CreateLinearProjectile_default_instance_.get_mutable()->velocity_ = const_cast< ::proto::dota::CMsgVector2D*>(
      ::proto::dota::CMsgVector2D::internal_default_instance());
  _CDOTAUserMsg_CreateLinearProjectile_default_instance_.get_mutable()->acceleration_ = const_cast< ::proto::dota::CMsgVector2D*>(
      ::proto::dota::CMsgVector2D::internal_default_instance());
  _CDOTAUserMsg_SpectatorPlayerUnitOrders_default_instance_.get_mutable()->position_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
  _CDOTAUserMsg_NevermoreRequiem_default_instance_.get_mutable()->origin_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
  _CDOTASpeechMatchOnClient_default_instance_.get_mutable()->responsequery_ = const_cast< ::proto::dota::CDOTAResponseQuerySerialized*>(
      ::proto::dota::CDOTAResponseQuerySerialized::internal_default_instance());
  _CDOTAUserMsg_UnitEvent_default_instance_.get_mutable()->speech_ = const_cast< ::proto::dota::CDOTAUserMsg_UnitEvent_Speech*>(
      ::proto::dota::CDOTAUserMsg_UnitEvent_Speech::internal_default_instance());
  _CDOTAUserMsg_UnitEvent_default_instance_.get_mutable()->speech_mute_ = const_cast< ::proto::dota::CDOTAUserMsg_UnitEvent_SpeechMute*>(
      ::proto::dota::CDOTAUserMsg_UnitEvent_SpeechMute::internal_default_instance());
  _CDOTAUserMsg_UnitEvent_default_instance_.get_mutable()->add_gesture_ = const_cast< ::proto::dota::CDOTAUserMsg_UnitEvent_AddGesture*>(
      ::proto::dota::CDOTAUserMsg_UnitEvent_AddGesture::internal_default_instance());
  _CDOTAUserMsg_UnitEvent_default_instance_.get_mutable()->remove_gesture_ = const_cast< ::proto::dota::CDOTAUserMsg_UnitEvent_RemoveGesture*>(
      ::proto::dota::CDOTAUserMsg_UnitEvent_RemoveGesture::internal_default_instance());
  _CDOTAUserMsg_UnitEvent_default_instance_.get_mutable()->blood_impact_ = const_cast< ::proto::dota::CDOTAUserMsg_UnitEvent_BloodImpact*>(
      ::proto::dota::CDOTAUserMsg_UnitEvent_BloodImpact::internal_default_instance());
  _CDOTAUserMsg_UnitEvent_default_instance_.get_mutable()->fade_gesture_ = const_cast< ::proto::dota::CDOTAUserMsg_UnitEvent_FadeGesture*>(
      ::proto::dota::CDOTAUserMsg_UnitEvent_FadeGesture::internal_default_instance());
  _CDOTAUserMsg_UnitEvent_default_instance_.get_mutable()->speech_match_on_client_ = const_cast< ::proto::dota::CDOTASpeechMatchOnClient*>(
      ::proto::dota::CDOTASpeechMatchOnClient::internal_default_instance());
  _CDOTAUserMsg_ParticleManager_UpdateParticle_default_instance_.get_mutable()->position_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
  _CDOTAUserMsg_ParticleManager_UpdateParticleFwd_default_instance_.get_mutable()->forward_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
  _CDOTAUserMsg_ParticleManager_UpdateParticleOrient_default_instance_.get_mutable()->forward_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
  _CDOTAUserMsg_ParticleManager_UpdateParticleOrient_default_instance_.get_mutable()->right_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
  _CDOTAUserMsg_ParticleManager_UpdateParticleOrient_default_instance_.get_mutable()->up_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
  _CDOTAUserMsg_ParticleManager_UpdateParticleFallback_default_instance_.get_mutable()->position_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
  _CDOTAUserMsg_ParticleManager_UpdateParticleOffset_default_instance_.get_mutable()->origin_offset_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
  _CDOTAUserMsg_ParticleManager_UpdateParticleEnt_default_instance_.get_mutable()->fallback_position_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
  _CDOTAUserMsg_ParticleManager_UpdateEntityPosition_default_instance_.get_mutable()->position_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
  _CDOTAUserMsg_ParticleManager_default_instance_.get_mutable()->release_particle_index_ = const_cast< ::proto::dota::CDOTAUserMsg_ParticleManager_ReleaseParticleIndex*>(
      ::proto::dota::CDOTAUserMsg_ParticleManager_ReleaseParticleIndex::internal_default_instance());
  _CDOTAUserMsg_ParticleManager_default_instance_.get_mutable()->create_particle_ = const_cast< ::proto::dota::CDOTAUserMsg_ParticleManager_CreateParticle*>(
      ::proto::dota::CDOTAUserMsg_ParticleManager_CreateParticle::internal_default_instance());
  _CDOTAUserMsg_ParticleManager_default_instance_.get_mutable()->destroy_particle_ = const_cast< ::proto::dota::CDOTAUserMsg_ParticleManager_DestroyParticle*>(
      ::proto::dota::CDOTAUserMsg_ParticleManager_DestroyParticle::internal_default_instance());
  _CDOTAUserMsg_ParticleManager_default_instance_.get_mutable()->destroy_particle_involving_ = const_cast< ::proto::dota::CDOTAUserMsg_ParticleManager_DestroyParticleInvolving*>(
      ::proto::dota::CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::internal_default_instance());
  _CDOTAUserMsg_ParticleManager_default_instance_.get_mutable()->update_particle_ = const_cast< ::proto::dota::CDOTAUserMsg_ParticleManager_UpdateParticle*>(
      ::proto::dota::CDOTAUserMsg_ParticleManager_UpdateParticle::internal_default_instance());
  _CDOTAUserMsg_ParticleManager_default_instance_.get_mutable()->update_particle_fwd_ = const_cast< ::proto::dota::CDOTAUserMsg_ParticleManager_UpdateParticleFwd*>(
      ::proto::dota::CDOTAUserMsg_ParticleManager_UpdateParticleFwd::internal_default_instance());
  _CDOTAUserMsg_ParticleManager_default_instance_.get_mutable()->update_particle_orient_ = const_cast< ::proto::dota::CDOTAUserMsg_ParticleManager_UpdateParticleOrient*>(
      ::proto::dota::CDOTAUserMsg_ParticleManager_UpdateParticleOrient::internal_default_instance());
  _CDOTAUserMsg_ParticleManager_default_instance_.get_mutable()->update_particle_fallback_ = const_cast< ::proto::dota::CDOTAUserMsg_ParticleManager_UpdateParticleFallback*>(
      ::proto::dota::CDOTAUserMsg_ParticleManager_UpdateParticleFallback::internal_default_instance());
  _CDOTAUserMsg_ParticleManager_default_instance_.get_mutable()->update_particle_offset_ = const_cast< ::proto::dota::CDOTAUserMsg_ParticleManager_UpdateParticleOffset*>(
      ::proto::dota::CDOTAUserMsg_ParticleManager_UpdateParticleOffset::internal_default_instance());
  _CDOTAUserMsg_ParticleManager_default_instance_.get_mutable()->update_particle_ent_ = const_cast< ::proto::dota::CDOTAUserMsg_ParticleManager_UpdateParticleEnt*>(
      ::proto::dota::CDOTAUserMsg_ParticleManager_UpdateParticleEnt::internal_default_instance());
  _CDOTAUserMsg_ParticleManager_default_instance_.get_mutable()->update_particle_should_draw_ = const_cast< ::proto::dota::CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw*>(
      ::proto::dota::CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::internal_default_instance());
  _CDOTAUserMsg_ParticleManager_default_instance_.get_mutable()->update_particle_set_frozen_ = const_cast< ::proto::dota::CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen*>(
      ::proto::dota::CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen::internal_default_instance());
  _CDOTAUserMsg_ParticleManager_default_instance_.get_mutable()->change_control_point_attachment_ = const_cast< ::proto::dota::CDOTAUserMsg_ParticleManager_ChangeControlPointAttachment*>(
      ::proto::dota::CDOTAUserMsg_ParticleManager_ChangeControlPointAttachment::internal_default_instance());
  _CDOTAUserMsg_ParticleManager_default_instance_.get_mutable()->update_entity_position_ = const_cast< ::proto::dota::CDOTAUserMsg_ParticleManager_UpdateEntityPosition*>(
      ::proto::dota::CDOTAUserMsg_ParticleManager_UpdateEntityPosition::internal_default_instance());
  _CDOTAUserMsg_ParticleManager_default_instance_.get_mutable()->set_particle_fow_properties_ = const_cast< ::proto::dota::CDOTAUserMsg_ParticleManager_SetParticleFoWProperties*>(
      ::proto::dota::CDOTAUserMsg_ParticleManager_SetParticleFoWProperties::internal_default_instance());
  _CDOTAUserMsg_ParticleManager_default_instance_.get_mutable()->set_particle_text_ = const_cast< ::proto::dota::CDOTAUserMsg_ParticleManager_SetParticleText*>(
      ::proto::dota::CDOTAUserMsg_ParticleManager_SetParticleText::internal_default_instance());
  _CDOTAUserMsg_WorldLine_default_instance_.get_mutable()->worldline_ = const_cast< ::proto::dota::CDOTAMsg_WorldLine*>(
      ::proto::dota::CDOTAMsg_WorldLine::internal_default_instance());
  _CDOTAUserMsg_SendStatPopup_default_instance_.get_mutable()->statpopup_ = const_cast< ::proto::dota::CDOTAMsg_SendStatPopup*>(
      ::proto::dota::CDOTAMsg_SendStatPopup::internal_default_instance());
  _CDOTAUserMsg_DismissAllStatPopups_default_instance_.get_mutable()->dismissallmsg_ = const_cast< ::proto::dota::CDOTAMsg_DismissAllStatPopups*>(
      ::proto::dota::CDOTAMsg_DismissAllStatPopups::internal_default_instance());
  _CDOTAUserMsg_CoachHUDPing_default_instance_.get_mutable()->hud_ping_ = const_cast< ::proto::dota::CDOTAMsg_CoachHUDPing*>(
      ::proto::dota::CDOTAMsg_CoachHUDPing::internal_default_instance());
  _CDOTAUserMsg_TE_ProjectileLoc_default_instance_.get_mutable()->vsourceloc_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
  _CDOTAUserMsg_TE_ProjectileLoc_default_instance_.get_mutable()->vtargetloc_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
  _CDOTAUserMsg_StatsHeroMinuteDetails_default_instance_.get_mutable()->position_info_ = const_cast< ::proto::dota::CDOTAUserMsg_StatsHeroPositionInfo*>(
      ::proto::dota::CDOTAUserMsg_StatsHeroPositionInfo::internal_default_instance());
  _CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails_default_instance_.get_mutable()->radiant_fight_details_ = const_cast< ::proto::dota::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails*>(
      ::proto::dota::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::internal_default_instance());
  _CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails_default_instance_.get_mutable()->dire_fight_details_ = const_cast< ::proto::dota::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails*>(
      ::proto::dota::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::internal_default_instance());
  _CDOTAUserMsg_ProjectionAbility_default_instance_.get_mutable()->origin_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\027dota_usermessages.proto\022\nproto.dota\032\026n"
      "etworkbasetypes.proto\032\031dota_commonmessag"
      "es.proto\"+\n\030CDOTAUserMsg_AIDebugLine\022\017\n\007"
      "message\030\001 \001(\t\"/\n\021CDOTAUserMsg_Ping\022\014\n\004pi"
      "ng\030\002 \001(\r\022\014\n\004loss\030\003 \001(\r\",\n\027CDOTAUserMsg_S"
      "wapVerify\022\021\n\tplayer_id\030\001 \001(\r\"\232\002\n\026CDOTAUs"
      "erMsg_ChatEvent\022A\n\004type\030\001 \002(\0162\035.proto.do"
      "ta.DOTA_CHAT_MESSAGE:\024CHAT_MESSAGE_INVAL"
      "ID\022\r\n\005value\030\002 \001(\r\022\026\n\nplayerid_1\030\003 \001(\021:\002-"
      "1\022\026\n\nplayerid_2\030\004 \001(\021:\002-1\022\026\n\nplayerid_3\030"
      "\005 \001(\021:\002-1\022\026\n\nplayerid_4\030\006 \001(\021:\002-1\022\026\n\npla"
      "yerid_5\030\007 \001(\021:\002-1\022\026\n\nplayerid_6\030\010 \001(\021:\002-"
      "1\022\016\n\006value2\030\t \001(\r\022\016\n\006value3\030\n \001(\r\"!\n\037CDO"
      "TAUserMsg_CombatLogShowDeath\"]\n\024CDOTAUse"
      "rMsg_BotChat\022\021\n\tplayer_id\030\001 \001(\r\022\017\n\007messa"
      "ge\030\003 \001(\t\022\016\n\006target\030\004 \001(\t\022\021\n\tteam_only\030\005 "
      "\001(\010\"|\n CDOTAUserMsg_CombatHeroPositions\022"
      "\r\n\005index\030\001 \001(\r\022\014\n\004time\030\002 \001(\005\022+\n\tworld_po"
      "s\030\003 \001(\0132\030.proto.dota.CMsgVector2D\022\016\n\006hea"
      "lth\030\004 \001(\005\"\252\002\n\034CDOTAUserMsg_MiniKillCamIn"
      "fo\022D\n\tattackers\030\001 \003(\01321.proto.dota.CDOTA"
      "UserMsg_MiniKillCamInfo.Attacker\032\303\001\n\010Att"
      "acker\022\020\n\010attacker\030\001 \001(\r\022\024\n\014total_damage\030"
      "\002 \001(\005\022L\n\tabilities\030\003 \003(\01329.proto.dota.CD"
      "OTAUserMsg_MiniKillCamInfo.Attacker.Abil"
      "ity\022\025\n\rattacker_name\030\004 \001(\t\032*\n\007Ability\022\017\n"
      "\007ability\030\001 \001(\r\022\016\n\006damage\030\002 \001(\005\"@\n\035CDOTAU"
      "serMsg_GlobalLightColor\022\r\n\005color\030\001 \001(\r\022\020"
      "\n\010duration\030\002 \001(\002\"`\n!CDOTAUserMsg_GlobalL"
      "ightDirection\022)\n\tdirection\030\001 \001(\0132\026.proto"
      ".dota.CMsgVector\022\020\n\010duration\030\002 \001(\002\"h\n\031CD"
      "OTAUserMsg_LocationPing\022\021\n\tplayer_id\030\001 \001"
      "(\r\0228\n\rlocation_ping\030\002 \001(\0132!.proto.dota.C"
      "DOTAMsg_LocationPing\"_\n\026CDOTAUserMsg_Ite"
      "mAlert\022\021\n\tplayer_id\030\001 \001(\r\0222\n\nitem_alert\030"
      "\002 \001(\0132\036.proto.dota.CDOTAMsg_ItemAlert\"m\n"
      "\033CDOTAUserMsg_EnemyItemAlert\022\021\n\tplayer_i"
      "d\030\001 \001(\r\022\030\n\020target_player_id\030\002 \001(\r\022\016\n\006ite"
      "mid\030\003 \001(\005\022\021\n\trune_type\030\004 \001(\r\"\204\001\n\032CDOTAUs"
      "erMsg_ModifierAlert\022\021\n\tplayer_id\030\001 \001(\r\022\022"
      "\n\nclass_name\030\002 \001(\t\022\023\n\013stack_count\030\003 \001(\r\022"
      "\021\n\tis_debuff\030\004 \001(\010\022\027\n\017target_entindex\030\005 "
      "\001(\r\"F\n\030CDOTAUserMsg_HPManaAlert\022\021\n\tplaye"
      "r_id\030\001 \001(\r\022\027\n\017target_entindex\030\002 \001(\r\">\n\027C"
      "DOTAUserMsg_GlyphAlert\022\021\n\tplayer_id\030\001 \001("
      "\r\022\020\n\010negative\030\002 \001(\010\"y\n\036CDOTAUserMsg_Will"
      "PurchaseAlert\022\016\n\006itemid\030\001 \001(\005\022\021\n\tplayer_"
      "id\030\002 \001(\005\022\026\n\016gold_remaining\030\003 \001(\r\022\034\n\024sugg"
      "estion_player_id\030\004 \001(\005\"3\n\036CDOTAUserMsg_B"
      "uyBackStateAlert\022\021\n\tplayer_id\030\001 \001(\005\"V\n\032C"
      "DOTAUserMsg_QuickBuyAlert\022\021\n\tplayer_id\030\001"
      " \001(\005\022\016\n\006itemid\030\002 \001(\005\022\025\n\rgold_required\030\003 "
      "\001(\005\"\343\001\n\037CDOTAUserMsg_CourierKilledAlert\022"
      "\014\n\004team\030\001 \001(\r\022\022\n\ngold_value\030\002 \001(\r\022\025\n\rent"
      "ity_handle\030\003 \001(\005\022\021\n\ttimestamp\030\004 \001(\005\022H\n\nl"
      "ost_items\030\005 \003(\01324.proto.dota.CDOTAUserMs"
      "g_CourierKilledAlert.LostItem\032*\n\010LostIte"
      "m\022\014\n\004item\030\001 \001(\005\022\020\n\010quantity\030\002 \001(\r\"\214\001\n\031CD"
      "OTAUserMsg_MinimapEvent\022\022\n\nevent_type\030\001 "
      "\001(\005\022\025\n\rentity_handle\030\002 \001(\005\022\t\n\001x\030\003 \001(\005\022\t\n"
      "\001y\030\004 \001(\005\022\020\n\010duration\030\005 \001(\005\022\034\n\024target_ent"
      "ity_handle\030\006 \001(\005\"X\n\024CDOTAUserMsg_MapLine"
      "\022\021\n\tplayer_id\030\001 \001(\005\022-\n\007mapline\030\002 \001(\0132\034.p"
      "roto.dota.CDOTAMsg_MapLine\"\210\001\n\036CDOTAUser"
      "Msg_MinimapDebugPoint\022(\n\010location\030\001 \001(\0132"
      "\026.proto.dota.CMsgVector\022\r\n\005color\030\002 \001(\r\022\014"
      "\n\004size\030\003 \001(\005\022\020\n\010duration\030\004 \001(\002\022\r\n\005index\030"
      "\005 \001(\005\"\267\002\n#CDOTAUserMsg_CreateLinearProje"
      "ctile\022&\n\006origin\030\001 \001(\0132\026.proto.dota.CMsgV"
      "ector\022*\n\010velocity\030\002 \001(\0132\030.proto.dota.CMs"
      "gVector2D\022\020\n\010entindex\030\004 \001(\005\022\026\n\016particle_"
      "index\030\005 \001(\004\022\016\n\006handle\030\006 \001(\005\022.\n\014accelerat"
      "ion\030\007 \001(\0132\030.proto.dota.CMsgVector2D\022\021\n\tm"
      "ax_speed\030\010 \001(\002\022\022\n\nfow_radius\030\t \001(\002\022\031\n\021st"
      "icky_fow_reveal\030\n \001(\010\022\020\n\010distance\030\013 \001(\002\""
      "6\n$CDOTAUserMsg_DestroyLinearProjectile\022"
      "\016\n\006handle\030\001 \001(\005\"O\n%CDOTAUserMsg_DodgeTra"
      "ckingProjectiles\022\020\n\010entindex\030\001 \002(\005\022\024\n\014at"
      "tacks_only\030\002 \001(\010\"_\n!CDOTAUserMsg_Spectat"
      "orPlayerClick\022\020\n\010entindex\030\001 \002(\005\022\022\n\norder"
      "_type\030\002 \001(\005\022\024\n\014target_index\030\003 \001(\005\"\334\001\n&CD"
      "OTAUserMsg_SpectatorPlayerUnitOrders\022\020\n\010"
      "entindex\030\001 \001(\005\022\022\n\norder_type\030\002 \001(\005\022\r\n\005un"
      "its\030\003 \003(\005\022\024\n\014target_index\030\004 \001(\005\022\025\n\rabili"
      "ty_index\030\005 \001(\005\022(\n\010position\030\006 \001(\0132\026.proto"
      ".dota.CMsgVector\022\r\n\005queue\030\007 \001(\010\022\027\n\017seque"
      "nce_number\030\010 \001(\005\"~\n\035CDOTAUserMsg_Nevermo"
      "reRequiem\022\025\n\rentity_handle\030\001 \001(\005\022\r\n\005line"
      "s\030\002 \001(\005\022&\n\006origin\030\003 \001(\0132\026.proto.dota.CMs"
      "gVector\022\017\n\007reverse\030\004 \001(\010\".\n\033CDOTAUserMsg"
      "_InvalidCommand\022\017\n\007message\030\001 \001(\t\")\n\025CDOT"
      "AUserMsg_HudError\022\020\n\010order_id\030\001 \001(\005\"c\n\033C"
      "DOTAUserMsg_SharedCooldown\022\020\n\010entindex\030\001"
      " \001(\005\022\014\n\004name\030\002 \001(\t\022\020\n\010cooldown\030\003 \001(\002\022\022\n\n"
      "name_index\030\004 \001(\005\"/\n\037CDOTAUserMsg_SetNext"
      "AutobuyItem\022\014\n\004name\030\001 \001(\t\"X\n\033CDOTAUserMs"
      "g_HalloweenDrops\022\021\n\titem_defs\030\001 \003(\r\022\022\n\np"
      "layer_ids\030\002 \003(\r\022\022\n\nprize_list\030\003 \001(\r\"\251\003\n\035"
      "CDOTAUserMsg_PredictionResult\022\022\n\naccount"
      "_id\030\001 \001(\r\022\020\n\010match_id\030\002 \001(\004\022\017\n\007correct\030\003"
      " \001(\010\022I\n\013predictions\030\004 \003(\01324.proto.dota.C"
      "DOTAUserMsg_PredictionResult.Prediction\032"
      "\205\002\n\nPrediction\022\020\n\010item_def\030\001 \001(\r\022\023\n\013num_"
      "correct\030\002 \001(\r\022\021\n\tnum_fails\030\003 \001(\r\022c\n\006resu"
      "lt\030\004 \001(\0162<.proto.dota.CDOTAUserMsg_Predi"
      "ctionResult.Prediction.EResult:\025k_eResul"
      "t_ItemGranted\022\031\n\021granted_item_defs\030\006 \003(\r"
      "\"=\n\007EResult\022\031\n\025k_eResult_ItemGranted\020\001\022\027"
      "\n\023k_eResult_Destroyed\020\002\"\224\002\n\034CDOTARespons"
      "eQuerySerialized\022<\n\005facts\030\001 \003(\0132-.proto."
      "dota.CDOTAResponseQuerySerialized.Fact\032\265"
      "\001\n\004Fact\022\013\n\003key\030\001 \002(\005\022Q\n\007valtype\030\002 \002(\01627."
      "proto.dota.CDOTAResponseQuerySerialized."
      "Fact.ValueType:\007NUMERIC\022\023\n\013val_numeric\030\003"
      " \001(\002\022\022\n\nval_string\030\004 \001(\t\"$\n\tValueType\022\013\n"
      "\007NUMERIC\020\001\022\n\n\006STRING\020\002\"\233\001\n\030CDOTASpeechMa"
      "tchOnClient\022\017\n\007concept\030\001 \001(\005\022\026\n\016recipien"
      "t_type\030\002 \001(\005\022\?\n\rresponsequery\030\003 \001(\0132(.pr"
      "oto.dota.CDOTAResponseQuerySerialized\022\025\n"
      "\nrandomseed\030\004 \001(\017:\0010\"\332\007\n\026CDOTAUserMsg_Un"
      "itEvent\022C\n\010msg_type\030\001 \002(\0162\037.proto.dota.E"
      "DotaEntityMessages:\020DOTA_UNIT_SPEECH\022\024\n\014"
      "entity_index\030\002 \002(\005\0229\n\006speech\030\003 \001(\0132).pro"
      "to.dota.CDOTAUserMsg_UnitEvent.Speech\022B\n"
      "\013speech_mute\030\004 \001(\0132-.proto.dota.CDOTAUse"
      "rMsg_UnitEvent.SpeechMute\022B\n\013add_gesture"
      "\030\005 \001(\0132-.proto.dota.CDOTAUserMsg_UnitEve"
      "nt.AddGesture\022H\n\016remove_gesture\030\006 \001(\01320."
      "proto.dota.CDOTAUserMsg_UnitEvent.Remove"
      "Gesture\022D\n\014blood_impact\030\007 \001(\0132..proto.do"
      "ta.CDOTAUserMsg_UnitEvent.BloodImpact\022D\n"
      "\014fade_gesture\030\010 \001(\0132..proto.dota.CDOTAUs"
      "erMsg_UnitEvent.FadeGesture\022D\n\026speech_ma"
      "tch_on_client\030\t \001(\0132$.proto.dota.CDOTASp"
      "eechMatchOnClient\032k\n\006Speech\022\017\n\007concept\030\001"
      " \001(\005\022\020\n\010response\030\002 \001(\t\022\026\n\016recipient_type"
      "\030\003 \001(\005\022\r\n\005level\030\004 \001(\005\022\027\n\010muteable\030\005 \001(\010:"
      "\005false\032 \n\nSpeechMute\022\022\n\005delay\030\001 \001(\002:\0030.5"
      "\032q\n\nAddGesture\022\020\n\010activity\030\001 \001(\005\022\014\n\004slot"
      "\030\002 \001(\005\022\022\n\007fade_in\030\003 \001(\002:\0010\022\025\n\010fade_out\030\004"
      " \001(\002:\0030.1\022\030\n\rplayback_rate\030\005 \001(\002:\0011\032!\n\rR"
      "emoveGesture\022\020\n\010activity\030\001 \001(\005\032@\n\013BloodI"
      "mpact\022\r\n\005scale\030\001 \001(\005\022\020\n\010x_normal\030\002 \001(\005\022\020"
      "\n\010y_normal\030\003 \001(\005\032\037\n\013FadeGesture\022\020\n\010activ"
      "ity\030\001 \001(\005\"0\n\032CDOTAUserMsg_ItemPurchased\022"
      "\022\n\nitem_index\030\001 \001(\005\"j\n\026CDOTAUserMsg_Item"
      "Found\022\016\n\006player\030\001 \001(\005\022\017\n\007quality\030\002 \001(\005\022\016"
      "\n\006rarity\030\003 \001(\005\022\016\n\006method\030\004 \001(\005\022\017\n\007itemde"
      "f\030\005 \001(\005\"\355\027\n\034CDOTAUserMsg_ParticleManager"
      "\022S\n\004type\030\001 \002(\0162!.proto.dota.DOTA_PARTICL"
      "E_MESSAGE:\"DOTA_PARTICLE_MANAGER_EVENT_C"
      "REATE\022\r\n\005index\030\002 \002(\r\022]\n\026release_particle"
      "_index\030\003 \001(\0132=.proto.dota.CDOTAUserMsg_P"
      "articleManager.ReleaseParticleIndex\022P\n\017c"
      "reate_particle\030\004 \001(\01327.proto.dota.CDOTAU"
      "serMsg_ParticleManager.CreateParticle\022R\n"
      "\020destroy_particle\030\005 \001(\01328.proto.dota.CDO"
      "TAUserMsg_ParticleManager.DestroyParticl"
      "e\022e\n\032destroy_particle_involving\030\006 \001(\0132A."
      "proto.dota.CDOTAUserMsg_ParticleManager."
      "DestroyParticleInvolving\022P\n\017update_parti"
      "cle\030\007 \001(\01327.proto.dota.CDOTAUserMsg_Part"
      "icleManager.UpdateParticle\022W\n\023update_par"
      "ticle_fwd\030\010 \001(\0132:.proto.dota.CDOTAUserMs"
      "g_ParticleManager.UpdateParticleFwd\022]\n\026u"
      "pdate_particle_orient\030\t \001(\0132=.proto.dota"
      ".CDOTAUserMsg_ParticleManager.UpdatePart"
      "icleOrient\022a\n\030update_particle_fallback\030\n"
      " \001(\0132\?.proto.dota.CDOTAUserMsg_ParticleM"
      "anager.UpdateParticleFallback\022]\n\026update_"
      "particle_offset\030\013 \001(\0132=.proto.dota.CDOTA"
      "UserMsg_ParticleManager.UpdateParticleOf"
      "fset\022W\n\023update_particle_ent\030\014 \001(\0132:.prot"
      "o.dota.CDOTAUserMsg_ParticleManager.Upda"
      "teParticleEnt\022f\n\033update_particle_should_"
      "draw\030\016 \001(\0132A.proto.dota.CDOTAUserMsg_Par"
      "ticleManager.UpdateParticleShouldDraw\022d\n"
      "\032update_particle_set_frozen\030\017 \001(\0132@.prot"
      "o.dota.CDOTAUserMsg_ParticleManager.Upda"
      "teParticleSetFrozen\022n\n\037change_control_po"
      "int_attachment\030\020 \001(\0132E.proto.dota.CDOTAU"
      "serMsg_ParticleManager.ChangeControlPoin"
      "tAttachment\022]\n\026update_entity_position\030\021 "
      "\001(\0132=.proto.dota.CDOTAUserMsg_ParticleMa"
      "nager.UpdateEntityPosition\022f\n\033set_partic"
      "le_fow_properties\030\022 \001(\0132A.proto.dota.CDO"
      "TAUserMsg_ParticleManager.SetParticleFoW"
      "Properties\022S\n\021set_particle_text\030\023 \001(\01328."
      "proto.dota.CDOTAUserMsg_ParticleManager."
      "SetParticleText\032\026\n\024ReleaseParticleIndex\032"
      "~\n\016CreateParticle\022\033\n\023particle_name_index"
      "\030\001 \001(\006\022\023\n\013attach_type\030\002 \001(\005\022\025\n\rentity_ha"
      "ndle\030\003 \001(\005\022#\n\033entity_handle_for_modifier"
      "s\030\004 \001(\005\032.\n\017DestroyParticle\022\033\n\023destroy_im"
      "mediately\030\001 \001(\010\032N\n\030DestroyParticleInvolv"
      "ing\022\033\n\023destroy_immediately\030\001 \001(\010\022\025\n\renti"
      "ty_handle\030\003 \001(\005\032Q\n\016UpdateParticle\022\025\n\rcon"
      "trol_point\030\001 \001(\005\022(\n\010position\030\002 \001(\0132\026.pro"
      "to.dota.CMsgVector\032S\n\021UpdateParticleFwd\022"
      "\025\n\rcontrol_point\030\001 \001(\005\022\'\n\007forward\030\002 \001(\0132"
      "\026.proto.dota.CMsgVector\032\241\001\n\024UpdatePartic"
      "leOrient\022\025\n\rcontrol_point\030\001 \001(\005\022\'\n\007forwa"
      "rd\030\002 \001(\0132\026.proto.dota.CMsgVector\022%\n\005righ"
      "t\030\003 \001(\0132\026.proto.dota.CMsgVector\022\"\n\002up\030\004 "
      "\001(\0132\026.proto.dota.CMsgVector\032Y\n\026UpdatePar"
      "ticleFallback\022\025\n\rcontrol_point\030\001 \001(\005\022(\n\010"
      "position\030\002 \001(\0132\026.proto.dota.CMsgVector\032\\"
      "\n\024UpdateParticleOffset\022\025\n\rcontrol_point\030"
      "\001 \001(\005\022-\n\rorigin_offset\030\002 \001(\0132\026.proto.dot"
      "a.CMsgVector\032\270\001\n\021UpdateParticleEnt\022\025\n\rco"
      "ntrol_point\030\001 \001(\005\022\025\n\rentity_handle\030\002 \001(\005"
      "\022\023\n\013attach_type\030\003 \001(\005\022\022\n\nattachment\030\004 \001("
      "\005\0221\n\021fallback_position\030\005 \001(\0132\026.proto.dot"
      "a.CMsgVector\022\031\n\021include_wearables\030\006 \001(\010\032"
      "-\n\027UpdateParticleSetFrozen\022\022\n\nset_frozen"
      "\030\001 \001(\010\032/\n\030UpdateParticleShouldDraw\022\023\n\013sh"
      "ould_draw\030\001 \001(\010\032e\n\034ChangeControlPointAtt"
      "achment\022\026\n\016attachment_old\030\001 \001(\005\022\026\n\016attac"
      "hment_new\030\002 \001(\005\022\025\n\rentity_handle\030\003 \001(\005\032W"
      "\n\024UpdateEntityPosition\022\025\n\rentity_handle\030"
      "\001 \001(\005\022(\n\010position\030\002 \001(\0132\026.proto.dota.CMs"
      "gVector\032e\n\030SetParticleFoWProperties\022\031\n\021f"
      "ow_control_point\030\001 \001(\005\022\032\n\022fow_control_po"
      "int2\030\002 \001(\005\022\022\n\nfow_radius\030\003 \001(\002\032\037\n\017SetPar"
      "ticleText\022\014\n\004text\030\001 \001(\t\"\320\001\n\032CDOTAUserMsg"
      "_OverheadEvent\022J\n\014message_type\030\001 \002(\0162\037.p"
      "roto.dota.DOTA_OVERHEAD_ALERT:\023OVERHEAD_"
      "ALERT_GOLD\022\r\n\005value\030\002 \001(\005\022\036\n\026target_play"
      "er_entindex\030\003 \001(\005\022\027\n\017target_entindex\030\004 \001"
      "(\005\022\036\n\026source_player_entindex\030\005 \001(\005\">\n\034CD"
      "OTAUserMsg_TutorialTipInfo\022\014\n\004name\030\001 \001(\t"
      "\022\020\n\010progress\030\002 \001(\005\"]\n\033CDOTAUserMsg_Tutor"
      "ialFinish\022\017\n\007heading\030\001 \001(\t\022\016\n\006emblem\030\002 \001"
      "(\t\022\014\n\004body\030\003 \001(\t\022\017\n\007success\030\004 \001(\010\"&\n$CDO"
      "TAUserMsg_TutorialMinimapPosition\"_\n\037CDO"
      "TAUserMsg_SendGenericToolTip\022\r\n\005title\030\001 "
      "\001(\t\022\014\n\004text\030\002 \001(\t\022\020\n\010entindex\030\003 \001(\005\022\r\n\005c"
      "lose\030\004 \001(\010\"^\n\026CDOTAUserMsg_WorldLine\022\021\n\t"
      "player_id\030\001 \001(\005\0221\n\tworldline\030\002 \001(\0132\036.pro"
      "to.dota.CDOTAMsg_WorldLine\"o\n\026CDOTAUserM"
      "sg_ChatWheel\022\027\n\017chat_message_id\030\001 \001(\r\022\021\n"
      "\tplayer_id\030\002 \001(\r\022\022\n\naccount_id\030\003 \001(\r\022\025\n\r"
      "param_hero_id\030\004 \001(\r\"]\n\035CDOTAUserMsg_Rece"
      "ivedXmasGift\022\021\n\tplayer_id\030\001 \001(\005\022\021\n\titem_"
      "name\030\002 \001(\t\022\026\n\016inventory_slot\030\003 \001(\005\"\244\001\n\027C"
      "DOTAUserMsg_ShowSurvey\022\021\n\tsurvey_id\030\001 \001("
      "\005\022\020\n\010match_id\030\002 \001(\004\022\026\n\016response_style\030\003 "
      "\001(\t\022\030\n\020teammate_hero_id\030\004 \001(\r\022\025\n\rteammat"
      "e_name\030\005 \001(\t\022\033\n\023teammate_account_id\030\006 \001("
      "\r\"5\n CDOTAUserMsg_UpdateSharedContent\022\021\n"
      "\tslot_type\030\001 \001(\005\"!\n\037CDOTAUserMsg_Tutoria"
      "lRequestExp\".\n\031CDOTAUserMsg_TutorialFade"
      "\022\021\n\ttgt_alpha\030\001 \001(\005\"x\n CDOTAUserMsg_Tuto"
      "rialPingMinimap\022\021\n\tplayer_id\030\001 \001(\r\022\r\n\005po"
      "s_x\030\002 \001(\002\022\r\n\005pos_y\030\003 \001(\002\022\r\n\005pos_z\030\004 \001(\002\022"
      "\024\n\014entity_index\030\005 \001(\005\"3\n\"CDOTAUserMsg_Ga"
      "merulesStateChanged\022\r\n\005state\030\001 \001(\r\"E\n\035CD"
      "OTAUserMsg_AddQuestLogEntry\022\020\n\010npc_name\030"
      "\001 \001(\t\022\022\n\nnpc_dialog\030\002 \001(\t\"f\n\032CDOTAUserMs"
      "g_SendStatPopup\022\021\n\tplayer_id\030\001 \001(\005\0225\n\tst"
      "atpopup\030\002 \001(\0132\".proto.dota.CDOTAMsg_Send"
      "StatPopup\"e\n!CDOTAUserMsg_DismissAllStat"
      "Popups\022@\n\rdismissallmsg\030\001 \001(\0132).proto.do"
      "ta.CDOTAMsg_DismissAllStatPopups\"\232\001\n%CDO"
      "TAUserMsg_SendRoshanSpectatorPhase\022A\n\005ph"
      "ase\030\001 \001(\0162\035.proto.dota.DOTA_ROSHAN_PHASE"
      ":\023k_SRSP_ROSHAN_ALIVE\022\030\n\020phase_start_tim"
      "e\030\002 \001(\005\022\024\n\014phase_length\030\003 \001(\005\"C\n\034CDOTAUs"
      "erMsg_SendRoshanPopup\022\021\n\treclaimed\030\001 \001(\010"
      "\022\020\n\010gametime\030\002 \001(\005\"L\n\032CDOTAUserMsg_SendF"
      "inalGold\022\025\n\rreliable_gold\030\001 \003(\r\022\027\n\017unrel"
      "iable_gold\030\002 \003(\r\"K\n\026CDOTAUserMsg_CustomM"
      "sg\022\017\n\007message\030\001 \001(\t\022\021\n\tplayer_id\030\002 \001(\005\022\r"
      "\n\005value\030\003 \001(\005\"c\n\031CDOTAUserMsg_CoachHUDPi"
      "ng\022\021\n\tplayer_id\030\001 \001(\r\0223\n\010hud_ping\030\002 \001(\0132"
      "!.proto.dota.CDOTAMsg_CoachHUDPing\" \n\036CD"
      "OTAUserMsg_ClientLoadGridNav\"\227\002\n\032CDOTAUs"
      "erMsg_TE_Projectile\022\017\n\007hSource\030\001 \001(\005\022\017\n\007"
      "hTarget\030\002 \001(\005\022\021\n\tmoveSpeed\030\003 \001(\005\022\030\n\020sour"
      "ceAttachment\030\004 \001(\005\022\034\n\024particleSystemHand"
      "le\030\005 \001(\003\022\021\n\tdodgeable\030\006 \001(\010\022\020\n\010isAttack\030"
      "\007 \001(\010\022\020\n\010isEvaded\030\010 \001(\010\022\022\n\nexpireTime\030\t "
      "\001(\002\022\025\n\rmaximpacttime\030\n \001(\002\022\025\n\rcolorgemco"
      "lor\030\013 \001(\007\022\023\n\013launch_tick\030\014 \001(\005\"\260\002\n\035CDOTA"
      "UserMsg_TE_ProjectileLoc\022*\n\nvSourceLoc\030\001"
      " \001(\0132\026.proto.dota.CMsgVector\022\017\n\007hTarget\030"
      "\002 \001(\005\022\021\n\tmoveSpeed\030\003 \001(\005\022\034\n\024particleSyst"
      "emHandle\030\004 \001(\003\022\021\n\tdodgeable\030\005 \001(\010\022\020\n\010isA"
      "ttack\030\006 \001(\010\022\020\n\010isEvaded\030\010 \001(\010\022\022\n\nexpireT"
      "ime\030\t \001(\002\022*\n\nvTargetLoc\030\n \001(\0132\026.proto.do"
      "ta.CMsgVector\022\025\n\rcolorgemcolor\030\013 \001(\007\022\023\n\013"
      "launch_tick\030\014 \001(\005\"b\n\037CDOTAUserMsg_TE_Dot"
      "aBloodImpact\022\016\n\006entity\030\001 \001(\005\022\r\n\005scale\030\002 "
      "\001(\002\022\017\n\007xnormal\030\003 \001(\002\022\017\n\007ynormal\030\004 \001(\002\"\326\001"
      "\n\030CDOTAUserMsg_AbilityPing\022\021\n\tplayer_id\030"
      "\001 \001(\r\022\022\n\nability_id\030\002 \001(\r\022D\n\004type\030\003 \001(\0162"
      "\".proto.dota.DOTA_ABILITY_PING_TYPE:\022ABI"
      "LITY_PING_READY\022\030\n\020cooldown_seconds\030\004 \001("
      "\r\022\r\n\005level\030\005 \001(\r\022\017\n\007passive\030\006 \001(\010\022\023\n\013man"
      "a_needed\030\007 \001(\r\"\221\001\n\035CDOTAUserMsg_TE_UnitA"
      "nimation\022\016\n\006entity\030\001 \001(\005\022\027\n\017sequenceVari"
      "ant\030\002 \001(\005\022\024\n\014playbackrate\030\003 \001(\002\022\021\n\tcastp"
      "oint\030\004 \001(\002\022\014\n\004type\030\005 \001(\005\022\020\n\010activity\030\006 \001"
      "(\005\"@\n CDOTAUserMsg_TE_UnitAnimationEnd\022\016"
      "\n\006entity\030\001 \001(\005\022\014\n\004snap\030\002 \001(\010\"\221\001\n\035CDOTAUs"
      "erMsg_ShowGenericPopup\022\016\n\006header\030\001 \002(\t\022\014"
      "\n\004body\030\002 \002(\t\022\016\n\006param1\030\003 \001(\t\022\016\n\006param2\030\004"
      " \001(\t\022\023\n\013tint_screen\030\005 \001(\010\022\035\n\025show_no_oth"
      "er_dialogs\030\006 \001(\010\"`\n\026CDOTAUserMsg_VoteSta"
      "rt\022\r\n\005title\030\001 \001(\t\022\020\n\010duration\030\002 \001(\002\022\024\n\014c"
      "hoice_count\030\003 \001(\005\022\017\n\007choices\030\004 \003(\t\"0\n\027CD"
      "OTAUserMsg_VoteUpdate\022\025\n\rchoice_counts\030\001"
      " \003(\005\"/\n\024CDOTAUserMsg_VoteEnd\022\027\n\017selected"
      "_choice\030\001 \001(\005\"\214\001\n\037CDOTAUserMsg_BoosterSt"
      "atePlayer\022\021\n\tplayer_id\030\001 \001(\r\022\r\n\005bonus\030\002 "
      "\001(\002\022\023\n\013event_bonus\030\003 \001(\002\022\025\n\rbonus_item_i"
      "d\030\004 \001(\r\022\033\n\023event_bonus_item_id\030\005 \001(\r\"a\n\031"
      "CDOTAUserMsg_BoosterState\022D\n\017boosted_pla"
      "yers\030\001 \003(\0132+.proto.dota.CDOTAUserMsg_Boo"
      "sterStatePlayer\")\n\026CDOTAUserMsg_PlayerMM"
      "R\022\017\n\003mmr\030\001 \003(\021B\002\020\001\"Y\n\031CDOTAUserMsg_Abili"
      "tySteal\022\021\n\tplayer_id\030\001 \001(\r\022\022\n\nability_id"
      "\030\002 \001(\r\022\025\n\rability_level\030\003 \001(\r\"f\n\034CDOTAUs"
      "erMsg_StatsHeroLookup\022\021\n\tplayer_id\030\001 \001(\005"
      "\022\017\n\007hero_id\030\002 \001(\005\022\021\n\thero_name\030\003 \001(\t\022\017\n\007"
      "persona\030\004 \001(\t\"\220\002\n\"CDOTAUserMsg_StatsHero"
      "PositionInfo\022\030\n\020average_position\030\001 \001(\002\022U"
      "\n\020position_details\030\002 \003(\0132;.proto.dota.CD"
      "OTAUserMsg_StatsHeroPositionInfo.Positio"
      "nPair\032y\n\014PositionPair\022Q\n\021position_catego"
      "ry\030\001 \001(\0162\".proto.dota.DOTA_POSITION_CATE"
      "GORY:\022DOTA_POSITION_NONE\022\026\n\016position_cou"
      "nt\030\002 \001(\r\"\232\003\n#CDOTAUserMsg_StatsHeroMinut"
      "eDetails\022\021\n\tlast_hits\030\001 \001(\r\022\022\n\nhero_kill"
      "s\030\002 \001(\r\022\023\n\013hero_damage\030\003 \001(\r\022\024\n\014tower_da"
      "mage\030\004 \001(\r\022E\n\rposition_info\030\005 \001(\0132..prot"
      "o.dota.CDOTAUserMsg_StatsHeroPositionInf"
      "o\022\020\n\010total_xp\030\006 \001(\r\022\021\n\tnet_worth\030\007 \001(\r\022\034"
      "\n\024harvested_creep_gold\030\010 \001(\r\022\024\n\014claimed_"
      "farm\030\t \001(\r\022\024\n\014wards_placed\030\n \001(\r\022\027\n\017rune"
      "s_collected\030\013 \001(\r\022\020\n\010tps_used\030\014 \001(\r\022\022\n\nm"
      "ana_spent\030\r \003(\r\022\027\n\017damage_absorbed\030\016 \003(\r"
      "\022\023\n\013damage_done\030\017 \003(\r\"\375\003\n#CDOTAUserMsg_S"
      "tatsTeamMinuteDetails\022E\n\014player_stats\030\001 "
      "\003(\0132/.proto.dota.CDOTAUserMsg_StatsHeroM"
      "inuteDetails\022\023\n\013tower_kills\030\002 \001(\r\022\025\n\rbar"
      "rack_kills\030\003 \001(\r\022!\n\031available_lane_creep"
      "_gold\030\004 \001(\r\022\032\n\022balance_kill_value\030\005 \001(\r\022"
      "\033\n\023balance_tower_value\030\006 \001(\r\022\036\n\026balance_"
      "barracks_value\030\007 \001(\r\022\032\n\022balance_gold_val"
      "ue\030\010 \001(\r\022\030\n\020balance_xp_value\030\t \001(\r\022]\n\020la"
      "ne_performance\030\n \003(\0132C.proto.dota.CDOTAU"
      "serMsg_StatsTeamMinuteDetails.LocationPe"
      "rformance\032R\n\023LocationPerformance\022\031\n\021loca"
      "tion_category\030\001 \001(\r\022\021\n\tstat_type\030\002 \001(\r\022\r"
      "\n\005value\030\003 \001(\r\"\254\001\n!CDOTAUserMsg_StatsPlay"
      "erKillShare\022\021\n\tplayer_id\030\001 \001(\005\022\032\n\022kill_s"
      "hare_percent\030\002 \001(\002\022\024\n\014player_loc_x\030\003 \001(\002"
      "\022\024\n\014player_loc_y\030\004 \001(\002\022\026\n\016health_percent"
      "\030\005 \001(\002\022\024\n\014mana_percent\030\006 \001(\002\"\317\001\n\035CDOTAUs"
      "erMsg_StatsKillDetails\022\021\n\tvictim_id\030\001 \001("
      "\r\022B\n\013kill_shares\030\002 \003(\0132-.proto.dota.CDOT"
      "AUserMsg_StatsPlayerKillShare\022\026\n\016damage_"
      "to_kill\030\003 \001(\r\022\030\n\020effective_health\030\004 \001(\r\022"
      "\022\n\ndeath_time\030\005 \001(\002\022\021\n\tkiller_id\030\006 \001(\r\"\343"
      "\006\n\036CDOTAUserMsg_StatsMatchDetails\022=\n\013her"
      "o_lookup\030\001 \003(\0132(.proto.dota.CDOTAUserMsg"
      "_StatsHeroLookup\022F\n\rradiant_stats\030\002 \003(\0132"
      "/.proto.dota.CDOTAUserMsg_StatsTeamMinut"
      "eDetails\022C\n\ndire_stats\030\003 \003(\0132/.proto.dot"
      "a.CDOTAUserMsg_StatsTeamMinuteDetails\022@\n"
      "\rradiant_kills\030\004 \003(\0132).proto.dota.CDOTAU"
      "serMsg_StatsKillDetails\022=\n\ndire_kills\030\005 "
      "\003(\0132).proto.dota.CDOTAUserMsg_StatsKillD"
      "etails\022`\n\rfight_details\030\006 \003(\0132I.proto.do"
      "ta.CDOTAUserMsg_StatsMatchDetails.CDOTAU"
      "serMsg_StatsFightDetails\032p\n\"CDOTAUserMsg"
      "_StatsFightTeamDetails\022\024\n\014participants\030\001"
      " \003(\r\022\016\n\006deaths\030\002 \003(\r\022\022\n\ngold_delta\030\003 \001(\r"
      "\022\020\n\010xp_delta\030\004 \001(\r\032\237\002\n\036CDOTAUserMsg_Stat"
      "sFightDetails\022\022\n\nstart_time\030\001 \001(\002\022\020\n\010end"
      "_time\030\002 \001(\002\022l\n\025radiant_fight_details\030\003 \001"
      "(\0132M.proto.dota.CDOTAUserMsg_StatsMatchD"
      "etails.CDOTAUserMsg_StatsFightTeamDetail"
      "s\022i\n\022dire_fight_details\030\004 \001(\0132M.proto.do"
      "ta.CDOTAUserMsg_StatsMatchDetails.CDOTAU"
      "serMsg_StatsFightTeamDetails\"4\n\026CDOTAUse"
      "rMsg_MiniTaunt\022\032\n\022taunting_player_id\030\001 \001"
      "(\r\"0\n\031CDOTAUserMsg_SpeechBubble\022\023\n\013destr"
      "oy_all\030\001 \001(\010\"g\n CDOTAUserMsg_CustomHeade"
      "rMessage\022\021\n\tplayer_id\030\001 \001(\r\022\020\n\010duration\030"
      "\002 \001(\002\022\017\n\007message\030\003 \001(\t\022\r\n\005value\030\004 \001(\005\"\201\001"
      "\n\023CMsgHeroAbilityStat\022B\n\tstat_type\030\001 \001(\016"
      "2\031.proto.dota.EHeroStatType:\024k_EHeroStat"
      "Type_None\022\021\n\tint_value\030\002 \001(\005\022\023\n\013float_va"
      "lue\030\003 \001(\002\"o\n\034CMsgCombatAnalyzerPlayerSta"
      "t\022\022\n\naccount_id\030\001 \001(\r\022;\n\022hero_ability_st"
      "ats\030\002 \003(\0132\037.proto.dota.CMsgHeroAbilitySt"
      "at\"k\n\027CMsgCombatAnalyzerStats\022\020\n\010match_i"
      "d\030\001 \001(\004\022>\n\014player_stats\030\002 \003(\0132(.proto.do"
      "ta.CMsgCombatAnalyzerPlayerStat\"W\n\026CDOTA"
      "UserMsg_BeastChat\022\014\n\004team\030\001 \001(\r\022\016\n\006forma"
      "t\030\002 \001(\t\022\017\n\007message\030\003 \001(\t\022\016\n\006target\030\004 \001(\t"
      "\"a\n$CDOTAUserMsg_CustomHudElement_Create"
      "\022\022\n\nelement_id\030\001 \001(\t\022\027\n\017layout_filename\030"
      "\002 \001(\t\022\014\n\004data\030\003 \001(\014\"`\n$CDOTAUserMsg_Cust"
      "omHudElement_Modify\022\022\n\nelement_id\030\001 \001(\t\022"
      "\026\n\016modify_visible\030\002 \001(\010\022\014\n\004data\030\003 \001(\014\";\n"
      "%CDOTAUserMsg_CustomHudElement_Destroy\022\022"
      "\n\nelement_id\030\001 \001(\t\"F\n\"CDOTAUserMsg_Compe"
      "ndiumStatePlayer\022\021\n\tplayer_id\030\001 \001(\r\022\r\n\005l"
      "evel\030\002 \001(\r\"j\n\034CDOTAUserMsg_CompendiumSta"
      "te\022J\n\022compendium_players\030\001 \003(\0132..proto.d"
      "ota.CDOTAUserMsg_CompendiumStatePlayer\"\347"
      "\001\n\036CDOTAUserMsg_ProjectionAbility\022\022\n\nabi"
      "lity_id\030\001 \001(\r\022\030\n\020caster_ent_index\030\002 \001(\005\022"
      "\023\n\013caster_team\030\003 \001(\005\022\023\n\013channel_end\030\004 \001("
      "\010\022&\n\006origin\030\005 \001(\0132\026.proto.dota.CMsgVecto"
      "r\022\031\n\021track_caster_only\030\006 \001(\010\022\020\n\010end_time"
      "\030\007 \001(\002\022\030\n\020victim_ent_index\030\010 \001(\005\"l\n\034CDOT"
      "AUserMsg_ProjectionEvent\022>\n\010event_id\030\001 \001"
      "(\0162\034.proto.dota.EProjectionEvent:\016ePE_Fi"
      "rstBlood\022\014\n\004team\030\002 \001(\r\"B\n\024CDOTAUserMsg_X"
      "PAlert\022\021\n\tplayer_id\030\001 \001(\r\022\027\n\017target_enti"
      "ndex\030\002 \001(\r\"\"\n CDOTAUserMsg_UpdateQuestPr"
      "ogress\"\254\001\n\030CDOTAUserMsg_QuestStatus\022\021\n\tp"
      "layer_id\030\001 \002(\r\022\020\n\010quest_id\030\002 \001(\r\022\024\n\014chal"
      "lenge_id\030\003 \001(\r\022\020\n\010progress\030\004 \001(\r\022\014\n\004goal"
      "\030\005 \001(\r\022\r\n\005query\030\006 \001(\r\022\025\n\rfail_gametime\030\007"
      " \001(\002\022\017\n\007item_id\030\010 \001(\r\"O\n\034CDOTAUserMsg_Su"
      "ggestHeroPick\022\021\n\tplayer_id\030\001 \002(\r\022\017\n\007hero"
      "_id\030\002 \001(\r\022\013\n\003ban\030\003 \001(\010\"D\n\034CDOTAUserMsg_S"
      "uggestHeroRole\022\021\n\tplayer_id\030\001 \002(\r\022\021\n\ther"
      "o_role\030\002 \001(\t\"\227\001\n\037CDOTAUserMsg_KillcamDam"
      "ageTaken\022\021\n\tplayer_id\030\001 \002(\r\022\024\n\014damage_ta"
      "ken\030\002 \001(\r\022\021\n\titem_type\030\003 \001(\r\022\017\n\007item_id\030"
      "\004 \001(\r\022\021\n\thero_name\030\005 \001(\t\022\024\n\014damage_color"
      "\030\006 \001(\t\"A\n\036CDOTAUserMsg_SelectPenaltyGold"
      "\022\021\n\tplayer_id\030\001 \002(\r\022\014\n\004cost\030\002 \001(\021\"z\n\033CDO"
      "TAUserMsg_RollDiceResult\022\021\n\tplayer_id\030\001 "
      "\001(\r\022\024\n\014channel_type\030\002 \001(\r\022\020\n\010roll_min\030\003 "
      "\001(\r\022\020\n\010roll_max\030\004 \001(\r\022\016\n\006result\030\005 \001(\r\"V\n"
      "\033CDOTAUserMsg_FlipCoinResult\022\021\n\tplayer_i"
      "d\030\001 \001(\r\022\024\n\014channel_type\030\002 \001(\r\022\016\n\006result\030"
      "\003 \001(\010\"<\n\'CDOTAUserMessage_RequestItemSug"
      "gestions\022\021\n\tplayer_id\030\001 \001(\r\"N\n#CDOTAUser"
      "Message_TeamCaptainChanged\022\014\n\004team\030\001 \001(\r"
      "\022\031\n\021captain_player_id\030\002 \001(\r\"P\n\036CDOTAUser"
      "Msg_ChatWheelCooldown\022\022\n\nmessage_id\030\001 \001("
      "\r\022\032\n\022cooldown_remaining\030\002 \001(\002*\361\030\n\021EDotaU"
      "serMessages\022\037\n\032DOTA_UM_AddUnitToSelectio"
      "n\020\320\003\022\030\n\023DOTA_UM_AIDebugLine\020\321\003\022\026\n\021DOTA_U"
      "M_ChatEvent\020\322\003\022 \n\033DOTA_UM_CombatHeroPosi"
      "tions\020\323\003\022\032\n\025DOTA_UM_CombatLogData\020\324\003\022\037\n\032"
      "DOTA_UM_CombatLogShowDeath\020\326\003\022#\n\036DOTA_UM"
      "_CreateLinearProjectile\020\327\003\022$\n\037DOTA_UM_De"
      "stroyLinearProjectile\020\330\003\022%\n DOTA_UM_Dodg"
      "eTrackingProjectiles\020\331\003\022\035\n\030DOTA_UM_Globa"
      "lLightColor\020\332\003\022!\n\034DOTA_UM_GlobalLightDir"
      "ection\020\333\003\022\033\n\026DOTA_UM_InvalidCommand\020\334\003\022\031"
      "\n\024DOTA_UM_LocationPing\020\335\003\022\024\n\017DOTA_UM_Map"
      "Line\020\336\003\022\034\n\027DOTA_UM_MiniKillCamInfo\020\337\003\022\036\n"
      "\031DOTA_UM_MinimapDebugPoint\020\340\003\022\031\n\024DOTA_UM"
      "_MinimapEvent\020\341\003\022\035\n\030DOTA_UM_NevermoreReq"
      "uiem\020\342\003\022\032\n\025DOTA_UM_OverheadEvent\020\343\003\022\037\n\032D"
      "OTA_UM_SetNextAutobuyItem\020\344\003\022\033\n\026DOTA_UM_"
      "SharedCooldown\020\345\003\022!\n\034DOTA_UM_SpectatorPl"
      "ayerClick\020\346\003\022\034\n\027DOTA_UM_TutorialTipInfo\020"
      "\347\003\022\026\n\021DOTA_UM_UnitEvent\020\350\003\022\034\n\027DOTA_UM_Pa"
      "rticleManager\020\351\003\022\024\n\017DOTA_UM_BotChat\020\352\003\022\025"
      "\n\020DOTA_UM_HudError\020\353\003\022\032\n\025DOTA_UM_ItemPur"
      "chased\020\354\003\022\021\n\014DOTA_UM_Ping\020\355\003\022\026\n\021DOTA_UM_"
      "ItemFound\020\356\003\022\"\n\035DOTA_UM_CharacterSpeakCo"
      "ncept\020\357\003\022\027\n\022DOTA_UM_SwapVerify\020\360\003\022\026\n\021DOT"
      "A_UM_WorldLine\020\361\003\022\033\n\026DOTA_UM_TournamentD"
      "rop\020\362\003\022\026\n\021DOTA_UM_ItemAlert\020\363\003\022\033\n\026DOTA_U"
      "M_HalloweenDrops\020\364\003\022\026\n\021DOTA_UM_ChatWheel"
      "\020\365\003\022\035\n\030DOTA_UM_ReceivedXmasGift\020\366\003\022 \n\033DO"
      "TA_UM_UpdateSharedContent\020\367\003\022\037\n\032DOTA_UM_"
      "TutorialRequestExp\020\370\003\022 \n\033DOTA_UM_Tutoria"
      "lPingMinimap\020\371\003\022\"\n\035DOTA_UM_GamerulesStat"
      "eChanged\020\372\003\022\027\n\022DOTA_UM_ShowSurvey\020\373\003\022\031\n\024"
      "DOTA_UM_TutorialFade\020\374\003\022\035\n\030DOTA_UM_AddQu"
      "estLogEntry\020\375\003\022\032\n\025DOTA_UM_SendStatPopup\020"
      "\376\003\022\033\n\026DOTA_UM_TutorialFinish\020\377\003\022\034\n\027DOTA_"
      "UM_SendRoshanPopup\020\200\004\022\037\n\032DOTA_UM_SendGen"
      "ericToolTip\020\201\004\022\032\n\025DOTA_UM_SendFinalGold\020"
      "\202\004\022\026\n\021DOTA_UM_CustomMsg\020\203\004\022\031\n\024DOTA_UM_Co"
      "achHUDPing\020\204\004\022\036\n\031DOTA_UM_ClientLoadGridN"
      "av\020\205\004\022\032\n\025DOTA_UM_TE_Projectile\020\206\004\022\035\n\030DOT"
      "A_UM_TE_ProjectileLoc\020\207\004\022\037\n\032DOTA_UM_TE_D"
      "otaBloodImpact\020\210\004\022\035\n\030DOTA_UM_TE_UnitAnim"
      "ation\020\211\004\022 \n\033DOTA_UM_TE_UnitAnimationEnd\020"
      "\212\004\022\030\n\023DOTA_UM_AbilityPing\020\213\004\022\035\n\030DOTA_UM_"
      "ShowGenericPopup\020\214\004\022\026\n\021DOTA_UM_VoteStart"
      "\020\215\004\022\027\n\022DOTA_UM_VoteUpdate\020\216\004\022\024\n\017DOTA_UM_"
      "VoteEnd\020\217\004\022\031\n\024DOTA_UM_BoosterState\020\220\004\022\036\n"
      "\031DOTA_UM_WillPurchaseAlert\020\221\004\022$\n\037DOTA_UM"
      "_TutorialMinimapPosition\020\222\004\022\026\n\021DOTA_UM_P"
      "layerMMR\020\223\004\022\031\n\024DOTA_UM_AbilitySteal\020\224\004\022\037"
      "\n\032DOTA_UM_CourierKilledAlert\020\225\004\022\033\n\026DOTA_"
      "UM_EnemyItemAlert\020\226\004\022\036\n\031DOTA_UM_StatsMat"
      "chDetails\020\227\004\022\026\n\021DOTA_UM_MiniTaunt\020\230\004\022\036\n\031"
      "DOTA_UM_BuyBackStateAlert\020\231\004\022\031\n\024DOTA_UM_"
      "SpeechBubble\020\232\004\022 \n\033DOTA_UM_CustomHeaderM"
      "essage\020\233\004\022\032\n\025DOTA_UM_QuickBuyAlert\020\234\004\022\035\n"
      "\030DOTA_UM_StatsHeroDetails\020\235\004\022\035\n\030DOTA_UM_"
      "PredictionResult\020\236\004\022\032\n\025DOTA_UM_ModifierA"
      "lert\020\237\004\022\030\n\023DOTA_UM_HPManaAlert\020\240\004\022\027\n\022DOT"
      "A_UM_GlyphAlert\020\241\004\022\026\n\021DOTA_UM_BeastChat\020"
      "\242\004\022&\n!DOTA_UM_SpectatorPlayerUnitOrders\020"
      "\243\004\022$\n\037DOTA_UM_CustomHudElement_Create\020\244\004"
      "\022$\n\037DOTA_UM_CustomHudElement_Modify\020\245\004\022%"
      "\n DOTA_UM_CustomHudElement_Destroy\020\246\004\022\034\n"
      "\027DOTA_UM_CompendiumState\020\247\004\022\036\n\031DOTA_UM_P"
      "rojectionAbility\020\250\004\022\034\n\027DOTA_UM_Projectio"
      "nEvent\020\251\004\022\036\n\031DOTA_UM_CombatLogDataHLTV\020\252"
      "\004\022\024\n\017DOTA_UM_XPAlert\020\253\004\022 \n\033DOTA_UM_Updat"
      "eQuestProgress\020\254\004\022\032\n\025DOTA_UM_MatchMetada"
      "ta\020\255\004\022\031\n\024DOTA_UM_MatchDetails\020\256\004\022\030\n\023DOTA"
      "_UM_QuestStatus\020\257\004\022\034\n\027DOTA_UM_SuggestHer"
      "oPick\020\260\004\022\034\n\027DOTA_UM_SuggestHeroRole\020\261\004\022\037"
      "\n\032DOTA_UM_KillcamDamageTaken\020\262\004\022\036\n\031DOTA_"
      "UM_SelectPenaltyGold\020\263\004\022\033\n\026DOTA_UM_RollD"
      "iceResult\020\264\004\022\033\n\026DOTA_UM_FlipCoinResult\020\265"
      "\004\022#\n\036DOTA_UM_RequestItemSuggestions\020\266\004\022\037"
      "\n\032DOTA_UM_TeamCaptainChanged\020\267\004\022%\n DOTA_"
      "UM_SendRoshanSpectatorPhase\020\270\004\022\036\n\031DOTA_U"
      "M_ChatWheelCooldown\020\271\004\022!\n\034DOTA_UM_Dismis"
      "sAllStatPopups\020\272\004*\365\032\n\021DOTA_CHAT_MESSAGE\022"
      "!\n\024CHAT_MESSAGE_INVALID\020\377\377\377\377\377\377\377\377\377\001\022\032\n\026CH"
      "AT_MESSAGE_HERO_KILL\020\000\022\032\n\026CHAT_MESSAGE_H"
      "ERO_DENY\020\001\022\036\n\032CHAT_MESSAGE_BARRACKS_KILL"
      "\020\002\022\033\n\027CHAT_MESSAGE_TOWER_KILL\020\003\022\033\n\027CHAT_"
      "MESSAGE_TOWER_DENY\020\004\022\033\n\027CHAT_MESSAGE_FIR"
      "STBLOOD\020\005\022\034\n\030CHAT_MESSAGE_STREAK_KILL\020\006\022"
      "\030\n\024CHAT_MESSAGE_BUYBACK\020\007\022\026\n\022CHAT_MESSAG"
      "E_AEGIS\020\010\022\034\n\030CHAT_MESSAGE_ROSHAN_KILL\020\t\022"
      "\035\n\031CHAT_MESSAGE_COURIER_LOST\020\n\022\"\n\036CHAT_M"
      "ESSAGE_COURIER_RESPAWNED\020\013\022\033\n\027CHAT_MESSA"
      "GE_GLYPH_USED\020\014\022\036\n\032CHAT_MESSAGE_ITEM_PUR"
      "CHASE\020\r\022\030\n\024CHAT_MESSAGE_CONNECT\020\016\022\033\n\027CHA"
      "T_MESSAGE_DISCONNECT\020\017\022.\n*CHAT_MESSAGE_D"
      "ISCONNECT_WAIT_FOR_RECONNECT\020\020\022*\n&CHAT_M"
      "ESSAGE_DISCONNECT_TIME_REMAINING\020\021\0221\n-CH"
      "AT_MESSAGE_DISCONNECT_TIME_REMAINING_PLU"
      "RAL\020\022\022\032\n\026CHAT_MESSAGE_RECONNECT\020\023\022\034\n\030CHA"
      "T_MESSAGE_PLAYER_LEFT\020\024\022\036\n\032CHAT_MESSAGE_"
      "SAFE_TO_LEAVE\020\025\022\034\n\030CHAT_MESSAGE_RUNE_PIC"
      "KUP\020\026\022\034\n\030CHAT_MESSAGE_RUNE_BOTTLE\020\027\022\031\n\025C"
      "HAT_MESSAGE_INTHEBAG\020\030\022\033\n\027CHAT_MESSAGE_S"
      "ECRETSHOP\020\031\022#\n\037CHAT_MESSAGE_ITEM_AUTOPUR"
      "CHASED\020\032\022\037\n\033CHAT_MESSAGE_ITEMS_COMBINED\020"
      "\033\022\035\n\031CHAT_MESSAGE_SUPER_CREEPS\020\034\022%\n!CHAT"
      "_MESSAGE_CANT_USE_ACTION_ITEM\020\035\022\"\n\036CHAT_"
      "MESSAGE_CHARGES_EXHAUSTED\020\036\022\032\n\026CHAT_MESS"
      "AGE_CANTPAUSE\020\037\022\035\n\031CHAT_MESSAGE_NOPAUSES"
      "LEFT\020 \022\035\n\031CHAT_MESSAGE_CANTPAUSEYET\020!\022\027\n"
      "\023CHAT_MESSAGE_PAUSED\020\"\022\"\n\036CHAT_MESSAGE_U"
      "NPAUSE_COUNTDOWN\020#\022\031\n\025CHAT_MESSAGE_UNPAU"
      "SED\020$\022\036\n\032CHAT_MESSAGE_AUTO_UNPAUSED\020%\022\032\n"
      "\026CHAT_MESSAGE_YOUPAUSED\020&\022 \n\034CHAT_MESSAG"
      "E_CANTUNPAUSETEAM\020\'\022\"\n\036CHAT_MESSAGE_VOIC"
      "E_TEXT_BANNED\020)\022.\n*CHAT_MESSAGE_SPECTATO"
      "RS_WATCHING_THIS_GAME\020*\022 \n\034CHAT_MESSAGE_"
      "REPORT_REMINDER\020+\022\032\n\026CHAT_MESSAGE_ECON_I"
      "TEM\020,\022\026\n\022CHAT_MESSAGE_TAUNT\020-\022\027\n\023CHAT_ME"
      "SSAGE_RANDOM\020.\022\030\n\024CHAT_MESSAGE_RD_TURN\020/"
      "\022 \n\034CHAT_MESSAGE_DROP_RATE_BONUS\0201\022!\n\035CH"
      "AT_MESSAGE_NO_BATTLE_POINTS\0202\022\035\n\031CHAT_ME"
      "SSAGE_DENIED_AEGIS\0203\022\036\n\032CHAT_MESSAGE_INF"
      "ORMATIONAL\0204\022\035\n\031CHAT_MESSAGE_AEGIS_STOLE"
      "N\0205\022\035\n\031CHAT_MESSAGE_ROSHAN_CANDY\0206\022\034\n\030CH"
      "AT_MESSAGE_ITEM_GIFTED\0207\022\'\n#CHAT_MESSAGE"
      "_HERO_KILL_WITH_GREEVIL\0208\022(\n$CHAT_MESSAG"
      "E_HOLDOUT_TOWER_DESTROYED\0209\022\'\n#CHAT_MESS"
      "AGE_HOLDOUT_WALL_DESTROYED\020:\022&\n\"CHAT_MES"
      "SAGE_HOLDOUT_WALL_FINISHED\020;\022)\n%CHAT_MES"
      "SAGE_PLAYER_LEFT_LIMITED_HERO\020>\0221\n-CHAT_"
      "MESSAGE_ABANDON_LIMITED_HERO_EXPLANATION"
      "\020\?\022(\n$CHAT_MESSAGE_DISCONNECT_LIMITED_HE"
      "RO\020@\0223\n/CHAT_MESSAGE_LOW_PRIORITY_COMPLE"
      "TED_EXPLANATION\020A\022,\n(CHAT_MESSAGE_RECRUI"
      "TMENT_DROP_RATE_BONUS\020B\0221\n-CHAT_MESSAGE_"
      "FROSTIVUS_SHINING_BOOSTER_ACTIVE\020C\022 \n\034CH"
      "AT_MESSAGE_PLAYER_LEFT_AFK\020I\0222\n.CHAT_MES"
      "SAGE_PLAYER_LEFT_DISCONNECTED_TOO_LONG\020J"
      "\022!\n\035CHAT_MESSAGE_PLAYER_ABANDONED\020K\022%\n!C"
      "HAT_MESSAGE_PLAYER_ABANDONED_AFK\020L\0227\n3CH"
      "AT_MESSAGE_PLAYER_ABANDONED_DISCONNECTED"
      "_TOO_LONG\020M\022#\n\037CHAT_MESSAGE_WILL_NOT_BE_"
      "SCORED\020N\022*\n&CHAT_MESSAGE_WILL_NOT_BE_SCO"
      "RED_RANKED\020O\022+\n\'CHAT_MESSAGE_WILL_NOT_BE"
      "_SCORED_NETWORK\020P\0222\n.CHAT_MESSAGE_WILL_N"
      "OT_BE_SCORED_NETWORK_RANKED\020Q\022)\n%CHAT_ME"
      "SSAGE_CAN_QUIT_WITHOUT_ABANDON\020R\022:\n6CHAT"
      "_MESSAGE_RANKED_GAME_STILL_SCORED_LEAVER"
      "S_GET_LOSS\020S\0228\n4CHAT_MESSAGE_ABANDON_RAN"
      "KED_BEFORE_FIRST_BLOOD_PARTY\020T\022!\n\035CHAT_M"
      "ESSAGE_COMPENDIUM_LEVEL\020U\022*\n&CHAT_MESSAG"
      "E_VICTORY_PREDICTION_STREAK\020V\022\"\n\036CHAT_ME"
      "SSAGE_ASSASSIN_ANNOUNCE\020W\022!\n\035CHAT_MESSAG"
      "E_ASSASSIN_SUCCESS\020X\022 \n\034CHAT_MESSAGE_ASS"
      "ASSIN_DENIED\020Y\0227\n3CHAT_MESSAGE_VICTORY_P"
      "REDICTION_SINGLE_USER_CONFIRM\020Z\022\034\n\030CHAT_"
      "MESSAGE_EFFIGY_KILL\020[\022+\n\'CHAT_MESSAGE_VO"
      "ICE_TEXT_BANNED_OVERFLOW\020\\\022\"\n\036CHAT_MESSA"
      "GE_YEAR_BEAST_KILLED\020]\022 \n\034CHAT_MESSAGE_P"
      "AUSE_COUNTDOWN\020^\022\036\n\032CHAT_MESSAGE_COINS_W"
      "AGERED\020_\022#\n\037CHAT_MESSAGE_HERO_NOMINATED_"
      "BAN\020`\022\034\n\030CHAT_MESSAGE_HERO_BANNED\020a\022\037\n\033C"
      "HAT_MESSAGE_HERO_BAN_COUNT\020b\022\036\n\032CHAT_MES"
      "SAGE_RIVER_PAINTED\020c\022\032\n\026CHAT_MESSAGE_SCA"
      "N_USED\020d\022\036\n\032CHAT_MESSAGE_SHRINE_KILLED\020e"
      "\022\"\n\036CHAT_MESSAGE_WAGER_TOKEN_SPENT\020f\022\033\n\027"
      "CHAT_MESSAGE_RANK_WAGER\020g*\262\001\n\035DOTA_NO_BA"
      "TTLE_POINTS_REASONS\022%\n!NO_BATTLE_POINTS_"
      "WRONG_LOBBY_TYPE\020\001\022\"\n\036NO_BATTLE_POINTS_P"
      "RACTICE_BOTS\020\002\022#\n\037NO_BATTLE_POINTS_CHEAT"
      "S_ENABLED\020\003\022!\n\035NO_BATTLE_POINTS_LOW_PRIO"
      "RITY\020\004*\250\001\n\027DOTA_CHAT_INFORMATIONAL\022!\n\035IN"
      "FO_COOP_BATTLE_POINTS_RULES\020\001\022#\n\037INFO_FR"
      "OSTIVUS_ABANDON_REMINDER\020\002\022\030\n\024INFO_RANKE"
      "D_REMINDER\020\003\022+\n\'INFO_COOP_LOW_PRIORITY_P"
      "ASSIVE_REMINDER\020\004*\263\001\n\026DOTA_ABILITY_PING_"
      "TYPE\022\026\n\022ABILITY_PING_READY\020\001\022\025\n\021ABILITY_"
      "PING_MANA\020\002\022\031\n\025ABILITY_PING_COOLDOWN\020\003\022\026"
      "\n\022ABILITY_PING_ENEMY\020\004\022\032\n\026ABILITY_PING_U"
      "NLEARNED\020\005\022\033\n\027ABILITY_PING_INBACKPACK\020\006*"
      "\273\001\n\027DOTA_REPLAY_STATE_EVENT\022&\n\"DOTA_REPL"
      "AY_STATE_EVENT_GAME_START\020\001\022)\n%DOTA_REPL"
      "AY_STATE_EVENT_STARTING_HORN\020\002\022\'\n#DOTA_R"
      "EPLAY_STATE_EVENT_FIRST_BLOOD\020\003\022$\n DOTA_"
      "REPLAY_STATE_EVENT_SHOWCASE\020\004*\345\001\n\023EDotaE"
      "ntityMessages\022\024\n\020DOTA_UNIT_SPEECH\020\000\022\031\n\025D"
      "OTA_UNIT_SPEECH_MUTE\020\001\022\031\n\025DOTA_UNIT_ADD_"
      "GESTURE\020\002\022\034\n\030DOTA_UNIT_REMOVE_GESTURE\020\003\022"
      "!\n\035DOTA_UNIT_REMOVE_ALL_GESTURES\020\004\022\032\n\026DO"
      "TA_UNIT_FADE_GESTURE\020\006\022%\n!DOTA_UNIT_SPEE"
      "CH_CLIENTSIDE_RULES\020\007*\261\006\n\025DOTA_PARTICLE_"
      "MESSAGE\022&\n\"DOTA_PARTICLE_MANAGER_EVENT_C"
      "REATE\020\000\022&\n\"DOTA_PARTICLE_MANAGER_EVENT_U"
      "PDATE\020\001\022.\n*DOTA_PARTICLE_MANAGER_EVENT_U"
      "PDATE_FORWARD\020\002\0222\n.DOTA_PARTICLE_MANAGER"
      "_EVENT_UPDATE_ORIENTATION\020\003\022/\n+DOTA_PART"
      "ICLE_MANAGER_EVENT_UPDATE_FALLBACK\020\004\022*\n&"
      "DOTA_PARTICLE_MANAGER_EVENT_UPDATE_ENT\020\005"
      "\022-\n)DOTA_PARTICLE_MANAGER_EVENT_UPDATE_O"
      "FFSET\020\006\022\'\n#DOTA_PARTICLE_MANAGER_EVENT_D"
      "ESTROY\020\007\0221\n-DOTA_PARTICLE_MANAGER_EVENT_"
      "DESTROY_INVOLVING\020\010\022\'\n#DOTA_PARTICLE_MAN"
      "AGER_EVENT_RELEASE\020\t\022\'\n#DOTA_PARTICLE_MA"
      "NAGER_EVENT_LATENCY\020\n\022+\n\'DOTA_PARTICLE_M"
      "ANAGER_EVENT_SHOULD_DRAW\020\013\022&\n\"DOTA_PARTI"
      "CLE_MANAGER_EVENT_FROZEN\020\014\022\?\n;DOTA_PARTI"
      "CLE_MANAGER_EVENT_CHANGE_CONTROL_POINT_A"
      "TTACHMENT\020\r\0226\n2DOTA_PARTICLE_MANAGER_EVE"
      "NT_UPDATE_ENTITY_POSITION\020\016\0222\n.DOTA_PART"
      "ICLE_MANAGER_EVENT_SET_FOW_PROPERTIES\020\017\022"
      "(\n$DOTA_PARTICLE_MANAGER_EVENT_SET_TEXT\020"
      "\020*\225\005\n\023DOTA_OVERHEAD_ALERT\022\027\n\023OVERHEAD_AL"
      "ERT_GOLD\020\000\022\027\n\023OVERHEAD_ALERT_DENY\020\001\022\033\n\027O"
      "VERHEAD_ALERT_CRITICAL\020\002\022\025\n\021OVERHEAD_ALE"
      "RT_XP\020\003\022%\n!OVERHEAD_ALERT_BONUS_SPELL_DA"
      "MAGE\020\004\022\027\n\023OVERHEAD_ALERT_MISS\020\005\022\031\n\025OVERH"
      "EAD_ALERT_DAMAGE\020\006\022\030\n\024OVERHEAD_ALERT_EVA"
      "DE\020\007\022\030\n\024OVERHEAD_ALERT_BLOCK\020\010\022&\n\"OVERHE"
      "AD_ALERT_BONUS_POISON_DAMAGE\020\t\022\027\n\023OVERHE"
      "AD_ALERT_HEAL\020\n\022\033\n\027OVERHEAD_ALERT_MANA_A"
      "DD\020\013\022\034\n\030OVERHEAD_ALERT_MANA_LOSS\020\014\022!\n\035OV"
      "ERHEAD_ALERT_LAST_HIT_EARLY\020\r\022!\n\035OVERHEA"
      "D_ALERT_LAST_HIT_CLOSE\020\016\022 \n\034OVERHEAD_ALE"
      "RT_LAST_HIT_MISS\020\017\022 \n\034OVERHEAD_ALERT_MAG"
      "ICAL_BLOCK\020\020\022\"\n\036OVERHEAD_ALERT_INCOMING_"
      "DAMAGE\020\021\022\"\n\036OVERHEAD_ALERT_OUTGOING_DAMA"
      "GE\020\022\022!\n\035OVERHEAD_ALERT_DISABLE_RESIST\020\023\022"
      "\030\n\024OVERHEAD_ALERT_DEATH\020\024*k\n\021DOTA_ROSHAN"
      "_PHASE\022\027\n\023k_SRSP_ROSHAN_ALIVE\020\000\022\034\n\030k_SRS"
      "P_ROSHAN_BASE_TIMER\020\001\022\037\n\033k_SRSP_ROSHAN_V"
      "ISIBLE_TIMER\020\002*\201\004\n\026DOTA_POSITION_CATEGOR"
      "Y\022\026\n\022DOTA_POSITION_NONE\020\000\022\035\n\031DOTA_POSITI"
      "ON_BOTTOM_LANE\020\001\022\032\n\026DOTA_POSITION_MID_LA"
      "NE\020\002\022\032\n\026DOTA_POSITION_TOP_LANE\020\003\022 \n\034DOTA"
      "_POSITION_RADIANT_JUNGLE\020\004\022\035\n\031DOTA_POSIT"
      "ION_DIRE_JUNGLE\020\005\022\"\n\036DOTA_POSITION_RADIA"
      "NT_ANCIENTS\020\006\022\037\n\033DOTA_POSITION_DIRE_ANCI"
      "ENTS\020\007\022%\n!DOTA_POSITION_RADIANT_SECRET_S"
      "HOP\020\010\022\"\n\036DOTA_POSITION_DIRE_SECRET_SHOP\020"
      "\t\022\027\n\023DOTA_POSITION_RIVER\020\n\022\034\n\030DOTA_POSIT"
      "ION_ROSHAN_PIT\020\013\022\036\n\032DOTA_POSITION_RADIAN"
      "T_BASE\020\014\022\033\n\027DOTA_POSITION_DIRE_BASE\020\r\022\032\n"
      "\026DOTA_POSITION_FOUNTAIN\020\016\022\027\n\023DOTA_POSITI"
      "ON_OTHER\020\017*\346\001\n\030DOTA_ABILITY_TARGET_TYPE\022"
      "\034\n\030DOTA_ABILITY_TARGET_NONE\020\000\022\034\n\030DOTA_AB"
      "ILITY_TARGET_SELF\020\001\022!\n\035DOTA_ABILITY_TARG"
      "ET_ALLY_HERO\020\002\022\"\n\036DOTA_ABILITY_TARGET_AL"
      "LY_CREEP\020\003\022\"\n\036DOTA_ABILITY_TARGET_ENEMY_"
      "HERO\020\004\022#\n\037DOTA_ABILITY_TARGET_ENEMY_CREE"
      "P\020\005*\230\010\n\rEHeroStatType\022\030\n\024k_EHeroStatType"
      "_None\020\000\022#\n\036k_EHeroStatType_AxeTotalDamag"
      "e\020\320\017\022\'\n\"k_EHeroStatType_BattleHungerDama"
      "ge\020\321\017\022\'\n\"k_EHeroStatType_CounterHelixDam"
      "age\020\322\017\022\'\n\"k_EHeroStatType_CullingBladeDa"
      "mage\020\323\017\022,\n\'k_EHeroStatType_BerserkersCal"
      "lCastCount\020\324\017\0223\n.k_EHeroStatType_Berserk"
      "ersCallHeroesHitAverage\020\325\017\0220\n+k_EHeroSta"
      "tType_BerserkersCallOtherUnitsHit\020\326\017\0223\n."
      "k_EHeroStatType_BerserkersCallHeroAttack"
      "sTaken\020\327\017\0224\n/k_EHeroStatType_BerserkersC"
      "allOtherAttacksTaken\020\330\017\022*\n%k_EHeroStatTy"
      "pe_BattleHungerCastCount\020\331\017\0222\n-k_EHeroSt"
      "atType_BattleHungerPotentialDuration\020\332\017\022"
      "0\n+k_EHeroStatType_BattleHungerAverageDu"
      "ration\020\333\017\022*\n%k_EHeroStatType_CounterHeli"
      "xProcCount\020\334\017\022.\n)k_EHeroStatType_Counter"
      "HelixHeroProcCount\020\335\017\0221\n,k_EHeroStatType"
      "_CounterHelixHeroesHitAverage\020\336\017\0223\n.k_EH"
      "eroStatType_CounterHelixOtherUnitsHitCou"
      "nt\020\337\017\022*\n%k_EHeroStatType_CullingBladeCas"
      "tCount\020\340\017\022*\n%k_EHeroStatType_CullingBlad"
      "eKillCount\020\341\017\0224\n/k_EHeroStatType_Culling"
      "BladeAverageHealthCulled\020\342\017\0227\n2k_EHeroSt"
      "atType_CullingBladeAverageDamageAvailabl"
      "e\020\343\017\0220\n+k_EHeroStatType_CullingBladeHero"
      "BuffAverage\020\344\017*\251\004\n\027EPlayerVoiceListenSta"
      "te\022\016\n\nkPVLS_None\020\000\022\032\n\026kPVLS_DeniedChatBa"
      "nned\020\001\022\027\n\023kPVLS_DeniedPartner\020\002\022&\n\"kPVLS"
      "_DeniedHLTVTalkerNotSpectator\020\003\022$\n kPVLS"
      "_DeniedHLTVNoTalkerPlayerID\020\004\022(\n$kPVLS_D"
      "eniedHLTVTalkerNotBroadcaster\020\005\022\035\n\031kPVLS"
      "_DeniedTeamSpectator\020\006\022\027\n\023kPVLS_DeniedSt"
      "udent\020\010\022\020\n\014kPVLS_Denied\020@\022&\n\"kPVLS_Allow"
      "HLTVTalkerIsBroadcaster\020A\022\034\n\030kPVLS_Allow"
      "CoBroadcaster\020B\022\026\n\022kPVLS_AllowAllChat\020C\022"
      "\035\n\031kPVLS_AllowStudentToCoach\020D\022\034\n\030kPVLS_"
      "AllowFellowStudent\020E\022\034\n\030kPVLS_AllowTalke"
      "rIsCoach\020F\022\034\n\030kPVLS_AllowCoachHearTeam\020G"
      "\022\027\n\023kPVLS_AllowSameTeam\020H\022\027\n\023kPVLS_Allow"
      "Showcase\020I*B\n\020EProjectionEvent\022\022\n\016ePE_Fi"
      "rstBlood\020\000\022\032\n\026ePE_Killstreak_godlike\020\001B\005"
      "H\001\200\001\000"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 29605);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dota_usermessages.proto", &protobuf_RegisterTypes);
  ::proto::dota::protobuf_networkbasetypes_2eproto::AddDescriptors();
  ::proto::dota::protobuf_dota_5fcommonmessages_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_dota_5fusermessages_2eproto

const ::google::protobuf::EnumDescriptor* CDOTAUserMsg_PredictionResult_Prediction_EResult_descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_enum_descriptors[0];
}
bool CDOTAUserMsg_PredictionResult_Prediction_EResult_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CDOTAUserMsg_PredictionResult_Prediction_EResult CDOTAUserMsg_PredictionResult_Prediction::k_eResult_ItemGranted;
const CDOTAUserMsg_PredictionResult_Prediction_EResult CDOTAUserMsg_PredictionResult_Prediction::k_eResult_Destroyed;
const CDOTAUserMsg_PredictionResult_Prediction_EResult CDOTAUserMsg_PredictionResult_Prediction::EResult_MIN;
const CDOTAUserMsg_PredictionResult_Prediction_EResult CDOTAUserMsg_PredictionResult_Prediction::EResult_MAX;
const int CDOTAUserMsg_PredictionResult_Prediction::EResult_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CDOTAResponseQuerySerialized_Fact_ValueType_descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_enum_descriptors[1];
}
bool CDOTAResponseQuerySerialized_Fact_ValueType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CDOTAResponseQuerySerialized_Fact_ValueType CDOTAResponseQuerySerialized_Fact::NUMERIC;
const CDOTAResponseQuerySerialized_Fact_ValueType CDOTAResponseQuerySerialized_Fact::STRING;
const CDOTAResponseQuerySerialized_Fact_ValueType CDOTAResponseQuerySerialized_Fact::ValueType_MIN;
const CDOTAResponseQuerySerialized_Fact_ValueType CDOTAResponseQuerySerialized_Fact::ValueType_MAX;
const int CDOTAResponseQuerySerialized_Fact::ValueType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* EDotaUserMessages_descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_enum_descriptors[2];
}
bool EDotaUserMessages_IsValid(int value) {
  switch (value) {
    case 464:
    case 465:
    case 466:
    case 467:
    case 468:
    case 470:
    case 471:
    case 472:
    case 473:
    case 474:
    case 475:
    case 476:
    case 477:
    case 478:
    case 479:
    case 480:
    case 481:
    case 482:
    case 483:
    case 484:
    case 485:
    case 486:
    case 487:
    case 488:
    case 489:
    case 490:
    case 491:
    case 492:
    case 493:
    case 494:
    case 495:
    case 496:
    case 497:
    case 498:
    case 499:
    case 500:
    case 501:
    case 502:
    case 503:
    case 504:
    case 505:
    case 506:
    case 507:
    case 508:
    case 509:
    case 510:
    case 511:
    case 512:
    case 513:
    case 514:
    case 515:
    case 516:
    case 517:
    case 518:
    case 519:
    case 520:
    case 521:
    case 522:
    case 523:
    case 524:
    case 525:
    case 526:
    case 527:
    case 528:
    case 529:
    case 530:
    case 531:
    case 532:
    case 533:
    case 534:
    case 535:
    case 536:
    case 537:
    case 538:
    case 539:
    case 540:
    case 541:
    case 542:
    case 543:
    case 544:
    case 545:
    case 546:
    case 547:
    case 548:
    case 549:
    case 550:
    case 551:
    case 552:
    case 553:
    case 554:
    case 555:
    case 556:
    case 557:
    case 558:
    case 559:
    case 560:
    case 561:
    case 562:
    case 563:
    case 564:
    case 565:
    case 566:
    case 567:
    case 568:
    case 569:
    case 570:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTA_CHAT_MESSAGE_descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_enum_descriptors[3];
}
bool DOTA_CHAT_MESSAGE_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTA_NO_BATTLE_POINTS_REASONS_descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_enum_descriptors[4];
}
bool DOTA_NO_BATTLE_POINTS_REASONS_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTA_CHAT_INFORMATIONAL_descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_enum_descriptors[5];
}
bool DOTA_CHAT_INFORMATIONAL_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTA_ABILITY_PING_TYPE_descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_enum_descriptors[6];
}
bool DOTA_ABILITY_PING_TYPE_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTA_REPLAY_STATE_EVENT_descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_enum_descriptors[7];
}
bool DOTA_REPLAY_STATE_EVENT_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EDotaEntityMessages_descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_enum_descriptors[8];
}
bool EDotaEntityMessages_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTA_PARTICLE_MESSAGE_descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_enum_descriptors[9];
}
bool DOTA_PARTICLE_MESSAGE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTA_OVERHEAD_ALERT_descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_enum_descriptors[10];
}
bool DOTA_OVERHEAD_ALERT_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTA_ROSHAN_PHASE_descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_enum_descriptors[11];
}
bool DOTA_ROSHAN_PHASE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTA_POSITION_CATEGORY_descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_enum_descriptors[12];
}
bool DOTA_POSITION_CATEGORY_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTA_ABILITY_TARGET_TYPE_descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_enum_descriptors[13];
}
bool DOTA_ABILITY_TARGET_TYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EHeroStatType_descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_enum_descriptors[14];
}
bool EHeroStatType_IsValid(int value) {
  switch (value) {
    case 0:
    case 2000:
    case 2001:
    case 2002:
    case 2003:
    case 2004:
    case 2005:
    case 2006:
    case 2007:
    case 2008:
    case 2009:
    case 2010:
    case 2011:
    case 2012:
    case 2013:
    case 2014:
    case 2015:
    case 2016:
    case 2017:
    case 2018:
    case 2019:
    case 2020:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EPlayerVoiceListenState_descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_enum_descriptors[15];
}
bool EPlayerVoiceListenState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 8:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EProjectionEvent_descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_enum_descriptors[16];
}
bool EProjectionEvent_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_AIDebugLine::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_AIDebugLine::CDOTAUserMsg_AIDebugLine()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_AIDebugLine)
}
CDOTAUserMsg_AIDebugLine::CDOTAUserMsg_AIDebugLine(const CDOTAUserMsg_AIDebugLine& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_message()) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_AIDebugLine)
}

void CDOTAUserMsg_AIDebugLine::SharedCtor() {
  _cached_size_ = 0;
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CDOTAUserMsg_AIDebugLine::~CDOTAUserMsg_AIDebugLine() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_AIDebugLine)
  SharedDtor();
}

void CDOTAUserMsg_AIDebugLine::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CDOTAUserMsg_AIDebugLine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_AIDebugLine::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_AIDebugLine& CDOTAUserMsg_AIDebugLine::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_AIDebugLine* CDOTAUserMsg_AIDebugLine::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_AIDebugLine* n = new CDOTAUserMsg_AIDebugLine;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_AIDebugLine::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_AIDebugLine)
  if (has_message()) {
    GOOGLE_DCHECK(!message_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*message_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_AIDebugLine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_AIDebugLine)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string message = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDOTAUserMsg_AIDebugLine.message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_AIDebugLine)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_AIDebugLine)
  return false;
#undef DO_
}

void CDOTAUserMsg_AIDebugLine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_AIDebugLine)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string message = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAUserMsg_AIDebugLine.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_AIDebugLine)
}

::google::protobuf::uint8* CDOTAUserMsg_AIDebugLine::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_AIDebugLine)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string message = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAUserMsg_AIDebugLine.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_AIDebugLine)
  return target;
}

size_t CDOTAUserMsg_AIDebugLine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_AIDebugLine)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional string message = 1;
  if (has_message()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_AIDebugLine::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_AIDebugLine)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_AIDebugLine* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_AIDebugLine>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_AIDebugLine)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_AIDebugLine)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_AIDebugLine::MergeFrom(const CDOTAUserMsg_AIDebugLine& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_AIDebugLine)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_message()) {
    set_has_message();
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
}

void CDOTAUserMsg_AIDebugLine::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_AIDebugLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_AIDebugLine::CopyFrom(const CDOTAUserMsg_AIDebugLine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_AIDebugLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_AIDebugLine::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_AIDebugLine::Swap(CDOTAUserMsg_AIDebugLine* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_AIDebugLine::InternalSwap(CDOTAUserMsg_AIDebugLine* other) {
  message_.Swap(&other->message_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_AIDebugLine::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_AIDebugLine

// optional string message = 1;
bool CDOTAUserMsg_AIDebugLine::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_AIDebugLine::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_AIDebugLine::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_AIDebugLine::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
const ::std::string& CDOTAUserMsg_AIDebugLine::message() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_AIDebugLine.message)
  return message_.GetNoArena();
}
void CDOTAUserMsg_AIDebugLine::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_AIDebugLine.message)
}
#if LANG_CXX11
void CDOTAUserMsg_AIDebugLine::set_message(::std::string&& value) {
  set_has_message();
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDOTAUserMsg_AIDebugLine.message)
}
#endif
void CDOTAUserMsg_AIDebugLine::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDOTAUserMsg_AIDebugLine.message)
}
void CDOTAUserMsg_AIDebugLine::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDOTAUserMsg_AIDebugLine.message)
}
::std::string* CDOTAUserMsg_AIDebugLine::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_AIDebugLine.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDOTAUserMsg_AIDebugLine::release_message() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAUserMsg_AIDebugLine.message)
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDOTAUserMsg_AIDebugLine::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAUserMsg_AIDebugLine.message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_Ping::kPingFieldNumber;
const int CDOTAUserMsg_Ping::kLossFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_Ping::CDOTAUserMsg_Ping()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_Ping)
}
CDOTAUserMsg_Ping::CDOTAUserMsg_Ping(const CDOTAUserMsg_Ping& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ping_, &from.ping_,
    reinterpret_cast<char*>(&loss_) -
    reinterpret_cast<char*>(&ping_) + sizeof(loss_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_Ping)
}

void CDOTAUserMsg_Ping::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&ping_, 0, reinterpret_cast<char*>(&loss_) -
    reinterpret_cast<char*>(&ping_) + sizeof(loss_));
}

CDOTAUserMsg_Ping::~CDOTAUserMsg_Ping() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_Ping)
  SharedDtor();
}

void CDOTAUserMsg_Ping::SharedDtor() {
}

void CDOTAUserMsg_Ping::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_Ping::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_Ping& CDOTAUserMsg_Ping::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_Ping* CDOTAUserMsg_Ping::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_Ping* n = new CDOTAUserMsg_Ping;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_Ping::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_Ping)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&ping_, 0, reinterpret_cast<char*>(&loss_) -
      reinterpret_cast<char*>(&ping_) + sizeof(loss_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_Ping::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_Ping)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ping = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_ping();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ping_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 loss = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_loss();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &loss_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_Ping)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_Ping)
  return false;
#undef DO_
}

void CDOTAUserMsg_Ping::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_Ping)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ping = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ping(), output);
  }

  // optional uint32 loss = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->loss(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_Ping)
}

::google::protobuf::uint8* CDOTAUserMsg_Ping::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_Ping)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ping = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ping(), target);
  }

  // optional uint32 loss = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->loss(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_Ping)
  return target;
}

size_t CDOTAUserMsg_Ping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_Ping)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 ping = 2;
    if (has_ping()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ping());
    }

    // optional uint32 loss = 3;
    if (has_loss()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->loss());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_Ping::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_Ping)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_Ping* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_Ping>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_Ping)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_Ping)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_Ping::MergeFrom(const CDOTAUserMsg_Ping& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_Ping)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      ping_ = from.ping_;
    }
    if (cached_has_bits & 0x00000002u) {
      loss_ = from.loss_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_Ping::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_Ping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_Ping::CopyFrom(const CDOTAUserMsg_Ping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_Ping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_Ping::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_Ping::Swap(CDOTAUserMsg_Ping* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_Ping::InternalSwap(CDOTAUserMsg_Ping* other) {
  std::swap(ping_, other->ping_);
  std::swap(loss_, other->loss_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_Ping::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_Ping

// optional uint32 ping = 2;
bool CDOTAUserMsg_Ping::has_ping() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_Ping::set_has_ping() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_Ping::clear_has_ping() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_Ping::clear_ping() {
  ping_ = 0u;
  clear_has_ping();
}
::google::protobuf::uint32 CDOTAUserMsg_Ping::ping() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_Ping.ping)
  return ping_;
}
void CDOTAUserMsg_Ping::set_ping(::google::protobuf::uint32 value) {
  set_has_ping();
  ping_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_Ping.ping)
}

// optional uint32 loss = 3;
bool CDOTAUserMsg_Ping::has_loss() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAUserMsg_Ping::set_has_loss() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAUserMsg_Ping::clear_has_loss() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAUserMsg_Ping::clear_loss() {
  loss_ = 0u;
  clear_has_loss();
}
::google::protobuf::uint32 CDOTAUserMsg_Ping::loss() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_Ping.loss)
  return loss_;
}
void CDOTAUserMsg_Ping::set_loss(::google::protobuf::uint32 value) {
  set_has_loss();
  loss_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_Ping.loss)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_SwapVerify::kPlayerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_SwapVerify::CDOTAUserMsg_SwapVerify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_SwapVerify)
}
CDOTAUserMsg_SwapVerify::CDOTAUserMsg_SwapVerify(const CDOTAUserMsg_SwapVerify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  player_id_ = from.player_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_SwapVerify)
}

void CDOTAUserMsg_SwapVerify::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = 0u;
}

CDOTAUserMsg_SwapVerify::~CDOTAUserMsg_SwapVerify() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_SwapVerify)
  SharedDtor();
}

void CDOTAUserMsg_SwapVerify::SharedDtor() {
}

void CDOTAUserMsg_SwapVerify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_SwapVerify::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_SwapVerify& CDOTAUserMsg_SwapVerify::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_SwapVerify* CDOTAUserMsg_SwapVerify::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_SwapVerify* n = new CDOTAUserMsg_SwapVerify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_SwapVerify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_SwapVerify)
  player_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_SwapVerify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_SwapVerify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_player_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_SwapVerify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_SwapVerify)
  return false;
#undef DO_
}

void CDOTAUserMsg_SwapVerify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_SwapVerify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_SwapVerify)
}

::google::protobuf::uint8* CDOTAUserMsg_SwapVerify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_SwapVerify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_SwapVerify)
  return target;
}

size_t CDOTAUserMsg_SwapVerify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_SwapVerify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 player_id = 1;
  if (has_player_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->player_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_SwapVerify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_SwapVerify)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_SwapVerify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_SwapVerify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_SwapVerify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_SwapVerify)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_SwapVerify::MergeFrom(const CDOTAUserMsg_SwapVerify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_SwapVerify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    set_player_id(from.player_id());
  }
}

void CDOTAUserMsg_SwapVerify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_SwapVerify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_SwapVerify::CopyFrom(const CDOTAUserMsg_SwapVerify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_SwapVerify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_SwapVerify::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_SwapVerify::Swap(CDOTAUserMsg_SwapVerify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_SwapVerify::InternalSwap(CDOTAUserMsg_SwapVerify* other) {
  std::swap(player_id_, other->player_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_SwapVerify::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_SwapVerify

// optional uint32 player_id = 1;
bool CDOTAUserMsg_SwapVerify::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_SwapVerify::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_SwapVerify::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_SwapVerify::clear_player_id() {
  player_id_ = 0u;
  clear_has_player_id();
}
::google::protobuf::uint32 CDOTAUserMsg_SwapVerify::player_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_SwapVerify.player_id)
  return player_id_;
}
void CDOTAUserMsg_SwapVerify::set_player_id(::google::protobuf::uint32 value) {
  set_has_player_id();
  player_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_SwapVerify.player_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_ChatEvent::kTypeFieldNumber;
const int CDOTAUserMsg_ChatEvent::kValueFieldNumber;
const int CDOTAUserMsg_ChatEvent::kPlayerid1FieldNumber;
const int CDOTAUserMsg_ChatEvent::kPlayerid2FieldNumber;
const int CDOTAUserMsg_ChatEvent::kPlayerid3FieldNumber;
const int CDOTAUserMsg_ChatEvent::kPlayerid4FieldNumber;
const int CDOTAUserMsg_ChatEvent::kPlayerid5FieldNumber;
const int CDOTAUserMsg_ChatEvent::kPlayerid6FieldNumber;
const int CDOTAUserMsg_ChatEvent::kValue2FieldNumber;
const int CDOTAUserMsg_ChatEvent::kValue3FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_ChatEvent::CDOTAUserMsg_ChatEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_ChatEvent)
}
CDOTAUserMsg_ChatEvent::CDOTAUserMsg_ChatEvent(const CDOTAUserMsg_ChatEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&value_, &from.value_,
    reinterpret_cast<char*>(&playerid_5_) -
    reinterpret_cast<char*>(&value_) + sizeof(playerid_5_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_ChatEvent)
}

void CDOTAUserMsg_ChatEvent::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&value_, 0, reinterpret_cast<char*>(&value3_) -
    reinterpret_cast<char*>(&value_) + sizeof(value3_));
  playerid_6_ = -1;
  type_ = -1;
  playerid_1_ = -1;
  playerid_2_ = -1;
  playerid_3_ = -1;
  playerid_4_ = -1;
  playerid_5_ = -1;
}

CDOTAUserMsg_ChatEvent::~CDOTAUserMsg_ChatEvent() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_ChatEvent)
  SharedDtor();
}

void CDOTAUserMsg_ChatEvent::SharedDtor() {
}

void CDOTAUserMsg_ChatEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_ChatEvent::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_ChatEvent& CDOTAUserMsg_ChatEvent::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_ChatEvent* CDOTAUserMsg_ChatEvent::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_ChatEvent* n = new CDOTAUserMsg_ChatEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_ChatEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_ChatEvent)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&value_, 0, reinterpret_cast<char*>(&value3_) -
      reinterpret_cast<char*>(&value_) + sizeof(value3_));
    playerid_6_ = -1;
    type_ = -1;
    playerid_1_ = -1;
    playerid_2_ = -1;
    playerid_3_ = -1;
  }
  if (_has_bits_[8 / 32] & 768u) {
    playerid_4_ = -1;
    playerid_5_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_ChatEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_ChatEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .proto.dota.DOTA_CHAT_MESSAGE type = 1 [default = CHAT_MESSAGE_INVALID];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTA_CHAT_MESSAGE_IsValid(value)) {
            set_type(static_cast< ::proto::dota::DOTA_CHAT_MESSAGE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 playerid_1 = 3 [default = -1];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_playerid_1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &playerid_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 playerid_2 = 4 [default = -1];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_playerid_2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &playerid_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 playerid_3 = 5 [default = -1];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_playerid_3();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &playerid_3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 playerid_4 = 6 [default = -1];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_playerid_4();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &playerid_4_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 playerid_5 = 7 [default = -1];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_playerid_5();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &playerid_5_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 playerid_6 = 8 [default = -1];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_playerid_6();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &playerid_6_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 value2 = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_value2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 value3 = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_value3();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_ChatEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_ChatEvent)
  return false;
#undef DO_
}

void CDOTAUserMsg_ChatEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_ChatEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .proto.dota.DOTA_CHAT_MESSAGE type = 1 [default = CHAT_MESSAGE_INVALID];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint32 value = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->value(), output);
  }

  // optional sint32 playerid_1 = 3 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->playerid_1(), output);
  }

  // optional sint32 playerid_2 = 4 [default = -1];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->playerid_2(), output);
  }

  // optional sint32 playerid_3 = 5 [default = -1];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->playerid_3(), output);
  }

  // optional sint32 playerid_4 = 6 [default = -1];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->playerid_4(), output);
  }

  // optional sint32 playerid_5 = 7 [default = -1];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(7, this->playerid_5(), output);
  }

  // optional sint32 playerid_6 = 8 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(8, this->playerid_6(), output);
  }

  // optional uint32 value2 = 9;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->value2(), output);
  }

  // optional uint32 value3 = 10;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->value3(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_ChatEvent)
}

::google::protobuf::uint8* CDOTAUserMsg_ChatEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_ChatEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .proto.dota.DOTA_CHAT_MESSAGE type = 1 [default = CHAT_MESSAGE_INVALID];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint32 value = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->value(), target);
  }

  // optional sint32 playerid_1 = 3 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->playerid_1(), target);
  }

  // optional sint32 playerid_2 = 4 [default = -1];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->playerid_2(), target);
  }

  // optional sint32 playerid_3 = 5 [default = -1];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->playerid_3(), target);
  }

  // optional sint32 playerid_4 = 6 [default = -1];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(6, this->playerid_4(), target);
  }

  // optional sint32 playerid_5 = 7 [default = -1];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(7, this->playerid_5(), target);
  }

  // optional sint32 playerid_6 = 8 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(8, this->playerid_6(), target);
  }

  // optional uint32 value2 = 9;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->value2(), target);
  }

  // optional uint32 value3 = 10;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->value3(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_ChatEvent)
  return target;
}

size_t CDOTAUserMsg_ChatEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_ChatEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .proto.dota.DOTA_CHAT_MESSAGE type = 1 [default = CHAT_MESSAGE_INVALID];
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional uint32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

    // optional uint32 value2 = 9;
    if (has_value2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value2());
    }

    // optional uint32 value3 = 10;
    if (has_value3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value3());
    }

    // optional sint32 playerid_6 = 8 [default = -1];
    if (has_playerid_6()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->playerid_6());
    }

  }
  if (_has_bits_[0 / 32] & 224u) {
    // optional sint32 playerid_1 = 3 [default = -1];
    if (has_playerid_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->playerid_1());
    }

    // optional sint32 playerid_2 = 4 [default = -1];
    if (has_playerid_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->playerid_2());
    }

    // optional sint32 playerid_3 = 5 [default = -1];
    if (has_playerid_3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->playerid_3());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional sint32 playerid_4 = 6 [default = -1];
    if (has_playerid_4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->playerid_4());
    }

    // optional sint32 playerid_5 = 7 [default = -1];
    if (has_playerid_5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->playerid_5());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_ChatEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_ChatEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_ChatEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_ChatEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_ChatEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_ChatEvent)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_ChatEvent::MergeFrom(const CDOTAUserMsg_ChatEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_ChatEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      value_ = from.value_;
    }
    if (cached_has_bits & 0x00000002u) {
      value2_ = from.value2_;
    }
    if (cached_has_bits & 0x00000004u) {
      value3_ = from.value3_;
    }
    if (cached_has_bits & 0x00000008u) {
      playerid_6_ = from.playerid_6_;
    }
    if (cached_has_bits & 0x00000010u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000020u) {
      playerid_1_ = from.playerid_1_;
    }
    if (cached_has_bits & 0x00000040u) {
      playerid_2_ = from.playerid_2_;
    }
    if (cached_has_bits & 0x00000080u) {
      playerid_3_ = from.playerid_3_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      playerid_4_ = from.playerid_4_;
    }
    if (cached_has_bits & 0x00000200u) {
      playerid_5_ = from.playerid_5_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_ChatEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_ChatEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_ChatEvent::CopyFrom(const CDOTAUserMsg_ChatEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_ChatEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ChatEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000010) != 0x00000010) return false;
  return true;
}

void CDOTAUserMsg_ChatEvent::Swap(CDOTAUserMsg_ChatEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_ChatEvent::InternalSwap(CDOTAUserMsg_ChatEvent* other) {
  std::swap(value_, other->value_);
  std::swap(value2_, other->value2_);
  std::swap(value3_, other->value3_);
  std::swap(playerid_6_, other->playerid_6_);
  std::swap(type_, other->type_);
  std::swap(playerid_1_, other->playerid_1_);
  std::swap(playerid_2_, other->playerid_2_);
  std::swap(playerid_3_, other->playerid_3_);
  std::swap(playerid_4_, other->playerid_4_);
  std::swap(playerid_5_, other->playerid_5_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_ChatEvent::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_ChatEvent

// required .proto.dota.DOTA_CHAT_MESSAGE type = 1 [default = CHAT_MESSAGE_INVALID];
bool CDOTAUserMsg_ChatEvent::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CDOTAUserMsg_ChatEvent::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
void CDOTAUserMsg_ChatEvent::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
void CDOTAUserMsg_ChatEvent::clear_type() {
  type_ = -1;
  clear_has_type();
}
::proto::dota::DOTA_CHAT_MESSAGE CDOTAUserMsg_ChatEvent::type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ChatEvent.type)
  return static_cast< ::proto::dota::DOTA_CHAT_MESSAGE >(type_);
}
void CDOTAUserMsg_ChatEvent::set_type(::proto::dota::DOTA_CHAT_MESSAGE value) {
  assert(::proto::dota::DOTA_CHAT_MESSAGE_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_ChatEvent.type)
}

// optional uint32 value = 2;
bool CDOTAUserMsg_ChatEvent::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_ChatEvent::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_ChatEvent::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_ChatEvent::clear_value() {
  value_ = 0u;
  clear_has_value();
}
::google::protobuf::uint32 CDOTAUserMsg_ChatEvent::value() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ChatEvent.value)
  return value_;
}
void CDOTAUserMsg_ChatEvent::set_value(::google::protobuf::uint32 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_ChatEvent.value)
}

// optional sint32 playerid_1 = 3 [default = -1];
bool CDOTAUserMsg_ChatEvent::has_playerid_1() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CDOTAUserMsg_ChatEvent::set_has_playerid_1() {
  _has_bits_[0] |= 0x00000020u;
}
void CDOTAUserMsg_ChatEvent::clear_has_playerid_1() {
  _has_bits_[0] &= ~0x00000020u;
}
void CDOTAUserMsg_ChatEvent::clear_playerid_1() {
  playerid_1_ = -1;
  clear_has_playerid_1();
}
::google::protobuf::int32 CDOTAUserMsg_ChatEvent::playerid_1() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ChatEvent.playerid_1)
  return playerid_1_;
}
void CDOTAUserMsg_ChatEvent::set_playerid_1(::google::protobuf::int32 value) {
  set_has_playerid_1();
  playerid_1_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_ChatEvent.playerid_1)
}

// optional sint32 playerid_2 = 4 [default = -1];
bool CDOTAUserMsg_ChatEvent::has_playerid_2() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CDOTAUserMsg_ChatEvent::set_has_playerid_2() {
  _has_bits_[0] |= 0x00000040u;
}
void CDOTAUserMsg_ChatEvent::clear_has_playerid_2() {
  _has_bits_[0] &= ~0x00000040u;
}
void CDOTAUserMsg_ChatEvent::clear_playerid_2() {
  playerid_2_ = -1;
  clear_has_playerid_2();
}
::google::protobuf::int32 CDOTAUserMsg_ChatEvent::playerid_2() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ChatEvent.playerid_2)
  return playerid_2_;
}
void CDOTAUserMsg_ChatEvent::set_playerid_2(::google::protobuf::int32 value) {
  set_has_playerid_2();
  playerid_2_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_ChatEvent.playerid_2)
}

// optional sint32 playerid_3 = 5 [default = -1];
bool CDOTAUserMsg_ChatEvent::has_playerid_3() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CDOTAUserMsg_ChatEvent::set_has_playerid_3() {
  _has_bits_[0] |= 0x00000080u;
}
void CDOTAUserMsg_ChatEvent::clear_has_playerid_3() {
  _has_bits_[0] &= ~0x00000080u;
}
void CDOTAUserMsg_ChatEvent::clear_playerid_3() {
  playerid_3_ = -1;
  clear_has_playerid_3();
}
::google::protobuf::int32 CDOTAUserMsg_ChatEvent::playerid_3() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ChatEvent.playerid_3)
  return playerid_3_;
}
void CDOTAUserMsg_ChatEvent::set_playerid_3(::google::protobuf::int32 value) {
  set_has_playerid_3();
  playerid_3_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_ChatEvent.playerid_3)
}

// optional sint32 playerid_4 = 6 [default = -1];
bool CDOTAUserMsg_ChatEvent::has_playerid_4() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CDOTAUserMsg_ChatEvent::set_has_playerid_4() {
  _has_bits_[0] |= 0x00000100u;
}
void CDOTAUserMsg_ChatEvent::clear_has_playerid_4() {
  _has_bits_[0] &= ~0x00000100u;
}
void CDOTAUserMsg_ChatEvent::clear_playerid_4() {
  playerid_4_ = -1;
  clear_has_playerid_4();
}
::google::protobuf::int32 CDOTAUserMsg_ChatEvent::playerid_4() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ChatEvent.playerid_4)
  return playerid_4_;
}
void CDOTAUserMsg_ChatEvent::set_playerid_4(::google::protobuf::int32 value) {
  set_has_playerid_4();
  playerid_4_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_ChatEvent.playerid_4)
}

// optional sint32 playerid_5 = 7 [default = -1];
bool CDOTAUserMsg_ChatEvent::has_playerid_5() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CDOTAUserMsg_ChatEvent::set_has_playerid_5() {
  _has_bits_[0] |= 0x00000200u;
}
void CDOTAUserMsg_ChatEvent::clear_has_playerid_5() {
  _has_bits_[0] &= ~0x00000200u;
}
void CDOTAUserMsg_ChatEvent::clear_playerid_5() {
  playerid_5_ = -1;
  clear_has_playerid_5();
}
::google::protobuf::int32 CDOTAUserMsg_ChatEvent::playerid_5() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ChatEvent.playerid_5)
  return playerid_5_;
}
void CDOTAUserMsg_ChatEvent::set_playerid_5(::google::protobuf::int32 value) {
  set_has_playerid_5();
  playerid_5_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_ChatEvent.playerid_5)
}

// optional sint32 playerid_6 = 8 [default = -1];
bool CDOTAUserMsg_ChatEvent::has_playerid_6() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CDOTAUserMsg_ChatEvent::set_has_playerid_6() {
  _has_bits_[0] |= 0x00000008u;
}
void CDOTAUserMsg_ChatEvent::clear_has_playerid_6() {
  _has_bits_[0] &= ~0x00000008u;
}
void CDOTAUserMsg_ChatEvent::clear_playerid_6() {
  playerid_6_ = -1;
  clear_has_playerid_6();
}
::google::protobuf::int32 CDOTAUserMsg_ChatEvent::playerid_6() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ChatEvent.playerid_6)
  return playerid_6_;
}
void CDOTAUserMsg_ChatEvent::set_playerid_6(::google::protobuf::int32 value) {
  set_has_playerid_6();
  playerid_6_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_ChatEvent.playerid_6)
}

// optional uint32 value2 = 9;
bool CDOTAUserMsg_ChatEvent::has_value2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAUserMsg_ChatEvent::set_has_value2() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAUserMsg_ChatEvent::clear_has_value2() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAUserMsg_ChatEvent::clear_value2() {
  value2_ = 0u;
  clear_has_value2();
}
::google::protobuf::uint32 CDOTAUserMsg_ChatEvent::value2() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ChatEvent.value2)
  return value2_;
}
void CDOTAUserMsg_ChatEvent::set_value2(::google::protobuf::uint32 value) {
  set_has_value2();
  value2_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_ChatEvent.value2)
}

// optional uint32 value3 = 10;
bool CDOTAUserMsg_ChatEvent::has_value3() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDOTAUserMsg_ChatEvent::set_has_value3() {
  _has_bits_[0] |= 0x00000004u;
}
void CDOTAUserMsg_ChatEvent::clear_has_value3() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDOTAUserMsg_ChatEvent::clear_value3() {
  value3_ = 0u;
  clear_has_value3();
}
::google::protobuf::uint32 CDOTAUserMsg_ChatEvent::value3() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ChatEvent.value3)
  return value3_;
}
void CDOTAUserMsg_ChatEvent::set_value3(::google::protobuf::uint32 value) {
  set_has_value3();
  value3_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_ChatEvent.value3)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_CombatLogShowDeath::CDOTAUserMsg_CombatLogShowDeath()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_CombatLogShowDeath)
}
CDOTAUserMsg_CombatLogShowDeath::CDOTAUserMsg_CombatLogShowDeath(const CDOTAUserMsg_CombatLogShowDeath& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_CombatLogShowDeath)
}

void CDOTAUserMsg_CombatLogShowDeath::SharedCtor() {
  _cached_size_ = 0;
}

CDOTAUserMsg_CombatLogShowDeath::~CDOTAUserMsg_CombatLogShowDeath() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_CombatLogShowDeath)
  SharedDtor();
}

void CDOTAUserMsg_CombatLogShowDeath::SharedDtor() {
}

void CDOTAUserMsg_CombatLogShowDeath::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_CombatLogShowDeath::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_CombatLogShowDeath& CDOTAUserMsg_CombatLogShowDeath::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_CombatLogShowDeath* CDOTAUserMsg_CombatLogShowDeath::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_CombatLogShowDeath* n = new CDOTAUserMsg_CombatLogShowDeath;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_CombatLogShowDeath::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_CombatLogShowDeath)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_CombatLogShowDeath::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_CombatLogShowDeath)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_CombatLogShowDeath)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_CombatLogShowDeath)
  return false;
#undef DO_
}

void CDOTAUserMsg_CombatLogShowDeath::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_CombatLogShowDeath)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_CombatLogShowDeath)
}

::google::protobuf::uint8* CDOTAUserMsg_CombatLogShowDeath::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_CombatLogShowDeath)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_CombatLogShowDeath)
  return target;
}

size_t CDOTAUserMsg_CombatLogShowDeath::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_CombatLogShowDeath)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_CombatLogShowDeath::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_CombatLogShowDeath)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_CombatLogShowDeath* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_CombatLogShowDeath>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_CombatLogShowDeath)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_CombatLogShowDeath)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_CombatLogShowDeath::MergeFrom(const CDOTAUserMsg_CombatLogShowDeath& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_CombatLogShowDeath)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CDOTAUserMsg_CombatLogShowDeath::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_CombatLogShowDeath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_CombatLogShowDeath::CopyFrom(const CDOTAUserMsg_CombatLogShowDeath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_CombatLogShowDeath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_CombatLogShowDeath::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_CombatLogShowDeath::Swap(CDOTAUserMsg_CombatLogShowDeath* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_CombatLogShowDeath::InternalSwap(CDOTAUserMsg_CombatLogShowDeath* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_CombatLogShowDeath::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_CombatLogShowDeath

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_BotChat::kPlayerIdFieldNumber;
const int CDOTAUserMsg_BotChat::kMessageFieldNumber;
const int CDOTAUserMsg_BotChat::kTargetFieldNumber;
const int CDOTAUserMsg_BotChat::kTeamOnlyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_BotChat::CDOTAUserMsg_BotChat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_BotChat)
}
CDOTAUserMsg_BotChat::CDOTAUserMsg_BotChat(const CDOTAUserMsg_BotChat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_message()) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  target_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_target()) {
    target_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.target_);
  }
  ::memcpy(&player_id_, &from.player_id_,
    reinterpret_cast<char*>(&team_only_) -
    reinterpret_cast<char*>(&player_id_) + sizeof(team_only_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_BotChat)
}

void CDOTAUserMsg_BotChat::SharedCtor() {
  _cached_size_ = 0;
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  target_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&player_id_, 0, reinterpret_cast<char*>(&team_only_) -
    reinterpret_cast<char*>(&player_id_) + sizeof(team_only_));
}

CDOTAUserMsg_BotChat::~CDOTAUserMsg_BotChat() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_BotChat)
  SharedDtor();
}

void CDOTAUserMsg_BotChat::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  target_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CDOTAUserMsg_BotChat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_BotChat::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_BotChat& CDOTAUserMsg_BotChat::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_BotChat* CDOTAUserMsg_BotChat::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_BotChat* n = new CDOTAUserMsg_BotChat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_BotChat::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_BotChat)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_message()) {
      GOOGLE_DCHECK(!message_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*message_.UnsafeRawStringPointer())->clear();
    }
    if (has_target()) {
      GOOGLE_DCHECK(!target_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*target_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&player_id_, 0, reinterpret_cast<char*>(&team_only_) -
      reinterpret_cast<char*>(&player_id_) + sizeof(team_only_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_BotChat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_BotChat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_player_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string message = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDOTAUserMsg_BotChat.message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string target = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_target()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->target().data(), this->target().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDOTAUserMsg_BotChat.target");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool team_only = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_team_only();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &team_only_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_BotChat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_BotChat)
  return false;
#undef DO_
}

void CDOTAUserMsg_BotChat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_BotChat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_id(), output);
  }

  // optional string message = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAUserMsg_BotChat.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->message(), output);
  }

  // optional string target = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->target().data(), this->target().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAUserMsg_BotChat.target");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->target(), output);
  }

  // optional bool team_only = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->team_only(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_BotChat)
}

::google::protobuf::uint8* CDOTAUserMsg_BotChat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_BotChat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_id(), target);
  }

  // optional string message = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAUserMsg_BotChat.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->message(), target);
  }

  // optional string target = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->target().data(), this->target().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAUserMsg_BotChat.target");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->target(), target);
  }

  // optional bool team_only = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->team_only(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_BotChat)
  return target;
}

size_t CDOTAUserMsg_BotChat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_BotChat)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string message = 3;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional string target = 4;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->target());
    }

    // optional uint32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_id());
    }

    // optional bool team_only = 5;
    if (has_team_only()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_BotChat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_BotChat)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_BotChat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_BotChat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_BotChat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_BotChat)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_BotChat::MergeFrom(const CDOTAUserMsg_BotChat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_BotChat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_message();
      message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_target();
      target_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.target_);
    }
    if (cached_has_bits & 0x00000004u) {
      player_id_ = from.player_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      team_only_ = from.team_only_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_BotChat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_BotChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_BotChat::CopyFrom(const CDOTAUserMsg_BotChat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_BotChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_BotChat::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_BotChat::Swap(CDOTAUserMsg_BotChat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_BotChat::InternalSwap(CDOTAUserMsg_BotChat* other) {
  message_.Swap(&other->message_);
  target_.Swap(&other->target_);
  std::swap(player_id_, other->player_id_);
  std::swap(team_only_, other->team_only_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_BotChat::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_BotChat

// optional uint32 player_id = 1;
bool CDOTAUserMsg_BotChat::has_player_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDOTAUserMsg_BotChat::set_has_player_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CDOTAUserMsg_BotChat::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDOTAUserMsg_BotChat::clear_player_id() {
  player_id_ = 0u;
  clear_has_player_id();
}
::google::protobuf::uint32 CDOTAUserMsg_BotChat::player_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_BotChat.player_id)
  return player_id_;
}
void CDOTAUserMsg_BotChat::set_player_id(::google::protobuf::uint32 value) {
  set_has_player_id();
  player_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_BotChat.player_id)
}

// optional string message = 3;
bool CDOTAUserMsg_BotChat::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_BotChat::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_BotChat::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_BotChat::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
const ::std::string& CDOTAUserMsg_BotChat::message() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_BotChat.message)
  return message_.GetNoArena();
}
void CDOTAUserMsg_BotChat::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_BotChat.message)
}
#if LANG_CXX11
void CDOTAUserMsg_BotChat::set_message(::std::string&& value) {
  set_has_message();
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDOTAUserMsg_BotChat.message)
}
#endif
void CDOTAUserMsg_BotChat::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDOTAUserMsg_BotChat.message)
}
void CDOTAUserMsg_BotChat::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDOTAUserMsg_BotChat.message)
}
::std::string* CDOTAUserMsg_BotChat::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_BotChat.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDOTAUserMsg_BotChat::release_message() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAUserMsg_BotChat.message)
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDOTAUserMsg_BotChat::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAUserMsg_BotChat.message)
}

// optional string target = 4;
bool CDOTAUserMsg_BotChat::has_target() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAUserMsg_BotChat::set_has_target() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAUserMsg_BotChat::clear_has_target() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAUserMsg_BotChat::clear_target() {
  target_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_target();
}
const ::std::string& CDOTAUserMsg_BotChat::target() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_BotChat.target)
  return target_.GetNoArena();
}
void CDOTAUserMsg_BotChat::set_target(const ::std::string& value) {
  set_has_target();
  target_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_BotChat.target)
}
#if LANG_CXX11
void CDOTAUserMsg_BotChat::set_target(::std::string&& value) {
  set_has_target();
  target_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDOTAUserMsg_BotChat.target)
}
#endif
void CDOTAUserMsg_BotChat::set_target(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_target();
  target_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDOTAUserMsg_BotChat.target)
}
void CDOTAUserMsg_BotChat::set_target(const char* value, size_t size) {
  set_has_target();
  target_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDOTAUserMsg_BotChat.target)
}
::std::string* CDOTAUserMsg_BotChat::mutable_target() {
  set_has_target();
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_BotChat.target)
  return target_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDOTAUserMsg_BotChat::release_target() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAUserMsg_BotChat.target)
  clear_has_target();
  return target_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDOTAUserMsg_BotChat::set_allocated_target(::std::string* target) {
  if (target != NULL) {
    set_has_target();
  } else {
    clear_has_target();
  }
  target_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), target);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAUserMsg_BotChat.target)
}

// optional bool team_only = 5;
bool CDOTAUserMsg_BotChat::has_team_only() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CDOTAUserMsg_BotChat::set_has_team_only() {
  _has_bits_[0] |= 0x00000008u;
}
void CDOTAUserMsg_BotChat::clear_has_team_only() {
  _has_bits_[0] &= ~0x00000008u;
}
void CDOTAUserMsg_BotChat::clear_team_only() {
  team_only_ = false;
  clear_has_team_only();
}
bool CDOTAUserMsg_BotChat::team_only() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_BotChat.team_only)
  return team_only_;
}
void CDOTAUserMsg_BotChat::set_team_only(bool value) {
  set_has_team_only();
  team_only_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_BotChat.team_only)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_CombatHeroPositions::kIndexFieldNumber;
const int CDOTAUserMsg_CombatHeroPositions::kTimeFieldNumber;
const int CDOTAUserMsg_CombatHeroPositions::kWorldPosFieldNumber;
const int CDOTAUserMsg_CombatHeroPositions::kHealthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_CombatHeroPositions::CDOTAUserMsg_CombatHeroPositions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_CombatHeroPositions)
}
CDOTAUserMsg_CombatHeroPositions::CDOTAUserMsg_CombatHeroPositions(const CDOTAUserMsg_CombatHeroPositions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_world_pos()) {
    world_pos_ = new ::proto::dota::CMsgVector2D(*from.world_pos_);
  } else {
    world_pos_ = NULL;
  }
  ::memcpy(&index_, &from.index_,
    reinterpret_cast<char*>(&health_) -
    reinterpret_cast<char*>(&index_) + sizeof(health_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_CombatHeroPositions)
}

void CDOTAUserMsg_CombatHeroPositions::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&world_pos_, 0, reinterpret_cast<char*>(&health_) -
    reinterpret_cast<char*>(&world_pos_) + sizeof(health_));
}

CDOTAUserMsg_CombatHeroPositions::~CDOTAUserMsg_CombatHeroPositions() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_CombatHeroPositions)
  SharedDtor();
}

void CDOTAUserMsg_CombatHeroPositions::SharedDtor() {
  if (this != internal_default_instance()) {
    delete world_pos_;
  }
}

void CDOTAUserMsg_CombatHeroPositions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_CombatHeroPositions::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_CombatHeroPositions& CDOTAUserMsg_CombatHeroPositions::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_CombatHeroPositions* CDOTAUserMsg_CombatHeroPositions::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_CombatHeroPositions* n = new CDOTAUserMsg_CombatHeroPositions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_CombatHeroPositions::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_CombatHeroPositions)
  if (has_world_pos()) {
    GOOGLE_DCHECK(world_pos_ != NULL);
    world_pos_->::proto::dota::CMsgVector2D::Clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&index_, 0, reinterpret_cast<char*>(&health_) -
      reinterpret_cast<char*>(&index_) + sizeof(health_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_CombatHeroPositions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_CombatHeroPositions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgVector2D world_pos = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_world_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 health = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_health();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &health_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_CombatHeroPositions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_CombatHeroPositions)
  return false;
#undef DO_
}

void CDOTAUserMsg_CombatHeroPositions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_CombatHeroPositions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 index = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->index(), output);
  }

  // optional int32 time = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->time(), output);
  }

  // optional .proto.dota.CMsgVector2D world_pos = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->world_pos_, output);
  }

  // optional int32 health = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->health(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_CombatHeroPositions)
}

::google::protobuf::uint8* CDOTAUserMsg_CombatHeroPositions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_CombatHeroPositions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 index = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->index(), target);
  }

  // optional int32 time = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->time(), target);
  }

  // optional .proto.dota.CMsgVector2D world_pos = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->world_pos_, deterministic, target);
  }

  // optional int32 health = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->health(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_CombatHeroPositions)
  return target;
}

size_t CDOTAUserMsg_CombatHeroPositions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_CombatHeroPositions)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional .proto.dota.CMsgVector2D world_pos = 3;
    if (has_world_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->world_pos_);
    }

    // optional uint32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // optional int32 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

    // optional int32 health = 4;
    if (has_health()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->health());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_CombatHeroPositions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_CombatHeroPositions)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_CombatHeroPositions* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_CombatHeroPositions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_CombatHeroPositions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_CombatHeroPositions)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_CombatHeroPositions::MergeFrom(const CDOTAUserMsg_CombatHeroPositions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_CombatHeroPositions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_world_pos()->::proto::dota::CMsgVector2D::MergeFrom(from.world_pos());
    }
    if (cached_has_bits & 0x00000002u) {
      index_ = from.index_;
    }
    if (cached_has_bits & 0x00000004u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000008u) {
      health_ = from.health_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_CombatHeroPositions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_CombatHeroPositions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_CombatHeroPositions::CopyFrom(const CDOTAUserMsg_CombatHeroPositions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_CombatHeroPositions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_CombatHeroPositions::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_CombatHeroPositions::Swap(CDOTAUserMsg_CombatHeroPositions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_CombatHeroPositions::InternalSwap(CDOTAUserMsg_CombatHeroPositions* other) {
  std::swap(world_pos_, other->world_pos_);
  std::swap(index_, other->index_);
  std::swap(time_, other->time_);
  std::swap(health_, other->health_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_CombatHeroPositions::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_CombatHeroPositions

// optional uint32 index = 1;
bool CDOTAUserMsg_CombatHeroPositions::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAUserMsg_CombatHeroPositions::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAUserMsg_CombatHeroPositions::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAUserMsg_CombatHeroPositions::clear_index() {
  index_ = 0u;
  clear_has_index();
}
::google::protobuf::uint32 CDOTAUserMsg_CombatHeroPositions::index() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_CombatHeroPositions.index)
  return index_;
}
void CDOTAUserMsg_CombatHeroPositions::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_CombatHeroPositions.index)
}

// optional int32 time = 2;
bool CDOTAUserMsg_CombatHeroPositions::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDOTAUserMsg_CombatHeroPositions::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
void CDOTAUserMsg_CombatHeroPositions::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDOTAUserMsg_CombatHeroPositions::clear_time() {
  time_ = 0;
  clear_has_time();
}
::google::protobuf::int32 CDOTAUserMsg_CombatHeroPositions::time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_CombatHeroPositions.time)
  return time_;
}
void CDOTAUserMsg_CombatHeroPositions::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_CombatHeroPositions.time)
}

// optional .proto.dota.CMsgVector2D world_pos = 3;
bool CDOTAUserMsg_CombatHeroPositions::has_world_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_CombatHeroPositions::set_has_world_pos() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_CombatHeroPositions::clear_has_world_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_CombatHeroPositions::clear_world_pos() {
  if (world_pos_ != NULL) world_pos_->::proto::dota::CMsgVector2D::Clear();
  clear_has_world_pos();
}
const ::proto::dota::CMsgVector2D& CDOTAUserMsg_CombatHeroPositions::world_pos() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_CombatHeroPositions.world_pos)
  return world_pos_ != NULL ? *world_pos_
                         : *::proto::dota::CMsgVector2D::internal_default_instance();
}
::proto::dota::CMsgVector2D* CDOTAUserMsg_CombatHeroPositions::mutable_world_pos() {
  set_has_world_pos();
  if (world_pos_ == NULL) {
    world_pos_ = new ::proto::dota::CMsgVector2D;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_CombatHeroPositions.world_pos)
  return world_pos_;
}
::proto::dota::CMsgVector2D* CDOTAUserMsg_CombatHeroPositions::release_world_pos() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAUserMsg_CombatHeroPositions.world_pos)
  clear_has_world_pos();
  ::proto::dota::CMsgVector2D* temp = world_pos_;
  world_pos_ = NULL;
  return temp;
}
void CDOTAUserMsg_CombatHeroPositions::set_allocated_world_pos(::proto::dota::CMsgVector2D* world_pos) {
  delete world_pos_;
  world_pos_ = world_pos;
  if (world_pos) {
    set_has_world_pos();
  } else {
    clear_has_world_pos();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAUserMsg_CombatHeroPositions.world_pos)
}

// optional int32 health = 4;
bool CDOTAUserMsg_CombatHeroPositions::has_health() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CDOTAUserMsg_CombatHeroPositions::set_has_health() {
  _has_bits_[0] |= 0x00000008u;
}
void CDOTAUserMsg_CombatHeroPositions::clear_has_health() {
  _has_bits_[0] &= ~0x00000008u;
}
void CDOTAUserMsg_CombatHeroPositions::clear_health() {
  health_ = 0;
  clear_has_health();
}
::google::protobuf::int32 CDOTAUserMsg_CombatHeroPositions::health() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_CombatHeroPositions.health)
  return health_;
}
void CDOTAUserMsg_CombatHeroPositions::set_health(::google::protobuf::int32 value) {
  set_has_health();
  health_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_CombatHeroPositions.health)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::kAbilityFieldNumber;
const int CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::kDamageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability)
}
CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability(const CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ability_, &from.ability_,
    reinterpret_cast<char*>(&damage_) -
    reinterpret_cast<char*>(&ability_) + sizeof(damage_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability)
}

void CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&ability_, 0, reinterpret_cast<char*>(&damage_) -
    reinterpret_cast<char*>(&ability_) + sizeof(damage_));
}

CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::~CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability)
  SharedDtor();
}

void CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::SharedDtor() {
}

void CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability& CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability* CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability* n = new CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&ability_, 0, reinterpret_cast<char*>(&damage_) -
      reinterpret_cast<char*>(&ability_) + sizeof(damage_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ability = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_ability();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 damage = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_damage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability)
  return false;
#undef DO_
}

void CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ability = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ability(), output);
  }

  // optional int32 damage = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->damage(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability)
}

::google::protobuf::uint8* CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ability = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ability(), target);
  }

  // optional int32 damage = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->damage(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability)
  return target;
}

size_t CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 ability = 1;
    if (has_ability()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ability());
    }

    // optional int32 damage = 2;
    if (has_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damage());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::MergeFrom(const CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      ability_ = from.ability_;
    }
    if (cached_has_bits & 0x00000002u) {
      damage_ = from.damage_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::CopyFrom(const CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::Swap(CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::InternalSwap(CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability* other) {
  std::swap(ability_, other->ability_);
  std::swap(damage_, other->damage_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability

// optional uint32 ability = 1;
bool CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::has_ability() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::set_has_ability() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::clear_has_ability() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::clear_ability() {
  ability_ = 0u;
  clear_has_ability();
}
::google::protobuf::uint32 CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::ability() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability.ability)
  return ability_;
}
void CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::set_ability(::google::protobuf::uint32 value) {
  set_has_ability();
  ability_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability.ability)
}

// optional int32 damage = 2;
bool CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::has_damage() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::set_has_damage() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::clear_has_damage() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::clear_damage() {
  damage_ = 0;
  clear_has_damage();
}
::google::protobuf::int32 CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::damage() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability.damage)
  return damage_;
}
void CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::set_damage(::google::protobuf::int32 value) {
  set_has_damage();
  damage_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability.damage)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_MiniKillCamInfo_Attacker::kAttackerFieldNumber;
const int CDOTAUserMsg_MiniKillCamInfo_Attacker::kTotalDamageFieldNumber;
const int CDOTAUserMsg_MiniKillCamInfo_Attacker::kAbilitiesFieldNumber;
const int CDOTAUserMsg_MiniKillCamInfo_Attacker::kAttackerNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_MiniKillCamInfo_Attacker::CDOTAUserMsg_MiniKillCamInfo_Attacker()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_MiniKillCamInfo.Attacker)
}
CDOTAUserMsg_MiniKillCamInfo_Attacker::CDOTAUserMsg_MiniKillCamInfo_Attacker(const CDOTAUserMsg_MiniKillCamInfo_Attacker& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      abilities_(from.abilities_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  attacker_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_attacker_name()) {
    attacker_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attacker_name_);
  }
  ::memcpy(&attacker_, &from.attacker_,
    reinterpret_cast<char*>(&total_damage_) -
    reinterpret_cast<char*>(&attacker_) + sizeof(total_damage_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_MiniKillCamInfo.Attacker)
}

void CDOTAUserMsg_MiniKillCamInfo_Attacker::SharedCtor() {
  _cached_size_ = 0;
  attacker_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&attacker_, 0, reinterpret_cast<char*>(&total_damage_) -
    reinterpret_cast<char*>(&attacker_) + sizeof(total_damage_));
}

CDOTAUserMsg_MiniKillCamInfo_Attacker::~CDOTAUserMsg_MiniKillCamInfo_Attacker() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_MiniKillCamInfo.Attacker)
  SharedDtor();
}

void CDOTAUserMsg_MiniKillCamInfo_Attacker::SharedDtor() {
  attacker_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CDOTAUserMsg_MiniKillCamInfo_Attacker::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_MiniKillCamInfo_Attacker::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_MiniKillCamInfo_Attacker& CDOTAUserMsg_MiniKillCamInfo_Attacker::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_MiniKillCamInfo_Attacker* CDOTAUserMsg_MiniKillCamInfo_Attacker::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_MiniKillCamInfo_Attacker* n = new CDOTAUserMsg_MiniKillCamInfo_Attacker;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_MiniKillCamInfo_Attacker::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_MiniKillCamInfo.Attacker)
  abilities_.Clear();
  if (has_attacker_name()) {
    GOOGLE_DCHECK(!attacker_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*attacker_name_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&attacker_, 0, reinterpret_cast<char*>(&total_damage_) -
      reinterpret_cast<char*>(&attacker_) + sizeof(total_damage_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_MiniKillCamInfo_Attacker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_MiniKillCamInfo.Attacker)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 attacker = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_attacker();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attacker_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 total_damage = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_total_damage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_damage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability abilities = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_abilities()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string attacker_name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_attacker_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->attacker_name().data(), this->attacker_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDOTAUserMsg_MiniKillCamInfo.Attacker.attacker_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_MiniKillCamInfo.Attacker)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_MiniKillCamInfo.Attacker)
  return false;
#undef DO_
}

void CDOTAUserMsg_MiniKillCamInfo_Attacker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_MiniKillCamInfo.Attacker)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 attacker = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->attacker(), output);
  }

  // optional int32 total_damage = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->total_damage(), output);
  }

  // repeated .proto.dota.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability abilities = 3;
  for (unsigned int i = 0, n = this->abilities_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->abilities(i), output);
  }

  // optional string attacker_name = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->attacker_name().data(), this->attacker_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAUserMsg_MiniKillCamInfo.Attacker.attacker_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->attacker_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_MiniKillCamInfo.Attacker)
}

::google::protobuf::uint8* CDOTAUserMsg_MiniKillCamInfo_Attacker::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_MiniKillCamInfo.Attacker)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 attacker = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->attacker(), target);
  }

  // optional int32 total_damage = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->total_damage(), target);
  }

  // repeated .proto.dota.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability abilities = 3;
  for (unsigned int i = 0, n = this->abilities_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->abilities(i), deterministic, target);
  }

  // optional string attacker_name = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->attacker_name().data(), this->attacker_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAUserMsg_MiniKillCamInfo.Attacker.attacker_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->attacker_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_MiniKillCamInfo.Attacker)
  return target;
}

size_t CDOTAUserMsg_MiniKillCamInfo_Attacker::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_MiniKillCamInfo.Attacker)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability abilities = 3;
  {
    unsigned int count = this->abilities_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->abilities(i));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional string attacker_name = 4;
    if (has_attacker_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->attacker_name());
    }

    // optional uint32 attacker = 1;
    if (has_attacker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attacker());
    }

    // optional int32 total_damage = 2;
    if (has_total_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_damage());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_MiniKillCamInfo_Attacker::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_MiniKillCamInfo.Attacker)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_MiniKillCamInfo_Attacker* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_MiniKillCamInfo_Attacker>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_MiniKillCamInfo.Attacker)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_MiniKillCamInfo.Attacker)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_MiniKillCamInfo_Attacker::MergeFrom(const CDOTAUserMsg_MiniKillCamInfo_Attacker& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_MiniKillCamInfo.Attacker)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  abilities_.MergeFrom(from.abilities_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_attacker_name();
      attacker_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attacker_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      attacker_ = from.attacker_;
    }
    if (cached_has_bits & 0x00000004u) {
      total_damage_ = from.total_damage_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_MiniKillCamInfo_Attacker::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_MiniKillCamInfo.Attacker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_MiniKillCamInfo_Attacker::CopyFrom(const CDOTAUserMsg_MiniKillCamInfo_Attacker& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_MiniKillCamInfo.Attacker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_MiniKillCamInfo_Attacker::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_MiniKillCamInfo_Attacker::Swap(CDOTAUserMsg_MiniKillCamInfo_Attacker* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_MiniKillCamInfo_Attacker::InternalSwap(CDOTAUserMsg_MiniKillCamInfo_Attacker* other) {
  abilities_.InternalSwap(&other->abilities_);
  attacker_name_.Swap(&other->attacker_name_);
  std::swap(attacker_, other->attacker_);
  std::swap(total_damage_, other->total_damage_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_MiniKillCamInfo_Attacker::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_MiniKillCamInfo_Attacker

// optional uint32 attacker = 1;
bool CDOTAUserMsg_MiniKillCamInfo_Attacker::has_attacker() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAUserMsg_MiniKillCamInfo_Attacker::set_has_attacker() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAUserMsg_MiniKillCamInfo_Attacker::clear_has_attacker() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAUserMsg_MiniKillCamInfo_Attacker::clear_attacker() {
  attacker_ = 0u;
  clear_has_attacker();
}
::google::protobuf::uint32 CDOTAUserMsg_MiniKillCamInfo_Attacker::attacker() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_MiniKillCamInfo.Attacker.attacker)
  return attacker_;
}
void CDOTAUserMsg_MiniKillCamInfo_Attacker::set_attacker(::google::protobuf::uint32 value) {
  set_has_attacker();
  attacker_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_MiniKillCamInfo.Attacker.attacker)
}

// optional int32 total_damage = 2;
bool CDOTAUserMsg_MiniKillCamInfo_Attacker::has_total_damage() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDOTAUserMsg_MiniKillCamInfo_Attacker::set_has_total_damage() {
  _has_bits_[0] |= 0x00000004u;
}
void CDOTAUserMsg_MiniKillCamInfo_Attacker::clear_has_total_damage() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDOTAUserMsg_MiniKillCamInfo_Attacker::clear_total_damage() {
  total_damage_ = 0;
  clear_has_total_damage();
}
::google::protobuf::int32 CDOTAUserMsg_MiniKillCamInfo_Attacker::total_damage() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_MiniKillCamInfo.Attacker.total_damage)
  return total_damage_;
}
void CDOTAUserMsg_MiniKillCamInfo_Attacker::set_total_damage(::google::protobuf::int32 value) {
  set_has_total_damage();
  total_damage_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_MiniKillCamInfo.Attacker.total_damage)
}

// repeated .proto.dota.CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability abilities = 3;
int CDOTAUserMsg_MiniKillCamInfo_Attacker::abilities_size() const {
  return abilities_.size();
}
void CDOTAUserMsg_MiniKillCamInfo_Attacker::clear_abilities() {
  abilities_.Clear();
}
const ::proto::dota::CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability& CDOTAUserMsg_MiniKillCamInfo_Attacker::abilities(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_MiniKillCamInfo.Attacker.abilities)
  return abilities_.Get(index);
}
::proto::dota::CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability* CDOTAUserMsg_MiniKillCamInfo_Attacker::mutable_abilities(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_MiniKillCamInfo.Attacker.abilities)
  return abilities_.Mutable(index);
}
::proto::dota::CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability* CDOTAUserMsg_MiniKillCamInfo_Attacker::add_abilities() {
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAUserMsg_MiniKillCamInfo.Attacker.abilities)
  return abilities_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability >*
CDOTAUserMsg_MiniKillCamInfo_Attacker::mutable_abilities() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTAUserMsg_MiniKillCamInfo.Attacker.abilities)
  return &abilities_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability >&
CDOTAUserMsg_MiniKillCamInfo_Attacker::abilities() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTAUserMsg_MiniKillCamInfo.Attacker.abilities)
  return abilities_;
}

// optional string attacker_name = 4;
bool CDOTAUserMsg_MiniKillCamInfo_Attacker::has_attacker_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_MiniKillCamInfo_Attacker::set_has_attacker_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_MiniKillCamInfo_Attacker::clear_has_attacker_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_MiniKillCamInfo_Attacker::clear_attacker_name() {
  attacker_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_attacker_name();
}
const ::std::string& CDOTAUserMsg_MiniKillCamInfo_Attacker::attacker_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_MiniKillCamInfo.Attacker.attacker_name)
  return attacker_name_.GetNoArena();
}
void CDOTAUserMsg_MiniKillCamInfo_Attacker::set_attacker_name(const ::std::string& value) {
  set_has_attacker_name();
  attacker_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_MiniKillCamInfo.Attacker.attacker_name)
}
#if LANG_CXX11
void CDOTAUserMsg_MiniKillCamInfo_Attacker::set_attacker_name(::std::string&& value) {
  set_has_attacker_name();
  attacker_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDOTAUserMsg_MiniKillCamInfo.Attacker.attacker_name)
}
#endif
void CDOTAUserMsg_MiniKillCamInfo_Attacker::set_attacker_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_attacker_name();
  attacker_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDOTAUserMsg_MiniKillCamInfo.Attacker.attacker_name)
}
void CDOTAUserMsg_MiniKillCamInfo_Attacker::set_attacker_name(const char* value, size_t size) {
  set_has_attacker_name();
  attacker_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDOTAUserMsg_MiniKillCamInfo.Attacker.attacker_name)
}
::std::string* CDOTAUserMsg_MiniKillCamInfo_Attacker::mutable_attacker_name() {
  set_has_attacker_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_MiniKillCamInfo.Attacker.attacker_name)
  return attacker_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDOTAUserMsg_MiniKillCamInfo_Attacker::release_attacker_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAUserMsg_MiniKillCamInfo.Attacker.attacker_name)
  clear_has_attacker_name();
  return attacker_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDOTAUserMsg_MiniKillCamInfo_Attacker::set_allocated_attacker_name(::std::string* attacker_name) {
  if (attacker_name != NULL) {
    set_has_attacker_name();
  } else {
    clear_has_attacker_name();
  }
  attacker_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attacker_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAUserMsg_MiniKillCamInfo.Attacker.attacker_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_MiniKillCamInfo::kAttackersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_MiniKillCamInfo::CDOTAUserMsg_MiniKillCamInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_MiniKillCamInfo)
}
CDOTAUserMsg_MiniKillCamInfo::CDOTAUserMsg_MiniKillCamInfo(const CDOTAUserMsg_MiniKillCamInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      attackers_(from.attackers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_MiniKillCamInfo)
}

void CDOTAUserMsg_MiniKillCamInfo::SharedCtor() {
  _cached_size_ = 0;
}

CDOTAUserMsg_MiniKillCamInfo::~CDOTAUserMsg_MiniKillCamInfo() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_MiniKillCamInfo)
  SharedDtor();
}

void CDOTAUserMsg_MiniKillCamInfo::SharedDtor() {
}

void CDOTAUserMsg_MiniKillCamInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_MiniKillCamInfo::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_MiniKillCamInfo& CDOTAUserMsg_MiniKillCamInfo::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_MiniKillCamInfo* CDOTAUserMsg_MiniKillCamInfo::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_MiniKillCamInfo* n = new CDOTAUserMsg_MiniKillCamInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_MiniKillCamInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_MiniKillCamInfo)
  attackers_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_MiniKillCamInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_MiniKillCamInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CDOTAUserMsg_MiniKillCamInfo.Attacker attackers = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attackers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_MiniKillCamInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_MiniKillCamInfo)
  return false;
#undef DO_
}

void CDOTAUserMsg_MiniKillCamInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_MiniKillCamInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CDOTAUserMsg_MiniKillCamInfo.Attacker attackers = 1;
  for (unsigned int i = 0, n = this->attackers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->attackers(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_MiniKillCamInfo)
}

::google::protobuf::uint8* CDOTAUserMsg_MiniKillCamInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_MiniKillCamInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CDOTAUserMsg_MiniKillCamInfo.Attacker attackers = 1;
  for (unsigned int i = 0, n = this->attackers_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->attackers(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_MiniKillCamInfo)
  return target;
}

size_t CDOTAUserMsg_MiniKillCamInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_MiniKillCamInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CDOTAUserMsg_MiniKillCamInfo.Attacker attackers = 1;
  {
    unsigned int count = this->attackers_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attackers(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_MiniKillCamInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_MiniKillCamInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_MiniKillCamInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_MiniKillCamInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_MiniKillCamInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_MiniKillCamInfo)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_MiniKillCamInfo::MergeFrom(const CDOTAUserMsg_MiniKillCamInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_MiniKillCamInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attackers_.MergeFrom(from.attackers_);
}

void CDOTAUserMsg_MiniKillCamInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_MiniKillCamInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_MiniKillCamInfo::CopyFrom(const CDOTAUserMsg_MiniKillCamInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_MiniKillCamInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_MiniKillCamInfo::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_MiniKillCamInfo::Swap(CDOTAUserMsg_MiniKillCamInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_MiniKillCamInfo::InternalSwap(CDOTAUserMsg_MiniKillCamInfo* other) {
  attackers_.InternalSwap(&other->attackers_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_MiniKillCamInfo::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_MiniKillCamInfo

// repeated .proto.dota.CDOTAUserMsg_MiniKillCamInfo.Attacker attackers = 1;
int CDOTAUserMsg_MiniKillCamInfo::attackers_size() const {
  return attackers_.size();
}
void CDOTAUserMsg_MiniKillCamInfo::clear_attackers() {
  attackers_.Clear();
}
const ::proto::dota::CDOTAUserMsg_MiniKillCamInfo_Attacker& CDOTAUserMsg_MiniKillCamInfo::attackers(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_MiniKillCamInfo.attackers)
  return attackers_.Get(index);
}
::proto::dota::CDOTAUserMsg_MiniKillCamInfo_Attacker* CDOTAUserMsg_MiniKillCamInfo::mutable_attackers(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_MiniKillCamInfo.attackers)
  return attackers_.Mutable(index);
}
::proto::dota::CDOTAUserMsg_MiniKillCamInfo_Attacker* CDOTAUserMsg_MiniKillCamInfo::add_attackers() {
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAUserMsg_MiniKillCamInfo.attackers)
  return attackers_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAUserMsg_MiniKillCamInfo_Attacker >*
CDOTAUserMsg_MiniKillCamInfo::mutable_attackers() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTAUserMsg_MiniKillCamInfo.attackers)
  return &attackers_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAUserMsg_MiniKillCamInfo_Attacker >&
CDOTAUserMsg_MiniKillCamInfo::attackers() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTAUserMsg_MiniKillCamInfo.attackers)
  return attackers_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_GlobalLightColor::kColorFieldNumber;
const int CDOTAUserMsg_GlobalLightColor::kDurationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_GlobalLightColor::CDOTAUserMsg_GlobalLightColor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_GlobalLightColor)
}
CDOTAUserMsg_GlobalLightColor::CDOTAUserMsg_GlobalLightColor(const CDOTAUserMsg_GlobalLightColor& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&color_, &from.color_,
    reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&color_) + sizeof(duration_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_GlobalLightColor)
}

void CDOTAUserMsg_GlobalLightColor::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&color_, 0, reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&color_) + sizeof(duration_));
}

CDOTAUserMsg_GlobalLightColor::~CDOTAUserMsg_GlobalLightColor() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_GlobalLightColor)
  SharedDtor();
}

void CDOTAUserMsg_GlobalLightColor::SharedDtor() {
}

void CDOTAUserMsg_GlobalLightColor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_GlobalLightColor::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_GlobalLightColor& CDOTAUserMsg_GlobalLightColor::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_GlobalLightColor* CDOTAUserMsg_GlobalLightColor::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_GlobalLightColor* n = new CDOTAUserMsg_GlobalLightColor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_GlobalLightColor::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_GlobalLightColor)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&color_, 0, reinterpret_cast<char*>(&duration_) -
      reinterpret_cast<char*>(&color_) + sizeof(duration_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_GlobalLightColor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_GlobalLightColor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 color = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_color();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &color_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float duration = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_duration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_GlobalLightColor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_GlobalLightColor)
  return false;
#undef DO_
}

void CDOTAUserMsg_GlobalLightColor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_GlobalLightColor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 color = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->color(), output);
  }

  // optional float duration = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->duration(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_GlobalLightColor)
}

::google::protobuf::uint8* CDOTAUserMsg_GlobalLightColor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_GlobalLightColor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 color = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->color(), target);
  }

  // optional float duration = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->duration(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_GlobalLightColor)
  return target;
}

size_t CDOTAUserMsg_GlobalLightColor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_GlobalLightColor)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 color = 1;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->color());
    }

    // optional float duration = 2;
    if (has_duration()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_GlobalLightColor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_GlobalLightColor)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_GlobalLightColor* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_GlobalLightColor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_GlobalLightColor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_GlobalLightColor)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_GlobalLightColor::MergeFrom(const CDOTAUserMsg_GlobalLightColor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_GlobalLightColor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      color_ = from.color_;
    }
    if (cached_has_bits & 0x00000002u) {
      duration_ = from.duration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_GlobalLightColor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_GlobalLightColor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_GlobalLightColor::CopyFrom(const CDOTAUserMsg_GlobalLightColor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_GlobalLightColor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_GlobalLightColor::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_GlobalLightColor::Swap(CDOTAUserMsg_GlobalLightColor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_GlobalLightColor::InternalSwap(CDOTAUserMsg_GlobalLightColor* other) {
  std::swap(color_, other->color_);
  std::swap(duration_, other->duration_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_GlobalLightColor::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_GlobalLightColor

// optional uint32 color = 1;
bool CDOTAUserMsg_GlobalLightColor::has_color() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_GlobalLightColor::set_has_color() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_GlobalLightColor::clear_has_color() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_GlobalLightColor::clear_color() {
  color_ = 0u;
  clear_has_color();
}
::google::protobuf::uint32 CDOTAUserMsg_GlobalLightColor::color() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_GlobalLightColor.color)
  return color_;
}
void CDOTAUserMsg_GlobalLightColor::set_color(::google::protobuf::uint32 value) {
  set_has_color();
  color_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_GlobalLightColor.color)
}

// optional float duration = 2;
bool CDOTAUserMsg_GlobalLightColor::has_duration() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAUserMsg_GlobalLightColor::set_has_duration() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAUserMsg_GlobalLightColor::clear_has_duration() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAUserMsg_GlobalLightColor::clear_duration() {
  duration_ = 0;
  clear_has_duration();
}
float CDOTAUserMsg_GlobalLightColor::duration() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_GlobalLightColor.duration)
  return duration_;
}
void CDOTAUserMsg_GlobalLightColor::set_duration(float value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_GlobalLightColor.duration)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_GlobalLightDirection::kDirectionFieldNumber;
const int CDOTAUserMsg_GlobalLightDirection::kDurationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_GlobalLightDirection::CDOTAUserMsg_GlobalLightDirection()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_GlobalLightDirection)
}
CDOTAUserMsg_GlobalLightDirection::CDOTAUserMsg_GlobalLightDirection(const CDOTAUserMsg_GlobalLightDirection& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_direction()) {
    direction_ = new ::proto::dota::CMsgVector(*from.direction_);
  } else {
    direction_ = NULL;
  }
  duration_ = from.duration_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_GlobalLightDirection)
}

void CDOTAUserMsg_GlobalLightDirection::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&direction_, 0, reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&direction_) + sizeof(duration_));
}

CDOTAUserMsg_GlobalLightDirection::~CDOTAUserMsg_GlobalLightDirection() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_GlobalLightDirection)
  SharedDtor();
}

void CDOTAUserMsg_GlobalLightDirection::SharedDtor() {
  if (this != internal_default_instance()) {
    delete direction_;
  }
}

void CDOTAUserMsg_GlobalLightDirection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_GlobalLightDirection::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_GlobalLightDirection& CDOTAUserMsg_GlobalLightDirection::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_GlobalLightDirection* CDOTAUserMsg_GlobalLightDirection::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_GlobalLightDirection* n = new CDOTAUserMsg_GlobalLightDirection;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_GlobalLightDirection::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_GlobalLightDirection)
  if (has_direction()) {
    GOOGLE_DCHECK(direction_ != NULL);
    direction_->::proto::dota::CMsgVector::Clear();
  }
  duration_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_GlobalLightDirection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_GlobalLightDirection)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgVector direction = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_direction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float duration = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_duration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_GlobalLightDirection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_GlobalLightDirection)
  return false;
#undef DO_
}

void CDOTAUserMsg_GlobalLightDirection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_GlobalLightDirection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgVector direction = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->direction_, output);
  }

  // optional float duration = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->duration(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_GlobalLightDirection)
}

::google::protobuf::uint8* CDOTAUserMsg_GlobalLightDirection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_GlobalLightDirection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgVector direction = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->direction_, deterministic, target);
  }

  // optional float duration = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->duration(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_GlobalLightDirection)
  return target;
}

size_t CDOTAUserMsg_GlobalLightDirection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_GlobalLightDirection)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .proto.dota.CMsgVector direction = 1;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->direction_);
    }

    // optional float duration = 2;
    if (has_duration()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_GlobalLightDirection::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_GlobalLightDirection)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_GlobalLightDirection* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_GlobalLightDirection>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_GlobalLightDirection)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_GlobalLightDirection)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_GlobalLightDirection::MergeFrom(const CDOTAUserMsg_GlobalLightDirection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_GlobalLightDirection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_direction()->::proto::dota::CMsgVector::MergeFrom(from.direction());
    }
    if (cached_has_bits & 0x00000002u) {
      duration_ = from.duration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_GlobalLightDirection::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_GlobalLightDirection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_GlobalLightDirection::CopyFrom(const CDOTAUserMsg_GlobalLightDirection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_GlobalLightDirection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_GlobalLightDirection::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_GlobalLightDirection::Swap(CDOTAUserMsg_GlobalLightDirection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_GlobalLightDirection::InternalSwap(CDOTAUserMsg_GlobalLightDirection* other) {
  std::swap(direction_, other->direction_);
  std::swap(duration_, other->duration_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_GlobalLightDirection::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_GlobalLightDirection

// optional .proto.dota.CMsgVector direction = 1;
bool CDOTAUserMsg_GlobalLightDirection::has_direction() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_GlobalLightDirection::set_has_direction() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_GlobalLightDirection::clear_has_direction() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_GlobalLightDirection::clear_direction() {
  if (direction_ != NULL) direction_->::proto::dota::CMsgVector::Clear();
  clear_has_direction();
}
const ::proto::dota::CMsgVector& CDOTAUserMsg_GlobalLightDirection::direction() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_GlobalLightDirection.direction)
  return direction_ != NULL ? *direction_
                         : *::proto::dota::CMsgVector::internal_default_instance();
}
::proto::dota::CMsgVector* CDOTAUserMsg_GlobalLightDirection::mutable_direction() {
  set_has_direction();
  if (direction_ == NULL) {
    direction_ = new ::proto::dota::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_GlobalLightDirection.direction)
  return direction_;
}
::proto::dota::CMsgVector* CDOTAUserMsg_GlobalLightDirection::release_direction() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAUserMsg_GlobalLightDirection.direction)
  clear_has_direction();
  ::proto::dota::CMsgVector* temp = direction_;
  direction_ = NULL;
  return temp;
}
void CDOTAUserMsg_GlobalLightDirection::set_allocated_direction(::proto::dota::CMsgVector* direction) {
  delete direction_;
  direction_ = direction;
  if (direction) {
    set_has_direction();
  } else {
    clear_has_direction();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAUserMsg_GlobalLightDirection.direction)
}

// optional float duration = 2;
bool CDOTAUserMsg_GlobalLightDirection::has_duration() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAUserMsg_GlobalLightDirection::set_has_duration() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAUserMsg_GlobalLightDirection::clear_has_duration() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAUserMsg_GlobalLightDirection::clear_duration() {
  duration_ = 0;
  clear_has_duration();
}
float CDOTAUserMsg_GlobalLightDirection::duration() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_GlobalLightDirection.duration)
  return duration_;
}
void CDOTAUserMsg_GlobalLightDirection::set_duration(float value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_GlobalLightDirection.duration)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_LocationPing::kPlayerIdFieldNumber;
const int CDOTAUserMsg_LocationPing::kLocationPingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_LocationPing::CDOTAUserMsg_LocationPing()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_LocationPing)
}
CDOTAUserMsg_LocationPing::CDOTAUserMsg_LocationPing(const CDOTAUserMsg_LocationPing& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_location_ping()) {
    location_ping_ = new ::proto::dota::CDOTAMsg_LocationPing(*from.location_ping_);
  } else {
    location_ping_ = NULL;
  }
  player_id_ = from.player_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_LocationPing)
}

void CDOTAUserMsg_LocationPing::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&location_ping_, 0, reinterpret_cast<char*>(&player_id_) -
    reinterpret_cast<char*>(&location_ping_) + sizeof(player_id_));
}

CDOTAUserMsg_LocationPing::~CDOTAUserMsg_LocationPing() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_LocationPing)
  SharedDtor();
}

void CDOTAUserMsg_LocationPing::SharedDtor() {
  if (this != internal_default_instance()) {
    delete location_ping_;
  }
}

void CDOTAUserMsg_LocationPing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_LocationPing::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_LocationPing& CDOTAUserMsg_LocationPing::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_LocationPing* CDOTAUserMsg_LocationPing::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_LocationPing* n = new CDOTAUserMsg_LocationPing;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_LocationPing::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_LocationPing)
  if (has_location_ping()) {
    GOOGLE_DCHECK(location_ping_ != NULL);
    location_ping_->::proto::dota::CDOTAMsg_LocationPing::Clear();
  }
  player_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_LocationPing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_LocationPing)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_player_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CDOTAMsg_LocationPing location_ping = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location_ping()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_LocationPing)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_LocationPing)
  return false;
#undef DO_
}

void CDOTAUserMsg_LocationPing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_LocationPing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_id(), output);
  }

  // optional .proto.dota.CDOTAMsg_LocationPing location_ping = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->location_ping_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_LocationPing)
}

::google::protobuf::uint8* CDOTAUserMsg_LocationPing::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_LocationPing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_id(), target);
  }

  // optional .proto.dota.CDOTAMsg_LocationPing location_ping = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->location_ping_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_LocationPing)
  return target;
}

size_t CDOTAUserMsg_LocationPing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_LocationPing)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .proto.dota.CDOTAMsg_LocationPing location_ping = 2;
    if (has_location_ping()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->location_ping_);
    }

    // optional uint32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_LocationPing::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_LocationPing)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_LocationPing* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_LocationPing>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_LocationPing)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_LocationPing)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_LocationPing::MergeFrom(const CDOTAUserMsg_LocationPing& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_LocationPing)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_location_ping()->::proto::dota::CDOTAMsg_LocationPing::MergeFrom(from.location_ping());
    }
    if (cached_has_bits & 0x00000002u) {
      player_id_ = from.player_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_LocationPing::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_LocationPing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_LocationPing::CopyFrom(const CDOTAUserMsg_LocationPing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_LocationPing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_LocationPing::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_LocationPing::Swap(CDOTAUserMsg_LocationPing* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_LocationPing::InternalSwap(CDOTAUserMsg_LocationPing* other) {
  std::swap(location_ping_, other->location_ping_);
  std::swap(player_id_, other->player_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_LocationPing::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_LocationPing

// optional uint32 player_id = 1;
bool CDOTAUserMsg_LocationPing::has_player_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAUserMsg_LocationPing::set_has_player_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAUserMsg_LocationPing::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAUserMsg_LocationPing::clear_player_id() {
  player_id_ = 0u;
  clear_has_player_id();
}
::google::protobuf::uint32 CDOTAUserMsg_LocationPing::player_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_LocationPing.player_id)
  return player_id_;
}
void CDOTAUserMsg_LocationPing::set_player_id(::google::protobuf::uint32 value) {
  set_has_player_id();
  player_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_LocationPing.player_id)
}

// optional .proto.dota.CDOTAMsg_LocationPing location_ping = 2;
bool CDOTAUserMsg_LocationPing::has_location_ping() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_LocationPing::set_has_location_ping() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_LocationPing::clear_has_location_ping() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_LocationPing::clear_location_ping() {
  if (location_ping_ != NULL) location_ping_->::proto::dota::CDOTAMsg_LocationPing::Clear();
  clear_has_location_ping();
}
const ::proto::dota::CDOTAMsg_LocationPing& CDOTAUserMsg_LocationPing::location_ping() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_LocationPing.location_ping)
  return location_ping_ != NULL ? *location_ping_
                         : *::proto::dota::CDOTAMsg_LocationPing::internal_default_instance();
}
::proto::dota::CDOTAMsg_LocationPing* CDOTAUserMsg_LocationPing::mutable_location_ping() {
  set_has_location_ping();
  if (location_ping_ == NULL) {
    location_ping_ = new ::proto::dota::CDOTAMsg_LocationPing;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_LocationPing.location_ping)
  return location_ping_;
}
::proto::dota::CDOTAMsg_LocationPing* CDOTAUserMsg_LocationPing::release_location_ping() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAUserMsg_LocationPing.location_ping)
  clear_has_location_ping();
  ::proto::dota::CDOTAMsg_LocationPing* temp = location_ping_;
  location_ping_ = NULL;
  return temp;
}
void CDOTAUserMsg_LocationPing::set_allocated_location_ping(::proto::dota::CDOTAMsg_LocationPing* location_ping) {
  delete location_ping_;
  location_ping_ = location_ping;
  if (location_ping) {
    set_has_location_ping();
  } else {
    clear_has_location_ping();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAUserMsg_LocationPing.location_ping)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_ItemAlert::kPlayerIdFieldNumber;
const int CDOTAUserMsg_ItemAlert::kItemAlertFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_ItemAlert::CDOTAUserMsg_ItemAlert()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_ItemAlert)
}
CDOTAUserMsg_ItemAlert::CDOTAUserMsg_ItemAlert(const CDOTAUserMsg_ItemAlert& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_item_alert()) {
    item_alert_ = new ::proto::dota::CDOTAMsg_ItemAlert(*from.item_alert_);
  } else {
    item_alert_ = NULL;
  }
  player_id_ = from.player_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_ItemAlert)
}

void CDOTAUserMsg_ItemAlert::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&item_alert_, 0, reinterpret_cast<char*>(&player_id_) -
    reinterpret_cast<char*>(&item_alert_) + sizeof(player_id_));
}

CDOTAUserMsg_ItemAlert::~CDOTAUserMsg_ItemAlert() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_ItemAlert)
  SharedDtor();
}

void CDOTAUserMsg_ItemAlert::SharedDtor() {
  if (this != internal_default_instance()) {
    delete item_alert_;
  }
}

void CDOTAUserMsg_ItemAlert::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_ItemAlert::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_ItemAlert& CDOTAUserMsg_ItemAlert::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_ItemAlert* CDOTAUserMsg_ItemAlert::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_ItemAlert* n = new CDOTAUserMsg_ItemAlert;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_ItemAlert::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_ItemAlert)
  if (has_item_alert()) {
    GOOGLE_DCHECK(item_alert_ != NULL);
    item_alert_->::proto::dota::CDOTAMsg_ItemAlert::Clear();
  }
  player_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_ItemAlert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_ItemAlert)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_player_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CDOTAMsg_ItemAlert item_alert = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item_alert()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_ItemAlert)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_ItemAlert)
  return false;
#undef DO_
}

void CDOTAUserMsg_ItemAlert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_ItemAlert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_id(), output);
  }

  // optional .proto.dota.CDOTAMsg_ItemAlert item_alert = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->item_alert_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_ItemAlert)
}

::google::protobuf::uint8* CDOTAUserMsg_ItemAlert::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_ItemAlert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_id(), target);
  }

  // optional .proto.dota.CDOTAMsg_ItemAlert item_alert = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->item_alert_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_ItemAlert)
  return target;
}

size_t CDOTAUserMsg_ItemAlert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_ItemAlert)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .proto.dota.CDOTAMsg_ItemAlert item_alert = 2;
    if (has_item_alert()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->item_alert_);
    }

    // optional uint32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_ItemAlert::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_ItemAlert)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_ItemAlert* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_ItemAlert>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_ItemAlert)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_ItemAlert)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_ItemAlert::MergeFrom(const CDOTAUserMsg_ItemAlert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_ItemAlert)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_item_alert()->::proto::dota::CDOTAMsg_ItemAlert::MergeFrom(from.item_alert());
    }
    if (cached_has_bits & 0x00000002u) {
      player_id_ = from.player_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_ItemAlert::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_ItemAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_ItemAlert::CopyFrom(const CDOTAUserMsg_ItemAlert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_ItemAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ItemAlert::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_ItemAlert::Swap(CDOTAUserMsg_ItemAlert* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_ItemAlert::InternalSwap(CDOTAUserMsg_ItemAlert* other) {
  std::swap(item_alert_, other->item_alert_);
  std::swap(player_id_, other->player_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_ItemAlert::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_ItemAlert

// optional uint32 player_id = 1;
bool CDOTAUserMsg_ItemAlert::has_player_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAUserMsg_ItemAlert::set_has_player_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAUserMsg_ItemAlert::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAUserMsg_ItemAlert::clear_player_id() {
  player_id_ = 0u;
  clear_has_player_id();
}
::google::protobuf::uint32 CDOTAUserMsg_ItemAlert::player_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ItemAlert.player_id)
  return player_id_;
}
void CDOTAUserMsg_ItemAlert::set_player_id(::google::protobuf::uint32 value) {
  set_has_player_id();
  player_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_ItemAlert.player_id)
}

// optional .proto.dota.CDOTAMsg_ItemAlert item_alert = 2;
bool CDOTAUserMsg_ItemAlert::has_item_alert() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_ItemAlert::set_has_item_alert() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_ItemAlert::clear_has_item_alert() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_ItemAlert::clear_item_alert() {
  if (item_alert_ != NULL) item_alert_->::proto::dota::CDOTAMsg_ItemAlert::Clear();
  clear_has_item_alert();
}
const ::proto::dota::CDOTAMsg_ItemAlert& CDOTAUserMsg_ItemAlert::item_alert() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ItemAlert.item_alert)
  return item_alert_ != NULL ? *item_alert_
                         : *::proto::dota::CDOTAMsg_ItemAlert::internal_default_instance();
}
::proto::dota::CDOTAMsg_ItemAlert* CDOTAUserMsg_ItemAlert::mutable_item_alert() {
  set_has_item_alert();
  if (item_alert_ == NULL) {
    item_alert_ = new ::proto::dota::CDOTAMsg_ItemAlert;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_ItemAlert.item_alert)
  return item_alert_;
}
::proto::dota::CDOTAMsg_ItemAlert* CDOTAUserMsg_ItemAlert::release_item_alert() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAUserMsg_ItemAlert.item_alert)
  clear_has_item_alert();
  ::proto::dota::CDOTAMsg_ItemAlert* temp = item_alert_;
  item_alert_ = NULL;
  return temp;
}
void CDOTAUserMsg_ItemAlert::set_allocated_item_alert(::proto::dota::CDOTAMsg_ItemAlert* item_alert) {
  delete item_alert_;
  item_alert_ = item_alert;
  if (item_alert) {
    set_has_item_alert();
  } else {
    clear_has_item_alert();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAUserMsg_ItemAlert.item_alert)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_EnemyItemAlert::kPlayerIdFieldNumber;
const int CDOTAUserMsg_EnemyItemAlert::kTargetPlayerIdFieldNumber;
const int CDOTAUserMsg_EnemyItemAlert::kItemidFieldNumber;
const int CDOTAUserMsg_EnemyItemAlert::kRuneTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_EnemyItemAlert::CDOTAUserMsg_EnemyItemAlert()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_EnemyItemAlert)
}
CDOTAUserMsg_EnemyItemAlert::CDOTAUserMsg_EnemyItemAlert(const CDOTAUserMsg_EnemyItemAlert& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&player_id_, &from.player_id_,
    reinterpret_cast<char*>(&rune_type_) -
    reinterpret_cast<char*>(&player_id_) + sizeof(rune_type_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_EnemyItemAlert)
}

void CDOTAUserMsg_EnemyItemAlert::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&player_id_, 0, reinterpret_cast<char*>(&rune_type_) -
    reinterpret_cast<char*>(&player_id_) + sizeof(rune_type_));
}

CDOTAUserMsg_EnemyItemAlert::~CDOTAUserMsg_EnemyItemAlert() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_EnemyItemAlert)
  SharedDtor();
}

void CDOTAUserMsg_EnemyItemAlert::SharedDtor() {
}

void CDOTAUserMsg_EnemyItemAlert::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_EnemyItemAlert::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_EnemyItemAlert& CDOTAUserMsg_EnemyItemAlert::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_EnemyItemAlert* CDOTAUserMsg_EnemyItemAlert::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_EnemyItemAlert* n = new CDOTAUserMsg_EnemyItemAlert;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_EnemyItemAlert::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_EnemyItemAlert)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&player_id_, 0, reinterpret_cast<char*>(&rune_type_) -
      reinterpret_cast<char*>(&player_id_) + sizeof(rune_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_EnemyItemAlert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_EnemyItemAlert)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_player_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 target_player_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_target_player_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 itemid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_itemid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rune_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_rune_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rune_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_EnemyItemAlert)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_EnemyItemAlert)
  return false;
#undef DO_
}

void CDOTAUserMsg_EnemyItemAlert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_EnemyItemAlert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_id(), output);
  }

  // optional uint32 target_player_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->target_player_id(), output);
  }

  // optional int32 itemid = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->itemid(), output);
  }

  // optional uint32 rune_type = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->rune_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_EnemyItemAlert)
}

::google::protobuf::uint8* CDOTAUserMsg_EnemyItemAlert::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_EnemyItemAlert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_id(), target);
  }

  // optional uint32 target_player_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->target_player_id(), target);
  }

  // optional int32 itemid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->itemid(), target);
  }

  // optional uint32 rune_type = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->rune_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_EnemyItemAlert)
  return target;
}

size_t CDOTAUserMsg_EnemyItemAlert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_EnemyItemAlert)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional uint32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_id());
    }

    // optional uint32 target_player_id = 2;
    if (has_target_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_player_id());
    }

    // optional int32 itemid = 3;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // optional uint32 rune_type = 4;
    if (has_rune_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rune_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_EnemyItemAlert::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_EnemyItemAlert)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_EnemyItemAlert* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_EnemyItemAlert>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_EnemyItemAlert)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_EnemyItemAlert)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_EnemyItemAlert::MergeFrom(const CDOTAUserMsg_EnemyItemAlert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_EnemyItemAlert)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      player_id_ = from.player_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      target_player_id_ = from.target_player_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      itemid_ = from.itemid_;
    }
    if (cached_has_bits & 0x00000008u) {
      rune_type_ = from.rune_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_EnemyItemAlert::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_EnemyItemAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_EnemyItemAlert::CopyFrom(const CDOTAUserMsg_EnemyItemAlert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_EnemyItemAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_EnemyItemAlert::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_EnemyItemAlert::Swap(CDOTAUserMsg_EnemyItemAlert* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_EnemyItemAlert::InternalSwap(CDOTAUserMsg_EnemyItemAlert* other) {
  std::swap(player_id_, other->player_id_);
  std::swap(target_player_id_, other->target_player_id_);
  std::swap(itemid_, other->itemid_);
  std::swap(rune_type_, other->rune_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_EnemyItemAlert::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_EnemyItemAlert

// optional uint32 player_id = 1;
bool CDOTAUserMsg_EnemyItemAlert::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_EnemyItemAlert::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_EnemyItemAlert::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_EnemyItemAlert::clear_player_id() {
  player_id_ = 0u;
  clear_has_player_id();
}
::google::protobuf::uint32 CDOTAUserMsg_EnemyItemAlert::player_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_EnemyItemAlert.player_id)
  return player_id_;
}
void CDOTAUserMsg_EnemyItemAlert::set_player_id(::google::protobuf::uint32 value) {
  set_has_player_id();
  player_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_EnemyItemAlert.player_id)
}

// optional uint32 target_player_id = 2;
bool CDOTAUserMsg_EnemyItemAlert::has_target_player_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAUserMsg_EnemyItemAlert::set_has_target_player_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAUserMsg_EnemyItemAlert::clear_has_target_player_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAUserMsg_EnemyItemAlert::clear_target_player_id() {
  target_player_id_ = 0u;
  clear_has_target_player_id();
}
::google::protobuf::uint32 CDOTAUserMsg_EnemyItemAlert::target_player_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_EnemyItemAlert.target_player_id)
  return target_player_id_;
}
void CDOTAUserMsg_EnemyItemAlert::set_target_player_id(::google::protobuf::uint32 value) {
  set_has_target_player_id();
  target_player_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_EnemyItemAlert.target_player_id)
}

// optional int32 itemid = 3;
bool CDOTAUserMsg_EnemyItemAlert::has_itemid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDOTAUserMsg_EnemyItemAlert::set_has_itemid() {
  _has_bits_[0] |= 0x00000004u;
}
void CDOTAUserMsg_EnemyItemAlert::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDOTAUserMsg_EnemyItemAlert::clear_itemid() {
  itemid_ = 0;
  clear_has_itemid();
}
::google::protobuf::int32 CDOTAUserMsg_EnemyItemAlert::itemid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_EnemyItemAlert.itemid)
  return itemid_;
}
void CDOTAUserMsg_EnemyItemAlert::set_itemid(::google::protobuf::int32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_EnemyItemAlert.itemid)
}

// optional uint32 rune_type = 4;
bool CDOTAUserMsg_EnemyItemAlert::has_rune_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CDOTAUserMsg_EnemyItemAlert::set_has_rune_type() {
  _has_bits_[0] |= 0x00000008u;
}
void CDOTAUserMsg_EnemyItemAlert::clear_has_rune_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void CDOTAUserMsg_EnemyItemAlert::clear_rune_type() {
  rune_type_ = 0u;
  clear_has_rune_type();
}
::google::protobuf::uint32 CDOTAUserMsg_EnemyItemAlert::rune_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_EnemyItemAlert.rune_type)
  return rune_type_;
}
void CDOTAUserMsg_EnemyItemAlert::set_rune_type(::google::protobuf::uint32 value) {
  set_has_rune_type();
  rune_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_EnemyItemAlert.rune_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_ModifierAlert::kPlayerIdFieldNumber;
const int CDOTAUserMsg_ModifierAlert::kClassNameFieldNumber;
const int CDOTAUserMsg_ModifierAlert::kStackCountFieldNumber;
const int CDOTAUserMsg_ModifierAlert::kIsDebuffFieldNumber;
const int CDOTAUserMsg_ModifierAlert::kTargetEntindexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_ModifierAlert::CDOTAUserMsg_ModifierAlert()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_ModifierAlert)
}
CDOTAUserMsg_ModifierAlert::CDOTAUserMsg_ModifierAlert(const CDOTAUserMsg_ModifierAlert& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  class_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_class_name()) {
    class_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.class_name_);
  }
  ::memcpy(&player_id_, &from.player_id_,
    reinterpret_cast<char*>(&target_entindex_) -
    reinterpret_cast<char*>(&player_id_) + sizeof(target_entindex_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_ModifierAlert)
}

void CDOTAUserMsg_ModifierAlert::SharedCtor() {
  _cached_size_ = 0;
  class_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&player_id_, 0, reinterpret_cast<char*>(&target_entindex_) -
    reinterpret_cast<char*>(&player_id_) + sizeof(target_entindex_));
}

CDOTAUserMsg_ModifierAlert::~CDOTAUserMsg_ModifierAlert() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_ModifierAlert)
  SharedDtor();
}

void CDOTAUserMsg_ModifierAlert::SharedDtor() {
  class_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CDOTAUserMsg_ModifierAlert::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_ModifierAlert::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_ModifierAlert& CDOTAUserMsg_ModifierAlert::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_ModifierAlert* CDOTAUserMsg_ModifierAlert::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_ModifierAlert* n = new CDOTAUserMsg_ModifierAlert;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_ModifierAlert::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_ModifierAlert)
  if (has_class_name()) {
    GOOGLE_DCHECK(!class_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*class_name_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 30u) {
    ::memset(&player_id_, 0, reinterpret_cast<char*>(&target_entindex_) -
      reinterpret_cast<char*>(&player_id_) + sizeof(target_entindex_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_ModifierAlert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_ModifierAlert)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_player_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string class_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_class_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->class_name().data(), this->class_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDOTAUserMsg_ModifierAlert.class_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 stack_count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_stack_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stack_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_debuff = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_is_debuff();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_debuff_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 target_entindex = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_target_entindex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_entindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_ModifierAlert)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_ModifierAlert)
  return false;
#undef DO_
}

void CDOTAUserMsg_ModifierAlert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_ModifierAlert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_id(), output);
  }

  // optional string class_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->class_name().data(), this->class_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAUserMsg_ModifierAlert.class_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->class_name(), output);
  }

  // optional uint32 stack_count = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->stack_count(), output);
  }

  // optional bool is_debuff = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_debuff(), output);
  }

  // optional uint32 target_entindex = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->target_entindex(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_ModifierAlert)
}

::google::protobuf::uint8* CDOTAUserMsg_ModifierAlert::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_ModifierAlert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_id(), target);
  }

  // optional string class_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->class_name().data(), this->class_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAUserMsg_ModifierAlert.class_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->class_name(), target);
  }

  // optional uint32 stack_count = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->stack_count(), target);
  }

  // optional bool is_debuff = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_debuff(), target);
  }

  // optional uint32 target_entindex = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->target_entindex(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_ModifierAlert)
  return target;
}

size_t CDOTAUserMsg_ModifierAlert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_ModifierAlert)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string class_name = 2;
    if (has_class_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->class_name());
    }

    // optional uint32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_id());
    }

    // optional uint32 stack_count = 3;
    if (has_stack_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stack_count());
    }

    // optional bool is_debuff = 4;
    if (has_is_debuff()) {
      total_size += 1 + 1;
    }

    // optional uint32 target_entindex = 5;
    if (has_target_entindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_entindex());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_ModifierAlert::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_ModifierAlert)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_ModifierAlert* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_ModifierAlert>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_ModifierAlert)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_ModifierAlert)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_ModifierAlert::MergeFrom(const CDOTAUserMsg_ModifierAlert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_ModifierAlert)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_class_name();
      class_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.class_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      player_id_ = from.player_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      stack_count_ = from.stack_count_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_debuff_ = from.is_debuff_;
    }
    if (cached_has_bits & 0x00000010u) {
      target_entindex_ = from.target_entindex_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_ModifierAlert::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_ModifierAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_ModifierAlert::CopyFrom(const CDOTAUserMsg_ModifierAlert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_ModifierAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ModifierAlert::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_ModifierAlert::Swap(CDOTAUserMsg_ModifierAlert* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_ModifierAlert::InternalSwap(CDOTAUserMsg_ModifierAlert* other) {
  class_name_.Swap(&other->class_name_);
  std::swap(player_id_, other->player_id_);
  std::swap(stack_count_, other->stack_count_);
  std::swap(is_debuff_, other->is_debuff_);
  std::swap(target_entindex_, other->target_entindex_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_ModifierAlert::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_ModifierAlert

// optional uint32 player_id = 1;
bool CDOTAUserMsg_ModifierAlert::has_player_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAUserMsg_ModifierAlert::set_has_player_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAUserMsg_ModifierAlert::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAUserMsg_ModifierAlert::clear_player_id() {
  player_id_ = 0u;
  clear_has_player_id();
}
::google::protobuf::uint32 CDOTAUserMsg_ModifierAlert::player_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ModifierAlert.player_id)
  return player_id_;
}
void CDOTAUserMsg_ModifierAlert::set_player_id(::google::protobuf::uint32 value) {
  set_has_player_id();
  player_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_ModifierAlert.player_id)
}

// optional string class_name = 2;
bool CDOTAUserMsg_ModifierAlert::has_class_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_ModifierAlert::set_has_class_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_ModifierAlert::clear_has_class_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_ModifierAlert::clear_class_name() {
  class_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_class_name();
}
const ::std::string& CDOTAUserMsg_ModifierAlert::class_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ModifierAlert.class_name)
  return class_name_.GetNoArena();
}
void CDOTAUserMsg_ModifierAlert::set_class_name(const ::std::string& value) {
  set_has_class_name();
  class_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_ModifierAlert.class_name)
}
#if LANG_CXX11
void CDOTAUserMsg_ModifierAlert::set_class_name(::std::string&& value) {
  set_has_class_name();
  class_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDOTAUserMsg_ModifierAlert.class_name)
}
#endif
void CDOTAUserMsg_ModifierAlert::set_class_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_class_name();
  class_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDOTAUserMsg_ModifierAlert.class_name)
}
void CDOTAUserMsg_ModifierAlert::set_class_name(const char* value, size_t size) {
  set_has_class_name();
  class_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDOTAUserMsg_ModifierAlert.class_name)
}
::std::string* CDOTAUserMsg_ModifierAlert::mutable_class_name() {
  set_has_class_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_ModifierAlert.class_name)
  return class_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDOTAUserMsg_ModifierAlert::release_class_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAUserMsg_ModifierAlert.class_name)
  clear_has_class_name();
  return class_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDOTAUserMsg_ModifierAlert::set_allocated_class_name(::std::string* class_name) {
  if (class_name != NULL) {
    set_has_class_name();
  } else {
    clear_has_class_name();
  }
  class_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), class_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAUserMsg_ModifierAlert.class_name)
}

// optional uint32 stack_count = 3;
bool CDOTAUserMsg_ModifierAlert::has_stack_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDOTAUserMsg_ModifierAlert::set_has_stack_count() {
  _has_bits_[0] |= 0x00000004u;
}
void CDOTAUserMsg_ModifierAlert::clear_has_stack_count() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDOTAUserMsg_ModifierAlert::clear_stack_count() {
  stack_count_ = 0u;
  clear_has_stack_count();
}
::google::protobuf::uint32 CDOTAUserMsg_ModifierAlert::stack_count() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ModifierAlert.stack_count)
  return stack_count_;
}
void CDOTAUserMsg_ModifierAlert::set_stack_count(::google::protobuf::uint32 value) {
  set_has_stack_count();
  stack_count_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_ModifierAlert.stack_count)
}

// optional bool is_debuff = 4;
bool CDOTAUserMsg_ModifierAlert::has_is_debuff() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CDOTAUserMsg_ModifierAlert::set_has_is_debuff() {
  _has_bits_[0] |= 0x00000008u;
}
void CDOTAUserMsg_ModifierAlert::clear_has_is_debuff() {
  _has_bits_[0] &= ~0x00000008u;
}
void CDOTAUserMsg_ModifierAlert::clear_is_debuff() {
  is_debuff_ = false;
  clear_has_is_debuff();
}
bool CDOTAUserMsg_ModifierAlert::is_debuff() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ModifierAlert.is_debuff)
  return is_debuff_;
}
void CDOTAUserMsg_ModifierAlert::set_is_debuff(bool value) {
  set_has_is_debuff();
  is_debuff_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_ModifierAlert.is_debuff)
}

// optional uint32 target_entindex = 5;
bool CDOTAUserMsg_ModifierAlert::has_target_entindex() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CDOTAUserMsg_ModifierAlert::set_has_target_entindex() {
  _has_bits_[0] |= 0x00000010u;
}
void CDOTAUserMsg_ModifierAlert::clear_has_target_entindex() {
  _has_bits_[0] &= ~0x00000010u;
}
void CDOTAUserMsg_ModifierAlert::clear_target_entindex() {
  target_entindex_ = 0u;
  clear_has_target_entindex();
}
::google::protobuf::uint32 CDOTAUserMsg_ModifierAlert::target_entindex() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ModifierAlert.target_entindex)
  return target_entindex_;
}
void CDOTAUserMsg_ModifierAlert::set_target_entindex(::google::protobuf::uint32 value) {
  set_has_target_entindex();
  target_entindex_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_ModifierAlert.target_entindex)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_HPManaAlert::kPlayerIdFieldNumber;
const int CDOTAUserMsg_HPManaAlert::kTargetEntindexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_HPManaAlert::CDOTAUserMsg_HPManaAlert()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_HPManaAlert)
}
CDOTAUserMsg_HPManaAlert::CDOTAUserMsg_HPManaAlert(const CDOTAUserMsg_HPManaAlert& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&player_id_, &from.player_id_,
    reinterpret_cast<char*>(&target_entindex_) -
    reinterpret_cast<char*>(&player_id_) + sizeof(target_entindex_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_HPManaAlert)
}

void CDOTAUserMsg_HPManaAlert::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&player_id_, 0, reinterpret_cast<char*>(&target_entindex_) -
    reinterpret_cast<char*>(&player_id_) + sizeof(target_entindex_));
}

CDOTAUserMsg_HPManaAlert::~CDOTAUserMsg_HPManaAlert() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_HPManaAlert)
  SharedDtor();
}

void CDOTAUserMsg_HPManaAlert::SharedDtor() {
}

void CDOTAUserMsg_HPManaAlert::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_HPManaAlert::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_HPManaAlert& CDOTAUserMsg_HPManaAlert::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_HPManaAlert* CDOTAUserMsg_HPManaAlert::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_HPManaAlert* n = new CDOTAUserMsg_HPManaAlert;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_HPManaAlert::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_HPManaAlert)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&player_id_, 0, reinterpret_cast<char*>(&target_entindex_) -
      reinterpret_cast<char*>(&player_id_) + sizeof(target_entindex_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_HPManaAlert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_HPManaAlert)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_player_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 target_entindex = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_target_entindex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_entindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_HPManaAlert)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_HPManaAlert)
  return false;
#undef DO_
}

void CDOTAUserMsg_HPManaAlert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_HPManaAlert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_id(), output);
  }

  // optional uint32 target_entindex = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->target_entindex(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_HPManaAlert)
}

::google::protobuf::uint8* CDOTAUserMsg_HPManaAlert::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_HPManaAlert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_id(), target);
  }

  // optional uint32 target_entindex = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->target_entindex(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_HPManaAlert)
  return target;
}

size_t CDOTAUserMsg_HPManaAlert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_HPManaAlert)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_id());
    }

    // optional uint32 target_entindex = 2;
    if (has_target_entindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_entindex());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_HPManaAlert::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_HPManaAlert)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_HPManaAlert* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_HPManaAlert>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_HPManaAlert)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_HPManaAlert)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_HPManaAlert::MergeFrom(const CDOTAUserMsg_HPManaAlert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_HPManaAlert)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      player_id_ = from.player_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      target_entindex_ = from.target_entindex_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_HPManaAlert::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_HPManaAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_HPManaAlert::CopyFrom(const CDOTAUserMsg_HPManaAlert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_HPManaAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_HPManaAlert::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_HPManaAlert::Swap(CDOTAUserMsg_HPManaAlert* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_HPManaAlert::InternalSwap(CDOTAUserMsg_HPManaAlert* other) {
  std::swap(player_id_, other->player_id_);
  std::swap(target_entindex_, other->target_entindex_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_HPManaAlert::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_HPManaAlert

// optional uint32 player_id = 1;
bool CDOTAUserMsg_HPManaAlert::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_HPManaAlert::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_HPManaAlert::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_HPManaAlert::clear_player_id() {
  player_id_ = 0u;
  clear_has_player_id();
}
::google::protobuf::uint32 CDOTAUserMsg_HPManaAlert::player_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_HPManaAlert.player_id)
  return player_id_;
}
void CDOTAUserMsg_HPManaAlert::set_player_id(::google::protobuf::uint32 value) {
  set_has_player_id();
  player_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_HPManaAlert.player_id)
}

// optional uint32 target_entindex = 2;
bool CDOTAUserMsg_HPManaAlert::has_target_entindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAUserMsg_HPManaAlert::set_has_target_entindex() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAUserMsg_HPManaAlert::clear_has_target_entindex() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAUserMsg_HPManaAlert::clear_target_entindex() {
  target_entindex_ = 0u;
  clear_has_target_entindex();
}
::google::protobuf::uint32 CDOTAUserMsg_HPManaAlert::target_entindex() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_HPManaAlert.target_entindex)
  return target_entindex_;
}
void CDOTAUserMsg_HPManaAlert::set_target_entindex(::google::protobuf::uint32 value) {
  set_has_target_entindex();
  target_entindex_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_HPManaAlert.target_entindex)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_GlyphAlert::kPlayerIdFieldNumber;
const int CDOTAUserMsg_GlyphAlert::kNegativeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_GlyphAlert::CDOTAUserMsg_GlyphAlert()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_GlyphAlert)
}
CDOTAUserMsg_GlyphAlert::CDOTAUserMsg_GlyphAlert(const CDOTAUserMsg_GlyphAlert& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&player_id_, &from.player_id_,
    reinterpret_cast<char*>(&negative_) -
    reinterpret_cast<char*>(&player_id_) + sizeof(negative_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_GlyphAlert)
}

void CDOTAUserMsg_GlyphAlert::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&player_id_, 0, reinterpret_cast<char*>(&negative_) -
    reinterpret_cast<char*>(&player_id_) + sizeof(negative_));
}

CDOTAUserMsg_GlyphAlert::~CDOTAUserMsg_GlyphAlert() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_GlyphAlert)
  SharedDtor();
}

void CDOTAUserMsg_GlyphAlert::SharedDtor() {
}

void CDOTAUserMsg_GlyphAlert::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_GlyphAlert::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_GlyphAlert& CDOTAUserMsg_GlyphAlert::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_GlyphAlert* CDOTAUserMsg_GlyphAlert::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_GlyphAlert* n = new CDOTAUserMsg_GlyphAlert;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_GlyphAlert::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_GlyphAlert)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&player_id_, 0, reinterpret_cast<char*>(&negative_) -
      reinterpret_cast<char*>(&player_id_) + sizeof(negative_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_GlyphAlert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_GlyphAlert)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_player_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool negative = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_negative();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &negative_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_GlyphAlert)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_GlyphAlert)
  return false;
#undef DO_
}

void CDOTAUserMsg_GlyphAlert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_GlyphAlert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_id(), output);
  }

  // optional bool negative = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->negative(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_GlyphAlert)
}

::google::protobuf::uint8* CDOTAUserMsg_GlyphAlert::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_GlyphAlert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_id(), target);
  }

  // optional bool negative = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->negative(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_GlyphAlert)
  return target;
}

size_t CDOTAUserMsg_GlyphAlert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_GlyphAlert)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_id());
    }

    // optional bool negative = 2;
    if (has_negative()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_GlyphAlert::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_GlyphAlert)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_GlyphAlert* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_GlyphAlert>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_GlyphAlert)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_GlyphAlert)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_GlyphAlert::MergeFrom(const CDOTAUserMsg_GlyphAlert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_GlyphAlert)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      player_id_ = from.player_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      negative_ = from.negative_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_GlyphAlert::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_GlyphAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_GlyphAlert::CopyFrom(const CDOTAUserMsg_GlyphAlert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_GlyphAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_GlyphAlert::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_GlyphAlert::Swap(CDOTAUserMsg_GlyphAlert* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_GlyphAlert::InternalSwap(CDOTAUserMsg_GlyphAlert* other) {
  std::swap(player_id_, other->player_id_);
  std::swap(negative_, other->negative_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_GlyphAlert::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_GlyphAlert

// optional uint32 player_id = 1;
bool CDOTAUserMsg_GlyphAlert::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_GlyphAlert::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_GlyphAlert::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_GlyphAlert::clear_player_id() {
  player_id_ = 0u;
  clear_has_player_id();
}
::google::protobuf::uint32 CDOTAUserMsg_GlyphAlert::player_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_GlyphAlert.player_id)
  return player_id_;
}
void CDOTAUserMsg_GlyphAlert::set_player_id(::google::protobuf::uint32 value) {
  set_has_player_id();
  player_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_GlyphAlert.player_id)
}

// optional bool negative = 2;
bool CDOTAUserMsg_GlyphAlert::has_negative() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAUserMsg_GlyphAlert::set_has_negative() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAUserMsg_GlyphAlert::clear_has_negative() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAUserMsg_GlyphAlert::clear_negative() {
  negative_ = false;
  clear_has_negative();
}
bool CDOTAUserMsg_GlyphAlert::negative() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_GlyphAlert.negative)
  return negative_;
}
void CDOTAUserMsg_GlyphAlert::set_negative(bool value) {
  set_has_negative();
  negative_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_GlyphAlert.negative)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_WillPurchaseAlert::kItemidFieldNumber;
const int CDOTAUserMsg_WillPurchaseAlert::kPlayerIdFieldNumber;
const int CDOTAUserMsg_WillPurchaseAlert::kGoldRemainingFieldNumber;
const int CDOTAUserMsg_WillPurchaseAlert::kSuggestionPlayerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_WillPurchaseAlert::CDOTAUserMsg_WillPurchaseAlert()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_WillPurchaseAlert)
}
CDOTAUserMsg_WillPurchaseAlert::CDOTAUserMsg_WillPurchaseAlert(const CDOTAUserMsg_WillPurchaseAlert& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&itemid_, &from.itemid_,
    reinterpret_cast<char*>(&suggestion_player_id_) -
    reinterpret_cast<char*>(&itemid_) + sizeof(suggestion_player_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_WillPurchaseAlert)
}

void CDOTAUserMsg_WillPurchaseAlert::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&itemid_, 0, reinterpret_cast<char*>(&suggestion_player_id_) -
    reinterpret_cast<char*>(&itemid_) + sizeof(suggestion_player_id_));
}

CDOTAUserMsg_WillPurchaseAlert::~CDOTAUserMsg_WillPurchaseAlert() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_WillPurchaseAlert)
  SharedDtor();
}

void CDOTAUserMsg_WillPurchaseAlert::SharedDtor() {
}

void CDOTAUserMsg_WillPurchaseAlert::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_WillPurchaseAlert::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_WillPurchaseAlert& CDOTAUserMsg_WillPurchaseAlert::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_WillPurchaseAlert* CDOTAUserMsg_WillPurchaseAlert::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_WillPurchaseAlert* n = new CDOTAUserMsg_WillPurchaseAlert;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_WillPurchaseAlert::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_WillPurchaseAlert)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&itemid_, 0, reinterpret_cast<char*>(&suggestion_player_id_) -
      reinterpret_cast<char*>(&itemid_) + sizeof(suggestion_player_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_WillPurchaseAlert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_WillPurchaseAlert)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 itemid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_itemid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 player_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_player_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 gold_remaining = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_gold_remaining();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gold_remaining_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 suggestion_player_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_suggestion_player_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &suggestion_player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_WillPurchaseAlert)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_WillPurchaseAlert)
  return false;
#undef DO_
}

void CDOTAUserMsg_WillPurchaseAlert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_WillPurchaseAlert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 itemid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemid(), output);
  }

  // optional int32 player_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->player_id(), output);
  }

  // optional uint32 gold_remaining = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->gold_remaining(), output);
  }

  // optional int32 suggestion_player_id = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->suggestion_player_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_WillPurchaseAlert)
}

::google::protobuf::uint8* CDOTAUserMsg_WillPurchaseAlert::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_WillPurchaseAlert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 itemid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemid(), target);
  }

  // optional int32 player_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->player_id(), target);
  }

  // optional uint32 gold_remaining = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->gold_remaining(), target);
  }

  // optional int32 suggestion_player_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->suggestion_player_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_WillPurchaseAlert)
  return target;
}

size_t CDOTAUserMsg_WillPurchaseAlert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_WillPurchaseAlert)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional int32 itemid = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // optional int32 player_id = 2;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // optional uint32 gold_remaining = 3;
    if (has_gold_remaining()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gold_remaining());
    }

    // optional int32 suggestion_player_id = 4;
    if (has_suggestion_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->suggestion_player_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_WillPurchaseAlert::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_WillPurchaseAlert)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_WillPurchaseAlert* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_WillPurchaseAlert>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_WillPurchaseAlert)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_WillPurchaseAlert)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_WillPurchaseAlert::MergeFrom(const CDOTAUserMsg_WillPurchaseAlert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_WillPurchaseAlert)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      itemid_ = from.itemid_;
    }
    if (cached_has_bits & 0x00000002u) {
      player_id_ = from.player_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      gold_remaining_ = from.gold_remaining_;
    }
    if (cached_has_bits & 0x00000008u) {
      suggestion_player_id_ = from.suggestion_player_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_WillPurchaseAlert::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_WillPurchaseAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_WillPurchaseAlert::CopyFrom(const CDOTAUserMsg_WillPurchaseAlert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_WillPurchaseAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_WillPurchaseAlert::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_WillPurchaseAlert::Swap(CDOTAUserMsg_WillPurchaseAlert* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_WillPurchaseAlert::InternalSwap(CDOTAUserMsg_WillPurchaseAlert* other) {
  std::swap(itemid_, other->itemid_);
  std::swap(player_id_, other->player_id_);
  std::swap(gold_remaining_, other->gold_remaining_);
  std::swap(suggestion_player_id_, other->suggestion_player_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_WillPurchaseAlert::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_WillPurchaseAlert

// optional int32 itemid = 1;
bool CDOTAUserMsg_WillPurchaseAlert::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_WillPurchaseAlert::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_WillPurchaseAlert::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_WillPurchaseAlert::clear_itemid() {
  itemid_ = 0;
  clear_has_itemid();
}
::google::protobuf::int32 CDOTAUserMsg_WillPurchaseAlert::itemid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_WillPurchaseAlert.itemid)
  return itemid_;
}
void CDOTAUserMsg_WillPurchaseAlert::set_itemid(::google::protobuf::int32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_WillPurchaseAlert.itemid)
}

// optional int32 player_id = 2;
bool CDOTAUserMsg_WillPurchaseAlert::has_player_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAUserMsg_WillPurchaseAlert::set_has_player_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAUserMsg_WillPurchaseAlert::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAUserMsg_WillPurchaseAlert::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
::google::protobuf::int32 CDOTAUserMsg_WillPurchaseAlert::player_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_WillPurchaseAlert.player_id)
  return player_id_;
}
void CDOTAUserMsg_WillPurchaseAlert::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_WillPurchaseAlert.player_id)
}

// optional uint32 gold_remaining = 3;
bool CDOTAUserMsg_WillPurchaseAlert::has_gold_remaining() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDOTAUserMsg_WillPurchaseAlert::set_has_gold_remaining() {
  _has_bits_[0] |= 0x00000004u;
}
void CDOTAUserMsg_WillPurchaseAlert::clear_has_gold_remaining() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDOTAUserMsg_WillPurchaseAlert::clear_gold_remaining() {
  gold_remaining_ = 0u;
  clear_has_gold_remaining();
}
::google::protobuf::uint32 CDOTAUserMsg_WillPurchaseAlert::gold_remaining() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_WillPurchaseAlert.gold_remaining)
  return gold_remaining_;
}
void CDOTAUserMsg_WillPurchaseAlert::set_gold_remaining(::google::protobuf::uint32 value) {
  set_has_gold_remaining();
  gold_remaining_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_WillPurchaseAlert.gold_remaining)
}

// optional int32 suggestion_player_id = 4;
bool CDOTAUserMsg_WillPurchaseAlert::has_suggestion_player_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CDOTAUserMsg_WillPurchaseAlert::set_has_suggestion_player_id() {
  _has_bits_[0] |= 0x00000008u;
}
void CDOTAUserMsg_WillPurchaseAlert::clear_has_suggestion_player_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void CDOTAUserMsg_WillPurchaseAlert::clear_suggestion_player_id() {
  suggestion_player_id_ = 0;
  clear_has_suggestion_player_id();
}
::google::protobuf::int32 CDOTAUserMsg_WillPurchaseAlert::suggestion_player_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_WillPurchaseAlert.suggestion_player_id)
  return suggestion_player_id_;
}
void CDOTAUserMsg_WillPurchaseAlert::set_suggestion_player_id(::google::protobuf::int32 value) {
  set_has_suggestion_player_id();
  suggestion_player_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_WillPurchaseAlert.suggestion_player_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_BuyBackStateAlert::kPlayerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_BuyBackStateAlert::CDOTAUserMsg_BuyBackStateAlert()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_BuyBackStateAlert)
}
CDOTAUserMsg_BuyBackStateAlert::CDOTAUserMsg_BuyBackStateAlert(const CDOTAUserMsg_BuyBackStateAlert& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  player_id_ = from.player_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_BuyBackStateAlert)
}

void CDOTAUserMsg_BuyBackStateAlert::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = 0;
}

CDOTAUserMsg_BuyBackStateAlert::~CDOTAUserMsg_BuyBackStateAlert() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_BuyBackStateAlert)
  SharedDtor();
}

void CDOTAUserMsg_BuyBackStateAlert::SharedDtor() {
}

void CDOTAUserMsg_BuyBackStateAlert::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_BuyBackStateAlert::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_BuyBackStateAlert& CDOTAUserMsg_BuyBackStateAlert::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_BuyBackStateAlert* CDOTAUserMsg_BuyBackStateAlert::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_BuyBackStateAlert* n = new CDOTAUserMsg_BuyBackStateAlert;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_BuyBackStateAlert::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_BuyBackStateAlert)
  player_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_BuyBackStateAlert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_BuyBackStateAlert)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_player_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_BuyBackStateAlert)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_BuyBackStateAlert)
  return false;
#undef DO_
}

void CDOTAUserMsg_BuyBackStateAlert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_BuyBackStateAlert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_BuyBackStateAlert)
}

::google::protobuf::uint8* CDOTAUserMsg_BuyBackStateAlert::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_BuyBackStateAlert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_BuyBackStateAlert)
  return target;
}

size_t CDOTAUserMsg_BuyBackStateAlert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_BuyBackStateAlert)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional int32 player_id = 1;
  if (has_player_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->player_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_BuyBackStateAlert::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_BuyBackStateAlert)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_BuyBackStateAlert* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_BuyBackStateAlert>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_BuyBackStateAlert)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_BuyBackStateAlert)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_BuyBackStateAlert::MergeFrom(const CDOTAUserMsg_BuyBackStateAlert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_BuyBackStateAlert)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    set_player_id(from.player_id());
  }
}

void CDOTAUserMsg_BuyBackStateAlert::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_BuyBackStateAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_BuyBackStateAlert::CopyFrom(const CDOTAUserMsg_BuyBackStateAlert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_BuyBackStateAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_BuyBackStateAlert::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_BuyBackStateAlert::Swap(CDOTAUserMsg_BuyBackStateAlert* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_BuyBackStateAlert::InternalSwap(CDOTAUserMsg_BuyBackStateAlert* other) {
  std::swap(player_id_, other->player_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_BuyBackStateAlert::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_BuyBackStateAlert

// optional int32 player_id = 1;
bool CDOTAUserMsg_BuyBackStateAlert::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_BuyBackStateAlert::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_BuyBackStateAlert::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_BuyBackStateAlert::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
::google::protobuf::int32 CDOTAUserMsg_BuyBackStateAlert::player_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_BuyBackStateAlert.player_id)
  return player_id_;
}
void CDOTAUserMsg_BuyBackStateAlert::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_BuyBackStateAlert.player_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_QuickBuyAlert::kPlayerIdFieldNumber;
const int CDOTAUserMsg_QuickBuyAlert::kItemidFieldNumber;
const int CDOTAUserMsg_QuickBuyAlert::kGoldRequiredFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_QuickBuyAlert::CDOTAUserMsg_QuickBuyAlert()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_QuickBuyAlert)
}
CDOTAUserMsg_QuickBuyAlert::CDOTAUserMsg_QuickBuyAlert(const CDOTAUserMsg_QuickBuyAlert& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&player_id_, &from.player_id_,
    reinterpret_cast<char*>(&gold_required_) -
    reinterpret_cast<char*>(&player_id_) + sizeof(gold_required_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_QuickBuyAlert)
}

void CDOTAUserMsg_QuickBuyAlert::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&player_id_, 0, reinterpret_cast<char*>(&gold_required_) -
    reinterpret_cast<char*>(&player_id_) + sizeof(gold_required_));
}

CDOTAUserMsg_QuickBuyAlert::~CDOTAUserMsg_QuickBuyAlert() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_QuickBuyAlert)
  SharedDtor();
}

void CDOTAUserMsg_QuickBuyAlert::SharedDtor() {
}

void CDOTAUserMsg_QuickBuyAlert::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_QuickBuyAlert::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_QuickBuyAlert& CDOTAUserMsg_QuickBuyAlert::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_QuickBuyAlert* CDOTAUserMsg_QuickBuyAlert::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_QuickBuyAlert* n = new CDOTAUserMsg_QuickBuyAlert;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_QuickBuyAlert::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_QuickBuyAlert)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&player_id_, 0, reinterpret_cast<char*>(&gold_required_) -
      reinterpret_cast<char*>(&player_id_) + sizeof(gold_required_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_QuickBuyAlert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_QuickBuyAlert)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_player_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 itemid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_itemid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 gold_required = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_gold_required();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_required_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_QuickBuyAlert)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_QuickBuyAlert)
  return false;
#undef DO_
}

void CDOTAUserMsg_QuickBuyAlert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_QuickBuyAlert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player_id(), output);
  }

  // optional int32 itemid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->itemid(), output);
  }

  // optional int32 gold_required = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gold_required(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_QuickBuyAlert)
}

::google::protobuf::uint8* CDOTAUserMsg_QuickBuyAlert::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_QuickBuyAlert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player_id(), target);
  }

  // optional int32 itemid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->itemid(), target);
  }

  // optional int32 gold_required = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gold_required(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_QuickBuyAlert)
  return target;
}

size_t CDOTAUserMsg_QuickBuyAlert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_QuickBuyAlert)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // optional int32 itemid = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // optional int32 gold_required = 3;
    if (has_gold_required()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold_required());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_QuickBuyAlert::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_QuickBuyAlert)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_QuickBuyAlert* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_QuickBuyAlert>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_QuickBuyAlert)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_QuickBuyAlert)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_QuickBuyAlert::MergeFrom(const CDOTAUserMsg_QuickBuyAlert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_QuickBuyAlert)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      player_id_ = from.player_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      itemid_ = from.itemid_;
    }
    if (cached_has_bits & 0x00000004u) {
      gold_required_ = from.gold_required_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_QuickBuyAlert::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_QuickBuyAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_QuickBuyAlert::CopyFrom(const CDOTAUserMsg_QuickBuyAlert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_QuickBuyAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_QuickBuyAlert::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_QuickBuyAlert::Swap(CDOTAUserMsg_QuickBuyAlert* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_QuickBuyAlert::InternalSwap(CDOTAUserMsg_QuickBuyAlert* other) {
  std::swap(player_id_, other->player_id_);
  std::swap(itemid_, other->itemid_);
  std::swap(gold_required_, other->gold_required_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_QuickBuyAlert::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_QuickBuyAlert

// optional int32 player_id = 1;
bool CDOTAUserMsg_QuickBuyAlert::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_QuickBuyAlert::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_QuickBuyAlert::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_QuickBuyAlert::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
::google::protobuf::int32 CDOTAUserMsg_QuickBuyAlert::player_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_QuickBuyAlert.player_id)
  return player_id_;
}
void CDOTAUserMsg_QuickBuyAlert::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_QuickBuyAlert.player_id)
}

// optional int32 itemid = 2;
bool CDOTAUserMsg_QuickBuyAlert::has_itemid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAUserMsg_QuickBuyAlert::set_has_itemid() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAUserMsg_QuickBuyAlert::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAUserMsg_QuickBuyAlert::clear_itemid() {
  itemid_ = 0;
  clear_has_itemid();
}
::google::protobuf::int32 CDOTAUserMsg_QuickBuyAlert::itemid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_QuickBuyAlert.itemid)
  return itemid_;
}
void CDOTAUserMsg_QuickBuyAlert::set_itemid(::google::protobuf::int32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_QuickBuyAlert.itemid)
}

// optional int32 gold_required = 3;
bool CDOTAUserMsg_QuickBuyAlert::has_gold_required() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDOTAUserMsg_QuickBuyAlert::set_has_gold_required() {
  _has_bits_[0] |= 0x00000004u;
}
void CDOTAUserMsg_QuickBuyAlert::clear_has_gold_required() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDOTAUserMsg_QuickBuyAlert::clear_gold_required() {
  gold_required_ = 0;
  clear_has_gold_required();
}
::google::protobuf::int32 CDOTAUserMsg_QuickBuyAlert::gold_required() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_QuickBuyAlert.gold_required)
  return gold_required_;
}
void CDOTAUserMsg_QuickBuyAlert::set_gold_required(::google::protobuf::int32 value) {
  set_has_gold_required();
  gold_required_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_QuickBuyAlert.gold_required)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_CourierKilledAlert_LostItem::kItemFieldNumber;
const int CDOTAUserMsg_CourierKilledAlert_LostItem::kQuantityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_CourierKilledAlert_LostItem::CDOTAUserMsg_CourierKilledAlert_LostItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_CourierKilledAlert.LostItem)
}
CDOTAUserMsg_CourierKilledAlert_LostItem::CDOTAUserMsg_CourierKilledAlert_LostItem(const CDOTAUserMsg_CourierKilledAlert_LostItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&item_, &from.item_,
    reinterpret_cast<char*>(&quantity_) -
    reinterpret_cast<char*>(&item_) + sizeof(quantity_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_CourierKilledAlert.LostItem)
}

void CDOTAUserMsg_CourierKilledAlert_LostItem::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&item_, 0, reinterpret_cast<char*>(&quantity_) -
    reinterpret_cast<char*>(&item_) + sizeof(quantity_));
}

CDOTAUserMsg_CourierKilledAlert_LostItem::~CDOTAUserMsg_CourierKilledAlert_LostItem() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_CourierKilledAlert.LostItem)
  SharedDtor();
}

void CDOTAUserMsg_CourierKilledAlert_LostItem::SharedDtor() {
}

void CDOTAUserMsg_CourierKilledAlert_LostItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_CourierKilledAlert_LostItem::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_CourierKilledAlert_LostItem& CDOTAUserMsg_CourierKilledAlert_LostItem::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_CourierKilledAlert_LostItem* CDOTAUserMsg_CourierKilledAlert_LostItem::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_CourierKilledAlert_LostItem* n = new CDOTAUserMsg_CourierKilledAlert_LostItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_CourierKilledAlert_LostItem::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_CourierKilledAlert.LostItem)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&item_, 0, reinterpret_cast<char*>(&quantity_) -
      reinterpret_cast<char*>(&item_) + sizeof(quantity_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_CourierKilledAlert_LostItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_CourierKilledAlert.LostItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 item = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_item();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 quantity = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_quantity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quantity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_CourierKilledAlert.LostItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_CourierKilledAlert.LostItem)
  return false;
#undef DO_
}

void CDOTAUserMsg_CourierKilledAlert_LostItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_CourierKilledAlert.LostItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 item = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->item(), output);
  }

  // optional uint32 quantity = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->quantity(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_CourierKilledAlert.LostItem)
}

::google::protobuf::uint8* CDOTAUserMsg_CourierKilledAlert_LostItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_CourierKilledAlert.LostItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 item = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->item(), target);
  }

  // optional uint32 quantity = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->quantity(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_CourierKilledAlert.LostItem)
  return target;
}

size_t CDOTAUserMsg_CourierKilledAlert_LostItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_CourierKilledAlert.LostItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 item = 1;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item());
    }

    // optional uint32 quantity = 2;
    if (has_quantity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quantity());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_CourierKilledAlert_LostItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_CourierKilledAlert.LostItem)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_CourierKilledAlert_LostItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_CourierKilledAlert_LostItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_CourierKilledAlert.LostItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_CourierKilledAlert.LostItem)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_CourierKilledAlert_LostItem::MergeFrom(const CDOTAUserMsg_CourierKilledAlert_LostItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_CourierKilledAlert.LostItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      item_ = from.item_;
    }
    if (cached_has_bits & 0x00000002u) {
      quantity_ = from.quantity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_CourierKilledAlert_LostItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_CourierKilledAlert.LostItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_CourierKilledAlert_LostItem::CopyFrom(const CDOTAUserMsg_CourierKilledAlert_LostItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_CourierKilledAlert.LostItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_CourierKilledAlert_LostItem::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_CourierKilledAlert_LostItem::Swap(CDOTAUserMsg_CourierKilledAlert_LostItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_CourierKilledAlert_LostItem::InternalSwap(CDOTAUserMsg_CourierKilledAlert_LostItem* other) {
  std::swap(item_, other->item_);
  std::swap(quantity_, other->quantity_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_CourierKilledAlert_LostItem::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_CourierKilledAlert_LostItem

// optional int32 item = 1;
bool CDOTAUserMsg_CourierKilledAlert_LostItem::has_item() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_CourierKilledAlert_LostItem::set_has_item() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_CourierKilledAlert_LostItem::clear_has_item() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_CourierKilledAlert_LostItem::clear_item() {
  item_ = 0;
  clear_has_item();
}
::google::protobuf::int32 CDOTAUserMsg_CourierKilledAlert_LostItem::item() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_CourierKilledAlert.LostItem.item)
  return item_;
}
void CDOTAUserMsg_CourierKilledAlert_LostItem::set_item(::google::protobuf::int32 value) {
  set_has_item();
  item_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_CourierKilledAlert.LostItem.item)
}

// optional uint32 quantity = 2;
bool CDOTAUserMsg_CourierKilledAlert_LostItem::has_quantity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAUserMsg_CourierKilledAlert_LostItem::set_has_quantity() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAUserMsg_CourierKilledAlert_LostItem::clear_has_quantity() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAUserMsg_CourierKilledAlert_LostItem::clear_quantity() {
  quantity_ = 0u;
  clear_has_quantity();
}
::google::protobuf::uint32 CDOTAUserMsg_CourierKilledAlert_LostItem::quantity() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_CourierKilledAlert.LostItem.quantity)
  return quantity_;
}
void CDOTAUserMsg_CourierKilledAlert_LostItem::set_quantity(::google::protobuf::uint32 value) {
  set_has_quantity();
  quantity_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_CourierKilledAlert.LostItem.quantity)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_CourierKilledAlert::kTeamFieldNumber;
const int CDOTAUserMsg_CourierKilledAlert::kGoldValueFieldNumber;
const int CDOTAUserMsg_CourierKilledAlert::kEntityHandleFieldNumber;
const int CDOTAUserMsg_CourierKilledAlert::kTimestampFieldNumber;
const int CDOTAUserMsg_CourierKilledAlert::kLostItemsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_CourierKilledAlert::CDOTAUserMsg_CourierKilledAlert()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_CourierKilledAlert)
}
CDOTAUserMsg_CourierKilledAlert::CDOTAUserMsg_CourierKilledAlert(const CDOTAUserMsg_CourierKilledAlert& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      lost_items_(from.lost_items_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&team_, &from.team_,
    reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&team_) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_CourierKilledAlert)
}

void CDOTAUserMsg_CourierKilledAlert::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&team_, 0, reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&team_) + sizeof(timestamp_));
}

CDOTAUserMsg_CourierKilledAlert::~CDOTAUserMsg_CourierKilledAlert() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_CourierKilledAlert)
  SharedDtor();
}

void CDOTAUserMsg_CourierKilledAlert::SharedDtor() {
}

void CDOTAUserMsg_CourierKilledAlert::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_CourierKilledAlert::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_CourierKilledAlert& CDOTAUserMsg_CourierKilledAlert::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_CourierKilledAlert* CDOTAUserMsg_CourierKilledAlert::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_CourierKilledAlert* n = new CDOTAUserMsg_CourierKilledAlert;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_CourierKilledAlert::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_CourierKilledAlert)
  lost_items_.Clear();
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&team_, 0, reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&team_) + sizeof(timestamp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_CourierKilledAlert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_CourierKilledAlert)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 team = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_team();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 gold_value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_gold_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gold_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 entity_handle = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_entity_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entity_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 timestamp = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CDOTAUserMsg_CourierKilledAlert.LostItem lost_items = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lost_items()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_CourierKilledAlert)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_CourierKilledAlert)
  return false;
#undef DO_
}

void CDOTAUserMsg_CourierKilledAlert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_CourierKilledAlert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 team = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->team(), output);
  }

  // optional uint32 gold_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gold_value(), output);
  }

  // optional int32 entity_handle = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->entity_handle(), output);
  }

  // optional int32 timestamp = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->timestamp(), output);
  }

  // repeated .proto.dota.CDOTAUserMsg_CourierKilledAlert.LostItem lost_items = 5;
  for (unsigned int i = 0, n = this->lost_items_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->lost_items(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_CourierKilledAlert)
}

::google::protobuf::uint8* CDOTAUserMsg_CourierKilledAlert::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_CourierKilledAlert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 team = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->team(), target);
  }

  // optional uint32 gold_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gold_value(), target);
  }

  // optional int32 entity_handle = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->entity_handle(), target);
  }

  // optional int32 timestamp = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->timestamp(), target);
  }

  // repeated .proto.dota.CDOTAUserMsg_CourierKilledAlert.LostItem lost_items = 5;
  for (unsigned int i = 0, n = this->lost_items_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->lost_items(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_CourierKilledAlert)
  return target;
}

size_t CDOTAUserMsg_CourierKilledAlert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_CourierKilledAlert)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CDOTAUserMsg_CourierKilledAlert.LostItem lost_items = 5;
  {
    unsigned int count = this->lost_items_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lost_items(i));
    }
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional uint32 team = 1;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team());
    }

    // optional uint32 gold_value = 2;
    if (has_gold_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gold_value());
    }

    // optional int32 entity_handle = 3;
    if (has_entity_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entity_handle());
    }

    // optional int32 timestamp = 4;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timestamp());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_CourierKilledAlert::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_CourierKilledAlert)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_CourierKilledAlert* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_CourierKilledAlert>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_CourierKilledAlert)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_CourierKilledAlert)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_CourierKilledAlert::MergeFrom(const CDOTAUserMsg_CourierKilledAlert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_CourierKilledAlert)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lost_items_.MergeFrom(from.lost_items_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      team_ = from.team_;
    }
    if (cached_has_bits & 0x00000002u) {
      gold_value_ = from.gold_value_;
    }
    if (cached_has_bits & 0x00000004u) {
      entity_handle_ = from.entity_handle_;
    }
    if (cached_has_bits & 0x00000008u) {
      timestamp_ = from.timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_CourierKilledAlert::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_CourierKilledAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_CourierKilledAlert::CopyFrom(const CDOTAUserMsg_CourierKilledAlert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_CourierKilledAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_CourierKilledAlert::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_CourierKilledAlert::Swap(CDOTAUserMsg_CourierKilledAlert* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_CourierKilledAlert::InternalSwap(CDOTAUserMsg_CourierKilledAlert* other) {
  lost_items_.InternalSwap(&other->lost_items_);
  std::swap(team_, other->team_);
  std::swap(gold_value_, other->gold_value_);
  std::swap(entity_handle_, other->entity_handle_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_CourierKilledAlert::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_CourierKilledAlert

// optional uint32 team = 1;
bool CDOTAUserMsg_CourierKilledAlert::has_team() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_CourierKilledAlert::set_has_team() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_CourierKilledAlert::clear_has_team() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_CourierKilledAlert::clear_team() {
  team_ = 0u;
  clear_has_team();
}
::google::protobuf::uint32 CDOTAUserMsg_CourierKilledAlert::team() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_CourierKilledAlert.team)
  return team_;
}
void CDOTAUserMsg_CourierKilledAlert::set_team(::google::protobuf::uint32 value) {
  set_has_team();
  team_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_CourierKilledAlert.team)
}

// optional uint32 gold_value = 2;
bool CDOTAUserMsg_CourierKilledAlert::has_gold_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAUserMsg_CourierKilledAlert::set_has_gold_value() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAUserMsg_CourierKilledAlert::clear_has_gold_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAUserMsg_CourierKilledAlert::clear_gold_value() {
  gold_value_ = 0u;
  clear_has_gold_value();
}
::google::protobuf::uint32 CDOTAUserMsg_CourierKilledAlert::gold_value() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_CourierKilledAlert.gold_value)
  return gold_value_;
}
void CDOTAUserMsg_CourierKilledAlert::set_gold_value(::google::protobuf::uint32 value) {
  set_has_gold_value();
  gold_value_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_CourierKilledAlert.gold_value)
}

// optional int32 entity_handle = 3;
bool CDOTAUserMsg_CourierKilledAlert::has_entity_handle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDOTAUserMsg_CourierKilledAlert::set_has_entity_handle() {
  _has_bits_[0] |= 0x00000004u;
}
void CDOTAUserMsg_CourierKilledAlert::clear_has_entity_handle() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDOTAUserMsg_CourierKilledAlert::clear_entity_handle() {
  entity_handle_ = 0;
  clear_has_entity_handle();
}
::google::protobuf::int32 CDOTAUserMsg_CourierKilledAlert::entity_handle() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_CourierKilledAlert.entity_handle)
  return entity_handle_;
}
void CDOTAUserMsg_CourierKilledAlert::set_entity_handle(::google::protobuf::int32 value) {
  set_has_entity_handle();
  entity_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_CourierKilledAlert.entity_handle)
}

// optional int32 timestamp = 4;
bool CDOTAUserMsg_CourierKilledAlert::has_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CDOTAUserMsg_CourierKilledAlert::set_has_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
void CDOTAUserMsg_CourierKilledAlert::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
void CDOTAUserMsg_CourierKilledAlert::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
::google::protobuf::int32 CDOTAUserMsg_CourierKilledAlert::timestamp() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_CourierKilledAlert.timestamp)
  return timestamp_;
}
void CDOTAUserMsg_CourierKilledAlert::set_timestamp(::google::protobuf::int32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_CourierKilledAlert.timestamp)
}

// repeated .proto.dota.CDOTAUserMsg_CourierKilledAlert.LostItem lost_items = 5;
int CDOTAUserMsg_CourierKilledAlert::lost_items_size() const {
  return lost_items_.size();
}
void CDOTAUserMsg_CourierKilledAlert::clear_lost_items() {
  lost_items_.Clear();
}
const ::proto::dota::CDOTAUserMsg_CourierKilledAlert_LostItem& CDOTAUserMsg_CourierKilledAlert::lost_items(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_CourierKilledAlert.lost_items)
  return lost_items_.Get(index);
}
::proto::dota::CDOTAUserMsg_CourierKilledAlert_LostItem* CDOTAUserMsg_CourierKilledAlert::mutable_lost_items(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_CourierKilledAlert.lost_items)
  return lost_items_.Mutable(index);
}
::proto::dota::CDOTAUserMsg_CourierKilledAlert_LostItem* CDOTAUserMsg_CourierKilledAlert::add_lost_items() {
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAUserMsg_CourierKilledAlert.lost_items)
  return lost_items_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAUserMsg_CourierKilledAlert_LostItem >*
CDOTAUserMsg_CourierKilledAlert::mutable_lost_items() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTAUserMsg_CourierKilledAlert.lost_items)
  return &lost_items_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAUserMsg_CourierKilledAlert_LostItem >&
CDOTAUserMsg_CourierKilledAlert::lost_items() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTAUserMsg_CourierKilledAlert.lost_items)
  return lost_items_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_MinimapEvent::kEventTypeFieldNumber;
const int CDOTAUserMsg_MinimapEvent::kEntityHandleFieldNumber;
const int CDOTAUserMsg_MinimapEvent::kXFieldNumber;
const int CDOTAUserMsg_MinimapEvent::kYFieldNumber;
const int CDOTAUserMsg_MinimapEvent::kDurationFieldNumber;
const int CDOTAUserMsg_MinimapEvent::kTargetEntityHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_MinimapEvent::CDOTAUserMsg_MinimapEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_MinimapEvent)
}
CDOTAUserMsg_MinimapEvent::CDOTAUserMsg_MinimapEvent(const CDOTAUserMsg_MinimapEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&event_type_, &from.event_type_,
    reinterpret_cast<char*>(&target_entity_handle_) -
    reinterpret_cast<char*>(&event_type_) + sizeof(target_entity_handle_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_MinimapEvent)
}

void CDOTAUserMsg_MinimapEvent::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&event_type_, 0, reinterpret_cast<char*>(&target_entity_handle_) -
    reinterpret_cast<char*>(&event_type_) + sizeof(target_entity_handle_));
}

CDOTAUserMsg_MinimapEvent::~CDOTAUserMsg_MinimapEvent() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_MinimapEvent)
  SharedDtor();
}

void CDOTAUserMsg_MinimapEvent::SharedDtor() {
}

void CDOTAUserMsg_MinimapEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_MinimapEvent::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_MinimapEvent& CDOTAUserMsg_MinimapEvent::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_MinimapEvent* CDOTAUserMsg_MinimapEvent::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_MinimapEvent* n = new CDOTAUserMsg_MinimapEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_MinimapEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_MinimapEvent)
  if (_has_bits_[0 / 32] & 63u) {
    ::memset(&event_type_, 0, reinterpret_cast<char*>(&target_entity_handle_) -
      reinterpret_cast<char*>(&event_type_) + sizeof(target_entity_handle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_MinimapEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_MinimapEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 event_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_event_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 entity_handle = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_entity_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entity_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 x = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 y = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 duration = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_duration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 target_entity_handle = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_target_entity_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_entity_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_MinimapEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_MinimapEvent)
  return false;
#undef DO_
}

void CDOTAUserMsg_MinimapEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_MinimapEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 event_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->event_type(), output);
  }

  // optional int32 entity_handle = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->entity_handle(), output);
  }

  // optional int32 x = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->x(), output);
  }

  // optional int32 y = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->y(), output);
  }

  // optional int32 duration = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->duration(), output);
  }

  // optional int32 target_entity_handle = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->target_entity_handle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_MinimapEvent)
}

::google::protobuf::uint8* CDOTAUserMsg_MinimapEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_MinimapEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 event_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->event_type(), target);
  }

  // optional int32 entity_handle = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->entity_handle(), target);
  }

  // optional int32 x = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->x(), target);
  }

  // optional int32 y = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->y(), target);
  }

  // optional int32 duration = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->duration(), target);
  }

  // optional int32 target_entity_handle = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->target_entity_handle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_MinimapEvent)
  return target;
}

size_t CDOTAUserMsg_MinimapEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_MinimapEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional int32 event_type = 1;
    if (has_event_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->event_type());
    }

    // optional int32 entity_handle = 2;
    if (has_entity_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entity_handle());
    }

    // optional int32 x = 3;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // optional int32 y = 4;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

    // optional int32 duration = 5;
    if (has_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->duration());
    }

    // optional int32 target_entity_handle = 6;
    if (has_target_entity_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->target_entity_handle());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_MinimapEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_MinimapEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_MinimapEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_MinimapEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_MinimapEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_MinimapEvent)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_MinimapEvent::MergeFrom(const CDOTAUserMsg_MinimapEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_MinimapEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      event_type_ = from.event_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      entity_handle_ = from.entity_handle_;
    }
    if (cached_has_bits & 0x00000004u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000008u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000010u) {
      duration_ = from.duration_;
    }
    if (cached_has_bits & 0x00000020u) {
      target_entity_handle_ = from.target_entity_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_MinimapEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_MinimapEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_MinimapEvent::CopyFrom(const CDOTAUserMsg_MinimapEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_MinimapEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_MinimapEvent::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_MinimapEvent::Swap(CDOTAUserMsg_MinimapEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_MinimapEvent::InternalSwap(CDOTAUserMsg_MinimapEvent* other) {
  std::swap(event_type_, other->event_type_);
  std::swap(entity_handle_, other->entity_handle_);
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(duration_, other->duration_);
  std::swap(target_entity_handle_, other->target_entity_handle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_MinimapEvent::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_MinimapEvent

// optional int32 event_type = 1;
bool CDOTAUserMsg_MinimapEvent::has_event_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_MinimapEvent::set_has_event_type() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_MinimapEvent::clear_has_event_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_MinimapEvent::clear_event_type() {
  event_type_ = 0;
  clear_has_event_type();
}
::google::protobuf::int32 CDOTAUserMsg_MinimapEvent::event_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_MinimapEvent.event_type)
  return event_type_;
}
void CDOTAUserMsg_MinimapEvent::set_event_type(::google::protobuf::int32 value) {
  set_has_event_type();
  event_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_MinimapEvent.event_type)
}

// optional int32 entity_handle = 2;
bool CDOTAUserMsg_MinimapEvent::has_entity_handle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAUserMsg_MinimapEvent::set_has_entity_handle() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAUserMsg_MinimapEvent::clear_has_entity_handle() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAUserMsg_MinimapEvent::clear_entity_handle() {
  entity_handle_ = 0;
  clear_has_entity_handle();
}
::google::protobuf::int32 CDOTAUserMsg_MinimapEvent::entity_handle() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_MinimapEvent.entity_handle)
  return entity_handle_;
}
void CDOTAUserMsg_MinimapEvent::set_entity_handle(::google::protobuf::int32 value) {
  set_has_entity_handle();
  entity_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_MinimapEvent.entity_handle)
}

// optional int32 x = 3;
bool CDOTAUserMsg_MinimapEvent::has_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDOTAUserMsg_MinimapEvent::set_has_x() {
  _has_bits_[0] |= 0x00000004u;
}
void CDOTAUserMsg_MinimapEvent::clear_has_x() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDOTAUserMsg_MinimapEvent::clear_x() {
  x_ = 0;
  clear_has_x();
}
::google::protobuf::int32 CDOTAUserMsg_MinimapEvent::x() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_MinimapEvent.x)
  return x_;
}
void CDOTAUserMsg_MinimapEvent::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_MinimapEvent.x)
}

// optional int32 y = 4;
bool CDOTAUserMsg_MinimapEvent::has_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CDOTAUserMsg_MinimapEvent::set_has_y() {
  _has_bits_[0] |= 0x00000008u;
}
void CDOTAUserMsg_MinimapEvent::clear_has_y() {
  _has_bits_[0] &= ~0x00000008u;
}
void CDOTAUserMsg_MinimapEvent::clear_y() {
  y_ = 0;
  clear_has_y();
}
::google::protobuf::int32 CDOTAUserMsg_MinimapEvent::y() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_MinimapEvent.y)
  return y_;
}
void CDOTAUserMsg_MinimapEvent::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_MinimapEvent.y)
}

// optional int32 duration = 5;
bool CDOTAUserMsg_MinimapEvent::has_duration() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CDOTAUserMsg_MinimapEvent::set_has_duration() {
  _has_bits_[0] |= 0x00000010u;
}
void CDOTAUserMsg_MinimapEvent::clear_has_duration() {
  _has_bits_[0] &= ~0x00000010u;
}
void CDOTAUserMsg_MinimapEvent::clear_duration() {
  duration_ = 0;
  clear_has_duration();
}
::google::protobuf::int32 CDOTAUserMsg_MinimapEvent::duration() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_MinimapEvent.duration)
  return duration_;
}
void CDOTAUserMsg_MinimapEvent::set_duration(::google::protobuf::int32 value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_MinimapEvent.duration)
}

// optional int32 target_entity_handle = 6;
bool CDOTAUserMsg_MinimapEvent::has_target_entity_handle() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CDOTAUserMsg_MinimapEvent::set_has_target_entity_handle() {
  _has_bits_[0] |= 0x00000020u;
}
void CDOTAUserMsg_MinimapEvent::clear_has_target_entity_handle() {
  _has_bits_[0] &= ~0x00000020u;
}
void CDOTAUserMsg_MinimapEvent::clear_target_entity_handle() {
  target_entity_handle_ = 0;
  clear_has_target_entity_handle();
}
::google::protobuf::int32 CDOTAUserMsg_MinimapEvent::target_entity_handle() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_MinimapEvent.target_entity_handle)
  return target_entity_handle_;
}
void CDOTAUserMsg_MinimapEvent::set_target_entity_handle(::google::protobuf::int32 value) {
  set_has_target_entity_handle();
  target_entity_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_MinimapEvent.target_entity_handle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_MapLine::kPlayerIdFieldNumber;
const int CDOTAUserMsg_MapLine::kMaplineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_MapLine::CDOTAUserMsg_MapLine()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_MapLine)
}
CDOTAUserMsg_MapLine::CDOTAUserMsg_MapLine(const CDOTAUserMsg_MapLine& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_mapline()) {
    mapline_ = new ::proto::dota::CDOTAMsg_MapLine(*from.mapline_);
  } else {
    mapline_ = NULL;
  }
  player_id_ = from.player_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_MapLine)
}

void CDOTAUserMsg_MapLine::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&mapline_, 0, reinterpret_cast<char*>(&player_id_) -
    reinterpret_cast<char*>(&mapline_) + sizeof(player_id_));
}

CDOTAUserMsg_MapLine::~CDOTAUserMsg_MapLine() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_MapLine)
  SharedDtor();
}

void CDOTAUserMsg_MapLine::SharedDtor() {
  if (this != internal_default_instance()) {
    delete mapline_;
  }
}

void CDOTAUserMsg_MapLine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_MapLine::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_MapLine& CDOTAUserMsg_MapLine::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_MapLine* CDOTAUserMsg_MapLine::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_MapLine* n = new CDOTAUserMsg_MapLine;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_MapLine::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_MapLine)
  if (has_mapline()) {
    GOOGLE_DCHECK(mapline_ != NULL);
    mapline_->::proto::dota::CDOTAMsg_MapLine::Clear();
  }
  player_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_MapLine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_MapLine)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_player_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CDOTAMsg_MapLine mapline = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mapline()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_MapLine)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_MapLine)
  return false;
#undef DO_
}

void CDOTAUserMsg_MapLine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_MapLine)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 player_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player_id(), output);
  }

  // optional .proto.dota.CDOTAMsg_MapLine mapline = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->mapline_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_MapLine)
}

::google::protobuf::uint8* CDOTAUserMsg_MapLine::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_MapLine)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 player_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player_id(), target);
  }

  // optional .proto.dota.CDOTAMsg_MapLine mapline = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->mapline_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_MapLine)
  return target;
}

size_t CDOTAUserMsg_MapLine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_MapLine)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .proto.dota.CDOTAMsg_MapLine mapline = 2;
    if (has_mapline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->mapline_);
    }

    // optional int32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_MapLine::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_MapLine)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_MapLine* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_MapLine>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_MapLine)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_MapLine)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_MapLine::MergeFrom(const CDOTAUserMsg_MapLine& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_MapLine)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_mapline()->::proto::dota::CDOTAMsg_MapLine::MergeFrom(from.mapline());
    }
    if (cached_has_bits & 0x00000002u) {
      player_id_ = from.player_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_MapLine::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_MapLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_MapLine::CopyFrom(const CDOTAUserMsg_MapLine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_MapLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_MapLine::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_MapLine::Swap(CDOTAUserMsg_MapLine* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_MapLine::InternalSwap(CDOTAUserMsg_MapLine* other) {
  std::swap(mapline_, other->mapline_);
  std::swap(player_id_, other->player_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_MapLine::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_MapLine

// optional int32 player_id = 1;
bool CDOTAUserMsg_MapLine::has_player_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAUserMsg_MapLine::set_has_player_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAUserMsg_MapLine::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAUserMsg_MapLine::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
::google::protobuf::int32 CDOTAUserMsg_MapLine::player_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_MapLine.player_id)
  return player_id_;
}
void CDOTAUserMsg_MapLine::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_MapLine.player_id)
}

// optional .proto.dota.CDOTAMsg_MapLine mapline = 2;
bool CDOTAUserMsg_MapLine::has_mapline() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_MapLine::set_has_mapline() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_MapLine::clear_has_mapline() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_MapLine::clear_mapline() {
  if (mapline_ != NULL) mapline_->::proto::dota::CDOTAMsg_MapLine::Clear();
  clear_has_mapline();
}
const ::proto::dota::CDOTAMsg_MapLine& CDOTAUserMsg_MapLine::mapline() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_MapLine.mapline)
  return mapline_ != NULL ? *mapline_
                         : *::proto::dota::CDOTAMsg_MapLine::internal_default_instance();
}
::proto::dota::CDOTAMsg_MapLine* CDOTAUserMsg_MapLine::mutable_mapline() {
  set_has_mapline();
  if (mapline_ == NULL) {
    mapline_ = new ::proto::dota::CDOTAMsg_MapLine;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_MapLine.mapline)
  return mapline_;
}
::proto::dota::CDOTAMsg_MapLine* CDOTAUserMsg_MapLine::release_mapline() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAUserMsg_MapLine.mapline)
  clear_has_mapline();
  ::proto::dota::CDOTAMsg_MapLine* temp = mapline_;
  mapline_ = NULL;
  return temp;
}
void CDOTAUserMsg_MapLine::set_allocated_mapline(::proto::dota::CDOTAMsg_MapLine* mapline) {
  delete mapline_;
  mapline_ = mapline;
  if (mapline) {
    set_has_mapline();
  } else {
    clear_has_mapline();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAUserMsg_MapLine.mapline)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_MinimapDebugPoint::kLocationFieldNumber;
const int CDOTAUserMsg_MinimapDebugPoint::kColorFieldNumber;
const int CDOTAUserMsg_MinimapDebugPoint::kSizeFieldNumber;
const int CDOTAUserMsg_MinimapDebugPoint::kDurationFieldNumber;
const int CDOTAUserMsg_MinimapDebugPoint::kIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_MinimapDebugPoint::CDOTAUserMsg_MinimapDebugPoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_MinimapDebugPoint)
}
CDOTAUserMsg_MinimapDebugPoint::CDOTAUserMsg_MinimapDebugPoint(const CDOTAUserMsg_MinimapDebugPoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_location()) {
    location_ = new ::proto::dota::CMsgVector(*from.location_);
  } else {
    location_ = NULL;
  }
  ::memcpy(&color_, &from.color_,
    reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&color_) + sizeof(index_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_MinimapDebugPoint)
}

void CDOTAUserMsg_MinimapDebugPoint::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&location_, 0, reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&location_) + sizeof(index_));
}

CDOTAUserMsg_MinimapDebugPoint::~CDOTAUserMsg_MinimapDebugPoint() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_MinimapDebugPoint)
  SharedDtor();
}

void CDOTAUserMsg_MinimapDebugPoint::SharedDtor() {
  if (this != internal_default_instance()) {
    delete location_;
  }
}

void CDOTAUserMsg_MinimapDebugPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_MinimapDebugPoint::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_MinimapDebugPoint& CDOTAUserMsg_MinimapDebugPoint::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_MinimapDebugPoint* CDOTAUserMsg_MinimapDebugPoint::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_MinimapDebugPoint* n = new CDOTAUserMsg_MinimapDebugPoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_MinimapDebugPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_MinimapDebugPoint)
  if (has_location()) {
    GOOGLE_DCHECK(location_ != NULL);
    location_->::proto::dota::CMsgVector::Clear();
  }
  if (_has_bits_[0 / 32] & 30u) {
    ::memset(&color_, 0, reinterpret_cast<char*>(&index_) -
      reinterpret_cast<char*>(&color_) + sizeof(index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_MinimapDebugPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_MinimapDebugPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgVector location = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 color = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_color();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &color_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 size = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float duration = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_duration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 index = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_MinimapDebugPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_MinimapDebugPoint)
  return false;
#undef DO_
}

void CDOTAUserMsg_MinimapDebugPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_MinimapDebugPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgVector location = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->location_, output);
  }

  // optional uint32 color = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->color(), output);
  }

  // optional int32 size = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->size(), output);
  }

  // optional float duration = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->duration(), output);
  }

  // optional int32 index = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_MinimapDebugPoint)
}

::google::protobuf::uint8* CDOTAUserMsg_MinimapDebugPoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_MinimapDebugPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgVector location = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->location_, deterministic, target);
  }

  // optional uint32 color = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->color(), target);
  }

  // optional int32 size = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->size(), target);
  }

  // optional float duration = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->duration(), target);
  }

  // optional int32 index = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_MinimapDebugPoint)
  return target;
}

size_t CDOTAUserMsg_MinimapDebugPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_MinimapDebugPoint)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional .proto.dota.CMsgVector location = 1;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->location_);
    }

    // optional uint32 color = 2;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->color());
    }

    // optional int32 size = 3;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }

    // optional float duration = 4;
    if (has_duration()) {
      total_size += 1 + 4;
    }

    // optional int32 index = 5;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_MinimapDebugPoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_MinimapDebugPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_MinimapDebugPoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_MinimapDebugPoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_MinimapDebugPoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_MinimapDebugPoint)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_MinimapDebugPoint::MergeFrom(const CDOTAUserMsg_MinimapDebugPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_MinimapDebugPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_location()->::proto::dota::CMsgVector::MergeFrom(from.location());
    }
    if (cached_has_bits & 0x00000002u) {
      color_ = from.color_;
    }
    if (cached_has_bits & 0x00000004u) {
      size_ = from.size_;
    }
    if (cached_has_bits & 0x00000008u) {
      duration_ = from.duration_;
    }
    if (cached_has_bits & 0x00000010u) {
      index_ = from.index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_MinimapDebugPoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_MinimapDebugPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_MinimapDebugPoint::CopyFrom(const CDOTAUserMsg_MinimapDebugPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_MinimapDebugPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_MinimapDebugPoint::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_MinimapDebugPoint::Swap(CDOTAUserMsg_MinimapDebugPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_MinimapDebugPoint::InternalSwap(CDOTAUserMsg_MinimapDebugPoint* other) {
  std::swap(location_, other->location_);
  std::swap(color_, other->color_);
  std::swap(size_, other->size_);
  std::swap(duration_, other->duration_);
  std::swap(index_, other->index_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_MinimapDebugPoint::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_MinimapDebugPoint

// optional .proto.dota.CMsgVector location = 1;
bool CDOTAUserMsg_MinimapDebugPoint::has_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_MinimapDebugPoint::set_has_location() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_MinimapDebugPoint::clear_has_location() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_MinimapDebugPoint::clear_location() {
  if (location_ != NULL) location_->::proto::dota::CMsgVector::Clear();
  clear_has_location();
}
const ::proto::dota::CMsgVector& CDOTAUserMsg_MinimapDebugPoint::location() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_MinimapDebugPoint.location)
  return location_ != NULL ? *location_
                         : *::proto::dota::CMsgVector::internal_default_instance();
}
::proto::dota::CMsgVector* CDOTAUserMsg_MinimapDebugPoint::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    location_ = new ::proto::dota::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_MinimapDebugPoint.location)
  return location_;
}
::proto::dota::CMsgVector* CDOTAUserMsg_MinimapDebugPoint::release_location() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAUserMsg_MinimapDebugPoint.location)
  clear_has_location();
  ::proto::dota::CMsgVector* temp = location_;
  location_ = NULL;
  return temp;
}
void CDOTAUserMsg_MinimapDebugPoint::set_allocated_location(::proto::dota::CMsgVector* location) {
  delete location_;
  location_ = location;
  if (location) {
    set_has_location();
  } else {
    clear_has_location();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAUserMsg_MinimapDebugPoint.location)
}

// optional uint32 color = 2;
bool CDOTAUserMsg_MinimapDebugPoint::has_color() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAUserMsg_MinimapDebugPoint::set_has_color() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAUserMsg_MinimapDebugPoint::clear_has_color() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAUserMsg_MinimapDebugPoint::clear_color() {
  color_ = 0u;
  clear_has_color();
}
::google::protobuf::uint32 CDOTAUserMsg_MinimapDebugPoint::color() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_MinimapDebugPoint.color)
  return color_;
}
void CDOTAUserMsg_MinimapDebugPoint::set_color(::google::protobuf::uint32 value) {
  set_has_color();
  color_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_MinimapDebugPoint.color)
}

// optional int32 size = 3;
bool CDOTAUserMsg_MinimapDebugPoint::has_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDOTAUserMsg_MinimapDebugPoint::set_has_size() {
  _has_bits_[0] |= 0x00000004u;
}
void CDOTAUserMsg_MinimapDebugPoint::clear_has_size() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDOTAUserMsg_MinimapDebugPoint::clear_size() {
  size_ = 0;
  clear_has_size();
}
::google::protobuf::int32 CDOTAUserMsg_MinimapDebugPoint::size() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_MinimapDebugPoint.size)
  return size_;
}
void CDOTAUserMsg_MinimapDebugPoint::set_size(::google::protobuf::int32 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_MinimapDebugPoint.size)
}

// optional float duration = 4;
bool CDOTAUserMsg_MinimapDebugPoint::has_duration() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CDOTAUserMsg_MinimapDebugPoint::set_has_duration() {
  _has_bits_[0] |= 0x00000008u;
}
void CDOTAUserMsg_MinimapDebugPoint::clear_has_duration() {
  _has_bits_[0] &= ~0x00000008u;
}
void CDOTAUserMsg_MinimapDebugPoint::clear_duration() {
  duration_ = 0;
  clear_has_duration();
}
float CDOTAUserMsg_MinimapDebugPoint::duration() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_MinimapDebugPoint.duration)
  return duration_;
}
void CDOTAUserMsg_MinimapDebugPoint::set_duration(float value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_MinimapDebugPoint.duration)
}

// optional int32 index = 5;
bool CDOTAUserMsg_MinimapDebugPoint::has_index() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CDOTAUserMsg_MinimapDebugPoint::set_has_index() {
  _has_bits_[0] |= 0x00000010u;
}
void CDOTAUserMsg_MinimapDebugPoint::clear_has_index() {
  _has_bits_[0] &= ~0x00000010u;
}
void CDOTAUserMsg_MinimapDebugPoint::clear_index() {
  index_ = 0;
  clear_has_index();
}
::google::protobuf::int32 CDOTAUserMsg_MinimapDebugPoint::index() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_MinimapDebugPoint.index)
  return index_;
}
void CDOTAUserMsg_MinimapDebugPoint::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_MinimapDebugPoint.index)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_CreateLinearProjectile::kOriginFieldNumber;
const int CDOTAUserMsg_CreateLinearProjectile::kVelocityFieldNumber;
const int CDOTAUserMsg_CreateLinearProjectile::kEntindexFieldNumber;
const int CDOTAUserMsg_CreateLinearProjectile::kParticleIndexFieldNumber;
const int CDOTAUserMsg_CreateLinearProjectile::kHandleFieldNumber;
const int CDOTAUserMsg_CreateLinearProjectile::kAccelerationFieldNumber;
const int CDOTAUserMsg_CreateLinearProjectile::kMaxSpeedFieldNumber;
const int CDOTAUserMsg_CreateLinearProjectile::kFowRadiusFieldNumber;
const int CDOTAUserMsg_CreateLinearProjectile::kStickyFowRevealFieldNumber;
const int CDOTAUserMsg_CreateLinearProjectile::kDistanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_CreateLinearProjectile::CDOTAUserMsg_CreateLinearProjectile()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_CreateLinearProjectile)
}
CDOTAUserMsg_CreateLinearProjectile::CDOTAUserMsg_CreateLinearProjectile(const CDOTAUserMsg_CreateLinearProjectile& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_origin()) {
    origin_ = new ::proto::dota::CMsgVector(*from.origin_);
  } else {
    origin_ = NULL;
  }
  if (from.has_velocity()) {
    velocity_ = new ::proto::dota::CMsgVector2D(*from.velocity_);
  } else {
    velocity_ = NULL;
  }
  if (from.has_acceleration()) {
    acceleration_ = new ::proto::dota::CMsgVector2D(*from.acceleration_);
  } else {
    acceleration_ = NULL;
  }
  ::memcpy(&particle_index_, &from.particle_index_,
    reinterpret_cast<char*>(&distance_) -
    reinterpret_cast<char*>(&particle_index_) + sizeof(distance_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_CreateLinearProjectile)
}

void CDOTAUserMsg_CreateLinearProjectile::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&origin_, 0, reinterpret_cast<char*>(&distance_) -
    reinterpret_cast<char*>(&origin_) + sizeof(distance_));
}

CDOTAUserMsg_CreateLinearProjectile::~CDOTAUserMsg_CreateLinearProjectile() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_CreateLinearProjectile)
  SharedDtor();
}

void CDOTAUserMsg_CreateLinearProjectile::SharedDtor() {
  if (this != internal_default_instance()) {
    delete origin_;
  }
  if (this != internal_default_instance()) {
    delete velocity_;
  }
  if (this != internal_default_instance()) {
    delete acceleration_;
  }
}

void CDOTAUserMsg_CreateLinearProjectile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_CreateLinearProjectile::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_CreateLinearProjectile& CDOTAUserMsg_CreateLinearProjectile::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_CreateLinearProjectile* CDOTAUserMsg_CreateLinearProjectile::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_CreateLinearProjectile* n = new CDOTAUserMsg_CreateLinearProjectile;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_CreateLinearProjectile::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_CreateLinearProjectile)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_origin()) {
      GOOGLE_DCHECK(origin_ != NULL);
      origin_->::proto::dota::CMsgVector::Clear();
    }
    if (has_velocity()) {
      GOOGLE_DCHECK(velocity_ != NULL);
      velocity_->::proto::dota::CMsgVector2D::Clear();
    }
    if (has_acceleration()) {
      GOOGLE_DCHECK(acceleration_ != NULL);
      acceleration_->::proto::dota::CMsgVector2D::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 248u) {
    ::memset(&particle_index_, 0, reinterpret_cast<char*>(&fow_radius_) -
      reinterpret_cast<char*>(&particle_index_) + sizeof(fow_radius_));
  }
  if (_has_bits_[8 / 32] & 768u) {
    ::memset(&sticky_fow_reveal_, 0, reinterpret_cast<char*>(&distance_) -
      reinterpret_cast<char*>(&sticky_fow_reveal_) + sizeof(distance_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_CreateLinearProjectile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_CreateLinearProjectile)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgVector origin = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_origin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgVector2D velocity = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 entindex = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_entindex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 particle_index = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_particle_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &particle_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 handle = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgVector2D acceleration = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_acceleration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float max_speed = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u)) {
          set_has_max_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float fow_radius = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u)) {
          set_has_fow_radius();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fow_radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool sticky_fow_reveal = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_sticky_fow_reveal();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sticky_fow_reveal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float distance = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u)) {
          set_has_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_CreateLinearProjectile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_CreateLinearProjectile)
  return false;
#undef DO_
}

void CDOTAUserMsg_CreateLinearProjectile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_CreateLinearProjectile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgVector origin = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->origin_, output);
  }

  // optional .proto.dota.CMsgVector2D velocity = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->velocity_, output);
  }

  // optional int32 entindex = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->entindex(), output);
  }

  // optional uint64 particle_index = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->particle_index(), output);
  }

  // optional int32 handle = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->handle(), output);
  }

  // optional .proto.dota.CMsgVector2D acceleration = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->acceleration_, output);
  }

  // optional float max_speed = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->max_speed(), output);
  }

  // optional float fow_radius = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->fow_radius(), output);
  }

  // optional bool sticky_fow_reveal = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->sticky_fow_reveal(), output);
  }

  // optional float distance = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->distance(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_CreateLinearProjectile)
}

::google::protobuf::uint8* CDOTAUserMsg_CreateLinearProjectile::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_CreateLinearProjectile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgVector origin = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->origin_, deterministic, target);
  }

  // optional .proto.dota.CMsgVector2D velocity = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->velocity_, deterministic, target);
  }

  // optional int32 entindex = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->entindex(), target);
  }

  // optional uint64 particle_index = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->particle_index(), target);
  }

  // optional int32 handle = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->handle(), target);
  }

  // optional .proto.dota.CMsgVector2D acceleration = 7;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->acceleration_, deterministic, target);
  }

  // optional float max_speed = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->max_speed(), target);
  }

  // optional float fow_radius = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->fow_radius(), target);
  }

  // optional bool sticky_fow_reveal = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->sticky_fow_reveal(), target);
  }

  // optional float distance = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->distance(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_CreateLinearProjectile)
  return target;
}

size_t CDOTAUserMsg_CreateLinearProjectile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_CreateLinearProjectile)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .proto.dota.CMsgVector origin = 1;
    if (has_origin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->origin_);
    }

    // optional .proto.dota.CMsgVector2D velocity = 2;
    if (has_velocity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->velocity_);
    }

    // optional .proto.dota.CMsgVector2D acceleration = 7;
    if (has_acceleration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->acceleration_);
    }

    // optional uint64 particle_index = 5;
    if (has_particle_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->particle_index());
    }

    // optional int32 entindex = 4;
    if (has_entindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entindex());
    }

    // optional int32 handle = 6;
    if (has_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->handle());
    }

    // optional float max_speed = 8;
    if (has_max_speed()) {
      total_size += 1 + 4;
    }

    // optional float fow_radius = 9;
    if (has_fow_radius()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional bool sticky_fow_reveal = 10;
    if (has_sticky_fow_reveal()) {
      total_size += 1 + 1;
    }

    // optional float distance = 11;
    if (has_distance()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_CreateLinearProjectile::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_CreateLinearProjectile)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_CreateLinearProjectile* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_CreateLinearProjectile>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_CreateLinearProjectile)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_CreateLinearProjectile)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_CreateLinearProjectile::MergeFrom(const CDOTAUserMsg_CreateLinearProjectile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_CreateLinearProjectile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_origin()->::proto::dota::CMsgVector::MergeFrom(from.origin());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_velocity()->::proto::dota::CMsgVector2D::MergeFrom(from.velocity());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_acceleration()->::proto::dota::CMsgVector2D::MergeFrom(from.acceleration());
    }
    if (cached_has_bits & 0x00000008u) {
      particle_index_ = from.particle_index_;
    }
    if (cached_has_bits & 0x00000010u) {
      entindex_ = from.entindex_;
    }
    if (cached_has_bits & 0x00000020u) {
      handle_ = from.handle_;
    }
    if (cached_has_bits & 0x00000040u) {
      max_speed_ = from.max_speed_;
    }
    if (cached_has_bits & 0x00000080u) {
      fow_radius_ = from.fow_radius_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      sticky_fow_reveal_ = from.sticky_fow_reveal_;
    }
    if (cached_has_bits & 0x00000200u) {
      distance_ = from.distance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_CreateLinearProjectile::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_CreateLinearProjectile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_CreateLinearProjectile::CopyFrom(const CDOTAUserMsg_CreateLinearProjectile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_CreateLinearProjectile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_CreateLinearProjectile::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_CreateLinearProjectile::Swap(CDOTAUserMsg_CreateLinearProjectile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_CreateLinearProjectile::InternalSwap(CDOTAUserMsg_CreateLinearProjectile* other) {
  std::swap(origin_, other->origin_);
  std::swap(velocity_, other->velocity_);
  std::swap(acceleration_, other->acceleration_);
  std::swap(particle_index_, other->particle_index_);
  std::swap(entindex_, other->entindex_);
  std::swap(handle_, other->handle_);
  std::swap(max_speed_, other->max_speed_);
  std::swap(fow_radius_, other->fow_radius_);
  std::swap(sticky_fow_reveal_, other->sticky_fow_reveal_);
  std::swap(distance_, other->distance_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_CreateLinearProjectile::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_CreateLinearProjectile

// optional .proto.dota.CMsgVector origin = 1;
bool CDOTAUserMsg_CreateLinearProjectile::has_origin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_CreateLinearProjectile::set_has_origin() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_CreateLinearProjectile::clear_has_origin() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_CreateLinearProjectile::clear_origin() {
  if (origin_ != NULL) origin_->::proto::dota::CMsgVector::Clear();
  clear_has_origin();
}
const ::proto::dota::CMsgVector& CDOTAUserMsg_CreateLinearProjectile::origin() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_CreateLinearProjectile.origin)
  return origin_ != NULL ? *origin_
                         : *::proto::dota::CMsgVector::internal_default_instance();
}
::proto::dota::CMsgVector* CDOTAUserMsg_CreateLinearProjectile::mutable_origin() {
  set_has_origin();
  if (origin_ == NULL) {
    origin_ = new ::proto::dota::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_CreateLinearProjectile.origin)
  return origin_;
}
::proto::dota::CMsgVector* CDOTAUserMsg_CreateLinearProjectile::release_origin() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAUserMsg_CreateLinearProjectile.origin)
  clear_has_origin();
  ::proto::dota::CMsgVector* temp = origin_;
  origin_ = NULL;
  return temp;
}
void CDOTAUserMsg_CreateLinearProjectile::set_allocated_origin(::proto::dota::CMsgVector* origin) {
  delete origin_;
  origin_ = origin;
  if (origin) {
    set_has_origin();
  } else {
    clear_has_origin();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAUserMsg_CreateLinearProjectile.origin)
}

// optional .proto.dota.CMsgVector2D velocity = 2;
bool CDOTAUserMsg_CreateLinearProjectile::has_velocity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAUserMsg_CreateLinearProjectile::set_has_velocity() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAUserMsg_CreateLinearProjectile::clear_has_velocity() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAUserMsg_CreateLinearProjectile::clear_velocity() {
  if (velocity_ != NULL) velocity_->::proto::dota::CMsgVector2D::Clear();
  clear_has_velocity();
}
const ::proto::dota::CMsgVector2D& CDOTAUserMsg_CreateLinearProjectile::velocity() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_CreateLinearProjectile.velocity)
  return velocity_ != NULL ? *velocity_
                         : *::proto::dota::CMsgVector2D::internal_default_instance();
}
::proto::dota::CMsgVector2D* CDOTAUserMsg_CreateLinearProjectile::mutable_velocity() {
  set_has_velocity();
  if (velocity_ == NULL) {
    velocity_ = new ::proto::dota::CMsgVector2D;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_CreateLinearProjectile.velocity)
  return velocity_;
}
::proto::dota::CMsgVector2D* CDOTAUserMsg_CreateLinearProjectile::release_velocity() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAUserMsg_CreateLinearProjectile.velocity)
  clear_has_velocity();
  ::proto::dota::CMsgVector2D* temp = velocity_;
  velocity_ = NULL;
  return temp;
}
void CDOTAUserMsg_CreateLinearProjectile::set_allocated_velocity(::proto::dota::CMsgVector2D* velocity) {
  delete velocity_;
  velocity_ = velocity;
  if (velocity) {
    set_has_velocity();
  } else {
    clear_has_velocity();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAUserMsg_CreateLinearProjectile.velocity)
}

// optional int32 entindex = 4;
bool CDOTAUserMsg_CreateLinearProjectile::has_entindex() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CDOTAUserMsg_CreateLinearProjectile::set_has_entindex() {
  _has_bits_[0] |= 0x00000010u;
}
void CDOTAUserMsg_CreateLinearProjectile::clear_has_entindex() {
  _has_bits_[0] &= ~0x00000010u;
}
void CDOTAUserMsg_CreateLinearProjectile::clear_entindex() {
  entindex_ = 0;
  clear_has_entindex();
}
::google::protobuf::int32 CDOTAUserMsg_CreateLinearProjectile::entindex() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_CreateLinearProjectile.entindex)
  return entindex_;
}
void CDOTAUserMsg_CreateLinearProjectile::set_entindex(::google::protobuf::int32 value) {
  set_has_entindex();
  entindex_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_CreateLinearProjectile.entindex)
}

// optional uint64 particle_index = 5;
bool CDOTAUserMsg_CreateLinearProjectile::has_particle_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CDOTAUserMsg_CreateLinearProjectile::set_has_particle_index() {
  _has_bits_[0] |= 0x00000008u;
}
void CDOTAUserMsg_CreateLinearProjectile::clear_has_particle_index() {
  _has_bits_[0] &= ~0x00000008u;
}
void CDOTAUserMsg_CreateLinearProjectile::clear_particle_index() {
  particle_index_ = GOOGLE_ULONGLONG(0);
  clear_has_particle_index();
}
::google::protobuf::uint64 CDOTAUserMsg_CreateLinearProjectile::particle_index() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_CreateLinearProjectile.particle_index)
  return particle_index_;
}
void CDOTAUserMsg_CreateLinearProjectile::set_particle_index(::google::protobuf::uint64 value) {
  set_has_particle_index();
  particle_index_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_CreateLinearProjectile.particle_index)
}

// optional int32 handle = 6;
bool CDOTAUserMsg_CreateLinearProjectile::has_handle() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CDOTAUserMsg_CreateLinearProjectile::set_has_handle() {
  _has_bits_[0] |= 0x00000020u;
}
void CDOTAUserMsg_CreateLinearProjectile::clear_has_handle() {
  _has_bits_[0] &= ~0x00000020u;
}
void CDOTAUserMsg_CreateLinearProjectile::clear_handle() {
  handle_ = 0;
  clear_has_handle();
}
::google::protobuf::int32 CDOTAUserMsg_CreateLinearProjectile::handle() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_CreateLinearProjectile.handle)
  return handle_;
}
void CDOTAUserMsg_CreateLinearProjectile::set_handle(::google::protobuf::int32 value) {
  set_has_handle();
  handle_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_CreateLinearProjectile.handle)
}

// optional .proto.dota.CMsgVector2D acceleration = 7;
bool CDOTAUserMsg_CreateLinearProjectile::has_acceleration() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDOTAUserMsg_CreateLinearProjectile::set_has_acceleration() {
  _has_bits_[0] |= 0x00000004u;
}
void CDOTAUserMsg_CreateLinearProjectile::clear_has_acceleration() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDOTAUserMsg_CreateLinearProjectile::clear_acceleration() {
  if (acceleration_ != NULL) acceleration_->::proto::dota::CMsgVector2D::Clear();
  clear_has_acceleration();
}
const ::proto::dota::CMsgVector2D& CDOTAUserMsg_CreateLinearProjectile::acceleration() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_CreateLinearProjectile.acceleration)
  return acceleration_ != NULL ? *acceleration_
                         : *::proto::dota::CMsgVector2D::internal_default_instance();
}
::proto::dota::CMsgVector2D* CDOTAUserMsg_CreateLinearProjectile::mutable_acceleration() {
  set_has_acceleration();
  if (acceleration_ == NULL) {
    acceleration_ = new ::proto::dota::CMsgVector2D;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_CreateLinearProjectile.acceleration)
  return acceleration_;
}
::proto::dota::CMsgVector2D* CDOTAUserMsg_CreateLinearProjectile::release_acceleration() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAUserMsg_CreateLinearProjectile.acceleration)
  clear_has_acceleration();
  ::proto::dota::CMsgVector2D* temp = acceleration_;
  acceleration_ = NULL;
  return temp;
}
void CDOTAUserMsg_CreateLinearProjectile::set_allocated_acceleration(::proto::dota::CMsgVector2D* acceleration) {
  delete acceleration_;
  acceleration_ = acceleration;
  if (acceleration) {
    set_has_acceleration();
  } else {
    clear_has_acceleration();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAUserMsg_CreateLinearProjectile.acceleration)
}

// optional float max_speed = 8;
bool CDOTAUserMsg_CreateLinearProjectile::has_max_speed() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CDOTAUserMsg_CreateLinearProjectile::set_has_max_speed() {
  _has_bits_[0] |= 0x00000040u;
}
void CDOTAUserMsg_CreateLinearProjectile::clear_has_max_speed() {
  _has_bits_[0] &= ~0x00000040u;
}
void CDOTAUserMsg_CreateLinearProjectile::clear_max_speed() {
  max_speed_ = 0;
  clear_has_max_speed();
}
float CDOTAUserMsg_CreateLinearProjectile::max_speed() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_CreateLinearProjectile.max_speed)
  return max_speed_;
}
void CDOTAUserMsg_CreateLinearProjectile::set_max_speed(float value) {
  set_has_max_speed();
  max_speed_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_CreateLinearProjectile.max_speed)
}

// optional float fow_radius = 9;
bool CDOTAUserMsg_CreateLinearProjectile::has_fow_radius() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CDOTAUserMsg_CreateLinearProjectile::set_has_fow_radius() {
  _has_bits_[0] |= 0x00000080u;
}
void CDOTAUserMsg_CreateLinearProjectile::clear_has_fow_radius() {
  _has_bits_[0] &= ~0x00000080u;
}
void CDOTAUserMsg_CreateLinearProjectile::clear_fow_radius() {
  fow_radius_ = 0;
  clear_has_fow_radius();
}
float CDOTAUserMsg_CreateLinearProjectile::fow_radius() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_CreateLinearProjectile.fow_radius)
  return fow_radius_;
}
void CDOTAUserMsg_CreateLinearProjectile::set_fow_radius(float value) {
  set_has_fow_radius();
  fow_radius_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_CreateLinearProjectile.fow_radius)
}

// optional bool sticky_fow_reveal = 10;
bool CDOTAUserMsg_CreateLinearProjectile::has_sticky_fow_reveal() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CDOTAUserMsg_CreateLinearProjectile::set_has_sticky_fow_reveal() {
  _has_bits_[0] |= 0x00000100u;
}
void CDOTAUserMsg_CreateLinearProjectile::clear_has_sticky_fow_reveal() {
  _has_bits_[0] &= ~0x00000100u;
}
void CDOTAUserMsg_CreateLinearProjectile::clear_sticky_fow_reveal() {
  sticky_fow_reveal_ = false;
  clear_has_sticky_fow_reveal();
}
bool CDOTAUserMsg_CreateLinearProjectile::sticky_fow_reveal() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_CreateLinearProjectile.sticky_fow_reveal)
  return sticky_fow_reveal_;
}
void CDOTAUserMsg_CreateLinearProjectile::set_sticky_fow_reveal(bool value) {
  set_has_sticky_fow_reveal();
  sticky_fow_reveal_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_CreateLinearProjectile.sticky_fow_reveal)
}

// optional float distance = 11;
bool CDOTAUserMsg_CreateLinearProjectile::has_distance() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CDOTAUserMsg_CreateLinearProjectile::set_has_distance() {
  _has_bits_[0] |= 0x00000200u;
}
void CDOTAUserMsg_CreateLinearProjectile::clear_has_distance() {
  _has_bits_[0] &= ~0x00000200u;
}
void CDOTAUserMsg_CreateLinearProjectile::clear_distance() {
  distance_ = 0;
  clear_has_distance();
}
float CDOTAUserMsg_CreateLinearProjectile::distance() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_CreateLinearProjectile.distance)
  return distance_;
}
void CDOTAUserMsg_CreateLinearProjectile::set_distance(float value) {
  set_has_distance();
  distance_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_CreateLinearProjectile.distance)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_DestroyLinearProjectile::kHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_DestroyLinearProjectile::CDOTAUserMsg_DestroyLinearProjectile()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_DestroyLinearProjectile)
}
CDOTAUserMsg_DestroyLinearProjectile::CDOTAUserMsg_DestroyLinearProjectile(const CDOTAUserMsg_DestroyLinearProjectile& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  handle_ = from.handle_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_DestroyLinearProjectile)
}

void CDOTAUserMsg_DestroyLinearProjectile::SharedCtor() {
  _cached_size_ = 0;
  handle_ = 0;
}

CDOTAUserMsg_DestroyLinearProjectile::~CDOTAUserMsg_DestroyLinearProjectile() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_DestroyLinearProjectile)
  SharedDtor();
}

void CDOTAUserMsg_DestroyLinearProjectile::SharedDtor() {
}

void CDOTAUserMsg_DestroyLinearProjectile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_DestroyLinearProjectile::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_DestroyLinearProjectile& CDOTAUserMsg_DestroyLinearProjectile::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_DestroyLinearProjectile* CDOTAUserMsg_DestroyLinearProjectile::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_DestroyLinearProjectile* n = new CDOTAUserMsg_DestroyLinearProjectile;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_DestroyLinearProjectile::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_DestroyLinearProjectile)
  handle_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_DestroyLinearProjectile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_DestroyLinearProjectile)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_DestroyLinearProjectile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_DestroyLinearProjectile)
  return false;
#undef DO_
}

void CDOTAUserMsg_DestroyLinearProjectile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_DestroyLinearProjectile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->handle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_DestroyLinearProjectile)
}

::google::protobuf::uint8* CDOTAUserMsg_DestroyLinearProjectile::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_DestroyLinearProjectile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->handle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_DestroyLinearProjectile)
  return target;
}

size_t CDOTAUserMsg_DestroyLinearProjectile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_DestroyLinearProjectile)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional int32 handle = 1;
  if (has_handle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->handle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_DestroyLinearProjectile::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_DestroyLinearProjectile)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_DestroyLinearProjectile* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_DestroyLinearProjectile>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_DestroyLinearProjectile)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_DestroyLinearProjectile)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_DestroyLinearProjectile::MergeFrom(const CDOTAUserMsg_DestroyLinearProjectile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_DestroyLinearProjectile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_handle()) {
    set_handle(from.handle());
  }
}

void CDOTAUserMsg_DestroyLinearProjectile::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_DestroyLinearProjectile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_DestroyLinearProjectile::CopyFrom(const CDOTAUserMsg_DestroyLinearProjectile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_DestroyLinearProjectile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_DestroyLinearProjectile::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_DestroyLinearProjectile::Swap(CDOTAUserMsg_DestroyLinearProjectile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_DestroyLinearProjectile::InternalSwap(CDOTAUserMsg_DestroyLinearProjectile* other) {
  std::swap(handle_, other->handle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_DestroyLinearProjectile::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_DestroyLinearProjectile

// optional int32 handle = 1;
bool CDOTAUserMsg_DestroyLinearProjectile::has_handle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_DestroyLinearProjectile::set_has_handle() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_DestroyLinearProjectile::clear_has_handle() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_DestroyLinearProjectile::clear_handle() {
  handle_ = 0;
  clear_has_handle();
}
::google::protobuf::int32 CDOTAUserMsg_DestroyLinearProjectile::handle() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_DestroyLinearProjectile.handle)
  return handle_;
}
void CDOTAUserMsg_DestroyLinearProjectile::set_handle(::google::protobuf::int32 value) {
  set_has_handle();
  handle_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_DestroyLinearProjectile.handle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_DodgeTrackingProjectiles::kEntindexFieldNumber;
const int CDOTAUserMsg_DodgeTrackingProjectiles::kAttacksOnlyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_DodgeTrackingProjectiles::CDOTAUserMsg_DodgeTrackingProjectiles()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_DodgeTrackingProjectiles)
}
CDOTAUserMsg_DodgeTrackingProjectiles::CDOTAUserMsg_DodgeTrackingProjectiles(const CDOTAUserMsg_DodgeTrackingProjectiles& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&entindex_, &from.entindex_,
    reinterpret_cast<char*>(&attacks_only_) -
    reinterpret_cast<char*>(&entindex_) + sizeof(attacks_only_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_DodgeTrackingProjectiles)
}

void CDOTAUserMsg_DodgeTrackingProjectiles::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&entindex_, 0, reinterpret_cast<char*>(&attacks_only_) -
    reinterpret_cast<char*>(&entindex_) + sizeof(attacks_only_));
}

CDOTAUserMsg_DodgeTrackingProjectiles::~CDOTAUserMsg_DodgeTrackingProjectiles() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_DodgeTrackingProjectiles)
  SharedDtor();
}

void CDOTAUserMsg_DodgeTrackingProjectiles::SharedDtor() {
}

void CDOTAUserMsg_DodgeTrackingProjectiles::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_DodgeTrackingProjectiles::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_DodgeTrackingProjectiles& CDOTAUserMsg_DodgeTrackingProjectiles::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_DodgeTrackingProjectiles* CDOTAUserMsg_DodgeTrackingProjectiles::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_DodgeTrackingProjectiles* n = new CDOTAUserMsg_DodgeTrackingProjectiles;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_DodgeTrackingProjectiles::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_DodgeTrackingProjectiles)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&entindex_, 0, reinterpret_cast<char*>(&attacks_only_) -
      reinterpret_cast<char*>(&entindex_) + sizeof(attacks_only_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_DodgeTrackingProjectiles::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_DodgeTrackingProjectiles)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 entindex = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_entindex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool attacks_only = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_attacks_only();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &attacks_only_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_DodgeTrackingProjectiles)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_DodgeTrackingProjectiles)
  return false;
#undef DO_
}

void CDOTAUserMsg_DodgeTrackingProjectiles::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_DodgeTrackingProjectiles)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 entindex = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->entindex(), output);
  }

  // optional bool attacks_only = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->attacks_only(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_DodgeTrackingProjectiles)
}

::google::protobuf::uint8* CDOTAUserMsg_DodgeTrackingProjectiles::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_DodgeTrackingProjectiles)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 entindex = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->entindex(), target);
  }

  // optional bool attacks_only = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->attacks_only(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_DodgeTrackingProjectiles)
  return target;
}

size_t CDOTAUserMsg_DodgeTrackingProjectiles::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_DodgeTrackingProjectiles)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required int32 entindex = 1;
  if (has_entindex()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->entindex());
  }
  // optional bool attacks_only = 2;
  if (has_attacks_only()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_DodgeTrackingProjectiles::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_DodgeTrackingProjectiles)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_DodgeTrackingProjectiles* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_DodgeTrackingProjectiles>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_DodgeTrackingProjectiles)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_DodgeTrackingProjectiles)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_DodgeTrackingProjectiles::MergeFrom(const CDOTAUserMsg_DodgeTrackingProjectiles& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_DodgeTrackingProjectiles)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      entindex_ = from.entindex_;
    }
    if (cached_has_bits & 0x00000002u) {
      attacks_only_ = from.attacks_only_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_DodgeTrackingProjectiles::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_DodgeTrackingProjectiles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_DodgeTrackingProjectiles::CopyFrom(const CDOTAUserMsg_DodgeTrackingProjectiles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_DodgeTrackingProjectiles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_DodgeTrackingProjectiles::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void CDOTAUserMsg_DodgeTrackingProjectiles::Swap(CDOTAUserMsg_DodgeTrackingProjectiles* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_DodgeTrackingProjectiles::InternalSwap(CDOTAUserMsg_DodgeTrackingProjectiles* other) {
  std::swap(entindex_, other->entindex_);
  std::swap(attacks_only_, other->attacks_only_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_DodgeTrackingProjectiles::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_DodgeTrackingProjectiles

// required int32 entindex = 1;
bool CDOTAUserMsg_DodgeTrackingProjectiles::has_entindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_DodgeTrackingProjectiles::set_has_entindex() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_DodgeTrackingProjectiles::clear_has_entindex() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_DodgeTrackingProjectiles::clear_entindex() {
  entindex_ = 0;
  clear_has_entindex();
}
::google::protobuf::int32 CDOTAUserMsg_DodgeTrackingProjectiles::entindex() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_DodgeTrackingProjectiles.entindex)
  return entindex_;
}
void CDOTAUserMsg_DodgeTrackingProjectiles::set_entindex(::google::protobuf::int32 value) {
  set_has_entindex();
  entindex_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_DodgeTrackingProjectiles.entindex)
}

// optional bool attacks_only = 2;
bool CDOTAUserMsg_DodgeTrackingProjectiles::has_attacks_only() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAUserMsg_DodgeTrackingProjectiles::set_has_attacks_only() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAUserMsg_DodgeTrackingProjectiles::clear_has_attacks_only() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAUserMsg_DodgeTrackingProjectiles::clear_attacks_only() {
  attacks_only_ = false;
  clear_has_attacks_only();
}
bool CDOTAUserMsg_DodgeTrackingProjectiles::attacks_only() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_DodgeTrackingProjectiles.attacks_only)
  return attacks_only_;
}
void CDOTAUserMsg_DodgeTrackingProjectiles::set_attacks_only(bool value) {
  set_has_attacks_only();
  attacks_only_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_DodgeTrackingProjectiles.attacks_only)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_SpectatorPlayerClick::kEntindexFieldNumber;
const int CDOTAUserMsg_SpectatorPlayerClick::kOrderTypeFieldNumber;
const int CDOTAUserMsg_SpectatorPlayerClick::kTargetIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_SpectatorPlayerClick::CDOTAUserMsg_SpectatorPlayerClick()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_SpectatorPlayerClick)
}
CDOTAUserMsg_SpectatorPlayerClick::CDOTAUserMsg_SpectatorPlayerClick(const CDOTAUserMsg_SpectatorPlayerClick& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&entindex_, &from.entindex_,
    reinterpret_cast<char*>(&target_index_) -
    reinterpret_cast<char*>(&entindex_) + sizeof(target_index_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_SpectatorPlayerClick)
}

void CDOTAUserMsg_SpectatorPlayerClick::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&entindex_, 0, reinterpret_cast<char*>(&target_index_) -
    reinterpret_cast<char*>(&entindex_) + sizeof(target_index_));
}

CDOTAUserMsg_SpectatorPlayerClick::~CDOTAUserMsg_SpectatorPlayerClick() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_SpectatorPlayerClick)
  SharedDtor();
}

void CDOTAUserMsg_SpectatorPlayerClick::SharedDtor() {
}

void CDOTAUserMsg_SpectatorPlayerClick::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_SpectatorPlayerClick::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_SpectatorPlayerClick& CDOTAUserMsg_SpectatorPlayerClick::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_SpectatorPlayerClick* CDOTAUserMsg_SpectatorPlayerClick::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_SpectatorPlayerClick* n = new CDOTAUserMsg_SpectatorPlayerClick;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_SpectatorPlayerClick::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_SpectatorPlayerClick)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&entindex_, 0, reinterpret_cast<char*>(&target_index_) -
      reinterpret_cast<char*>(&entindex_) + sizeof(target_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_SpectatorPlayerClick::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_SpectatorPlayerClick)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 entindex = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_entindex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 order_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_order_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 target_index = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_target_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_SpectatorPlayerClick)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_SpectatorPlayerClick)
  return false;
#undef DO_
}

void CDOTAUserMsg_SpectatorPlayerClick::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_SpectatorPlayerClick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 entindex = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->entindex(), output);
  }

  // optional int32 order_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->order_type(), output);
  }

  // optional int32 target_index = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->target_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_SpectatorPlayerClick)
}

::google::protobuf::uint8* CDOTAUserMsg_SpectatorPlayerClick::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_SpectatorPlayerClick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 entindex = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->entindex(), target);
  }

  // optional int32 order_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->order_type(), target);
  }

  // optional int32 target_index = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->target_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_SpectatorPlayerClick)
  return target;
}

size_t CDOTAUserMsg_SpectatorPlayerClick::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_SpectatorPlayerClick)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required int32 entindex = 1;
  if (has_entindex()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->entindex());
  }
  if (_has_bits_[0 / 32] & 6u) {
    // optional int32 order_type = 2;
    if (has_order_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->order_type());
    }

    // optional int32 target_index = 3;
    if (has_target_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->target_index());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_SpectatorPlayerClick::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_SpectatorPlayerClick)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_SpectatorPlayerClick* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_SpectatorPlayerClick>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_SpectatorPlayerClick)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_SpectatorPlayerClick)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_SpectatorPlayerClick::MergeFrom(const CDOTAUserMsg_SpectatorPlayerClick& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_SpectatorPlayerClick)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      entindex_ = from.entindex_;
    }
    if (cached_has_bits & 0x00000002u) {
      order_type_ = from.order_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      target_index_ = from.target_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_SpectatorPlayerClick::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_SpectatorPlayerClick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_SpectatorPlayerClick::CopyFrom(const CDOTAUserMsg_SpectatorPlayerClick& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_SpectatorPlayerClick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_SpectatorPlayerClick::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void CDOTAUserMsg_SpectatorPlayerClick::Swap(CDOTAUserMsg_SpectatorPlayerClick* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_SpectatorPlayerClick::InternalSwap(CDOTAUserMsg_SpectatorPlayerClick* other) {
  std::swap(entindex_, other->entindex_);
  std::swap(order_type_, other->order_type_);
  std::swap(target_index_, other->target_index_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_SpectatorPlayerClick::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_SpectatorPlayerClick

// required int32 entindex = 1;
bool CDOTAUserMsg_SpectatorPlayerClick::has_entindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_SpectatorPlayerClick::set_has_entindex() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_SpectatorPlayerClick::clear_has_entindex() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_SpectatorPlayerClick::clear_entindex() {
  entindex_ = 0;
  clear_has_entindex();
}
::google::protobuf::int32 CDOTAUserMsg_SpectatorPlayerClick::entindex() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_SpectatorPlayerClick.entindex)
  return entindex_;
}
void CDOTAUserMsg_SpectatorPlayerClick::set_entindex(::google::protobuf::int32 value) {
  set_has_entindex();
  entindex_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_SpectatorPlayerClick.entindex)
}

// optional int32 order_type = 2;
bool CDOTAUserMsg_SpectatorPlayerClick::has_order_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAUserMsg_SpectatorPlayerClick::set_has_order_type() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAUserMsg_SpectatorPlayerClick::clear_has_order_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAUserMsg_SpectatorPlayerClick::clear_order_type() {
  order_type_ = 0;
  clear_has_order_type();
}
::google::protobuf::int32 CDOTAUserMsg_SpectatorPlayerClick::order_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_SpectatorPlayerClick.order_type)
  return order_type_;
}
void CDOTAUserMsg_SpectatorPlayerClick::set_order_type(::google::protobuf::int32 value) {
  set_has_order_type();
  order_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_SpectatorPlayerClick.order_type)
}

// optional int32 target_index = 3;
bool CDOTAUserMsg_SpectatorPlayerClick::has_target_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDOTAUserMsg_SpectatorPlayerClick::set_has_target_index() {
  _has_bits_[0] |= 0x00000004u;
}
void CDOTAUserMsg_SpectatorPlayerClick::clear_has_target_index() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDOTAUserMsg_SpectatorPlayerClick::clear_target_index() {
  target_index_ = 0;
  clear_has_target_index();
}
::google::protobuf::int32 CDOTAUserMsg_SpectatorPlayerClick::target_index() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_SpectatorPlayerClick.target_index)
  return target_index_;
}
void CDOTAUserMsg_SpectatorPlayerClick::set_target_index(::google::protobuf::int32 value) {
  set_has_target_index();
  target_index_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_SpectatorPlayerClick.target_index)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_SpectatorPlayerUnitOrders::kEntindexFieldNumber;
const int CDOTAUserMsg_SpectatorPlayerUnitOrders::kOrderTypeFieldNumber;
const int CDOTAUserMsg_SpectatorPlayerUnitOrders::kUnitsFieldNumber;
const int CDOTAUserMsg_SpectatorPlayerUnitOrders::kTargetIndexFieldNumber;
const int CDOTAUserMsg_SpectatorPlayerUnitOrders::kAbilityIndexFieldNumber;
const int CDOTAUserMsg_SpectatorPlayerUnitOrders::kPositionFieldNumber;
const int CDOTAUserMsg_SpectatorPlayerUnitOrders::kQueueFieldNumber;
const int CDOTAUserMsg_SpectatorPlayerUnitOrders::kSequenceNumberFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_SpectatorPlayerUnitOrders::CDOTAUserMsg_SpectatorPlayerUnitOrders()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_SpectatorPlayerUnitOrders)
}
CDOTAUserMsg_SpectatorPlayerUnitOrders::CDOTAUserMsg_SpectatorPlayerUnitOrders(const CDOTAUserMsg_SpectatorPlayerUnitOrders& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      units_(from.units_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_position()) {
    position_ = new ::proto::dota::CMsgVector(*from.position_);
  } else {
    position_ = NULL;
  }
  ::memcpy(&entindex_, &from.entindex_,
    reinterpret_cast<char*>(&sequence_number_) -
    reinterpret_cast<char*>(&entindex_) + sizeof(sequence_number_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_SpectatorPlayerUnitOrders)
}

void CDOTAUserMsg_SpectatorPlayerUnitOrders::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&position_, 0, reinterpret_cast<char*>(&sequence_number_) -
    reinterpret_cast<char*>(&position_) + sizeof(sequence_number_));
}

CDOTAUserMsg_SpectatorPlayerUnitOrders::~CDOTAUserMsg_SpectatorPlayerUnitOrders() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_SpectatorPlayerUnitOrders)
  SharedDtor();
}

void CDOTAUserMsg_SpectatorPlayerUnitOrders::SharedDtor() {
  if (this != internal_default_instance()) {
    delete position_;
  }
}

void CDOTAUserMsg_SpectatorPlayerUnitOrders::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_SpectatorPlayerUnitOrders::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_SpectatorPlayerUnitOrders& CDOTAUserMsg_SpectatorPlayerUnitOrders::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_SpectatorPlayerUnitOrders* CDOTAUserMsg_SpectatorPlayerUnitOrders::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_SpectatorPlayerUnitOrders* n = new CDOTAUserMsg_SpectatorPlayerUnitOrders;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_SpectatorPlayerUnitOrders::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_SpectatorPlayerUnitOrders)
  units_.Clear();
  if (has_position()) {
    GOOGLE_DCHECK(position_ != NULL);
    position_->::proto::dota::CMsgVector::Clear();
  }
  if (_has_bits_[0 / 32] & 126u) {
    ::memset(&entindex_, 0, reinterpret_cast<char*>(&sequence_number_) -
      reinterpret_cast<char*>(&entindex_) + sizeof(sequence_number_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_SpectatorPlayerUnitOrders::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_SpectatorPlayerUnitOrders)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 entindex = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_entindex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 order_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_order_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 units = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24u, input, this->mutable_units())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(26u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_units())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 target_index = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_target_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ability_index = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_ability_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ability_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgVector position = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool queue = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_queue();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &queue_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 sequence_number = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_sequence_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sequence_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_SpectatorPlayerUnitOrders)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_SpectatorPlayerUnitOrders)
  return false;
#undef DO_
}

void CDOTAUserMsg_SpectatorPlayerUnitOrders::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_SpectatorPlayerUnitOrders)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 entindex = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->entindex(), output);
  }

  // optional int32 order_type = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->order_type(), output);
  }

  // repeated int32 units = 3;
  for (int i = 0, n = this->units_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->units(i), output);
  }

  // optional int32 target_index = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->target_index(), output);
  }

  // optional int32 ability_index = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ability_index(), output);
  }

  // optional .proto.dota.CMsgVector position = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->position_, output);
  }

  // optional bool queue = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->queue(), output);
  }

  // optional int32 sequence_number = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->sequence_number(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_SpectatorPlayerUnitOrders)
}

::google::protobuf::uint8* CDOTAUserMsg_SpectatorPlayerUnitOrders::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_SpectatorPlayerUnitOrders)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 entindex = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->entindex(), target);
  }

  // optional int32 order_type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->order_type(), target);
  }

  // repeated int32 units = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(3, this->units_, target);

  // optional int32 target_index = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->target_index(), target);
  }

  // optional int32 ability_index = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ability_index(), target);
  }

  // optional .proto.dota.CMsgVector position = 6;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->position_, deterministic, target);
  }

  // optional bool queue = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->queue(), target);
  }

  // optional int32 sequence_number = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->sequence_number(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_SpectatorPlayerUnitOrders)
  return target;
}

size_t CDOTAUserMsg_SpectatorPlayerUnitOrders::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_SpectatorPlayerUnitOrders)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated int32 units = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->units_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->units_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 127u) {
    // optional .proto.dota.CMsgVector position = 6;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->position_);
    }

    // optional int32 entindex = 1;
    if (has_entindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entindex());
    }

    // optional int32 order_type = 2;
    if (has_order_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->order_type());
    }

    // optional int32 target_index = 4;
    if (has_target_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->target_index());
    }

    // optional int32 ability_index = 5;
    if (has_ability_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ability_index());
    }

    // optional bool queue = 7;
    if (has_queue()) {
      total_size += 1 + 1;
    }

    // optional int32 sequence_number = 8;
    if (has_sequence_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sequence_number());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_SpectatorPlayerUnitOrders::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_SpectatorPlayerUnitOrders)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_SpectatorPlayerUnitOrders* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_SpectatorPlayerUnitOrders>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_SpectatorPlayerUnitOrders)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_SpectatorPlayerUnitOrders)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_SpectatorPlayerUnitOrders::MergeFrom(const CDOTAUserMsg_SpectatorPlayerUnitOrders& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_SpectatorPlayerUnitOrders)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  units_.MergeFrom(from.units_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_position()->::proto::dota::CMsgVector::MergeFrom(from.position());
    }
    if (cached_has_bits & 0x00000002u) {
      entindex_ = from.entindex_;
    }
    if (cached_has_bits & 0x00000004u) {
      order_type_ = from.order_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      target_index_ = from.target_index_;
    }
    if (cached_has_bits & 0x00000010u) {
      ability_index_ = from.ability_index_;
    }
    if (cached_has_bits & 0x00000020u) {
      queue_ = from.queue_;
    }
    if (cached_has_bits & 0x00000040u) {
      sequence_number_ = from.sequence_number_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_SpectatorPlayerUnitOrders::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_SpectatorPlayerUnitOrders)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_SpectatorPlayerUnitOrders::CopyFrom(const CDOTAUserMsg_SpectatorPlayerUnitOrders& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_SpectatorPlayerUnitOrders)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_SpectatorPlayerUnitOrders::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_SpectatorPlayerUnitOrders::Swap(CDOTAUserMsg_SpectatorPlayerUnitOrders* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_SpectatorPlayerUnitOrders::InternalSwap(CDOTAUserMsg_SpectatorPlayerUnitOrders* other) {
  units_.InternalSwap(&other->units_);
  std::swap(position_, other->position_);
  std::swap(entindex_, other->entindex_);
  std::swap(order_type_, other->order_type_);
  std::swap(target_index_, other->target_index_);
  std::swap(ability_index_, other->ability_index_);
  std::swap(queue_, other->queue_);
  std::swap(sequence_number_, other->sequence_number_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_SpectatorPlayerUnitOrders::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_SpectatorPlayerUnitOrders

// optional int32 entindex = 1;
bool CDOTAUserMsg_SpectatorPlayerUnitOrders::has_entindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAUserMsg_SpectatorPlayerUnitOrders::set_has_entindex() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAUserMsg_SpectatorPlayerUnitOrders::clear_has_entindex() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAUserMsg_SpectatorPlayerUnitOrders::clear_entindex() {
  entindex_ = 0;
  clear_has_entindex();
}
::google::protobuf::int32 CDOTAUserMsg_SpectatorPlayerUnitOrders::entindex() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_SpectatorPlayerUnitOrders.entindex)
  return entindex_;
}
void CDOTAUserMsg_SpectatorPlayerUnitOrders::set_entindex(::google::protobuf::int32 value) {
  set_has_entindex();
  entindex_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_SpectatorPlayerUnitOrders.entindex)
}

// optional int32 order_type = 2;
bool CDOTAUserMsg_SpectatorPlayerUnitOrders::has_order_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDOTAUserMsg_SpectatorPlayerUnitOrders::set_has_order_type() {
  _has_bits_[0] |= 0x00000004u;
}
void CDOTAUserMsg_SpectatorPlayerUnitOrders::clear_has_order_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDOTAUserMsg_SpectatorPlayerUnitOrders::clear_order_type() {
  order_type_ = 0;
  clear_has_order_type();
}
::google::protobuf::int32 CDOTAUserMsg_SpectatorPlayerUnitOrders::order_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_SpectatorPlayerUnitOrders.order_type)
  return order_type_;
}
void CDOTAUserMsg_SpectatorPlayerUnitOrders::set_order_type(::google::protobuf::int32 value) {
  set_has_order_type();
  order_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_SpectatorPlayerUnitOrders.order_type)
}

// repeated int32 units = 3;
int CDOTAUserMsg_SpectatorPlayerUnitOrders::units_size() const {
  return units_.size();
}
void CDOTAUserMsg_SpectatorPlayerUnitOrders::clear_units() {
  units_.Clear();
}
::google::protobuf::int32 CDOTAUserMsg_SpectatorPlayerUnitOrders::units(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_SpectatorPlayerUnitOrders.units)
  return units_.Get(index);
}
void CDOTAUserMsg_SpectatorPlayerUnitOrders::set_units(int index, ::google::protobuf::int32 value) {
  units_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_SpectatorPlayerUnitOrders.units)
}
void CDOTAUserMsg_SpectatorPlayerUnitOrders::add_units(::google::protobuf::int32 value) {
  units_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAUserMsg_SpectatorPlayerUnitOrders.units)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CDOTAUserMsg_SpectatorPlayerUnitOrders::units() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTAUserMsg_SpectatorPlayerUnitOrders.units)
  return units_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CDOTAUserMsg_SpectatorPlayerUnitOrders::mutable_units() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTAUserMsg_SpectatorPlayerUnitOrders.units)
  return &units_;
}

// optional int32 target_index = 4;
bool CDOTAUserMsg_SpectatorPlayerUnitOrders::has_target_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CDOTAUserMsg_SpectatorPlayerUnitOrders::set_has_target_index() {
  _has_bits_[0] |= 0x00000008u;
}
void CDOTAUserMsg_SpectatorPlayerUnitOrders::clear_has_target_index() {
  _has_bits_[0] &= ~0x00000008u;
}
void CDOTAUserMsg_SpectatorPlayerUnitOrders::clear_target_index() {
  target_index_ = 0;
  clear_has_target_index();
}
::google::protobuf::int32 CDOTAUserMsg_SpectatorPlayerUnitOrders::target_index() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_SpectatorPlayerUnitOrders.target_index)
  return target_index_;
}
void CDOTAUserMsg_SpectatorPlayerUnitOrders::set_target_index(::google::protobuf::int32 value) {
  set_has_target_index();
  target_index_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_SpectatorPlayerUnitOrders.target_index)
}

// optional int32 ability_index = 5;
bool CDOTAUserMsg_SpectatorPlayerUnitOrders::has_ability_index() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CDOTAUserMsg_SpectatorPlayerUnitOrders::set_has_ability_index() {
  _has_bits_[0] |= 0x00000010u;
}
void CDOTAUserMsg_SpectatorPlayerUnitOrders::clear_has_ability_index() {
  _has_bits_[0] &= ~0x00000010u;
}
void CDOTAUserMsg_SpectatorPlayerUnitOrders::clear_ability_index() {
  ability_index_ = 0;
  clear_has_ability_index();
}
::google::protobuf::int32 CDOTAUserMsg_SpectatorPlayerUnitOrders::ability_index() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_SpectatorPlayerUnitOrders.ability_index)
  return ability_index_;
}
void CDOTAUserMsg_SpectatorPlayerUnitOrders::set_ability_index(::google::protobuf::int32 value) {
  set_has_ability_index();
  ability_index_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_SpectatorPlayerUnitOrders.ability_index)
}

// optional .proto.dota.CMsgVector position = 6;
bool CDOTAUserMsg_SpectatorPlayerUnitOrders::has_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_SpectatorPlayerUnitOrders::set_has_position() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_SpectatorPlayerUnitOrders::clear_has_position() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_SpectatorPlayerUnitOrders::clear_position() {
  if (position_ != NULL) position_->::proto::dota::CMsgVector::Clear();
  clear_has_position();
}
const ::proto::dota::CMsgVector& CDOTAUserMsg_SpectatorPlayerUnitOrders::position() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_SpectatorPlayerUnitOrders.position)
  return position_ != NULL ? *position_
                         : *::proto::dota::CMsgVector::internal_default_instance();
}
::proto::dota::CMsgVector* CDOTAUserMsg_SpectatorPlayerUnitOrders::mutable_position() {
  set_has_position();
  if (position_ == NULL) {
    position_ = new ::proto::dota::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_SpectatorPlayerUnitOrders.position)
  return position_;
}
::proto::dota::CMsgVector* CDOTAUserMsg_SpectatorPlayerUnitOrders::release_position() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAUserMsg_SpectatorPlayerUnitOrders.position)
  clear_has_position();
  ::proto::dota::CMsgVector* temp = position_;
  position_ = NULL;
  return temp;
}
void CDOTAUserMsg_SpectatorPlayerUnitOrders::set_allocated_position(::proto::dota::CMsgVector* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAUserMsg_SpectatorPlayerUnitOrders.position)
}

// optional bool queue = 7;
bool CDOTAUserMsg_SpectatorPlayerUnitOrders::has_queue() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CDOTAUserMsg_SpectatorPlayerUnitOrders::set_has_queue() {
  _has_bits_[0] |= 0x00000020u;
}
void CDOTAUserMsg_SpectatorPlayerUnitOrders::clear_has_queue() {
  _has_bits_[0] &= ~0x00000020u;
}
void CDOTAUserMsg_SpectatorPlayerUnitOrders::clear_queue() {
  queue_ = false;
  clear_has_queue();
}
bool CDOTAUserMsg_SpectatorPlayerUnitOrders::queue() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_SpectatorPlayerUnitOrders.queue)
  return queue_;
}
void CDOTAUserMsg_SpectatorPlayerUnitOrders::set_queue(bool value) {
  set_has_queue();
  queue_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_SpectatorPlayerUnitOrders.queue)
}

// optional int32 sequence_number = 8;
bool CDOTAUserMsg_SpectatorPlayerUnitOrders::has_sequence_number() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CDOTAUserMsg_SpectatorPlayerUnitOrders::set_has_sequence_number() {
  _has_bits_[0] |= 0x00000040u;
}
void CDOTAUserMsg_SpectatorPlayerUnitOrders::clear_has_sequence_number() {
  _has_bits_[0] &= ~0x00000040u;
}
void CDOTAUserMsg_SpectatorPlayerUnitOrders::clear_sequence_number() {
  sequence_number_ = 0;
  clear_has_sequence_number();
}
::google::protobuf::int32 CDOTAUserMsg_SpectatorPlayerUnitOrders::sequence_number() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_SpectatorPlayerUnitOrders.sequence_number)
  return sequence_number_;
}
void CDOTAUserMsg_SpectatorPlayerUnitOrders::set_sequence_number(::google::protobuf::int32 value) {
  set_has_sequence_number();
  sequence_number_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_SpectatorPlayerUnitOrders.sequence_number)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_NevermoreRequiem::kEntityHandleFieldNumber;
const int CDOTAUserMsg_NevermoreRequiem::kLinesFieldNumber;
const int CDOTAUserMsg_NevermoreRequiem::kOriginFieldNumber;
const int CDOTAUserMsg_NevermoreRequiem::kReverseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_NevermoreRequiem::CDOTAUserMsg_NevermoreRequiem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_NevermoreRequiem)
}
CDOTAUserMsg_NevermoreRequiem::CDOTAUserMsg_NevermoreRequiem(const CDOTAUserMsg_NevermoreRequiem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_origin()) {
    origin_ = new ::proto::dota::CMsgVector(*from.origin_);
  } else {
    origin_ = NULL;
  }
  ::memcpy(&entity_handle_, &from.entity_handle_,
    reinterpret_cast<char*>(&reverse_) -
    reinterpret_cast<char*>(&entity_handle_) + sizeof(reverse_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_NevermoreRequiem)
}

void CDOTAUserMsg_NevermoreRequiem::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&origin_, 0, reinterpret_cast<char*>(&reverse_) -
    reinterpret_cast<char*>(&origin_) + sizeof(reverse_));
}

CDOTAUserMsg_NevermoreRequiem::~CDOTAUserMsg_NevermoreRequiem() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_NevermoreRequiem)
  SharedDtor();
}

void CDOTAUserMsg_NevermoreRequiem::SharedDtor() {
  if (this != internal_default_instance()) {
    delete origin_;
  }
}

void CDOTAUserMsg_NevermoreRequiem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_NevermoreRequiem::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_NevermoreRequiem& CDOTAUserMsg_NevermoreRequiem::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_NevermoreRequiem* CDOTAUserMsg_NevermoreRequiem::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_NevermoreRequiem* n = new CDOTAUserMsg_NevermoreRequiem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_NevermoreRequiem::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_NevermoreRequiem)
  if (has_origin()) {
    GOOGLE_DCHECK(origin_ != NULL);
    origin_->::proto::dota::CMsgVector::Clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&entity_handle_, 0, reinterpret_cast<char*>(&reverse_) -
      reinterpret_cast<char*>(&entity_handle_) + sizeof(reverse_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_NevermoreRequiem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_NevermoreRequiem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 entity_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_entity_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entity_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 lines = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_lines();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lines_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgVector origin = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_origin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool reverse = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_reverse();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reverse_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_NevermoreRequiem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_NevermoreRequiem)
  return false;
#undef DO_
}

void CDOTAUserMsg_NevermoreRequiem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_NevermoreRequiem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 entity_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->entity_handle(), output);
  }

  // optional int32 lines = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lines(), output);
  }

  // optional .proto.dota.CMsgVector origin = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->origin_, output);
  }

  // optional bool reverse = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->reverse(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_NevermoreRequiem)
}

::google::protobuf::uint8* CDOTAUserMsg_NevermoreRequiem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_NevermoreRequiem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 entity_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->entity_handle(), target);
  }

  // optional int32 lines = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lines(), target);
  }

  // optional .proto.dota.CMsgVector origin = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->origin_, deterministic, target);
  }

  // optional bool reverse = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->reverse(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_NevermoreRequiem)
  return target;
}

size_t CDOTAUserMsg_NevermoreRequiem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_NevermoreRequiem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional .proto.dota.CMsgVector origin = 3;
    if (has_origin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->origin_);
    }

    // optional int32 entity_handle = 1;
    if (has_entity_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entity_handle());
    }

    // optional int32 lines = 2;
    if (has_lines()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lines());
    }

    // optional bool reverse = 4;
    if (has_reverse()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_NevermoreRequiem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_NevermoreRequiem)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_NevermoreRequiem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_NevermoreRequiem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_NevermoreRequiem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_NevermoreRequiem)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_NevermoreRequiem::MergeFrom(const CDOTAUserMsg_NevermoreRequiem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_NevermoreRequiem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_origin()->::proto::dota::CMsgVector::MergeFrom(from.origin());
    }
    if (cached_has_bits & 0x00000002u) {
      entity_handle_ = from.entity_handle_;
    }
    if (cached_has_bits & 0x00000004u) {
      lines_ = from.lines_;
    }
    if (cached_has_bits & 0x00000008u) {
      reverse_ = from.reverse_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_NevermoreRequiem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_NevermoreRequiem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_NevermoreRequiem::CopyFrom(const CDOTAUserMsg_NevermoreRequiem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_NevermoreRequiem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_NevermoreRequiem::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_NevermoreRequiem::Swap(CDOTAUserMsg_NevermoreRequiem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_NevermoreRequiem::InternalSwap(CDOTAUserMsg_NevermoreRequiem* other) {
  std::swap(origin_, other->origin_);
  std::swap(entity_handle_, other->entity_handle_);
  std::swap(lines_, other->lines_);
  std::swap(reverse_, other->reverse_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_NevermoreRequiem::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_NevermoreRequiem

// optional int32 entity_handle = 1;
bool CDOTAUserMsg_NevermoreRequiem::has_entity_handle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAUserMsg_NevermoreRequiem::set_has_entity_handle() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAUserMsg_NevermoreRequiem::clear_has_entity_handle() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAUserMsg_NevermoreRequiem::clear_entity_handle() {
  entity_handle_ = 0;
  clear_has_entity_handle();
}
::google::protobuf::int32 CDOTAUserMsg_NevermoreRequiem::entity_handle() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_NevermoreRequiem.entity_handle)
  return entity_handle_;
}
void CDOTAUserMsg_NevermoreRequiem::set_entity_handle(::google::protobuf::int32 value) {
  set_has_entity_handle();
  entity_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_NevermoreRequiem.entity_handle)
}

// optional int32 lines = 2;
bool CDOTAUserMsg_NevermoreRequiem::has_lines() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDOTAUserMsg_NevermoreRequiem::set_has_lines() {
  _has_bits_[0] |= 0x00000004u;
}
void CDOTAUserMsg_NevermoreRequiem::clear_has_lines() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDOTAUserMsg_NevermoreRequiem::clear_lines() {
  lines_ = 0;
  clear_has_lines();
}
::google::protobuf::int32 CDOTAUserMsg_NevermoreRequiem::lines() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_NevermoreRequiem.lines)
  return lines_;
}
void CDOTAUserMsg_NevermoreRequiem::set_lines(::google::protobuf::int32 value) {
  set_has_lines();
  lines_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_NevermoreRequiem.lines)
}

// optional .proto.dota.CMsgVector origin = 3;
bool CDOTAUserMsg_NevermoreRequiem::has_origin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_NevermoreRequiem::set_has_origin() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_NevermoreRequiem::clear_has_origin() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_NevermoreRequiem::clear_origin() {
  if (origin_ != NULL) origin_->::proto::dota::CMsgVector::Clear();
  clear_has_origin();
}
const ::proto::dota::CMsgVector& CDOTAUserMsg_NevermoreRequiem::origin() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_NevermoreRequiem.origin)
  return origin_ != NULL ? *origin_
                         : *::proto::dota::CMsgVector::internal_default_instance();
}
::proto::dota::CMsgVector* CDOTAUserMsg_NevermoreRequiem::mutable_origin() {
  set_has_origin();
  if (origin_ == NULL) {
    origin_ = new ::proto::dota::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_NevermoreRequiem.origin)
  return origin_;
}
::proto::dota::CMsgVector* CDOTAUserMsg_NevermoreRequiem::release_origin() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAUserMsg_NevermoreRequiem.origin)
  clear_has_origin();
  ::proto::dota::CMsgVector* temp = origin_;
  origin_ = NULL;
  return temp;
}
void CDOTAUserMsg_NevermoreRequiem::set_allocated_origin(::proto::dota::CMsgVector* origin) {
  delete origin_;
  origin_ = origin;
  if (origin) {
    set_has_origin();
  } else {
    clear_has_origin();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAUserMsg_NevermoreRequiem.origin)
}

// optional bool reverse = 4;
bool CDOTAUserMsg_NevermoreRequiem::has_reverse() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CDOTAUserMsg_NevermoreRequiem::set_has_reverse() {
  _has_bits_[0] |= 0x00000008u;
}
void CDOTAUserMsg_NevermoreRequiem::clear_has_reverse() {
  _has_bits_[0] &= ~0x00000008u;
}
void CDOTAUserMsg_NevermoreRequiem::clear_reverse() {
  reverse_ = false;
  clear_has_reverse();
}
bool CDOTAUserMsg_NevermoreRequiem::reverse() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_NevermoreRequiem.reverse)
  return reverse_;
}
void CDOTAUserMsg_NevermoreRequiem::set_reverse(bool value) {
  set_has_reverse();
  reverse_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_NevermoreRequiem.reverse)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_InvalidCommand::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_InvalidCommand::CDOTAUserMsg_InvalidCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_InvalidCommand)
}
CDOTAUserMsg_InvalidCommand::CDOTAUserMsg_InvalidCommand(const CDOTAUserMsg_InvalidCommand& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_message()) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_InvalidCommand)
}

void CDOTAUserMsg_InvalidCommand::SharedCtor() {
  _cached_size_ = 0;
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CDOTAUserMsg_InvalidCommand::~CDOTAUserMsg_InvalidCommand() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_InvalidCommand)
  SharedDtor();
}

void CDOTAUserMsg_InvalidCommand::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CDOTAUserMsg_InvalidCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_InvalidCommand::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_InvalidCommand& CDOTAUserMsg_InvalidCommand::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_InvalidCommand* CDOTAUserMsg_InvalidCommand::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_InvalidCommand* n = new CDOTAUserMsg_InvalidCommand;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_InvalidCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_InvalidCommand)
  if (has_message()) {
    GOOGLE_DCHECK(!message_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*message_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_InvalidCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_InvalidCommand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string message = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDOTAUserMsg_InvalidCommand.message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_InvalidCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_InvalidCommand)
  return false;
#undef DO_
}

void CDOTAUserMsg_InvalidCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_InvalidCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string message = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAUserMsg_InvalidCommand.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_InvalidCommand)
}

::google::protobuf::uint8* CDOTAUserMsg_InvalidCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_InvalidCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string message = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAUserMsg_InvalidCommand.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_InvalidCommand)
  return target;
}

size_t CDOTAUserMsg_InvalidCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_InvalidCommand)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional string message = 1;
  if (has_message()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_InvalidCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_InvalidCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_InvalidCommand* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_InvalidCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_InvalidCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_InvalidCommand)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_InvalidCommand::MergeFrom(const CDOTAUserMsg_InvalidCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_InvalidCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_message()) {
    set_has_message();
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
}

void CDOTAUserMsg_InvalidCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_InvalidCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_InvalidCommand::CopyFrom(const CDOTAUserMsg_InvalidCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_InvalidCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_InvalidCommand::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_InvalidCommand::Swap(CDOTAUserMsg_InvalidCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_InvalidCommand::InternalSwap(CDOTAUserMsg_InvalidCommand* other) {
  message_.Swap(&other->message_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_InvalidCommand::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_InvalidCommand

// optional string message = 1;
bool CDOTAUserMsg_InvalidCommand::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_InvalidCommand::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_InvalidCommand::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_InvalidCommand::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
const ::std::string& CDOTAUserMsg_InvalidCommand::message() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_InvalidCommand.message)
  return message_.GetNoArena();
}
void CDOTAUserMsg_InvalidCommand::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_InvalidCommand.message)
}
#if LANG_CXX11
void CDOTAUserMsg_InvalidCommand::set_message(::std::string&& value) {
  set_has_message();
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDOTAUserMsg_InvalidCommand.message)
}
#endif
void CDOTAUserMsg_InvalidCommand::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDOTAUserMsg_InvalidCommand.message)
}
void CDOTAUserMsg_InvalidCommand::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDOTAUserMsg_InvalidCommand.message)
}
::std::string* CDOTAUserMsg_InvalidCommand::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_InvalidCommand.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDOTAUserMsg_InvalidCommand::release_message() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAUserMsg_InvalidCommand.message)
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDOTAUserMsg_InvalidCommand::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAUserMsg_InvalidCommand.message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_HudError::kOrderIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_HudError::CDOTAUserMsg_HudError()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_HudError)
}
CDOTAUserMsg_HudError::CDOTAUserMsg_HudError(const CDOTAUserMsg_HudError& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  order_id_ = from.order_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_HudError)
}

void CDOTAUserMsg_HudError::SharedCtor() {
  _cached_size_ = 0;
  order_id_ = 0;
}

CDOTAUserMsg_HudError::~CDOTAUserMsg_HudError() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_HudError)
  SharedDtor();
}

void CDOTAUserMsg_HudError::SharedDtor() {
}

void CDOTAUserMsg_HudError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_HudError::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_HudError& CDOTAUserMsg_HudError::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_HudError* CDOTAUserMsg_HudError::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_HudError* n = new CDOTAUserMsg_HudError;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_HudError::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_HudError)
  order_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_HudError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_HudError)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 order_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_order_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_HudError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_HudError)
  return false;
#undef DO_
}

void CDOTAUserMsg_HudError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_HudError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 order_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->order_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_HudError)
}

::google::protobuf::uint8* CDOTAUserMsg_HudError::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_HudError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 order_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->order_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_HudError)
  return target;
}

size_t CDOTAUserMsg_HudError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_HudError)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional int32 order_id = 1;
  if (has_order_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->order_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_HudError::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_HudError)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_HudError* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_HudError>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_HudError)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_HudError)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_HudError::MergeFrom(const CDOTAUserMsg_HudError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_HudError)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_order_id()) {
    set_order_id(from.order_id());
  }
}

void CDOTAUserMsg_HudError::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_HudError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_HudError::CopyFrom(const CDOTAUserMsg_HudError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_HudError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_HudError::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_HudError::Swap(CDOTAUserMsg_HudError* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_HudError::InternalSwap(CDOTAUserMsg_HudError* other) {
  std::swap(order_id_, other->order_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_HudError::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_HudError

// optional int32 order_id = 1;
bool CDOTAUserMsg_HudError::has_order_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_HudError::set_has_order_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_HudError::clear_has_order_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_HudError::clear_order_id() {
  order_id_ = 0;
  clear_has_order_id();
}
::google::protobuf::int32 CDOTAUserMsg_HudError::order_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_HudError.order_id)
  return order_id_;
}
void CDOTAUserMsg_HudError::set_order_id(::google::protobuf::int32 value) {
  set_has_order_id();
  order_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_HudError.order_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_SharedCooldown::kEntindexFieldNumber;
const int CDOTAUserMsg_SharedCooldown::kNameFieldNumber;
const int CDOTAUserMsg_SharedCooldown::kCooldownFieldNumber;
const int CDOTAUserMsg_SharedCooldown::kNameIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_SharedCooldown::CDOTAUserMsg_SharedCooldown()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_SharedCooldown)
}
CDOTAUserMsg_SharedCooldown::CDOTAUserMsg_SharedCooldown(const CDOTAUserMsg_SharedCooldown& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&entindex_, &from.entindex_,
    reinterpret_cast<char*>(&name_index_) -
    reinterpret_cast<char*>(&entindex_) + sizeof(name_index_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_SharedCooldown)
}

void CDOTAUserMsg_SharedCooldown::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&entindex_, 0, reinterpret_cast<char*>(&name_index_) -
    reinterpret_cast<char*>(&entindex_) + sizeof(name_index_));
}

CDOTAUserMsg_SharedCooldown::~CDOTAUserMsg_SharedCooldown() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_SharedCooldown)
  SharedDtor();
}

void CDOTAUserMsg_SharedCooldown::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CDOTAUserMsg_SharedCooldown::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_SharedCooldown::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_SharedCooldown& CDOTAUserMsg_SharedCooldown::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_SharedCooldown* CDOTAUserMsg_SharedCooldown::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_SharedCooldown* n = new CDOTAUserMsg_SharedCooldown;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_SharedCooldown::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_SharedCooldown)
  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&entindex_, 0, reinterpret_cast<char*>(&name_index_) -
      reinterpret_cast<char*>(&entindex_) + sizeof(name_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_SharedCooldown::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_SharedCooldown)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 entindex = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_entindex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDOTAUserMsg_SharedCooldown.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float cooldown = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_cooldown();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cooldown_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 name_index = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_name_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &name_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_SharedCooldown)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_SharedCooldown)
  return false;
#undef DO_
}

void CDOTAUserMsg_SharedCooldown::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_SharedCooldown)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 entindex = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->entindex(), output);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAUserMsg_SharedCooldown.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional float cooldown = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->cooldown(), output);
  }

  // optional int32 name_index = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->name_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_SharedCooldown)
}

::google::protobuf::uint8* CDOTAUserMsg_SharedCooldown::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_SharedCooldown)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 entindex = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->entindex(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAUserMsg_SharedCooldown.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional float cooldown = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->cooldown(), target);
  }

  // optional int32 name_index = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->name_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_SharedCooldown)
  return target;
}

size_t CDOTAUserMsg_SharedCooldown::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_SharedCooldown)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 entindex = 1;
    if (has_entindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entindex());
    }

    // optional float cooldown = 3;
    if (has_cooldown()) {
      total_size += 1 + 4;
    }

    // optional int32 name_index = 4;
    if (has_name_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->name_index());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_SharedCooldown::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_SharedCooldown)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_SharedCooldown* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_SharedCooldown>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_SharedCooldown)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_SharedCooldown)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_SharedCooldown::MergeFrom(const CDOTAUserMsg_SharedCooldown& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_SharedCooldown)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      entindex_ = from.entindex_;
    }
    if (cached_has_bits & 0x00000004u) {
      cooldown_ = from.cooldown_;
    }
    if (cached_has_bits & 0x00000008u) {
      name_index_ = from.name_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_SharedCooldown::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_SharedCooldown)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_SharedCooldown::CopyFrom(const CDOTAUserMsg_SharedCooldown& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_SharedCooldown)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_SharedCooldown::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_SharedCooldown::Swap(CDOTAUserMsg_SharedCooldown* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_SharedCooldown::InternalSwap(CDOTAUserMsg_SharedCooldown* other) {
  name_.Swap(&other->name_);
  std::swap(entindex_, other->entindex_);
  std::swap(cooldown_, other->cooldown_);
  std::swap(name_index_, other->name_index_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_SharedCooldown::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_SharedCooldown

// optional int32 entindex = 1;
bool CDOTAUserMsg_SharedCooldown::has_entindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAUserMsg_SharedCooldown::set_has_entindex() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAUserMsg_SharedCooldown::clear_has_entindex() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAUserMsg_SharedCooldown::clear_entindex() {
  entindex_ = 0;
  clear_has_entindex();
}
::google::protobuf::int32 CDOTAUserMsg_SharedCooldown::entindex() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_SharedCooldown.entindex)
  return entindex_;
}
void CDOTAUserMsg_SharedCooldown::set_entindex(::google::protobuf::int32 value) {
  set_has_entindex();
  entindex_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_SharedCooldown.entindex)
}

// optional string name = 2;
bool CDOTAUserMsg_SharedCooldown::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_SharedCooldown::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_SharedCooldown::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_SharedCooldown::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& CDOTAUserMsg_SharedCooldown::name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_SharedCooldown.name)
  return name_.GetNoArena();
}
void CDOTAUserMsg_SharedCooldown::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_SharedCooldown.name)
}
#if LANG_CXX11
void CDOTAUserMsg_SharedCooldown::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDOTAUserMsg_SharedCooldown.name)
}
#endif
void CDOTAUserMsg_SharedCooldown::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDOTAUserMsg_SharedCooldown.name)
}
void CDOTAUserMsg_SharedCooldown::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDOTAUserMsg_SharedCooldown.name)
}
::std::string* CDOTAUserMsg_SharedCooldown::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_SharedCooldown.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDOTAUserMsg_SharedCooldown::release_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAUserMsg_SharedCooldown.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDOTAUserMsg_SharedCooldown::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAUserMsg_SharedCooldown.name)
}

// optional float cooldown = 3;
bool CDOTAUserMsg_SharedCooldown::has_cooldown() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDOTAUserMsg_SharedCooldown::set_has_cooldown() {
  _has_bits_[0] |= 0x00000004u;
}
void CDOTAUserMsg_SharedCooldown::clear_has_cooldown() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDOTAUserMsg_SharedCooldown::clear_cooldown() {
  cooldown_ = 0;
  clear_has_cooldown();
}
float CDOTAUserMsg_SharedCooldown::cooldown() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_SharedCooldown.cooldown)
  return cooldown_;
}
void CDOTAUserMsg_SharedCooldown::set_cooldown(float value) {
  set_has_cooldown();
  cooldown_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_SharedCooldown.cooldown)
}

// optional int32 name_index = 4;
bool CDOTAUserMsg_SharedCooldown::has_name_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CDOTAUserMsg_SharedCooldown::set_has_name_index() {
  _has_bits_[0] |= 0x00000008u;
}
void CDOTAUserMsg_SharedCooldown::clear_has_name_index() {
  _has_bits_[0] &= ~0x00000008u;
}
void CDOTAUserMsg_SharedCooldown::clear_name_index() {
  name_index_ = 0;
  clear_has_name_index();
}
::google::protobuf::int32 CDOTAUserMsg_SharedCooldown::name_index() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_SharedCooldown.name_index)
  return name_index_;
}
void CDOTAUserMsg_SharedCooldown::set_name_index(::google::protobuf::int32 value) {
  set_has_name_index();
  name_index_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_SharedCooldown.name_index)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_SetNextAutobuyItem::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_SetNextAutobuyItem::CDOTAUserMsg_SetNextAutobuyItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_SetNextAutobuyItem)
}
CDOTAUserMsg_SetNextAutobuyItem::CDOTAUserMsg_SetNextAutobuyItem(const CDOTAUserMsg_SetNextAutobuyItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_SetNextAutobuyItem)
}

void CDOTAUserMsg_SetNextAutobuyItem::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CDOTAUserMsg_SetNextAutobuyItem::~CDOTAUserMsg_SetNextAutobuyItem() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_SetNextAutobuyItem)
  SharedDtor();
}

void CDOTAUserMsg_SetNextAutobuyItem::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CDOTAUserMsg_SetNextAutobuyItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_SetNextAutobuyItem::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_SetNextAutobuyItem& CDOTAUserMsg_SetNextAutobuyItem::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_SetNextAutobuyItem* CDOTAUserMsg_SetNextAutobuyItem::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_SetNextAutobuyItem* n = new CDOTAUserMsg_SetNextAutobuyItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_SetNextAutobuyItem::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_SetNextAutobuyItem)
  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_SetNextAutobuyItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_SetNextAutobuyItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDOTAUserMsg_SetNextAutobuyItem.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_SetNextAutobuyItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_SetNextAutobuyItem)
  return false;
#undef DO_
}

void CDOTAUserMsg_SetNextAutobuyItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_SetNextAutobuyItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAUserMsg_SetNextAutobuyItem.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_SetNextAutobuyItem)
}

::google::protobuf::uint8* CDOTAUserMsg_SetNextAutobuyItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_SetNextAutobuyItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAUserMsg_SetNextAutobuyItem.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_SetNextAutobuyItem)
  return target;
}

size_t CDOTAUserMsg_SetNextAutobuyItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_SetNextAutobuyItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional string name = 1;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_SetNextAutobuyItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_SetNextAutobuyItem)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_SetNextAutobuyItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_SetNextAutobuyItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_SetNextAutobuyItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_SetNextAutobuyItem)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_SetNextAutobuyItem::MergeFrom(const CDOTAUserMsg_SetNextAutobuyItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_SetNextAutobuyItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_name()) {
    set_has_name();
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void CDOTAUserMsg_SetNextAutobuyItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_SetNextAutobuyItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_SetNextAutobuyItem::CopyFrom(const CDOTAUserMsg_SetNextAutobuyItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_SetNextAutobuyItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_SetNextAutobuyItem::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_SetNextAutobuyItem::Swap(CDOTAUserMsg_SetNextAutobuyItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_SetNextAutobuyItem::InternalSwap(CDOTAUserMsg_SetNextAutobuyItem* other) {
  name_.Swap(&other->name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_SetNextAutobuyItem::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_SetNextAutobuyItem

// optional string name = 1;
bool CDOTAUserMsg_SetNextAutobuyItem::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_SetNextAutobuyItem::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_SetNextAutobuyItem::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_SetNextAutobuyItem::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& CDOTAUserMsg_SetNextAutobuyItem::name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_SetNextAutobuyItem.name)
  return name_.GetNoArena();
}
void CDOTAUserMsg_SetNextAutobuyItem::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_SetNextAutobuyItem.name)
}
#if LANG_CXX11
void CDOTAUserMsg_SetNextAutobuyItem::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDOTAUserMsg_SetNextAutobuyItem.name)
}
#endif
void CDOTAUserMsg_SetNextAutobuyItem::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDOTAUserMsg_SetNextAutobuyItem.name)
}
void CDOTAUserMsg_SetNextAutobuyItem::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDOTAUserMsg_SetNextAutobuyItem.name)
}
::std::string* CDOTAUserMsg_SetNextAutobuyItem::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_SetNextAutobuyItem.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDOTAUserMsg_SetNextAutobuyItem::release_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAUserMsg_SetNextAutobuyItem.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDOTAUserMsg_SetNextAutobuyItem::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAUserMsg_SetNextAutobuyItem.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_HalloweenDrops::kItemDefsFieldNumber;
const int CDOTAUserMsg_HalloweenDrops::kPlayerIdsFieldNumber;
const int CDOTAUserMsg_HalloweenDrops::kPrizeListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_HalloweenDrops::CDOTAUserMsg_HalloweenDrops()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_HalloweenDrops)
}
CDOTAUserMsg_HalloweenDrops::CDOTAUserMsg_HalloweenDrops(const CDOTAUserMsg_HalloweenDrops& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      item_defs_(from.item_defs_),
      player_ids_(from.player_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  prize_list_ = from.prize_list_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_HalloweenDrops)
}

void CDOTAUserMsg_HalloweenDrops::SharedCtor() {
  _cached_size_ = 0;
  prize_list_ = 0u;
}

CDOTAUserMsg_HalloweenDrops::~CDOTAUserMsg_HalloweenDrops() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_HalloweenDrops)
  SharedDtor();
}

void CDOTAUserMsg_HalloweenDrops::SharedDtor() {
}

void CDOTAUserMsg_HalloweenDrops::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_HalloweenDrops::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_HalloweenDrops& CDOTAUserMsg_HalloweenDrops::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_HalloweenDrops* CDOTAUserMsg_HalloweenDrops::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_HalloweenDrops* n = new CDOTAUserMsg_HalloweenDrops;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_HalloweenDrops::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_HalloweenDrops)
  item_defs_.Clear();
  player_ids_.Clear();
  prize_list_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_HalloweenDrops::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_HalloweenDrops)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 item_defs = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_item_defs())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_item_defs())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 player_ids = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_player_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_player_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 prize_list = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_prize_list();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prize_list_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_HalloweenDrops)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_HalloweenDrops)
  return false;
#undef DO_
}

void CDOTAUserMsg_HalloweenDrops::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_HalloweenDrops)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 item_defs = 1;
  for (int i = 0, n = this->item_defs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->item_defs(i), output);
  }

  // repeated uint32 player_ids = 2;
  for (int i = 0, n = this->player_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->player_ids(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 prize_list = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->prize_list(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_HalloweenDrops)
}

::google::protobuf::uint8* CDOTAUserMsg_HalloweenDrops::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_HalloweenDrops)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 item_defs = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->item_defs_, target);

  // repeated uint32 player_ids = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(2, this->player_ids_, target);

  cached_has_bits = _has_bits_[0];
  // optional uint32 prize_list = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->prize_list(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_HalloweenDrops)
  return target;
}

size_t CDOTAUserMsg_HalloweenDrops::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_HalloweenDrops)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 item_defs = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->item_defs_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->item_defs_size());
    total_size += data_size;
  }

  // repeated uint32 player_ids = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->player_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->player_ids_size());
    total_size += data_size;
  }

  // optional uint32 prize_list = 3;
  if (has_prize_list()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->prize_list());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_HalloweenDrops::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_HalloweenDrops)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_HalloweenDrops* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_HalloweenDrops>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_HalloweenDrops)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_HalloweenDrops)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_HalloweenDrops::MergeFrom(const CDOTAUserMsg_HalloweenDrops& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_HalloweenDrops)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_defs_.MergeFrom(from.item_defs_);
  player_ids_.MergeFrom(from.player_ids_);
  if (from.has_prize_list()) {
    set_prize_list(from.prize_list());
  }
}

void CDOTAUserMsg_HalloweenDrops::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_HalloweenDrops)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_HalloweenDrops::CopyFrom(const CDOTAUserMsg_HalloweenDrops& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_HalloweenDrops)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_HalloweenDrops::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_HalloweenDrops::Swap(CDOTAUserMsg_HalloweenDrops* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_HalloweenDrops::InternalSwap(CDOTAUserMsg_HalloweenDrops* other) {
  item_defs_.InternalSwap(&other->item_defs_);
  player_ids_.InternalSwap(&other->player_ids_);
  std::swap(prize_list_, other->prize_list_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_HalloweenDrops::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_HalloweenDrops

// repeated uint32 item_defs = 1;
int CDOTAUserMsg_HalloweenDrops::item_defs_size() const {
  return item_defs_.size();
}
void CDOTAUserMsg_HalloweenDrops::clear_item_defs() {
  item_defs_.Clear();
}
::google::protobuf::uint32 CDOTAUserMsg_HalloweenDrops::item_defs(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_HalloweenDrops.item_defs)
  return item_defs_.Get(index);
}
void CDOTAUserMsg_HalloweenDrops::set_item_defs(int index, ::google::protobuf::uint32 value) {
  item_defs_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_HalloweenDrops.item_defs)
}
void CDOTAUserMsg_HalloweenDrops::add_item_defs(::google::protobuf::uint32 value) {
  item_defs_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAUserMsg_HalloweenDrops.item_defs)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CDOTAUserMsg_HalloweenDrops::item_defs() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTAUserMsg_HalloweenDrops.item_defs)
  return item_defs_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CDOTAUserMsg_HalloweenDrops::mutable_item_defs() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTAUserMsg_HalloweenDrops.item_defs)
  return &item_defs_;
}

// repeated uint32 player_ids = 2;
int CDOTAUserMsg_HalloweenDrops::player_ids_size() const {
  return player_ids_.size();
}
void CDOTAUserMsg_HalloweenDrops::clear_player_ids() {
  player_ids_.Clear();
}
::google::protobuf::uint32 CDOTAUserMsg_HalloweenDrops::player_ids(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_HalloweenDrops.player_ids)
  return player_ids_.Get(index);
}
void CDOTAUserMsg_HalloweenDrops::set_player_ids(int index, ::google::protobuf::uint32 value) {
  player_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_HalloweenDrops.player_ids)
}
void CDOTAUserMsg_HalloweenDrops::add_player_ids(::google::protobuf::uint32 value) {
  player_ids_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAUserMsg_HalloweenDrops.player_ids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CDOTAUserMsg_HalloweenDrops::player_ids() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTAUserMsg_HalloweenDrops.player_ids)
  return player_ids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CDOTAUserMsg_HalloweenDrops::mutable_player_ids() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTAUserMsg_HalloweenDrops.player_ids)
  return &player_ids_;
}

// optional uint32 prize_list = 3;
bool CDOTAUserMsg_HalloweenDrops::has_prize_list() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_HalloweenDrops::set_has_prize_list() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_HalloweenDrops::clear_has_prize_list() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_HalloweenDrops::clear_prize_list() {
  prize_list_ = 0u;
  clear_has_prize_list();
}
::google::protobuf::uint32 CDOTAUserMsg_HalloweenDrops::prize_list() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_HalloweenDrops.prize_list)
  return prize_list_;
}
void CDOTAUserMsg_HalloweenDrops::set_prize_list(::google::protobuf::uint32 value) {
  set_has_prize_list();
  prize_list_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_HalloweenDrops.prize_list)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_PredictionResult_Prediction::kItemDefFieldNumber;
const int CDOTAUserMsg_PredictionResult_Prediction::kNumCorrectFieldNumber;
const int CDOTAUserMsg_PredictionResult_Prediction::kNumFailsFieldNumber;
const int CDOTAUserMsg_PredictionResult_Prediction::kResultFieldNumber;
const int CDOTAUserMsg_PredictionResult_Prediction::kGrantedItemDefsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_PredictionResult_Prediction::CDOTAUserMsg_PredictionResult_Prediction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_PredictionResult.Prediction)
}
CDOTAUserMsg_PredictionResult_Prediction::CDOTAUserMsg_PredictionResult_Prediction(const CDOTAUserMsg_PredictionResult_Prediction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      granted_item_defs_(from.granted_item_defs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&item_def_, &from.item_def_,
    reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&item_def_) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_PredictionResult.Prediction)
}

void CDOTAUserMsg_PredictionResult_Prediction::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&item_def_, 0, reinterpret_cast<char*>(&num_fails_) -
    reinterpret_cast<char*>(&item_def_) + sizeof(num_fails_));
  result_ = 1;
}

CDOTAUserMsg_PredictionResult_Prediction::~CDOTAUserMsg_PredictionResult_Prediction() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_PredictionResult.Prediction)
  SharedDtor();
}

void CDOTAUserMsg_PredictionResult_Prediction::SharedDtor() {
}

void CDOTAUserMsg_PredictionResult_Prediction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_PredictionResult_Prediction::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_PredictionResult_Prediction& CDOTAUserMsg_PredictionResult_Prediction::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_PredictionResult_Prediction* CDOTAUserMsg_PredictionResult_Prediction::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_PredictionResult_Prediction* n = new CDOTAUserMsg_PredictionResult_Prediction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_PredictionResult_Prediction::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_PredictionResult.Prediction)
  granted_item_defs_.Clear();
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&item_def_, 0, reinterpret_cast<char*>(&num_fails_) -
      reinterpret_cast<char*>(&item_def_) + sizeof(num_fails_));
    result_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_PredictionResult_Prediction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_PredictionResult.Prediction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 item_def = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_item_def();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_def_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_correct = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_num_correct();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_correct_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_fails = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_num_fails();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_fails_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CDOTAUserMsg_PredictionResult.Prediction.EResult result = 4 [default = k_eResult_ItemGranted];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CDOTAUserMsg_PredictionResult_Prediction_EResult_IsValid(value)) {
            set_result(static_cast< ::proto::dota::CDOTAUserMsg_PredictionResult_Prediction_EResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 granted_item_defs = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48u, input, this->mutable_granted_item_defs())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(50u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_granted_item_defs())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_PredictionResult.Prediction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_PredictionResult.Prediction)
  return false;
#undef DO_
}

void CDOTAUserMsg_PredictionResult_Prediction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_PredictionResult.Prediction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 item_def = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->item_def(), output);
  }

  // optional uint32 num_correct = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num_correct(), output);
  }

  // optional uint32 num_fails = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->num_fails(), output);
  }

  // optional .proto.dota.CDOTAUserMsg_PredictionResult.Prediction.EResult result = 4 [default = k_eResult_ItemGranted];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->result(), output);
  }

  // repeated uint32 granted_item_defs = 6;
  for (int i = 0, n = this->granted_item_defs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->granted_item_defs(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_PredictionResult.Prediction)
}

::google::protobuf::uint8* CDOTAUserMsg_PredictionResult_Prediction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_PredictionResult.Prediction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 item_def = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->item_def(), target);
  }

  // optional uint32 num_correct = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num_correct(), target);
  }

  // optional uint32 num_fails = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->num_fails(), target);
  }

  // optional .proto.dota.CDOTAUserMsg_PredictionResult.Prediction.EResult result = 4 [default = k_eResult_ItemGranted];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->result(), target);
  }

  // repeated uint32 granted_item_defs = 6;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(6, this->granted_item_defs_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_PredictionResult.Prediction)
  return target;
}

size_t CDOTAUserMsg_PredictionResult_Prediction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_PredictionResult.Prediction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 granted_item_defs = 6;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->granted_item_defs_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->granted_item_defs_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional uint32 item_def = 1;
    if (has_item_def()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_def());
    }

    // optional uint32 num_correct = 2;
    if (has_num_correct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_correct());
    }

    // optional uint32 num_fails = 3;
    if (has_num_fails()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_fails());
    }

    // optional .proto.dota.CDOTAUserMsg_PredictionResult.Prediction.EResult result = 4 [default = k_eResult_ItemGranted];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_PredictionResult_Prediction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_PredictionResult.Prediction)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_PredictionResult_Prediction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_PredictionResult_Prediction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_PredictionResult.Prediction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_PredictionResult.Prediction)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_PredictionResult_Prediction::MergeFrom(const CDOTAUserMsg_PredictionResult_Prediction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_PredictionResult.Prediction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  granted_item_defs_.MergeFrom(from.granted_item_defs_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      item_def_ = from.item_def_;
    }
    if (cached_has_bits & 0x00000002u) {
      num_correct_ = from.num_correct_;
    }
    if (cached_has_bits & 0x00000004u) {
      num_fails_ = from.num_fails_;
    }
    if (cached_has_bits & 0x00000008u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_PredictionResult_Prediction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_PredictionResult.Prediction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_PredictionResult_Prediction::CopyFrom(const CDOTAUserMsg_PredictionResult_Prediction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_PredictionResult.Prediction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_PredictionResult_Prediction::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_PredictionResult_Prediction::Swap(CDOTAUserMsg_PredictionResult_Prediction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_PredictionResult_Prediction::InternalSwap(CDOTAUserMsg_PredictionResult_Prediction* other) {
  granted_item_defs_.InternalSwap(&other->granted_item_defs_);
  std::swap(item_def_, other->item_def_);
  std::swap(num_correct_, other->num_correct_);
  std::swap(num_fails_, other->num_fails_);
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_PredictionResult_Prediction::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_PredictionResult_Prediction

// optional uint32 item_def = 1;
bool CDOTAUserMsg_PredictionResult_Prediction::has_item_def() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_PredictionResult_Prediction::set_has_item_def() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_PredictionResult_Prediction::clear_has_item_def() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_PredictionResult_Prediction::clear_item_def() {
  item_def_ = 0u;
  clear_has_item_def();
}
::google::protobuf::uint32 CDOTAUserMsg_PredictionResult_Prediction::item_def() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_PredictionResult.Prediction.item_def)
  return item_def_;
}
void CDOTAUserMsg_PredictionResult_Prediction::set_item_def(::google::protobuf::uint32 value) {
  set_has_item_def();
  item_def_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_PredictionResult.Prediction.item_def)
}

// optional uint32 num_correct = 2;
bool CDOTAUserMsg_PredictionResult_Prediction::has_num_correct() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAUserMsg_PredictionResult_Prediction::set_has_num_correct() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAUserMsg_PredictionResult_Prediction::clear_has_num_correct() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAUserMsg_PredictionResult_Prediction::clear_num_correct() {
  num_correct_ = 0u;
  clear_has_num_correct();
}
::google::protobuf::uint32 CDOTAUserMsg_PredictionResult_Prediction::num_correct() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_PredictionResult.Prediction.num_correct)
  return num_correct_;
}
void CDOTAUserMsg_PredictionResult_Prediction::set_num_correct(::google::protobuf::uint32 value) {
  set_has_num_correct();
  num_correct_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_PredictionResult.Prediction.num_correct)
}

// optional uint32 num_fails = 3;
bool CDOTAUserMsg_PredictionResult_Prediction::has_num_fails() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDOTAUserMsg_PredictionResult_Prediction::set_has_num_fails() {
  _has_bits_[0] |= 0x00000004u;
}
void CDOTAUserMsg_PredictionResult_Prediction::clear_has_num_fails() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDOTAUserMsg_PredictionResult_Prediction::clear_num_fails() {
  num_fails_ = 0u;
  clear_has_num_fails();
}
::google::protobuf::uint32 CDOTAUserMsg_PredictionResult_Prediction::num_fails() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_PredictionResult.Prediction.num_fails)
  return num_fails_;
}
void CDOTAUserMsg_PredictionResult_Prediction::set_num_fails(::google::protobuf::uint32 value) {
  set_has_num_fails();
  num_fails_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_PredictionResult.Prediction.num_fails)
}

// optional .proto.dota.CDOTAUserMsg_PredictionResult.Prediction.EResult result = 4 [default = k_eResult_ItemGranted];
bool CDOTAUserMsg_PredictionResult_Prediction::has_result() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CDOTAUserMsg_PredictionResult_Prediction::set_has_result() {
  _has_bits_[0] |= 0x00000008u;
}
void CDOTAUserMsg_PredictionResult_Prediction::clear_has_result() {
  _has_bits_[0] &= ~0x00000008u;
}
void CDOTAUserMsg_PredictionResult_Prediction::clear_result() {
  result_ = 1;
  clear_has_result();
}
::proto::dota::CDOTAUserMsg_PredictionResult_Prediction_EResult CDOTAUserMsg_PredictionResult_Prediction::result() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_PredictionResult.Prediction.result)
  return static_cast< ::proto::dota::CDOTAUserMsg_PredictionResult_Prediction_EResult >(result_);
}
void CDOTAUserMsg_PredictionResult_Prediction::set_result(::proto::dota::CDOTAUserMsg_PredictionResult_Prediction_EResult value) {
  assert(::proto::dota::CDOTAUserMsg_PredictionResult_Prediction_EResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_PredictionResult.Prediction.result)
}

// repeated uint32 granted_item_defs = 6;
int CDOTAUserMsg_PredictionResult_Prediction::granted_item_defs_size() const {
  return granted_item_defs_.size();
}
void CDOTAUserMsg_PredictionResult_Prediction::clear_granted_item_defs() {
  granted_item_defs_.Clear();
}
::google::protobuf::uint32 CDOTAUserMsg_PredictionResult_Prediction::granted_item_defs(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_PredictionResult.Prediction.granted_item_defs)
  return granted_item_defs_.Get(index);
}
void CDOTAUserMsg_PredictionResult_Prediction::set_granted_item_defs(int index, ::google::protobuf::uint32 value) {
  granted_item_defs_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_PredictionResult.Prediction.granted_item_defs)
}
void CDOTAUserMsg_PredictionResult_Prediction::add_granted_item_defs(::google::protobuf::uint32 value) {
  granted_item_defs_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAUserMsg_PredictionResult.Prediction.granted_item_defs)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CDOTAUserMsg_PredictionResult_Prediction::granted_item_defs() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTAUserMsg_PredictionResult.Prediction.granted_item_defs)
  return granted_item_defs_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CDOTAUserMsg_PredictionResult_Prediction::mutable_granted_item_defs() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTAUserMsg_PredictionResult.Prediction.granted_item_defs)
  return &granted_item_defs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_PredictionResult::kAccountIdFieldNumber;
const int CDOTAUserMsg_PredictionResult::kMatchIdFieldNumber;
const int CDOTAUserMsg_PredictionResult::kCorrectFieldNumber;
const int CDOTAUserMsg_PredictionResult::kPredictionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_PredictionResult::CDOTAUserMsg_PredictionResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_PredictionResult)
}
CDOTAUserMsg_PredictionResult::CDOTAUserMsg_PredictionResult(const CDOTAUserMsg_PredictionResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      predictions_(from.predictions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&match_id_, &from.match_id_,
    reinterpret_cast<char*>(&correct_) -
    reinterpret_cast<char*>(&match_id_) + sizeof(correct_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_PredictionResult)
}

void CDOTAUserMsg_PredictionResult::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&match_id_, 0, reinterpret_cast<char*>(&correct_) -
    reinterpret_cast<char*>(&match_id_) + sizeof(correct_));
}

CDOTAUserMsg_PredictionResult::~CDOTAUserMsg_PredictionResult() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_PredictionResult)
  SharedDtor();
}

void CDOTAUserMsg_PredictionResult::SharedDtor() {
}

void CDOTAUserMsg_PredictionResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_PredictionResult::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_PredictionResult& CDOTAUserMsg_PredictionResult::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_PredictionResult* CDOTAUserMsg_PredictionResult::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_PredictionResult* n = new CDOTAUserMsg_PredictionResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_PredictionResult::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_PredictionResult)
  predictions_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&match_id_, 0, reinterpret_cast<char*>(&correct_) -
      reinterpret_cast<char*>(&match_id_) + sizeof(correct_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_PredictionResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_PredictionResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 match_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_match_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool correct = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_correct();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &correct_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CDOTAUserMsg_PredictionResult.Prediction predictions = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_predictions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_PredictionResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_PredictionResult)
  return false;
#undef DO_
}

void CDOTAUserMsg_PredictionResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_PredictionResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint64 match_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->match_id(), output);
  }

  // optional bool correct = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->correct(), output);
  }

  // repeated .proto.dota.CDOTAUserMsg_PredictionResult.Prediction predictions = 4;
  for (unsigned int i = 0, n = this->predictions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->predictions(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_PredictionResult)
}

::google::protobuf::uint8* CDOTAUserMsg_PredictionResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_PredictionResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint64 match_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->match_id(), target);
  }

  // optional bool correct = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->correct(), target);
  }

  // repeated .proto.dota.CDOTAUserMsg_PredictionResult.Prediction predictions = 4;
  for (unsigned int i = 0, n = this->predictions_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->predictions(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_PredictionResult)
  return target;
}

size_t CDOTAUserMsg_PredictionResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_PredictionResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CDOTAUserMsg_PredictionResult.Prediction predictions = 4;
  {
    unsigned int count = this->predictions_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->predictions(i));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional uint64 match_id = 2;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional bool correct = 3;
    if (has_correct()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_PredictionResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_PredictionResult)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_PredictionResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_PredictionResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_PredictionResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_PredictionResult)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_PredictionResult::MergeFrom(const CDOTAUserMsg_PredictionResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_PredictionResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  predictions_.MergeFrom(from.predictions_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      correct_ = from.correct_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_PredictionResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_PredictionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_PredictionResult::CopyFrom(const CDOTAUserMsg_PredictionResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_PredictionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_PredictionResult::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_PredictionResult::Swap(CDOTAUserMsg_PredictionResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_PredictionResult::InternalSwap(CDOTAUserMsg_PredictionResult* other) {
  predictions_.InternalSwap(&other->predictions_);
  std::swap(match_id_, other->match_id_);
  std::swap(account_id_, other->account_id_);
  std::swap(correct_, other->correct_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_PredictionResult::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_PredictionResult

// optional uint32 account_id = 1;
bool CDOTAUserMsg_PredictionResult::has_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAUserMsg_PredictionResult::set_has_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAUserMsg_PredictionResult::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAUserMsg_PredictionResult::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
::google::protobuf::uint32 CDOTAUserMsg_PredictionResult::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_PredictionResult.account_id)
  return account_id_;
}
void CDOTAUserMsg_PredictionResult::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_PredictionResult.account_id)
}

// optional uint64 match_id = 2;
bool CDOTAUserMsg_PredictionResult::has_match_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_PredictionResult::set_has_match_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_PredictionResult::clear_has_match_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_PredictionResult::clear_match_id() {
  match_id_ = GOOGLE_ULONGLONG(0);
  clear_has_match_id();
}
::google::protobuf::uint64 CDOTAUserMsg_PredictionResult::match_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_PredictionResult.match_id)
  return match_id_;
}
void CDOTAUserMsg_PredictionResult::set_match_id(::google::protobuf::uint64 value) {
  set_has_match_id();
  match_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_PredictionResult.match_id)
}

// optional bool correct = 3;
bool CDOTAUserMsg_PredictionResult::has_correct() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDOTAUserMsg_PredictionResult::set_has_correct() {
  _has_bits_[0] |= 0x00000004u;
}
void CDOTAUserMsg_PredictionResult::clear_has_correct() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDOTAUserMsg_PredictionResult::clear_correct() {
  correct_ = false;
  clear_has_correct();
}
bool CDOTAUserMsg_PredictionResult::correct() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_PredictionResult.correct)
  return correct_;
}
void CDOTAUserMsg_PredictionResult::set_correct(bool value) {
  set_has_correct();
  correct_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_PredictionResult.correct)
}

// repeated .proto.dota.CDOTAUserMsg_PredictionResult.Prediction predictions = 4;
int CDOTAUserMsg_PredictionResult::predictions_size() const {
  return predictions_.size();
}
void CDOTAUserMsg_PredictionResult::clear_predictions() {
  predictions_.Clear();
}
const ::proto::dota::CDOTAUserMsg_PredictionResult_Prediction& CDOTAUserMsg_PredictionResult::predictions(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_PredictionResult.predictions)
  return predictions_.Get(index);
}
::proto::dota::CDOTAUserMsg_PredictionResult_Prediction* CDOTAUserMsg_PredictionResult::mutable_predictions(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_PredictionResult.predictions)
  return predictions_.Mutable(index);
}
::proto::dota::CDOTAUserMsg_PredictionResult_Prediction* CDOTAUserMsg_PredictionResult::add_predictions() {
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAUserMsg_PredictionResult.predictions)
  return predictions_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAUserMsg_PredictionResult_Prediction >*
CDOTAUserMsg_PredictionResult::mutable_predictions() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTAUserMsg_PredictionResult.predictions)
  return &predictions_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAUserMsg_PredictionResult_Prediction >&
CDOTAUserMsg_PredictionResult::predictions() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTAUserMsg_PredictionResult.predictions)
  return predictions_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAResponseQuerySerialized_Fact::kKeyFieldNumber;
const int CDOTAResponseQuerySerialized_Fact::kValtypeFieldNumber;
const int CDOTAResponseQuerySerialized_Fact::kValNumericFieldNumber;
const int CDOTAResponseQuerySerialized_Fact::kValStringFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAResponseQuerySerialized_Fact::CDOTAResponseQuerySerialized_Fact()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAResponseQuerySerialized.Fact)
}
CDOTAResponseQuerySerialized_Fact::CDOTAResponseQuerySerialized_Fact(const CDOTAResponseQuerySerialized_Fact& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  val_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_val_string()) {
    val_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.val_string_);
  }
  ::memcpy(&key_, &from.key_,
    reinterpret_cast<char*>(&valtype_) -
    reinterpret_cast<char*>(&key_) + sizeof(valtype_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAResponseQuerySerialized.Fact)
}

void CDOTAResponseQuerySerialized_Fact::SharedCtor() {
  _cached_size_ = 0;
  val_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&key_, 0, reinterpret_cast<char*>(&val_numeric_) -
    reinterpret_cast<char*>(&key_) + sizeof(val_numeric_));
  valtype_ = 1;
}

CDOTAResponseQuerySerialized_Fact::~CDOTAResponseQuerySerialized_Fact() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAResponseQuerySerialized.Fact)
  SharedDtor();
}

void CDOTAResponseQuerySerialized_Fact::SharedDtor() {
  val_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CDOTAResponseQuerySerialized_Fact::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAResponseQuerySerialized_Fact::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAResponseQuerySerialized_Fact& CDOTAResponseQuerySerialized_Fact::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAResponseQuerySerialized_Fact* CDOTAResponseQuerySerialized_Fact::New(::google::protobuf::Arena* arena) const {
  CDOTAResponseQuerySerialized_Fact* n = new CDOTAResponseQuerySerialized_Fact;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAResponseQuerySerialized_Fact::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAResponseQuerySerialized.Fact)
  if (has_val_string()) {
    GOOGLE_DCHECK(!val_string_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*val_string_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&key_, 0, reinterpret_cast<char*>(&val_numeric_) -
      reinterpret_cast<char*>(&key_) + sizeof(val_numeric_));
    valtype_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAResponseQuerySerialized_Fact::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAResponseQuerySerialized.Fact)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_key();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .proto.dota.CDOTAResponseQuerySerialized.Fact.ValueType valtype = 2 [default = NUMERIC];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CDOTAResponseQuerySerialized_Fact_ValueType_IsValid(value)) {
            set_valtype(static_cast< ::proto::dota::CDOTAResponseQuerySerialized_Fact_ValueType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float val_numeric = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_val_numeric();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &val_numeric_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string val_string = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_val_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->val_string().data(), this->val_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDOTAResponseQuerySerialized.Fact.val_string");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAResponseQuerySerialized.Fact)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAResponseQuerySerialized.Fact)
  return false;
#undef DO_
}

void CDOTAResponseQuerySerialized_Fact::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAResponseQuerySerialized.Fact)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 key = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->key(), output);
  }

  // required .proto.dota.CDOTAResponseQuerySerialized.Fact.ValueType valtype = 2 [default = NUMERIC];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->valtype(), output);
  }

  // optional float val_numeric = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->val_numeric(), output);
  }

  // optional string val_string = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->val_string().data(), this->val_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAResponseQuerySerialized.Fact.val_string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->val_string(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAResponseQuerySerialized.Fact)
}

::google::protobuf::uint8* CDOTAResponseQuerySerialized_Fact::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAResponseQuerySerialized.Fact)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 key = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->key(), target);
  }

  // required .proto.dota.CDOTAResponseQuerySerialized.Fact.ValueType valtype = 2 [default = NUMERIC];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->valtype(), target);
  }

  // optional float val_numeric = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->val_numeric(), target);
  }

  // optional string val_string = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->val_string().data(), this->val_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAResponseQuerySerialized.Fact.val_string");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->val_string(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAResponseQuerySerialized.Fact)
  return target;
}

size_t CDOTAResponseQuerySerialized_Fact::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:proto.dota.CDOTAResponseQuerySerialized.Fact)
  size_t total_size = 0;

  if (has_key()) {
    // required int32 key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->key());
  }

  if (has_valtype()) {
    // required .proto.dota.CDOTAResponseQuerySerialized.Fact.ValueType valtype = 2 [default = NUMERIC];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->valtype());
  }

  return total_size;
}
size_t CDOTAResponseQuerySerialized_Fact::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAResponseQuerySerialized.Fact)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000a) ^ 0x0000000a) == 0) {  // All required fields are present.
    // required int32 key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->key());

    // required .proto.dota.CDOTAResponseQuerySerialized.Fact.ValueType valtype = 2 [default = NUMERIC];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->valtype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string val_string = 4;
  if (has_val_string()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->val_string());
  }

  // optional float val_numeric = 3;
  if (has_val_numeric()) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAResponseQuerySerialized_Fact::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAResponseQuerySerialized.Fact)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAResponseQuerySerialized_Fact* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAResponseQuerySerialized_Fact>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAResponseQuerySerialized.Fact)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAResponseQuerySerialized.Fact)
    MergeFrom(*source);
  }
}

void CDOTAResponseQuerySerialized_Fact::MergeFrom(const CDOTAResponseQuerySerialized_Fact& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAResponseQuerySerialized.Fact)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_val_string();
      val_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.val_string_);
    }
    if (cached_has_bits & 0x00000002u) {
      key_ = from.key_;
    }
    if (cached_has_bits & 0x00000004u) {
      val_numeric_ = from.val_numeric_;
    }
    if (cached_has_bits & 0x00000008u) {
      valtype_ = from.valtype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAResponseQuerySerialized_Fact::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAResponseQuerySerialized.Fact)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAResponseQuerySerialized_Fact::CopyFrom(const CDOTAResponseQuerySerialized_Fact& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAResponseQuerySerialized.Fact)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAResponseQuerySerialized_Fact::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000a) != 0x0000000a) return false;
  return true;
}

void CDOTAResponseQuerySerialized_Fact::Swap(CDOTAResponseQuerySerialized_Fact* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAResponseQuerySerialized_Fact::InternalSwap(CDOTAResponseQuerySerialized_Fact* other) {
  val_string_.Swap(&other->val_string_);
  std::swap(key_, other->key_);
  std::swap(val_numeric_, other->val_numeric_);
  std::swap(valtype_, other->valtype_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAResponseQuerySerialized_Fact::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAResponseQuerySerialized_Fact

// required int32 key = 1;
bool CDOTAResponseQuerySerialized_Fact::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAResponseQuerySerialized_Fact::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAResponseQuerySerialized_Fact::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAResponseQuerySerialized_Fact::clear_key() {
  key_ = 0;
  clear_has_key();
}
::google::protobuf::int32 CDOTAResponseQuerySerialized_Fact::key() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAResponseQuerySerialized.Fact.key)
  return key_;
}
void CDOTAResponseQuerySerialized_Fact::set_key(::google::protobuf::int32 value) {
  set_has_key();
  key_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAResponseQuerySerialized.Fact.key)
}

// required .proto.dota.CDOTAResponseQuerySerialized.Fact.ValueType valtype = 2 [default = NUMERIC];
bool CDOTAResponseQuerySerialized_Fact::has_valtype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CDOTAResponseQuerySerialized_Fact::set_has_valtype() {
  _has_bits_[0] |= 0x00000008u;
}
void CDOTAResponseQuerySerialized_Fact::clear_has_valtype() {
  _has_bits_[0] &= ~0x00000008u;
}
void CDOTAResponseQuerySerialized_Fact::clear_valtype() {
  valtype_ = 1;
  clear_has_valtype();
}
::proto::dota::CDOTAResponseQuerySerialized_Fact_ValueType CDOTAResponseQuerySerialized_Fact::valtype() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAResponseQuerySerialized.Fact.valtype)
  return static_cast< ::proto::dota::CDOTAResponseQuerySerialized_Fact_ValueType >(valtype_);
}
void CDOTAResponseQuerySerialized_Fact::set_valtype(::proto::dota::CDOTAResponseQuerySerialized_Fact_ValueType value) {
  assert(::proto::dota::CDOTAResponseQuerySerialized_Fact_ValueType_IsValid(value));
  set_has_valtype();
  valtype_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAResponseQuerySerialized.Fact.valtype)
}

// optional float val_numeric = 3;
bool CDOTAResponseQuerySerialized_Fact::has_val_numeric() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDOTAResponseQuerySerialized_Fact::set_has_val_numeric() {
  _has_bits_[0] |= 0x00000004u;
}
void CDOTAResponseQuerySerialized_Fact::clear_has_val_numeric() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDOTAResponseQuerySerialized_Fact::clear_val_numeric() {
  val_numeric_ = 0;
  clear_has_val_numeric();
}
float CDOTAResponseQuerySerialized_Fact::val_numeric() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAResponseQuerySerialized.Fact.val_numeric)
  return val_numeric_;
}
void CDOTAResponseQuerySerialized_Fact::set_val_numeric(float value) {
  set_has_val_numeric();
  val_numeric_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAResponseQuerySerialized.Fact.val_numeric)
}

// optional string val_string = 4;
bool CDOTAResponseQuerySerialized_Fact::has_val_string() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAResponseQuerySerialized_Fact::set_has_val_string() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAResponseQuerySerialized_Fact::clear_has_val_string() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAResponseQuerySerialized_Fact::clear_val_string() {
  val_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_val_string();
}
const ::std::string& CDOTAResponseQuerySerialized_Fact::val_string() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAResponseQuerySerialized.Fact.val_string)
  return val_string_.GetNoArena();
}
void CDOTAResponseQuerySerialized_Fact::set_val_string(const ::std::string& value) {
  set_has_val_string();
  val_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAResponseQuerySerialized.Fact.val_string)
}
#if LANG_CXX11
void CDOTAResponseQuerySerialized_Fact::set_val_string(::std::string&& value) {
  set_has_val_string();
  val_string_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDOTAResponseQuerySerialized.Fact.val_string)
}
#endif
void CDOTAResponseQuerySerialized_Fact::set_val_string(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_val_string();
  val_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDOTAResponseQuerySerialized.Fact.val_string)
}
void CDOTAResponseQuerySerialized_Fact::set_val_string(const char* value, size_t size) {
  set_has_val_string();
  val_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDOTAResponseQuerySerialized.Fact.val_string)
}
::std::string* CDOTAResponseQuerySerialized_Fact::mutable_val_string() {
  set_has_val_string();
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAResponseQuerySerialized.Fact.val_string)
  return val_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDOTAResponseQuerySerialized_Fact::release_val_string() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAResponseQuerySerialized.Fact.val_string)
  clear_has_val_string();
  return val_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDOTAResponseQuerySerialized_Fact::set_allocated_val_string(::std::string* val_string) {
  if (val_string != NULL) {
    set_has_val_string();
  } else {
    clear_has_val_string();
  }
  val_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), val_string);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAResponseQuerySerialized.Fact.val_string)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAResponseQuerySerialized::kFactsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAResponseQuerySerialized::CDOTAResponseQuerySerialized()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAResponseQuerySerialized)
}
CDOTAResponseQuerySerialized::CDOTAResponseQuerySerialized(const CDOTAResponseQuerySerialized& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      facts_(from.facts_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAResponseQuerySerialized)
}

void CDOTAResponseQuerySerialized::SharedCtor() {
  _cached_size_ = 0;
}

CDOTAResponseQuerySerialized::~CDOTAResponseQuerySerialized() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAResponseQuerySerialized)
  SharedDtor();
}

void CDOTAResponseQuerySerialized::SharedDtor() {
}

void CDOTAResponseQuerySerialized::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAResponseQuerySerialized::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAResponseQuerySerialized& CDOTAResponseQuerySerialized::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAResponseQuerySerialized* CDOTAResponseQuerySerialized::New(::google::protobuf::Arena* arena) const {
  CDOTAResponseQuerySerialized* n = new CDOTAResponseQuerySerialized;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAResponseQuerySerialized::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAResponseQuerySerialized)
  facts_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAResponseQuerySerialized::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAResponseQuerySerialized)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CDOTAResponseQuerySerialized.Fact facts = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_facts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAResponseQuerySerialized)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAResponseQuerySerialized)
  return false;
#undef DO_
}

void CDOTAResponseQuerySerialized::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAResponseQuerySerialized)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CDOTAResponseQuerySerialized.Fact facts = 1;
  for (unsigned int i = 0, n = this->facts_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->facts(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAResponseQuerySerialized)
}

::google::protobuf::uint8* CDOTAResponseQuerySerialized::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAResponseQuerySerialized)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CDOTAResponseQuerySerialized.Fact facts = 1;
  for (unsigned int i = 0, n = this->facts_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->facts(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAResponseQuerySerialized)
  return target;
}

size_t CDOTAResponseQuerySerialized::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAResponseQuerySerialized)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CDOTAResponseQuerySerialized.Fact facts = 1;
  {
    unsigned int count = this->facts_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->facts(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAResponseQuerySerialized::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAResponseQuerySerialized)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAResponseQuerySerialized* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAResponseQuerySerialized>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAResponseQuerySerialized)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAResponseQuerySerialized)
    MergeFrom(*source);
  }
}

void CDOTAResponseQuerySerialized::MergeFrom(const CDOTAResponseQuerySerialized& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAResponseQuerySerialized)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  facts_.MergeFrom(from.facts_);
}

void CDOTAResponseQuerySerialized::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAResponseQuerySerialized)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAResponseQuerySerialized::CopyFrom(const CDOTAResponseQuerySerialized& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAResponseQuerySerialized)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAResponseQuerySerialized::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->facts())) return false;
  return true;
}

void CDOTAResponseQuerySerialized::Swap(CDOTAResponseQuerySerialized* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAResponseQuerySerialized::InternalSwap(CDOTAResponseQuerySerialized* other) {
  facts_.InternalSwap(&other->facts_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAResponseQuerySerialized::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAResponseQuerySerialized

// repeated .proto.dota.CDOTAResponseQuerySerialized.Fact facts = 1;
int CDOTAResponseQuerySerialized::facts_size() const {
  return facts_.size();
}
void CDOTAResponseQuerySerialized::clear_facts() {
  facts_.Clear();
}
const ::proto::dota::CDOTAResponseQuerySerialized_Fact& CDOTAResponseQuerySerialized::facts(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAResponseQuerySerialized.facts)
  return facts_.Get(index);
}
::proto::dota::CDOTAResponseQuerySerialized_Fact* CDOTAResponseQuerySerialized::mutable_facts(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAResponseQuerySerialized.facts)
  return facts_.Mutable(index);
}
::proto::dota::CDOTAResponseQuerySerialized_Fact* CDOTAResponseQuerySerialized::add_facts() {
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAResponseQuerySerialized.facts)
  return facts_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAResponseQuerySerialized_Fact >*
CDOTAResponseQuerySerialized::mutable_facts() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTAResponseQuerySerialized.facts)
  return &facts_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAResponseQuerySerialized_Fact >&
CDOTAResponseQuerySerialized::facts() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTAResponseQuerySerialized.facts)
  return facts_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTASpeechMatchOnClient::kConceptFieldNumber;
const int CDOTASpeechMatchOnClient::kRecipientTypeFieldNumber;
const int CDOTASpeechMatchOnClient::kResponsequeryFieldNumber;
const int CDOTASpeechMatchOnClient::kRandomseedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTASpeechMatchOnClient::CDOTASpeechMatchOnClient()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTASpeechMatchOnClient)
}
CDOTASpeechMatchOnClient::CDOTASpeechMatchOnClient(const CDOTASpeechMatchOnClient& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_responsequery()) {
    responsequery_ = new ::proto::dota::CDOTAResponseQuerySerialized(*from.responsequery_);
  } else {
    responsequery_ = NULL;
  }
  ::memcpy(&concept_, &from.concept_,
    reinterpret_cast<char*>(&randomseed_) -
    reinterpret_cast<char*>(&concept_) + sizeof(randomseed_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTASpeechMatchOnClient)
}

void CDOTASpeechMatchOnClient::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&responsequery_, 0, reinterpret_cast<char*>(&randomseed_) -
    reinterpret_cast<char*>(&responsequery_) + sizeof(randomseed_));
}

CDOTASpeechMatchOnClient::~CDOTASpeechMatchOnClient() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTASpeechMatchOnClient)
  SharedDtor();
}

void CDOTASpeechMatchOnClient::SharedDtor() {
  if (this != internal_default_instance()) {
    delete responsequery_;
  }
}

void CDOTASpeechMatchOnClient::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTASpeechMatchOnClient::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTASpeechMatchOnClient& CDOTASpeechMatchOnClient::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTASpeechMatchOnClient* CDOTASpeechMatchOnClient::New(::google::protobuf::Arena* arena) const {
  CDOTASpeechMatchOnClient* n = new CDOTASpeechMatchOnClient;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTASpeechMatchOnClient::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTASpeechMatchOnClient)
  if (has_responsequery()) {
    GOOGLE_DCHECK(responsequery_ != NULL);
    responsequery_->::proto::dota::CDOTAResponseQuerySerialized::Clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&concept_, 0, reinterpret_cast<char*>(&randomseed_) -
      reinterpret_cast<char*>(&concept_) + sizeof(randomseed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTASpeechMatchOnClient::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTASpeechMatchOnClient)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 concept = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_concept();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &concept_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 recipient_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_recipient_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recipient_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CDOTAResponseQuerySerialized responsequery = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_responsequery()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sfixed32 randomseed = 4 [default = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_randomseed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &randomseed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTASpeechMatchOnClient)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTASpeechMatchOnClient)
  return false;
#undef DO_
}

void CDOTASpeechMatchOnClient::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTASpeechMatchOnClient)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 concept = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->concept(), output);
  }

  // optional int32 recipient_type = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->recipient_type(), output);
  }

  // optional .proto.dota.CDOTAResponseQuerySerialized responsequery = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->responsequery_, output);
  }

  // optional sfixed32 randomseed = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(4, this->randomseed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTASpeechMatchOnClient)
}

::google::protobuf::uint8* CDOTASpeechMatchOnClient::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTASpeechMatchOnClient)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 concept = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->concept(), target);
  }

  // optional int32 recipient_type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->recipient_type(), target);
  }

  // optional .proto.dota.CDOTAResponseQuerySerialized responsequery = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->responsequery_, deterministic, target);
  }

  // optional sfixed32 randomseed = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(4, this->randomseed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTASpeechMatchOnClient)
  return target;
}

size_t CDOTASpeechMatchOnClient::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTASpeechMatchOnClient)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional .proto.dota.CDOTAResponseQuerySerialized responsequery = 3;
    if (has_responsequery()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->responsequery_);
    }

    // optional int32 concept = 1;
    if (has_concept()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->concept());
    }

    // optional int32 recipient_type = 2;
    if (has_recipient_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->recipient_type());
    }

    // optional sfixed32 randomseed = 4 [default = 0];
    if (has_randomseed()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTASpeechMatchOnClient::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTASpeechMatchOnClient)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTASpeechMatchOnClient* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTASpeechMatchOnClient>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTASpeechMatchOnClient)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTASpeechMatchOnClient)
    MergeFrom(*source);
  }
}

void CDOTASpeechMatchOnClient::MergeFrom(const CDOTASpeechMatchOnClient& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTASpeechMatchOnClient)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_responsequery()->::proto::dota::CDOTAResponseQuerySerialized::MergeFrom(from.responsequery());
    }
    if (cached_has_bits & 0x00000002u) {
      concept_ = from.concept_;
    }
    if (cached_has_bits & 0x00000004u) {
      recipient_type_ = from.recipient_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      randomseed_ = from.randomseed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTASpeechMatchOnClient::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTASpeechMatchOnClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTASpeechMatchOnClient::CopyFrom(const CDOTASpeechMatchOnClient& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTASpeechMatchOnClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTASpeechMatchOnClient::IsInitialized() const {
  if (has_responsequery()) {
    if (!this->responsequery_->IsInitialized()) return false;
  }
  return true;
}

void CDOTASpeechMatchOnClient::Swap(CDOTASpeechMatchOnClient* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTASpeechMatchOnClient::InternalSwap(CDOTASpeechMatchOnClient* other) {
  std::swap(responsequery_, other->responsequery_);
  std::swap(concept_, other->concept_);
  std::swap(recipient_type_, other->recipient_type_);
  std::swap(randomseed_, other->randomseed_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTASpeechMatchOnClient::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTASpeechMatchOnClient

// optional int32 concept = 1;
bool CDOTASpeechMatchOnClient::has_concept() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTASpeechMatchOnClient::set_has_concept() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTASpeechMatchOnClient::clear_has_concept() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTASpeechMatchOnClient::clear_concept() {
  concept_ = 0;
  clear_has_concept();
}
::google::protobuf::int32 CDOTASpeechMatchOnClient::concept() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTASpeechMatchOnClient.concept)
  return concept_;
}
void CDOTASpeechMatchOnClient::set_concept(::google::protobuf::int32 value) {
  set_has_concept();
  concept_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTASpeechMatchOnClient.concept)
}

// optional int32 recipient_type = 2;
bool CDOTASpeechMatchOnClient::has_recipient_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDOTASpeechMatchOnClient::set_has_recipient_type() {
  _has_bits_[0] |= 0x00000004u;
}
void CDOTASpeechMatchOnClient::clear_has_recipient_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDOTASpeechMatchOnClient::clear_recipient_type() {
  recipient_type_ = 0;
  clear_has_recipient_type();
}
::google::protobuf::int32 CDOTASpeechMatchOnClient::recipient_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTASpeechMatchOnClient.recipient_type)
  return recipient_type_;
}
void CDOTASpeechMatchOnClient::set_recipient_type(::google::protobuf::int32 value) {
  set_has_recipient_type();
  recipient_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTASpeechMatchOnClient.recipient_type)
}

// optional .proto.dota.CDOTAResponseQuerySerialized responsequery = 3;
bool CDOTASpeechMatchOnClient::has_responsequery() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTASpeechMatchOnClient::set_has_responsequery() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTASpeechMatchOnClient::clear_has_responsequery() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTASpeechMatchOnClient::clear_responsequery() {
  if (responsequery_ != NULL) responsequery_->::proto::dota::CDOTAResponseQuerySerialized::Clear();
  clear_has_responsequery();
}
const ::proto::dota::CDOTAResponseQuerySerialized& CDOTASpeechMatchOnClient::responsequery() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTASpeechMatchOnClient.responsequery)
  return responsequery_ != NULL ? *responsequery_
                         : *::proto::dota::CDOTAResponseQuerySerialized::internal_default_instance();
}
::proto::dota::CDOTAResponseQuerySerialized* CDOTASpeechMatchOnClient::mutable_responsequery() {
  set_has_responsequery();
  if (responsequery_ == NULL) {
    responsequery_ = new ::proto::dota::CDOTAResponseQuerySerialized;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTASpeechMatchOnClient.responsequery)
  return responsequery_;
}
::proto::dota::CDOTAResponseQuerySerialized* CDOTASpeechMatchOnClient::release_responsequery() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTASpeechMatchOnClient.responsequery)
  clear_has_responsequery();
  ::proto::dota::CDOTAResponseQuerySerialized* temp = responsequery_;
  responsequery_ = NULL;
  return temp;
}
void CDOTASpeechMatchOnClient::set_allocated_responsequery(::proto::dota::CDOTAResponseQuerySerialized* responsequery) {
  delete responsequery_;
  responsequery_ = responsequery;
  if (responsequery) {
    set_has_responsequery();
  } else {
    clear_has_responsequery();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTASpeechMatchOnClient.responsequery)
}

// optional sfixed32 randomseed = 4 [default = 0];
bool CDOTASpeechMatchOnClient::has_randomseed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CDOTASpeechMatchOnClient::set_has_randomseed() {
  _has_bits_[0] |= 0x00000008u;
}
void CDOTASpeechMatchOnClient::clear_has_randomseed() {
  _has_bits_[0] &= ~0x00000008u;
}
void CDOTASpeechMatchOnClient::clear_randomseed() {
  randomseed_ = 0;
  clear_has_randomseed();
}
::google::protobuf::int32 CDOTASpeechMatchOnClient::randomseed() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTASpeechMatchOnClient.randomseed)
  return randomseed_;
}
void CDOTASpeechMatchOnClient::set_randomseed(::google::protobuf::int32 value) {
  set_has_randomseed();
  randomseed_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTASpeechMatchOnClient.randomseed)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_UnitEvent_Speech::kConceptFieldNumber;
const int CDOTAUserMsg_UnitEvent_Speech::kResponseFieldNumber;
const int CDOTAUserMsg_UnitEvent_Speech::kRecipientTypeFieldNumber;
const int CDOTAUserMsg_UnitEvent_Speech::kLevelFieldNumber;
const int CDOTAUserMsg_UnitEvent_Speech::kMuteableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_UnitEvent_Speech::CDOTAUserMsg_UnitEvent_Speech()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_UnitEvent.Speech)
}
CDOTAUserMsg_UnitEvent_Speech::CDOTAUserMsg_UnitEvent_Speech(const CDOTAUserMsg_UnitEvent_Speech& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  response_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_response()) {
    response_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.response_);
  }
  ::memcpy(&concept_, &from.concept_,
    reinterpret_cast<char*>(&muteable_) -
    reinterpret_cast<char*>(&concept_) + sizeof(muteable_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_UnitEvent.Speech)
}

void CDOTAUserMsg_UnitEvent_Speech::SharedCtor() {
  _cached_size_ = 0;
  response_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&concept_, 0, reinterpret_cast<char*>(&muteable_) -
    reinterpret_cast<char*>(&concept_) + sizeof(muteable_));
}

CDOTAUserMsg_UnitEvent_Speech::~CDOTAUserMsg_UnitEvent_Speech() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_UnitEvent.Speech)
  SharedDtor();
}

void CDOTAUserMsg_UnitEvent_Speech::SharedDtor() {
  response_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CDOTAUserMsg_UnitEvent_Speech::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_UnitEvent_Speech::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_UnitEvent_Speech& CDOTAUserMsg_UnitEvent_Speech::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_UnitEvent_Speech* CDOTAUserMsg_UnitEvent_Speech::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_UnitEvent_Speech* n = new CDOTAUserMsg_UnitEvent_Speech;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_UnitEvent_Speech::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_UnitEvent.Speech)
  if (has_response()) {
    GOOGLE_DCHECK(!response_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*response_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 30u) {
    ::memset(&concept_, 0, reinterpret_cast<char*>(&muteable_) -
      reinterpret_cast<char*>(&concept_) + sizeof(muteable_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_UnitEvent_Speech::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_UnitEvent.Speech)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 concept = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_concept();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &concept_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string response = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_response()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->response().data(), this->response().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDOTAUserMsg_UnitEvent.Speech.response");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 recipient_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_recipient_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recipient_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 level = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool muteable = 5 [default = false];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_muteable();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &muteable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_UnitEvent.Speech)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_UnitEvent.Speech)
  return false;
#undef DO_
}

void CDOTAUserMsg_UnitEvent_Speech::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_UnitEvent.Speech)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 concept = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->concept(), output);
  }

  // optional string response = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->response().data(), this->response().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAUserMsg_UnitEvent.Speech.response");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->response(), output);
  }

  // optional int32 recipient_type = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->recipient_type(), output);
  }

  // optional int32 level = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->level(), output);
  }

  // optional bool muteable = 5 [default = false];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->muteable(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_UnitEvent.Speech)
}

::google::protobuf::uint8* CDOTAUserMsg_UnitEvent_Speech::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_UnitEvent.Speech)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 concept = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->concept(), target);
  }

  // optional string response = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->response().data(), this->response().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAUserMsg_UnitEvent.Speech.response");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->response(), target);
  }

  // optional int32 recipient_type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->recipient_type(), target);
  }

  // optional int32 level = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->level(), target);
  }

  // optional bool muteable = 5 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->muteable(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_UnitEvent.Speech)
  return target;
}

size_t CDOTAUserMsg_UnitEvent_Speech::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_UnitEvent.Speech)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string response = 2;
    if (has_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->response());
    }

    // optional int32 concept = 1;
    if (has_concept()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->concept());
    }

    // optional int32 recipient_type = 3;
    if (has_recipient_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->recipient_type());
    }

    // optional int32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional bool muteable = 5 [default = false];
    if (has_muteable()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_UnitEvent_Speech::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_UnitEvent.Speech)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_UnitEvent_Speech* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_UnitEvent_Speech>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_UnitEvent.Speech)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_UnitEvent.Speech)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_UnitEvent_Speech::MergeFrom(const CDOTAUserMsg_UnitEvent_Speech& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_UnitEvent.Speech)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_response();
      response_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.response_);
    }
    if (cached_has_bits & 0x00000002u) {
      concept_ = from.concept_;
    }
    if (cached_has_bits & 0x00000004u) {
      recipient_type_ = from.recipient_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000010u) {
      muteable_ = from.muteable_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_UnitEvent_Speech::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_UnitEvent.Speech)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_UnitEvent_Speech::CopyFrom(const CDOTAUserMsg_UnitEvent_Speech& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_UnitEvent.Speech)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_UnitEvent_Speech::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_UnitEvent_Speech::Swap(CDOTAUserMsg_UnitEvent_Speech* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_UnitEvent_Speech::InternalSwap(CDOTAUserMsg_UnitEvent_Speech* other) {
  response_.Swap(&other->response_);
  std::swap(concept_, other->concept_);
  std::swap(recipient_type_, other->recipient_type_);
  std::swap(level_, other->level_);
  std::swap(muteable_, other->muteable_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_UnitEvent_Speech::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_UnitEvent_Speech

// optional int32 concept = 1;
bool CDOTAUserMsg_UnitEvent_Speech::has_concept() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAUserMsg_UnitEvent_Speech::set_has_concept() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAUserMsg_UnitEvent_Speech::clear_has_concept() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAUserMsg_UnitEvent_Speech::clear_concept() {
  concept_ = 0;
  clear_has_concept();
}
::google::protobuf::int32 CDOTAUserMsg_UnitEvent_Speech::concept() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_UnitEvent.Speech.concept)
  return concept_;
}
void CDOTAUserMsg_UnitEvent_Speech::set_concept(::google::protobuf::int32 value) {
  set_has_concept();
  concept_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_UnitEvent.Speech.concept)
}

// optional string response = 2;
bool CDOTAUserMsg_UnitEvent_Speech::has_response() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_UnitEvent_Speech::set_has_response() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_UnitEvent_Speech::clear_has_response() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_UnitEvent_Speech::clear_response() {
  response_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_response();
}
const ::std::string& CDOTAUserMsg_UnitEvent_Speech::response() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_UnitEvent.Speech.response)
  return response_.GetNoArena();
}
void CDOTAUserMsg_UnitEvent_Speech::set_response(const ::std::string& value) {
  set_has_response();
  response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_UnitEvent.Speech.response)
}
#if LANG_CXX11
void CDOTAUserMsg_UnitEvent_Speech::set_response(::std::string&& value) {
  set_has_response();
  response_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDOTAUserMsg_UnitEvent.Speech.response)
}
#endif
void CDOTAUserMsg_UnitEvent_Speech::set_response(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_response();
  response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDOTAUserMsg_UnitEvent.Speech.response)
}
void CDOTAUserMsg_UnitEvent_Speech::set_response(const char* value, size_t size) {
  set_has_response();
  response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDOTAUserMsg_UnitEvent.Speech.response)
}
::std::string* CDOTAUserMsg_UnitEvent_Speech::mutable_response() {
  set_has_response();
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_UnitEvent.Speech.response)
  return response_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDOTAUserMsg_UnitEvent_Speech::release_response() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAUserMsg_UnitEvent.Speech.response)
  clear_has_response();
  return response_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDOTAUserMsg_UnitEvent_Speech::set_allocated_response(::std::string* response) {
  if (response != NULL) {
    set_has_response();
  } else {
    clear_has_response();
  }
  response_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), response);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAUserMsg_UnitEvent.Speech.response)
}

// optional int32 recipient_type = 3;
bool CDOTAUserMsg_UnitEvent_Speech::has_recipient_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDOTAUserMsg_UnitEvent_Speech::set_has_recipient_type() {
  _has_bits_[0] |= 0x00000004u;
}
void CDOTAUserMsg_UnitEvent_Speech::clear_has_recipient_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDOTAUserMsg_UnitEvent_Speech::clear_recipient_type() {
  recipient_type_ = 0;
  clear_has_recipient_type();
}
::google::protobuf::int32 CDOTAUserMsg_UnitEvent_Speech::recipient_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_UnitEvent.Speech.recipient_type)
  return recipient_type_;
}
void CDOTAUserMsg_UnitEvent_Speech::set_recipient_type(::google::protobuf::int32 value) {
  set_has_recipient_type();
  recipient_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_UnitEvent.Speech.recipient_type)
}

// optional int32 level = 4;
bool CDOTAUserMsg_UnitEvent_Speech::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CDOTAUserMsg_UnitEvent_Speech::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
void CDOTAUserMsg_UnitEvent_Speech::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
void CDOTAUserMsg_UnitEvent_Speech::clear_level() {
  level_ = 0;
  clear_has_level();
}
::google::protobuf::int32 CDOTAUserMsg_UnitEvent_Speech::level() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_UnitEvent.Speech.level)
  return level_;
}
void CDOTAUserMsg_UnitEvent_Speech::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_UnitEvent.Speech.level)
}

// optional bool muteable = 5 [default = false];
bool CDOTAUserMsg_UnitEvent_Speech::has_muteable() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CDOTAUserMsg_UnitEvent_Speech::set_has_muteable() {
  _has_bits_[0] |= 0x00000010u;
}
void CDOTAUserMsg_UnitEvent_Speech::clear_has_muteable() {
  _has_bits_[0] &= ~0x00000010u;
}
void CDOTAUserMsg_UnitEvent_Speech::clear_muteable() {
  muteable_ = false;
  clear_has_muteable();
}
bool CDOTAUserMsg_UnitEvent_Speech::muteable() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_UnitEvent.Speech.muteable)
  return muteable_;
}
void CDOTAUserMsg_UnitEvent_Speech::set_muteable(bool value) {
  set_has_muteable();
  muteable_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_UnitEvent.Speech.muteable)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_UnitEvent_SpeechMute::kDelayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_UnitEvent_SpeechMute::CDOTAUserMsg_UnitEvent_SpeechMute()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_UnitEvent.SpeechMute)
}
CDOTAUserMsg_UnitEvent_SpeechMute::CDOTAUserMsg_UnitEvent_SpeechMute(const CDOTAUserMsg_UnitEvent_SpeechMute& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  delay_ = from.delay_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_UnitEvent.SpeechMute)
}

void CDOTAUserMsg_UnitEvent_SpeechMute::SharedCtor() {
  _cached_size_ = 0;
  delay_ = 0.5f;
}

CDOTAUserMsg_UnitEvent_SpeechMute::~CDOTAUserMsg_UnitEvent_SpeechMute() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_UnitEvent.SpeechMute)
  SharedDtor();
}

void CDOTAUserMsg_UnitEvent_SpeechMute::SharedDtor() {
}

void CDOTAUserMsg_UnitEvent_SpeechMute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_UnitEvent_SpeechMute::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_UnitEvent_SpeechMute& CDOTAUserMsg_UnitEvent_SpeechMute::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_UnitEvent_SpeechMute* CDOTAUserMsg_UnitEvent_SpeechMute::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_UnitEvent_SpeechMute* n = new CDOTAUserMsg_UnitEvent_SpeechMute;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_UnitEvent_SpeechMute::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_UnitEvent.SpeechMute)
  delay_ = 0.5f;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_UnitEvent_SpeechMute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_UnitEvent.SpeechMute)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float delay = 1 [default = 0.5];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {
          set_has_delay();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &delay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_UnitEvent.SpeechMute)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_UnitEvent.SpeechMute)
  return false;
#undef DO_
}

void CDOTAUserMsg_UnitEvent_SpeechMute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_UnitEvent.SpeechMute)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float delay = 1 [default = 0.5];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->delay(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_UnitEvent.SpeechMute)
}

::google::protobuf::uint8* CDOTAUserMsg_UnitEvent_SpeechMute::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_UnitEvent.SpeechMute)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float delay = 1 [default = 0.5];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->delay(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_UnitEvent.SpeechMute)
  return target;
}

size_t CDOTAUserMsg_UnitEvent_SpeechMute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_UnitEvent.SpeechMute)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional float delay = 1 [default = 0.5];
  if (has_delay()) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_UnitEvent_SpeechMute::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_UnitEvent.SpeechMute)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_UnitEvent_SpeechMute* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_UnitEvent_SpeechMute>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_UnitEvent.SpeechMute)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_UnitEvent.SpeechMute)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_UnitEvent_SpeechMute::MergeFrom(const CDOTAUserMsg_UnitEvent_SpeechMute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_UnitEvent.SpeechMute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_delay()) {
    set_delay(from.delay());
  }
}

void CDOTAUserMsg_UnitEvent_SpeechMute::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_UnitEvent.SpeechMute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_UnitEvent_SpeechMute::CopyFrom(const CDOTAUserMsg_UnitEvent_SpeechMute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_UnitEvent.SpeechMute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_UnitEvent_SpeechMute::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_UnitEvent_SpeechMute::Swap(CDOTAUserMsg_UnitEvent_SpeechMute* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_UnitEvent_SpeechMute::InternalSwap(CDOTAUserMsg_UnitEvent_SpeechMute* other) {
  std::swap(delay_, other->delay_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_UnitEvent_SpeechMute::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_UnitEvent_SpeechMute

// optional float delay = 1 [default = 0.5];
bool CDOTAUserMsg_UnitEvent_SpeechMute::has_delay() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_UnitEvent_SpeechMute::set_has_delay() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_UnitEvent_SpeechMute::clear_has_delay() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_UnitEvent_SpeechMute::clear_delay() {
  delay_ = 0.5f;
  clear_has_delay();
}
float CDOTAUserMsg_UnitEvent_SpeechMute::delay() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_UnitEvent.SpeechMute.delay)
  return delay_;
}
void CDOTAUserMsg_UnitEvent_SpeechMute::set_delay(float value) {
  set_has_delay();
  delay_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_UnitEvent.SpeechMute.delay)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_UnitEvent_AddGesture::kActivityFieldNumber;
const int CDOTAUserMsg_UnitEvent_AddGesture::kSlotFieldNumber;
const int CDOTAUserMsg_UnitEvent_AddGesture::kFadeInFieldNumber;
const int CDOTAUserMsg_UnitEvent_AddGesture::kFadeOutFieldNumber;
const int CDOTAUserMsg_UnitEvent_AddGesture::kPlaybackRateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_UnitEvent_AddGesture::CDOTAUserMsg_UnitEvent_AddGesture()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_UnitEvent.AddGesture)
}
CDOTAUserMsg_UnitEvent_AddGesture::CDOTAUserMsg_UnitEvent_AddGesture(const CDOTAUserMsg_UnitEvent_AddGesture& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&activity_, &from.activity_,
    reinterpret_cast<char*>(&playback_rate_) -
    reinterpret_cast<char*>(&activity_) + sizeof(playback_rate_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_UnitEvent.AddGesture)
}

void CDOTAUserMsg_UnitEvent_AddGesture::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&activity_, 0, reinterpret_cast<char*>(&fade_in_) -
    reinterpret_cast<char*>(&activity_) + sizeof(fade_in_));
  fade_out_ = 0.1f;
  playback_rate_ = 1;
}

CDOTAUserMsg_UnitEvent_AddGesture::~CDOTAUserMsg_UnitEvent_AddGesture() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_UnitEvent.AddGesture)
  SharedDtor();
}

void CDOTAUserMsg_UnitEvent_AddGesture::SharedDtor() {
}

void CDOTAUserMsg_UnitEvent_AddGesture::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_UnitEvent_AddGesture::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_UnitEvent_AddGesture& CDOTAUserMsg_UnitEvent_AddGesture::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_UnitEvent_AddGesture* CDOTAUserMsg_UnitEvent_AddGesture::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_UnitEvent_AddGesture* n = new CDOTAUserMsg_UnitEvent_AddGesture;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_UnitEvent_AddGesture::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_UnitEvent.AddGesture)
  if (_has_bits_[0 / 32] & 31u) {
    ::memset(&activity_, 0, reinterpret_cast<char*>(&fade_in_) -
      reinterpret_cast<char*>(&activity_) + sizeof(fade_in_));
    fade_out_ = 0.1f;
    playback_rate_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_UnitEvent_AddGesture::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_UnitEvent.AddGesture)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 activity = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_activity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &activity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 slot = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_slot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float fade_in = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_fade_in();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fade_in_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float fade_out = 4 [default = 0.1];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_fade_out();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fade_out_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float playback_rate = 5 [default = 1];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {
          set_has_playback_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &playback_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_UnitEvent.AddGesture)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_UnitEvent.AddGesture)
  return false;
#undef DO_
}

void CDOTAUserMsg_UnitEvent_AddGesture::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_UnitEvent.AddGesture)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 activity = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->activity(), output);
  }

  // optional int32 slot = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->slot(), output);
  }

  // optional float fade_in = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->fade_in(), output);
  }

  // optional float fade_out = 4 [default = 0.1];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->fade_out(), output);
  }

  // optional float playback_rate = 5 [default = 1];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->playback_rate(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_UnitEvent.AddGesture)
}

::google::protobuf::uint8* CDOTAUserMsg_UnitEvent_AddGesture::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_UnitEvent.AddGesture)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 activity = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->activity(), target);
  }

  // optional int32 slot = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->slot(), target);
  }

  // optional float fade_in = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->fade_in(), target);
  }

  // optional float fade_out = 4 [default = 0.1];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->fade_out(), target);
  }

  // optional float playback_rate = 5 [default = 1];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->playback_rate(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_UnitEvent.AddGesture)
  return target;
}

size_t CDOTAUserMsg_UnitEvent_AddGesture::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_UnitEvent.AddGesture)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional int32 activity = 1;
    if (has_activity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->activity());
    }

    // optional int32 slot = 2;
    if (has_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot());
    }

    // optional float fade_in = 3 [default = 0];
    if (has_fade_in()) {
      total_size += 1 + 4;
    }

    // optional float fade_out = 4 [default = 0.1];
    if (has_fade_out()) {
      total_size += 1 + 4;
    }

    // optional float playback_rate = 5 [default = 1];
    if (has_playback_rate()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_UnitEvent_AddGesture::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_UnitEvent.AddGesture)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_UnitEvent_AddGesture* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_UnitEvent_AddGesture>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_UnitEvent.AddGesture)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_UnitEvent.AddGesture)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_UnitEvent_AddGesture::MergeFrom(const CDOTAUserMsg_UnitEvent_AddGesture& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_UnitEvent.AddGesture)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      activity_ = from.activity_;
    }
    if (cached_has_bits & 0x00000002u) {
      slot_ = from.slot_;
    }
    if (cached_has_bits & 0x00000004u) {
      fade_in_ = from.fade_in_;
    }
    if (cached_has_bits & 0x00000008u) {
      fade_out_ = from.fade_out_;
    }
    if (cached_has_bits & 0x00000010u) {
      playback_rate_ = from.playback_rate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_UnitEvent_AddGesture::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_UnitEvent.AddGesture)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_UnitEvent_AddGesture::CopyFrom(const CDOTAUserMsg_UnitEvent_AddGesture& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_UnitEvent.AddGesture)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_UnitEvent_AddGesture::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_UnitEvent_AddGesture::Swap(CDOTAUserMsg_UnitEvent_AddGesture* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_UnitEvent_AddGesture::InternalSwap(CDOTAUserMsg_UnitEvent_AddGesture* other) {
  std::swap(activity_, other->activity_);
  std::swap(slot_, other->slot_);
  std::swap(fade_in_, other->fade_in_);
  std::swap(fade_out_, other->fade_out_);
  std::swap(playback_rate_, other->playback_rate_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_UnitEvent_AddGesture::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_UnitEvent_AddGesture

// optional int32 activity = 1;
bool CDOTAUserMsg_UnitEvent_AddGesture::has_activity() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_UnitEvent_AddGesture::set_has_activity() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_UnitEvent_AddGesture::clear_has_activity() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_UnitEvent_AddGesture::clear_activity() {
  activity_ = 0;
  clear_has_activity();
}
::google::protobuf::int32 CDOTAUserMsg_UnitEvent_AddGesture::activity() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_UnitEvent.AddGesture.activity)
  return activity_;
}
void CDOTAUserMsg_UnitEvent_AddGesture::set_activity(::google::protobuf::int32 value) {
  set_has_activity();
  activity_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_UnitEvent.AddGesture.activity)
}

// optional int32 slot = 2;
bool CDOTAUserMsg_UnitEvent_AddGesture::has_slot() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAUserMsg_UnitEvent_AddGesture::set_has_slot() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAUserMsg_UnitEvent_AddGesture::clear_has_slot() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAUserMsg_UnitEvent_AddGesture::clear_slot() {
  slot_ = 0;
  clear_has_slot();
}
::google::protobuf::int32 CDOTAUserMsg_UnitEvent_AddGesture::slot() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_UnitEvent.AddGesture.slot)
  return slot_;
}
void CDOTAUserMsg_UnitEvent_AddGesture::set_slot(::google::protobuf::int32 value) {
  set_has_slot();
  slot_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_UnitEvent.AddGesture.slot)
}

// optional float fade_in = 3 [default = 0];
bool CDOTAUserMsg_UnitEvent_AddGesture::has_fade_in() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDOTAUserMsg_UnitEvent_AddGesture::set_has_fade_in() {
  _has_bits_[0] |= 0x00000004u;
}
void CDOTAUserMsg_UnitEvent_AddGesture::clear_has_fade_in() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDOTAUserMsg_UnitEvent_AddGesture::clear_fade_in() {
  fade_in_ = 0;
  clear_has_fade_in();
}
float CDOTAUserMsg_UnitEvent_AddGesture::fade_in() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_UnitEvent.AddGesture.fade_in)
  return fade_in_;
}
void CDOTAUserMsg_UnitEvent_AddGesture::set_fade_in(float value) {
  set_has_fade_in();
  fade_in_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_UnitEvent.AddGesture.fade_in)
}

// optional float fade_out = 4 [default = 0.1];
bool CDOTAUserMsg_UnitEvent_AddGesture::has_fade_out() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CDOTAUserMsg_UnitEvent_AddGesture::set_has_fade_out() {
  _has_bits_[0] |= 0x00000008u;
}
void CDOTAUserMsg_UnitEvent_AddGesture::clear_has_fade_out() {
  _has_bits_[0] &= ~0x00000008u;
}
void CDOTAUserMsg_UnitEvent_AddGesture::clear_fade_out() {
  fade_out_ = 0.1f;
  clear_has_fade_out();
}
float CDOTAUserMsg_UnitEvent_AddGesture::fade_out() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_UnitEvent.AddGesture.fade_out)
  return fade_out_;
}
void CDOTAUserMsg_UnitEvent_AddGesture::set_fade_out(float value) {
  set_has_fade_out();
  fade_out_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_UnitEvent.AddGesture.fade_out)
}

// optional float playback_rate = 5 [default = 1];
bool CDOTAUserMsg_UnitEvent_AddGesture::has_playback_rate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CDOTAUserMsg_UnitEvent_AddGesture::set_has_playback_rate() {
  _has_bits_[0] |= 0x00000010u;
}
void CDOTAUserMsg_UnitEvent_AddGesture::clear_has_playback_rate() {
  _has_bits_[0] &= ~0x00000010u;
}
void CDOTAUserMsg_UnitEvent_AddGesture::clear_playback_rate() {
  playback_rate_ = 1;
  clear_has_playback_rate();
}
float CDOTAUserMsg_UnitEvent_AddGesture::playback_rate() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_UnitEvent.AddGesture.playback_rate)
  return playback_rate_;
}
void CDOTAUserMsg_UnitEvent_AddGesture::set_playback_rate(float value) {
  set_has_playback_rate();
  playback_rate_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_UnitEvent.AddGesture.playback_rate)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_UnitEvent_RemoveGesture::kActivityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_UnitEvent_RemoveGesture::CDOTAUserMsg_UnitEvent_RemoveGesture()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_UnitEvent.RemoveGesture)
}
CDOTAUserMsg_UnitEvent_RemoveGesture::CDOTAUserMsg_UnitEvent_RemoveGesture(const CDOTAUserMsg_UnitEvent_RemoveGesture& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  activity_ = from.activity_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_UnitEvent.RemoveGesture)
}

void CDOTAUserMsg_UnitEvent_RemoveGesture::SharedCtor() {
  _cached_size_ = 0;
  activity_ = 0;
}

CDOTAUserMsg_UnitEvent_RemoveGesture::~CDOTAUserMsg_UnitEvent_RemoveGesture() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_UnitEvent.RemoveGesture)
  SharedDtor();
}

void CDOTAUserMsg_UnitEvent_RemoveGesture::SharedDtor() {
}

void CDOTAUserMsg_UnitEvent_RemoveGesture::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_UnitEvent_RemoveGesture::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_UnitEvent_RemoveGesture& CDOTAUserMsg_UnitEvent_RemoveGesture::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_UnitEvent_RemoveGesture* CDOTAUserMsg_UnitEvent_RemoveGesture::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_UnitEvent_RemoveGesture* n = new CDOTAUserMsg_UnitEvent_RemoveGesture;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_UnitEvent_RemoveGesture::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_UnitEvent.RemoveGesture)
  activity_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_UnitEvent_RemoveGesture::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_UnitEvent.RemoveGesture)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 activity = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_activity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &activity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_UnitEvent.RemoveGesture)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_UnitEvent.RemoveGesture)
  return false;
#undef DO_
}

void CDOTAUserMsg_UnitEvent_RemoveGesture::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_UnitEvent.RemoveGesture)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 activity = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->activity(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_UnitEvent.RemoveGesture)
}

::google::protobuf::uint8* CDOTAUserMsg_UnitEvent_RemoveGesture::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_UnitEvent.RemoveGesture)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 activity = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->activity(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_UnitEvent.RemoveGesture)
  return target;
}

size_t CDOTAUserMsg_UnitEvent_RemoveGesture::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_UnitEvent.RemoveGesture)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional int32 activity = 1;
  if (has_activity()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->activity());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_UnitEvent_RemoveGesture::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_UnitEvent.RemoveGesture)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_UnitEvent_RemoveGesture* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_UnitEvent_RemoveGesture>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_UnitEvent.RemoveGesture)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_UnitEvent.RemoveGesture)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_UnitEvent_RemoveGesture::MergeFrom(const CDOTAUserMsg_UnitEvent_RemoveGesture& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_UnitEvent.RemoveGesture)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_activity()) {
    set_activity(from.activity());
  }
}

void CDOTAUserMsg_UnitEvent_RemoveGesture::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_UnitEvent.RemoveGesture)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_UnitEvent_RemoveGesture::CopyFrom(const CDOTAUserMsg_UnitEvent_RemoveGesture& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_UnitEvent.RemoveGesture)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_UnitEvent_RemoveGesture::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_UnitEvent_RemoveGesture::Swap(CDOTAUserMsg_UnitEvent_RemoveGesture* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_UnitEvent_RemoveGesture::InternalSwap(CDOTAUserMsg_UnitEvent_RemoveGesture* other) {
  std::swap(activity_, other->activity_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_UnitEvent_RemoveGesture::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_UnitEvent_RemoveGesture

// optional int32 activity = 1;
bool CDOTAUserMsg_UnitEvent_RemoveGesture::has_activity() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_UnitEvent_RemoveGesture::set_has_activity() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_UnitEvent_RemoveGesture::clear_has_activity() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_UnitEvent_RemoveGesture::clear_activity() {
  activity_ = 0;
  clear_has_activity();
}
::google::protobuf::int32 CDOTAUserMsg_UnitEvent_RemoveGesture::activity() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_UnitEvent.RemoveGesture.activity)
  return activity_;
}
void CDOTAUserMsg_UnitEvent_RemoveGesture::set_activity(::google::protobuf::int32 value) {
  set_has_activity();
  activity_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_UnitEvent.RemoveGesture.activity)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_UnitEvent_BloodImpact::kScaleFieldNumber;
const int CDOTAUserMsg_UnitEvent_BloodImpact::kXNormalFieldNumber;
const int CDOTAUserMsg_UnitEvent_BloodImpact::kYNormalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_UnitEvent_BloodImpact::CDOTAUserMsg_UnitEvent_BloodImpact()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_UnitEvent.BloodImpact)
}
CDOTAUserMsg_UnitEvent_BloodImpact::CDOTAUserMsg_UnitEvent_BloodImpact(const CDOTAUserMsg_UnitEvent_BloodImpact& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&scale_, &from.scale_,
    reinterpret_cast<char*>(&y_normal_) -
    reinterpret_cast<char*>(&scale_) + sizeof(y_normal_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_UnitEvent.BloodImpact)
}

void CDOTAUserMsg_UnitEvent_BloodImpact::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&scale_, 0, reinterpret_cast<char*>(&y_normal_) -
    reinterpret_cast<char*>(&scale_) + sizeof(y_normal_));
}

CDOTAUserMsg_UnitEvent_BloodImpact::~CDOTAUserMsg_UnitEvent_BloodImpact() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_UnitEvent.BloodImpact)
  SharedDtor();
}

void CDOTAUserMsg_UnitEvent_BloodImpact::SharedDtor() {
}

void CDOTAUserMsg_UnitEvent_BloodImpact::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_UnitEvent_BloodImpact::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_UnitEvent_BloodImpact& CDOTAUserMsg_UnitEvent_BloodImpact::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_UnitEvent_BloodImpact* CDOTAUserMsg_UnitEvent_BloodImpact::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_UnitEvent_BloodImpact* n = new CDOTAUserMsg_UnitEvent_BloodImpact;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_UnitEvent_BloodImpact::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_UnitEvent.BloodImpact)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&scale_, 0, reinterpret_cast<char*>(&y_normal_) -
      reinterpret_cast<char*>(&scale_) + sizeof(y_normal_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_UnitEvent_BloodImpact::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_UnitEvent.BloodImpact)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 scale = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 x_normal = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_x_normal();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_normal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 y_normal = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_y_normal();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_normal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_UnitEvent.BloodImpact)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_UnitEvent.BloodImpact)
  return false;
#undef DO_
}

void CDOTAUserMsg_UnitEvent_BloodImpact::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_UnitEvent.BloodImpact)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 scale = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->scale(), output);
  }

  // optional int32 x_normal = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->x_normal(), output);
  }

  // optional int32 y_normal = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->y_normal(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_UnitEvent.BloodImpact)
}

::google::protobuf::uint8* CDOTAUserMsg_UnitEvent_BloodImpact::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_UnitEvent.BloodImpact)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 scale = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->scale(), target);
  }

  // optional int32 x_normal = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->x_normal(), target);
  }

  // optional int32 y_normal = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->y_normal(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_UnitEvent.BloodImpact)
  return target;
}

size_t CDOTAUserMsg_UnitEvent_BloodImpact::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_UnitEvent.BloodImpact)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 scale = 1;
    if (has_scale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scale());
    }

    // optional int32 x_normal = 2;
    if (has_x_normal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x_normal());
    }

    // optional int32 y_normal = 3;
    if (has_y_normal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y_normal());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_UnitEvent_BloodImpact::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_UnitEvent.BloodImpact)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_UnitEvent_BloodImpact* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_UnitEvent_BloodImpact>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_UnitEvent.BloodImpact)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_UnitEvent.BloodImpact)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_UnitEvent_BloodImpact::MergeFrom(const CDOTAUserMsg_UnitEvent_BloodImpact& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_UnitEvent.BloodImpact)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      scale_ = from.scale_;
    }
    if (cached_has_bits & 0x00000002u) {
      x_normal_ = from.x_normal_;
    }
    if (cached_has_bits & 0x00000004u) {
      y_normal_ = from.y_normal_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_UnitEvent_BloodImpact::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_UnitEvent.BloodImpact)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_UnitEvent_BloodImpact::CopyFrom(const CDOTAUserMsg_UnitEvent_BloodImpact& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_UnitEvent.BloodImpact)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_UnitEvent_BloodImpact::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_UnitEvent_BloodImpact::Swap(CDOTAUserMsg_UnitEvent_BloodImpact* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_UnitEvent_BloodImpact::InternalSwap(CDOTAUserMsg_UnitEvent_BloodImpact* other) {
  std::swap(scale_, other->scale_);
  std::swap(x_normal_, other->x_normal_);
  std::swap(y_normal_, other->y_normal_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_UnitEvent_BloodImpact::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_UnitEvent_BloodImpact

// optional int32 scale = 1;
bool CDOTAUserMsg_UnitEvent_BloodImpact::has_scale() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_UnitEvent_BloodImpact::set_has_scale() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_UnitEvent_BloodImpact::clear_has_scale() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_UnitEvent_BloodImpact::clear_scale() {
  scale_ = 0;
  clear_has_scale();
}
::google::protobuf::int32 CDOTAUserMsg_UnitEvent_BloodImpact::scale() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_UnitEvent.BloodImpact.scale)
  return scale_;
}
void CDOTAUserMsg_UnitEvent_BloodImpact::set_scale(::google::protobuf::int32 value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_UnitEvent.BloodImpact.scale)
}

// optional int32 x_normal = 2;
bool CDOTAUserMsg_UnitEvent_BloodImpact::has_x_normal() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAUserMsg_UnitEvent_BloodImpact::set_has_x_normal() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAUserMsg_UnitEvent_BloodImpact::clear_has_x_normal() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAUserMsg_UnitEvent_BloodImpact::clear_x_normal() {
  x_normal_ = 0;
  clear_has_x_normal();
}
::google::protobuf::int32 CDOTAUserMsg_UnitEvent_BloodImpact::x_normal() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_UnitEvent.BloodImpact.x_normal)
  return x_normal_;
}
void CDOTAUserMsg_UnitEvent_BloodImpact::set_x_normal(::google::protobuf::int32 value) {
  set_has_x_normal();
  x_normal_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_UnitEvent.BloodImpact.x_normal)
}

// optional int32 y_normal = 3;
bool CDOTAUserMsg_UnitEvent_BloodImpact::has_y_normal() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDOTAUserMsg_UnitEvent_BloodImpact::set_has_y_normal() {
  _has_bits_[0] |= 0x00000004u;
}
void CDOTAUserMsg_UnitEvent_BloodImpact::clear_has_y_normal() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDOTAUserMsg_UnitEvent_BloodImpact::clear_y_normal() {
  y_normal_ = 0;
  clear_has_y_normal();
}
::google::protobuf::int32 CDOTAUserMsg_UnitEvent_BloodImpact::y_normal() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_UnitEvent.BloodImpact.y_normal)
  return y_normal_;
}
void CDOTAUserMsg_UnitEvent_BloodImpact::set_y_normal(::google::protobuf::int32 value) {
  set_has_y_normal();
  y_normal_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_UnitEvent.BloodImpact.y_normal)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_UnitEvent_FadeGesture::kActivityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_UnitEvent_FadeGesture::CDOTAUserMsg_UnitEvent_FadeGesture()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_UnitEvent.FadeGesture)
}
CDOTAUserMsg_UnitEvent_FadeGesture::CDOTAUserMsg_UnitEvent_FadeGesture(const CDOTAUserMsg_UnitEvent_FadeGesture& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  activity_ = from.activity_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_UnitEvent.FadeGesture)
}

void CDOTAUserMsg_UnitEvent_FadeGesture::SharedCtor() {
  _cached_size_ = 0;
  activity_ = 0;
}

CDOTAUserMsg_UnitEvent_FadeGesture::~CDOTAUserMsg_UnitEvent_FadeGesture() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_UnitEvent.FadeGesture)
  SharedDtor();
}

void CDOTAUserMsg_UnitEvent_FadeGesture::SharedDtor() {
}

void CDOTAUserMsg_UnitEvent_FadeGesture::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_UnitEvent_FadeGesture::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_UnitEvent_FadeGesture& CDOTAUserMsg_UnitEvent_FadeGesture::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_UnitEvent_FadeGesture* CDOTAUserMsg_UnitEvent_FadeGesture::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_UnitEvent_FadeGesture* n = new CDOTAUserMsg_UnitEvent_FadeGesture;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_UnitEvent_FadeGesture::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_UnitEvent.FadeGesture)
  activity_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_UnitEvent_FadeGesture::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_UnitEvent.FadeGesture)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 activity = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_activity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &activity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_UnitEvent.FadeGesture)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_UnitEvent.FadeGesture)
  return false;
#undef DO_
}

void CDOTAUserMsg_UnitEvent_FadeGesture::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_UnitEvent.FadeGesture)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 activity = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->activity(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_UnitEvent.FadeGesture)
}

::google::protobuf::uint8* CDOTAUserMsg_UnitEvent_FadeGesture::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_UnitEvent.FadeGesture)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 activity = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->activity(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_UnitEvent.FadeGesture)
  return target;
}

size_t CDOTAUserMsg_UnitEvent_FadeGesture::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_UnitEvent.FadeGesture)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional int32 activity = 1;
  if (has_activity()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->activity());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_UnitEvent_FadeGesture::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_UnitEvent.FadeGesture)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_UnitEvent_FadeGesture* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_UnitEvent_FadeGesture>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_UnitEvent.FadeGesture)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_UnitEvent.FadeGesture)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_UnitEvent_FadeGesture::MergeFrom(const CDOTAUserMsg_UnitEvent_FadeGesture& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_UnitEvent.FadeGesture)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_activity()) {
    set_activity(from.activity());
  }
}

void CDOTAUserMsg_UnitEvent_FadeGesture::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_UnitEvent.FadeGesture)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_UnitEvent_FadeGesture::CopyFrom(const CDOTAUserMsg_UnitEvent_FadeGesture& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_UnitEvent.FadeGesture)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_UnitEvent_FadeGesture::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_UnitEvent_FadeGesture::Swap(CDOTAUserMsg_UnitEvent_FadeGesture* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_UnitEvent_FadeGesture::InternalSwap(CDOTAUserMsg_UnitEvent_FadeGesture* other) {
  std::swap(activity_, other->activity_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_UnitEvent_FadeGesture::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_UnitEvent_FadeGesture

// optional int32 activity = 1;
bool CDOTAUserMsg_UnitEvent_FadeGesture::has_activity() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_UnitEvent_FadeGesture::set_has_activity() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_UnitEvent_FadeGesture::clear_has_activity() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_UnitEvent_FadeGesture::clear_activity() {
  activity_ = 0;
  clear_has_activity();
}
::google::protobuf::int32 CDOTAUserMsg_UnitEvent_FadeGesture::activity() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_UnitEvent.FadeGesture.activity)
  return activity_;
}
void CDOTAUserMsg_UnitEvent_FadeGesture::set_activity(::google::protobuf::int32 value) {
  set_has_activity();
  activity_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_UnitEvent.FadeGesture.activity)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_UnitEvent::kMsgTypeFieldNumber;
const int CDOTAUserMsg_UnitEvent::kEntityIndexFieldNumber;
const int CDOTAUserMsg_UnitEvent::kSpeechFieldNumber;
const int CDOTAUserMsg_UnitEvent::kSpeechMuteFieldNumber;
const int CDOTAUserMsg_UnitEvent::kAddGestureFieldNumber;
const int CDOTAUserMsg_UnitEvent::kRemoveGestureFieldNumber;
const int CDOTAUserMsg_UnitEvent::kBloodImpactFieldNumber;
const int CDOTAUserMsg_UnitEvent::kFadeGestureFieldNumber;
const int CDOTAUserMsg_UnitEvent::kSpeechMatchOnClientFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_UnitEvent::CDOTAUserMsg_UnitEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_UnitEvent)
}
CDOTAUserMsg_UnitEvent::CDOTAUserMsg_UnitEvent(const CDOTAUserMsg_UnitEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_speech()) {
    speech_ = new ::proto::dota::CDOTAUserMsg_UnitEvent_Speech(*from.speech_);
  } else {
    speech_ = NULL;
  }
  if (from.has_speech_mute()) {
    speech_mute_ = new ::proto::dota::CDOTAUserMsg_UnitEvent_SpeechMute(*from.speech_mute_);
  } else {
    speech_mute_ = NULL;
  }
  if (from.has_add_gesture()) {
    add_gesture_ = new ::proto::dota::CDOTAUserMsg_UnitEvent_AddGesture(*from.add_gesture_);
  } else {
    add_gesture_ = NULL;
  }
  if (from.has_remove_gesture()) {
    remove_gesture_ = new ::proto::dota::CDOTAUserMsg_UnitEvent_RemoveGesture(*from.remove_gesture_);
  } else {
    remove_gesture_ = NULL;
  }
  if (from.has_blood_impact()) {
    blood_impact_ = new ::proto::dota::CDOTAUserMsg_UnitEvent_BloodImpact(*from.blood_impact_);
  } else {
    blood_impact_ = NULL;
  }
  if (from.has_fade_gesture()) {
    fade_gesture_ = new ::proto::dota::CDOTAUserMsg_UnitEvent_FadeGesture(*from.fade_gesture_);
  } else {
    fade_gesture_ = NULL;
  }
  if (from.has_speech_match_on_client()) {
    speech_match_on_client_ = new ::proto::dota::CDOTASpeechMatchOnClient(*from.speech_match_on_client_);
  } else {
    speech_match_on_client_ = NULL;
  }
  ::memcpy(&msg_type_, &from.msg_type_,
    reinterpret_cast<char*>(&entity_index_) -
    reinterpret_cast<char*>(&msg_type_) + sizeof(entity_index_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_UnitEvent)
}

void CDOTAUserMsg_UnitEvent::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&speech_, 0, reinterpret_cast<char*>(&entity_index_) -
    reinterpret_cast<char*>(&speech_) + sizeof(entity_index_));
}

CDOTAUserMsg_UnitEvent::~CDOTAUserMsg_UnitEvent() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_UnitEvent)
  SharedDtor();
}

void CDOTAUserMsg_UnitEvent::SharedDtor() {
  if (this != internal_default_instance()) {
    delete speech_;
  }
  if (this != internal_default_instance()) {
    delete speech_mute_;
  }
  if (this != internal_default_instance()) {
    delete add_gesture_;
  }
  if (this != internal_default_instance()) {
    delete remove_gesture_;
  }
  if (this != internal_default_instance()) {
    delete blood_impact_;
  }
  if (this != internal_default_instance()) {
    delete fade_gesture_;
  }
  if (this != internal_default_instance()) {
    delete speech_match_on_client_;
  }
}

void CDOTAUserMsg_UnitEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_UnitEvent::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_UnitEvent& CDOTAUserMsg_UnitEvent::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_UnitEvent* CDOTAUserMsg_UnitEvent::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_UnitEvent* n = new CDOTAUserMsg_UnitEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_UnitEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_UnitEvent)
  if (_has_bits_[0 / 32] & 127u) {
    if (has_speech()) {
      GOOGLE_DCHECK(speech_ != NULL);
      speech_->::proto::dota::CDOTAUserMsg_UnitEvent_Speech::Clear();
    }
    if (has_speech_mute()) {
      GOOGLE_DCHECK(speech_mute_ != NULL);
      speech_mute_->::proto::dota::CDOTAUserMsg_UnitEvent_SpeechMute::Clear();
    }
    if (has_add_gesture()) {
      GOOGLE_DCHECK(add_gesture_ != NULL);
      add_gesture_->::proto::dota::CDOTAUserMsg_UnitEvent_AddGesture::Clear();
    }
    if (has_remove_gesture()) {
      GOOGLE_DCHECK(remove_gesture_ != NULL);
      remove_gesture_->::proto::dota::CDOTAUserMsg_UnitEvent_RemoveGesture::Clear();
    }
    if (has_blood_impact()) {
      GOOGLE_DCHECK(blood_impact_ != NULL);
      blood_impact_->::proto::dota::CDOTAUserMsg_UnitEvent_BloodImpact::Clear();
    }
    if (has_fade_gesture()) {
      GOOGLE_DCHECK(fade_gesture_ != NULL);
      fade_gesture_->::proto::dota::CDOTAUserMsg_UnitEvent_FadeGesture::Clear();
    }
    if (has_speech_match_on_client()) {
      GOOGLE_DCHECK(speech_match_on_client_ != NULL);
      speech_match_on_client_->::proto::dota::CDOTASpeechMatchOnClient::Clear();
    }
  }
  msg_type_ = 0;
  entity_index_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_UnitEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_UnitEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .proto.dota.EDotaEntityMessages msg_type = 1 [default = DOTA_UNIT_SPEECH];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::EDotaEntityMessages_IsValid(value)) {
            set_msg_type(static_cast< ::proto::dota::EDotaEntityMessages >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 entity_index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_entity_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entity_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CDOTAUserMsg_UnitEvent.Speech speech = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_speech()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CDOTAUserMsg_UnitEvent.SpeechMute speech_mute = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_speech_mute()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CDOTAUserMsg_UnitEvent.AddGesture add_gesture = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_add_gesture()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CDOTAUserMsg_UnitEvent.RemoveGesture remove_gesture = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_remove_gesture()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CDOTAUserMsg_UnitEvent.BloodImpact blood_impact = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_blood_impact()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CDOTAUserMsg_UnitEvent.FadeGesture fade_gesture = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fade_gesture()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CDOTASpeechMatchOnClient speech_match_on_client = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_speech_match_on_client()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_UnitEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_UnitEvent)
  return false;
#undef DO_
}

void CDOTAUserMsg_UnitEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_UnitEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .proto.dota.EDotaEntityMessages msg_type = 1 [default = DOTA_UNIT_SPEECH];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msg_type(), output);
  }

  // required int32 entity_index = 2;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->entity_index(), output);
  }

  // optional .proto.dota.CDOTAUserMsg_UnitEvent.Speech speech = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->speech_, output);
  }

  // optional .proto.dota.CDOTAUserMsg_UnitEvent.SpeechMute speech_mute = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->speech_mute_, output);
  }

  // optional .proto.dota.CDOTAUserMsg_UnitEvent.AddGesture add_gesture = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->add_gesture_, output);
  }

  // optional .proto.dota.CDOTAUserMsg_UnitEvent.RemoveGesture remove_gesture = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->remove_gesture_, output);
  }

  // optional .proto.dota.CDOTAUserMsg_UnitEvent.BloodImpact blood_impact = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->blood_impact_, output);
  }

  // optional .proto.dota.CDOTAUserMsg_UnitEvent.FadeGesture fade_gesture = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->fade_gesture_, output);
  }

  // optional .proto.dota.CDOTASpeechMatchOnClient speech_match_on_client = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->speech_match_on_client_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_UnitEvent)
}

::google::protobuf::uint8* CDOTAUserMsg_UnitEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_UnitEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .proto.dota.EDotaEntityMessages msg_type = 1 [default = DOTA_UNIT_SPEECH];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msg_type(), target);
  }

  // required int32 entity_index = 2;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->entity_index(), target);
  }

  // optional .proto.dota.CDOTAUserMsg_UnitEvent.Speech speech = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->speech_, deterministic, target);
  }

  // optional .proto.dota.CDOTAUserMsg_UnitEvent.SpeechMute speech_mute = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->speech_mute_, deterministic, target);
  }

  // optional .proto.dota.CDOTAUserMsg_UnitEvent.AddGesture add_gesture = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->add_gesture_, deterministic, target);
  }

  // optional .proto.dota.CDOTAUserMsg_UnitEvent.RemoveGesture remove_gesture = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->remove_gesture_, deterministic, target);
  }

  // optional .proto.dota.CDOTAUserMsg_UnitEvent.BloodImpact blood_impact = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->blood_impact_, deterministic, target);
  }

  // optional .proto.dota.CDOTAUserMsg_UnitEvent.FadeGesture fade_gesture = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->fade_gesture_, deterministic, target);
  }

  // optional .proto.dota.CDOTASpeechMatchOnClient speech_match_on_client = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->speech_match_on_client_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_UnitEvent)
  return target;
}

size_t CDOTAUserMsg_UnitEvent::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:proto.dota.CDOTAUserMsg_UnitEvent)
  size_t total_size = 0;

  if (has_msg_type()) {
    // required .proto.dota.EDotaEntityMessages msg_type = 1 [default = DOTA_UNIT_SPEECH];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_type());
  }

  if (has_entity_index()) {
    // required int32 entity_index = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->entity_index());
  }

  return total_size;
}
size_t CDOTAUserMsg_UnitEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_UnitEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000180) ^ 0x00000180) == 0) {  // All required fields are present.
    // required .proto.dota.EDotaEntityMessages msg_type = 1 [default = DOTA_UNIT_SPEECH];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_type());

    // required int32 entity_index = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->entity_index());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional .proto.dota.CDOTAUserMsg_UnitEvent.Speech speech = 3;
    if (has_speech()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->speech_);
    }

    // optional .proto.dota.CDOTAUserMsg_UnitEvent.SpeechMute speech_mute = 4;
    if (has_speech_mute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->speech_mute_);
    }

    // optional .proto.dota.CDOTAUserMsg_UnitEvent.AddGesture add_gesture = 5;
    if (has_add_gesture()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->add_gesture_);
    }

    // optional .proto.dota.CDOTAUserMsg_UnitEvent.RemoveGesture remove_gesture = 6;
    if (has_remove_gesture()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->remove_gesture_);
    }

    // optional .proto.dota.CDOTAUserMsg_UnitEvent.BloodImpact blood_impact = 7;
    if (has_blood_impact()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->blood_impact_);
    }

    // optional .proto.dota.CDOTAUserMsg_UnitEvent.FadeGesture fade_gesture = 8;
    if (has_fade_gesture()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->fade_gesture_);
    }

    // optional .proto.dota.CDOTASpeechMatchOnClient speech_match_on_client = 9;
    if (has_speech_match_on_client()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->speech_match_on_client_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_UnitEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_UnitEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_UnitEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_UnitEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_UnitEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_UnitEvent)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_UnitEvent::MergeFrom(const CDOTAUserMsg_UnitEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_UnitEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_speech()->::proto::dota::CDOTAUserMsg_UnitEvent_Speech::MergeFrom(from.speech());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_speech_mute()->::proto::dota::CDOTAUserMsg_UnitEvent_SpeechMute::MergeFrom(from.speech_mute());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_add_gesture()->::proto::dota::CDOTAUserMsg_UnitEvent_AddGesture::MergeFrom(from.add_gesture());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_remove_gesture()->::proto::dota::CDOTAUserMsg_UnitEvent_RemoveGesture::MergeFrom(from.remove_gesture());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_blood_impact()->::proto::dota::CDOTAUserMsg_UnitEvent_BloodImpact::MergeFrom(from.blood_impact());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_fade_gesture()->::proto::dota::CDOTAUserMsg_UnitEvent_FadeGesture::MergeFrom(from.fade_gesture());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_speech_match_on_client()->::proto::dota::CDOTASpeechMatchOnClient::MergeFrom(from.speech_match_on_client());
    }
    if (cached_has_bits & 0x00000080u) {
      msg_type_ = from.msg_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_entity_index(from.entity_index());
  }
}

void CDOTAUserMsg_UnitEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_UnitEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_UnitEvent::CopyFrom(const CDOTAUserMsg_UnitEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_UnitEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_UnitEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000180) != 0x00000180) return false;
  if (has_speech_match_on_client()) {
    if (!this->speech_match_on_client_->IsInitialized()) return false;
  }
  return true;
}

void CDOTAUserMsg_UnitEvent::Swap(CDOTAUserMsg_UnitEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_UnitEvent::InternalSwap(CDOTAUserMsg_UnitEvent* other) {
  std::swap(speech_, other->speech_);
  std::swap(speech_mute_, other->speech_mute_);
  std::swap(add_gesture_, other->add_gesture_);
  std::swap(remove_gesture_, other->remove_gesture_);
  std::swap(blood_impact_, other->blood_impact_);
  std::swap(fade_gesture_, other->fade_gesture_);
  std::swap(speech_match_on_client_, other->speech_match_on_client_);
  std::swap(msg_type_, other->msg_type_);
  std::swap(entity_index_, other->entity_index_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_UnitEvent::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_UnitEvent

// required .proto.dota.EDotaEntityMessages msg_type = 1 [default = DOTA_UNIT_SPEECH];
bool CDOTAUserMsg_UnitEvent::has_msg_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CDOTAUserMsg_UnitEvent::set_has_msg_type() {
  _has_bits_[0] |= 0x00000080u;
}
void CDOTAUserMsg_UnitEvent::clear_has_msg_type() {
  _has_bits_[0] &= ~0x00000080u;
}
void CDOTAUserMsg_UnitEvent::clear_msg_type() {
  msg_type_ = 0;
  clear_has_msg_type();
}
::proto::dota::EDotaEntityMessages CDOTAUserMsg_UnitEvent::msg_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_UnitEvent.msg_type)
  return static_cast< ::proto::dota::EDotaEntityMessages >(msg_type_);
}
void CDOTAUserMsg_UnitEvent::set_msg_type(::proto::dota::EDotaEntityMessages value) {
  assert(::proto::dota::EDotaEntityMessages_IsValid(value));
  set_has_msg_type();
  msg_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_UnitEvent.msg_type)
}

// required int32 entity_index = 2;
bool CDOTAUserMsg_UnitEvent::has_entity_index() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CDOTAUserMsg_UnitEvent::set_has_entity_index() {
  _has_bits_[0] |= 0x00000100u;
}
void CDOTAUserMsg_UnitEvent::clear_has_entity_index() {
  _has_bits_[0] &= ~0x00000100u;
}
void CDOTAUserMsg_UnitEvent::clear_entity_index() {
  entity_index_ = 0;
  clear_has_entity_index();
}
::google::protobuf::int32 CDOTAUserMsg_UnitEvent::entity_index() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_UnitEvent.entity_index)
  return entity_index_;
}
void CDOTAUserMsg_UnitEvent::set_entity_index(::google::protobuf::int32 value) {
  set_has_entity_index();
  entity_index_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_UnitEvent.entity_index)
}

// optional .proto.dota.CDOTAUserMsg_UnitEvent.Speech speech = 3;
bool CDOTAUserMsg_UnitEvent::has_speech() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_UnitEvent::set_has_speech() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_UnitEvent::clear_has_speech() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_UnitEvent::clear_speech() {
  if (speech_ != NULL) speech_->::proto::dota::CDOTAUserMsg_UnitEvent_Speech::Clear();
  clear_has_speech();
}
const ::proto::dota::CDOTAUserMsg_UnitEvent_Speech& CDOTAUserMsg_UnitEvent::speech() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_UnitEvent.speech)
  return speech_ != NULL ? *speech_
                         : *::proto::dota::CDOTAUserMsg_UnitEvent_Speech::internal_default_instance();
}
::proto::dota::CDOTAUserMsg_UnitEvent_Speech* CDOTAUserMsg_UnitEvent::mutable_speech() {
  set_has_speech();
  if (speech_ == NULL) {
    speech_ = new ::proto::dota::CDOTAUserMsg_UnitEvent_Speech;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_UnitEvent.speech)
  return speech_;
}
::proto::dota::CDOTAUserMsg_UnitEvent_Speech* CDOTAUserMsg_UnitEvent::release_speech() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAUserMsg_UnitEvent.speech)
  clear_has_speech();
  ::proto::dota::CDOTAUserMsg_UnitEvent_Speech* temp = speech_;
  speech_ = NULL;
  return temp;
}
void CDOTAUserMsg_UnitEvent::set_allocated_speech(::proto::dota::CDOTAUserMsg_UnitEvent_Speech* speech) {
  delete speech_;
  speech_ = speech;
  if (speech) {
    set_has_speech();
  } else {
    clear_has_speech();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAUserMsg_UnitEvent.speech)
}

// optional .proto.dota.CDOTAUserMsg_UnitEvent.SpeechMute speech_mute = 4;
bool CDOTAUserMsg_UnitEvent::has_speech_mute() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAUserMsg_UnitEvent::set_has_speech_mute() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAUserMsg_UnitEvent::clear_has_speech_mute() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAUserMsg_UnitEvent::clear_speech_mute() {
  if (speech_mute_ != NULL) speech_mute_->::proto::dota::CDOTAUserMsg_UnitEvent_SpeechMute::Clear();
  clear_has_speech_mute();
}
const ::proto::dota::CDOTAUserMsg_UnitEvent_SpeechMute& CDOTAUserMsg_UnitEvent::speech_mute() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_UnitEvent.speech_mute)
  return speech_mute_ != NULL ? *speech_mute_
                         : *::proto::dota::CDOTAUserMsg_UnitEvent_SpeechMute::internal_default_instance();
}
::proto::dota::CDOTAUserMsg_UnitEvent_SpeechMute* CDOTAUserMsg_UnitEvent::mutable_speech_mute() {
  set_has_speech_mute();
  if (speech_mute_ == NULL) {
    speech_mute_ = new ::proto::dota::CDOTAUserMsg_UnitEvent_SpeechMute;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_UnitEvent.speech_mute)
  return speech_mute_;
}
::proto::dota::CDOTAUserMsg_UnitEvent_SpeechMute* CDOTAUserMsg_UnitEvent::release_speech_mute() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAUserMsg_UnitEvent.speech_mute)
  clear_has_speech_mute();
  ::proto::dota::CDOTAUserMsg_UnitEvent_SpeechMute* temp = speech_mute_;
  speech_mute_ = NULL;
  return temp;
}
void CDOTAUserMsg_UnitEvent::set_allocated_speech_mute(::proto::dota::CDOTAUserMsg_UnitEvent_SpeechMute* speech_mute) {
  delete speech_mute_;
  speech_mute_ = speech_mute;
  if (speech_mute) {
    set_has_speech_mute();
  } else {
    clear_has_speech_mute();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAUserMsg_UnitEvent.speech_mute)
}

// optional .proto.dota.CDOTAUserMsg_UnitEvent.AddGesture add_gesture = 5;
bool CDOTAUserMsg_UnitEvent::has_add_gesture() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDOTAUserMsg_UnitEvent::set_has_add_gesture() {
  _has_bits_[0] |= 0x00000004u;
}
void CDOTAUserMsg_UnitEvent::clear_has_add_gesture() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDOTAUserMsg_UnitEvent::clear_add_gesture() {
  if (add_gesture_ != NULL) add_gesture_->::proto::dota::CDOTAUserMsg_UnitEvent_AddGesture::Clear();
  clear_has_add_gesture();
}
const ::proto::dota::CDOTAUserMsg_UnitEvent_AddGesture& CDOTAUserMsg_UnitEvent::add_gesture() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_UnitEvent.add_gesture)
  return add_gesture_ != NULL ? *add_gesture_
                         : *::proto::dota::CDOTAUserMsg_UnitEvent_AddGesture::internal_default_instance();
}
::proto::dota::CDOTAUserMsg_UnitEvent_AddGesture* CDOTAUserMsg_UnitEvent::mutable_add_gesture() {
  set_has_add_gesture();
  if (add_gesture_ == NULL) {
    add_gesture_ = new ::proto::dota::CDOTAUserMsg_UnitEvent_AddGesture;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_UnitEvent.add_gesture)
  return add_gesture_;
}
::proto::dota::CDOTAUserMsg_UnitEvent_AddGesture* CDOTAUserMsg_UnitEvent::release_add_gesture() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAUserMsg_UnitEvent.add_gesture)
  clear_has_add_gesture();
  ::proto::dota::CDOTAUserMsg_UnitEvent_AddGesture* temp = add_gesture_;
  add_gesture_ = NULL;
  return temp;
}
void CDOTAUserMsg_UnitEvent::set_allocated_add_gesture(::proto::dota::CDOTAUserMsg_UnitEvent_AddGesture* add_gesture) {
  delete add_gesture_;
  add_gesture_ = add_gesture;
  if (add_gesture) {
    set_has_add_gesture();
  } else {
    clear_has_add_gesture();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAUserMsg_UnitEvent.add_gesture)
}

// optional .proto.dota.CDOTAUserMsg_UnitEvent.RemoveGesture remove_gesture = 6;
bool CDOTAUserMsg_UnitEvent::has_remove_gesture() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CDOTAUserMsg_UnitEvent::set_has_remove_gesture() {
  _has_bits_[0] |= 0x00000008u;
}
void CDOTAUserMsg_UnitEvent::clear_has_remove_gesture() {
  _has_bits_[0] &= ~0x00000008u;
}
void CDOTAUserMsg_UnitEvent::clear_remove_gesture() {
  if (remove_gesture_ != NULL) remove_gesture_->::proto::dota::CDOTAUserMsg_UnitEvent_RemoveGesture::Clear();
  clear_has_remove_gesture();
}
const ::proto::dota::CDOTAUserMsg_UnitEvent_RemoveGesture& CDOTAUserMsg_UnitEvent::remove_gesture() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_UnitEvent.remove_gesture)
  return remove_gesture_ != NULL ? *remove_gesture_
                         : *::proto::dota::CDOTAUserMsg_UnitEvent_RemoveGesture::internal_default_instance();
}
::proto::dota::CDOTAUserMsg_UnitEvent_RemoveGesture* CDOTAUserMsg_UnitEvent::mutable_remove_gesture() {
  set_has_remove_gesture();
  if (remove_gesture_ == NULL) {
    remove_gesture_ = new ::proto::dota::CDOTAUserMsg_UnitEvent_RemoveGesture;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_UnitEvent.remove_gesture)
  return remove_gesture_;
}
::proto::dota::CDOTAUserMsg_UnitEvent_RemoveGesture* CDOTAUserMsg_UnitEvent::release_remove_gesture() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAUserMsg_UnitEvent.remove_gesture)
  clear_has_remove_gesture();
  ::proto::dota::CDOTAUserMsg_UnitEvent_RemoveGesture* temp = remove_gesture_;
  remove_gesture_ = NULL;
  return temp;
}
void CDOTAUserMsg_UnitEvent::set_allocated_remove_gesture(::proto::dota::CDOTAUserMsg_UnitEvent_RemoveGesture* remove_gesture) {
  delete remove_gesture_;
  remove_gesture_ = remove_gesture;
  if (remove_gesture) {
    set_has_remove_gesture();
  } else {
    clear_has_remove_gesture();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAUserMsg_UnitEvent.remove_gesture)
}

// optional .proto.dota.CDOTAUserMsg_UnitEvent.BloodImpact blood_impact = 7;
bool CDOTAUserMsg_UnitEvent::has_blood_impact() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CDOTAUserMsg_UnitEvent::set_has_blood_impact() {
  _has_bits_[0] |= 0x00000010u;
}
void CDOTAUserMsg_UnitEvent::clear_has_blood_impact() {
  _has_bits_[0] &= ~0x00000010u;
}
void CDOTAUserMsg_UnitEvent::clear_blood_impact() {
  if (blood_impact_ != NULL) blood_impact_->::proto::dota::CDOTAUserMsg_UnitEvent_BloodImpact::Clear();
  clear_has_blood_impact();
}
const ::proto::dota::CDOTAUserMsg_UnitEvent_BloodImpact& CDOTAUserMsg_UnitEvent::blood_impact() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_UnitEvent.blood_impact)
  return blood_impact_ != NULL ? *blood_impact_
                         : *::proto::dota::CDOTAUserMsg_UnitEvent_BloodImpact::internal_default_instance();
}
::proto::dota::CDOTAUserMsg_UnitEvent_BloodImpact* CDOTAUserMsg_UnitEvent::mutable_blood_impact() {
  set_has_blood_impact();
  if (blood_impact_ == NULL) {
    blood_impact_ = new ::proto::dota::CDOTAUserMsg_UnitEvent_BloodImpact;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_UnitEvent.blood_impact)
  return blood_impact_;
}
::proto::dota::CDOTAUserMsg_UnitEvent_BloodImpact* CDOTAUserMsg_UnitEvent::release_blood_impact() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAUserMsg_UnitEvent.blood_impact)
  clear_has_blood_impact();
  ::proto::dota::CDOTAUserMsg_UnitEvent_BloodImpact* temp = blood_impact_;
  blood_impact_ = NULL;
  return temp;
}
void CDOTAUserMsg_UnitEvent::set_allocated_blood_impact(::proto::dota::CDOTAUserMsg_UnitEvent_BloodImpact* blood_impact) {
  delete blood_impact_;
  blood_impact_ = blood_impact;
  if (blood_impact) {
    set_has_blood_impact();
  } else {
    clear_has_blood_impact();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAUserMsg_UnitEvent.blood_impact)
}

// optional .proto.dota.CDOTAUserMsg_UnitEvent.FadeGesture fade_gesture = 8;
bool CDOTAUserMsg_UnitEvent::has_fade_gesture() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CDOTAUserMsg_UnitEvent::set_has_fade_gesture() {
  _has_bits_[0] |= 0x00000020u;
}
void CDOTAUserMsg_UnitEvent::clear_has_fade_gesture() {
  _has_bits_[0] &= ~0x00000020u;
}
void CDOTAUserMsg_UnitEvent::clear_fade_gesture() {
  if (fade_gesture_ != NULL) fade_gesture_->::proto::dota::CDOTAUserMsg_UnitEvent_FadeGesture::Clear();
  clear_has_fade_gesture();
}
const ::proto::dota::CDOTAUserMsg_UnitEvent_FadeGesture& CDOTAUserMsg_UnitEvent::fade_gesture() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_UnitEvent.fade_gesture)
  return fade_gesture_ != NULL ? *fade_gesture_
                         : *::proto::dota::CDOTAUserMsg_UnitEvent_FadeGesture::internal_default_instance();
}
::proto::dota::CDOTAUserMsg_UnitEvent_FadeGesture* CDOTAUserMsg_UnitEvent::mutable_fade_gesture() {
  set_has_fade_gesture();
  if (fade_gesture_ == NULL) {
    fade_gesture_ = new ::proto::dota::CDOTAUserMsg_UnitEvent_FadeGesture;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_UnitEvent.fade_gesture)
  return fade_gesture_;
}
::proto::dota::CDOTAUserMsg_UnitEvent_FadeGesture* CDOTAUserMsg_UnitEvent::release_fade_gesture() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAUserMsg_UnitEvent.fade_gesture)
  clear_has_fade_gesture();
  ::proto::dota::CDOTAUserMsg_UnitEvent_FadeGesture* temp = fade_gesture_;
  fade_gesture_ = NULL;
  return temp;
}
void CDOTAUserMsg_UnitEvent::set_allocated_fade_gesture(::proto::dota::CDOTAUserMsg_UnitEvent_FadeGesture* fade_gesture) {
  delete fade_gesture_;
  fade_gesture_ = fade_gesture;
  if (fade_gesture) {
    set_has_fade_gesture();
  } else {
    clear_has_fade_gesture();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAUserMsg_UnitEvent.fade_gesture)
}

// optional .proto.dota.CDOTASpeechMatchOnClient speech_match_on_client = 9;
bool CDOTAUserMsg_UnitEvent::has_speech_match_on_client() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CDOTAUserMsg_UnitEvent::set_has_speech_match_on_client() {
  _has_bits_[0] |= 0x00000040u;
}
void CDOTAUserMsg_UnitEvent::clear_has_speech_match_on_client() {
  _has_bits_[0] &= ~0x00000040u;
}
void CDOTAUserMsg_UnitEvent::clear_speech_match_on_client() {
  if (speech_match_on_client_ != NULL) speech_match_on_client_->::proto::dota::CDOTASpeechMatchOnClient::Clear();
  clear_has_speech_match_on_client();
}
const ::proto::dota::CDOTASpeechMatchOnClient& CDOTAUserMsg_UnitEvent::speech_match_on_client() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_UnitEvent.speech_match_on_client)
  return speech_match_on_client_ != NULL ? *speech_match_on_client_
                         : *::proto::dota::CDOTASpeechMatchOnClient::internal_default_instance();
}
::proto::dota::CDOTASpeechMatchOnClient* CDOTAUserMsg_UnitEvent::mutable_speech_match_on_client() {
  set_has_speech_match_on_client();
  if (speech_match_on_client_ == NULL) {
    speech_match_on_client_ = new ::proto::dota::CDOTASpeechMatchOnClient;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_UnitEvent.speech_match_on_client)
  return speech_match_on_client_;
}
::proto::dota::CDOTASpeechMatchOnClient* CDOTAUserMsg_UnitEvent::release_speech_match_on_client() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAUserMsg_UnitEvent.speech_match_on_client)
  clear_has_speech_match_on_client();
  ::proto::dota::CDOTASpeechMatchOnClient* temp = speech_match_on_client_;
  speech_match_on_client_ = NULL;
  return temp;
}
void CDOTAUserMsg_UnitEvent::set_allocated_speech_match_on_client(::proto::dota::CDOTASpeechMatchOnClient* speech_match_on_client) {
  delete speech_match_on_client_;
  speech_match_on_client_ = speech_match_on_client;
  if (speech_match_on_client) {
    set_has_speech_match_on_client();
  } else {
    clear_has_speech_match_on_client();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAUserMsg_UnitEvent.speech_match_on_client)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_ItemPurchased::kItemIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_ItemPurchased::CDOTAUserMsg_ItemPurchased()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_ItemPurchased)
}
CDOTAUserMsg_ItemPurchased::CDOTAUserMsg_ItemPurchased(const CDOTAUserMsg_ItemPurchased& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  item_index_ = from.item_index_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_ItemPurchased)
}

void CDOTAUserMsg_ItemPurchased::SharedCtor() {
  _cached_size_ = 0;
  item_index_ = 0;
}

CDOTAUserMsg_ItemPurchased::~CDOTAUserMsg_ItemPurchased() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_ItemPurchased)
  SharedDtor();
}

void CDOTAUserMsg_ItemPurchased::SharedDtor() {
}

void CDOTAUserMsg_ItemPurchased::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_ItemPurchased::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_ItemPurchased& CDOTAUserMsg_ItemPurchased::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_ItemPurchased* CDOTAUserMsg_ItemPurchased::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_ItemPurchased* n = new CDOTAUserMsg_ItemPurchased;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_ItemPurchased::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_ItemPurchased)
  item_index_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_ItemPurchased::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_ItemPurchased)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 item_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_item_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_ItemPurchased)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_ItemPurchased)
  return false;
#undef DO_
}

void CDOTAUserMsg_ItemPurchased::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_ItemPurchased)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 item_index = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->item_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_ItemPurchased)
}

::google::protobuf::uint8* CDOTAUserMsg_ItemPurchased::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_ItemPurchased)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 item_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->item_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_ItemPurchased)
  return target;
}

size_t CDOTAUserMsg_ItemPurchased::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_ItemPurchased)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional int32 item_index = 1;
  if (has_item_index()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->item_index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_ItemPurchased::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_ItemPurchased)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_ItemPurchased* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_ItemPurchased>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_ItemPurchased)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_ItemPurchased)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_ItemPurchased::MergeFrom(const CDOTAUserMsg_ItemPurchased& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_ItemPurchased)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_item_index()) {
    set_item_index(from.item_index());
  }
}

void CDOTAUserMsg_ItemPurchased::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_ItemPurchased)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_ItemPurchased::CopyFrom(const CDOTAUserMsg_ItemPurchased& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_ItemPurchased)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ItemPurchased::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_ItemPurchased::Swap(CDOTAUserMsg_ItemPurchased* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_ItemPurchased::InternalSwap(CDOTAUserMsg_ItemPurchased* other) {
  std::swap(item_index_, other->item_index_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_ItemPurchased::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_ItemPurchased

// optional int32 item_index = 1;
bool CDOTAUserMsg_ItemPurchased::has_item_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_ItemPurchased::set_has_item_index() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_ItemPurchased::clear_has_item_index() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_ItemPurchased::clear_item_index() {
  item_index_ = 0;
  clear_has_item_index();
}
::google::protobuf::int32 CDOTAUserMsg_ItemPurchased::item_index() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ItemPurchased.item_index)
  return item_index_;
}
void CDOTAUserMsg_ItemPurchased::set_item_index(::google::protobuf::int32 value) {
  set_has_item_index();
  item_index_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_ItemPurchased.item_index)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_ItemFound::kPlayerFieldNumber;
const int CDOTAUserMsg_ItemFound::kQualityFieldNumber;
const int CDOTAUserMsg_ItemFound::kRarityFieldNumber;
const int CDOTAUserMsg_ItemFound::kMethodFieldNumber;
const int CDOTAUserMsg_ItemFound::kItemdefFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_ItemFound::CDOTAUserMsg_ItemFound()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_ItemFound)
}
CDOTAUserMsg_ItemFound::CDOTAUserMsg_ItemFound(const CDOTAUserMsg_ItemFound& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&player_, &from.player_,
    reinterpret_cast<char*>(&itemdef_) -
    reinterpret_cast<char*>(&player_) + sizeof(itemdef_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_ItemFound)
}

void CDOTAUserMsg_ItemFound::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&player_, 0, reinterpret_cast<char*>(&itemdef_) -
    reinterpret_cast<char*>(&player_) + sizeof(itemdef_));
}

CDOTAUserMsg_ItemFound::~CDOTAUserMsg_ItemFound() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_ItemFound)
  SharedDtor();
}

void CDOTAUserMsg_ItemFound::SharedDtor() {
}

void CDOTAUserMsg_ItemFound::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_ItemFound::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_ItemFound& CDOTAUserMsg_ItemFound::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_ItemFound* CDOTAUserMsg_ItemFound::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_ItemFound* n = new CDOTAUserMsg_ItemFound;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_ItemFound::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_ItemFound)
  if (_has_bits_[0 / 32] & 31u) {
    ::memset(&player_, 0, reinterpret_cast<char*>(&itemdef_) -
      reinterpret_cast<char*>(&player_) + sizeof(itemdef_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_ItemFound::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_ItemFound)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 player = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_player();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 quality = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_quality();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 rarity = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_rarity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rarity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 method = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_method();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &method_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 itemdef = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_itemdef();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemdef_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_ItemFound)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_ItemFound)
  return false;
#undef DO_
}

void CDOTAUserMsg_ItemFound::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_ItemFound)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 player = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player(), output);
  }

  // optional int32 quality = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->quality(), output);
  }

  // optional int32 rarity = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rarity(), output);
  }

  // optional int32 method = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->method(), output);
  }

  // optional int32 itemdef = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->itemdef(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_ItemFound)
}

::google::protobuf::uint8* CDOTAUserMsg_ItemFound::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_ItemFound)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 player = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player(), target);
  }

  // optional int32 quality = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->quality(), target);
  }

  // optional int32 rarity = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rarity(), target);
  }

  // optional int32 method = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->method(), target);
  }

  // optional int32 itemdef = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->itemdef(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_ItemFound)
  return target;
}

size_t CDOTAUserMsg_ItemFound::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_ItemFound)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional int32 player = 1;
    if (has_player()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player());
    }

    // optional int32 quality = 2;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }

    // optional int32 rarity = 3;
    if (has_rarity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rarity());
    }

    // optional int32 method = 4;
    if (has_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->method());
    }

    // optional int32 itemdef = 5;
    if (has_itemdef()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemdef());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_ItemFound::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_ItemFound)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_ItemFound* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_ItemFound>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_ItemFound)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_ItemFound)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_ItemFound::MergeFrom(const CDOTAUserMsg_ItemFound& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_ItemFound)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      player_ = from.player_;
    }
    if (cached_has_bits & 0x00000002u) {
      quality_ = from.quality_;
    }
    if (cached_has_bits & 0x00000004u) {
      rarity_ = from.rarity_;
    }
    if (cached_has_bits & 0x00000008u) {
      method_ = from.method_;
    }
    if (cached_has_bits & 0x00000010u) {
      itemdef_ = from.itemdef_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_ItemFound::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_ItemFound)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_ItemFound::CopyFrom(const CDOTAUserMsg_ItemFound& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_ItemFound)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ItemFound::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_ItemFound::Swap(CDOTAUserMsg_ItemFound* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_ItemFound::InternalSwap(CDOTAUserMsg_ItemFound* other) {
  std::swap(player_, other->player_);
  std::swap(quality_, other->quality_);
  std::swap(rarity_, other->rarity_);
  std::swap(method_, other->method_);
  std::swap(itemdef_, other->itemdef_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_ItemFound::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_ItemFound

// optional int32 player = 1;
bool CDOTAUserMsg_ItemFound::has_player() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_ItemFound::set_has_player() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_ItemFound::clear_has_player() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_ItemFound::clear_player() {
  player_ = 0;
  clear_has_player();
}
::google::protobuf::int32 CDOTAUserMsg_ItemFound::player() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ItemFound.player)
  return player_;
}
void CDOTAUserMsg_ItemFound::set_player(::google::protobuf::int32 value) {
  set_has_player();
  player_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_ItemFound.player)
}

// optional int32 quality = 2;
bool CDOTAUserMsg_ItemFound::has_quality() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAUserMsg_ItemFound::set_has_quality() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAUserMsg_ItemFound::clear_has_quality() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAUserMsg_ItemFound::clear_quality() {
  quality_ = 0;
  clear_has_quality();
}
::google::protobuf::int32 CDOTAUserMsg_ItemFound::quality() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ItemFound.quality)
  return quality_;
}
void CDOTAUserMsg_ItemFound::set_quality(::google::protobuf::int32 value) {
  set_has_quality();
  quality_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_ItemFound.quality)
}

// optional int32 rarity = 3;
bool CDOTAUserMsg_ItemFound::has_rarity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDOTAUserMsg_ItemFound::set_has_rarity() {
  _has_bits_[0] |= 0x00000004u;
}
void CDOTAUserMsg_ItemFound::clear_has_rarity() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDOTAUserMsg_ItemFound::clear_rarity() {
  rarity_ = 0;
  clear_has_rarity();
}
::google::protobuf::int32 CDOTAUserMsg_ItemFound::rarity() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ItemFound.rarity)
  return rarity_;
}
void CDOTAUserMsg_ItemFound::set_rarity(::google::protobuf::int32 value) {
  set_has_rarity();
  rarity_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_ItemFound.rarity)
}

// optional int32 method = 4;
bool CDOTAUserMsg_ItemFound::has_method() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CDOTAUserMsg_ItemFound::set_has_method() {
  _has_bits_[0] |= 0x00000008u;
}
void CDOTAUserMsg_ItemFound::clear_has_method() {
  _has_bits_[0] &= ~0x00000008u;
}
void CDOTAUserMsg_ItemFound::clear_method() {
  method_ = 0;
  clear_has_method();
}
::google::protobuf::int32 CDOTAUserMsg_ItemFound::method() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ItemFound.method)
  return method_;
}
void CDOTAUserMsg_ItemFound::set_method(::google::protobuf::int32 value) {
  set_has_method();
  method_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_ItemFound.method)
}

// optional int32 itemdef = 5;
bool CDOTAUserMsg_ItemFound::has_itemdef() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CDOTAUserMsg_ItemFound::set_has_itemdef() {
  _has_bits_[0] |= 0x00000010u;
}
void CDOTAUserMsg_ItemFound::clear_has_itemdef() {
  _has_bits_[0] &= ~0x00000010u;
}
void CDOTAUserMsg_ItemFound::clear_itemdef() {
  itemdef_ = 0;
  clear_has_itemdef();
}
::google::protobuf::int32 CDOTAUserMsg_ItemFound::itemdef() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ItemFound.itemdef)
  return itemdef_;
}
void CDOTAUserMsg_ItemFound::set_itemdef(::google::protobuf::int32 value) {
  set_has_itemdef();
  itemdef_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_ItemFound.itemdef)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_ParticleManager_ReleaseParticleIndex::CDOTAUserMsg_ParticleManager_ReleaseParticleIndex()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_ParticleManager.ReleaseParticleIndex)
}
CDOTAUserMsg_ParticleManager_ReleaseParticleIndex::CDOTAUserMsg_ParticleManager_ReleaseParticleIndex(const CDOTAUserMsg_ParticleManager_ReleaseParticleIndex& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_ParticleManager.ReleaseParticleIndex)
}

void CDOTAUserMsg_ParticleManager_ReleaseParticleIndex::SharedCtor() {
  _cached_size_ = 0;
}

CDOTAUserMsg_ParticleManager_ReleaseParticleIndex::~CDOTAUserMsg_ParticleManager_ReleaseParticleIndex() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_ParticleManager.ReleaseParticleIndex)
  SharedDtor();
}

void CDOTAUserMsg_ParticleManager_ReleaseParticleIndex::SharedDtor() {
}

void CDOTAUserMsg_ParticleManager_ReleaseParticleIndex::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_ParticleManager_ReleaseParticleIndex::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_ParticleManager_ReleaseParticleIndex& CDOTAUserMsg_ParticleManager_ReleaseParticleIndex::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_ParticleManager_ReleaseParticleIndex* CDOTAUserMsg_ParticleManager_ReleaseParticleIndex::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_ParticleManager_ReleaseParticleIndex* n = new CDOTAUserMsg_ParticleManager_ReleaseParticleIndex;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_ParticleManager_ReleaseParticleIndex::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_ParticleManager.ReleaseParticleIndex)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_ParticleManager_ReleaseParticleIndex::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_ParticleManager.ReleaseParticleIndex)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_ParticleManager.ReleaseParticleIndex)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_ParticleManager.ReleaseParticleIndex)
  return false;
#undef DO_
}

void CDOTAUserMsg_ParticleManager_ReleaseParticleIndex::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_ParticleManager.ReleaseParticleIndex)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_ParticleManager.ReleaseParticleIndex)
}

::google::protobuf::uint8* CDOTAUserMsg_ParticleManager_ReleaseParticleIndex::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_ParticleManager.ReleaseParticleIndex)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_ParticleManager.ReleaseParticleIndex)
  return target;
}

size_t CDOTAUserMsg_ParticleManager_ReleaseParticleIndex::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_ParticleManager.ReleaseParticleIndex)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_ParticleManager_ReleaseParticleIndex::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_ParticleManager.ReleaseParticleIndex)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_ParticleManager_ReleaseParticleIndex* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_ParticleManager_ReleaseParticleIndex>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_ParticleManager.ReleaseParticleIndex)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_ParticleManager.ReleaseParticleIndex)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_ParticleManager_ReleaseParticleIndex::MergeFrom(const CDOTAUserMsg_ParticleManager_ReleaseParticleIndex& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_ParticleManager.ReleaseParticleIndex)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CDOTAUserMsg_ParticleManager_ReleaseParticleIndex::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_ParticleManager.ReleaseParticleIndex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_ParticleManager_ReleaseParticleIndex::CopyFrom(const CDOTAUserMsg_ParticleManager_ReleaseParticleIndex& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_ParticleManager.ReleaseParticleIndex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ParticleManager_ReleaseParticleIndex::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_ParticleManager_ReleaseParticleIndex::Swap(CDOTAUserMsg_ParticleManager_ReleaseParticleIndex* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_ParticleManager_ReleaseParticleIndex::InternalSwap(CDOTAUserMsg_ParticleManager_ReleaseParticleIndex* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_ParticleManager_ReleaseParticleIndex::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_ParticleManager_ReleaseParticleIndex

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_ParticleManager_CreateParticle::kParticleNameIndexFieldNumber;
const int CDOTAUserMsg_ParticleManager_CreateParticle::kAttachTypeFieldNumber;
const int CDOTAUserMsg_ParticleManager_CreateParticle::kEntityHandleFieldNumber;
const int CDOTAUserMsg_ParticleManager_CreateParticle::kEntityHandleForModifiersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_ParticleManager_CreateParticle::CDOTAUserMsg_ParticleManager_CreateParticle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_ParticleManager.CreateParticle)
}
CDOTAUserMsg_ParticleManager_CreateParticle::CDOTAUserMsg_ParticleManager_CreateParticle(const CDOTAUserMsg_ParticleManager_CreateParticle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&particle_name_index_, &from.particle_name_index_,
    reinterpret_cast<char*>(&entity_handle_for_modifiers_) -
    reinterpret_cast<char*>(&particle_name_index_) + sizeof(entity_handle_for_modifiers_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_ParticleManager.CreateParticle)
}

void CDOTAUserMsg_ParticleManager_CreateParticle::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&particle_name_index_, 0, reinterpret_cast<char*>(&entity_handle_for_modifiers_) -
    reinterpret_cast<char*>(&particle_name_index_) + sizeof(entity_handle_for_modifiers_));
}

CDOTAUserMsg_ParticleManager_CreateParticle::~CDOTAUserMsg_ParticleManager_CreateParticle() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_ParticleManager.CreateParticle)
  SharedDtor();
}

void CDOTAUserMsg_ParticleManager_CreateParticle::SharedDtor() {
}

void CDOTAUserMsg_ParticleManager_CreateParticle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_ParticleManager_CreateParticle::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_ParticleManager_CreateParticle& CDOTAUserMsg_ParticleManager_CreateParticle::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_ParticleManager_CreateParticle* CDOTAUserMsg_ParticleManager_CreateParticle::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_ParticleManager_CreateParticle* n = new CDOTAUserMsg_ParticleManager_CreateParticle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_ParticleManager_CreateParticle::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_ParticleManager.CreateParticle)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&particle_name_index_, 0, reinterpret_cast<char*>(&entity_handle_for_modifiers_) -
      reinterpret_cast<char*>(&particle_name_index_) + sizeof(entity_handle_for_modifiers_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_ParticleManager_CreateParticle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_ParticleManager.CreateParticle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 particle_name_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_particle_name_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &particle_name_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 attach_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_attach_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attach_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 entity_handle = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_entity_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entity_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 entity_handle_for_modifiers = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_entity_handle_for_modifiers();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entity_handle_for_modifiers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_ParticleManager.CreateParticle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_ParticleManager.CreateParticle)
  return false;
#undef DO_
}

void CDOTAUserMsg_ParticleManager_CreateParticle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_ParticleManager.CreateParticle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 particle_name_index = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->particle_name_index(), output);
  }

  // optional int32 attach_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->attach_type(), output);
  }

  // optional int32 entity_handle = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->entity_handle(), output);
  }

  // optional int32 entity_handle_for_modifiers = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->entity_handle_for_modifiers(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_ParticleManager.CreateParticle)
}

::google::protobuf::uint8* CDOTAUserMsg_ParticleManager_CreateParticle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_ParticleManager.CreateParticle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 particle_name_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->particle_name_index(), target);
  }

  // optional int32 attach_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->attach_type(), target);
  }

  // optional int32 entity_handle = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->entity_handle(), target);
  }

  // optional int32 entity_handle_for_modifiers = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->entity_handle_for_modifiers(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_ParticleManager.CreateParticle)
  return target;
}

size_t CDOTAUserMsg_ParticleManager_CreateParticle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_ParticleManager.CreateParticle)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional fixed64 particle_name_index = 1;
    if (has_particle_name_index()) {
      total_size += 1 + 8;
    }

    // optional int32 attach_type = 2;
    if (has_attach_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attach_type());
    }

    // optional int32 entity_handle = 3;
    if (has_entity_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entity_handle());
    }

    // optional int32 entity_handle_for_modifiers = 4;
    if (has_entity_handle_for_modifiers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entity_handle_for_modifiers());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_ParticleManager_CreateParticle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_ParticleManager.CreateParticle)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_ParticleManager_CreateParticle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_ParticleManager_CreateParticle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_ParticleManager.CreateParticle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_ParticleManager.CreateParticle)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_ParticleManager_CreateParticle::MergeFrom(const CDOTAUserMsg_ParticleManager_CreateParticle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_ParticleManager.CreateParticle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      particle_name_index_ = from.particle_name_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      attach_type_ = from.attach_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      entity_handle_ = from.entity_handle_;
    }
    if (cached_has_bits & 0x00000008u) {
      entity_handle_for_modifiers_ = from.entity_handle_for_modifiers_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_ParticleManager_CreateParticle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_ParticleManager.CreateParticle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_ParticleManager_CreateParticle::CopyFrom(const CDOTAUserMsg_ParticleManager_CreateParticle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_ParticleManager.CreateParticle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ParticleManager_CreateParticle::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_ParticleManager_CreateParticle::Swap(CDOTAUserMsg_ParticleManager_CreateParticle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_ParticleManager_CreateParticle::InternalSwap(CDOTAUserMsg_ParticleManager_CreateParticle* other) {
  std::swap(particle_name_index_, other->particle_name_index_);
  std::swap(attach_type_, other->attach_type_);
  std::swap(entity_handle_, other->entity_handle_);
  std::swap(entity_handle_for_modifiers_, other->entity_handle_for_modifiers_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_ParticleManager_CreateParticle::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_ParticleManager_CreateParticle

// optional fixed64 particle_name_index = 1;
bool CDOTAUserMsg_ParticleManager_CreateParticle::has_particle_name_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_ParticleManager_CreateParticle::set_has_particle_name_index() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_ParticleManager_CreateParticle::clear_has_particle_name_index() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_ParticleManager_CreateParticle::clear_particle_name_index() {
  particle_name_index_ = GOOGLE_ULONGLONG(0);
  clear_has_particle_name_index();
}
::google::protobuf::uint64 CDOTAUserMsg_ParticleManager_CreateParticle::particle_name_index() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ParticleManager.CreateParticle.particle_name_index)
  return particle_name_index_;
}
void CDOTAUserMsg_ParticleManager_CreateParticle::set_particle_name_index(::google::protobuf::uint64 value) {
  set_has_particle_name_index();
  particle_name_index_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_ParticleManager.CreateParticle.particle_name_index)
}

// optional int32 attach_type = 2;
bool CDOTAUserMsg_ParticleManager_CreateParticle::has_attach_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAUserMsg_ParticleManager_CreateParticle::set_has_attach_type() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAUserMsg_ParticleManager_CreateParticle::clear_has_attach_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAUserMsg_ParticleManager_CreateParticle::clear_attach_type() {
  attach_type_ = 0;
  clear_has_attach_type();
}
::google::protobuf::int32 CDOTAUserMsg_ParticleManager_CreateParticle::attach_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ParticleManager.CreateParticle.attach_type)
  return attach_type_;
}
void CDOTAUserMsg_ParticleManager_CreateParticle::set_attach_type(::google::protobuf::int32 value) {
  set_has_attach_type();
  attach_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_ParticleManager.CreateParticle.attach_type)
}

// optional int32 entity_handle = 3;
bool CDOTAUserMsg_ParticleManager_CreateParticle::has_entity_handle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDOTAUserMsg_ParticleManager_CreateParticle::set_has_entity_handle() {
  _has_bits_[0] |= 0x00000004u;
}
void CDOTAUserMsg_ParticleManager_CreateParticle::clear_has_entity_handle() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDOTAUserMsg_ParticleManager_CreateParticle::clear_entity_handle() {
  entity_handle_ = 0;
  clear_has_entity_handle();
}
::google::protobuf::int32 CDOTAUserMsg_ParticleManager_CreateParticle::entity_handle() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ParticleManager.CreateParticle.entity_handle)
  return entity_handle_;
}
void CDOTAUserMsg_ParticleManager_CreateParticle::set_entity_handle(::google::protobuf::int32 value) {
  set_has_entity_handle();
  entity_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_ParticleManager.CreateParticle.entity_handle)
}

// optional int32 entity_handle_for_modifiers = 4;
bool CDOTAUserMsg_ParticleManager_CreateParticle::has_entity_handle_for_modifiers() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CDOTAUserMsg_ParticleManager_CreateParticle::set_has_entity_handle_for_modifiers() {
  _has_bits_[0] |= 0x00000008u;
}
void CDOTAUserMsg_ParticleManager_CreateParticle::clear_has_entity_handle_for_modifiers() {
  _has_bits_[0] &= ~0x00000008u;
}
void CDOTAUserMsg_ParticleManager_CreateParticle::clear_entity_handle_for_modifiers() {
  entity_handle_for_modifiers_ = 0;
  clear_has_entity_handle_for_modifiers();
}
::google::protobuf::int32 CDOTAUserMsg_ParticleManager_CreateParticle::entity_handle_for_modifiers() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ParticleManager.CreateParticle.entity_handle_for_modifiers)
  return entity_handle_for_modifiers_;
}
void CDOTAUserMsg_ParticleManager_CreateParticle::set_entity_handle_for_modifiers(::google::protobuf::int32 value) {
  set_has_entity_handle_for_modifiers();
  entity_handle_for_modifiers_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_ParticleManager.CreateParticle.entity_handle_for_modifiers)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_ParticleManager_DestroyParticle::kDestroyImmediatelyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_ParticleManager_DestroyParticle::CDOTAUserMsg_ParticleManager_DestroyParticle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_ParticleManager.DestroyParticle)
}
CDOTAUserMsg_ParticleManager_DestroyParticle::CDOTAUserMsg_ParticleManager_DestroyParticle(const CDOTAUserMsg_ParticleManager_DestroyParticle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  destroy_immediately_ = from.destroy_immediately_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_ParticleManager.DestroyParticle)
}

void CDOTAUserMsg_ParticleManager_DestroyParticle::SharedCtor() {
  _cached_size_ = 0;
  destroy_immediately_ = false;
}

CDOTAUserMsg_ParticleManager_DestroyParticle::~CDOTAUserMsg_ParticleManager_DestroyParticle() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_ParticleManager.DestroyParticle)
  SharedDtor();
}

void CDOTAUserMsg_ParticleManager_DestroyParticle::SharedDtor() {
}

void CDOTAUserMsg_ParticleManager_DestroyParticle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_ParticleManager_DestroyParticle::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_ParticleManager_DestroyParticle& CDOTAUserMsg_ParticleManager_DestroyParticle::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_ParticleManager_DestroyParticle* CDOTAUserMsg_ParticleManager_DestroyParticle::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_ParticleManager_DestroyParticle* n = new CDOTAUserMsg_ParticleManager_DestroyParticle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_ParticleManager_DestroyParticle::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_ParticleManager.DestroyParticle)
  destroy_immediately_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_ParticleManager_DestroyParticle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_ParticleManager.DestroyParticle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool destroy_immediately = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_destroy_immediately();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &destroy_immediately_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_ParticleManager.DestroyParticle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_ParticleManager.DestroyParticle)
  return false;
#undef DO_
}

void CDOTAUserMsg_ParticleManager_DestroyParticle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_ParticleManager.DestroyParticle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool destroy_immediately = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->destroy_immediately(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_ParticleManager.DestroyParticle)
}

::google::protobuf::uint8* CDOTAUserMsg_ParticleManager_DestroyParticle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_ParticleManager.DestroyParticle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool destroy_immediately = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->destroy_immediately(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_ParticleManager.DestroyParticle)
  return target;
}

size_t CDOTAUserMsg_ParticleManager_DestroyParticle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_ParticleManager.DestroyParticle)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional bool destroy_immediately = 1;
  if (has_destroy_immediately()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_ParticleManager_DestroyParticle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_ParticleManager.DestroyParticle)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_ParticleManager_DestroyParticle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_ParticleManager_DestroyParticle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_ParticleManager.DestroyParticle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_ParticleManager.DestroyParticle)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_ParticleManager_DestroyParticle::MergeFrom(const CDOTAUserMsg_ParticleManager_DestroyParticle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_ParticleManager.DestroyParticle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_destroy_immediately()) {
    set_destroy_immediately(from.destroy_immediately());
  }
}

void CDOTAUserMsg_ParticleManager_DestroyParticle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_ParticleManager.DestroyParticle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_ParticleManager_DestroyParticle::CopyFrom(const CDOTAUserMsg_ParticleManager_DestroyParticle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_ParticleManager.DestroyParticle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ParticleManager_DestroyParticle::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_ParticleManager_DestroyParticle::Swap(CDOTAUserMsg_ParticleManager_DestroyParticle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_ParticleManager_DestroyParticle::InternalSwap(CDOTAUserMsg_ParticleManager_DestroyParticle* other) {
  std::swap(destroy_immediately_, other->destroy_immediately_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_ParticleManager_DestroyParticle::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_ParticleManager_DestroyParticle

// optional bool destroy_immediately = 1;
bool CDOTAUserMsg_ParticleManager_DestroyParticle::has_destroy_immediately() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_ParticleManager_DestroyParticle::set_has_destroy_immediately() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_ParticleManager_DestroyParticle::clear_has_destroy_immediately() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_ParticleManager_DestroyParticle::clear_destroy_immediately() {
  destroy_immediately_ = false;
  clear_has_destroy_immediately();
}
bool CDOTAUserMsg_ParticleManager_DestroyParticle::destroy_immediately() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ParticleManager.DestroyParticle.destroy_immediately)
  return destroy_immediately_;
}
void CDOTAUserMsg_ParticleManager_DestroyParticle::set_destroy_immediately(bool value) {
  set_has_destroy_immediately();
  destroy_immediately_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_ParticleManager.DestroyParticle.destroy_immediately)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::kDestroyImmediatelyFieldNumber;
const int CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::kEntityHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::CDOTAUserMsg_ParticleManager_DestroyParticleInvolving()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_ParticleManager.DestroyParticleInvolving)
}
CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::CDOTAUserMsg_ParticleManager_DestroyParticleInvolving(const CDOTAUserMsg_ParticleManager_DestroyParticleInvolving& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&destroy_immediately_, &from.destroy_immediately_,
    reinterpret_cast<char*>(&entity_handle_) -
    reinterpret_cast<char*>(&destroy_immediately_) + sizeof(entity_handle_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_ParticleManager.DestroyParticleInvolving)
}

void CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&destroy_immediately_, 0, reinterpret_cast<char*>(&entity_handle_) -
    reinterpret_cast<char*>(&destroy_immediately_) + sizeof(entity_handle_));
}

CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::~CDOTAUserMsg_ParticleManager_DestroyParticleInvolving() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_ParticleManager.DestroyParticleInvolving)
  SharedDtor();
}

void CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::SharedDtor() {
}

void CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_ParticleManager_DestroyParticleInvolving& CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_ParticleManager_DestroyParticleInvolving* CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_ParticleManager_DestroyParticleInvolving* n = new CDOTAUserMsg_ParticleManager_DestroyParticleInvolving;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_ParticleManager.DestroyParticleInvolving)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&destroy_immediately_, 0, reinterpret_cast<char*>(&entity_handle_) -
      reinterpret_cast<char*>(&destroy_immediately_) + sizeof(entity_handle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_ParticleManager.DestroyParticleInvolving)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool destroy_immediately = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_destroy_immediately();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &destroy_immediately_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 entity_handle = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_entity_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entity_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_ParticleManager.DestroyParticleInvolving)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_ParticleManager.DestroyParticleInvolving)
  return false;
#undef DO_
}

void CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_ParticleManager.DestroyParticleInvolving)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool destroy_immediately = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->destroy_immediately(), output);
  }

  // optional int32 entity_handle = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->entity_handle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_ParticleManager.DestroyParticleInvolving)
}

::google::protobuf::uint8* CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_ParticleManager.DestroyParticleInvolving)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool destroy_immediately = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->destroy_immediately(), target);
  }

  // optional int32 entity_handle = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->entity_handle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_ParticleManager.DestroyParticleInvolving)
  return target;
}

size_t CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_ParticleManager.DestroyParticleInvolving)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bool destroy_immediately = 1;
    if (has_destroy_immediately()) {
      total_size += 1 + 1;
    }

    // optional int32 entity_handle = 3;
    if (has_entity_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entity_handle());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_ParticleManager.DestroyParticleInvolving)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_ParticleManager_DestroyParticleInvolving* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_ParticleManager_DestroyParticleInvolving>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_ParticleManager.DestroyParticleInvolving)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_ParticleManager.DestroyParticleInvolving)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::MergeFrom(const CDOTAUserMsg_ParticleManager_DestroyParticleInvolving& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_ParticleManager.DestroyParticleInvolving)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      destroy_immediately_ = from.destroy_immediately_;
    }
    if (cached_has_bits & 0x00000002u) {
      entity_handle_ = from.entity_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_ParticleManager.DestroyParticleInvolving)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::CopyFrom(const CDOTAUserMsg_ParticleManager_DestroyParticleInvolving& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_ParticleManager.DestroyParticleInvolving)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::Swap(CDOTAUserMsg_ParticleManager_DestroyParticleInvolving* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::InternalSwap(CDOTAUserMsg_ParticleManager_DestroyParticleInvolving* other) {
  std::swap(destroy_immediately_, other->destroy_immediately_);
  std::swap(entity_handle_, other->entity_handle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_ParticleManager_DestroyParticleInvolving

// optional bool destroy_immediately = 1;
bool CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::has_destroy_immediately() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::set_has_destroy_immediately() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::clear_has_destroy_immediately() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::clear_destroy_immediately() {
  destroy_immediately_ = false;
  clear_has_destroy_immediately();
}
bool CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::destroy_immediately() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ParticleManager.DestroyParticleInvolving.destroy_immediately)
  return destroy_immediately_;
}
void CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::set_destroy_immediately(bool value) {
  set_has_destroy_immediately();
  destroy_immediately_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_ParticleManager.DestroyParticleInvolving.destroy_immediately)
}

// optional int32 entity_handle = 3;
bool CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::has_entity_handle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::set_has_entity_handle() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::clear_has_entity_handle() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::clear_entity_handle() {
  entity_handle_ = 0;
  clear_has_entity_handle();
}
::google::protobuf::int32 CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::entity_handle() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ParticleManager.DestroyParticleInvolving.entity_handle)
  return entity_handle_;
}
void CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::set_entity_handle(::google::protobuf::int32 value) {
  set_has_entity_handle();
  entity_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_ParticleManager.DestroyParticleInvolving.entity_handle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_ParticleManager_UpdateParticle::kControlPointFieldNumber;
const int CDOTAUserMsg_ParticleManager_UpdateParticle::kPositionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_ParticleManager_UpdateParticle::CDOTAUserMsg_ParticleManager_UpdateParticle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticle)
}
CDOTAUserMsg_ParticleManager_UpdateParticle::CDOTAUserMsg_ParticleManager_UpdateParticle(const CDOTAUserMsg_ParticleManager_UpdateParticle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_position()) {
    position_ = new ::proto::dota::CMsgVector(*from.position_);
  } else {
    position_ = NULL;
  }
  control_point_ = from.control_point_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticle)
}

void CDOTAUserMsg_ParticleManager_UpdateParticle::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&position_, 0, reinterpret_cast<char*>(&control_point_) -
    reinterpret_cast<char*>(&position_) + sizeof(control_point_));
}

CDOTAUserMsg_ParticleManager_UpdateParticle::~CDOTAUserMsg_ParticleManager_UpdateParticle() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticle)
  SharedDtor();
}

void CDOTAUserMsg_ParticleManager_UpdateParticle::SharedDtor() {
  if (this != internal_default_instance()) {
    delete position_;
  }
}

void CDOTAUserMsg_ParticleManager_UpdateParticle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_ParticleManager_UpdateParticle::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_ParticleManager_UpdateParticle& CDOTAUserMsg_ParticleManager_UpdateParticle::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_ParticleManager_UpdateParticle* CDOTAUserMsg_ParticleManager_UpdateParticle::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_ParticleManager_UpdateParticle* n = new CDOTAUserMsg_ParticleManager_UpdateParticle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_ParticleManager_UpdateParticle::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticle)
  if (has_position()) {
    GOOGLE_DCHECK(position_ != NULL);
    position_->::proto::dota::CMsgVector::Clear();
  }
  control_point_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_ParticleManager_UpdateParticle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 control_point = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_control_point();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &control_point_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgVector position = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticle)
  return false;
#undef DO_
}

void CDOTAUserMsg_ParticleManager_UpdateParticle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 control_point = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->control_point(), output);
  }

  // optional .proto.dota.CMsgVector position = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->position_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticle)
}

::google::protobuf::uint8* CDOTAUserMsg_ParticleManager_UpdateParticle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 control_point = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->control_point(), target);
  }

  // optional .proto.dota.CMsgVector position = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->position_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticle)
  return target;
}

size_t CDOTAUserMsg_ParticleManager_UpdateParticle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticle)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .proto.dota.CMsgVector position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->position_);
    }

    // optional int32 control_point = 1;
    if (has_control_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->control_point());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_ParticleManager_UpdateParticle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticle)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_ParticleManager_UpdateParticle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_ParticleManager_UpdateParticle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticle)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_ParticleManager_UpdateParticle::MergeFrom(const CDOTAUserMsg_ParticleManager_UpdateParticle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_position()->::proto::dota::CMsgVector::MergeFrom(from.position());
    }
    if (cached_has_bits & 0x00000002u) {
      control_point_ = from.control_point_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_ParticleManager_UpdateParticle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_ParticleManager_UpdateParticle::CopyFrom(const CDOTAUserMsg_ParticleManager_UpdateParticle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ParticleManager_UpdateParticle::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_ParticleManager_UpdateParticle::Swap(CDOTAUserMsg_ParticleManager_UpdateParticle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_ParticleManager_UpdateParticle::InternalSwap(CDOTAUserMsg_ParticleManager_UpdateParticle* other) {
  std::swap(position_, other->position_);
  std::swap(control_point_, other->control_point_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_ParticleManager_UpdateParticle::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_ParticleManager_UpdateParticle

// optional int32 control_point = 1;
bool CDOTAUserMsg_ParticleManager_UpdateParticle::has_control_point() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAUserMsg_ParticleManager_UpdateParticle::set_has_control_point() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAUserMsg_ParticleManager_UpdateParticle::clear_has_control_point() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAUserMsg_ParticleManager_UpdateParticle::clear_control_point() {
  control_point_ = 0;
  clear_has_control_point();
}
::google::protobuf::int32 CDOTAUserMsg_ParticleManager_UpdateParticle::control_point() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticle.control_point)
  return control_point_;
}
void CDOTAUserMsg_ParticleManager_UpdateParticle::set_control_point(::google::protobuf::int32 value) {
  set_has_control_point();
  control_point_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticle.control_point)
}

// optional .proto.dota.CMsgVector position = 2;
bool CDOTAUserMsg_ParticleManager_UpdateParticle::has_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_ParticleManager_UpdateParticle::set_has_position() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_ParticleManager_UpdateParticle::clear_has_position() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_ParticleManager_UpdateParticle::clear_position() {
  if (position_ != NULL) position_->::proto::dota::CMsgVector::Clear();
  clear_has_position();
}
const ::proto::dota::CMsgVector& CDOTAUserMsg_ParticleManager_UpdateParticle::position() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticle.position)
  return position_ != NULL ? *position_
                         : *::proto::dota::CMsgVector::internal_default_instance();
}
::proto::dota::CMsgVector* CDOTAUserMsg_ParticleManager_UpdateParticle::mutable_position() {
  set_has_position();
  if (position_ == NULL) {
    position_ = new ::proto::dota::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticle.position)
  return position_;
}
::proto::dota::CMsgVector* CDOTAUserMsg_ParticleManager_UpdateParticle::release_position() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticle.position)
  clear_has_position();
  ::proto::dota::CMsgVector* temp = position_;
  position_ = NULL;
  return temp;
}
void CDOTAUserMsg_ParticleManager_UpdateParticle::set_allocated_position(::proto::dota::CMsgVector* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticle.position)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_ParticleManager_UpdateParticleFwd::kControlPointFieldNumber;
const int CDOTAUserMsg_ParticleManager_UpdateParticleFwd::kForwardFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_ParticleManager_UpdateParticleFwd::CDOTAUserMsg_ParticleManager_UpdateParticleFwd()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleFwd)
}
CDOTAUserMsg_ParticleManager_UpdateParticleFwd::CDOTAUserMsg_ParticleManager_UpdateParticleFwd(const CDOTAUserMsg_ParticleManager_UpdateParticleFwd& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_forward()) {
    forward_ = new ::proto::dota::CMsgVector(*from.forward_);
  } else {
    forward_ = NULL;
  }
  control_point_ = from.control_point_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleFwd)
}

void CDOTAUserMsg_ParticleManager_UpdateParticleFwd::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&forward_, 0, reinterpret_cast<char*>(&control_point_) -
    reinterpret_cast<char*>(&forward_) + sizeof(control_point_));
}

CDOTAUserMsg_ParticleManager_UpdateParticleFwd::~CDOTAUserMsg_ParticleManager_UpdateParticleFwd() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleFwd)
  SharedDtor();
}

void CDOTAUserMsg_ParticleManager_UpdateParticleFwd::SharedDtor() {
  if (this != internal_default_instance()) {
    delete forward_;
  }
}

void CDOTAUserMsg_ParticleManager_UpdateParticleFwd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_ParticleManager_UpdateParticleFwd::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_ParticleManager_UpdateParticleFwd& CDOTAUserMsg_ParticleManager_UpdateParticleFwd::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_ParticleManager_UpdateParticleFwd* CDOTAUserMsg_ParticleManager_UpdateParticleFwd::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_ParticleManager_UpdateParticleFwd* n = new CDOTAUserMsg_ParticleManager_UpdateParticleFwd;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_ParticleManager_UpdateParticleFwd::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleFwd)
  if (has_forward()) {
    GOOGLE_DCHECK(forward_ != NULL);
    forward_->::proto::dota::CMsgVector::Clear();
  }
  control_point_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_ParticleManager_UpdateParticleFwd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleFwd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 control_point = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_control_point();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &control_point_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgVector forward = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_forward()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleFwd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleFwd)
  return false;
#undef DO_
}

void CDOTAUserMsg_ParticleManager_UpdateParticleFwd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleFwd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 control_point = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->control_point(), output);
  }

  // optional .proto.dota.CMsgVector forward = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->forward_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleFwd)
}

::google::protobuf::uint8* CDOTAUserMsg_ParticleManager_UpdateParticleFwd::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleFwd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 control_point = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->control_point(), target);
  }

  // optional .proto.dota.CMsgVector forward = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->forward_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleFwd)
  return target;
}

size_t CDOTAUserMsg_ParticleManager_UpdateParticleFwd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleFwd)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .proto.dota.CMsgVector forward = 2;
    if (has_forward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->forward_);
    }

    // optional int32 control_point = 1;
    if (has_control_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->control_point());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_ParticleManager_UpdateParticleFwd::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleFwd)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_ParticleManager_UpdateParticleFwd* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_ParticleManager_UpdateParticleFwd>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleFwd)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleFwd)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_ParticleManager_UpdateParticleFwd::MergeFrom(const CDOTAUserMsg_ParticleManager_UpdateParticleFwd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleFwd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_forward()->::proto::dota::CMsgVector::MergeFrom(from.forward());
    }
    if (cached_has_bits & 0x00000002u) {
      control_point_ = from.control_point_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_ParticleManager_UpdateParticleFwd::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleFwd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_ParticleManager_UpdateParticleFwd::CopyFrom(const CDOTAUserMsg_ParticleManager_UpdateParticleFwd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleFwd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ParticleManager_UpdateParticleFwd::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_ParticleManager_UpdateParticleFwd::Swap(CDOTAUserMsg_ParticleManager_UpdateParticleFwd* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_ParticleManager_UpdateParticleFwd::InternalSwap(CDOTAUserMsg_ParticleManager_UpdateParticleFwd* other) {
  std::swap(forward_, other->forward_);
  std::swap(control_point_, other->control_point_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_ParticleManager_UpdateParticleFwd::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_ParticleManager_UpdateParticleFwd

// optional int32 control_point = 1;
bool CDOTAUserMsg_ParticleManager_UpdateParticleFwd::has_control_point() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAUserMsg_ParticleManager_UpdateParticleFwd::set_has_control_point() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAUserMsg_ParticleManager_UpdateParticleFwd::clear_has_control_point() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAUserMsg_ParticleManager_UpdateParticleFwd::clear_control_point() {
  control_point_ = 0;
  clear_has_control_point();
}
::google::protobuf::int32 CDOTAUserMsg_ParticleManager_UpdateParticleFwd::control_point() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleFwd.control_point)
  return control_point_;
}
void CDOTAUserMsg_ParticleManager_UpdateParticleFwd::set_control_point(::google::protobuf::int32 value) {
  set_has_control_point();
  control_point_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleFwd.control_point)
}

// optional .proto.dota.CMsgVector forward = 2;
bool CDOTAUserMsg_ParticleManager_UpdateParticleFwd::has_forward() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_ParticleManager_UpdateParticleFwd::set_has_forward() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_ParticleManager_UpdateParticleFwd::clear_has_forward() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_ParticleManager_UpdateParticleFwd::clear_forward() {
  if (forward_ != NULL) forward_->::proto::dota::CMsgVector::Clear();
  clear_has_forward();
}
const ::proto::dota::CMsgVector& CDOTAUserMsg_ParticleManager_UpdateParticleFwd::forward() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleFwd.forward)
  return forward_ != NULL ? *forward_
                         : *::proto::dota::CMsgVector::internal_default_instance();
}
::proto::dota::CMsgVector* CDOTAUserMsg_ParticleManager_UpdateParticleFwd::mutable_forward() {
  set_has_forward();
  if (forward_ == NULL) {
    forward_ = new ::proto::dota::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleFwd.forward)
  return forward_;
}
::proto::dota::CMsgVector* CDOTAUserMsg_ParticleManager_UpdateParticleFwd::release_forward() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleFwd.forward)
  clear_has_forward();
  ::proto::dota::CMsgVector* temp = forward_;
  forward_ = NULL;
  return temp;
}
void CDOTAUserMsg_ParticleManager_UpdateParticleFwd::set_allocated_forward(::proto::dota::CMsgVector* forward) {
  delete forward_;
  forward_ = forward;
  if (forward) {
    set_has_forward();
  } else {
    clear_has_forward();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleFwd.forward)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_ParticleManager_UpdateParticleOrient::kControlPointFieldNumber;
const int CDOTAUserMsg_ParticleManager_UpdateParticleOrient::kForwardFieldNumber;
const int CDOTAUserMsg_ParticleManager_UpdateParticleOrient::kRightFieldNumber;
const int CDOTAUserMsg_ParticleManager_UpdateParticleOrient::kUpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_ParticleManager_UpdateParticleOrient::CDOTAUserMsg_ParticleManager_UpdateParticleOrient()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleOrient)
}
CDOTAUserMsg_ParticleManager_UpdateParticleOrient::CDOTAUserMsg_ParticleManager_UpdateParticleOrient(const CDOTAUserMsg_ParticleManager_UpdateParticleOrient& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_forward()) {
    forward_ = new ::proto::dota::CMsgVector(*from.forward_);
  } else {
    forward_ = NULL;
  }
  if (from.has_right()) {
    right_ = new ::proto::dota::CMsgVector(*from.right_);
  } else {
    right_ = NULL;
  }
  if (from.has_up()) {
    up_ = new ::proto::dota::CMsgVector(*from.up_);
  } else {
    up_ = NULL;
  }
  control_point_ = from.control_point_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleOrient)
}

void CDOTAUserMsg_ParticleManager_UpdateParticleOrient::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&forward_, 0, reinterpret_cast<char*>(&control_point_) -
    reinterpret_cast<char*>(&forward_) + sizeof(control_point_));
}

CDOTAUserMsg_ParticleManager_UpdateParticleOrient::~CDOTAUserMsg_ParticleManager_UpdateParticleOrient() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleOrient)
  SharedDtor();
}

void CDOTAUserMsg_ParticleManager_UpdateParticleOrient::SharedDtor() {
  if (this != internal_default_instance()) {
    delete forward_;
  }
  if (this != internal_default_instance()) {
    delete right_;
  }
  if (this != internal_default_instance()) {
    delete up_;
  }
}

void CDOTAUserMsg_ParticleManager_UpdateParticleOrient::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_ParticleManager_UpdateParticleOrient::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_ParticleManager_UpdateParticleOrient& CDOTAUserMsg_ParticleManager_UpdateParticleOrient::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_ParticleManager_UpdateParticleOrient* CDOTAUserMsg_ParticleManager_UpdateParticleOrient::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_ParticleManager_UpdateParticleOrient* n = new CDOTAUserMsg_ParticleManager_UpdateParticleOrient;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_ParticleManager_UpdateParticleOrient::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleOrient)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_forward()) {
      GOOGLE_DCHECK(forward_ != NULL);
      forward_->::proto::dota::CMsgVector::Clear();
    }
    if (has_right()) {
      GOOGLE_DCHECK(right_ != NULL);
      right_->::proto::dota::CMsgVector::Clear();
    }
    if (has_up()) {
      GOOGLE_DCHECK(up_ != NULL);
      up_->::proto::dota::CMsgVector::Clear();
    }
  }
  control_point_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_ParticleManager_UpdateParticleOrient::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleOrient)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 control_point = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_control_point();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &control_point_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgVector forward = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_forward()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgVector right = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_right()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgVector up = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_up()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleOrient)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleOrient)
  return false;
#undef DO_
}

void CDOTAUserMsg_ParticleManager_UpdateParticleOrient::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleOrient)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 control_point = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->control_point(), output);
  }

  // optional .proto.dota.CMsgVector forward = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->forward_, output);
  }

  // optional .proto.dota.CMsgVector right = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->right_, output);
  }

  // optional .proto.dota.CMsgVector up = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->up_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleOrient)
}

::google::protobuf::uint8* CDOTAUserMsg_ParticleManager_UpdateParticleOrient::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleOrient)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 control_point = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->control_point(), target);
  }

  // optional .proto.dota.CMsgVector forward = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->forward_, deterministic, target);
  }

  // optional .proto.dota.CMsgVector right = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->right_, deterministic, target);
  }

  // optional .proto.dota.CMsgVector up = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->up_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleOrient)
  return target;
}

size_t CDOTAUserMsg_ParticleManager_UpdateParticleOrient::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleOrient)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional .proto.dota.CMsgVector forward = 2;
    if (has_forward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->forward_);
    }

    // optional .proto.dota.CMsgVector right = 3;
    if (has_right()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->right_);
    }

    // optional .proto.dota.CMsgVector up = 4;
    if (has_up()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->up_);
    }

    // optional int32 control_point = 1;
    if (has_control_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->control_point());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_ParticleManager_UpdateParticleOrient::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleOrient)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_ParticleManager_UpdateParticleOrient* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_ParticleManager_UpdateParticleOrient>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleOrient)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleOrient)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_ParticleManager_UpdateParticleOrient::MergeFrom(const CDOTAUserMsg_ParticleManager_UpdateParticleOrient& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleOrient)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_forward()->::proto::dota::CMsgVector::MergeFrom(from.forward());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_right()->::proto::dota::CMsgVector::MergeFrom(from.right());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_up()->::proto::dota::CMsgVector::MergeFrom(from.up());
    }
    if (cached_has_bits & 0x00000008u) {
      control_point_ = from.control_point_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_ParticleManager_UpdateParticleOrient::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleOrient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_ParticleManager_UpdateParticleOrient::CopyFrom(const CDOTAUserMsg_ParticleManager_UpdateParticleOrient& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleOrient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ParticleManager_UpdateParticleOrient::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_ParticleManager_UpdateParticleOrient::Swap(CDOTAUserMsg_ParticleManager_UpdateParticleOrient* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_ParticleManager_UpdateParticleOrient::InternalSwap(CDOTAUserMsg_ParticleManager_UpdateParticleOrient* other) {
  std::swap(forward_, other->forward_);
  std::swap(right_, other->right_);
  std::swap(up_, other->up_);
  std::swap(control_point_, other->control_point_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_ParticleManager_UpdateParticleOrient::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_ParticleManager_UpdateParticleOrient

// optional int32 control_point = 1;
bool CDOTAUserMsg_ParticleManager_UpdateParticleOrient::has_control_point() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CDOTAUserMsg_ParticleManager_UpdateParticleOrient::set_has_control_point() {
  _has_bits_[0] |= 0x00000008u;
}
void CDOTAUserMsg_ParticleManager_UpdateParticleOrient::clear_has_control_point() {
  _has_bits_[0] &= ~0x00000008u;
}
void CDOTAUserMsg_ParticleManager_UpdateParticleOrient::clear_control_point() {
  control_point_ = 0;
  clear_has_control_point();
}
::google::protobuf::int32 CDOTAUserMsg_ParticleManager_UpdateParticleOrient::control_point() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleOrient.control_point)
  return control_point_;
}
void CDOTAUserMsg_ParticleManager_UpdateParticleOrient::set_control_point(::google::protobuf::int32 value) {
  set_has_control_point();
  control_point_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleOrient.control_point)
}

// optional .proto.dota.CMsgVector forward = 2;
bool CDOTAUserMsg_ParticleManager_UpdateParticleOrient::has_forward() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_ParticleManager_UpdateParticleOrient::set_has_forward() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_ParticleManager_UpdateParticleOrient::clear_has_forward() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_ParticleManager_UpdateParticleOrient::clear_forward() {
  if (forward_ != NULL) forward_->::proto::dota::CMsgVector::Clear();
  clear_has_forward();
}
const ::proto::dota::CMsgVector& CDOTAUserMsg_ParticleManager_UpdateParticleOrient::forward() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleOrient.forward)
  return forward_ != NULL ? *forward_
                         : *::proto::dota::CMsgVector::internal_default_instance();
}
::proto::dota::CMsgVector* CDOTAUserMsg_ParticleManager_UpdateParticleOrient::mutable_forward() {
  set_has_forward();
  if (forward_ == NULL) {
    forward_ = new ::proto::dota::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleOrient.forward)
  return forward_;
}
::proto::dota::CMsgVector* CDOTAUserMsg_ParticleManager_UpdateParticleOrient::release_forward() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleOrient.forward)
  clear_has_forward();
  ::proto::dota::CMsgVector* temp = forward_;
  forward_ = NULL;
  return temp;
}
void CDOTAUserMsg_ParticleManager_UpdateParticleOrient::set_allocated_forward(::proto::dota::CMsgVector* forward) {
  delete forward_;
  forward_ = forward;
  if (forward) {
    set_has_forward();
  } else {
    clear_has_forward();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleOrient.forward)
}

// optional .proto.dota.CMsgVector right = 3;
bool CDOTAUserMsg_ParticleManager_UpdateParticleOrient::has_right() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAUserMsg_ParticleManager_UpdateParticleOrient::set_has_right() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAUserMsg_ParticleManager_UpdateParticleOrient::clear_has_right() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAUserMsg_ParticleManager_UpdateParticleOrient::clear_right() {
  if (right_ != NULL) right_->::proto::dota::CMsgVector::Clear();
  clear_has_right();
}
const ::proto::dota::CMsgVector& CDOTAUserMsg_ParticleManager_UpdateParticleOrient::right() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleOrient.right)
  return right_ != NULL ? *right_
                         : *::proto::dota::CMsgVector::internal_default_instance();
}
::proto::dota::CMsgVector* CDOTAUserMsg_ParticleManager_UpdateParticleOrient::mutable_right() {
  set_has_right();
  if (right_ == NULL) {
    right_ = new ::proto::dota::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleOrient.right)
  return right_;
}
::proto::dota::CMsgVector* CDOTAUserMsg_ParticleManager_UpdateParticleOrient::release_right() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleOrient.right)
  clear_has_right();
  ::proto::dota::CMsgVector* temp = right_;
  right_ = NULL;
  return temp;
}
void CDOTAUserMsg_ParticleManager_UpdateParticleOrient::set_allocated_right(::proto::dota::CMsgVector* right) {
  delete right_;
  right_ = right;
  if (right) {
    set_has_right();
  } else {
    clear_has_right();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleOrient.right)
}

// optional .proto.dota.CMsgVector up = 4;
bool CDOTAUserMsg_ParticleManager_UpdateParticleOrient::has_up() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDOTAUserMsg_ParticleManager_UpdateParticleOrient::set_has_up() {
  _has_bits_[0] |= 0x00000004u;
}
void CDOTAUserMsg_ParticleManager_UpdateParticleOrient::clear_has_up() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDOTAUserMsg_ParticleManager_UpdateParticleOrient::clear_up() {
  if (up_ != NULL) up_->::proto::dota::CMsgVector::Clear();
  clear_has_up();
}
const ::proto::dota::CMsgVector& CDOTAUserMsg_ParticleManager_UpdateParticleOrient::up() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleOrient.up)
  return up_ != NULL ? *up_
                         : *::proto::dota::CMsgVector::internal_default_instance();
}
::proto::dota::CMsgVector* CDOTAUserMsg_ParticleManager_UpdateParticleOrient::mutable_up() {
  set_has_up();
  if (up_ == NULL) {
    up_ = new ::proto::dota::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleOrient.up)
  return up_;
}
::proto::dota::CMsgVector* CDOTAUserMsg_ParticleManager_UpdateParticleOrient::release_up() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleOrient.up)
  clear_has_up();
  ::proto::dota::CMsgVector* temp = up_;
  up_ = NULL;
  return temp;
}
void CDOTAUserMsg_ParticleManager_UpdateParticleOrient::set_allocated_up(::proto::dota::CMsgVector* up) {
  delete up_;
  up_ = up;
  if (up) {
    set_has_up();
  } else {
    clear_has_up();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleOrient.up)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_ParticleManager_UpdateParticleFallback::kControlPointFieldNumber;
const int CDOTAUserMsg_ParticleManager_UpdateParticleFallback::kPositionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_ParticleManager_UpdateParticleFallback::CDOTAUserMsg_ParticleManager_UpdateParticleFallback()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleFallback)
}
CDOTAUserMsg_ParticleManager_UpdateParticleFallback::CDOTAUserMsg_ParticleManager_UpdateParticleFallback(const CDOTAUserMsg_ParticleManager_UpdateParticleFallback& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_position()) {
    position_ = new ::proto::dota::CMsgVector(*from.position_);
  } else {
    position_ = NULL;
  }
  control_point_ = from.control_point_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleFallback)
}

void CDOTAUserMsg_ParticleManager_UpdateParticleFallback::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&position_, 0, reinterpret_cast<char*>(&control_point_) -
    reinterpret_cast<char*>(&position_) + sizeof(control_point_));
}

CDOTAUserMsg_ParticleManager_UpdateParticleFallback::~CDOTAUserMsg_ParticleManager_UpdateParticleFallback() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleFallback)
  SharedDtor();
}

void CDOTAUserMsg_ParticleManager_UpdateParticleFallback::SharedDtor() {
  if (this != internal_default_instance()) {
    delete position_;
  }
}

void CDOTAUserMsg_ParticleManager_UpdateParticleFallback::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_ParticleManager_UpdateParticleFallback::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_ParticleManager_UpdateParticleFallback& CDOTAUserMsg_ParticleManager_UpdateParticleFallback::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_ParticleManager_UpdateParticleFallback* CDOTAUserMsg_ParticleManager_UpdateParticleFallback::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_ParticleManager_UpdateParticleFallback* n = new CDOTAUserMsg_ParticleManager_UpdateParticleFallback;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_ParticleManager_UpdateParticleFallback::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleFallback)
  if (has_position()) {
    GOOGLE_DCHECK(position_ != NULL);
    position_->::proto::dota::CMsgVector::Clear();
  }
  control_point_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_ParticleManager_UpdateParticleFallback::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleFallback)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 control_point = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_control_point();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &control_point_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgVector position = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleFallback)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleFallback)
  return false;
#undef DO_
}

void CDOTAUserMsg_ParticleManager_UpdateParticleFallback::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleFallback)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 control_point = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->control_point(), output);
  }

  // optional .proto.dota.CMsgVector position = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->position_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleFallback)
}

::google::protobuf::uint8* CDOTAUserMsg_ParticleManager_UpdateParticleFallback::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleFallback)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 control_point = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->control_point(), target);
  }

  // optional .proto.dota.CMsgVector position = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->position_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleFallback)
  return target;
}

size_t CDOTAUserMsg_ParticleManager_UpdateParticleFallback::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleFallback)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .proto.dota.CMsgVector position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->position_);
    }

    // optional int32 control_point = 1;
    if (has_control_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->control_point());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_ParticleManager_UpdateParticleFallback::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleFallback)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_ParticleManager_UpdateParticleFallback* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_ParticleManager_UpdateParticleFallback>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleFallback)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleFallback)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_ParticleManager_UpdateParticleFallback::MergeFrom(const CDOTAUserMsg_ParticleManager_UpdateParticleFallback& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleFallback)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_position()->::proto::dota::CMsgVector::MergeFrom(from.position());
    }
    if (cached_has_bits & 0x00000002u) {
      control_point_ = from.control_point_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_ParticleManager_UpdateParticleFallback::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleFallback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_ParticleManager_UpdateParticleFallback::CopyFrom(const CDOTAUserMsg_ParticleManager_UpdateParticleFallback& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleFallback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ParticleManager_UpdateParticleFallback::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_ParticleManager_UpdateParticleFallback::Swap(CDOTAUserMsg_ParticleManager_UpdateParticleFallback* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_ParticleManager_UpdateParticleFallback::InternalSwap(CDOTAUserMsg_ParticleManager_UpdateParticleFallback* other) {
  std::swap(position_, other->position_);
  std::swap(control_point_, other->control_point_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_ParticleManager_UpdateParticleFallback::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_ParticleManager_UpdateParticleFallback

// optional int32 control_point = 1;
bool CDOTAUserMsg_ParticleManager_UpdateParticleFallback::has_control_point() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAUserMsg_ParticleManager_UpdateParticleFallback::set_has_control_point() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAUserMsg_ParticleManager_UpdateParticleFallback::clear_has_control_point() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAUserMsg_ParticleManager_UpdateParticleFallback::clear_control_point() {
  control_point_ = 0;
  clear_has_control_point();
}
::google::protobuf::int32 CDOTAUserMsg_ParticleManager_UpdateParticleFallback::control_point() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleFallback.control_point)
  return control_point_;
}
void CDOTAUserMsg_ParticleManager_UpdateParticleFallback::set_control_point(::google::protobuf::int32 value) {
  set_has_control_point();
  control_point_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleFallback.control_point)
}

// optional .proto.dota.CMsgVector position = 2;
bool CDOTAUserMsg_ParticleManager_UpdateParticleFallback::has_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_ParticleManager_UpdateParticleFallback::set_has_position() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_ParticleManager_UpdateParticleFallback::clear_has_position() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_ParticleManager_UpdateParticleFallback::clear_position() {
  if (position_ != NULL) position_->::proto::dota::CMsgVector::Clear();
  clear_has_position();
}
const ::proto::dota::CMsgVector& CDOTAUserMsg_ParticleManager_UpdateParticleFallback::position() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleFallback.position)
  return position_ != NULL ? *position_
                         : *::proto::dota::CMsgVector::internal_default_instance();
}
::proto::dota::CMsgVector* CDOTAUserMsg_ParticleManager_UpdateParticleFallback::mutable_position() {
  set_has_position();
  if (position_ == NULL) {
    position_ = new ::proto::dota::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleFallback.position)
  return position_;
}
::proto::dota::CMsgVector* CDOTAUserMsg_ParticleManager_UpdateParticleFallback::release_position() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleFallback.position)
  clear_has_position();
  ::proto::dota::CMsgVector* temp = position_;
  position_ = NULL;
  return temp;
}
void CDOTAUserMsg_ParticleManager_UpdateParticleFallback::set_allocated_position(::proto::dota::CMsgVector* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleFallback.position)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_ParticleManager_UpdateParticleOffset::kControlPointFieldNumber;
const int CDOTAUserMsg_ParticleManager_UpdateParticleOffset::kOriginOffsetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_ParticleManager_UpdateParticleOffset::CDOTAUserMsg_ParticleManager_UpdateParticleOffset()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleOffset)
}
CDOTAUserMsg_ParticleManager_UpdateParticleOffset::CDOTAUserMsg_ParticleManager_UpdateParticleOffset(const CDOTAUserMsg_ParticleManager_UpdateParticleOffset& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_origin_offset()) {
    origin_offset_ = new ::proto::dota::CMsgVector(*from.origin_offset_);
  } else {
    origin_offset_ = NULL;
  }
  control_point_ = from.control_point_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleOffset)
}

void CDOTAUserMsg_ParticleManager_UpdateParticleOffset::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&origin_offset_, 0, reinterpret_cast<char*>(&control_point_) -
    reinterpret_cast<char*>(&origin_offset_) + sizeof(control_point_));
}

CDOTAUserMsg_ParticleManager_UpdateParticleOffset::~CDOTAUserMsg_ParticleManager_UpdateParticleOffset() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleOffset)
  SharedDtor();
}

void CDOTAUserMsg_ParticleManager_UpdateParticleOffset::SharedDtor() {
  if (this != internal_default_instance()) {
    delete origin_offset_;
  }
}

void CDOTAUserMsg_ParticleManager_UpdateParticleOffset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_ParticleManager_UpdateParticleOffset::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_ParticleManager_UpdateParticleOffset& CDOTAUserMsg_ParticleManager_UpdateParticleOffset::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_ParticleManager_UpdateParticleOffset* CDOTAUserMsg_ParticleManager_UpdateParticleOffset::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_ParticleManager_UpdateParticleOffset* n = new CDOTAUserMsg_ParticleManager_UpdateParticleOffset;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_ParticleManager_UpdateParticleOffset::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleOffset)
  if (has_origin_offset()) {
    GOOGLE_DCHECK(origin_offset_ != NULL);
    origin_offset_->::proto::dota::CMsgVector::Clear();
  }
  control_point_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_ParticleManager_UpdateParticleOffset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleOffset)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 control_point = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_control_point();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &control_point_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgVector origin_offset = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_origin_offset()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleOffset)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleOffset)
  return false;
#undef DO_
}

void CDOTAUserMsg_ParticleManager_UpdateParticleOffset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleOffset)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 control_point = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->control_point(), output);
  }

  // optional .proto.dota.CMsgVector origin_offset = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->origin_offset_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleOffset)
}

::google::protobuf::uint8* CDOTAUserMsg_ParticleManager_UpdateParticleOffset::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleOffset)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 control_point = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->control_point(), target);
  }

  // optional .proto.dota.CMsgVector origin_offset = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->origin_offset_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleOffset)
  return target;
}

size_t CDOTAUserMsg_ParticleManager_UpdateParticleOffset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleOffset)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .proto.dota.CMsgVector origin_offset = 2;
    if (has_origin_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->origin_offset_);
    }

    // optional int32 control_point = 1;
    if (has_control_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->control_point());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_ParticleManager_UpdateParticleOffset::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleOffset)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_ParticleManager_UpdateParticleOffset* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_ParticleManager_UpdateParticleOffset>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleOffset)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleOffset)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_ParticleManager_UpdateParticleOffset::MergeFrom(const CDOTAUserMsg_ParticleManager_UpdateParticleOffset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleOffset)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_origin_offset()->::proto::dota::CMsgVector::MergeFrom(from.origin_offset());
    }
    if (cached_has_bits & 0x00000002u) {
      control_point_ = from.control_point_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_ParticleManager_UpdateParticleOffset::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleOffset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_ParticleManager_UpdateParticleOffset::CopyFrom(const CDOTAUserMsg_ParticleManager_UpdateParticleOffset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleOffset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ParticleManager_UpdateParticleOffset::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_ParticleManager_UpdateParticleOffset::Swap(CDOTAUserMsg_ParticleManager_UpdateParticleOffset* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_ParticleManager_UpdateParticleOffset::InternalSwap(CDOTAUserMsg_ParticleManager_UpdateParticleOffset* other) {
  std::swap(origin_offset_, other->origin_offset_);
  std::swap(control_point_, other->control_point_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_ParticleManager_UpdateParticleOffset::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_ParticleManager_UpdateParticleOffset

// optional int32 control_point = 1;
bool CDOTAUserMsg_ParticleManager_UpdateParticleOffset::has_control_point() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAUserMsg_ParticleManager_UpdateParticleOffset::set_has_control_point() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAUserMsg_ParticleManager_UpdateParticleOffset::clear_has_control_point() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAUserMsg_ParticleManager_UpdateParticleOffset::clear_control_point() {
  control_point_ = 0;
  clear_has_control_point();
}
::google::protobuf::int32 CDOTAUserMsg_ParticleManager_UpdateParticleOffset::control_point() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleOffset.control_point)
  return control_point_;
}
void CDOTAUserMsg_ParticleManager_UpdateParticleOffset::set_control_point(::google::protobuf::int32 value) {
  set_has_control_point();
  control_point_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleOffset.control_point)
}

// optional .proto.dota.CMsgVector origin_offset = 2;
bool CDOTAUserMsg_ParticleManager_UpdateParticleOffset::has_origin_offset() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_ParticleManager_UpdateParticleOffset::set_has_origin_offset() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_ParticleManager_UpdateParticleOffset::clear_has_origin_offset() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_ParticleManager_UpdateParticleOffset::clear_origin_offset() {
  if (origin_offset_ != NULL) origin_offset_->::proto::dota::CMsgVector::Clear();
  clear_has_origin_offset();
}
const ::proto::dota::CMsgVector& CDOTAUserMsg_ParticleManager_UpdateParticleOffset::origin_offset() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleOffset.origin_offset)
  return origin_offset_ != NULL ? *origin_offset_
                         : *::proto::dota::CMsgVector::internal_default_instance();
}
::proto::dota::CMsgVector* CDOTAUserMsg_ParticleManager_UpdateParticleOffset::mutable_origin_offset() {
  set_has_origin_offset();
  if (origin_offset_ == NULL) {
    origin_offset_ = new ::proto::dota::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleOffset.origin_offset)
  return origin_offset_;
}
::proto::dota::CMsgVector* CDOTAUserMsg_ParticleManager_UpdateParticleOffset::release_origin_offset() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleOffset.origin_offset)
  clear_has_origin_offset();
  ::proto::dota::CMsgVector* temp = origin_offset_;
  origin_offset_ = NULL;
  return temp;
}
void CDOTAUserMsg_ParticleManager_UpdateParticleOffset::set_allocated_origin_offset(::proto::dota::CMsgVector* origin_offset) {
  delete origin_offset_;
  origin_offset_ = origin_offset;
  if (origin_offset) {
    set_has_origin_offset();
  } else {
    clear_has_origin_offset();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleOffset.origin_offset)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_ParticleManager_UpdateParticleEnt::kControlPointFieldNumber;
const int CDOTAUserMsg_ParticleManager_UpdateParticleEnt::kEntityHandleFieldNumber;
const int CDOTAUserMsg_ParticleManager_UpdateParticleEnt::kAttachTypeFieldNumber;
const int CDOTAUserMsg_ParticleManager_UpdateParticleEnt::kAttachmentFieldNumber;
const int CDOTAUserMsg_ParticleManager_UpdateParticleEnt::kFallbackPositionFieldNumber;
const int CDOTAUserMsg_ParticleManager_UpdateParticleEnt::kIncludeWearablesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_ParticleManager_UpdateParticleEnt::CDOTAUserMsg_ParticleManager_UpdateParticleEnt()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleEnt)
}
CDOTAUserMsg_ParticleManager_UpdateParticleEnt::CDOTAUserMsg_ParticleManager_UpdateParticleEnt(const CDOTAUserMsg_ParticleManager_UpdateParticleEnt& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_fallback_position()) {
    fallback_position_ = new ::proto::dota::CMsgVector(*from.fallback_position_);
  } else {
    fallback_position_ = NULL;
  }
  ::memcpy(&control_point_, &from.control_point_,
    reinterpret_cast<char*>(&include_wearables_) -
    reinterpret_cast<char*>(&control_point_) + sizeof(include_wearables_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleEnt)
}

void CDOTAUserMsg_ParticleManager_UpdateParticleEnt::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&fallback_position_, 0, reinterpret_cast<char*>(&include_wearables_) -
    reinterpret_cast<char*>(&fallback_position_) + sizeof(include_wearables_));
}

CDOTAUserMsg_ParticleManager_UpdateParticleEnt::~CDOTAUserMsg_ParticleManager_UpdateParticleEnt() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleEnt)
  SharedDtor();
}

void CDOTAUserMsg_ParticleManager_UpdateParticleEnt::SharedDtor() {
  if (this != internal_default_instance()) {
    delete fallback_position_;
  }
}

void CDOTAUserMsg_ParticleManager_UpdateParticleEnt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_ParticleManager_UpdateParticleEnt::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_ParticleManager_UpdateParticleEnt& CDOTAUserMsg_ParticleManager_UpdateParticleEnt::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_ParticleManager_UpdateParticleEnt* CDOTAUserMsg_ParticleManager_UpdateParticleEnt::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_ParticleManager_UpdateParticleEnt* n = new CDOTAUserMsg_ParticleManager_UpdateParticleEnt;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_ParticleManager_UpdateParticleEnt::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleEnt)
  if (has_fallback_position()) {
    GOOGLE_DCHECK(fallback_position_ != NULL);
    fallback_position_->::proto::dota::CMsgVector::Clear();
  }
  if (_has_bits_[0 / 32] & 62u) {
    ::memset(&control_point_, 0, reinterpret_cast<char*>(&include_wearables_) -
      reinterpret_cast<char*>(&control_point_) + sizeof(include_wearables_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_ParticleManager_UpdateParticleEnt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleEnt)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 control_point = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_control_point();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &control_point_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 entity_handle = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_entity_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entity_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 attach_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_attach_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attach_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 attachment = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_attachment();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attachment_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgVector fallback_position = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fallback_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool include_wearables = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_include_wearables();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &include_wearables_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleEnt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleEnt)
  return false;
#undef DO_
}

void CDOTAUserMsg_ParticleManager_UpdateParticleEnt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleEnt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 control_point = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->control_point(), output);
  }

  // optional int32 entity_handle = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->entity_handle(), output);
  }

  // optional int32 attach_type = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->attach_type(), output);
  }

  // optional int32 attachment = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->attachment(), output);
  }

  // optional .proto.dota.CMsgVector fallback_position = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->fallback_position_, output);
  }

  // optional bool include_wearables = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->include_wearables(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleEnt)
}

::google::protobuf::uint8* CDOTAUserMsg_ParticleManager_UpdateParticleEnt::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleEnt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 control_point = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->control_point(), target);
  }

  // optional int32 entity_handle = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->entity_handle(), target);
  }

  // optional int32 attach_type = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->attach_type(), target);
  }

  // optional int32 attachment = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->attachment(), target);
  }

  // optional .proto.dota.CMsgVector fallback_position = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->fallback_position_, deterministic, target);
  }

  // optional bool include_wearables = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->include_wearables(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleEnt)
  return target;
}

size_t CDOTAUserMsg_ParticleManager_UpdateParticleEnt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleEnt)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional .proto.dota.CMsgVector fallback_position = 5;
    if (has_fallback_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->fallback_position_);
    }

    // optional int32 control_point = 1;
    if (has_control_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->control_point());
    }

    // optional int32 entity_handle = 2;
    if (has_entity_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entity_handle());
    }

    // optional int32 attach_type = 3;
    if (has_attach_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attach_type());
    }

    // optional int32 attachment = 4;
    if (has_attachment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attachment());
    }

    // optional bool include_wearables = 6;
    if (has_include_wearables()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_ParticleManager_UpdateParticleEnt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleEnt)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_ParticleManager_UpdateParticleEnt* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_ParticleManager_UpdateParticleEnt>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleEnt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleEnt)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_ParticleManager_UpdateParticleEnt::MergeFrom(const CDOTAUserMsg_ParticleManager_UpdateParticleEnt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleEnt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_fallback_position()->::proto::dota::CMsgVector::MergeFrom(from.fallback_position());
    }
    if (cached_has_bits & 0x00000002u) {
      control_point_ = from.control_point_;
    }
    if (cached_has_bits & 0x00000004u) {
      entity_handle_ = from.entity_handle_;
    }
    if (cached_has_bits & 0x00000008u) {
      attach_type_ = from.attach_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      attachment_ = from.attachment_;
    }
    if (cached_has_bits & 0x00000020u) {
      include_wearables_ = from.include_wearables_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_ParticleManager_UpdateParticleEnt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleEnt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_ParticleManager_UpdateParticleEnt::CopyFrom(const CDOTAUserMsg_ParticleManager_UpdateParticleEnt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleEnt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ParticleManager_UpdateParticleEnt::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_ParticleManager_UpdateParticleEnt::Swap(CDOTAUserMsg_ParticleManager_UpdateParticleEnt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_ParticleManager_UpdateParticleEnt::InternalSwap(CDOTAUserMsg_ParticleManager_UpdateParticleEnt* other) {
  std::swap(fallback_position_, other->fallback_position_);
  std::swap(control_point_, other->control_point_);
  std::swap(entity_handle_, other->entity_handle_);
  std::swap(attach_type_, other->attach_type_);
  std::swap(attachment_, other->attachment_);
  std::swap(include_wearables_, other->include_wearables_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_ParticleManager_UpdateParticleEnt::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_ParticleManager_UpdateParticleEnt

// optional int32 control_point = 1;
bool CDOTAUserMsg_ParticleManager_UpdateParticleEnt::has_control_point() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAUserMsg_ParticleManager_UpdateParticleEnt::set_has_control_point() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAUserMsg_ParticleManager_UpdateParticleEnt::clear_has_control_point() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAUserMsg_ParticleManager_UpdateParticleEnt::clear_control_point() {
  control_point_ = 0;
  clear_has_control_point();
}
::google::protobuf::int32 CDOTAUserMsg_ParticleManager_UpdateParticleEnt::control_point() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleEnt.control_point)
  return control_point_;
}
void CDOTAUserMsg_ParticleManager_UpdateParticleEnt::set_control_point(::google::protobuf::int32 value) {
  set_has_control_point();
  control_point_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleEnt.control_point)
}

// optional int32 entity_handle = 2;
bool CDOTAUserMsg_ParticleManager_UpdateParticleEnt::has_entity_handle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDOTAUserMsg_ParticleManager_UpdateParticleEnt::set_has_entity_handle() {
  _has_bits_[0] |= 0x00000004u;
}
void CDOTAUserMsg_ParticleManager_UpdateParticleEnt::clear_has_entity_handle() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDOTAUserMsg_ParticleManager_UpdateParticleEnt::clear_entity_handle() {
  entity_handle_ = 0;
  clear_has_entity_handle();
}
::google::protobuf::int32 CDOTAUserMsg_ParticleManager_UpdateParticleEnt::entity_handle() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleEnt.entity_handle)
  return entity_handle_;
}
void CDOTAUserMsg_ParticleManager_UpdateParticleEnt::set_entity_handle(::google::protobuf::int32 value) {
  set_has_entity_handle();
  entity_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleEnt.entity_handle)
}

// optional int32 attach_type = 3;
bool CDOTAUserMsg_ParticleManager_UpdateParticleEnt::has_attach_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CDOTAUserMsg_ParticleManager_UpdateParticleEnt::set_has_attach_type() {
  _has_bits_[0] |= 0x00000008u;
}
void CDOTAUserMsg_ParticleManager_UpdateParticleEnt::clear_has_attach_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void CDOTAUserMsg_ParticleManager_UpdateParticleEnt::clear_attach_type() {
  attach_type_ = 0;
  clear_has_attach_type();
}
::google::protobuf::int32 CDOTAUserMsg_ParticleManager_UpdateParticleEnt::attach_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleEnt.attach_type)
  return attach_type_;
}
void CDOTAUserMsg_ParticleManager_UpdateParticleEnt::set_attach_type(::google::protobuf::int32 value) {
  set_has_attach_type();
  attach_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleEnt.attach_type)
}

// optional int32 attachment = 4;
bool CDOTAUserMsg_ParticleManager_UpdateParticleEnt::has_attachment() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CDOTAUserMsg_ParticleManager_UpdateParticleEnt::set_has_attachment() {
  _has_bits_[0] |= 0x00000010u;
}
void CDOTAUserMsg_ParticleManager_UpdateParticleEnt::clear_has_attachment() {
  _has_bits_[0] &= ~0x00000010u;
}
void CDOTAUserMsg_ParticleManager_UpdateParticleEnt::clear_attachment() {
  attachment_ = 0;
  clear_has_attachment();
}
::google::protobuf::int32 CDOTAUserMsg_ParticleManager_UpdateParticleEnt::attachment() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleEnt.attachment)
  return attachment_;
}
void CDOTAUserMsg_ParticleManager_UpdateParticleEnt::set_attachment(::google::protobuf::int32 value) {
  set_has_attachment();
  attachment_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleEnt.attachment)
}

// optional .proto.dota.CMsgVector fallback_position = 5;
bool CDOTAUserMsg_ParticleManager_UpdateParticleEnt::has_fallback_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_ParticleManager_UpdateParticleEnt::set_has_fallback_position() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_ParticleManager_UpdateParticleEnt::clear_has_fallback_position() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_ParticleManager_UpdateParticleEnt::clear_fallback_position() {
  if (fallback_position_ != NULL) fallback_position_->::proto::dota::CMsgVector::Clear();
  clear_has_fallback_position();
}
const ::proto::dota::CMsgVector& CDOTAUserMsg_ParticleManager_UpdateParticleEnt::fallback_position() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleEnt.fallback_position)
  return fallback_position_ != NULL ? *fallback_position_
                         : *::proto::dota::CMsgVector::internal_default_instance();
}
::proto::dota::CMsgVector* CDOTAUserMsg_ParticleManager_UpdateParticleEnt::mutable_fallback_position() {
  set_has_fallback_position();
  if (fallback_position_ == NULL) {
    fallback_position_ = new ::proto::dota::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleEnt.fallback_position)
  return fallback_position_;
}
::proto::dota::CMsgVector* CDOTAUserMsg_ParticleManager_UpdateParticleEnt::release_fallback_position() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleEnt.fallback_position)
  clear_has_fallback_position();
  ::proto::dota::CMsgVector* temp = fallback_position_;
  fallback_position_ = NULL;
  return temp;
}
void CDOTAUserMsg_ParticleManager_UpdateParticleEnt::set_allocated_fallback_position(::proto::dota::CMsgVector* fallback_position) {
  delete fallback_position_;
  fallback_position_ = fallback_position;
  if (fallback_position) {
    set_has_fallback_position();
  } else {
    clear_has_fallback_position();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleEnt.fallback_position)
}

// optional bool include_wearables = 6;
bool CDOTAUserMsg_ParticleManager_UpdateParticleEnt::has_include_wearables() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CDOTAUserMsg_ParticleManager_UpdateParticleEnt::set_has_include_wearables() {
  _has_bits_[0] |= 0x00000020u;
}
void CDOTAUserMsg_ParticleManager_UpdateParticleEnt::clear_has_include_wearables() {
  _has_bits_[0] &= ~0x00000020u;
}
void CDOTAUserMsg_ParticleManager_UpdateParticleEnt::clear_include_wearables() {
  include_wearables_ = false;
  clear_has_include_wearables();
}
bool CDOTAUserMsg_ParticleManager_UpdateParticleEnt::include_wearables() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleEnt.include_wearables)
  return include_wearables_;
}
void CDOTAUserMsg_ParticleManager_UpdateParticleEnt::set_include_wearables(bool value) {
  set_has_include_wearables();
  include_wearables_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleEnt.include_wearables)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen::kSetFrozenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen::CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleSetFrozen)
}
CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen::CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen(const CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  set_frozen_ = from.set_frozen_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleSetFrozen)
}

void CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen::SharedCtor() {
  _cached_size_ = 0;
  set_frozen_ = false;
}

CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen::~CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleSetFrozen)
  SharedDtor();
}

void CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen::SharedDtor() {
}

void CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen& CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen* CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen* n = new CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleSetFrozen)
  set_frozen_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleSetFrozen)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool set_frozen = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_set_frozen();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &set_frozen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleSetFrozen)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleSetFrozen)
  return false;
#undef DO_
}

void CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleSetFrozen)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool set_frozen = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->set_frozen(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleSetFrozen)
}

::google::protobuf::uint8* CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleSetFrozen)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool set_frozen = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->set_frozen(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleSetFrozen)
  return target;
}

size_t CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleSetFrozen)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional bool set_frozen = 1;
  if (has_set_frozen()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleSetFrozen)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleSetFrozen)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleSetFrozen)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen::MergeFrom(const CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleSetFrozen)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_set_frozen()) {
    set_set_frozen(from.set_frozen());
  }
}

void CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleSetFrozen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen::CopyFrom(const CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleSetFrozen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen::Swap(CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen::InternalSwap(CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen* other) {
  std::swap(set_frozen_, other->set_frozen_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen

// optional bool set_frozen = 1;
bool CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen::has_set_frozen() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen::set_has_set_frozen() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen::clear_has_set_frozen() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen::clear_set_frozen() {
  set_frozen_ = false;
  clear_has_set_frozen();
}
bool CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen::set_frozen() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleSetFrozen.set_frozen)
  return set_frozen_;
}
void CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen::set_set_frozen(bool value) {
  set_has_set_frozen();
  set_frozen_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleSetFrozen.set_frozen)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::kShouldDrawFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleShouldDraw)
}
CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw(const CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  should_draw_ = from.should_draw_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleShouldDraw)
}

void CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::SharedCtor() {
  _cached_size_ = 0;
  should_draw_ = false;
}

CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::~CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleShouldDraw)
  SharedDtor();
}

void CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::SharedDtor() {
}

void CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw& CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw* CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw* n = new CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleShouldDraw)
  should_draw_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleShouldDraw)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool should_draw = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_should_draw();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &should_draw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleShouldDraw)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleShouldDraw)
  return false;
#undef DO_
}

void CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleShouldDraw)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool should_draw = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->should_draw(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleShouldDraw)
}

::google::protobuf::uint8* CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleShouldDraw)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool should_draw = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->should_draw(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleShouldDraw)
  return target;
}

size_t CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleShouldDraw)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional bool should_draw = 1;
  if (has_should_draw()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleShouldDraw)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleShouldDraw)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleShouldDraw)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::MergeFrom(const CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleShouldDraw)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_should_draw()) {
    set_should_draw(from.should_draw());
  }
}

void CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleShouldDraw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::CopyFrom(const CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleShouldDraw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::Swap(CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::InternalSwap(CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw* other) {
  std::swap(should_draw_, other->should_draw_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw

// optional bool should_draw = 1;
bool CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::has_should_draw() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::set_has_should_draw() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::clear_has_should_draw() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::clear_should_draw() {
  should_draw_ = false;
  clear_has_should_draw();
}
bool CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::should_draw() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleShouldDraw.should_draw)
  return should_draw_;
}
void CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::set_should_draw(bool value) {
  set_has_should_draw();
  should_draw_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleShouldDraw.should_draw)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_ParticleManager_ChangeControlPointAttachment::kAttachmentOldFieldNumber;
const int CDOTAUserMsg_ParticleManager_ChangeControlPointAttachment::kAttachmentNewFieldNumber;
const int CDOTAUserMsg_ParticleManager_ChangeControlPointAttachment::kEntityHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_ParticleManager_ChangeControlPointAttachment::CDOTAUserMsg_ParticleManager_ChangeControlPointAttachment()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_ParticleManager.ChangeControlPointAttachment)
}
CDOTAUserMsg_ParticleManager_ChangeControlPointAttachment::CDOTAUserMsg_ParticleManager_ChangeControlPointAttachment(const CDOTAUserMsg_ParticleManager_ChangeControlPointAttachment& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&attachment_old_, &from.attachment_old_,
    reinterpret_cast<char*>(&entity_handle_) -
    reinterpret_cast<char*>(&attachment_old_) + sizeof(entity_handle_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_ParticleManager.ChangeControlPointAttachment)
}

void CDOTAUserMsg_ParticleManager_ChangeControlPointAttachment::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&attachment_old_, 0, reinterpret_cast<char*>(&entity_handle_) -
    reinterpret_cast<char*>(&attachment_old_) + sizeof(entity_handle_));
}

CDOTAUserMsg_ParticleManager_ChangeControlPointAttachment::~CDOTAUserMsg_ParticleManager_ChangeControlPointAttachment() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_ParticleManager.ChangeControlPointAttachment)
  SharedDtor();
}

void CDOTAUserMsg_ParticleManager_ChangeControlPointAttachment::SharedDtor() {
}

void CDOTAUserMsg_ParticleManager_ChangeControlPointAttachment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_ParticleManager_ChangeControlPointAttachment::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_ParticleManager_ChangeControlPointAttachment& CDOTAUserMsg_ParticleManager_ChangeControlPointAttachment::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_ParticleManager_ChangeControlPointAttachment* CDOTAUserMsg_ParticleManager_ChangeControlPointAttachment::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_ParticleManager_ChangeControlPointAttachment* n = new CDOTAUserMsg_ParticleManager_ChangeControlPointAttachment;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_ParticleManager_ChangeControlPointAttachment::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_ParticleManager.ChangeControlPointAttachment)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&attachment_old_, 0, reinterpret_cast<char*>(&entity_handle_) -
      reinterpret_cast<char*>(&attachment_old_) + sizeof(entity_handle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_ParticleManager_ChangeControlPointAttachment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_ParticleManager.ChangeControlPointAttachment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 attachment_old = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_attachment_old();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attachment_old_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 attachment_new = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_attachment_new();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attachment_new_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 entity_handle = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_entity_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entity_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_ParticleManager.ChangeControlPointAttachment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_ParticleManager.ChangeControlPointAttachment)
  return false;
#undef DO_
}

void CDOTAUserMsg_ParticleManager_ChangeControlPointAttachment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_ParticleManager.ChangeControlPointAttachment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 attachment_old = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->attachment_old(), output);
  }

  // optional int32 attachment_new = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->attachment_new(), output);
  }

  // optional int32 entity_handle = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->entity_handle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_ParticleManager.ChangeControlPointAttachment)
}

::google::protobuf::uint8* CDOTAUserMsg_ParticleManager_ChangeControlPointAttachment::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_ParticleManager.ChangeControlPointAttachment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 attachment_old = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->attachment_old(), target);
  }

  // optional int32 attachment_new = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->attachment_new(), target);
  }

  // optional int32 entity_handle = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->entity_handle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_ParticleManager.ChangeControlPointAttachment)
  return target;
}

size_t CDOTAUserMsg_ParticleManager_ChangeControlPointAttachment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_ParticleManager.ChangeControlPointAttachment)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 attachment_old = 1;
    if (has_attachment_old()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attachment_old());
    }

    // optional int32 attachment_new = 2;
    if (has_attachment_new()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attachment_new());
    }

    // optional int32 entity_handle = 3;
    if (has_entity_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entity_handle());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_ParticleManager_ChangeControlPointAttachment::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_ParticleManager.ChangeControlPointAttachment)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_ParticleManager_ChangeControlPointAttachment* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_ParticleManager_ChangeControlPointAttachment>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_ParticleManager.ChangeControlPointAttachment)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_ParticleManager.ChangeControlPointAttachment)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_ParticleManager_ChangeControlPointAttachment::MergeFrom(const CDOTAUserMsg_ParticleManager_ChangeControlPointAttachment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_ParticleManager.ChangeControlPointAttachment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      attachment_old_ = from.attachment_old_;
    }
    if (cached_has_bits & 0x00000002u) {
      attachment_new_ = from.attachment_new_;
    }
    if (cached_has_bits & 0x00000004u) {
      entity_handle_ = from.entity_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_ParticleManager_ChangeControlPointAttachment::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_ParticleManager.ChangeControlPointAttachment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_ParticleManager_ChangeControlPointAttachment::CopyFrom(const CDOTAUserMsg_ParticleManager_ChangeControlPointAttachment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_ParticleManager.ChangeControlPointAttachment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ParticleManager_ChangeControlPointAttachment::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_ParticleManager_ChangeControlPointAttachment::Swap(CDOTAUserMsg_ParticleManager_ChangeControlPointAttachment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_ParticleManager_ChangeControlPointAttachment::InternalSwap(CDOTAUserMsg_ParticleManager_ChangeControlPointAttachment* other) {
  std::swap(attachment_old_, other->attachment_old_);
  std::swap(attachment_new_, other->attachment_new_);
  std::swap(entity_handle_, other->entity_handle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_ParticleManager_ChangeControlPointAttachment::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_ParticleManager_ChangeControlPointAttachment

// optional int32 attachment_old = 1;
bool CDOTAUserMsg_ParticleManager_ChangeControlPointAttachment::has_attachment_old() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_ParticleManager_ChangeControlPointAttachment::set_has_attachment_old() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_ParticleManager_ChangeControlPointAttachment::clear_has_attachment_old() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_ParticleManager_ChangeControlPointAttachment::clear_attachment_old() {
  attachment_old_ = 0;
  clear_has_attachment_old();
}
::google::protobuf::int32 CDOTAUserMsg_ParticleManager_ChangeControlPointAttachment::attachment_old() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ParticleManager.ChangeControlPointAttachment.attachment_old)
  return attachment_old_;
}
void CDOTAUserMsg_ParticleManager_ChangeControlPointAttachment::set_attachment_old(::google::protobuf::int32 value) {
  set_has_attachment_old();
  attachment_old_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_ParticleManager.ChangeControlPointAttachment.attachment_old)
}

// optional int32 attachment_new = 2;
bool CDOTAUserMsg_ParticleManager_ChangeControlPointAttachment::has_attachment_new() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAUserMsg_ParticleManager_ChangeControlPointAttachment::set_has_attachment_new() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAUserMsg_ParticleManager_ChangeControlPointAttachment::clear_has_attachment_new() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAUserMsg_ParticleManager_ChangeControlPointAttachment::clear_attachment_new() {
  attachment_new_ = 0;
  clear_has_attachment_new();
}
::google::protobuf::int32 CDOTAUserMsg_ParticleManager_ChangeControlPointAttachment::attachment_new() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ParticleManager.ChangeControlPointAttachment.attachment_new)
  return attachment_new_;
}
void CDOTAUserMsg_ParticleManager_ChangeControlPointAttachment::set_attachment_new(::google::protobuf::int32 value) {
  set_has_attachment_new();
  attachment_new_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_ParticleManager.ChangeControlPointAttachment.attachment_new)
}

// optional int32 entity_handle = 3;
bool CDOTAUserMsg_ParticleManager_ChangeControlPointAttachment::has_entity_handle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDOTAUserMsg_ParticleManager_ChangeControlPointAttachment::set_has_entity_handle() {
  _has_bits_[0] |= 0x00000004u;
}
void CDOTAUserMsg_ParticleManager_ChangeControlPointAttachment::clear_has_entity_handle() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDOTAUserMsg_ParticleManager_ChangeControlPointAttachment::clear_entity_handle() {
  entity_handle_ = 0;
  clear_has_entity_handle();
}
::google::protobuf::int32 CDOTAUserMsg_ParticleManager_ChangeControlPointAttachment::entity_handle() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ParticleManager.ChangeControlPointAttachment.entity_handle)
  return entity_handle_;
}
void CDOTAUserMsg_ParticleManager_ChangeControlPointAttachment::set_entity_handle(::google::protobuf::int32 value) {
  set_has_entity_handle();
  entity_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_ParticleManager.ChangeControlPointAttachment.entity_handle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_ParticleManager_UpdateEntityPosition::kEntityHandleFieldNumber;
const int CDOTAUserMsg_ParticleManager_UpdateEntityPosition::kPositionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_ParticleManager_UpdateEntityPosition::CDOTAUserMsg_ParticleManager_UpdateEntityPosition()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_ParticleManager.UpdateEntityPosition)
}
CDOTAUserMsg_ParticleManager_UpdateEntityPosition::CDOTAUserMsg_ParticleManager_UpdateEntityPosition(const CDOTAUserMsg_ParticleManager_UpdateEntityPosition& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_position()) {
    position_ = new ::proto::dota::CMsgVector(*from.position_);
  } else {
    position_ = NULL;
  }
  entity_handle_ = from.entity_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_ParticleManager.UpdateEntityPosition)
}

void CDOTAUserMsg_ParticleManager_UpdateEntityPosition::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&position_, 0, reinterpret_cast<char*>(&entity_handle_) -
    reinterpret_cast<char*>(&position_) + sizeof(entity_handle_));
}

CDOTAUserMsg_ParticleManager_UpdateEntityPosition::~CDOTAUserMsg_ParticleManager_UpdateEntityPosition() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_ParticleManager.UpdateEntityPosition)
  SharedDtor();
}

void CDOTAUserMsg_ParticleManager_UpdateEntityPosition::SharedDtor() {
  if (this != internal_default_instance()) {
    delete position_;
  }
}

void CDOTAUserMsg_ParticleManager_UpdateEntityPosition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_ParticleManager_UpdateEntityPosition::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_ParticleManager_UpdateEntityPosition& CDOTAUserMsg_ParticleManager_UpdateEntityPosition::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_ParticleManager_UpdateEntityPosition* CDOTAUserMsg_ParticleManager_UpdateEntityPosition::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_ParticleManager_UpdateEntityPosition* n = new CDOTAUserMsg_ParticleManager_UpdateEntityPosition;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_ParticleManager_UpdateEntityPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_ParticleManager.UpdateEntityPosition)
  if (has_position()) {
    GOOGLE_DCHECK(position_ != NULL);
    position_->::proto::dota::CMsgVector::Clear();
  }
  entity_handle_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_ParticleManager_UpdateEntityPosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_ParticleManager.UpdateEntityPosition)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 entity_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_entity_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entity_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgVector position = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_ParticleManager.UpdateEntityPosition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_ParticleManager.UpdateEntityPosition)
  return false;
#undef DO_
}

void CDOTAUserMsg_ParticleManager_UpdateEntityPosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_ParticleManager.UpdateEntityPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 entity_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->entity_handle(), output);
  }

  // optional .proto.dota.CMsgVector position = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->position_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_ParticleManager.UpdateEntityPosition)
}

::google::protobuf::uint8* CDOTAUserMsg_ParticleManager_UpdateEntityPosition::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_ParticleManager.UpdateEntityPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 entity_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->entity_handle(), target);
  }

  // optional .proto.dota.CMsgVector position = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->position_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_ParticleManager.UpdateEntityPosition)
  return target;
}

size_t CDOTAUserMsg_ParticleManager_UpdateEntityPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_ParticleManager.UpdateEntityPosition)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .proto.dota.CMsgVector position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->position_);
    }

    // optional int32 entity_handle = 1;
    if (has_entity_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entity_handle());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_ParticleManager_UpdateEntityPosition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_ParticleManager.UpdateEntityPosition)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_ParticleManager_UpdateEntityPosition* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_ParticleManager_UpdateEntityPosition>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_ParticleManager.UpdateEntityPosition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_ParticleManager.UpdateEntityPosition)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_ParticleManager_UpdateEntityPosition::MergeFrom(const CDOTAUserMsg_ParticleManager_UpdateEntityPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_ParticleManager.UpdateEntityPosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_position()->::proto::dota::CMsgVector::MergeFrom(from.position());
    }
    if (cached_has_bits & 0x00000002u) {
      entity_handle_ = from.entity_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_ParticleManager_UpdateEntityPosition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_ParticleManager.UpdateEntityPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_ParticleManager_UpdateEntityPosition::CopyFrom(const CDOTAUserMsg_ParticleManager_UpdateEntityPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_ParticleManager.UpdateEntityPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ParticleManager_UpdateEntityPosition::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_ParticleManager_UpdateEntityPosition::Swap(CDOTAUserMsg_ParticleManager_UpdateEntityPosition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_ParticleManager_UpdateEntityPosition::InternalSwap(CDOTAUserMsg_ParticleManager_UpdateEntityPosition* other) {
  std::swap(position_, other->position_);
  std::swap(entity_handle_, other->entity_handle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_ParticleManager_UpdateEntityPosition::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_ParticleManager_UpdateEntityPosition

// optional int32 entity_handle = 1;
bool CDOTAUserMsg_ParticleManager_UpdateEntityPosition::has_entity_handle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAUserMsg_ParticleManager_UpdateEntityPosition::set_has_entity_handle() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAUserMsg_ParticleManager_UpdateEntityPosition::clear_has_entity_handle() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAUserMsg_ParticleManager_UpdateEntityPosition::clear_entity_handle() {
  entity_handle_ = 0;
  clear_has_entity_handle();
}
::google::protobuf::int32 CDOTAUserMsg_ParticleManager_UpdateEntityPosition::entity_handle() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ParticleManager.UpdateEntityPosition.entity_handle)
  return entity_handle_;
}
void CDOTAUserMsg_ParticleManager_UpdateEntityPosition::set_entity_handle(::google::protobuf::int32 value) {
  set_has_entity_handle();
  entity_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_ParticleManager.UpdateEntityPosition.entity_handle)
}

// optional .proto.dota.CMsgVector position = 2;
bool CDOTAUserMsg_ParticleManager_UpdateEntityPosition::has_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_ParticleManager_UpdateEntityPosition::set_has_position() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_ParticleManager_UpdateEntityPosition::clear_has_position() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_ParticleManager_UpdateEntityPosition::clear_position() {
  if (position_ != NULL) position_->::proto::dota::CMsgVector::Clear();
  clear_has_position();
}
const ::proto::dota::CMsgVector& CDOTAUserMsg_ParticleManager_UpdateEntityPosition::position() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ParticleManager.UpdateEntityPosition.position)
  return position_ != NULL ? *position_
                         : *::proto::dota::CMsgVector::internal_default_instance();
}
::proto::dota::CMsgVector* CDOTAUserMsg_ParticleManager_UpdateEntityPosition::mutable_position() {
  set_has_position();
  if (position_ == NULL) {
    position_ = new ::proto::dota::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_ParticleManager.UpdateEntityPosition.position)
  return position_;
}
::proto::dota::CMsgVector* CDOTAUserMsg_ParticleManager_UpdateEntityPosition::release_position() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAUserMsg_ParticleManager.UpdateEntityPosition.position)
  clear_has_position();
  ::proto::dota::CMsgVector* temp = position_;
  position_ = NULL;
  return temp;
}
void CDOTAUserMsg_ParticleManager_UpdateEntityPosition::set_allocated_position(::proto::dota::CMsgVector* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAUserMsg_ParticleManager.UpdateEntityPosition.position)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_ParticleManager_SetParticleFoWProperties::kFowControlPointFieldNumber;
const int CDOTAUserMsg_ParticleManager_SetParticleFoWProperties::kFowControlPoint2FieldNumber;
const int CDOTAUserMsg_ParticleManager_SetParticleFoWProperties::kFowRadiusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_ParticleManager_SetParticleFoWProperties::CDOTAUserMsg_ParticleManager_SetParticleFoWProperties()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_ParticleManager.SetParticleFoWProperties)
}
CDOTAUserMsg_ParticleManager_SetParticleFoWProperties::CDOTAUserMsg_ParticleManager_SetParticleFoWProperties(const CDOTAUserMsg_ParticleManager_SetParticleFoWProperties& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&fow_control_point_, &from.fow_control_point_,
    reinterpret_cast<char*>(&fow_radius_) -
    reinterpret_cast<char*>(&fow_control_point_) + sizeof(fow_radius_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_ParticleManager.SetParticleFoWProperties)
}

void CDOTAUserMsg_ParticleManager_SetParticleFoWProperties::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&fow_control_point_, 0, reinterpret_cast<char*>(&fow_radius_) -
    reinterpret_cast<char*>(&fow_control_point_) + sizeof(fow_radius_));
}

CDOTAUserMsg_ParticleManager_SetParticleFoWProperties::~CDOTAUserMsg_ParticleManager_SetParticleFoWProperties() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_ParticleManager.SetParticleFoWProperties)
  SharedDtor();
}

void CDOTAUserMsg_ParticleManager_SetParticleFoWProperties::SharedDtor() {
}

void CDOTAUserMsg_ParticleManager_SetParticleFoWProperties::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_ParticleManager_SetParticleFoWProperties::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_ParticleManager_SetParticleFoWProperties& CDOTAUserMsg_ParticleManager_SetParticleFoWProperties::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_ParticleManager_SetParticleFoWProperties* CDOTAUserMsg_ParticleManager_SetParticleFoWProperties::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_ParticleManager_SetParticleFoWProperties* n = new CDOTAUserMsg_ParticleManager_SetParticleFoWProperties;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_ParticleManager_SetParticleFoWProperties::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_ParticleManager.SetParticleFoWProperties)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&fow_control_point_, 0, reinterpret_cast<char*>(&fow_radius_) -
      reinterpret_cast<char*>(&fow_control_point_) + sizeof(fow_radius_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_ParticleManager_SetParticleFoWProperties::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_ParticleManager.SetParticleFoWProperties)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 fow_control_point = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_fow_control_point();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fow_control_point_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 fow_control_point2 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_fow_control_point2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fow_control_point2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float fow_radius = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_fow_radius();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fow_radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_ParticleManager.SetParticleFoWProperties)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_ParticleManager.SetParticleFoWProperties)
  return false;
#undef DO_
}

void CDOTAUserMsg_ParticleManager_SetParticleFoWProperties::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_ParticleManager.SetParticleFoWProperties)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 fow_control_point = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fow_control_point(), output);
  }

  // optional int32 fow_control_point2 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fow_control_point2(), output);
  }

  // optional float fow_radius = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->fow_radius(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_ParticleManager.SetParticleFoWProperties)
}

::google::protobuf::uint8* CDOTAUserMsg_ParticleManager_SetParticleFoWProperties::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_ParticleManager.SetParticleFoWProperties)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 fow_control_point = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->fow_control_point(), target);
  }

  // optional int32 fow_control_point2 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fow_control_point2(), target);
  }

  // optional float fow_radius = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->fow_radius(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_ParticleManager.SetParticleFoWProperties)
  return target;
}

size_t CDOTAUserMsg_ParticleManager_SetParticleFoWProperties::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_ParticleManager.SetParticleFoWProperties)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 fow_control_point = 1;
    if (has_fow_control_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fow_control_point());
    }

    // optional int32 fow_control_point2 = 2;
    if (has_fow_control_point2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fow_control_point2());
    }

    // optional float fow_radius = 3;
    if (has_fow_radius()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_ParticleManager_SetParticleFoWProperties::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_ParticleManager.SetParticleFoWProperties)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_ParticleManager_SetParticleFoWProperties* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_ParticleManager_SetParticleFoWProperties>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_ParticleManager.SetParticleFoWProperties)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_ParticleManager.SetParticleFoWProperties)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_ParticleManager_SetParticleFoWProperties::MergeFrom(const CDOTAUserMsg_ParticleManager_SetParticleFoWProperties& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_ParticleManager.SetParticleFoWProperties)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      fow_control_point_ = from.fow_control_point_;
    }
    if (cached_has_bits & 0x00000002u) {
      fow_control_point2_ = from.fow_control_point2_;
    }
    if (cached_has_bits & 0x00000004u) {
      fow_radius_ = from.fow_radius_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_ParticleManager_SetParticleFoWProperties::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_ParticleManager.SetParticleFoWProperties)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_ParticleManager_SetParticleFoWProperties::CopyFrom(const CDOTAUserMsg_ParticleManager_SetParticleFoWProperties& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_ParticleManager.SetParticleFoWProperties)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ParticleManager_SetParticleFoWProperties::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_ParticleManager_SetParticleFoWProperties::Swap(CDOTAUserMsg_ParticleManager_SetParticleFoWProperties* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_ParticleManager_SetParticleFoWProperties::InternalSwap(CDOTAUserMsg_ParticleManager_SetParticleFoWProperties* other) {
  std::swap(fow_control_point_, other->fow_control_point_);
  std::swap(fow_control_point2_, other->fow_control_point2_);
  std::swap(fow_radius_, other->fow_radius_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_ParticleManager_SetParticleFoWProperties::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_ParticleManager_SetParticleFoWProperties

// optional int32 fow_control_point = 1;
bool CDOTAUserMsg_ParticleManager_SetParticleFoWProperties::has_fow_control_point() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_ParticleManager_SetParticleFoWProperties::set_has_fow_control_point() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_ParticleManager_SetParticleFoWProperties::clear_has_fow_control_point() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_ParticleManager_SetParticleFoWProperties::clear_fow_control_point() {
  fow_control_point_ = 0;
  clear_has_fow_control_point();
}
::google::protobuf::int32 CDOTAUserMsg_ParticleManager_SetParticleFoWProperties::fow_control_point() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ParticleManager.SetParticleFoWProperties.fow_control_point)
  return fow_control_point_;
}
void CDOTAUserMsg_ParticleManager_SetParticleFoWProperties::set_fow_control_point(::google::protobuf::int32 value) {
  set_has_fow_control_point();
  fow_control_point_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_ParticleManager.SetParticleFoWProperties.fow_control_point)
}

// optional int32 fow_control_point2 = 2;
bool CDOTAUserMsg_ParticleManager_SetParticleFoWProperties::has_fow_control_point2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAUserMsg_ParticleManager_SetParticleFoWProperties::set_has_fow_control_point2() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAUserMsg_ParticleManager_SetParticleFoWProperties::clear_has_fow_control_point2() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAUserMsg_ParticleManager_SetParticleFoWProperties::clear_fow_control_point2() {
  fow_control_point2_ = 0;
  clear_has_fow_control_point2();
}
::google::protobuf::int32 CDOTAUserMsg_ParticleManager_SetParticleFoWProperties::fow_control_point2() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ParticleManager.SetParticleFoWProperties.fow_control_point2)
  return fow_control_point2_;
}
void CDOTAUserMsg_ParticleManager_SetParticleFoWProperties::set_fow_control_point2(::google::protobuf::int32 value) {
  set_has_fow_control_point2();
  fow_control_point2_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_ParticleManager.SetParticleFoWProperties.fow_control_point2)
}

// optional float fow_radius = 3;
bool CDOTAUserMsg_ParticleManager_SetParticleFoWProperties::has_fow_radius() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDOTAUserMsg_ParticleManager_SetParticleFoWProperties::set_has_fow_radius() {
  _has_bits_[0] |= 0x00000004u;
}
void CDOTAUserMsg_ParticleManager_SetParticleFoWProperties::clear_has_fow_radius() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDOTAUserMsg_ParticleManager_SetParticleFoWProperties::clear_fow_radius() {
  fow_radius_ = 0;
  clear_has_fow_radius();
}
float CDOTAUserMsg_ParticleManager_SetParticleFoWProperties::fow_radius() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ParticleManager.SetParticleFoWProperties.fow_radius)
  return fow_radius_;
}
void CDOTAUserMsg_ParticleManager_SetParticleFoWProperties::set_fow_radius(float value) {
  set_has_fow_radius();
  fow_radius_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_ParticleManager.SetParticleFoWProperties.fow_radius)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_ParticleManager_SetParticleText::kTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_ParticleManager_SetParticleText::CDOTAUserMsg_ParticleManager_SetParticleText()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_ParticleManager.SetParticleText)
}
CDOTAUserMsg_ParticleManager_SetParticleText::CDOTAUserMsg_ParticleManager_SetParticleText(const CDOTAUserMsg_ParticleManager_SetParticleText& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text()) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_ParticleManager.SetParticleText)
}

void CDOTAUserMsg_ParticleManager_SetParticleText::SharedCtor() {
  _cached_size_ = 0;
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CDOTAUserMsg_ParticleManager_SetParticleText::~CDOTAUserMsg_ParticleManager_SetParticleText() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_ParticleManager.SetParticleText)
  SharedDtor();
}

void CDOTAUserMsg_ParticleManager_SetParticleText::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CDOTAUserMsg_ParticleManager_SetParticleText::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_ParticleManager_SetParticleText::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_ParticleManager_SetParticleText& CDOTAUserMsg_ParticleManager_SetParticleText::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_ParticleManager_SetParticleText* CDOTAUserMsg_ParticleManager_SetParticleText::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_ParticleManager_SetParticleText* n = new CDOTAUserMsg_ParticleManager_SetParticleText;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_ParticleManager_SetParticleText::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_ParticleManager.SetParticleText)
  if (has_text()) {
    GOOGLE_DCHECK(!text_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*text_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_ParticleManager_SetParticleText::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_ParticleManager.SetParticleText)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string text = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDOTAUserMsg_ParticleManager.SetParticleText.text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_ParticleManager.SetParticleText)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_ParticleManager.SetParticleText)
  return false;
#undef DO_
}

void CDOTAUserMsg_ParticleManager_SetParticleText::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_ParticleManager.SetParticleText)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAUserMsg_ParticleManager.SetParticleText.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->text(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_ParticleManager.SetParticleText)
}

::google::protobuf::uint8* CDOTAUserMsg_ParticleManager_SetParticleText::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_ParticleManager.SetParticleText)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAUserMsg_ParticleManager.SetParticleText.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->text(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_ParticleManager.SetParticleText)
  return target;
}

size_t CDOTAUserMsg_ParticleManager_SetParticleText::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_ParticleManager.SetParticleText)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional string text = 1;
  if (has_text()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_ParticleManager_SetParticleText::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_ParticleManager.SetParticleText)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_ParticleManager_SetParticleText* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_ParticleManager_SetParticleText>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_ParticleManager.SetParticleText)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_ParticleManager.SetParticleText)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_ParticleManager_SetParticleText::MergeFrom(const CDOTAUserMsg_ParticleManager_SetParticleText& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_ParticleManager.SetParticleText)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_text()) {
    set_has_text();
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
}

void CDOTAUserMsg_ParticleManager_SetParticleText::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_ParticleManager.SetParticleText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_ParticleManager_SetParticleText::CopyFrom(const CDOTAUserMsg_ParticleManager_SetParticleText& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_ParticleManager.SetParticleText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ParticleManager_SetParticleText::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_ParticleManager_SetParticleText::Swap(CDOTAUserMsg_ParticleManager_SetParticleText* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_ParticleManager_SetParticleText::InternalSwap(CDOTAUserMsg_ParticleManager_SetParticleText* other) {
  text_.Swap(&other->text_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_ParticleManager_SetParticleText::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_ParticleManager_SetParticleText

// optional string text = 1;
bool CDOTAUserMsg_ParticleManager_SetParticleText::has_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_ParticleManager_SetParticleText::set_has_text() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_ParticleManager_SetParticleText::clear_has_text() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_ParticleManager_SetParticleText::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text();
}
const ::std::string& CDOTAUserMsg_ParticleManager_SetParticleText::text() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ParticleManager.SetParticleText.text)
  return text_.GetNoArena();
}
void CDOTAUserMsg_ParticleManager_SetParticleText::set_text(const ::std::string& value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_ParticleManager.SetParticleText.text)
}
#if LANG_CXX11
void CDOTAUserMsg_ParticleManager_SetParticleText::set_text(::std::string&& value) {
  set_has_text();
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDOTAUserMsg_ParticleManager.SetParticleText.text)
}
#endif
void CDOTAUserMsg_ParticleManager_SetParticleText::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDOTAUserMsg_ParticleManager.SetParticleText.text)
}
void CDOTAUserMsg_ParticleManager_SetParticleText::set_text(const char* value, size_t size) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDOTAUserMsg_ParticleManager.SetParticleText.text)
}
::std::string* CDOTAUserMsg_ParticleManager_SetParticleText::mutable_text() {
  set_has_text();
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_ParticleManager.SetParticleText.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDOTAUserMsg_ParticleManager_SetParticleText::release_text() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAUserMsg_ParticleManager.SetParticleText.text)
  clear_has_text();
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDOTAUserMsg_ParticleManager_SetParticleText::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    set_has_text();
  } else {
    clear_has_text();
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAUserMsg_ParticleManager.SetParticleText.text)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_ParticleManager::kTypeFieldNumber;
const int CDOTAUserMsg_ParticleManager::kIndexFieldNumber;
const int CDOTAUserMsg_ParticleManager::kReleaseParticleIndexFieldNumber;
const int CDOTAUserMsg_ParticleManager::kCreateParticleFieldNumber;
const int CDOTAUserMsg_ParticleManager::kDestroyParticleFieldNumber;
const int CDOTAUserMsg_ParticleManager::kDestroyParticleInvolvingFieldNumber;
const int CDOTAUserMsg_ParticleManager::kUpdateParticleFieldNumber;
const int CDOTAUserMsg_ParticleManager::kUpdateParticleFwdFieldNumber;
const int CDOTAUserMsg_ParticleManager::kUpdateParticleOrientFieldNumber;
const int CDOTAUserMsg_ParticleManager::kUpdateParticleFallbackFieldNumber;
const int CDOTAUserMsg_ParticleManager::kUpdateParticleOffsetFieldNumber;
const int CDOTAUserMsg_ParticleManager::kUpdateParticleEntFieldNumber;
const int CDOTAUserMsg_ParticleManager::kUpdateParticleShouldDrawFieldNumber;
const int CDOTAUserMsg_ParticleManager::kUpdateParticleSetFrozenFieldNumber;
const int CDOTAUserMsg_ParticleManager::kChangeControlPointAttachmentFieldNumber;
const int CDOTAUserMsg_ParticleManager::kUpdateEntityPositionFieldNumber;
const int CDOTAUserMsg_ParticleManager::kSetParticleFowPropertiesFieldNumber;
const int CDOTAUserMsg_ParticleManager::kSetParticleTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_ParticleManager::CDOTAUserMsg_ParticleManager()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_ParticleManager)
}
CDOTAUserMsg_ParticleManager::CDOTAUserMsg_ParticleManager(const CDOTAUserMsg_ParticleManager& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_release_particle_index()) {
    release_particle_index_ = new ::proto::dota::CDOTAUserMsg_ParticleManager_ReleaseParticleIndex(*from.release_particle_index_);
  } else {
    release_particle_index_ = NULL;
  }
  if (from.has_create_particle()) {
    create_particle_ = new ::proto::dota::CDOTAUserMsg_ParticleManager_CreateParticle(*from.create_particle_);
  } else {
    create_particle_ = NULL;
  }
  if (from.has_destroy_particle()) {
    destroy_particle_ = new ::proto::dota::CDOTAUserMsg_ParticleManager_DestroyParticle(*from.destroy_particle_);
  } else {
    destroy_particle_ = NULL;
  }
  if (from.has_destroy_particle_involving()) {
    destroy_particle_involving_ = new ::proto::dota::CDOTAUserMsg_ParticleManager_DestroyParticleInvolving(*from.destroy_particle_involving_);
  } else {
    destroy_particle_involving_ = NULL;
  }
  if (from.has_update_particle()) {
    update_particle_ = new ::proto::dota::CDOTAUserMsg_ParticleManager_UpdateParticle(*from.update_particle_);
  } else {
    update_particle_ = NULL;
  }
  if (from.has_update_particle_fwd()) {
    update_particle_fwd_ = new ::proto::dota::CDOTAUserMsg_ParticleManager_UpdateParticleFwd(*from.update_particle_fwd_);
  } else {
    update_particle_fwd_ = NULL;
  }
  if (from.has_update_particle_orient()) {
    update_particle_orient_ = new ::proto::dota::CDOTAUserMsg_ParticleManager_UpdateParticleOrient(*from.update_particle_orient_);
  } else {
    update_particle_orient_ = NULL;
  }
  if (from.has_update_particle_fallback()) {
    update_particle_fallback_ = new ::proto::dota::CDOTAUserMsg_ParticleManager_UpdateParticleFallback(*from.update_particle_fallback_);
  } else {
    update_particle_fallback_ = NULL;
  }
  if (from.has_update_particle_offset()) {
    update_particle_offset_ = new ::proto::dota::CDOTAUserMsg_ParticleManager_UpdateParticleOffset(*from.update_particle_offset_);
  } else {
    update_particle_offset_ = NULL;
  }
  if (from.has_update_particle_ent()) {
    update_particle_ent_ = new ::proto::dota::CDOTAUserMsg_ParticleManager_UpdateParticleEnt(*from.update_particle_ent_);
  } else {
    update_particle_ent_ = NULL;
  }
  if (from.has_update_particle_should_draw()) {
    update_particle_should_draw_ = new ::proto::dota::CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw(*from.update_particle_should_draw_);
  } else {
    update_particle_should_draw_ = NULL;
  }
  if (from.has_update_particle_set_frozen()) {
    update_particle_set_frozen_ = new ::proto::dota::CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen(*from.update_particle_set_frozen_);
  } else {
    update_particle_set_frozen_ = NULL;
  }
  if (from.has_change_control_point_attachment()) {
    change_control_point_attachment_ = new ::proto::dota::CDOTAUserMsg_ParticleManager_ChangeControlPointAttachment(*from.change_control_point_attachment_);
  } else {
    change_control_point_attachment_ = NULL;
  }
  if (from.has_update_entity_position()) {
    update_entity_position_ = new ::proto::dota::CDOTAUserMsg_ParticleManager_UpdateEntityPosition(*from.update_entity_position_);
  } else {
    update_entity_position_ = NULL;
  }
  if (from.has_set_particle_fow_properties()) {
    set_particle_fow_properties_ = new ::proto::dota::CDOTAUserMsg_ParticleManager_SetParticleFoWProperties(*from.set_particle_fow_properties_);
  } else {
    set_particle_fow_properties_ = NULL;
  }
  if (from.has_set_particle_text()) {
    set_particle_text_ = new ::proto::dota::CDOTAUserMsg_ParticleManager_SetParticleText(*from.set_particle_text_);
  } else {
    set_particle_text_ = NULL;
  }
  ::memcpy(&type_, &from.type_,
    reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&type_) + sizeof(index_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_ParticleManager)
}

void CDOTAUserMsg_ParticleManager::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&release_particle_index_, 0, reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&release_particle_index_) + sizeof(index_));
}

CDOTAUserMsg_ParticleManager::~CDOTAUserMsg_ParticleManager() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_ParticleManager)
  SharedDtor();
}

void CDOTAUserMsg_ParticleManager::SharedDtor() {
  if (this != internal_default_instance()) {
    delete release_particle_index_;
  }
  if (this != internal_default_instance()) {
    delete create_particle_;
  }
  if (this != internal_default_instance()) {
    delete destroy_particle_;
  }
  if (this != internal_default_instance()) {
    delete destroy_particle_involving_;
  }
  if (this != internal_default_instance()) {
    delete update_particle_;
  }
  if (this != internal_default_instance()) {
    delete update_particle_fwd_;
  }
  if (this != internal_default_instance()) {
    delete update_particle_orient_;
  }
  if (this != internal_default_instance()) {
    delete update_particle_fallback_;
  }
  if (this != internal_default_instance()) {
    delete update_particle_offset_;
  }
  if (this != internal_default_instance()) {
    delete update_particle_ent_;
  }
  if (this != internal_default_instance()) {
    delete update_particle_should_draw_;
  }
  if (this != internal_default_instance()) {
    delete update_particle_set_frozen_;
  }
  if (this != internal_default_instance()) {
    delete change_control_point_attachment_;
  }
  if (this != internal_default_instance()) {
    delete update_entity_position_;
  }
  if (this != internal_default_instance()) {
    delete set_particle_fow_properties_;
  }
  if (this != internal_default_instance()) {
    delete set_particle_text_;
  }
}

void CDOTAUserMsg_ParticleManager::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_ParticleManager::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_ParticleManager& CDOTAUserMsg_ParticleManager::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_ParticleManager* CDOTAUserMsg_ParticleManager::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_ParticleManager* n = new CDOTAUserMsg_ParticleManager;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_ParticleManager::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_ParticleManager)
  if (_has_bits_[0 / 32] & 255u) {
    if (has_release_particle_index()) {
      GOOGLE_DCHECK(release_particle_index_ != NULL);
      release_particle_index_->::proto::dota::CDOTAUserMsg_ParticleManager_ReleaseParticleIndex::Clear();
    }
    if (has_create_particle()) {
      GOOGLE_DCHECK(create_particle_ != NULL);
      create_particle_->::proto::dota::CDOTAUserMsg_ParticleManager_CreateParticle::Clear();
    }
    if (has_destroy_particle()) {
      GOOGLE_DCHECK(destroy_particle_ != NULL);
      destroy_particle_->::proto::dota::CDOTAUserMsg_ParticleManager_DestroyParticle::Clear();
    }
    if (has_destroy_particle_involving()) {
      GOOGLE_DCHECK(destroy_particle_involving_ != NULL);
      destroy_particle_involving_->::proto::dota::CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::Clear();
    }
    if (has_update_particle()) {
      GOOGLE_DCHECK(update_particle_ != NULL);
      update_particle_->::proto::dota::CDOTAUserMsg_ParticleManager_UpdateParticle::Clear();
    }
    if (has_update_particle_fwd()) {
      GOOGLE_DCHECK(update_particle_fwd_ != NULL);
      update_particle_fwd_->::proto::dota::CDOTAUserMsg_ParticleManager_UpdateParticleFwd::Clear();
    }
    if (has_update_particle_orient()) {
      GOOGLE_DCHECK(update_particle_orient_ != NULL);
      update_particle_orient_->::proto::dota::CDOTAUserMsg_ParticleManager_UpdateParticleOrient::Clear();
    }
    if (has_update_particle_fallback()) {
      GOOGLE_DCHECK(update_particle_fallback_ != NULL);
      update_particle_fallback_->::proto::dota::CDOTAUserMsg_ParticleManager_UpdateParticleFallback::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280u) {
    if (has_update_particle_offset()) {
      GOOGLE_DCHECK(update_particle_offset_ != NULL);
      update_particle_offset_->::proto::dota::CDOTAUserMsg_ParticleManager_UpdateParticleOffset::Clear();
    }
    if (has_update_particle_ent()) {
      GOOGLE_DCHECK(update_particle_ent_ != NULL);
      update_particle_ent_->::proto::dota::CDOTAUserMsg_ParticleManager_UpdateParticleEnt::Clear();
    }
    if (has_update_particle_should_draw()) {
      GOOGLE_DCHECK(update_particle_should_draw_ != NULL);
      update_particle_should_draw_->::proto::dota::CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::Clear();
    }
    if (has_update_particle_set_frozen()) {
      GOOGLE_DCHECK(update_particle_set_frozen_ != NULL);
      update_particle_set_frozen_->::proto::dota::CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen::Clear();
    }
    if (has_change_control_point_attachment()) {
      GOOGLE_DCHECK(change_control_point_attachment_ != NULL);
      change_control_point_attachment_->::proto::dota::CDOTAUserMsg_ParticleManager_ChangeControlPointAttachment::Clear();
    }
    if (has_update_entity_position()) {
      GOOGLE_DCHECK(update_entity_position_ != NULL);
      update_entity_position_->::proto::dota::CDOTAUserMsg_ParticleManager_UpdateEntityPosition::Clear();
    }
    if (has_set_particle_fow_properties()) {
      GOOGLE_DCHECK(set_particle_fow_properties_ != NULL);
      set_particle_fow_properties_->::proto::dota::CDOTAUserMsg_ParticleManager_SetParticleFoWProperties::Clear();
    }
    if (has_set_particle_text()) {
      GOOGLE_DCHECK(set_particle_text_ != NULL);
      set_particle_text_->::proto::dota::CDOTAUserMsg_ParticleManager_SetParticleText::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 196608u) {
    ::memset(&type_, 0, reinterpret_cast<char*>(&index_) -
      reinterpret_cast<char*>(&type_) + sizeof(index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_ParticleManager::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_ParticleManager)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .proto.dota.DOTA_PARTICLE_MESSAGE type = 1 [default = DOTA_PARTICLE_MANAGER_EVENT_CREATE];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTA_PARTICLE_MESSAGE_IsValid(value)) {
            set_type(static_cast< ::proto::dota::DOTA_PARTICLE_MESSAGE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CDOTAUserMsg_ParticleManager.ReleaseParticleIndex release_particle_index = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_release_particle_index()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CDOTAUserMsg_ParticleManager.CreateParticle create_particle = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_create_particle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CDOTAUserMsg_ParticleManager.DestroyParticle destroy_particle = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_destroy_particle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CDOTAUserMsg_ParticleManager.DestroyParticleInvolving destroy_particle_involving = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_destroy_particle_involving()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticle update_particle = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update_particle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleFwd update_particle_fwd = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update_particle_fwd()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleOrient update_particle_orient = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update_particle_orient()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleFallback update_particle_fallback = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update_particle_fallback()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleOffset update_particle_offset = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update_particle_offset()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleEnt update_particle_ent = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update_particle_ent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleShouldDraw update_particle_should_draw = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update_particle_should_draw()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleSetFrozen update_particle_set_frozen = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update_particle_set_frozen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CDOTAUserMsg_ParticleManager.ChangeControlPointAttachment change_control_point_attachment = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_change_control_point_attachment()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CDOTAUserMsg_ParticleManager.UpdateEntityPosition update_entity_position = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update_entity_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CDOTAUserMsg_ParticleManager.SetParticleFoWProperties set_particle_fow_properties = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_set_particle_fow_properties()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CDOTAUserMsg_ParticleManager.SetParticleText set_particle_text = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_set_particle_text()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_ParticleManager)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_ParticleManager)
  return false;
#undef DO_
}

void CDOTAUserMsg_ParticleManager::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_ParticleManager)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .proto.dota.DOTA_PARTICLE_MESSAGE type = 1 [default = DOTA_PARTICLE_MANAGER_EVENT_CREATE];
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required uint32 index = 2;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->index(), output);
  }

  // optional .proto.dota.CDOTAUserMsg_ParticleManager.ReleaseParticleIndex release_particle_index = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->release_particle_index_, output);
  }

  // optional .proto.dota.CDOTAUserMsg_ParticleManager.CreateParticle create_particle = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->create_particle_, output);
  }

  // optional .proto.dota.CDOTAUserMsg_ParticleManager.DestroyParticle destroy_particle = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->destroy_particle_, output);
  }

  // optional .proto.dota.CDOTAUserMsg_ParticleManager.DestroyParticleInvolving destroy_particle_involving = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->destroy_particle_involving_, output);
  }

  // optional .proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticle update_particle = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->update_particle_, output);
  }

  // optional .proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleFwd update_particle_fwd = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->update_particle_fwd_, output);
  }

  // optional .proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleOrient update_particle_orient = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->update_particle_orient_, output);
  }

  // optional .proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleFallback update_particle_fallback = 10;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->update_particle_fallback_, output);
  }

  // optional .proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleOffset update_particle_offset = 11;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->update_particle_offset_, output);
  }

  // optional .proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleEnt update_particle_ent = 12;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->update_particle_ent_, output);
  }

  // optional .proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleShouldDraw update_particle_should_draw = 14;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->update_particle_should_draw_, output);
  }

  // optional .proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleSetFrozen update_particle_set_frozen = 15;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *this->update_particle_set_frozen_, output);
  }

  // optional .proto.dota.CDOTAUserMsg_ParticleManager.ChangeControlPointAttachment change_control_point_attachment = 16;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *this->change_control_point_attachment_, output);
  }

  // optional .proto.dota.CDOTAUserMsg_ParticleManager.UpdateEntityPosition update_entity_position = 17;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, *this->update_entity_position_, output);
  }

  // optional .proto.dota.CDOTAUserMsg_ParticleManager.SetParticleFoWProperties set_particle_fow_properties = 18;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, *this->set_particle_fow_properties_, output);
  }

  // optional .proto.dota.CDOTAUserMsg_ParticleManager.SetParticleText set_particle_text = 19;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, *this->set_particle_text_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_ParticleManager)
}

::google::protobuf::uint8* CDOTAUserMsg_ParticleManager::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_ParticleManager)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .proto.dota.DOTA_PARTICLE_MESSAGE type = 1 [default = DOTA_PARTICLE_MANAGER_EVENT_CREATE];
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required uint32 index = 2;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->index(), target);
  }

  // optional .proto.dota.CDOTAUserMsg_ParticleManager.ReleaseParticleIndex release_particle_index = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->release_particle_index_, deterministic, target);
  }

  // optional .proto.dota.CDOTAUserMsg_ParticleManager.CreateParticle create_particle = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->create_particle_, deterministic, target);
  }

  // optional .proto.dota.CDOTAUserMsg_ParticleManager.DestroyParticle destroy_particle = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->destroy_particle_, deterministic, target);
  }

  // optional .proto.dota.CDOTAUserMsg_ParticleManager.DestroyParticleInvolving destroy_particle_involving = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->destroy_particle_involving_, deterministic, target);
  }

  // optional .proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticle update_particle = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->update_particle_, deterministic, target);
  }

  // optional .proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleFwd update_particle_fwd = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->update_particle_fwd_, deterministic, target);
  }

  // optional .proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleOrient update_particle_orient = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->update_particle_orient_, deterministic, target);
  }

  // optional .proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleFallback update_particle_fallback = 10;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->update_particle_fallback_, deterministic, target);
  }

  // optional .proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleOffset update_particle_offset = 11;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->update_particle_offset_, deterministic, target);
  }

  // optional .proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleEnt update_particle_ent = 12;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->update_particle_ent_, deterministic, target);
  }

  // optional .proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleShouldDraw update_particle_should_draw = 14;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *this->update_particle_should_draw_, deterministic, target);
  }

  // optional .proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleSetFrozen update_particle_set_frozen = 15;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, *this->update_particle_set_frozen_, deterministic, target);
  }

  // optional .proto.dota.CDOTAUserMsg_ParticleManager.ChangeControlPointAttachment change_control_point_attachment = 16;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        16, *this->change_control_point_attachment_, deterministic, target);
  }

  // optional .proto.dota.CDOTAUserMsg_ParticleManager.UpdateEntityPosition update_entity_position = 17;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        17, *this->update_entity_position_, deterministic, target);
  }

  // optional .proto.dota.CDOTAUserMsg_ParticleManager.SetParticleFoWProperties set_particle_fow_properties = 18;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        18, *this->set_particle_fow_properties_, deterministic, target);
  }

  // optional .proto.dota.CDOTAUserMsg_ParticleManager.SetParticleText set_particle_text = 19;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        19, *this->set_particle_text_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_ParticleManager)
  return target;
}

size_t CDOTAUserMsg_ParticleManager::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:proto.dota.CDOTAUserMsg_ParticleManager)
  size_t total_size = 0;

  if (has_type()) {
    // required .proto.dota.DOTA_PARTICLE_MESSAGE type = 1 [default = DOTA_PARTICLE_MANAGER_EVENT_CREATE];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  if (has_index()) {
    // required uint32 index = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->index());
  }

  return total_size;
}
size_t CDOTAUserMsg_ParticleManager::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_ParticleManager)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00030000) ^ 0x00030000) == 0) {  // All required fields are present.
    // required .proto.dota.DOTA_PARTICLE_MESSAGE type = 1 [default = DOTA_PARTICLE_MANAGER_EVENT_CREATE];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());

    // required uint32 index = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->index());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .proto.dota.CDOTAUserMsg_ParticleManager.ReleaseParticleIndex release_particle_index = 3;
    if (has_release_particle_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->release_particle_index_);
    }

    // optional .proto.dota.CDOTAUserMsg_ParticleManager.CreateParticle create_particle = 4;
    if (has_create_particle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->create_particle_);
    }

    // optional .proto.dota.CDOTAUserMsg_ParticleManager.DestroyParticle destroy_particle = 5;
    if (has_destroy_particle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->destroy_particle_);
    }

    // optional .proto.dota.CDOTAUserMsg_ParticleManager.DestroyParticleInvolving destroy_particle_involving = 6;
    if (has_destroy_particle_involving()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->destroy_particle_involving_);
    }

    // optional .proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticle update_particle = 7;
    if (has_update_particle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->update_particle_);
    }

    // optional .proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleFwd update_particle_fwd = 8;
    if (has_update_particle_fwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->update_particle_fwd_);
    }

    // optional .proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleOrient update_particle_orient = 9;
    if (has_update_particle_orient()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->update_particle_orient_);
    }

    // optional .proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleFallback update_particle_fallback = 10;
    if (has_update_particle_fallback()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->update_particle_fallback_);
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional .proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleOffset update_particle_offset = 11;
    if (has_update_particle_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->update_particle_offset_);
    }

    // optional .proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleEnt update_particle_ent = 12;
    if (has_update_particle_ent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->update_particle_ent_);
    }

    // optional .proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleShouldDraw update_particle_should_draw = 14;
    if (has_update_particle_should_draw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->update_particle_should_draw_);
    }

    // optional .proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleSetFrozen update_particle_set_frozen = 15;
    if (has_update_particle_set_frozen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->update_particle_set_frozen_);
    }

    // optional .proto.dota.CDOTAUserMsg_ParticleManager.ChangeControlPointAttachment change_control_point_attachment = 16;
    if (has_change_control_point_attachment()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->change_control_point_attachment_);
    }

    // optional .proto.dota.CDOTAUserMsg_ParticleManager.UpdateEntityPosition update_entity_position = 17;
    if (has_update_entity_position()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->update_entity_position_);
    }

    // optional .proto.dota.CDOTAUserMsg_ParticleManager.SetParticleFoWProperties set_particle_fow_properties = 18;
    if (has_set_particle_fow_properties()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->set_particle_fow_properties_);
    }

    // optional .proto.dota.CDOTAUserMsg_ParticleManager.SetParticleText set_particle_text = 19;
    if (has_set_particle_text()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->set_particle_text_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_ParticleManager::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_ParticleManager)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_ParticleManager* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_ParticleManager>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_ParticleManager)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_ParticleManager)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_ParticleManager::MergeFrom(const CDOTAUserMsg_ParticleManager& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_ParticleManager)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_release_particle_index()->::proto::dota::CDOTAUserMsg_ParticleManager_ReleaseParticleIndex::MergeFrom(from.release_particle_index());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_create_particle()->::proto::dota::CDOTAUserMsg_ParticleManager_CreateParticle::MergeFrom(from.create_particle());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_destroy_particle()->::proto::dota::CDOTAUserMsg_ParticleManager_DestroyParticle::MergeFrom(from.destroy_particle());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_destroy_particle_involving()->::proto::dota::CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::MergeFrom(from.destroy_particle_involving());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_update_particle()->::proto::dota::CDOTAUserMsg_ParticleManager_UpdateParticle::MergeFrom(from.update_particle());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_update_particle_fwd()->::proto::dota::CDOTAUserMsg_ParticleManager_UpdateParticleFwd::MergeFrom(from.update_particle_fwd());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_update_particle_orient()->::proto::dota::CDOTAUserMsg_ParticleManager_UpdateParticleOrient::MergeFrom(from.update_particle_orient());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_update_particle_fallback()->::proto::dota::CDOTAUserMsg_ParticleManager_UpdateParticleFallback::MergeFrom(from.update_particle_fallback());
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_update_particle_offset()->::proto::dota::CDOTAUserMsg_ParticleManager_UpdateParticleOffset::MergeFrom(from.update_particle_offset());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_update_particle_ent()->::proto::dota::CDOTAUserMsg_ParticleManager_UpdateParticleEnt::MergeFrom(from.update_particle_ent());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_update_particle_should_draw()->::proto::dota::CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::MergeFrom(from.update_particle_should_draw());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_update_particle_set_frozen()->::proto::dota::CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen::MergeFrom(from.update_particle_set_frozen());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_change_control_point_attachment()->::proto::dota::CDOTAUserMsg_ParticleManager_ChangeControlPointAttachment::MergeFrom(from.change_control_point_attachment());
    }
    if (cached_has_bits & 0x00002000u) {
      mutable_update_entity_position()->::proto::dota::CDOTAUserMsg_ParticleManager_UpdateEntityPosition::MergeFrom(from.update_entity_position());
    }
    if (cached_has_bits & 0x00004000u) {
      mutable_set_particle_fow_properties()->::proto::dota::CDOTAUserMsg_ParticleManager_SetParticleFoWProperties::MergeFrom(from.set_particle_fow_properties());
    }
    if (cached_has_bits & 0x00008000u) {
      mutable_set_particle_text()->::proto::dota::CDOTAUserMsg_ParticleManager_SetParticleText::MergeFrom(from.set_particle_text());
    }
  }
  if (cached_has_bits & 196608u) {
    if (cached_has_bits & 0x00010000u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00020000u) {
      index_ = from.index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_ParticleManager::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_ParticleManager)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_ParticleManager::CopyFrom(const CDOTAUserMsg_ParticleManager& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_ParticleManager)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ParticleManager::IsInitialized() const {
  if ((_has_bits_[0] & 0x00030000) != 0x00030000) return false;
  return true;
}

void CDOTAUserMsg_ParticleManager::Swap(CDOTAUserMsg_ParticleManager* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_ParticleManager::InternalSwap(CDOTAUserMsg_ParticleManager* other) {
  std::swap(release_particle_index_, other->release_particle_index_);
  std::swap(create_particle_, other->create_particle_);
  std::swap(destroy_particle_, other->destroy_particle_);
  std::swap(destroy_particle_involving_, other->destroy_particle_involving_);
  std::swap(update_particle_, other->update_particle_);
  std::swap(update_particle_fwd_, other->update_particle_fwd_);
  std::swap(update_particle_orient_, other->update_particle_orient_);
  std::swap(update_particle_fallback_, other->update_particle_fallback_);
  std::swap(update_particle_offset_, other->update_particle_offset_);
  std::swap(update_particle_ent_, other->update_particle_ent_);
  std::swap(update_particle_should_draw_, other->update_particle_should_draw_);
  std::swap(update_particle_set_frozen_, other->update_particle_set_frozen_);
  std::swap(change_control_point_attachment_, other->change_control_point_attachment_);
  std::swap(update_entity_position_, other->update_entity_position_);
  std::swap(set_particle_fow_properties_, other->set_particle_fow_properties_);
  std::swap(set_particle_text_, other->set_particle_text_);
  std::swap(type_, other->type_);
  std::swap(index_, other->index_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_ParticleManager::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_ParticleManager

// required .proto.dota.DOTA_PARTICLE_MESSAGE type = 1 [default = DOTA_PARTICLE_MANAGER_EVENT_CREATE];
bool CDOTAUserMsg_ParticleManager::has_type() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void CDOTAUserMsg_ParticleManager::set_has_type() {
  _has_bits_[0] |= 0x00010000u;
}
void CDOTAUserMsg_ParticleManager::clear_has_type() {
  _has_bits_[0] &= ~0x00010000u;
}
void CDOTAUserMsg_ParticleManager::clear_type() {
  type_ = 0;
  clear_has_type();
}
::proto::dota::DOTA_PARTICLE_MESSAGE CDOTAUserMsg_ParticleManager::type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ParticleManager.type)
  return static_cast< ::proto::dota::DOTA_PARTICLE_MESSAGE >(type_);
}
void CDOTAUserMsg_ParticleManager::set_type(::proto::dota::DOTA_PARTICLE_MESSAGE value) {
  assert(::proto::dota::DOTA_PARTICLE_MESSAGE_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_ParticleManager.type)
}

// required uint32 index = 2;
bool CDOTAUserMsg_ParticleManager::has_index() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void CDOTAUserMsg_ParticleManager::set_has_index() {
  _has_bits_[0] |= 0x00020000u;
}
void CDOTAUserMsg_ParticleManager::clear_has_index() {
  _has_bits_[0] &= ~0x00020000u;
}
void CDOTAUserMsg_ParticleManager::clear_index() {
  index_ = 0u;
  clear_has_index();
}
::google::protobuf::uint32 CDOTAUserMsg_ParticleManager::index() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ParticleManager.index)
  return index_;
}
void CDOTAUserMsg_ParticleManager::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_ParticleManager.index)
}

// optional .proto.dota.CDOTAUserMsg_ParticleManager.ReleaseParticleIndex release_particle_index = 3;
bool CDOTAUserMsg_ParticleManager::has_release_particle_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_ParticleManager::set_has_release_particle_index() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_ParticleManager::clear_has_release_particle_index() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_ParticleManager::clear_release_particle_index() {
  if (release_particle_index_ != NULL) release_particle_index_->::proto::dota::CDOTAUserMsg_ParticleManager_ReleaseParticleIndex::Clear();
  clear_has_release_particle_index();
}
const ::proto::dota::CDOTAUserMsg_ParticleManager_ReleaseParticleIndex& CDOTAUserMsg_ParticleManager::release_particle_index() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ParticleManager.release_particle_index)
  return release_particle_index_ != NULL ? *release_particle_index_
                         : *::proto::dota::CDOTAUserMsg_ParticleManager_ReleaseParticleIndex::internal_default_instance();
}
::proto::dota::CDOTAUserMsg_ParticleManager_ReleaseParticleIndex* CDOTAUserMsg_ParticleManager::mutable_release_particle_index() {
  set_has_release_particle_index();
  if (release_particle_index_ == NULL) {
    release_particle_index_ = new ::proto::dota::CDOTAUserMsg_ParticleManager_ReleaseParticleIndex;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_ParticleManager.release_particle_index)
  return release_particle_index_;
}
::proto::dota::CDOTAUserMsg_ParticleManager_ReleaseParticleIndex* CDOTAUserMsg_ParticleManager::release_release_particle_index() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAUserMsg_ParticleManager.release_particle_index)
  clear_has_release_particle_index();
  ::proto::dota::CDOTAUserMsg_ParticleManager_ReleaseParticleIndex* temp = release_particle_index_;
  release_particle_index_ = NULL;
  return temp;
}
void CDOTAUserMsg_ParticleManager::set_allocated_release_particle_index(::proto::dota::CDOTAUserMsg_ParticleManager_ReleaseParticleIndex* release_particle_index) {
  delete release_particle_index_;
  release_particle_index_ = release_particle_index;
  if (release_particle_index) {
    set_has_release_particle_index();
  } else {
    clear_has_release_particle_index();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAUserMsg_ParticleManager.release_particle_index)
}

// optional .proto.dota.CDOTAUserMsg_ParticleManager.CreateParticle create_particle = 4;
bool CDOTAUserMsg_ParticleManager::has_create_particle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAUserMsg_ParticleManager::set_has_create_particle() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAUserMsg_ParticleManager::clear_has_create_particle() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAUserMsg_ParticleManager::clear_create_particle() {
  if (create_particle_ != NULL) create_particle_->::proto::dota::CDOTAUserMsg_ParticleManager_CreateParticle::Clear();
  clear_has_create_particle();
}
const ::proto::dota::CDOTAUserMsg_ParticleManager_CreateParticle& CDOTAUserMsg_ParticleManager::create_particle() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ParticleManager.create_particle)
  return create_particle_ != NULL ? *create_particle_
                         : *::proto::dota::CDOTAUserMsg_ParticleManager_CreateParticle::internal_default_instance();
}
::proto::dota::CDOTAUserMsg_ParticleManager_CreateParticle* CDOTAUserMsg_ParticleManager::mutable_create_particle() {
  set_has_create_particle();
  if (create_particle_ == NULL) {
    create_particle_ = new ::proto::dota::CDOTAUserMsg_ParticleManager_CreateParticle;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_ParticleManager.create_particle)
  return create_particle_;
}
::proto::dota::CDOTAUserMsg_ParticleManager_CreateParticle* CDOTAUserMsg_ParticleManager::release_create_particle() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAUserMsg_ParticleManager.create_particle)
  clear_has_create_particle();
  ::proto::dota::CDOTAUserMsg_ParticleManager_CreateParticle* temp = create_particle_;
  create_particle_ = NULL;
  return temp;
}
void CDOTAUserMsg_ParticleManager::set_allocated_create_particle(::proto::dota::CDOTAUserMsg_ParticleManager_CreateParticle* create_particle) {
  delete create_particle_;
  create_particle_ = create_particle;
  if (create_particle) {
    set_has_create_particle();
  } else {
    clear_has_create_particle();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAUserMsg_ParticleManager.create_particle)
}

// optional .proto.dota.CDOTAUserMsg_ParticleManager.DestroyParticle destroy_particle = 5;
bool CDOTAUserMsg_ParticleManager::has_destroy_particle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDOTAUserMsg_ParticleManager::set_has_destroy_particle() {
  _has_bits_[0] |= 0x00000004u;
}
void CDOTAUserMsg_ParticleManager::clear_has_destroy_particle() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDOTAUserMsg_ParticleManager::clear_destroy_particle() {
  if (destroy_particle_ != NULL) destroy_particle_->::proto::dota::CDOTAUserMsg_ParticleManager_DestroyParticle::Clear();
  clear_has_destroy_particle();
}
const ::proto::dota::CDOTAUserMsg_ParticleManager_DestroyParticle& CDOTAUserMsg_ParticleManager::destroy_particle() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ParticleManager.destroy_particle)
  return destroy_particle_ != NULL ? *destroy_particle_
                         : *::proto::dota::CDOTAUserMsg_ParticleManager_DestroyParticle::internal_default_instance();
}
::proto::dota::CDOTAUserMsg_ParticleManager_DestroyParticle* CDOTAUserMsg_ParticleManager::mutable_destroy_particle() {
  set_has_destroy_particle();
  if (destroy_particle_ == NULL) {
    destroy_particle_ = new ::proto::dota::CDOTAUserMsg_ParticleManager_DestroyParticle;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_ParticleManager.destroy_particle)
  return destroy_particle_;
}
::proto::dota::CDOTAUserMsg_ParticleManager_DestroyParticle* CDOTAUserMsg_ParticleManager::release_destroy_particle() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAUserMsg_ParticleManager.destroy_particle)
  clear_has_destroy_particle();
  ::proto::dota::CDOTAUserMsg_ParticleManager_DestroyParticle* temp = destroy_particle_;
  destroy_particle_ = NULL;
  return temp;
}
void CDOTAUserMsg_ParticleManager::set_allocated_destroy_particle(::proto::dota::CDOTAUserMsg_ParticleManager_DestroyParticle* destroy_particle) {
  delete destroy_particle_;
  destroy_particle_ = destroy_particle;
  if (destroy_particle) {
    set_has_destroy_particle();
  } else {
    clear_has_destroy_particle();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAUserMsg_ParticleManager.destroy_particle)
}

// optional .proto.dota.CDOTAUserMsg_ParticleManager.DestroyParticleInvolving destroy_particle_involving = 6;
bool CDOTAUserMsg_ParticleManager::has_destroy_particle_involving() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CDOTAUserMsg_ParticleManager::set_has_destroy_particle_involving() {
  _has_bits_[0] |= 0x00000008u;
}
void CDOTAUserMsg_ParticleManager::clear_has_destroy_particle_involving() {
  _has_bits_[0] &= ~0x00000008u;
}
void CDOTAUserMsg_ParticleManager::clear_destroy_particle_involving() {
  if (destroy_particle_involving_ != NULL) destroy_particle_involving_->::proto::dota::CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::Clear();
  clear_has_destroy_particle_involving();
}
const ::proto::dota::CDOTAUserMsg_ParticleManager_DestroyParticleInvolving& CDOTAUserMsg_ParticleManager::destroy_particle_involving() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ParticleManager.destroy_particle_involving)
  return destroy_particle_involving_ != NULL ? *destroy_particle_involving_
                         : *::proto::dota::CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::internal_default_instance();
}
::proto::dota::CDOTAUserMsg_ParticleManager_DestroyParticleInvolving* CDOTAUserMsg_ParticleManager::mutable_destroy_particle_involving() {
  set_has_destroy_particle_involving();
  if (destroy_particle_involving_ == NULL) {
    destroy_particle_involving_ = new ::proto::dota::CDOTAUserMsg_ParticleManager_DestroyParticleInvolving;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_ParticleManager.destroy_particle_involving)
  return destroy_particle_involving_;
}
::proto::dota::CDOTAUserMsg_ParticleManager_DestroyParticleInvolving* CDOTAUserMsg_ParticleManager::release_destroy_particle_involving() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAUserMsg_ParticleManager.destroy_particle_involving)
  clear_has_destroy_particle_involving();
  ::proto::dota::CDOTAUserMsg_ParticleManager_DestroyParticleInvolving* temp = destroy_particle_involving_;
  destroy_particle_involving_ = NULL;
  return temp;
}
void CDOTAUserMsg_ParticleManager::set_allocated_destroy_particle_involving(::proto::dota::CDOTAUserMsg_ParticleManager_DestroyParticleInvolving* destroy_particle_involving) {
  delete destroy_particle_involving_;
  destroy_particle_involving_ = destroy_particle_involving;
  if (destroy_particle_involving) {
    set_has_destroy_particle_involving();
  } else {
    clear_has_destroy_particle_involving();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAUserMsg_ParticleManager.destroy_particle_involving)
}

// optional .proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticle update_particle = 7;
bool CDOTAUserMsg_ParticleManager::has_update_particle() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CDOTAUserMsg_ParticleManager::set_has_update_particle() {
  _has_bits_[0] |= 0x00000010u;
}
void CDOTAUserMsg_ParticleManager::clear_has_update_particle() {
  _has_bits_[0] &= ~0x00000010u;
}
void CDOTAUserMsg_ParticleManager::clear_update_particle() {
  if (update_particle_ != NULL) update_particle_->::proto::dota::CDOTAUserMsg_ParticleManager_UpdateParticle::Clear();
  clear_has_update_particle();
}
const ::proto::dota::CDOTAUserMsg_ParticleManager_UpdateParticle& CDOTAUserMsg_ParticleManager::update_particle() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ParticleManager.update_particle)
  return update_particle_ != NULL ? *update_particle_
                         : *::proto::dota::CDOTAUserMsg_ParticleManager_UpdateParticle::internal_default_instance();
}
::proto::dota::CDOTAUserMsg_ParticleManager_UpdateParticle* CDOTAUserMsg_ParticleManager::mutable_update_particle() {
  set_has_update_particle();
  if (update_particle_ == NULL) {
    update_particle_ = new ::proto::dota::CDOTAUserMsg_ParticleManager_UpdateParticle;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_ParticleManager.update_particle)
  return update_particle_;
}
::proto::dota::CDOTAUserMsg_ParticleManager_UpdateParticle* CDOTAUserMsg_ParticleManager::release_update_particle() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAUserMsg_ParticleManager.update_particle)
  clear_has_update_particle();
  ::proto::dota::CDOTAUserMsg_ParticleManager_UpdateParticle* temp = update_particle_;
  update_particle_ = NULL;
  return temp;
}
void CDOTAUserMsg_ParticleManager::set_allocated_update_particle(::proto::dota::CDOTAUserMsg_ParticleManager_UpdateParticle* update_particle) {
  delete update_particle_;
  update_particle_ = update_particle;
  if (update_particle) {
    set_has_update_particle();
  } else {
    clear_has_update_particle();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAUserMsg_ParticleManager.update_particle)
}

// optional .proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleFwd update_particle_fwd = 8;
bool CDOTAUserMsg_ParticleManager::has_update_particle_fwd() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CDOTAUserMsg_ParticleManager::set_has_update_particle_fwd() {
  _has_bits_[0] |= 0x00000020u;
}
void CDOTAUserMsg_ParticleManager::clear_has_update_particle_fwd() {
  _has_bits_[0] &= ~0x00000020u;
}
void CDOTAUserMsg_ParticleManager::clear_update_particle_fwd() {
  if (update_particle_fwd_ != NULL) update_particle_fwd_->::proto::dota::CDOTAUserMsg_ParticleManager_UpdateParticleFwd::Clear();
  clear_has_update_particle_fwd();
}
const ::proto::dota::CDOTAUserMsg_ParticleManager_UpdateParticleFwd& CDOTAUserMsg_ParticleManager::update_particle_fwd() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ParticleManager.update_particle_fwd)
  return update_particle_fwd_ != NULL ? *update_particle_fwd_
                         : *::proto::dota::CDOTAUserMsg_ParticleManager_UpdateParticleFwd::internal_default_instance();
}
::proto::dota::CDOTAUserMsg_ParticleManager_UpdateParticleFwd* CDOTAUserMsg_ParticleManager::mutable_update_particle_fwd() {
  set_has_update_particle_fwd();
  if (update_particle_fwd_ == NULL) {
    update_particle_fwd_ = new ::proto::dota::CDOTAUserMsg_ParticleManager_UpdateParticleFwd;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_ParticleManager.update_particle_fwd)
  return update_particle_fwd_;
}
::proto::dota::CDOTAUserMsg_ParticleManager_UpdateParticleFwd* CDOTAUserMsg_ParticleManager::release_update_particle_fwd() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAUserMsg_ParticleManager.update_particle_fwd)
  clear_has_update_particle_fwd();
  ::proto::dota::CDOTAUserMsg_ParticleManager_UpdateParticleFwd* temp = update_particle_fwd_;
  update_particle_fwd_ = NULL;
  return temp;
}
void CDOTAUserMsg_ParticleManager::set_allocated_update_particle_fwd(::proto::dota::CDOTAUserMsg_ParticleManager_UpdateParticleFwd* update_particle_fwd) {
  delete update_particle_fwd_;
  update_particle_fwd_ = update_particle_fwd;
  if (update_particle_fwd) {
    set_has_update_particle_fwd();
  } else {
    clear_has_update_particle_fwd();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAUserMsg_ParticleManager.update_particle_fwd)
}

// optional .proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleOrient update_particle_orient = 9;
bool CDOTAUserMsg_ParticleManager::has_update_particle_orient() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CDOTAUserMsg_ParticleManager::set_has_update_particle_orient() {
  _has_bits_[0] |= 0x00000040u;
}
void CDOTAUserMsg_ParticleManager::clear_has_update_particle_orient() {
  _has_bits_[0] &= ~0x00000040u;
}
void CDOTAUserMsg_ParticleManager::clear_update_particle_orient() {
  if (update_particle_orient_ != NULL) update_particle_orient_->::proto::dota::CDOTAUserMsg_ParticleManager_UpdateParticleOrient::Clear();
  clear_has_update_particle_orient();
}
const ::proto::dota::CDOTAUserMsg_ParticleManager_UpdateParticleOrient& CDOTAUserMsg_ParticleManager::update_particle_orient() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ParticleManager.update_particle_orient)
  return update_particle_orient_ != NULL ? *update_particle_orient_
                         : *::proto::dota::CDOTAUserMsg_ParticleManager_UpdateParticleOrient::internal_default_instance();
}
::proto::dota::CDOTAUserMsg_ParticleManager_UpdateParticleOrient* CDOTAUserMsg_ParticleManager::mutable_update_particle_orient() {
  set_has_update_particle_orient();
  if (update_particle_orient_ == NULL) {
    update_particle_orient_ = new ::proto::dota::CDOTAUserMsg_ParticleManager_UpdateParticleOrient;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_ParticleManager.update_particle_orient)
  return update_particle_orient_;
}
::proto::dota::CDOTAUserMsg_ParticleManager_UpdateParticleOrient* CDOTAUserMsg_ParticleManager::release_update_particle_orient() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAUserMsg_ParticleManager.update_particle_orient)
  clear_has_update_particle_orient();
  ::proto::dota::CDOTAUserMsg_ParticleManager_UpdateParticleOrient* temp = update_particle_orient_;
  update_particle_orient_ = NULL;
  return temp;
}
void CDOTAUserMsg_ParticleManager::set_allocated_update_particle_orient(::proto::dota::CDOTAUserMsg_ParticleManager_UpdateParticleOrient* update_particle_orient) {
  delete update_particle_orient_;
  update_particle_orient_ = update_particle_orient;
  if (update_particle_orient) {
    set_has_update_particle_orient();
  } else {
    clear_has_update_particle_orient();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAUserMsg_ParticleManager.update_particle_orient)
}

// optional .proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleFallback update_particle_fallback = 10;
bool CDOTAUserMsg_ParticleManager::has_update_particle_fallback() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CDOTAUserMsg_ParticleManager::set_has_update_particle_fallback() {
  _has_bits_[0] |= 0x00000080u;
}
void CDOTAUserMsg_ParticleManager::clear_has_update_particle_fallback() {
  _has_bits_[0] &= ~0x00000080u;
}
void CDOTAUserMsg_ParticleManager::clear_update_particle_fallback() {
  if (update_particle_fallback_ != NULL) update_particle_fallback_->::proto::dota::CDOTAUserMsg_ParticleManager_UpdateParticleFallback::Clear();
  clear_has_update_particle_fallback();
}
const ::proto::dota::CDOTAUserMsg_ParticleManager_UpdateParticleFallback& CDOTAUserMsg_ParticleManager::update_particle_fallback() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ParticleManager.update_particle_fallback)
  return update_particle_fallback_ != NULL ? *update_particle_fallback_
                         : *::proto::dota::CDOTAUserMsg_ParticleManager_UpdateParticleFallback::internal_default_instance();
}
::proto::dota::CDOTAUserMsg_ParticleManager_UpdateParticleFallback* CDOTAUserMsg_ParticleManager::mutable_update_particle_fallback() {
  set_has_update_particle_fallback();
  if (update_particle_fallback_ == NULL) {
    update_particle_fallback_ = new ::proto::dota::CDOTAUserMsg_ParticleManager_UpdateParticleFallback;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_ParticleManager.update_particle_fallback)
  return update_particle_fallback_;
}
::proto::dota::CDOTAUserMsg_ParticleManager_UpdateParticleFallback* CDOTAUserMsg_ParticleManager::release_update_particle_fallback() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAUserMsg_ParticleManager.update_particle_fallback)
  clear_has_update_particle_fallback();
  ::proto::dota::CDOTAUserMsg_ParticleManager_UpdateParticleFallback* temp = update_particle_fallback_;
  update_particle_fallback_ = NULL;
  return temp;
}
void CDOTAUserMsg_ParticleManager::set_allocated_update_particle_fallback(::proto::dota::CDOTAUserMsg_ParticleManager_UpdateParticleFallback* update_particle_fallback) {
  delete update_particle_fallback_;
  update_particle_fallback_ = update_particle_fallback;
  if (update_particle_fallback) {
    set_has_update_particle_fallback();
  } else {
    clear_has_update_particle_fallback();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAUserMsg_ParticleManager.update_particle_fallback)
}

// optional .proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleOffset update_particle_offset = 11;
bool CDOTAUserMsg_ParticleManager::has_update_particle_offset() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CDOTAUserMsg_ParticleManager::set_has_update_particle_offset() {
  _has_bits_[0] |= 0x00000100u;
}
void CDOTAUserMsg_ParticleManager::clear_has_update_particle_offset() {
  _has_bits_[0] &= ~0x00000100u;
}
void CDOTAUserMsg_ParticleManager::clear_update_particle_offset() {
  if (update_particle_offset_ != NULL) update_particle_offset_->::proto::dota::CDOTAUserMsg_ParticleManager_UpdateParticleOffset::Clear();
  clear_has_update_particle_offset();
}
const ::proto::dota::CDOTAUserMsg_ParticleManager_UpdateParticleOffset& CDOTAUserMsg_ParticleManager::update_particle_offset() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ParticleManager.update_particle_offset)
  return update_particle_offset_ != NULL ? *update_particle_offset_
                         : *::proto::dota::CDOTAUserMsg_ParticleManager_UpdateParticleOffset::internal_default_instance();
}
::proto::dota::CDOTAUserMsg_ParticleManager_UpdateParticleOffset* CDOTAUserMsg_ParticleManager::mutable_update_particle_offset() {
  set_has_update_particle_offset();
  if (update_particle_offset_ == NULL) {
    update_particle_offset_ = new ::proto::dota::CDOTAUserMsg_ParticleManager_UpdateParticleOffset;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_ParticleManager.update_particle_offset)
  return update_particle_offset_;
}
::proto::dota::CDOTAUserMsg_ParticleManager_UpdateParticleOffset* CDOTAUserMsg_ParticleManager::release_update_particle_offset() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAUserMsg_ParticleManager.update_particle_offset)
  clear_has_update_particle_offset();
  ::proto::dota::CDOTAUserMsg_ParticleManager_UpdateParticleOffset* temp = update_particle_offset_;
  update_particle_offset_ = NULL;
  return temp;
}
void CDOTAUserMsg_ParticleManager::set_allocated_update_particle_offset(::proto::dota::CDOTAUserMsg_ParticleManager_UpdateParticleOffset* update_particle_offset) {
  delete update_particle_offset_;
  update_particle_offset_ = update_particle_offset;
  if (update_particle_offset) {
    set_has_update_particle_offset();
  } else {
    clear_has_update_particle_offset();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAUserMsg_ParticleManager.update_particle_offset)
}

// optional .proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleEnt update_particle_ent = 12;
bool CDOTAUserMsg_ParticleManager::has_update_particle_ent() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CDOTAUserMsg_ParticleManager::set_has_update_particle_ent() {
  _has_bits_[0] |= 0x00000200u;
}
void CDOTAUserMsg_ParticleManager::clear_has_update_particle_ent() {
  _has_bits_[0] &= ~0x00000200u;
}
void CDOTAUserMsg_ParticleManager::clear_update_particle_ent() {
  if (update_particle_ent_ != NULL) update_particle_ent_->::proto::dota::CDOTAUserMsg_ParticleManager_UpdateParticleEnt::Clear();
  clear_has_update_particle_ent();
}
const ::proto::dota::CDOTAUserMsg_ParticleManager_UpdateParticleEnt& CDOTAUserMsg_ParticleManager::update_particle_ent() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ParticleManager.update_particle_ent)
  return update_particle_ent_ != NULL ? *update_particle_ent_
                         : *::proto::dota::CDOTAUserMsg_ParticleManager_UpdateParticleEnt::internal_default_instance();
}
::proto::dota::CDOTAUserMsg_ParticleManager_UpdateParticleEnt* CDOTAUserMsg_ParticleManager::mutable_update_particle_ent() {
  set_has_update_particle_ent();
  if (update_particle_ent_ == NULL) {
    update_particle_ent_ = new ::proto::dota::CDOTAUserMsg_ParticleManager_UpdateParticleEnt;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_ParticleManager.update_particle_ent)
  return update_particle_ent_;
}
::proto::dota::CDOTAUserMsg_ParticleManager_UpdateParticleEnt* CDOTAUserMsg_ParticleManager::release_update_particle_ent() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAUserMsg_ParticleManager.update_particle_ent)
  clear_has_update_particle_ent();
  ::proto::dota::CDOTAUserMsg_ParticleManager_UpdateParticleEnt* temp = update_particle_ent_;
  update_particle_ent_ = NULL;
  return temp;
}
void CDOTAUserMsg_ParticleManager::set_allocated_update_particle_ent(::proto::dota::CDOTAUserMsg_ParticleManager_UpdateParticleEnt* update_particle_ent) {
  delete update_particle_ent_;
  update_particle_ent_ = update_particle_ent;
  if (update_particle_ent) {
    set_has_update_particle_ent();
  } else {
    clear_has_update_particle_ent();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAUserMsg_ParticleManager.update_particle_ent)
}

// optional .proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleShouldDraw update_particle_should_draw = 14;
bool CDOTAUserMsg_ParticleManager::has_update_particle_should_draw() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CDOTAUserMsg_ParticleManager::set_has_update_particle_should_draw() {
  _has_bits_[0] |= 0x00000400u;
}
void CDOTAUserMsg_ParticleManager::clear_has_update_particle_should_draw() {
  _has_bits_[0] &= ~0x00000400u;
}
void CDOTAUserMsg_ParticleManager::clear_update_particle_should_draw() {
  if (update_particle_should_draw_ != NULL) update_particle_should_draw_->::proto::dota::CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::Clear();
  clear_has_update_particle_should_draw();
}
const ::proto::dota::CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw& CDOTAUserMsg_ParticleManager::update_particle_should_draw() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ParticleManager.update_particle_should_draw)
  return update_particle_should_draw_ != NULL ? *update_particle_should_draw_
                         : *::proto::dota::CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::internal_default_instance();
}
::proto::dota::CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw* CDOTAUserMsg_ParticleManager::mutable_update_particle_should_draw() {
  set_has_update_particle_should_draw();
  if (update_particle_should_draw_ == NULL) {
    update_particle_should_draw_ = new ::proto::dota::CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_ParticleManager.update_particle_should_draw)
  return update_particle_should_draw_;
}
::proto::dota::CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw* CDOTAUserMsg_ParticleManager::release_update_particle_should_draw() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAUserMsg_ParticleManager.update_particle_should_draw)
  clear_has_update_particle_should_draw();
  ::proto::dota::CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw* temp = update_particle_should_draw_;
  update_particle_should_draw_ = NULL;
  return temp;
}
void CDOTAUserMsg_ParticleManager::set_allocated_update_particle_should_draw(::proto::dota::CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw* update_particle_should_draw) {
  delete update_particle_should_draw_;
  update_particle_should_draw_ = update_particle_should_draw;
  if (update_particle_should_draw) {
    set_has_update_particle_should_draw();
  } else {
    clear_has_update_particle_should_draw();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAUserMsg_ParticleManager.update_particle_should_draw)
}

// optional .proto.dota.CDOTAUserMsg_ParticleManager.UpdateParticleSetFrozen update_particle_set_frozen = 15;
bool CDOTAUserMsg_ParticleManager::has_update_particle_set_frozen() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CDOTAUserMsg_ParticleManager::set_has_update_particle_set_frozen() {
  _has_bits_[0] |= 0x00000800u;
}
void CDOTAUserMsg_ParticleManager::clear_has_update_particle_set_frozen() {
  _has_bits_[0] &= ~0x00000800u;
}
void CDOTAUserMsg_ParticleManager::clear_update_particle_set_frozen() {
  if (update_particle_set_frozen_ != NULL) update_particle_set_frozen_->::proto::dota::CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen::Clear();
  clear_has_update_particle_set_frozen();
}
const ::proto::dota::CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen& CDOTAUserMsg_ParticleManager::update_particle_set_frozen() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ParticleManager.update_particle_set_frozen)
  return update_particle_set_frozen_ != NULL ? *update_particle_set_frozen_
                         : *::proto::dota::CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen::internal_default_instance();
}
::proto::dota::CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen* CDOTAUserMsg_ParticleManager::mutable_update_particle_set_frozen() {
  set_has_update_particle_set_frozen();
  if (update_particle_set_frozen_ == NULL) {
    update_particle_set_frozen_ = new ::proto::dota::CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_ParticleManager.update_particle_set_frozen)
  return update_particle_set_frozen_;
}
::proto::dota::CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen* CDOTAUserMsg_ParticleManager::release_update_particle_set_frozen() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAUserMsg_ParticleManager.update_particle_set_frozen)
  clear_has_update_particle_set_frozen();
  ::proto::dota::CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen* temp = update_particle_set_frozen_;
  update_particle_set_frozen_ = NULL;
  return temp;
}
void CDOTAUserMsg_ParticleManager::set_allocated_update_particle_set_frozen(::proto::dota::CDOTAUserMsg_ParticleManager_UpdateParticleSetFrozen* update_particle_set_frozen) {
  delete update_particle_set_frozen_;
  update_particle_set_frozen_ = update_particle_set_frozen;
  if (update_particle_set_frozen) {
    set_has_update_particle_set_frozen();
  } else {
    clear_has_update_particle_set_frozen();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAUserMsg_ParticleManager.update_particle_set_frozen)
}

// optional .proto.dota.CDOTAUserMsg_ParticleManager.ChangeControlPointAttachment change_control_point_attachment = 16;
bool CDOTAUserMsg_ParticleManager::has_change_control_point_attachment() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void CDOTAUserMsg_ParticleManager::set_has_change_control_point_attachment() {
  _has_bits_[0] |= 0x00001000u;
}
void CDOTAUserMsg_ParticleManager::clear_has_change_control_point_attachment() {
  _has_bits_[0] &= ~0x00001000u;
}
void CDOTAUserMsg_ParticleManager::clear_change_control_point_attachment() {
  if (change_control_point_attachment_ != NULL) change_control_point_attachment_->::proto::dota::CDOTAUserMsg_ParticleManager_ChangeControlPointAttachment::Clear();
  clear_has_change_control_point_attachment();
}
const ::proto::dota::CDOTAUserMsg_ParticleManager_ChangeControlPointAttachment& CDOTAUserMsg_ParticleManager::change_control_point_attachment() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ParticleManager.change_control_point_attachment)
  return change_control_point_attachment_ != NULL ? *change_control_point_attachment_
                         : *::proto::dota::CDOTAUserMsg_ParticleManager_ChangeControlPointAttachment::internal_default_instance();
}
::proto::dota::CDOTAUserMsg_ParticleManager_ChangeControlPointAttachment* CDOTAUserMsg_ParticleManager::mutable_change_control_point_attachment() {
  set_has_change_control_point_attachment();
  if (change_control_point_attachment_ == NULL) {
    change_control_point_attachment_ = new ::proto::dota::CDOTAUserMsg_ParticleManager_ChangeControlPointAttachment;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_ParticleManager.change_control_point_attachment)
  return change_control_point_attachment_;
}
::proto::dota::CDOTAUserMsg_ParticleManager_ChangeControlPointAttachment* CDOTAUserMsg_ParticleManager::release_change_control_point_attachment() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAUserMsg_ParticleManager.change_control_point_attachment)
  clear_has_change_control_point_attachment();
  ::proto::dota::CDOTAUserMsg_ParticleManager_ChangeControlPointAttachment* temp = change_control_point_attachment_;
  change_control_point_attachment_ = NULL;
  return temp;
}
void CDOTAUserMsg_ParticleManager::set_allocated_change_control_point_attachment(::proto::dota::CDOTAUserMsg_ParticleManager_ChangeControlPointAttachment* change_control_point_attachment) {
  delete change_control_point_attachment_;
  change_control_point_attachment_ = change_control_point_attachment;
  if (change_control_point_attachment) {
    set_has_change_control_point_attachment();
  } else {
    clear_has_change_control_point_attachment();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAUserMsg_ParticleManager.change_control_point_attachment)
}

// optional .proto.dota.CDOTAUserMsg_ParticleManager.UpdateEntityPosition update_entity_position = 17;
bool CDOTAUserMsg_ParticleManager::has_update_entity_position() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void CDOTAUserMsg_ParticleManager::set_has_update_entity_position() {
  _has_bits_[0] |= 0x00002000u;
}
void CDOTAUserMsg_ParticleManager::clear_has_update_entity_position() {
  _has_bits_[0] &= ~0x00002000u;
}
void CDOTAUserMsg_ParticleManager::clear_update_entity_position() {
  if (update_entity_position_ != NULL) update_entity_position_->::proto::dota::CDOTAUserMsg_ParticleManager_UpdateEntityPosition::Clear();
  clear_has_update_entity_position();
}
const ::proto::dota::CDOTAUserMsg_ParticleManager_UpdateEntityPosition& CDOTAUserMsg_ParticleManager::update_entity_position() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ParticleManager.update_entity_position)
  return update_entity_position_ != NULL ? *update_entity_position_
                         : *::proto::dota::CDOTAUserMsg_ParticleManager_UpdateEntityPosition::internal_default_instance();
}
::proto::dota::CDOTAUserMsg_ParticleManager_UpdateEntityPosition* CDOTAUserMsg_ParticleManager::mutable_update_entity_position() {
  set_has_update_entity_position();
  if (update_entity_position_ == NULL) {
    update_entity_position_ = new ::proto::dota::CDOTAUserMsg_ParticleManager_UpdateEntityPosition;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_ParticleManager.update_entity_position)
  return update_entity_position_;
}
::proto::dota::CDOTAUserMsg_ParticleManager_UpdateEntityPosition* CDOTAUserMsg_ParticleManager::release_update_entity_position() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAUserMsg_ParticleManager.update_entity_position)
  clear_has_update_entity_position();
  ::proto::dota::CDOTAUserMsg_ParticleManager_UpdateEntityPosition* temp = update_entity_position_;
  update_entity_position_ = NULL;
  return temp;
}
void CDOTAUserMsg_ParticleManager::set_allocated_update_entity_position(::proto::dota::CDOTAUserMsg_ParticleManager_UpdateEntityPosition* update_entity_position) {
  delete update_entity_position_;
  update_entity_position_ = update_entity_position;
  if (update_entity_position) {
    set_has_update_entity_position();
  } else {
    clear_has_update_entity_position();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAUserMsg_ParticleManager.update_entity_position)
}

// optional .proto.dota.CDOTAUserMsg_ParticleManager.SetParticleFoWProperties set_particle_fow_properties = 18;
bool CDOTAUserMsg_ParticleManager::has_set_particle_fow_properties() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void CDOTAUserMsg_ParticleManager::set_has_set_particle_fow_properties() {
  _has_bits_[0] |= 0x00004000u;
}
void CDOTAUserMsg_ParticleManager::clear_has_set_particle_fow_properties() {
  _has_bits_[0] &= ~0x00004000u;
}
void CDOTAUserMsg_ParticleManager::clear_set_particle_fow_properties() {
  if (set_particle_fow_properties_ != NULL) set_particle_fow_properties_->::proto::dota::CDOTAUserMsg_ParticleManager_SetParticleFoWProperties::Clear();
  clear_has_set_particle_fow_properties();
}
const ::proto::dota::CDOTAUserMsg_ParticleManager_SetParticleFoWProperties& CDOTAUserMsg_ParticleManager::set_particle_fow_properties() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ParticleManager.set_particle_fow_properties)
  return set_particle_fow_properties_ != NULL ? *set_particle_fow_properties_
                         : *::proto::dota::CDOTAUserMsg_ParticleManager_SetParticleFoWProperties::internal_default_instance();
}
::proto::dota::CDOTAUserMsg_ParticleManager_SetParticleFoWProperties* CDOTAUserMsg_ParticleManager::mutable_set_particle_fow_properties() {
  set_has_set_particle_fow_properties();
  if (set_particle_fow_properties_ == NULL) {
    set_particle_fow_properties_ = new ::proto::dota::CDOTAUserMsg_ParticleManager_SetParticleFoWProperties;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_ParticleManager.set_particle_fow_properties)
  return set_particle_fow_properties_;
}
::proto::dota::CDOTAUserMsg_ParticleManager_SetParticleFoWProperties* CDOTAUserMsg_ParticleManager::release_set_particle_fow_properties() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAUserMsg_ParticleManager.set_particle_fow_properties)
  clear_has_set_particle_fow_properties();
  ::proto::dota::CDOTAUserMsg_ParticleManager_SetParticleFoWProperties* temp = set_particle_fow_properties_;
  set_particle_fow_properties_ = NULL;
  return temp;
}
void CDOTAUserMsg_ParticleManager::set_allocated_set_particle_fow_properties(::proto::dota::CDOTAUserMsg_ParticleManager_SetParticleFoWProperties* set_particle_fow_properties) {
  delete set_particle_fow_properties_;
  set_particle_fow_properties_ = set_particle_fow_properties;
  if (set_particle_fow_properties) {
    set_has_set_particle_fow_properties();
  } else {
    clear_has_set_particle_fow_properties();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAUserMsg_ParticleManager.set_particle_fow_properties)
}

// optional .proto.dota.CDOTAUserMsg_ParticleManager.SetParticleText set_particle_text = 19;
bool CDOTAUserMsg_ParticleManager::has_set_particle_text() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void CDOTAUserMsg_ParticleManager::set_has_set_particle_text() {
  _has_bits_[0] |= 0x00008000u;
}
void CDOTAUserMsg_ParticleManager::clear_has_set_particle_text() {
  _has_bits_[0] &= ~0x00008000u;
}
void CDOTAUserMsg_ParticleManager::clear_set_particle_text() {
  if (set_particle_text_ != NULL) set_particle_text_->::proto::dota::CDOTAUserMsg_ParticleManager_SetParticleText::Clear();
  clear_has_set_particle_text();
}
const ::proto::dota::CDOTAUserMsg_ParticleManager_SetParticleText& CDOTAUserMsg_ParticleManager::set_particle_text() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ParticleManager.set_particle_text)
  return set_particle_text_ != NULL ? *set_particle_text_
                         : *::proto::dota::CDOTAUserMsg_ParticleManager_SetParticleText::internal_default_instance();
}
::proto::dota::CDOTAUserMsg_ParticleManager_SetParticleText* CDOTAUserMsg_ParticleManager::mutable_set_particle_text() {
  set_has_set_particle_text();
  if (set_particle_text_ == NULL) {
    set_particle_text_ = new ::proto::dota::CDOTAUserMsg_ParticleManager_SetParticleText;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_ParticleManager.set_particle_text)
  return set_particle_text_;
}
::proto::dota::CDOTAUserMsg_ParticleManager_SetParticleText* CDOTAUserMsg_ParticleManager::release_set_particle_text() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAUserMsg_ParticleManager.set_particle_text)
  clear_has_set_particle_text();
  ::proto::dota::CDOTAUserMsg_ParticleManager_SetParticleText* temp = set_particle_text_;
  set_particle_text_ = NULL;
  return temp;
}
void CDOTAUserMsg_ParticleManager::set_allocated_set_particle_text(::proto::dota::CDOTAUserMsg_ParticleManager_SetParticleText* set_particle_text) {
  delete set_particle_text_;
  set_particle_text_ = set_particle_text;
  if (set_particle_text) {
    set_has_set_particle_text();
  } else {
    clear_has_set_particle_text();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAUserMsg_ParticleManager.set_particle_text)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_OverheadEvent::kMessageTypeFieldNumber;
const int CDOTAUserMsg_OverheadEvent::kValueFieldNumber;
const int CDOTAUserMsg_OverheadEvent::kTargetPlayerEntindexFieldNumber;
const int CDOTAUserMsg_OverheadEvent::kTargetEntindexFieldNumber;
const int CDOTAUserMsg_OverheadEvent::kSourcePlayerEntindexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_OverheadEvent::CDOTAUserMsg_OverheadEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_OverheadEvent)
}
CDOTAUserMsg_OverheadEvent::CDOTAUserMsg_OverheadEvent(const CDOTAUserMsg_OverheadEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&message_type_, &from.message_type_,
    reinterpret_cast<char*>(&source_player_entindex_) -
    reinterpret_cast<char*>(&message_type_) + sizeof(source_player_entindex_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_OverheadEvent)
}

void CDOTAUserMsg_OverheadEvent::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&message_type_, 0, reinterpret_cast<char*>(&source_player_entindex_) -
    reinterpret_cast<char*>(&message_type_) + sizeof(source_player_entindex_));
}

CDOTAUserMsg_OverheadEvent::~CDOTAUserMsg_OverheadEvent() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_OverheadEvent)
  SharedDtor();
}

void CDOTAUserMsg_OverheadEvent::SharedDtor() {
}

void CDOTAUserMsg_OverheadEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_OverheadEvent::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_OverheadEvent& CDOTAUserMsg_OverheadEvent::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_OverheadEvent* CDOTAUserMsg_OverheadEvent::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_OverheadEvent* n = new CDOTAUserMsg_OverheadEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_OverheadEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_OverheadEvent)
  if (_has_bits_[0 / 32] & 31u) {
    ::memset(&message_type_, 0, reinterpret_cast<char*>(&source_player_entindex_) -
      reinterpret_cast<char*>(&message_type_) + sizeof(source_player_entindex_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_OverheadEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_OverheadEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .proto.dota.DOTA_OVERHEAD_ALERT message_type = 1 [default = OVERHEAD_ALERT_GOLD];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTA_OVERHEAD_ALERT_IsValid(value)) {
            set_message_type(static_cast< ::proto::dota::DOTA_OVERHEAD_ALERT >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 target_player_entindex = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_target_player_entindex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_player_entindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 target_entindex = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_target_entindex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_entindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 source_player_entindex = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_source_player_entindex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &source_player_entindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_OverheadEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_OverheadEvent)
  return false;
#undef DO_
}

void CDOTAUserMsg_OverheadEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_OverheadEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .proto.dota.DOTA_OVERHEAD_ALERT message_type = 1 [default = OVERHEAD_ALERT_GOLD];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->message_type(), output);
  }

  // optional int32 value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  // optional int32 target_player_entindex = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->target_player_entindex(), output);
  }

  // optional int32 target_entindex = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->target_entindex(), output);
  }

  // optional int32 source_player_entindex = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->source_player_entindex(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_OverheadEvent)
}

::google::protobuf::uint8* CDOTAUserMsg_OverheadEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_OverheadEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .proto.dota.DOTA_OVERHEAD_ALERT message_type = 1 [default = OVERHEAD_ALERT_GOLD];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->message_type(), target);
  }

  // optional int32 value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  // optional int32 target_player_entindex = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->target_player_entindex(), target);
  }

  // optional int32 target_entindex = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->target_entindex(), target);
  }

  // optional int32 source_player_entindex = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->source_player_entindex(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_OverheadEvent)
  return target;
}

size_t CDOTAUserMsg_OverheadEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_OverheadEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .proto.dota.DOTA_OVERHEAD_ALERT message_type = 1 [default = OVERHEAD_ALERT_GOLD];
  if (has_message_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->message_type());
  }
  if (_has_bits_[0 / 32] & 30u) {
    // optional int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

    // optional int32 target_player_entindex = 3;
    if (has_target_player_entindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->target_player_entindex());
    }

    // optional int32 target_entindex = 4;
    if (has_target_entindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->target_entindex());
    }

    // optional int32 source_player_entindex = 5;
    if (has_source_player_entindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->source_player_entindex());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_OverheadEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_OverheadEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_OverheadEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_OverheadEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_OverheadEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_OverheadEvent)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_OverheadEvent::MergeFrom(const CDOTAUserMsg_OverheadEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_OverheadEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      message_type_ = from.message_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      value_ = from.value_;
    }
    if (cached_has_bits & 0x00000004u) {
      target_player_entindex_ = from.target_player_entindex_;
    }
    if (cached_has_bits & 0x00000008u) {
      target_entindex_ = from.target_entindex_;
    }
    if (cached_has_bits & 0x00000010u) {
      source_player_entindex_ = from.source_player_entindex_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_OverheadEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_OverheadEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_OverheadEvent::CopyFrom(const CDOTAUserMsg_OverheadEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_OverheadEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_OverheadEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void CDOTAUserMsg_OverheadEvent::Swap(CDOTAUserMsg_OverheadEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_OverheadEvent::InternalSwap(CDOTAUserMsg_OverheadEvent* other) {
  std::swap(message_type_, other->message_type_);
  std::swap(value_, other->value_);
  std::swap(target_player_entindex_, other->target_player_entindex_);
  std::swap(target_entindex_, other->target_entindex_);
  std::swap(source_player_entindex_, other->source_player_entindex_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_OverheadEvent::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_OverheadEvent

// required .proto.dota.DOTA_OVERHEAD_ALERT message_type = 1 [default = OVERHEAD_ALERT_GOLD];
bool CDOTAUserMsg_OverheadEvent::has_message_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_OverheadEvent::set_has_message_type() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_OverheadEvent::clear_has_message_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_OverheadEvent::clear_message_type() {
  message_type_ = 0;
  clear_has_message_type();
}
::proto::dota::DOTA_OVERHEAD_ALERT CDOTAUserMsg_OverheadEvent::message_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_OverheadEvent.message_type)
  return static_cast< ::proto::dota::DOTA_OVERHEAD_ALERT >(message_type_);
}
void CDOTAUserMsg_OverheadEvent::set_message_type(::proto::dota::DOTA_OVERHEAD_ALERT value) {
  assert(::proto::dota::DOTA_OVERHEAD_ALERT_IsValid(value));
  set_has_message_type();
  message_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_OverheadEvent.message_type)
}

// optional int32 value = 2;
bool CDOTAUserMsg_OverheadEvent::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAUserMsg_OverheadEvent::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAUserMsg_OverheadEvent::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAUserMsg_OverheadEvent::clear_value() {
  value_ = 0;
  clear_has_value();
}
::google::protobuf::int32 CDOTAUserMsg_OverheadEvent::value() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_OverheadEvent.value)
  return value_;
}
void CDOTAUserMsg_OverheadEvent::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_OverheadEvent.value)
}

// optional int32 target_player_entindex = 3;
bool CDOTAUserMsg_OverheadEvent::has_target_player_entindex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDOTAUserMsg_OverheadEvent::set_has_target_player_entindex() {
  _has_bits_[0] |= 0x00000004u;
}
void CDOTAUserMsg_OverheadEvent::clear_has_target_player_entindex() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDOTAUserMsg_OverheadEvent::clear_target_player_entindex() {
  target_player_entindex_ = 0;
  clear_has_target_player_entindex();
}
::google::protobuf::int32 CDOTAUserMsg_OverheadEvent::target_player_entindex() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_OverheadEvent.target_player_entindex)
  return target_player_entindex_;
}
void CDOTAUserMsg_OverheadEvent::set_target_player_entindex(::google::protobuf::int32 value) {
  set_has_target_player_entindex();
  target_player_entindex_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_OverheadEvent.target_player_entindex)
}

// optional int32 target_entindex = 4;
bool CDOTAUserMsg_OverheadEvent::has_target_entindex() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CDOTAUserMsg_OverheadEvent::set_has_target_entindex() {
  _has_bits_[0] |= 0x00000008u;
}
void CDOTAUserMsg_OverheadEvent::clear_has_target_entindex() {
  _has_bits_[0] &= ~0x00000008u;
}
void CDOTAUserMsg_OverheadEvent::clear_target_entindex() {
  target_entindex_ = 0;
  clear_has_target_entindex();
}
::google::protobuf::int32 CDOTAUserMsg_OverheadEvent::target_entindex() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_OverheadEvent.target_entindex)
  return target_entindex_;
}
void CDOTAUserMsg_OverheadEvent::set_target_entindex(::google::protobuf::int32 value) {
  set_has_target_entindex();
  target_entindex_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_OverheadEvent.target_entindex)
}

// optional int32 source_player_entindex = 5;
bool CDOTAUserMsg_OverheadEvent::has_source_player_entindex() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CDOTAUserMsg_OverheadEvent::set_has_source_player_entindex() {
  _has_bits_[0] |= 0x00000010u;
}
void CDOTAUserMsg_OverheadEvent::clear_has_source_player_entindex() {
  _has_bits_[0] &= ~0x00000010u;
}
void CDOTAUserMsg_OverheadEvent::clear_source_player_entindex() {
  source_player_entindex_ = 0;
  clear_has_source_player_entindex();
}
::google::protobuf::int32 CDOTAUserMsg_OverheadEvent::source_player_entindex() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_OverheadEvent.source_player_entindex)
  return source_player_entindex_;
}
void CDOTAUserMsg_OverheadEvent::set_source_player_entindex(::google::protobuf::int32 value) {
  set_has_source_player_entindex();
  source_player_entindex_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_OverheadEvent.source_player_entindex)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_TutorialTipInfo::kNameFieldNumber;
const int CDOTAUserMsg_TutorialTipInfo::kProgressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_TutorialTipInfo::CDOTAUserMsg_TutorialTipInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_TutorialTipInfo)
}
CDOTAUserMsg_TutorialTipInfo::CDOTAUserMsg_TutorialTipInfo(const CDOTAUserMsg_TutorialTipInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  progress_ = from.progress_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_TutorialTipInfo)
}

void CDOTAUserMsg_TutorialTipInfo::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  progress_ = 0;
}

CDOTAUserMsg_TutorialTipInfo::~CDOTAUserMsg_TutorialTipInfo() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_TutorialTipInfo)
  SharedDtor();
}

void CDOTAUserMsg_TutorialTipInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CDOTAUserMsg_TutorialTipInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_TutorialTipInfo::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_TutorialTipInfo& CDOTAUserMsg_TutorialTipInfo::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_TutorialTipInfo* CDOTAUserMsg_TutorialTipInfo::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_TutorialTipInfo* n = new CDOTAUserMsg_TutorialTipInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_TutorialTipInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_TutorialTipInfo)
  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  progress_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_TutorialTipInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_TutorialTipInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDOTAUserMsg_TutorialTipInfo.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 progress = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_progress();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &progress_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_TutorialTipInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_TutorialTipInfo)
  return false;
#undef DO_
}

void CDOTAUserMsg_TutorialTipInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_TutorialTipInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAUserMsg_TutorialTipInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional int32 progress = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->progress(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_TutorialTipInfo)
}

::google::protobuf::uint8* CDOTAUserMsg_TutorialTipInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_TutorialTipInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAUserMsg_TutorialTipInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int32 progress = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->progress(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_TutorialTipInfo)
  return target;
}

size_t CDOTAUserMsg_TutorialTipInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_TutorialTipInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 progress = 2;
    if (has_progress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->progress());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_TutorialTipInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_TutorialTipInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_TutorialTipInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_TutorialTipInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_TutorialTipInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_TutorialTipInfo)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_TutorialTipInfo::MergeFrom(const CDOTAUserMsg_TutorialTipInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_TutorialTipInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      progress_ = from.progress_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_TutorialTipInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_TutorialTipInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_TutorialTipInfo::CopyFrom(const CDOTAUserMsg_TutorialTipInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_TutorialTipInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_TutorialTipInfo::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_TutorialTipInfo::Swap(CDOTAUserMsg_TutorialTipInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_TutorialTipInfo::InternalSwap(CDOTAUserMsg_TutorialTipInfo* other) {
  name_.Swap(&other->name_);
  std::swap(progress_, other->progress_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_TutorialTipInfo::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_TutorialTipInfo

// optional string name = 1;
bool CDOTAUserMsg_TutorialTipInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_TutorialTipInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_TutorialTipInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_TutorialTipInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& CDOTAUserMsg_TutorialTipInfo::name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_TutorialTipInfo.name)
  return name_.GetNoArena();
}
void CDOTAUserMsg_TutorialTipInfo::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_TutorialTipInfo.name)
}
#if LANG_CXX11
void CDOTAUserMsg_TutorialTipInfo::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDOTAUserMsg_TutorialTipInfo.name)
}
#endif
void CDOTAUserMsg_TutorialTipInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDOTAUserMsg_TutorialTipInfo.name)
}
void CDOTAUserMsg_TutorialTipInfo::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDOTAUserMsg_TutorialTipInfo.name)
}
::std::string* CDOTAUserMsg_TutorialTipInfo::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_TutorialTipInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDOTAUserMsg_TutorialTipInfo::release_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAUserMsg_TutorialTipInfo.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDOTAUserMsg_TutorialTipInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAUserMsg_TutorialTipInfo.name)
}

// optional int32 progress = 2;
bool CDOTAUserMsg_TutorialTipInfo::has_progress() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAUserMsg_TutorialTipInfo::set_has_progress() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAUserMsg_TutorialTipInfo::clear_has_progress() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAUserMsg_TutorialTipInfo::clear_progress() {
  progress_ = 0;
  clear_has_progress();
}
::google::protobuf::int32 CDOTAUserMsg_TutorialTipInfo::progress() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_TutorialTipInfo.progress)
  return progress_;
}
void CDOTAUserMsg_TutorialTipInfo::set_progress(::google::protobuf::int32 value) {
  set_has_progress();
  progress_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_TutorialTipInfo.progress)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_TutorialFinish::kHeadingFieldNumber;
const int CDOTAUserMsg_TutorialFinish::kEmblemFieldNumber;
const int CDOTAUserMsg_TutorialFinish::kBodyFieldNumber;
const int CDOTAUserMsg_TutorialFinish::kSuccessFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_TutorialFinish::CDOTAUserMsg_TutorialFinish()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_TutorialFinish)
}
CDOTAUserMsg_TutorialFinish::CDOTAUserMsg_TutorialFinish(const CDOTAUserMsg_TutorialFinish& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  heading_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_heading()) {
    heading_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.heading_);
  }
  emblem_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_emblem()) {
    emblem_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.emblem_);
  }
  body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_body()) {
    body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body_);
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_TutorialFinish)
}

void CDOTAUserMsg_TutorialFinish::SharedCtor() {
  _cached_size_ = 0;
  heading_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  emblem_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  success_ = false;
}

CDOTAUserMsg_TutorialFinish::~CDOTAUserMsg_TutorialFinish() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_TutorialFinish)
  SharedDtor();
}

void CDOTAUserMsg_TutorialFinish::SharedDtor() {
  heading_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  emblem_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  body_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CDOTAUserMsg_TutorialFinish::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_TutorialFinish::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_TutorialFinish& CDOTAUserMsg_TutorialFinish::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_TutorialFinish* CDOTAUserMsg_TutorialFinish::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_TutorialFinish* n = new CDOTAUserMsg_TutorialFinish;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_TutorialFinish::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_TutorialFinish)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_heading()) {
      GOOGLE_DCHECK(!heading_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*heading_.UnsafeRawStringPointer())->clear();
    }
    if (has_emblem()) {
      GOOGLE_DCHECK(!emblem_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*emblem_.UnsafeRawStringPointer())->clear();
    }
    if (has_body()) {
      GOOGLE_DCHECK(!body_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*body_.UnsafeRawStringPointer())->clear();
    }
  }
  success_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_TutorialFinish::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_TutorialFinish)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string heading = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_heading()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->heading().data(), this->heading().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDOTAUserMsg_TutorialFinish.heading");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string emblem = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_emblem()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->emblem().data(), this->emblem().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDOTAUserMsg_TutorialFinish.emblem");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string body = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_body()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->body().data(), this->body().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDOTAUserMsg_TutorialFinish.body");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool success = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_success();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_TutorialFinish)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_TutorialFinish)
  return false;
#undef DO_
}

void CDOTAUserMsg_TutorialFinish::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_TutorialFinish)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string heading = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->heading().data(), this->heading().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAUserMsg_TutorialFinish.heading");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->heading(), output);
  }

  // optional string emblem = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->emblem().data(), this->emblem().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAUserMsg_TutorialFinish.emblem");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->emblem(), output);
  }

  // optional string body = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->body().data(), this->body().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAUserMsg_TutorialFinish.body");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->body(), output);
  }

  // optional bool success = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->success(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_TutorialFinish)
}

::google::protobuf::uint8* CDOTAUserMsg_TutorialFinish::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_TutorialFinish)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string heading = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->heading().data(), this->heading().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAUserMsg_TutorialFinish.heading");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->heading(), target);
  }

  // optional string emblem = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->emblem().data(), this->emblem().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAUserMsg_TutorialFinish.emblem");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->emblem(), target);
  }

  // optional string body = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->body().data(), this->body().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAUserMsg_TutorialFinish.body");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->body(), target);
  }

  // optional bool success = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->success(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_TutorialFinish)
  return target;
}

size_t CDOTAUserMsg_TutorialFinish::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_TutorialFinish)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string heading = 1;
    if (has_heading()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->heading());
    }

    // optional string emblem = 2;
    if (has_emblem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->emblem());
    }

    // optional string body = 3;
    if (has_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->body());
    }

    // optional bool success = 4;
    if (has_success()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_TutorialFinish::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_TutorialFinish)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_TutorialFinish* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_TutorialFinish>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_TutorialFinish)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_TutorialFinish)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_TutorialFinish::MergeFrom(const CDOTAUserMsg_TutorialFinish& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_TutorialFinish)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_heading();
      heading_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.heading_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_emblem();
      emblem_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.emblem_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_body();
      body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body_);
    }
    if (cached_has_bits & 0x00000008u) {
      success_ = from.success_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_TutorialFinish::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_TutorialFinish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_TutorialFinish::CopyFrom(const CDOTAUserMsg_TutorialFinish& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_TutorialFinish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_TutorialFinish::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_TutorialFinish::Swap(CDOTAUserMsg_TutorialFinish* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_TutorialFinish::InternalSwap(CDOTAUserMsg_TutorialFinish* other) {
  heading_.Swap(&other->heading_);
  emblem_.Swap(&other->emblem_);
  body_.Swap(&other->body_);
  std::swap(success_, other->success_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_TutorialFinish::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_TutorialFinish

// optional string heading = 1;
bool CDOTAUserMsg_TutorialFinish::has_heading() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_TutorialFinish::set_has_heading() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_TutorialFinish::clear_has_heading() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_TutorialFinish::clear_heading() {
  heading_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_heading();
}
const ::std::string& CDOTAUserMsg_TutorialFinish::heading() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_TutorialFinish.heading)
  return heading_.GetNoArena();
}
void CDOTAUserMsg_TutorialFinish::set_heading(const ::std::string& value) {
  set_has_heading();
  heading_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_TutorialFinish.heading)
}
#if LANG_CXX11
void CDOTAUserMsg_TutorialFinish::set_heading(::std::string&& value) {
  set_has_heading();
  heading_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDOTAUserMsg_TutorialFinish.heading)
}
#endif
void CDOTAUserMsg_TutorialFinish::set_heading(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_heading();
  heading_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDOTAUserMsg_TutorialFinish.heading)
}
void CDOTAUserMsg_TutorialFinish::set_heading(const char* value, size_t size) {
  set_has_heading();
  heading_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDOTAUserMsg_TutorialFinish.heading)
}
::std::string* CDOTAUserMsg_TutorialFinish::mutable_heading() {
  set_has_heading();
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_TutorialFinish.heading)
  return heading_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDOTAUserMsg_TutorialFinish::release_heading() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAUserMsg_TutorialFinish.heading)
  clear_has_heading();
  return heading_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDOTAUserMsg_TutorialFinish::set_allocated_heading(::std::string* heading) {
  if (heading != NULL) {
    set_has_heading();
  } else {
    clear_has_heading();
  }
  heading_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), heading);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAUserMsg_TutorialFinish.heading)
}

// optional string emblem = 2;
bool CDOTAUserMsg_TutorialFinish::has_emblem() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAUserMsg_TutorialFinish::set_has_emblem() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAUserMsg_TutorialFinish::clear_has_emblem() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAUserMsg_TutorialFinish::clear_emblem() {
  emblem_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_emblem();
}
const ::std::string& CDOTAUserMsg_TutorialFinish::emblem() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_TutorialFinish.emblem)
  return emblem_.GetNoArena();
}
void CDOTAUserMsg_TutorialFinish::set_emblem(const ::std::string& value) {
  set_has_emblem();
  emblem_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_TutorialFinish.emblem)
}
#if LANG_CXX11
void CDOTAUserMsg_TutorialFinish::set_emblem(::std::string&& value) {
  set_has_emblem();
  emblem_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDOTAUserMsg_TutorialFinish.emblem)
}
#endif
void CDOTAUserMsg_TutorialFinish::set_emblem(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_emblem();
  emblem_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDOTAUserMsg_TutorialFinish.emblem)
}
void CDOTAUserMsg_TutorialFinish::set_emblem(const char* value, size_t size) {
  set_has_emblem();
  emblem_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDOTAUserMsg_TutorialFinish.emblem)
}
::std::string* CDOTAUserMsg_TutorialFinish::mutable_emblem() {
  set_has_emblem();
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_TutorialFinish.emblem)
  return emblem_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDOTAUserMsg_TutorialFinish::release_emblem() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAUserMsg_TutorialFinish.emblem)
  clear_has_emblem();
  return emblem_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDOTAUserMsg_TutorialFinish::set_allocated_emblem(::std::string* emblem) {
  if (emblem != NULL) {
    set_has_emblem();
  } else {
    clear_has_emblem();
  }
  emblem_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), emblem);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAUserMsg_TutorialFinish.emblem)
}

// optional string body = 3;
bool CDOTAUserMsg_TutorialFinish::has_body() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDOTAUserMsg_TutorialFinish::set_has_body() {
  _has_bits_[0] |= 0x00000004u;
}
void CDOTAUserMsg_TutorialFinish::clear_has_body() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDOTAUserMsg_TutorialFinish::clear_body() {
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_body();
}
const ::std::string& CDOTAUserMsg_TutorialFinish::body() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_TutorialFinish.body)
  return body_.GetNoArena();
}
void CDOTAUserMsg_TutorialFinish::set_body(const ::std::string& value) {
  set_has_body();
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_TutorialFinish.body)
}
#if LANG_CXX11
void CDOTAUserMsg_TutorialFinish::set_body(::std::string&& value) {
  set_has_body();
  body_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDOTAUserMsg_TutorialFinish.body)
}
#endif
void CDOTAUserMsg_TutorialFinish::set_body(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_body();
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDOTAUserMsg_TutorialFinish.body)
}
void CDOTAUserMsg_TutorialFinish::set_body(const char* value, size_t size) {
  set_has_body();
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDOTAUserMsg_TutorialFinish.body)
}
::std::string* CDOTAUserMsg_TutorialFinish::mutable_body() {
  set_has_body();
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_TutorialFinish.body)
  return body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDOTAUserMsg_TutorialFinish::release_body() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAUserMsg_TutorialFinish.body)
  clear_has_body();
  return body_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDOTAUserMsg_TutorialFinish::set_allocated_body(::std::string* body) {
  if (body != NULL) {
    set_has_body();
  } else {
    clear_has_body();
  }
  body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), body);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAUserMsg_TutorialFinish.body)
}

// optional bool success = 4;
bool CDOTAUserMsg_TutorialFinish::has_success() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CDOTAUserMsg_TutorialFinish::set_has_success() {
  _has_bits_[0] |= 0x00000008u;
}
void CDOTAUserMsg_TutorialFinish::clear_has_success() {
  _has_bits_[0] &= ~0x00000008u;
}
void CDOTAUserMsg_TutorialFinish::clear_success() {
  success_ = false;
  clear_has_success();
}
bool CDOTAUserMsg_TutorialFinish::success() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_TutorialFinish.success)
  return success_;
}
void CDOTAUserMsg_TutorialFinish::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_TutorialFinish.success)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_TutorialMinimapPosition::CDOTAUserMsg_TutorialMinimapPosition()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_TutorialMinimapPosition)
}
CDOTAUserMsg_TutorialMinimapPosition::CDOTAUserMsg_TutorialMinimapPosition(const CDOTAUserMsg_TutorialMinimapPosition& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_TutorialMinimapPosition)
}

void CDOTAUserMsg_TutorialMinimapPosition::SharedCtor() {
  _cached_size_ = 0;
}

CDOTAUserMsg_TutorialMinimapPosition::~CDOTAUserMsg_TutorialMinimapPosition() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_TutorialMinimapPosition)
  SharedDtor();
}

void CDOTAUserMsg_TutorialMinimapPosition::SharedDtor() {
}

void CDOTAUserMsg_TutorialMinimapPosition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_TutorialMinimapPosition::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_TutorialMinimapPosition& CDOTAUserMsg_TutorialMinimapPosition::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_TutorialMinimapPosition* CDOTAUserMsg_TutorialMinimapPosition::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_TutorialMinimapPosition* n = new CDOTAUserMsg_TutorialMinimapPosition;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_TutorialMinimapPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_TutorialMinimapPosition)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_TutorialMinimapPosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_TutorialMinimapPosition)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_TutorialMinimapPosition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_TutorialMinimapPosition)
  return false;
#undef DO_
}

void CDOTAUserMsg_TutorialMinimapPosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_TutorialMinimapPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_TutorialMinimapPosition)
}

::google::protobuf::uint8* CDOTAUserMsg_TutorialMinimapPosition::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_TutorialMinimapPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_TutorialMinimapPosition)
  return target;
}

size_t CDOTAUserMsg_TutorialMinimapPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_TutorialMinimapPosition)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_TutorialMinimapPosition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_TutorialMinimapPosition)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_TutorialMinimapPosition* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_TutorialMinimapPosition>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_TutorialMinimapPosition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_TutorialMinimapPosition)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_TutorialMinimapPosition::MergeFrom(const CDOTAUserMsg_TutorialMinimapPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_TutorialMinimapPosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CDOTAUserMsg_TutorialMinimapPosition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_TutorialMinimapPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_TutorialMinimapPosition::CopyFrom(const CDOTAUserMsg_TutorialMinimapPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_TutorialMinimapPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_TutorialMinimapPosition::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_TutorialMinimapPosition::Swap(CDOTAUserMsg_TutorialMinimapPosition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_TutorialMinimapPosition::InternalSwap(CDOTAUserMsg_TutorialMinimapPosition* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_TutorialMinimapPosition::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_TutorialMinimapPosition

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_SendGenericToolTip::kTitleFieldNumber;
const int CDOTAUserMsg_SendGenericToolTip::kTextFieldNumber;
const int CDOTAUserMsg_SendGenericToolTip::kEntindexFieldNumber;
const int CDOTAUserMsg_SendGenericToolTip::kCloseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_SendGenericToolTip::CDOTAUserMsg_SendGenericToolTip()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_SendGenericToolTip)
}
CDOTAUserMsg_SendGenericToolTip::CDOTAUserMsg_SendGenericToolTip(const CDOTAUserMsg_SendGenericToolTip& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_title()) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text()) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  ::memcpy(&entindex_, &from.entindex_,
    reinterpret_cast<char*>(&close_) -
    reinterpret_cast<char*>(&entindex_) + sizeof(close_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_SendGenericToolTip)
}

void CDOTAUserMsg_SendGenericToolTip::SharedCtor() {
  _cached_size_ = 0;
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&entindex_, 0, reinterpret_cast<char*>(&close_) -
    reinterpret_cast<char*>(&entindex_) + sizeof(close_));
}

CDOTAUserMsg_SendGenericToolTip::~CDOTAUserMsg_SendGenericToolTip() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_SendGenericToolTip)
  SharedDtor();
}

void CDOTAUserMsg_SendGenericToolTip::SharedDtor() {
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CDOTAUserMsg_SendGenericToolTip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_SendGenericToolTip::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_SendGenericToolTip& CDOTAUserMsg_SendGenericToolTip::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_SendGenericToolTip* CDOTAUserMsg_SendGenericToolTip::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_SendGenericToolTip* n = new CDOTAUserMsg_SendGenericToolTip;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_SendGenericToolTip::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_SendGenericToolTip)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_title()) {
      GOOGLE_DCHECK(!title_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*title_.UnsafeRawStringPointer())->clear();
    }
    if (has_text()) {
      GOOGLE_DCHECK(!text_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*text_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&entindex_, 0, reinterpret_cast<char*>(&close_) -
      reinterpret_cast<char*>(&entindex_) + sizeof(close_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_SendGenericToolTip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_SendGenericToolTip)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string title = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDOTAUserMsg_SendGenericToolTip.title");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string text = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDOTAUserMsg_SendGenericToolTip.text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 entindex = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_entindex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool close = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_close();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &close_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_SendGenericToolTip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_SendGenericToolTip)
  return false;
#undef DO_
}

void CDOTAUserMsg_SendGenericToolTip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_SendGenericToolTip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string title = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAUserMsg_SendGenericToolTip.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->title(), output);
  }

  // optional string text = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAUserMsg_SendGenericToolTip.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->text(), output);
  }

  // optional int32 entindex = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->entindex(), output);
  }

  // optional bool close = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->close(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_SendGenericToolTip)
}

::google::protobuf::uint8* CDOTAUserMsg_SendGenericToolTip::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_SendGenericToolTip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string title = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAUserMsg_SendGenericToolTip.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->title(), target);
  }

  // optional string text = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAUserMsg_SendGenericToolTip.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->text(), target);
  }

  // optional int32 entindex = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->entindex(), target);
  }

  // optional bool close = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->close(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_SendGenericToolTip)
  return target;
}

size_t CDOTAUserMsg_SendGenericToolTip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_SendGenericToolTip)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string title = 1;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string text = 2;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional int32 entindex = 3;
    if (has_entindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entindex());
    }

    // optional bool close = 4;
    if (has_close()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_SendGenericToolTip::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_SendGenericToolTip)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_SendGenericToolTip* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_SendGenericToolTip>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_SendGenericToolTip)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_SendGenericToolTip)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_SendGenericToolTip::MergeFrom(const CDOTAUserMsg_SendGenericToolTip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_SendGenericToolTip)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_title();
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_text();
      text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
    }
    if (cached_has_bits & 0x00000004u) {
      entindex_ = from.entindex_;
    }
    if (cached_has_bits & 0x00000008u) {
      close_ = from.close_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_SendGenericToolTip::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_SendGenericToolTip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_SendGenericToolTip::CopyFrom(const CDOTAUserMsg_SendGenericToolTip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_SendGenericToolTip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_SendGenericToolTip::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_SendGenericToolTip::Swap(CDOTAUserMsg_SendGenericToolTip* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_SendGenericToolTip::InternalSwap(CDOTAUserMsg_SendGenericToolTip* other) {
  title_.Swap(&other->title_);
  text_.Swap(&other->text_);
  std::swap(entindex_, other->entindex_);
  std::swap(close_, other->close_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_SendGenericToolTip::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_SendGenericToolTip

// optional string title = 1;
bool CDOTAUserMsg_SendGenericToolTip::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_SendGenericToolTip::set_has_title() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_SendGenericToolTip::clear_has_title() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_SendGenericToolTip::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
const ::std::string& CDOTAUserMsg_SendGenericToolTip::title() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_SendGenericToolTip.title)
  return title_.GetNoArena();
}
void CDOTAUserMsg_SendGenericToolTip::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_SendGenericToolTip.title)
}
#if LANG_CXX11
void CDOTAUserMsg_SendGenericToolTip::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDOTAUserMsg_SendGenericToolTip.title)
}
#endif
void CDOTAUserMsg_SendGenericToolTip::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDOTAUserMsg_SendGenericToolTip.title)
}
void CDOTAUserMsg_SendGenericToolTip::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDOTAUserMsg_SendGenericToolTip.title)
}
::std::string* CDOTAUserMsg_SendGenericToolTip::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_SendGenericToolTip.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDOTAUserMsg_SendGenericToolTip::release_title() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAUserMsg_SendGenericToolTip.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDOTAUserMsg_SendGenericToolTip::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAUserMsg_SendGenericToolTip.title)
}

// optional string text = 2;
bool CDOTAUserMsg_SendGenericToolTip::has_text() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAUserMsg_SendGenericToolTip::set_has_text() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAUserMsg_SendGenericToolTip::clear_has_text() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAUserMsg_SendGenericToolTip::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text();
}
const ::std::string& CDOTAUserMsg_SendGenericToolTip::text() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_SendGenericToolTip.text)
  return text_.GetNoArena();
}
void CDOTAUserMsg_SendGenericToolTip::set_text(const ::std::string& value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_SendGenericToolTip.text)
}
#if LANG_CXX11
void CDOTAUserMsg_SendGenericToolTip::set_text(::std::string&& value) {
  set_has_text();
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDOTAUserMsg_SendGenericToolTip.text)
}
#endif
void CDOTAUserMsg_SendGenericToolTip::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDOTAUserMsg_SendGenericToolTip.text)
}
void CDOTAUserMsg_SendGenericToolTip::set_text(const char* value, size_t size) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDOTAUserMsg_SendGenericToolTip.text)
}
::std::string* CDOTAUserMsg_SendGenericToolTip::mutable_text() {
  set_has_text();
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_SendGenericToolTip.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDOTAUserMsg_SendGenericToolTip::release_text() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAUserMsg_SendGenericToolTip.text)
  clear_has_text();
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDOTAUserMsg_SendGenericToolTip::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    set_has_text();
  } else {
    clear_has_text();
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAUserMsg_SendGenericToolTip.text)
}

// optional int32 entindex = 3;
bool CDOTAUserMsg_SendGenericToolTip::has_entindex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDOTAUserMsg_SendGenericToolTip::set_has_entindex() {
  _has_bits_[0] |= 0x00000004u;
}
void CDOTAUserMsg_SendGenericToolTip::clear_has_entindex() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDOTAUserMsg_SendGenericToolTip::clear_entindex() {
  entindex_ = 0;
  clear_has_entindex();
}
::google::protobuf::int32 CDOTAUserMsg_SendGenericToolTip::entindex() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_SendGenericToolTip.entindex)
  return entindex_;
}
void CDOTAUserMsg_SendGenericToolTip::set_entindex(::google::protobuf::int32 value) {
  set_has_entindex();
  entindex_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_SendGenericToolTip.entindex)
}

// optional bool close = 4;
bool CDOTAUserMsg_SendGenericToolTip::has_close() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CDOTAUserMsg_SendGenericToolTip::set_has_close() {
  _has_bits_[0] |= 0x00000008u;
}
void CDOTAUserMsg_SendGenericToolTip::clear_has_close() {
  _has_bits_[0] &= ~0x00000008u;
}
void CDOTAUserMsg_SendGenericToolTip::clear_close() {
  close_ = false;
  clear_has_close();
}
bool CDOTAUserMsg_SendGenericToolTip::close() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_SendGenericToolTip.close)
  return close_;
}
void CDOTAUserMsg_SendGenericToolTip::set_close(bool value) {
  set_has_close();
  close_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_SendGenericToolTip.close)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_WorldLine::kPlayerIdFieldNumber;
const int CDOTAUserMsg_WorldLine::kWorldlineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_WorldLine::CDOTAUserMsg_WorldLine()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_WorldLine)
}
CDOTAUserMsg_WorldLine::CDOTAUserMsg_WorldLine(const CDOTAUserMsg_WorldLine& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_worldline()) {
    worldline_ = new ::proto::dota::CDOTAMsg_WorldLine(*from.worldline_);
  } else {
    worldline_ = NULL;
  }
  player_id_ = from.player_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_WorldLine)
}

void CDOTAUserMsg_WorldLine::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&worldline_, 0, reinterpret_cast<char*>(&player_id_) -
    reinterpret_cast<char*>(&worldline_) + sizeof(player_id_));
}

CDOTAUserMsg_WorldLine::~CDOTAUserMsg_WorldLine() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_WorldLine)
  SharedDtor();
}

void CDOTAUserMsg_WorldLine::SharedDtor() {
  if (this != internal_default_instance()) {
    delete worldline_;
  }
}

void CDOTAUserMsg_WorldLine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_WorldLine::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_WorldLine& CDOTAUserMsg_WorldLine::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_WorldLine* CDOTAUserMsg_WorldLine::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_WorldLine* n = new CDOTAUserMsg_WorldLine;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_WorldLine::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_WorldLine)
  if (has_worldline()) {
    GOOGLE_DCHECK(worldline_ != NULL);
    worldline_->::proto::dota::CDOTAMsg_WorldLine::Clear();
  }
  player_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_WorldLine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_WorldLine)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_player_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CDOTAMsg_WorldLine worldline = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_worldline()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_WorldLine)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_WorldLine)
  return false;
#undef DO_
}

void CDOTAUserMsg_WorldLine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_WorldLine)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 player_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player_id(), output);
  }

  // optional .proto.dota.CDOTAMsg_WorldLine worldline = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->worldline_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_WorldLine)
}

::google::protobuf::uint8* CDOTAUserMsg_WorldLine::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_WorldLine)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 player_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player_id(), target);
  }

  // optional .proto.dota.CDOTAMsg_WorldLine worldline = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->worldline_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_WorldLine)
  return target;
}

size_t CDOTAUserMsg_WorldLine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_WorldLine)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .proto.dota.CDOTAMsg_WorldLine worldline = 2;
    if (has_worldline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->worldline_);
    }

    // optional int32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_WorldLine::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_WorldLine)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_WorldLine* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_WorldLine>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_WorldLine)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_WorldLine)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_WorldLine::MergeFrom(const CDOTAUserMsg_WorldLine& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_WorldLine)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_worldline()->::proto::dota::CDOTAMsg_WorldLine::MergeFrom(from.worldline());
    }
    if (cached_has_bits & 0x00000002u) {
      player_id_ = from.player_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_WorldLine::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_WorldLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_WorldLine::CopyFrom(const CDOTAUserMsg_WorldLine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_WorldLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_WorldLine::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_WorldLine::Swap(CDOTAUserMsg_WorldLine* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_WorldLine::InternalSwap(CDOTAUserMsg_WorldLine* other) {
  std::swap(worldline_, other->worldline_);
  std::swap(player_id_, other->player_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_WorldLine::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_WorldLine

// optional int32 player_id = 1;
bool CDOTAUserMsg_WorldLine::has_player_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAUserMsg_WorldLine::set_has_player_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAUserMsg_WorldLine::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAUserMsg_WorldLine::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
::google::protobuf::int32 CDOTAUserMsg_WorldLine::player_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_WorldLine.player_id)
  return player_id_;
}
void CDOTAUserMsg_WorldLine::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_WorldLine.player_id)
}

// optional .proto.dota.CDOTAMsg_WorldLine worldline = 2;
bool CDOTAUserMsg_WorldLine::has_worldline() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_WorldLine::set_has_worldline() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_WorldLine::clear_has_worldline() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_WorldLine::clear_worldline() {
  if (worldline_ != NULL) worldline_->::proto::dota::CDOTAMsg_WorldLine::Clear();
  clear_has_worldline();
}
const ::proto::dota::CDOTAMsg_WorldLine& CDOTAUserMsg_WorldLine::worldline() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_WorldLine.worldline)
  return worldline_ != NULL ? *worldline_
                         : *::proto::dota::CDOTAMsg_WorldLine::internal_default_instance();
}
::proto::dota::CDOTAMsg_WorldLine* CDOTAUserMsg_WorldLine::mutable_worldline() {
  set_has_worldline();
  if (worldline_ == NULL) {
    worldline_ = new ::proto::dota::CDOTAMsg_WorldLine;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_WorldLine.worldline)
  return worldline_;
}
::proto::dota::CDOTAMsg_WorldLine* CDOTAUserMsg_WorldLine::release_worldline() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAUserMsg_WorldLine.worldline)
  clear_has_worldline();
  ::proto::dota::CDOTAMsg_WorldLine* temp = worldline_;
  worldline_ = NULL;
  return temp;
}
void CDOTAUserMsg_WorldLine::set_allocated_worldline(::proto::dota::CDOTAMsg_WorldLine* worldline) {
  delete worldline_;
  worldline_ = worldline;
  if (worldline) {
    set_has_worldline();
  } else {
    clear_has_worldline();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAUserMsg_WorldLine.worldline)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_ChatWheel::kChatMessageIdFieldNumber;
const int CDOTAUserMsg_ChatWheel::kPlayerIdFieldNumber;
const int CDOTAUserMsg_ChatWheel::kAccountIdFieldNumber;
const int CDOTAUserMsg_ChatWheel::kParamHeroIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_ChatWheel::CDOTAUserMsg_ChatWheel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_ChatWheel)
}
CDOTAUserMsg_ChatWheel::CDOTAUserMsg_ChatWheel(const CDOTAUserMsg_ChatWheel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&chat_message_id_, &from.chat_message_id_,
    reinterpret_cast<char*>(&param_hero_id_) -
    reinterpret_cast<char*>(&chat_message_id_) + sizeof(param_hero_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_ChatWheel)
}

void CDOTAUserMsg_ChatWheel::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&chat_message_id_, 0, reinterpret_cast<char*>(&param_hero_id_) -
    reinterpret_cast<char*>(&chat_message_id_) + sizeof(param_hero_id_));
}

CDOTAUserMsg_ChatWheel::~CDOTAUserMsg_ChatWheel() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_ChatWheel)
  SharedDtor();
}

void CDOTAUserMsg_ChatWheel::SharedDtor() {
}

void CDOTAUserMsg_ChatWheel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_ChatWheel::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_ChatWheel& CDOTAUserMsg_ChatWheel::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_ChatWheel* CDOTAUserMsg_ChatWheel::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_ChatWheel* n = new CDOTAUserMsg_ChatWheel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_ChatWheel::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_ChatWheel)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&chat_message_id_, 0, reinterpret_cast<char*>(&param_hero_id_) -
      reinterpret_cast<char*>(&chat_message_id_) + sizeof(param_hero_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_ChatWheel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_ChatWheel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 chat_message_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_chat_message_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chat_message_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 player_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_player_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 account_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 param_hero_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_param_hero_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &param_hero_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_ChatWheel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_ChatWheel)
  return false;
#undef DO_
}

void CDOTAUserMsg_ChatWheel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_ChatWheel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 chat_message_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->chat_message_id(), output);
  }

  // optional uint32 player_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->player_id(), output);
  }

  // optional uint32 account_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->account_id(), output);
  }

  // optional uint32 param_hero_id = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->param_hero_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_ChatWheel)
}

::google::protobuf::uint8* CDOTAUserMsg_ChatWheel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_ChatWheel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 chat_message_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->chat_message_id(), target);
  }

  // optional uint32 player_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->player_id(), target);
  }

  // optional uint32 account_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->account_id(), target);
  }

  // optional uint32 param_hero_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->param_hero_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_ChatWheel)
  return target;
}

size_t CDOTAUserMsg_ChatWheel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_ChatWheel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional uint32 chat_message_id = 1;
    if (has_chat_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chat_message_id());
    }

    // optional uint32 player_id = 2;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_id());
    }

    // optional uint32 account_id = 3;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 param_hero_id = 4;
    if (has_param_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->param_hero_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_ChatWheel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_ChatWheel)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_ChatWheel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_ChatWheel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_ChatWheel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_ChatWheel)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_ChatWheel::MergeFrom(const CDOTAUserMsg_ChatWheel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_ChatWheel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      chat_message_id_ = from.chat_message_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      player_id_ = from.player_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      param_hero_id_ = from.param_hero_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_ChatWheel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_ChatWheel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_ChatWheel::CopyFrom(const CDOTAUserMsg_ChatWheel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_ChatWheel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ChatWheel::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_ChatWheel::Swap(CDOTAUserMsg_ChatWheel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_ChatWheel::InternalSwap(CDOTAUserMsg_ChatWheel* other) {
  std::swap(chat_message_id_, other->chat_message_id_);
  std::swap(player_id_, other->player_id_);
  std::swap(account_id_, other->account_id_);
  std::swap(param_hero_id_, other->param_hero_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_ChatWheel::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_ChatWheel

// optional uint32 chat_message_id = 1;
bool CDOTAUserMsg_ChatWheel::has_chat_message_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_ChatWheel::set_has_chat_message_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_ChatWheel::clear_has_chat_message_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_ChatWheel::clear_chat_message_id() {
  chat_message_id_ = 0u;
  clear_has_chat_message_id();
}
::google::protobuf::uint32 CDOTAUserMsg_ChatWheel::chat_message_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ChatWheel.chat_message_id)
  return chat_message_id_;
}
void CDOTAUserMsg_ChatWheel::set_chat_message_id(::google::protobuf::uint32 value) {
  set_has_chat_message_id();
  chat_message_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_ChatWheel.chat_message_id)
}

// optional uint32 player_id = 2;
bool CDOTAUserMsg_ChatWheel::has_player_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAUserMsg_ChatWheel::set_has_player_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAUserMsg_ChatWheel::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAUserMsg_ChatWheel::clear_player_id() {
  player_id_ = 0u;
  clear_has_player_id();
}
::google::protobuf::uint32 CDOTAUserMsg_ChatWheel::player_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ChatWheel.player_id)
  return player_id_;
}
void CDOTAUserMsg_ChatWheel::set_player_id(::google::protobuf::uint32 value) {
  set_has_player_id();
  player_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_ChatWheel.player_id)
}

// optional uint32 account_id = 3;
bool CDOTAUserMsg_ChatWheel::has_account_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDOTAUserMsg_ChatWheel::set_has_account_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CDOTAUserMsg_ChatWheel::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDOTAUserMsg_ChatWheel::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
::google::protobuf::uint32 CDOTAUserMsg_ChatWheel::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ChatWheel.account_id)
  return account_id_;
}
void CDOTAUserMsg_ChatWheel::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_ChatWheel.account_id)
}

// optional uint32 param_hero_id = 4;
bool CDOTAUserMsg_ChatWheel::has_param_hero_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CDOTAUserMsg_ChatWheel::set_has_param_hero_id() {
  _has_bits_[0] |= 0x00000008u;
}
void CDOTAUserMsg_ChatWheel::clear_has_param_hero_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void CDOTAUserMsg_ChatWheel::clear_param_hero_id() {
  param_hero_id_ = 0u;
  clear_has_param_hero_id();
}
::google::protobuf::uint32 CDOTAUserMsg_ChatWheel::param_hero_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ChatWheel.param_hero_id)
  return param_hero_id_;
}
void CDOTAUserMsg_ChatWheel::set_param_hero_id(::google::protobuf::uint32 value) {
  set_has_param_hero_id();
  param_hero_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_ChatWheel.param_hero_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_ReceivedXmasGift::kPlayerIdFieldNumber;
const int CDOTAUserMsg_ReceivedXmasGift::kItemNameFieldNumber;
const int CDOTAUserMsg_ReceivedXmasGift::kInventorySlotFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_ReceivedXmasGift::CDOTAUserMsg_ReceivedXmasGift()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_ReceivedXmasGift)
}
CDOTAUserMsg_ReceivedXmasGift::CDOTAUserMsg_ReceivedXmasGift(const CDOTAUserMsg_ReceivedXmasGift& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  item_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_item_name()) {
    item_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.item_name_);
  }
  ::memcpy(&player_id_, &from.player_id_,
    reinterpret_cast<char*>(&inventory_slot_) -
    reinterpret_cast<char*>(&player_id_) + sizeof(inventory_slot_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_ReceivedXmasGift)
}

void CDOTAUserMsg_ReceivedXmasGift::SharedCtor() {
  _cached_size_ = 0;
  item_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&player_id_, 0, reinterpret_cast<char*>(&inventory_slot_) -
    reinterpret_cast<char*>(&player_id_) + sizeof(inventory_slot_));
}

CDOTAUserMsg_ReceivedXmasGift::~CDOTAUserMsg_ReceivedXmasGift() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_ReceivedXmasGift)
  SharedDtor();
}

void CDOTAUserMsg_ReceivedXmasGift::SharedDtor() {
  item_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CDOTAUserMsg_ReceivedXmasGift::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_ReceivedXmasGift::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_ReceivedXmasGift& CDOTAUserMsg_ReceivedXmasGift::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_ReceivedXmasGift* CDOTAUserMsg_ReceivedXmasGift::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_ReceivedXmasGift* n = new CDOTAUserMsg_ReceivedXmasGift;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_ReceivedXmasGift::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_ReceivedXmasGift)
  if (has_item_name()) {
    GOOGLE_DCHECK(!item_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*item_name_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&player_id_, 0, reinterpret_cast<char*>(&inventory_slot_) -
      reinterpret_cast<char*>(&player_id_) + sizeof(inventory_slot_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_ReceivedXmasGift::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_ReceivedXmasGift)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_player_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string item_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_item_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->item_name().data(), this->item_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDOTAUserMsg_ReceivedXmasGift.item_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 inventory_slot = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_inventory_slot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inventory_slot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_ReceivedXmasGift)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_ReceivedXmasGift)
  return false;
#undef DO_
}

void CDOTAUserMsg_ReceivedXmasGift::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_ReceivedXmasGift)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 player_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player_id(), output);
  }

  // optional string item_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->item_name().data(), this->item_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAUserMsg_ReceivedXmasGift.item_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->item_name(), output);
  }

  // optional int32 inventory_slot = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->inventory_slot(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_ReceivedXmasGift)
}

::google::protobuf::uint8* CDOTAUserMsg_ReceivedXmasGift::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_ReceivedXmasGift)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 player_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player_id(), target);
  }

  // optional string item_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->item_name().data(), this->item_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAUserMsg_ReceivedXmasGift.item_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->item_name(), target);
  }

  // optional int32 inventory_slot = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->inventory_slot(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_ReceivedXmasGift)
  return target;
}

size_t CDOTAUserMsg_ReceivedXmasGift::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_ReceivedXmasGift)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string item_name = 2;
    if (has_item_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->item_name());
    }

    // optional int32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // optional int32 inventory_slot = 3;
    if (has_inventory_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inventory_slot());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_ReceivedXmasGift::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_ReceivedXmasGift)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_ReceivedXmasGift* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_ReceivedXmasGift>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_ReceivedXmasGift)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_ReceivedXmasGift)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_ReceivedXmasGift::MergeFrom(const CDOTAUserMsg_ReceivedXmasGift& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_ReceivedXmasGift)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_item_name();
      item_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.item_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      player_id_ = from.player_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      inventory_slot_ = from.inventory_slot_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_ReceivedXmasGift::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_ReceivedXmasGift)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_ReceivedXmasGift::CopyFrom(const CDOTAUserMsg_ReceivedXmasGift& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_ReceivedXmasGift)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ReceivedXmasGift::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_ReceivedXmasGift::Swap(CDOTAUserMsg_ReceivedXmasGift* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_ReceivedXmasGift::InternalSwap(CDOTAUserMsg_ReceivedXmasGift* other) {
  item_name_.Swap(&other->item_name_);
  std::swap(player_id_, other->player_id_);
  std::swap(inventory_slot_, other->inventory_slot_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_ReceivedXmasGift::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_ReceivedXmasGift

// optional int32 player_id = 1;
bool CDOTAUserMsg_ReceivedXmasGift::has_player_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAUserMsg_ReceivedXmasGift::set_has_player_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAUserMsg_ReceivedXmasGift::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAUserMsg_ReceivedXmasGift::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
::google::protobuf::int32 CDOTAUserMsg_ReceivedXmasGift::player_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ReceivedXmasGift.player_id)
  return player_id_;
}
void CDOTAUserMsg_ReceivedXmasGift::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_ReceivedXmasGift.player_id)
}

// optional string item_name = 2;
bool CDOTAUserMsg_ReceivedXmasGift::has_item_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_ReceivedXmasGift::set_has_item_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_ReceivedXmasGift::clear_has_item_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_ReceivedXmasGift::clear_item_name() {
  item_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_item_name();
}
const ::std::string& CDOTAUserMsg_ReceivedXmasGift::item_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ReceivedXmasGift.item_name)
  return item_name_.GetNoArena();
}
void CDOTAUserMsg_ReceivedXmasGift::set_item_name(const ::std::string& value) {
  set_has_item_name();
  item_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_ReceivedXmasGift.item_name)
}
#if LANG_CXX11
void CDOTAUserMsg_ReceivedXmasGift::set_item_name(::std::string&& value) {
  set_has_item_name();
  item_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDOTAUserMsg_ReceivedXmasGift.item_name)
}
#endif
void CDOTAUserMsg_ReceivedXmasGift::set_item_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_item_name();
  item_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDOTAUserMsg_ReceivedXmasGift.item_name)
}
void CDOTAUserMsg_ReceivedXmasGift::set_item_name(const char* value, size_t size) {
  set_has_item_name();
  item_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDOTAUserMsg_ReceivedXmasGift.item_name)
}
::std::string* CDOTAUserMsg_ReceivedXmasGift::mutable_item_name() {
  set_has_item_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_ReceivedXmasGift.item_name)
  return item_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDOTAUserMsg_ReceivedXmasGift::release_item_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAUserMsg_ReceivedXmasGift.item_name)
  clear_has_item_name();
  return item_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDOTAUserMsg_ReceivedXmasGift::set_allocated_item_name(::std::string* item_name) {
  if (item_name != NULL) {
    set_has_item_name();
  } else {
    clear_has_item_name();
  }
  item_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), item_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAUserMsg_ReceivedXmasGift.item_name)
}

// optional int32 inventory_slot = 3;
bool CDOTAUserMsg_ReceivedXmasGift::has_inventory_slot() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDOTAUserMsg_ReceivedXmasGift::set_has_inventory_slot() {
  _has_bits_[0] |= 0x00000004u;
}
void CDOTAUserMsg_ReceivedXmasGift::clear_has_inventory_slot() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDOTAUserMsg_ReceivedXmasGift::clear_inventory_slot() {
  inventory_slot_ = 0;
  clear_has_inventory_slot();
}
::google::protobuf::int32 CDOTAUserMsg_ReceivedXmasGift::inventory_slot() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ReceivedXmasGift.inventory_slot)
  return inventory_slot_;
}
void CDOTAUserMsg_ReceivedXmasGift::set_inventory_slot(::google::protobuf::int32 value) {
  set_has_inventory_slot();
  inventory_slot_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_ReceivedXmasGift.inventory_slot)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_ShowSurvey::kSurveyIdFieldNumber;
const int CDOTAUserMsg_ShowSurvey::kMatchIdFieldNumber;
const int CDOTAUserMsg_ShowSurvey::kResponseStyleFieldNumber;
const int CDOTAUserMsg_ShowSurvey::kTeammateHeroIdFieldNumber;
const int CDOTAUserMsg_ShowSurvey::kTeammateNameFieldNumber;
const int CDOTAUserMsg_ShowSurvey::kTeammateAccountIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_ShowSurvey::CDOTAUserMsg_ShowSurvey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_ShowSurvey)
}
CDOTAUserMsg_ShowSurvey::CDOTAUserMsg_ShowSurvey(const CDOTAUserMsg_ShowSurvey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  response_style_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_response_style()) {
    response_style_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.response_style_);
  }
  teammate_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_teammate_name()) {
    teammate_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.teammate_name_);
  }
  ::memcpy(&match_id_, &from.match_id_,
    reinterpret_cast<char*>(&teammate_account_id_) -
    reinterpret_cast<char*>(&match_id_) + sizeof(teammate_account_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_ShowSurvey)
}

void CDOTAUserMsg_ShowSurvey::SharedCtor() {
  _cached_size_ = 0;
  response_style_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  teammate_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&match_id_, 0, reinterpret_cast<char*>(&teammate_account_id_) -
    reinterpret_cast<char*>(&match_id_) + sizeof(teammate_account_id_));
}

CDOTAUserMsg_ShowSurvey::~CDOTAUserMsg_ShowSurvey() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_ShowSurvey)
  SharedDtor();
}

void CDOTAUserMsg_ShowSurvey::SharedDtor() {
  response_style_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  teammate_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CDOTAUserMsg_ShowSurvey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_ShowSurvey::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_ShowSurvey& CDOTAUserMsg_ShowSurvey::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_ShowSurvey* CDOTAUserMsg_ShowSurvey::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_ShowSurvey* n = new CDOTAUserMsg_ShowSurvey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_ShowSurvey::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_ShowSurvey)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_response_style()) {
      GOOGLE_DCHECK(!response_style_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*response_style_.UnsafeRawStringPointer())->clear();
    }
    if (has_teammate_name()) {
      GOOGLE_DCHECK(!teammate_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*teammate_name_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 60u) {
    ::memset(&match_id_, 0, reinterpret_cast<char*>(&teammate_account_id_) -
      reinterpret_cast<char*>(&match_id_) + sizeof(teammate_account_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_ShowSurvey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_ShowSurvey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 survey_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_survey_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &survey_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 match_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_match_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string response_style = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_response_style()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->response_style().data(), this->response_style().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDOTAUserMsg_ShowSurvey.response_style");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 teammate_hero_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_teammate_hero_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teammate_hero_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string teammate_name = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_teammate_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->teammate_name().data(), this->teammate_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDOTAUserMsg_ShowSurvey.teammate_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 teammate_account_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_teammate_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teammate_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_ShowSurvey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_ShowSurvey)
  return false;
#undef DO_
}

void CDOTAUserMsg_ShowSurvey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_ShowSurvey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 survey_id = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->survey_id(), output);
  }

  // optional uint64 match_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->match_id(), output);
  }

  // optional string response_style = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->response_style().data(), this->response_style().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAUserMsg_ShowSurvey.response_style");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->response_style(), output);
  }

  // optional uint32 teammate_hero_id = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->teammate_hero_id(), output);
  }

  // optional string teammate_name = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->teammate_name().data(), this->teammate_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAUserMsg_ShowSurvey.teammate_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->teammate_name(), output);
  }

  // optional uint32 teammate_account_id = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->teammate_account_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_ShowSurvey)
}

::google::protobuf::uint8* CDOTAUserMsg_ShowSurvey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_ShowSurvey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 survey_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->survey_id(), target);
  }

  // optional uint64 match_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->match_id(), target);
  }

  // optional string response_style = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->response_style().data(), this->response_style().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAUserMsg_ShowSurvey.response_style");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->response_style(), target);
  }

  // optional uint32 teammate_hero_id = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->teammate_hero_id(), target);
  }

  // optional string teammate_name = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->teammate_name().data(), this->teammate_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAUserMsg_ShowSurvey.teammate_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->teammate_name(), target);
  }

  // optional uint32 teammate_account_id = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->teammate_account_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_ShowSurvey)
  return target;
}

size_t CDOTAUserMsg_ShowSurvey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_ShowSurvey)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional string response_style = 3;
    if (has_response_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->response_style());
    }

    // optional string teammate_name = 5;
    if (has_teammate_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->teammate_name());
    }

    // optional uint64 match_id = 2;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

    // optional int32 survey_id = 1;
    if (has_survey_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->survey_id());
    }

    // optional uint32 teammate_hero_id = 4;
    if (has_teammate_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teammate_hero_id());
    }

    // optional uint32 teammate_account_id = 6;
    if (has_teammate_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teammate_account_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_ShowSurvey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_ShowSurvey)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_ShowSurvey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_ShowSurvey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_ShowSurvey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_ShowSurvey)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_ShowSurvey::MergeFrom(const CDOTAUserMsg_ShowSurvey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_ShowSurvey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_response_style();
      response_style_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.response_style_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_teammate_name();
      teammate_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.teammate_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      survey_id_ = from.survey_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      teammate_hero_id_ = from.teammate_hero_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      teammate_account_id_ = from.teammate_account_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_ShowSurvey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_ShowSurvey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_ShowSurvey::CopyFrom(const CDOTAUserMsg_ShowSurvey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_ShowSurvey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ShowSurvey::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_ShowSurvey::Swap(CDOTAUserMsg_ShowSurvey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_ShowSurvey::InternalSwap(CDOTAUserMsg_ShowSurvey* other) {
  response_style_.Swap(&other->response_style_);
  teammate_name_.Swap(&other->teammate_name_);
  std::swap(match_id_, other->match_id_);
  std::swap(survey_id_, other->survey_id_);
  std::swap(teammate_hero_id_, other->teammate_hero_id_);
  std::swap(teammate_account_id_, other->teammate_account_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_ShowSurvey::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_ShowSurvey

// optional int32 survey_id = 1;
bool CDOTAUserMsg_ShowSurvey::has_survey_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CDOTAUserMsg_ShowSurvey::set_has_survey_id() {
  _has_bits_[0] |= 0x00000008u;
}
void CDOTAUserMsg_ShowSurvey::clear_has_survey_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void CDOTAUserMsg_ShowSurvey::clear_survey_id() {
  survey_id_ = 0;
  clear_has_survey_id();
}
::google::protobuf::int32 CDOTAUserMsg_ShowSurvey::survey_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ShowSurvey.survey_id)
  return survey_id_;
}
void CDOTAUserMsg_ShowSurvey::set_survey_id(::google::protobuf::int32 value) {
  set_has_survey_id();
  survey_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_ShowSurvey.survey_id)
}

// optional uint64 match_id = 2;
bool CDOTAUserMsg_ShowSurvey::has_match_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDOTAUserMsg_ShowSurvey::set_has_match_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CDOTAUserMsg_ShowSurvey::clear_has_match_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDOTAUserMsg_ShowSurvey::clear_match_id() {
  match_id_ = GOOGLE_ULONGLONG(0);
  clear_has_match_id();
}
::google::protobuf::uint64 CDOTAUserMsg_ShowSurvey::match_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ShowSurvey.match_id)
  return match_id_;
}
void CDOTAUserMsg_ShowSurvey::set_match_id(::google::protobuf::uint64 value) {
  set_has_match_id();
  match_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_ShowSurvey.match_id)
}

// optional string response_style = 3;
bool CDOTAUserMsg_ShowSurvey::has_response_style() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_ShowSurvey::set_has_response_style() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_ShowSurvey::clear_has_response_style() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_ShowSurvey::clear_response_style() {
  response_style_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_response_style();
}
const ::std::string& CDOTAUserMsg_ShowSurvey::response_style() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ShowSurvey.response_style)
  return response_style_.GetNoArena();
}
void CDOTAUserMsg_ShowSurvey::set_response_style(const ::std::string& value) {
  set_has_response_style();
  response_style_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_ShowSurvey.response_style)
}
#if LANG_CXX11
void CDOTAUserMsg_ShowSurvey::set_response_style(::std::string&& value) {
  set_has_response_style();
  response_style_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDOTAUserMsg_ShowSurvey.response_style)
}
#endif
void CDOTAUserMsg_ShowSurvey::set_response_style(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_response_style();
  response_style_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDOTAUserMsg_ShowSurvey.response_style)
}
void CDOTAUserMsg_ShowSurvey::set_response_style(const char* value, size_t size) {
  set_has_response_style();
  response_style_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDOTAUserMsg_ShowSurvey.response_style)
}
::std::string* CDOTAUserMsg_ShowSurvey::mutable_response_style() {
  set_has_response_style();
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_ShowSurvey.response_style)
  return response_style_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDOTAUserMsg_ShowSurvey::release_response_style() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAUserMsg_ShowSurvey.response_style)
  clear_has_response_style();
  return response_style_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDOTAUserMsg_ShowSurvey::set_allocated_response_style(::std::string* response_style) {
  if (response_style != NULL) {
    set_has_response_style();
  } else {
    clear_has_response_style();
  }
  response_style_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), response_style);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAUserMsg_ShowSurvey.response_style)
}

// optional uint32 teammate_hero_id = 4;
bool CDOTAUserMsg_ShowSurvey::has_teammate_hero_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CDOTAUserMsg_ShowSurvey::set_has_teammate_hero_id() {
  _has_bits_[0] |= 0x00000010u;
}
void CDOTAUserMsg_ShowSurvey::clear_has_teammate_hero_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void CDOTAUserMsg_ShowSurvey::clear_teammate_hero_id() {
  teammate_hero_id_ = 0u;
  clear_has_teammate_hero_id();
}
::google::protobuf::uint32 CDOTAUserMsg_ShowSurvey::teammate_hero_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ShowSurvey.teammate_hero_id)
  return teammate_hero_id_;
}
void CDOTAUserMsg_ShowSurvey::set_teammate_hero_id(::google::protobuf::uint32 value) {
  set_has_teammate_hero_id();
  teammate_hero_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_ShowSurvey.teammate_hero_id)
}

// optional string teammate_name = 5;
bool CDOTAUserMsg_ShowSurvey::has_teammate_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAUserMsg_ShowSurvey::set_has_teammate_name() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAUserMsg_ShowSurvey::clear_has_teammate_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAUserMsg_ShowSurvey::clear_teammate_name() {
  teammate_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_teammate_name();
}
const ::std::string& CDOTAUserMsg_ShowSurvey::teammate_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ShowSurvey.teammate_name)
  return teammate_name_.GetNoArena();
}
void CDOTAUserMsg_ShowSurvey::set_teammate_name(const ::std::string& value) {
  set_has_teammate_name();
  teammate_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_ShowSurvey.teammate_name)
}
#if LANG_CXX11
void CDOTAUserMsg_ShowSurvey::set_teammate_name(::std::string&& value) {
  set_has_teammate_name();
  teammate_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDOTAUserMsg_ShowSurvey.teammate_name)
}
#endif
void CDOTAUserMsg_ShowSurvey::set_teammate_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_teammate_name();
  teammate_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDOTAUserMsg_ShowSurvey.teammate_name)
}
void CDOTAUserMsg_ShowSurvey::set_teammate_name(const char* value, size_t size) {
  set_has_teammate_name();
  teammate_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDOTAUserMsg_ShowSurvey.teammate_name)
}
::std::string* CDOTAUserMsg_ShowSurvey::mutable_teammate_name() {
  set_has_teammate_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_ShowSurvey.teammate_name)
  return teammate_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDOTAUserMsg_ShowSurvey::release_teammate_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAUserMsg_ShowSurvey.teammate_name)
  clear_has_teammate_name();
  return teammate_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDOTAUserMsg_ShowSurvey::set_allocated_teammate_name(::std::string* teammate_name) {
  if (teammate_name != NULL) {
    set_has_teammate_name();
  } else {
    clear_has_teammate_name();
  }
  teammate_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), teammate_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAUserMsg_ShowSurvey.teammate_name)
}

// optional uint32 teammate_account_id = 6;
bool CDOTAUserMsg_ShowSurvey::has_teammate_account_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CDOTAUserMsg_ShowSurvey::set_has_teammate_account_id() {
  _has_bits_[0] |= 0x00000020u;
}
void CDOTAUserMsg_ShowSurvey::clear_has_teammate_account_id() {
  _has_bits_[0] &= ~0x00000020u;
}
void CDOTAUserMsg_ShowSurvey::clear_teammate_account_id() {
  teammate_account_id_ = 0u;
  clear_has_teammate_account_id();
}
::google::protobuf::uint32 CDOTAUserMsg_ShowSurvey::teammate_account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ShowSurvey.teammate_account_id)
  return teammate_account_id_;
}
void CDOTAUserMsg_ShowSurvey::set_teammate_account_id(::google::protobuf::uint32 value) {
  set_has_teammate_account_id();
  teammate_account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_ShowSurvey.teammate_account_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_UpdateSharedContent::kSlotTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_UpdateSharedContent::CDOTAUserMsg_UpdateSharedContent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_UpdateSharedContent)
}
CDOTAUserMsg_UpdateSharedContent::CDOTAUserMsg_UpdateSharedContent(const CDOTAUserMsg_UpdateSharedContent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  slot_type_ = from.slot_type_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_UpdateSharedContent)
}

void CDOTAUserMsg_UpdateSharedContent::SharedCtor() {
  _cached_size_ = 0;
  slot_type_ = 0;
}

CDOTAUserMsg_UpdateSharedContent::~CDOTAUserMsg_UpdateSharedContent() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_UpdateSharedContent)
  SharedDtor();
}

void CDOTAUserMsg_UpdateSharedContent::SharedDtor() {
}

void CDOTAUserMsg_UpdateSharedContent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_UpdateSharedContent::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_UpdateSharedContent& CDOTAUserMsg_UpdateSharedContent::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_UpdateSharedContent* CDOTAUserMsg_UpdateSharedContent::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_UpdateSharedContent* n = new CDOTAUserMsg_UpdateSharedContent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_UpdateSharedContent::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_UpdateSharedContent)
  slot_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_UpdateSharedContent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_UpdateSharedContent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 slot_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_slot_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_UpdateSharedContent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_UpdateSharedContent)
  return false;
#undef DO_
}

void CDOTAUserMsg_UpdateSharedContent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_UpdateSharedContent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 slot_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->slot_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_UpdateSharedContent)
}

::google::protobuf::uint8* CDOTAUserMsg_UpdateSharedContent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_UpdateSharedContent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 slot_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->slot_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_UpdateSharedContent)
  return target;
}

size_t CDOTAUserMsg_UpdateSharedContent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_UpdateSharedContent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional int32 slot_type = 1;
  if (has_slot_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->slot_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_UpdateSharedContent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_UpdateSharedContent)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_UpdateSharedContent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_UpdateSharedContent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_UpdateSharedContent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_UpdateSharedContent)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_UpdateSharedContent::MergeFrom(const CDOTAUserMsg_UpdateSharedContent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_UpdateSharedContent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_slot_type()) {
    set_slot_type(from.slot_type());
  }
}

void CDOTAUserMsg_UpdateSharedContent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_UpdateSharedContent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_UpdateSharedContent::CopyFrom(const CDOTAUserMsg_UpdateSharedContent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_UpdateSharedContent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_UpdateSharedContent::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_UpdateSharedContent::Swap(CDOTAUserMsg_UpdateSharedContent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_UpdateSharedContent::InternalSwap(CDOTAUserMsg_UpdateSharedContent* other) {
  std::swap(slot_type_, other->slot_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_UpdateSharedContent::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_UpdateSharedContent

// optional int32 slot_type = 1;
bool CDOTAUserMsg_UpdateSharedContent::has_slot_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_UpdateSharedContent::set_has_slot_type() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_UpdateSharedContent::clear_has_slot_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_UpdateSharedContent::clear_slot_type() {
  slot_type_ = 0;
  clear_has_slot_type();
}
::google::protobuf::int32 CDOTAUserMsg_UpdateSharedContent::slot_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_UpdateSharedContent.slot_type)
  return slot_type_;
}
void CDOTAUserMsg_UpdateSharedContent::set_slot_type(::google::protobuf::int32 value) {
  set_has_slot_type();
  slot_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_UpdateSharedContent.slot_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_TutorialRequestExp::CDOTAUserMsg_TutorialRequestExp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_TutorialRequestExp)
}
CDOTAUserMsg_TutorialRequestExp::CDOTAUserMsg_TutorialRequestExp(const CDOTAUserMsg_TutorialRequestExp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_TutorialRequestExp)
}

void CDOTAUserMsg_TutorialRequestExp::SharedCtor() {
  _cached_size_ = 0;
}

CDOTAUserMsg_TutorialRequestExp::~CDOTAUserMsg_TutorialRequestExp() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_TutorialRequestExp)
  SharedDtor();
}

void CDOTAUserMsg_TutorialRequestExp::SharedDtor() {
}

void CDOTAUserMsg_TutorialRequestExp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_TutorialRequestExp::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_TutorialRequestExp& CDOTAUserMsg_TutorialRequestExp::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_TutorialRequestExp* CDOTAUserMsg_TutorialRequestExp::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_TutorialRequestExp* n = new CDOTAUserMsg_TutorialRequestExp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_TutorialRequestExp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_TutorialRequestExp)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_TutorialRequestExp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_TutorialRequestExp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_TutorialRequestExp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_TutorialRequestExp)
  return false;
#undef DO_
}

void CDOTAUserMsg_TutorialRequestExp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_TutorialRequestExp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_TutorialRequestExp)
}

::google::protobuf::uint8* CDOTAUserMsg_TutorialRequestExp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_TutorialRequestExp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_TutorialRequestExp)
  return target;
}

size_t CDOTAUserMsg_TutorialRequestExp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_TutorialRequestExp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_TutorialRequestExp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_TutorialRequestExp)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_TutorialRequestExp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_TutorialRequestExp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_TutorialRequestExp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_TutorialRequestExp)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_TutorialRequestExp::MergeFrom(const CDOTAUserMsg_TutorialRequestExp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_TutorialRequestExp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CDOTAUserMsg_TutorialRequestExp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_TutorialRequestExp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_TutorialRequestExp::CopyFrom(const CDOTAUserMsg_TutorialRequestExp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_TutorialRequestExp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_TutorialRequestExp::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_TutorialRequestExp::Swap(CDOTAUserMsg_TutorialRequestExp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_TutorialRequestExp::InternalSwap(CDOTAUserMsg_TutorialRequestExp* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_TutorialRequestExp::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_TutorialRequestExp

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_TutorialFade::kTgtAlphaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_TutorialFade::CDOTAUserMsg_TutorialFade()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_TutorialFade)
}
CDOTAUserMsg_TutorialFade::CDOTAUserMsg_TutorialFade(const CDOTAUserMsg_TutorialFade& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tgt_alpha_ = from.tgt_alpha_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_TutorialFade)
}

void CDOTAUserMsg_TutorialFade::SharedCtor() {
  _cached_size_ = 0;
  tgt_alpha_ = 0;
}

CDOTAUserMsg_TutorialFade::~CDOTAUserMsg_TutorialFade() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_TutorialFade)
  SharedDtor();
}

void CDOTAUserMsg_TutorialFade::SharedDtor() {
}

void CDOTAUserMsg_TutorialFade::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_TutorialFade::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_TutorialFade& CDOTAUserMsg_TutorialFade::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_TutorialFade* CDOTAUserMsg_TutorialFade::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_TutorialFade* n = new CDOTAUserMsg_TutorialFade;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_TutorialFade::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_TutorialFade)
  tgt_alpha_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_TutorialFade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_TutorialFade)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 tgt_alpha = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_tgt_alpha();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tgt_alpha_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_TutorialFade)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_TutorialFade)
  return false;
#undef DO_
}

void CDOTAUserMsg_TutorialFade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_TutorialFade)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 tgt_alpha = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tgt_alpha(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_TutorialFade)
}

::google::protobuf::uint8* CDOTAUserMsg_TutorialFade::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_TutorialFade)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 tgt_alpha = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tgt_alpha(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_TutorialFade)
  return target;
}

size_t CDOTAUserMsg_TutorialFade::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_TutorialFade)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional int32 tgt_alpha = 1;
  if (has_tgt_alpha()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tgt_alpha());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_TutorialFade::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_TutorialFade)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_TutorialFade* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_TutorialFade>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_TutorialFade)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_TutorialFade)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_TutorialFade::MergeFrom(const CDOTAUserMsg_TutorialFade& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_TutorialFade)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_tgt_alpha()) {
    set_tgt_alpha(from.tgt_alpha());
  }
}

void CDOTAUserMsg_TutorialFade::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_TutorialFade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_TutorialFade::CopyFrom(const CDOTAUserMsg_TutorialFade& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_TutorialFade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_TutorialFade::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_TutorialFade::Swap(CDOTAUserMsg_TutorialFade* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_TutorialFade::InternalSwap(CDOTAUserMsg_TutorialFade* other) {
  std::swap(tgt_alpha_, other->tgt_alpha_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_TutorialFade::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_TutorialFade

// optional int32 tgt_alpha = 1;
bool CDOTAUserMsg_TutorialFade::has_tgt_alpha() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_TutorialFade::set_has_tgt_alpha() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_TutorialFade::clear_has_tgt_alpha() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_TutorialFade::clear_tgt_alpha() {
  tgt_alpha_ = 0;
  clear_has_tgt_alpha();
}
::google::protobuf::int32 CDOTAUserMsg_TutorialFade::tgt_alpha() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_TutorialFade.tgt_alpha)
  return tgt_alpha_;
}
void CDOTAUserMsg_TutorialFade::set_tgt_alpha(::google::protobuf::int32 value) {
  set_has_tgt_alpha();
  tgt_alpha_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_TutorialFade.tgt_alpha)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_TutorialPingMinimap::kPlayerIdFieldNumber;
const int CDOTAUserMsg_TutorialPingMinimap::kPosXFieldNumber;
const int CDOTAUserMsg_TutorialPingMinimap::kPosYFieldNumber;
const int CDOTAUserMsg_TutorialPingMinimap::kPosZFieldNumber;
const int CDOTAUserMsg_TutorialPingMinimap::kEntityIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_TutorialPingMinimap::CDOTAUserMsg_TutorialPingMinimap()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_TutorialPingMinimap)
}
CDOTAUserMsg_TutorialPingMinimap::CDOTAUserMsg_TutorialPingMinimap(const CDOTAUserMsg_TutorialPingMinimap& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&player_id_, &from.player_id_,
    reinterpret_cast<char*>(&entity_index_) -
    reinterpret_cast<char*>(&player_id_) + sizeof(entity_index_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_TutorialPingMinimap)
}

void CDOTAUserMsg_TutorialPingMinimap::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&player_id_, 0, reinterpret_cast<char*>(&entity_index_) -
    reinterpret_cast<char*>(&player_id_) + sizeof(entity_index_));
}

CDOTAUserMsg_TutorialPingMinimap::~CDOTAUserMsg_TutorialPingMinimap() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_TutorialPingMinimap)
  SharedDtor();
}

void CDOTAUserMsg_TutorialPingMinimap::SharedDtor() {
}

void CDOTAUserMsg_TutorialPingMinimap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_TutorialPingMinimap::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_TutorialPingMinimap& CDOTAUserMsg_TutorialPingMinimap::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_TutorialPingMinimap* CDOTAUserMsg_TutorialPingMinimap::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_TutorialPingMinimap* n = new CDOTAUserMsg_TutorialPingMinimap;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_TutorialPingMinimap::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_TutorialPingMinimap)
  if (_has_bits_[0 / 32] & 31u) {
    ::memset(&player_id_, 0, reinterpret_cast<char*>(&entity_index_) -
      reinterpret_cast<char*>(&player_id_) + sizeof(entity_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_TutorialPingMinimap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_TutorialPingMinimap)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_player_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float pos_x = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_pos_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pos_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float pos_y = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_pos_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pos_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float pos_z = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_pos_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pos_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 entity_index = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_entity_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entity_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_TutorialPingMinimap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_TutorialPingMinimap)
  return false;
#undef DO_
}

void CDOTAUserMsg_TutorialPingMinimap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_TutorialPingMinimap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_id(), output);
  }

  // optional float pos_x = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->pos_x(), output);
  }

  // optional float pos_y = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->pos_y(), output);
  }

  // optional float pos_z = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->pos_z(), output);
  }

  // optional int32 entity_index = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->entity_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_TutorialPingMinimap)
}

::google::protobuf::uint8* CDOTAUserMsg_TutorialPingMinimap::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_TutorialPingMinimap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_id(), target);
  }

  // optional float pos_x = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->pos_x(), target);
  }

  // optional float pos_y = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->pos_y(), target);
  }

  // optional float pos_z = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->pos_z(), target);
  }

  // optional int32 entity_index = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->entity_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_TutorialPingMinimap)
  return target;
}

size_t CDOTAUserMsg_TutorialPingMinimap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_TutorialPingMinimap)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional uint32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_id());
    }

    // optional float pos_x = 2;
    if (has_pos_x()) {
      total_size += 1 + 4;
    }

    // optional float pos_y = 3;
    if (has_pos_y()) {
      total_size += 1 + 4;
    }

    // optional float pos_z = 4;
    if (has_pos_z()) {
      total_size += 1 + 4;
    }

    // optional int32 entity_index = 5;
    if (has_entity_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entity_index());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_TutorialPingMinimap::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_TutorialPingMinimap)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_TutorialPingMinimap* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_TutorialPingMinimap>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_TutorialPingMinimap)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_TutorialPingMinimap)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_TutorialPingMinimap::MergeFrom(const CDOTAUserMsg_TutorialPingMinimap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_TutorialPingMinimap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      player_id_ = from.player_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      pos_x_ = from.pos_x_;
    }
    if (cached_has_bits & 0x00000004u) {
      pos_y_ = from.pos_y_;
    }
    if (cached_has_bits & 0x00000008u) {
      pos_z_ = from.pos_z_;
    }
    if (cached_has_bits & 0x00000010u) {
      entity_index_ = from.entity_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_TutorialPingMinimap::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_TutorialPingMinimap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_TutorialPingMinimap::CopyFrom(const CDOTAUserMsg_TutorialPingMinimap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_TutorialPingMinimap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_TutorialPingMinimap::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_TutorialPingMinimap::Swap(CDOTAUserMsg_TutorialPingMinimap* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_TutorialPingMinimap::InternalSwap(CDOTAUserMsg_TutorialPingMinimap* other) {
  std::swap(player_id_, other->player_id_);
  std::swap(pos_x_, other->pos_x_);
  std::swap(pos_y_, other->pos_y_);
  std::swap(pos_z_, other->pos_z_);
  std::swap(entity_index_, other->entity_index_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_TutorialPingMinimap::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_TutorialPingMinimap

// optional uint32 player_id = 1;
bool CDOTAUserMsg_TutorialPingMinimap::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_TutorialPingMinimap::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_TutorialPingMinimap::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_TutorialPingMinimap::clear_player_id() {
  player_id_ = 0u;
  clear_has_player_id();
}
::google::protobuf::uint32 CDOTAUserMsg_TutorialPingMinimap::player_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_TutorialPingMinimap.player_id)
  return player_id_;
}
void CDOTAUserMsg_TutorialPingMinimap::set_player_id(::google::protobuf::uint32 value) {
  set_has_player_id();
  player_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_TutorialPingMinimap.player_id)
}

// optional float pos_x = 2;
bool CDOTAUserMsg_TutorialPingMinimap::has_pos_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAUserMsg_TutorialPingMinimap::set_has_pos_x() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAUserMsg_TutorialPingMinimap::clear_has_pos_x() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAUserMsg_TutorialPingMinimap::clear_pos_x() {
  pos_x_ = 0;
  clear_has_pos_x();
}
float CDOTAUserMsg_TutorialPingMinimap::pos_x() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_TutorialPingMinimap.pos_x)
  return pos_x_;
}
void CDOTAUserMsg_TutorialPingMinimap::set_pos_x(float value) {
  set_has_pos_x();
  pos_x_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_TutorialPingMinimap.pos_x)
}

// optional float pos_y = 3;
bool CDOTAUserMsg_TutorialPingMinimap::has_pos_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDOTAUserMsg_TutorialPingMinimap::set_has_pos_y() {
  _has_bits_[0] |= 0x00000004u;
}
void CDOTAUserMsg_TutorialPingMinimap::clear_has_pos_y() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDOTAUserMsg_TutorialPingMinimap::clear_pos_y() {
  pos_y_ = 0;
  clear_has_pos_y();
}
float CDOTAUserMsg_TutorialPingMinimap::pos_y() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_TutorialPingMinimap.pos_y)
  return pos_y_;
}
void CDOTAUserMsg_TutorialPingMinimap::set_pos_y(float value) {
  set_has_pos_y();
  pos_y_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_TutorialPingMinimap.pos_y)
}

// optional float pos_z = 4;
bool CDOTAUserMsg_TutorialPingMinimap::has_pos_z() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CDOTAUserMsg_TutorialPingMinimap::set_has_pos_z() {
  _has_bits_[0] |= 0x00000008u;
}
void CDOTAUserMsg_TutorialPingMinimap::clear_has_pos_z() {
  _has_bits_[0] &= ~0x00000008u;
}
void CDOTAUserMsg_TutorialPingMinimap::clear_pos_z() {
  pos_z_ = 0;
  clear_has_pos_z();
}
float CDOTAUserMsg_TutorialPingMinimap::pos_z() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_TutorialPingMinimap.pos_z)
  return pos_z_;
}
void CDOTAUserMsg_TutorialPingMinimap::set_pos_z(float value) {
  set_has_pos_z();
  pos_z_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_TutorialPingMinimap.pos_z)
}

// optional int32 entity_index = 5;
bool CDOTAUserMsg_TutorialPingMinimap::has_entity_index() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CDOTAUserMsg_TutorialPingMinimap::set_has_entity_index() {
  _has_bits_[0] |= 0x00000010u;
}
void CDOTAUserMsg_TutorialPingMinimap::clear_has_entity_index() {
  _has_bits_[0] &= ~0x00000010u;
}
void CDOTAUserMsg_TutorialPingMinimap::clear_entity_index() {
  entity_index_ = 0;
  clear_has_entity_index();
}
::google::protobuf::int32 CDOTAUserMsg_TutorialPingMinimap::entity_index() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_TutorialPingMinimap.entity_index)
  return entity_index_;
}
void CDOTAUserMsg_TutorialPingMinimap::set_entity_index(::google::protobuf::int32 value) {
  set_has_entity_index();
  entity_index_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_TutorialPingMinimap.entity_index)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_GamerulesStateChanged::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_GamerulesStateChanged::CDOTAUserMsg_GamerulesStateChanged()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_GamerulesStateChanged)
}
CDOTAUserMsg_GamerulesStateChanged::CDOTAUserMsg_GamerulesStateChanged(const CDOTAUserMsg_GamerulesStateChanged& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_GamerulesStateChanged)
}

void CDOTAUserMsg_GamerulesStateChanged::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0u;
}

CDOTAUserMsg_GamerulesStateChanged::~CDOTAUserMsg_GamerulesStateChanged() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_GamerulesStateChanged)
  SharedDtor();
}

void CDOTAUserMsg_GamerulesStateChanged::SharedDtor() {
}

void CDOTAUserMsg_GamerulesStateChanged::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_GamerulesStateChanged::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_GamerulesStateChanged& CDOTAUserMsg_GamerulesStateChanged::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_GamerulesStateChanged* CDOTAUserMsg_GamerulesStateChanged::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_GamerulesStateChanged* n = new CDOTAUserMsg_GamerulesStateChanged;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_GamerulesStateChanged::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_GamerulesStateChanged)
  state_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_GamerulesStateChanged::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_GamerulesStateChanged)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_GamerulesStateChanged)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_GamerulesStateChanged)
  return false;
#undef DO_
}

void CDOTAUserMsg_GamerulesStateChanged::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_GamerulesStateChanged)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 state = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->state(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_GamerulesStateChanged)
}

::google::protobuf::uint8* CDOTAUserMsg_GamerulesStateChanged::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_GamerulesStateChanged)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 state = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->state(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_GamerulesStateChanged)
  return target;
}

size_t CDOTAUserMsg_GamerulesStateChanged::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_GamerulesStateChanged)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 state = 1;
  if (has_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_GamerulesStateChanged::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_GamerulesStateChanged)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_GamerulesStateChanged* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_GamerulesStateChanged>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_GamerulesStateChanged)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_GamerulesStateChanged)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_GamerulesStateChanged::MergeFrom(const CDOTAUserMsg_GamerulesStateChanged& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_GamerulesStateChanged)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_state()) {
    set_state(from.state());
  }
}

void CDOTAUserMsg_GamerulesStateChanged::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_GamerulesStateChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_GamerulesStateChanged::CopyFrom(const CDOTAUserMsg_GamerulesStateChanged& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_GamerulesStateChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_GamerulesStateChanged::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_GamerulesStateChanged::Swap(CDOTAUserMsg_GamerulesStateChanged* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_GamerulesStateChanged::InternalSwap(CDOTAUserMsg_GamerulesStateChanged* other) {
  std::swap(state_, other->state_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_GamerulesStateChanged::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_GamerulesStateChanged

// optional uint32 state = 1;
bool CDOTAUserMsg_GamerulesStateChanged::has_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_GamerulesStateChanged::set_has_state() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_GamerulesStateChanged::clear_has_state() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_GamerulesStateChanged::clear_state() {
  state_ = 0u;
  clear_has_state();
}
::google::protobuf::uint32 CDOTAUserMsg_GamerulesStateChanged::state() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_GamerulesStateChanged.state)
  return state_;
}
void CDOTAUserMsg_GamerulesStateChanged::set_state(::google::protobuf::uint32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_GamerulesStateChanged.state)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_AddQuestLogEntry::kNpcNameFieldNumber;
const int CDOTAUserMsg_AddQuestLogEntry::kNpcDialogFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_AddQuestLogEntry::CDOTAUserMsg_AddQuestLogEntry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_AddQuestLogEntry)
}
CDOTAUserMsg_AddQuestLogEntry::CDOTAUserMsg_AddQuestLogEntry(const CDOTAUserMsg_AddQuestLogEntry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  npc_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_npc_name()) {
    npc_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.npc_name_);
  }
  npc_dialog_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_npc_dialog()) {
    npc_dialog_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.npc_dialog_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_AddQuestLogEntry)
}

void CDOTAUserMsg_AddQuestLogEntry::SharedCtor() {
  _cached_size_ = 0;
  npc_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  npc_dialog_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CDOTAUserMsg_AddQuestLogEntry::~CDOTAUserMsg_AddQuestLogEntry() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_AddQuestLogEntry)
  SharedDtor();
}

void CDOTAUserMsg_AddQuestLogEntry::SharedDtor() {
  npc_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  npc_dialog_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CDOTAUserMsg_AddQuestLogEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_AddQuestLogEntry::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_AddQuestLogEntry& CDOTAUserMsg_AddQuestLogEntry::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_AddQuestLogEntry* CDOTAUserMsg_AddQuestLogEntry::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_AddQuestLogEntry* n = new CDOTAUserMsg_AddQuestLogEntry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_AddQuestLogEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_AddQuestLogEntry)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_npc_name()) {
      GOOGLE_DCHECK(!npc_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*npc_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_npc_dialog()) {
      GOOGLE_DCHECK(!npc_dialog_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*npc_dialog_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_AddQuestLogEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_AddQuestLogEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string npc_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_npc_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->npc_name().data(), this->npc_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDOTAUserMsg_AddQuestLogEntry.npc_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string npc_dialog = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_npc_dialog()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->npc_dialog().data(), this->npc_dialog().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDOTAUserMsg_AddQuestLogEntry.npc_dialog");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_AddQuestLogEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_AddQuestLogEntry)
  return false;
#undef DO_
}

void CDOTAUserMsg_AddQuestLogEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_AddQuestLogEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string npc_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->npc_name().data(), this->npc_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAUserMsg_AddQuestLogEntry.npc_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->npc_name(), output);
  }

  // optional string npc_dialog = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->npc_dialog().data(), this->npc_dialog().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAUserMsg_AddQuestLogEntry.npc_dialog");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->npc_dialog(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_AddQuestLogEntry)
}

::google::protobuf::uint8* CDOTAUserMsg_AddQuestLogEntry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_AddQuestLogEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string npc_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->npc_name().data(), this->npc_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAUserMsg_AddQuestLogEntry.npc_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->npc_name(), target);
  }

  // optional string npc_dialog = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->npc_dialog().data(), this->npc_dialog().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAUserMsg_AddQuestLogEntry.npc_dialog");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->npc_dialog(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_AddQuestLogEntry)
  return target;
}

size_t CDOTAUserMsg_AddQuestLogEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_AddQuestLogEntry)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string npc_name = 1;
    if (has_npc_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->npc_name());
    }

    // optional string npc_dialog = 2;
    if (has_npc_dialog()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->npc_dialog());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_AddQuestLogEntry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_AddQuestLogEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_AddQuestLogEntry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_AddQuestLogEntry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_AddQuestLogEntry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_AddQuestLogEntry)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_AddQuestLogEntry::MergeFrom(const CDOTAUserMsg_AddQuestLogEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_AddQuestLogEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_npc_name();
      npc_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.npc_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_npc_dialog();
      npc_dialog_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.npc_dialog_);
    }
  }
}

void CDOTAUserMsg_AddQuestLogEntry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_AddQuestLogEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_AddQuestLogEntry::CopyFrom(const CDOTAUserMsg_AddQuestLogEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_AddQuestLogEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_AddQuestLogEntry::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_AddQuestLogEntry::Swap(CDOTAUserMsg_AddQuestLogEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_AddQuestLogEntry::InternalSwap(CDOTAUserMsg_AddQuestLogEntry* other) {
  npc_name_.Swap(&other->npc_name_);
  npc_dialog_.Swap(&other->npc_dialog_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_AddQuestLogEntry::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_AddQuestLogEntry

// optional string npc_name = 1;
bool CDOTAUserMsg_AddQuestLogEntry::has_npc_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_AddQuestLogEntry::set_has_npc_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_AddQuestLogEntry::clear_has_npc_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_AddQuestLogEntry::clear_npc_name() {
  npc_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_npc_name();
}
const ::std::string& CDOTAUserMsg_AddQuestLogEntry::npc_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_AddQuestLogEntry.npc_name)
  return npc_name_.GetNoArena();
}
void CDOTAUserMsg_AddQuestLogEntry::set_npc_name(const ::std::string& value) {
  set_has_npc_name();
  npc_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_AddQuestLogEntry.npc_name)
}
#if LANG_CXX11
void CDOTAUserMsg_AddQuestLogEntry::set_npc_name(::std::string&& value) {
  set_has_npc_name();
  npc_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDOTAUserMsg_AddQuestLogEntry.npc_name)
}
#endif
void CDOTAUserMsg_AddQuestLogEntry::set_npc_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_npc_name();
  npc_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDOTAUserMsg_AddQuestLogEntry.npc_name)
}
void CDOTAUserMsg_AddQuestLogEntry::set_npc_name(const char* value, size_t size) {
  set_has_npc_name();
  npc_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDOTAUserMsg_AddQuestLogEntry.npc_name)
}
::std::string* CDOTAUserMsg_AddQuestLogEntry::mutable_npc_name() {
  set_has_npc_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_AddQuestLogEntry.npc_name)
  return npc_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDOTAUserMsg_AddQuestLogEntry::release_npc_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAUserMsg_AddQuestLogEntry.npc_name)
  clear_has_npc_name();
  return npc_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDOTAUserMsg_AddQuestLogEntry::set_allocated_npc_name(::std::string* npc_name) {
  if (npc_name != NULL) {
    set_has_npc_name();
  } else {
    clear_has_npc_name();
  }
  npc_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), npc_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAUserMsg_AddQuestLogEntry.npc_name)
}

// optional string npc_dialog = 2;
bool CDOTAUserMsg_AddQuestLogEntry::has_npc_dialog() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAUserMsg_AddQuestLogEntry::set_has_npc_dialog() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAUserMsg_AddQuestLogEntry::clear_has_npc_dialog() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAUserMsg_AddQuestLogEntry::clear_npc_dialog() {
  npc_dialog_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_npc_dialog();
}
const ::std::string& CDOTAUserMsg_AddQuestLogEntry::npc_dialog() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_AddQuestLogEntry.npc_dialog)
  return npc_dialog_.GetNoArena();
}
void CDOTAUserMsg_AddQuestLogEntry::set_npc_dialog(const ::std::string& value) {
  set_has_npc_dialog();
  npc_dialog_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_AddQuestLogEntry.npc_dialog)
}
#if LANG_CXX11
void CDOTAUserMsg_AddQuestLogEntry::set_npc_dialog(::std::string&& value) {
  set_has_npc_dialog();
  npc_dialog_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDOTAUserMsg_AddQuestLogEntry.npc_dialog)
}
#endif
void CDOTAUserMsg_AddQuestLogEntry::set_npc_dialog(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_npc_dialog();
  npc_dialog_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDOTAUserMsg_AddQuestLogEntry.npc_dialog)
}
void CDOTAUserMsg_AddQuestLogEntry::set_npc_dialog(const char* value, size_t size) {
  set_has_npc_dialog();
  npc_dialog_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDOTAUserMsg_AddQuestLogEntry.npc_dialog)
}
::std::string* CDOTAUserMsg_AddQuestLogEntry::mutable_npc_dialog() {
  set_has_npc_dialog();
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_AddQuestLogEntry.npc_dialog)
  return npc_dialog_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDOTAUserMsg_AddQuestLogEntry::release_npc_dialog() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAUserMsg_AddQuestLogEntry.npc_dialog)
  clear_has_npc_dialog();
  return npc_dialog_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDOTAUserMsg_AddQuestLogEntry::set_allocated_npc_dialog(::std::string* npc_dialog) {
  if (npc_dialog != NULL) {
    set_has_npc_dialog();
  } else {
    clear_has_npc_dialog();
  }
  npc_dialog_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), npc_dialog);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAUserMsg_AddQuestLogEntry.npc_dialog)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_SendStatPopup::kPlayerIdFieldNumber;
const int CDOTAUserMsg_SendStatPopup::kStatpopupFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_SendStatPopup::CDOTAUserMsg_SendStatPopup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_SendStatPopup)
}
CDOTAUserMsg_SendStatPopup::CDOTAUserMsg_SendStatPopup(const CDOTAUserMsg_SendStatPopup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_statpopup()) {
    statpopup_ = new ::proto::dota::CDOTAMsg_SendStatPopup(*from.statpopup_);
  } else {
    statpopup_ = NULL;
  }
  player_id_ = from.player_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_SendStatPopup)
}

void CDOTAUserMsg_SendStatPopup::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&statpopup_, 0, reinterpret_cast<char*>(&player_id_) -
    reinterpret_cast<char*>(&statpopup_) + sizeof(player_id_));
}

CDOTAUserMsg_SendStatPopup::~CDOTAUserMsg_SendStatPopup() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_SendStatPopup)
  SharedDtor();
}

void CDOTAUserMsg_SendStatPopup::SharedDtor() {
  if (this != internal_default_instance()) {
    delete statpopup_;
  }
}

void CDOTAUserMsg_SendStatPopup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_SendStatPopup::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_SendStatPopup& CDOTAUserMsg_SendStatPopup::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_SendStatPopup* CDOTAUserMsg_SendStatPopup::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_SendStatPopup* n = new CDOTAUserMsg_SendStatPopup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_SendStatPopup::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_SendStatPopup)
  if (has_statpopup()) {
    GOOGLE_DCHECK(statpopup_ != NULL);
    statpopup_->::proto::dota::CDOTAMsg_SendStatPopup::Clear();
  }
  player_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_SendStatPopup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_SendStatPopup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_player_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CDOTAMsg_SendStatPopup statpopup = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_statpopup()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_SendStatPopup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_SendStatPopup)
  return false;
#undef DO_
}

void CDOTAUserMsg_SendStatPopup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_SendStatPopup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 player_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player_id(), output);
  }

  // optional .proto.dota.CDOTAMsg_SendStatPopup statpopup = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->statpopup_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_SendStatPopup)
}

::google::protobuf::uint8* CDOTAUserMsg_SendStatPopup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_SendStatPopup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 player_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player_id(), target);
  }

  // optional .proto.dota.CDOTAMsg_SendStatPopup statpopup = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->statpopup_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_SendStatPopup)
  return target;
}

size_t CDOTAUserMsg_SendStatPopup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_SendStatPopup)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .proto.dota.CDOTAMsg_SendStatPopup statpopup = 2;
    if (has_statpopup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->statpopup_);
    }

    // optional int32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_SendStatPopup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_SendStatPopup)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_SendStatPopup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_SendStatPopup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_SendStatPopup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_SendStatPopup)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_SendStatPopup::MergeFrom(const CDOTAUserMsg_SendStatPopup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_SendStatPopup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_statpopup()->::proto::dota::CDOTAMsg_SendStatPopup::MergeFrom(from.statpopup());
    }
    if (cached_has_bits & 0x00000002u) {
      player_id_ = from.player_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_SendStatPopup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_SendStatPopup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_SendStatPopup::CopyFrom(const CDOTAUserMsg_SendStatPopup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_SendStatPopup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_SendStatPopup::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_SendStatPopup::Swap(CDOTAUserMsg_SendStatPopup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_SendStatPopup::InternalSwap(CDOTAUserMsg_SendStatPopup* other) {
  std::swap(statpopup_, other->statpopup_);
  std::swap(player_id_, other->player_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_SendStatPopup::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_SendStatPopup

// optional int32 player_id = 1;
bool CDOTAUserMsg_SendStatPopup::has_player_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAUserMsg_SendStatPopup::set_has_player_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAUserMsg_SendStatPopup::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAUserMsg_SendStatPopup::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
::google::protobuf::int32 CDOTAUserMsg_SendStatPopup::player_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_SendStatPopup.player_id)
  return player_id_;
}
void CDOTAUserMsg_SendStatPopup::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_SendStatPopup.player_id)
}

// optional .proto.dota.CDOTAMsg_SendStatPopup statpopup = 2;
bool CDOTAUserMsg_SendStatPopup::has_statpopup() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_SendStatPopup::set_has_statpopup() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_SendStatPopup::clear_has_statpopup() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_SendStatPopup::clear_statpopup() {
  if (statpopup_ != NULL) statpopup_->::proto::dota::CDOTAMsg_SendStatPopup::Clear();
  clear_has_statpopup();
}
const ::proto::dota::CDOTAMsg_SendStatPopup& CDOTAUserMsg_SendStatPopup::statpopup() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_SendStatPopup.statpopup)
  return statpopup_ != NULL ? *statpopup_
                         : *::proto::dota::CDOTAMsg_SendStatPopup::internal_default_instance();
}
::proto::dota::CDOTAMsg_SendStatPopup* CDOTAUserMsg_SendStatPopup::mutable_statpopup() {
  set_has_statpopup();
  if (statpopup_ == NULL) {
    statpopup_ = new ::proto::dota::CDOTAMsg_SendStatPopup;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_SendStatPopup.statpopup)
  return statpopup_;
}
::proto::dota::CDOTAMsg_SendStatPopup* CDOTAUserMsg_SendStatPopup::release_statpopup() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAUserMsg_SendStatPopup.statpopup)
  clear_has_statpopup();
  ::proto::dota::CDOTAMsg_SendStatPopup* temp = statpopup_;
  statpopup_ = NULL;
  return temp;
}
void CDOTAUserMsg_SendStatPopup::set_allocated_statpopup(::proto::dota::CDOTAMsg_SendStatPopup* statpopup) {
  delete statpopup_;
  statpopup_ = statpopup;
  if (statpopup) {
    set_has_statpopup();
  } else {
    clear_has_statpopup();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAUserMsg_SendStatPopup.statpopup)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_DismissAllStatPopups::kDismissallmsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_DismissAllStatPopups::CDOTAUserMsg_DismissAllStatPopups()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_DismissAllStatPopups)
}
CDOTAUserMsg_DismissAllStatPopups::CDOTAUserMsg_DismissAllStatPopups(const CDOTAUserMsg_DismissAllStatPopups& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_dismissallmsg()) {
    dismissallmsg_ = new ::proto::dota::CDOTAMsg_DismissAllStatPopups(*from.dismissallmsg_);
  } else {
    dismissallmsg_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_DismissAllStatPopups)
}

void CDOTAUserMsg_DismissAllStatPopups::SharedCtor() {
  _cached_size_ = 0;
  dismissallmsg_ = NULL;
}

CDOTAUserMsg_DismissAllStatPopups::~CDOTAUserMsg_DismissAllStatPopups() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_DismissAllStatPopups)
  SharedDtor();
}

void CDOTAUserMsg_DismissAllStatPopups::SharedDtor() {
  if (this != internal_default_instance()) {
    delete dismissallmsg_;
  }
}

void CDOTAUserMsg_DismissAllStatPopups::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_DismissAllStatPopups::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_DismissAllStatPopups& CDOTAUserMsg_DismissAllStatPopups::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_DismissAllStatPopups* CDOTAUserMsg_DismissAllStatPopups::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_DismissAllStatPopups* n = new CDOTAUserMsg_DismissAllStatPopups;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_DismissAllStatPopups::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_DismissAllStatPopups)
  if (has_dismissallmsg()) {
    GOOGLE_DCHECK(dismissallmsg_ != NULL);
    dismissallmsg_->::proto::dota::CDOTAMsg_DismissAllStatPopups::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_DismissAllStatPopups::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_DismissAllStatPopups)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CDOTAMsg_DismissAllStatPopups dismissallmsg = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dismissallmsg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_DismissAllStatPopups)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_DismissAllStatPopups)
  return false;
#undef DO_
}

void CDOTAUserMsg_DismissAllStatPopups::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_DismissAllStatPopups)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CDOTAMsg_DismissAllStatPopups dismissallmsg = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->dismissallmsg_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_DismissAllStatPopups)
}

::google::protobuf::uint8* CDOTAUserMsg_DismissAllStatPopups::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_DismissAllStatPopups)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CDOTAMsg_DismissAllStatPopups dismissallmsg = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->dismissallmsg_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_DismissAllStatPopups)
  return target;
}

size_t CDOTAUserMsg_DismissAllStatPopups::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_DismissAllStatPopups)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .proto.dota.CDOTAMsg_DismissAllStatPopups dismissallmsg = 1;
  if (has_dismissallmsg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->dismissallmsg_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_DismissAllStatPopups::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_DismissAllStatPopups)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_DismissAllStatPopups* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_DismissAllStatPopups>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_DismissAllStatPopups)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_DismissAllStatPopups)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_DismissAllStatPopups::MergeFrom(const CDOTAUserMsg_DismissAllStatPopups& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_DismissAllStatPopups)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_dismissallmsg()) {
    mutable_dismissallmsg()->::proto::dota::CDOTAMsg_DismissAllStatPopups::MergeFrom(from.dismissallmsg());
  }
}

void CDOTAUserMsg_DismissAllStatPopups::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_DismissAllStatPopups)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_DismissAllStatPopups::CopyFrom(const CDOTAUserMsg_DismissAllStatPopups& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_DismissAllStatPopups)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_DismissAllStatPopups::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_DismissAllStatPopups::Swap(CDOTAUserMsg_DismissAllStatPopups* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_DismissAllStatPopups::InternalSwap(CDOTAUserMsg_DismissAllStatPopups* other) {
  std::swap(dismissallmsg_, other->dismissallmsg_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_DismissAllStatPopups::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_DismissAllStatPopups

// optional .proto.dota.CDOTAMsg_DismissAllStatPopups dismissallmsg = 1;
bool CDOTAUserMsg_DismissAllStatPopups::has_dismissallmsg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_DismissAllStatPopups::set_has_dismissallmsg() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_DismissAllStatPopups::clear_has_dismissallmsg() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_DismissAllStatPopups::clear_dismissallmsg() {
  if (dismissallmsg_ != NULL) dismissallmsg_->::proto::dota::CDOTAMsg_DismissAllStatPopups::Clear();
  clear_has_dismissallmsg();
}
const ::proto::dota::CDOTAMsg_DismissAllStatPopups& CDOTAUserMsg_DismissAllStatPopups::dismissallmsg() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_DismissAllStatPopups.dismissallmsg)
  return dismissallmsg_ != NULL ? *dismissallmsg_
                         : *::proto::dota::CDOTAMsg_DismissAllStatPopups::internal_default_instance();
}
::proto::dota::CDOTAMsg_DismissAllStatPopups* CDOTAUserMsg_DismissAllStatPopups::mutable_dismissallmsg() {
  set_has_dismissallmsg();
  if (dismissallmsg_ == NULL) {
    dismissallmsg_ = new ::proto::dota::CDOTAMsg_DismissAllStatPopups;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_DismissAllStatPopups.dismissallmsg)
  return dismissallmsg_;
}
::proto::dota::CDOTAMsg_DismissAllStatPopups* CDOTAUserMsg_DismissAllStatPopups::release_dismissallmsg() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAUserMsg_DismissAllStatPopups.dismissallmsg)
  clear_has_dismissallmsg();
  ::proto::dota::CDOTAMsg_DismissAllStatPopups* temp = dismissallmsg_;
  dismissallmsg_ = NULL;
  return temp;
}
void CDOTAUserMsg_DismissAllStatPopups::set_allocated_dismissallmsg(::proto::dota::CDOTAMsg_DismissAllStatPopups* dismissallmsg) {
  delete dismissallmsg_;
  dismissallmsg_ = dismissallmsg;
  if (dismissallmsg) {
    set_has_dismissallmsg();
  } else {
    clear_has_dismissallmsg();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAUserMsg_DismissAllStatPopups.dismissallmsg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_SendRoshanSpectatorPhase::kPhaseFieldNumber;
const int CDOTAUserMsg_SendRoshanSpectatorPhase::kPhaseStartTimeFieldNumber;
const int CDOTAUserMsg_SendRoshanSpectatorPhase::kPhaseLengthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_SendRoshanSpectatorPhase::CDOTAUserMsg_SendRoshanSpectatorPhase()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_SendRoshanSpectatorPhase)
}
CDOTAUserMsg_SendRoshanSpectatorPhase::CDOTAUserMsg_SendRoshanSpectatorPhase(const CDOTAUserMsg_SendRoshanSpectatorPhase& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&phase_, &from.phase_,
    reinterpret_cast<char*>(&phase_length_) -
    reinterpret_cast<char*>(&phase_) + sizeof(phase_length_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_SendRoshanSpectatorPhase)
}

void CDOTAUserMsg_SendRoshanSpectatorPhase::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&phase_, 0, reinterpret_cast<char*>(&phase_length_) -
    reinterpret_cast<char*>(&phase_) + sizeof(phase_length_));
}

CDOTAUserMsg_SendRoshanSpectatorPhase::~CDOTAUserMsg_SendRoshanSpectatorPhase() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_SendRoshanSpectatorPhase)
  SharedDtor();
}

void CDOTAUserMsg_SendRoshanSpectatorPhase::SharedDtor() {
}

void CDOTAUserMsg_SendRoshanSpectatorPhase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_SendRoshanSpectatorPhase::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_SendRoshanSpectatorPhase& CDOTAUserMsg_SendRoshanSpectatorPhase::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_SendRoshanSpectatorPhase* CDOTAUserMsg_SendRoshanSpectatorPhase::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_SendRoshanSpectatorPhase* n = new CDOTAUserMsg_SendRoshanSpectatorPhase;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_SendRoshanSpectatorPhase::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_SendRoshanSpectatorPhase)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&phase_, 0, reinterpret_cast<char*>(&phase_length_) -
      reinterpret_cast<char*>(&phase_) + sizeof(phase_length_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_SendRoshanSpectatorPhase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_SendRoshanSpectatorPhase)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.DOTA_ROSHAN_PHASE phase = 1 [default = k_SRSP_ROSHAN_ALIVE];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTA_ROSHAN_PHASE_IsValid(value)) {
            set_phase(static_cast< ::proto::dota::DOTA_ROSHAN_PHASE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 phase_start_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_phase_start_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &phase_start_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 phase_length = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_phase_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &phase_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_SendRoshanSpectatorPhase)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_SendRoshanSpectatorPhase)
  return false;
#undef DO_
}

void CDOTAUserMsg_SendRoshanSpectatorPhase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_SendRoshanSpectatorPhase)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.DOTA_ROSHAN_PHASE phase = 1 [default = k_SRSP_ROSHAN_ALIVE];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->phase(), output);
  }

  // optional int32 phase_start_time = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->phase_start_time(), output);
  }

  // optional int32 phase_length = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->phase_length(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_SendRoshanSpectatorPhase)
}

::google::protobuf::uint8* CDOTAUserMsg_SendRoshanSpectatorPhase::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_SendRoshanSpectatorPhase)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.DOTA_ROSHAN_PHASE phase = 1 [default = k_SRSP_ROSHAN_ALIVE];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->phase(), target);
  }

  // optional int32 phase_start_time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->phase_start_time(), target);
  }

  // optional int32 phase_length = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->phase_length(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_SendRoshanSpectatorPhase)
  return target;
}

size_t CDOTAUserMsg_SendRoshanSpectatorPhase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_SendRoshanSpectatorPhase)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .proto.dota.DOTA_ROSHAN_PHASE phase = 1 [default = k_SRSP_ROSHAN_ALIVE];
    if (has_phase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->phase());
    }

    // optional int32 phase_start_time = 2;
    if (has_phase_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->phase_start_time());
    }

    // optional int32 phase_length = 3;
    if (has_phase_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->phase_length());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_SendRoshanSpectatorPhase::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_SendRoshanSpectatorPhase)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_SendRoshanSpectatorPhase* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_SendRoshanSpectatorPhase>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_SendRoshanSpectatorPhase)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_SendRoshanSpectatorPhase)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_SendRoshanSpectatorPhase::MergeFrom(const CDOTAUserMsg_SendRoshanSpectatorPhase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_SendRoshanSpectatorPhase)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      phase_ = from.phase_;
    }
    if (cached_has_bits & 0x00000002u) {
      phase_start_time_ = from.phase_start_time_;
    }
    if (cached_has_bits & 0x00000004u) {
      phase_length_ = from.phase_length_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_SendRoshanSpectatorPhase::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_SendRoshanSpectatorPhase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_SendRoshanSpectatorPhase::CopyFrom(const CDOTAUserMsg_SendRoshanSpectatorPhase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_SendRoshanSpectatorPhase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_SendRoshanSpectatorPhase::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_SendRoshanSpectatorPhase::Swap(CDOTAUserMsg_SendRoshanSpectatorPhase* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_SendRoshanSpectatorPhase::InternalSwap(CDOTAUserMsg_SendRoshanSpectatorPhase* other) {
  std::swap(phase_, other->phase_);
  std::swap(phase_start_time_, other->phase_start_time_);
  std::swap(phase_length_, other->phase_length_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_SendRoshanSpectatorPhase::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_SendRoshanSpectatorPhase

// optional .proto.dota.DOTA_ROSHAN_PHASE phase = 1 [default = k_SRSP_ROSHAN_ALIVE];
bool CDOTAUserMsg_SendRoshanSpectatorPhase::has_phase() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_SendRoshanSpectatorPhase::set_has_phase() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_SendRoshanSpectatorPhase::clear_has_phase() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_SendRoshanSpectatorPhase::clear_phase() {
  phase_ = 0;
  clear_has_phase();
}
::proto::dota::DOTA_ROSHAN_PHASE CDOTAUserMsg_SendRoshanSpectatorPhase::phase() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_SendRoshanSpectatorPhase.phase)
  return static_cast< ::proto::dota::DOTA_ROSHAN_PHASE >(phase_);
}
void CDOTAUserMsg_SendRoshanSpectatorPhase::set_phase(::proto::dota::DOTA_ROSHAN_PHASE value) {
  assert(::proto::dota::DOTA_ROSHAN_PHASE_IsValid(value));
  set_has_phase();
  phase_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_SendRoshanSpectatorPhase.phase)
}

// optional int32 phase_start_time = 2;
bool CDOTAUserMsg_SendRoshanSpectatorPhase::has_phase_start_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAUserMsg_SendRoshanSpectatorPhase::set_has_phase_start_time() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAUserMsg_SendRoshanSpectatorPhase::clear_has_phase_start_time() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAUserMsg_SendRoshanSpectatorPhase::clear_phase_start_time() {
  phase_start_time_ = 0;
  clear_has_phase_start_time();
}
::google::protobuf::int32 CDOTAUserMsg_SendRoshanSpectatorPhase::phase_start_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_SendRoshanSpectatorPhase.phase_start_time)
  return phase_start_time_;
}
void CDOTAUserMsg_SendRoshanSpectatorPhase::set_phase_start_time(::google::protobuf::int32 value) {
  set_has_phase_start_time();
  phase_start_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_SendRoshanSpectatorPhase.phase_start_time)
}

// optional int32 phase_length = 3;
bool CDOTAUserMsg_SendRoshanSpectatorPhase::has_phase_length() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDOTAUserMsg_SendRoshanSpectatorPhase::set_has_phase_length() {
  _has_bits_[0] |= 0x00000004u;
}
void CDOTAUserMsg_SendRoshanSpectatorPhase::clear_has_phase_length() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDOTAUserMsg_SendRoshanSpectatorPhase::clear_phase_length() {
  phase_length_ = 0;
  clear_has_phase_length();
}
::google::protobuf::int32 CDOTAUserMsg_SendRoshanSpectatorPhase::phase_length() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_SendRoshanSpectatorPhase.phase_length)
  return phase_length_;
}
void CDOTAUserMsg_SendRoshanSpectatorPhase::set_phase_length(::google::protobuf::int32 value) {
  set_has_phase_length();
  phase_length_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_SendRoshanSpectatorPhase.phase_length)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_SendRoshanPopup::kReclaimedFieldNumber;
const int CDOTAUserMsg_SendRoshanPopup::kGametimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_SendRoshanPopup::CDOTAUserMsg_SendRoshanPopup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_SendRoshanPopup)
}
CDOTAUserMsg_SendRoshanPopup::CDOTAUserMsg_SendRoshanPopup(const CDOTAUserMsg_SendRoshanPopup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&reclaimed_, &from.reclaimed_,
    reinterpret_cast<char*>(&gametime_) -
    reinterpret_cast<char*>(&reclaimed_) + sizeof(gametime_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_SendRoshanPopup)
}

void CDOTAUserMsg_SendRoshanPopup::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&reclaimed_, 0, reinterpret_cast<char*>(&gametime_) -
    reinterpret_cast<char*>(&reclaimed_) + sizeof(gametime_));
}

CDOTAUserMsg_SendRoshanPopup::~CDOTAUserMsg_SendRoshanPopup() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_SendRoshanPopup)
  SharedDtor();
}

void CDOTAUserMsg_SendRoshanPopup::SharedDtor() {
}

void CDOTAUserMsg_SendRoshanPopup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_SendRoshanPopup::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_SendRoshanPopup& CDOTAUserMsg_SendRoshanPopup::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_SendRoshanPopup* CDOTAUserMsg_SendRoshanPopup::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_SendRoshanPopup* n = new CDOTAUserMsg_SendRoshanPopup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_SendRoshanPopup::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_SendRoshanPopup)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&reclaimed_, 0, reinterpret_cast<char*>(&gametime_) -
      reinterpret_cast<char*>(&reclaimed_) + sizeof(gametime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_SendRoshanPopup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_SendRoshanPopup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool reclaimed = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_reclaimed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reclaimed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 gametime = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_gametime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gametime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_SendRoshanPopup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_SendRoshanPopup)
  return false;
#undef DO_
}

void CDOTAUserMsg_SendRoshanPopup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_SendRoshanPopup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool reclaimed = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->reclaimed(), output);
  }

  // optional int32 gametime = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gametime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_SendRoshanPopup)
}

::google::protobuf::uint8* CDOTAUserMsg_SendRoshanPopup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_SendRoshanPopup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool reclaimed = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->reclaimed(), target);
  }

  // optional int32 gametime = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gametime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_SendRoshanPopup)
  return target;
}

size_t CDOTAUserMsg_SendRoshanPopup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_SendRoshanPopup)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bool reclaimed = 1;
    if (has_reclaimed()) {
      total_size += 1 + 1;
    }

    // optional int32 gametime = 2;
    if (has_gametime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gametime());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_SendRoshanPopup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_SendRoshanPopup)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_SendRoshanPopup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_SendRoshanPopup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_SendRoshanPopup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_SendRoshanPopup)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_SendRoshanPopup::MergeFrom(const CDOTAUserMsg_SendRoshanPopup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_SendRoshanPopup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      reclaimed_ = from.reclaimed_;
    }
    if (cached_has_bits & 0x00000002u) {
      gametime_ = from.gametime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_SendRoshanPopup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_SendRoshanPopup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_SendRoshanPopup::CopyFrom(const CDOTAUserMsg_SendRoshanPopup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_SendRoshanPopup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_SendRoshanPopup::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_SendRoshanPopup::Swap(CDOTAUserMsg_SendRoshanPopup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_SendRoshanPopup::InternalSwap(CDOTAUserMsg_SendRoshanPopup* other) {
  std::swap(reclaimed_, other->reclaimed_);
  std::swap(gametime_, other->gametime_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_SendRoshanPopup::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_SendRoshanPopup

// optional bool reclaimed = 1;
bool CDOTAUserMsg_SendRoshanPopup::has_reclaimed() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_SendRoshanPopup::set_has_reclaimed() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_SendRoshanPopup::clear_has_reclaimed() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_SendRoshanPopup::clear_reclaimed() {
  reclaimed_ = false;
  clear_has_reclaimed();
}
bool CDOTAUserMsg_SendRoshanPopup::reclaimed() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_SendRoshanPopup.reclaimed)
  return reclaimed_;
}
void CDOTAUserMsg_SendRoshanPopup::set_reclaimed(bool value) {
  set_has_reclaimed();
  reclaimed_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_SendRoshanPopup.reclaimed)
}

// optional int32 gametime = 2;
bool CDOTAUserMsg_SendRoshanPopup::has_gametime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAUserMsg_SendRoshanPopup::set_has_gametime() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAUserMsg_SendRoshanPopup::clear_has_gametime() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAUserMsg_SendRoshanPopup::clear_gametime() {
  gametime_ = 0;
  clear_has_gametime();
}
::google::protobuf::int32 CDOTAUserMsg_SendRoshanPopup::gametime() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_SendRoshanPopup.gametime)
  return gametime_;
}
void CDOTAUserMsg_SendRoshanPopup::set_gametime(::google::protobuf::int32 value) {
  set_has_gametime();
  gametime_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_SendRoshanPopup.gametime)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_SendFinalGold::kReliableGoldFieldNumber;
const int CDOTAUserMsg_SendFinalGold::kUnreliableGoldFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_SendFinalGold::CDOTAUserMsg_SendFinalGold()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_SendFinalGold)
}
CDOTAUserMsg_SendFinalGold::CDOTAUserMsg_SendFinalGold(const CDOTAUserMsg_SendFinalGold& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      reliable_gold_(from.reliable_gold_),
      unreliable_gold_(from.unreliable_gold_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_SendFinalGold)
}

void CDOTAUserMsg_SendFinalGold::SharedCtor() {
  _cached_size_ = 0;
}

CDOTAUserMsg_SendFinalGold::~CDOTAUserMsg_SendFinalGold() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_SendFinalGold)
  SharedDtor();
}

void CDOTAUserMsg_SendFinalGold::SharedDtor() {
}

void CDOTAUserMsg_SendFinalGold::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_SendFinalGold::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_SendFinalGold& CDOTAUserMsg_SendFinalGold::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_SendFinalGold* CDOTAUserMsg_SendFinalGold::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_SendFinalGold* n = new CDOTAUserMsg_SendFinalGold;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_SendFinalGold::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_SendFinalGold)
  reliable_gold_.Clear();
  unreliable_gold_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_SendFinalGold::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_SendFinalGold)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 reliable_gold = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_reliable_gold())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_reliable_gold())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 unreliable_gold = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_unreliable_gold())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_unreliable_gold())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_SendFinalGold)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_SendFinalGold)
  return false;
#undef DO_
}

void CDOTAUserMsg_SendFinalGold::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_SendFinalGold)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 reliable_gold = 1;
  for (int i = 0, n = this->reliable_gold_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->reliable_gold(i), output);
  }

  // repeated uint32 unreliable_gold = 2;
  for (int i = 0, n = this->unreliable_gold_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->unreliable_gold(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_SendFinalGold)
}

::google::protobuf::uint8* CDOTAUserMsg_SendFinalGold::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_SendFinalGold)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 reliable_gold = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->reliable_gold_, target);

  // repeated uint32 unreliable_gold = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(2, this->unreliable_gold_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_SendFinalGold)
  return target;
}

size_t CDOTAUserMsg_SendFinalGold::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_SendFinalGold)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 reliable_gold = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->reliable_gold_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->reliable_gold_size());
    total_size += data_size;
  }

  // repeated uint32 unreliable_gold = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->unreliable_gold_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->unreliable_gold_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_SendFinalGold::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_SendFinalGold)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_SendFinalGold* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_SendFinalGold>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_SendFinalGold)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_SendFinalGold)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_SendFinalGold::MergeFrom(const CDOTAUserMsg_SendFinalGold& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_SendFinalGold)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  reliable_gold_.MergeFrom(from.reliable_gold_);
  unreliable_gold_.MergeFrom(from.unreliable_gold_);
}

void CDOTAUserMsg_SendFinalGold::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_SendFinalGold)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_SendFinalGold::CopyFrom(const CDOTAUserMsg_SendFinalGold& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_SendFinalGold)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_SendFinalGold::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_SendFinalGold::Swap(CDOTAUserMsg_SendFinalGold* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_SendFinalGold::InternalSwap(CDOTAUserMsg_SendFinalGold* other) {
  reliable_gold_.InternalSwap(&other->reliable_gold_);
  unreliable_gold_.InternalSwap(&other->unreliable_gold_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_SendFinalGold::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_SendFinalGold

// repeated uint32 reliable_gold = 1;
int CDOTAUserMsg_SendFinalGold::reliable_gold_size() const {
  return reliable_gold_.size();
}
void CDOTAUserMsg_SendFinalGold::clear_reliable_gold() {
  reliable_gold_.Clear();
}
::google::protobuf::uint32 CDOTAUserMsg_SendFinalGold::reliable_gold(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_SendFinalGold.reliable_gold)
  return reliable_gold_.Get(index);
}
void CDOTAUserMsg_SendFinalGold::set_reliable_gold(int index, ::google::protobuf::uint32 value) {
  reliable_gold_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_SendFinalGold.reliable_gold)
}
void CDOTAUserMsg_SendFinalGold::add_reliable_gold(::google::protobuf::uint32 value) {
  reliable_gold_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAUserMsg_SendFinalGold.reliable_gold)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CDOTAUserMsg_SendFinalGold::reliable_gold() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTAUserMsg_SendFinalGold.reliable_gold)
  return reliable_gold_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CDOTAUserMsg_SendFinalGold::mutable_reliable_gold() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTAUserMsg_SendFinalGold.reliable_gold)
  return &reliable_gold_;
}

// repeated uint32 unreliable_gold = 2;
int CDOTAUserMsg_SendFinalGold::unreliable_gold_size() const {
  return unreliable_gold_.size();
}
void CDOTAUserMsg_SendFinalGold::clear_unreliable_gold() {
  unreliable_gold_.Clear();
}
::google::protobuf::uint32 CDOTAUserMsg_SendFinalGold::unreliable_gold(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_SendFinalGold.unreliable_gold)
  return unreliable_gold_.Get(index);
}
void CDOTAUserMsg_SendFinalGold::set_unreliable_gold(int index, ::google::protobuf::uint32 value) {
  unreliable_gold_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_SendFinalGold.unreliable_gold)
}
void CDOTAUserMsg_SendFinalGold::add_unreliable_gold(::google::protobuf::uint32 value) {
  unreliable_gold_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAUserMsg_SendFinalGold.unreliable_gold)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CDOTAUserMsg_SendFinalGold::unreliable_gold() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTAUserMsg_SendFinalGold.unreliable_gold)
  return unreliable_gold_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CDOTAUserMsg_SendFinalGold::mutable_unreliable_gold() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTAUserMsg_SendFinalGold.unreliable_gold)
  return &unreliable_gold_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_CustomMsg::kMessageFieldNumber;
const int CDOTAUserMsg_CustomMsg::kPlayerIdFieldNumber;
const int CDOTAUserMsg_CustomMsg::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_CustomMsg::CDOTAUserMsg_CustomMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_CustomMsg)
}
CDOTAUserMsg_CustomMsg::CDOTAUserMsg_CustomMsg(const CDOTAUserMsg_CustomMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_message()) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  ::memcpy(&player_id_, &from.player_id_,
    reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&player_id_) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_CustomMsg)
}

void CDOTAUserMsg_CustomMsg::SharedCtor() {
  _cached_size_ = 0;
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&player_id_, 0, reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&player_id_) + sizeof(value_));
}

CDOTAUserMsg_CustomMsg::~CDOTAUserMsg_CustomMsg() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_CustomMsg)
  SharedDtor();
}

void CDOTAUserMsg_CustomMsg::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CDOTAUserMsg_CustomMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_CustomMsg::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_CustomMsg& CDOTAUserMsg_CustomMsg::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_CustomMsg* CDOTAUserMsg_CustomMsg::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_CustomMsg* n = new CDOTAUserMsg_CustomMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_CustomMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_CustomMsg)
  if (has_message()) {
    GOOGLE_DCHECK(!message_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*message_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&player_id_, 0, reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&player_id_) + sizeof(value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_CustomMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_CustomMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string message = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDOTAUserMsg_CustomMsg.message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 player_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_player_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_CustomMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_CustomMsg)
  return false;
#undef DO_
}

void CDOTAUserMsg_CustomMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_CustomMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string message = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAUserMsg_CustomMsg.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->message(), output);
  }

  // optional int32 player_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->player_id(), output);
  }

  // optional int32 value = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_CustomMsg)
}

::google::protobuf::uint8* CDOTAUserMsg_CustomMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_CustomMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string message = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAUserMsg_CustomMsg.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }

  // optional int32 player_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->player_id(), target);
  }

  // optional int32 value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_CustomMsg)
  return target;
}

size_t CDOTAUserMsg_CustomMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_CustomMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string message = 1;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional int32 player_id = 2;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // optional int32 value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_CustomMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_CustomMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_CustomMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_CustomMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_CustomMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_CustomMsg)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_CustomMsg::MergeFrom(const CDOTAUserMsg_CustomMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_CustomMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_message();
      message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
    if (cached_has_bits & 0x00000002u) {
      player_id_ = from.player_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      value_ = from.value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_CustomMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_CustomMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_CustomMsg::CopyFrom(const CDOTAUserMsg_CustomMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_CustomMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_CustomMsg::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_CustomMsg::Swap(CDOTAUserMsg_CustomMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_CustomMsg::InternalSwap(CDOTAUserMsg_CustomMsg* other) {
  message_.Swap(&other->message_);
  std::swap(player_id_, other->player_id_);
  std::swap(value_, other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_CustomMsg::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_CustomMsg

// optional string message = 1;
bool CDOTAUserMsg_CustomMsg::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_CustomMsg::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_CustomMsg::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_CustomMsg::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
const ::std::string& CDOTAUserMsg_CustomMsg::message() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_CustomMsg.message)
  return message_.GetNoArena();
}
void CDOTAUserMsg_CustomMsg::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_CustomMsg.message)
}
#if LANG_CXX11
void CDOTAUserMsg_CustomMsg::set_message(::std::string&& value) {
  set_has_message();
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDOTAUserMsg_CustomMsg.message)
}
#endif
void CDOTAUserMsg_CustomMsg::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDOTAUserMsg_CustomMsg.message)
}
void CDOTAUserMsg_CustomMsg::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDOTAUserMsg_CustomMsg.message)
}
::std::string* CDOTAUserMsg_CustomMsg::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_CustomMsg.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDOTAUserMsg_CustomMsg::release_message() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAUserMsg_CustomMsg.message)
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDOTAUserMsg_CustomMsg::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAUserMsg_CustomMsg.message)
}

// optional int32 player_id = 2;
bool CDOTAUserMsg_CustomMsg::has_player_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAUserMsg_CustomMsg::set_has_player_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAUserMsg_CustomMsg::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAUserMsg_CustomMsg::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
::google::protobuf::int32 CDOTAUserMsg_CustomMsg::player_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_CustomMsg.player_id)
  return player_id_;
}
void CDOTAUserMsg_CustomMsg::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_CustomMsg.player_id)
}

// optional int32 value = 3;
bool CDOTAUserMsg_CustomMsg::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDOTAUserMsg_CustomMsg::set_has_value() {
  _has_bits_[0] |= 0x00000004u;
}
void CDOTAUserMsg_CustomMsg::clear_has_value() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDOTAUserMsg_CustomMsg::clear_value() {
  value_ = 0;
  clear_has_value();
}
::google::protobuf::int32 CDOTAUserMsg_CustomMsg::value() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_CustomMsg.value)
  return value_;
}
void CDOTAUserMsg_CustomMsg::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_CustomMsg.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_CoachHUDPing::kPlayerIdFieldNumber;
const int CDOTAUserMsg_CoachHUDPing::kHudPingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_CoachHUDPing::CDOTAUserMsg_CoachHUDPing()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_CoachHUDPing)
}
CDOTAUserMsg_CoachHUDPing::CDOTAUserMsg_CoachHUDPing(const CDOTAUserMsg_CoachHUDPing& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_hud_ping()) {
    hud_ping_ = new ::proto::dota::CDOTAMsg_CoachHUDPing(*from.hud_ping_);
  } else {
    hud_ping_ = NULL;
  }
  player_id_ = from.player_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_CoachHUDPing)
}

void CDOTAUserMsg_CoachHUDPing::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&hud_ping_, 0, reinterpret_cast<char*>(&player_id_) -
    reinterpret_cast<char*>(&hud_ping_) + sizeof(player_id_));
}

CDOTAUserMsg_CoachHUDPing::~CDOTAUserMsg_CoachHUDPing() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_CoachHUDPing)
  SharedDtor();
}

void CDOTAUserMsg_CoachHUDPing::SharedDtor() {
  if (this != internal_default_instance()) {
    delete hud_ping_;
  }
}

void CDOTAUserMsg_CoachHUDPing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_CoachHUDPing::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_CoachHUDPing& CDOTAUserMsg_CoachHUDPing::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_CoachHUDPing* CDOTAUserMsg_CoachHUDPing::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_CoachHUDPing* n = new CDOTAUserMsg_CoachHUDPing;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_CoachHUDPing::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_CoachHUDPing)
  if (has_hud_ping()) {
    GOOGLE_DCHECK(hud_ping_ != NULL);
    hud_ping_->::proto::dota::CDOTAMsg_CoachHUDPing::Clear();
  }
  player_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_CoachHUDPing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_CoachHUDPing)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_player_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CDOTAMsg_CoachHUDPing hud_ping = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hud_ping()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_CoachHUDPing)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_CoachHUDPing)
  return false;
#undef DO_
}

void CDOTAUserMsg_CoachHUDPing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_CoachHUDPing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_id(), output);
  }

  // optional .proto.dota.CDOTAMsg_CoachHUDPing hud_ping = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->hud_ping_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_CoachHUDPing)
}

::google::protobuf::uint8* CDOTAUserMsg_CoachHUDPing::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_CoachHUDPing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_id(), target);
  }

  // optional .proto.dota.CDOTAMsg_CoachHUDPing hud_ping = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->hud_ping_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_CoachHUDPing)
  return target;
}

size_t CDOTAUserMsg_CoachHUDPing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_CoachHUDPing)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .proto.dota.CDOTAMsg_CoachHUDPing hud_ping = 2;
    if (has_hud_ping()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->hud_ping_);
    }

    // optional uint32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_CoachHUDPing::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_CoachHUDPing)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_CoachHUDPing* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_CoachHUDPing>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_CoachHUDPing)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_CoachHUDPing)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_CoachHUDPing::MergeFrom(const CDOTAUserMsg_CoachHUDPing& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_CoachHUDPing)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_hud_ping()->::proto::dota::CDOTAMsg_CoachHUDPing::MergeFrom(from.hud_ping());
    }
    if (cached_has_bits & 0x00000002u) {
      player_id_ = from.player_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_CoachHUDPing::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_CoachHUDPing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_CoachHUDPing::CopyFrom(const CDOTAUserMsg_CoachHUDPing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_CoachHUDPing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_CoachHUDPing::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_CoachHUDPing::Swap(CDOTAUserMsg_CoachHUDPing* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_CoachHUDPing::InternalSwap(CDOTAUserMsg_CoachHUDPing* other) {
  std::swap(hud_ping_, other->hud_ping_);
  std::swap(player_id_, other->player_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_CoachHUDPing::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_CoachHUDPing

// optional uint32 player_id = 1;
bool CDOTAUserMsg_CoachHUDPing::has_player_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAUserMsg_CoachHUDPing::set_has_player_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAUserMsg_CoachHUDPing::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAUserMsg_CoachHUDPing::clear_player_id() {
  player_id_ = 0u;
  clear_has_player_id();
}
::google::protobuf::uint32 CDOTAUserMsg_CoachHUDPing::player_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_CoachHUDPing.player_id)
  return player_id_;
}
void CDOTAUserMsg_CoachHUDPing::set_player_id(::google::protobuf::uint32 value) {
  set_has_player_id();
  player_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_CoachHUDPing.player_id)
}

// optional .proto.dota.CDOTAMsg_CoachHUDPing hud_ping = 2;
bool CDOTAUserMsg_CoachHUDPing::has_hud_ping() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_CoachHUDPing::set_has_hud_ping() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_CoachHUDPing::clear_has_hud_ping() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_CoachHUDPing::clear_hud_ping() {
  if (hud_ping_ != NULL) hud_ping_->::proto::dota::CDOTAMsg_CoachHUDPing::Clear();
  clear_has_hud_ping();
}
const ::proto::dota::CDOTAMsg_CoachHUDPing& CDOTAUserMsg_CoachHUDPing::hud_ping() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_CoachHUDPing.hud_ping)
  return hud_ping_ != NULL ? *hud_ping_
                         : *::proto::dota::CDOTAMsg_CoachHUDPing::internal_default_instance();
}
::proto::dota::CDOTAMsg_CoachHUDPing* CDOTAUserMsg_CoachHUDPing::mutable_hud_ping() {
  set_has_hud_ping();
  if (hud_ping_ == NULL) {
    hud_ping_ = new ::proto::dota::CDOTAMsg_CoachHUDPing;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_CoachHUDPing.hud_ping)
  return hud_ping_;
}
::proto::dota::CDOTAMsg_CoachHUDPing* CDOTAUserMsg_CoachHUDPing::release_hud_ping() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAUserMsg_CoachHUDPing.hud_ping)
  clear_has_hud_ping();
  ::proto::dota::CDOTAMsg_CoachHUDPing* temp = hud_ping_;
  hud_ping_ = NULL;
  return temp;
}
void CDOTAUserMsg_CoachHUDPing::set_allocated_hud_ping(::proto::dota::CDOTAMsg_CoachHUDPing* hud_ping) {
  delete hud_ping_;
  hud_ping_ = hud_ping;
  if (hud_ping) {
    set_has_hud_ping();
  } else {
    clear_has_hud_ping();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAUserMsg_CoachHUDPing.hud_ping)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_ClientLoadGridNav::CDOTAUserMsg_ClientLoadGridNav()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_ClientLoadGridNav)
}
CDOTAUserMsg_ClientLoadGridNav::CDOTAUserMsg_ClientLoadGridNav(const CDOTAUserMsg_ClientLoadGridNav& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_ClientLoadGridNav)
}

void CDOTAUserMsg_ClientLoadGridNav::SharedCtor() {
  _cached_size_ = 0;
}

CDOTAUserMsg_ClientLoadGridNav::~CDOTAUserMsg_ClientLoadGridNav() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_ClientLoadGridNav)
  SharedDtor();
}

void CDOTAUserMsg_ClientLoadGridNav::SharedDtor() {
}

void CDOTAUserMsg_ClientLoadGridNav::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_ClientLoadGridNav::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_ClientLoadGridNav& CDOTAUserMsg_ClientLoadGridNav::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_ClientLoadGridNav* CDOTAUserMsg_ClientLoadGridNav::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_ClientLoadGridNav* n = new CDOTAUserMsg_ClientLoadGridNav;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_ClientLoadGridNav::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_ClientLoadGridNav)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_ClientLoadGridNav::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_ClientLoadGridNav)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_ClientLoadGridNav)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_ClientLoadGridNav)
  return false;
#undef DO_
}

void CDOTAUserMsg_ClientLoadGridNav::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_ClientLoadGridNav)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_ClientLoadGridNav)
}

::google::protobuf::uint8* CDOTAUserMsg_ClientLoadGridNav::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_ClientLoadGridNav)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_ClientLoadGridNav)
  return target;
}

size_t CDOTAUserMsg_ClientLoadGridNav::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_ClientLoadGridNav)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_ClientLoadGridNav::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_ClientLoadGridNav)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_ClientLoadGridNav* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_ClientLoadGridNav>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_ClientLoadGridNav)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_ClientLoadGridNav)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_ClientLoadGridNav::MergeFrom(const CDOTAUserMsg_ClientLoadGridNav& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_ClientLoadGridNav)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CDOTAUserMsg_ClientLoadGridNav::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_ClientLoadGridNav)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_ClientLoadGridNav::CopyFrom(const CDOTAUserMsg_ClientLoadGridNav& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_ClientLoadGridNav)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ClientLoadGridNav::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_ClientLoadGridNav::Swap(CDOTAUserMsg_ClientLoadGridNav* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_ClientLoadGridNav::InternalSwap(CDOTAUserMsg_ClientLoadGridNav* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_ClientLoadGridNav::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_ClientLoadGridNav

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_TE_Projectile::kHSourceFieldNumber;
const int CDOTAUserMsg_TE_Projectile::kHTargetFieldNumber;
const int CDOTAUserMsg_TE_Projectile::kMoveSpeedFieldNumber;
const int CDOTAUserMsg_TE_Projectile::kSourceAttachmentFieldNumber;
const int CDOTAUserMsg_TE_Projectile::kParticleSystemHandleFieldNumber;
const int CDOTAUserMsg_TE_Projectile::kDodgeableFieldNumber;
const int CDOTAUserMsg_TE_Projectile::kIsAttackFieldNumber;
const int CDOTAUserMsg_TE_Projectile::kIsEvadedFieldNumber;
const int CDOTAUserMsg_TE_Projectile::kExpireTimeFieldNumber;
const int CDOTAUserMsg_TE_Projectile::kMaximpacttimeFieldNumber;
const int CDOTAUserMsg_TE_Projectile::kColorgemcolorFieldNumber;
const int CDOTAUserMsg_TE_Projectile::kLaunchTickFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_TE_Projectile::CDOTAUserMsg_TE_Projectile()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_TE_Projectile)
}
CDOTAUserMsg_TE_Projectile::CDOTAUserMsg_TE_Projectile(const CDOTAUserMsg_TE_Projectile& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&hsource_, &from.hsource_,
    reinterpret_cast<char*>(&launch_tick_) -
    reinterpret_cast<char*>(&hsource_) + sizeof(launch_tick_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_TE_Projectile)
}

void CDOTAUserMsg_TE_Projectile::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&hsource_, 0, reinterpret_cast<char*>(&launch_tick_) -
    reinterpret_cast<char*>(&hsource_) + sizeof(launch_tick_));
}

CDOTAUserMsg_TE_Projectile::~CDOTAUserMsg_TE_Projectile() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_TE_Projectile)
  SharedDtor();
}

void CDOTAUserMsg_TE_Projectile::SharedDtor() {
}

void CDOTAUserMsg_TE_Projectile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_TE_Projectile::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_TE_Projectile& CDOTAUserMsg_TE_Projectile::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_TE_Projectile* CDOTAUserMsg_TE_Projectile::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_TE_Projectile* n = new CDOTAUserMsg_TE_Projectile;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_TE_Projectile::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_TE_Projectile)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&hsource_, 0, reinterpret_cast<char*>(&isevaded_) -
      reinterpret_cast<char*>(&hsource_) + sizeof(isevaded_));
  }
  if (_has_bits_[8 / 32] & 3840u) {
    ::memset(&expiretime_, 0, reinterpret_cast<char*>(&launch_tick_) -
      reinterpret_cast<char*>(&expiretime_) + sizeof(launch_tick_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_TE_Projectile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_TE_Projectile)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 hSource = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_hsource();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hsource_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 hTarget = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_htarget();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &htarget_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 moveSpeed = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_movespeed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &movespeed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 sourceAttachment = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_sourceattachment();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sourceattachment_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 particleSystemHandle = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_particlesystemhandle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &particlesystemhandle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool dodgeable = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_dodgeable();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dodgeable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool isAttack = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_isattack();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isattack_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool isEvaded = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_isevaded();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isevaded_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float expireTime = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u)) {
          set_has_expiretime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &expiretime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float maximpacttime = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u)) {
          set_has_maximpacttime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maximpacttime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 colorgemcolor = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u)) {
          set_has_colorgemcolor();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &colorgemcolor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 launch_tick = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_launch_tick();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &launch_tick_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_TE_Projectile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_TE_Projectile)
  return false;
#undef DO_
}

void CDOTAUserMsg_TE_Projectile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_TE_Projectile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 hSource = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->hsource(), output);
  }

  // optional int32 hTarget = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->htarget(), output);
  }

  // optional int32 moveSpeed = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->movespeed(), output);
  }

  // optional int32 sourceAttachment = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sourceattachment(), output);
  }

  // optional int64 particleSystemHandle = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->particlesystemhandle(), output);
  }

  // optional bool dodgeable = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->dodgeable(), output);
  }

  // optional bool isAttack = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->isattack(), output);
  }

  // optional bool isEvaded = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->isevaded(), output);
  }

  // optional float expireTime = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->expiretime(), output);
  }

  // optional float maximpacttime = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->maximpacttime(), output);
  }

  // optional fixed32 colorgemcolor = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(11, this->colorgemcolor(), output);
  }

  // optional int32 launch_tick = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->launch_tick(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_TE_Projectile)
}

::google::protobuf::uint8* CDOTAUserMsg_TE_Projectile::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_TE_Projectile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 hSource = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->hsource(), target);
  }

  // optional int32 hTarget = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->htarget(), target);
  }

  // optional int32 moveSpeed = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->movespeed(), target);
  }

  // optional int32 sourceAttachment = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sourceattachment(), target);
  }

  // optional int64 particleSystemHandle = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->particlesystemhandle(), target);
  }

  // optional bool dodgeable = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->dodgeable(), target);
  }

  // optional bool isAttack = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->isattack(), target);
  }

  // optional bool isEvaded = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->isevaded(), target);
  }

  // optional float expireTime = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->expiretime(), target);
  }

  // optional float maximpacttime = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->maximpacttime(), target);
  }

  // optional fixed32 colorgemcolor = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(11, this->colorgemcolor(), target);
  }

  // optional int32 launch_tick = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->launch_tick(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_TE_Projectile)
  return target;
}

size_t CDOTAUserMsg_TE_Projectile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_TE_Projectile)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional int32 hSource = 1;
    if (has_hsource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hsource());
    }

    // optional int32 hTarget = 2;
    if (has_htarget()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->htarget());
    }

    // optional int32 moveSpeed = 3;
    if (has_movespeed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->movespeed());
    }

    // optional int32 sourceAttachment = 4;
    if (has_sourceattachment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sourceattachment());
    }

    // optional int64 particleSystemHandle = 5;
    if (has_particlesystemhandle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->particlesystemhandle());
    }

    // optional bool dodgeable = 6;
    if (has_dodgeable()) {
      total_size += 1 + 1;
    }

    // optional bool isAttack = 7;
    if (has_isattack()) {
      total_size += 1 + 1;
    }

    // optional bool isEvaded = 8;
    if (has_isevaded()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional float expireTime = 9;
    if (has_expiretime()) {
      total_size += 1 + 4;
    }

    // optional float maximpacttime = 10;
    if (has_maximpacttime()) {
      total_size += 1 + 4;
    }

    // optional fixed32 colorgemcolor = 11;
    if (has_colorgemcolor()) {
      total_size += 1 + 4;
    }

    // optional int32 launch_tick = 12;
    if (has_launch_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->launch_tick());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_TE_Projectile::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_TE_Projectile)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_TE_Projectile* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_TE_Projectile>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_TE_Projectile)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_TE_Projectile)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_TE_Projectile::MergeFrom(const CDOTAUserMsg_TE_Projectile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_TE_Projectile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      hsource_ = from.hsource_;
    }
    if (cached_has_bits & 0x00000002u) {
      htarget_ = from.htarget_;
    }
    if (cached_has_bits & 0x00000004u) {
      movespeed_ = from.movespeed_;
    }
    if (cached_has_bits & 0x00000008u) {
      sourceattachment_ = from.sourceattachment_;
    }
    if (cached_has_bits & 0x00000010u) {
      particlesystemhandle_ = from.particlesystemhandle_;
    }
    if (cached_has_bits & 0x00000020u) {
      dodgeable_ = from.dodgeable_;
    }
    if (cached_has_bits & 0x00000040u) {
      isattack_ = from.isattack_;
    }
    if (cached_has_bits & 0x00000080u) {
      isevaded_ = from.isevaded_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      expiretime_ = from.expiretime_;
    }
    if (cached_has_bits & 0x00000200u) {
      maximpacttime_ = from.maximpacttime_;
    }
    if (cached_has_bits & 0x00000400u) {
      colorgemcolor_ = from.colorgemcolor_;
    }
    if (cached_has_bits & 0x00000800u) {
      launch_tick_ = from.launch_tick_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_TE_Projectile::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_TE_Projectile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_TE_Projectile::CopyFrom(const CDOTAUserMsg_TE_Projectile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_TE_Projectile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_TE_Projectile::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_TE_Projectile::Swap(CDOTAUserMsg_TE_Projectile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_TE_Projectile::InternalSwap(CDOTAUserMsg_TE_Projectile* other) {
  std::swap(hsource_, other->hsource_);
  std::swap(htarget_, other->htarget_);
  std::swap(movespeed_, other->movespeed_);
  std::swap(sourceattachment_, other->sourceattachment_);
  std::swap(particlesystemhandle_, other->particlesystemhandle_);
  std::swap(dodgeable_, other->dodgeable_);
  std::swap(isattack_, other->isattack_);
  std::swap(isevaded_, other->isevaded_);
  std::swap(expiretime_, other->expiretime_);
  std::swap(maximpacttime_, other->maximpacttime_);
  std::swap(colorgemcolor_, other->colorgemcolor_);
  std::swap(launch_tick_, other->launch_tick_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_TE_Projectile::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_TE_Projectile

// optional int32 hSource = 1;
bool CDOTAUserMsg_TE_Projectile::has_hsource() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_TE_Projectile::set_has_hsource() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_TE_Projectile::clear_has_hsource() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_TE_Projectile::clear_hsource() {
  hsource_ = 0;
  clear_has_hsource();
}
::google::protobuf::int32 CDOTAUserMsg_TE_Projectile::hsource() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_TE_Projectile.hSource)
  return hsource_;
}
void CDOTAUserMsg_TE_Projectile::set_hsource(::google::protobuf::int32 value) {
  set_has_hsource();
  hsource_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_TE_Projectile.hSource)
}

// optional int32 hTarget = 2;
bool CDOTAUserMsg_TE_Projectile::has_htarget() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAUserMsg_TE_Projectile::set_has_htarget() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAUserMsg_TE_Projectile::clear_has_htarget() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAUserMsg_TE_Projectile::clear_htarget() {
  htarget_ = 0;
  clear_has_htarget();
}
::google::protobuf::int32 CDOTAUserMsg_TE_Projectile::htarget() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_TE_Projectile.hTarget)
  return htarget_;
}
void CDOTAUserMsg_TE_Projectile::set_htarget(::google::protobuf::int32 value) {
  set_has_htarget();
  htarget_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_TE_Projectile.hTarget)
}

// optional int32 moveSpeed = 3;
bool CDOTAUserMsg_TE_Projectile::has_movespeed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDOTAUserMsg_TE_Projectile::set_has_movespeed() {
  _has_bits_[0] |= 0x00000004u;
}
void CDOTAUserMsg_TE_Projectile::clear_has_movespeed() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDOTAUserMsg_TE_Projectile::clear_movespeed() {
  movespeed_ = 0;
  clear_has_movespeed();
}
::google::protobuf::int32 CDOTAUserMsg_TE_Projectile::movespeed() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_TE_Projectile.moveSpeed)
  return movespeed_;
}
void CDOTAUserMsg_TE_Projectile::set_movespeed(::google::protobuf::int32 value) {
  set_has_movespeed();
  movespeed_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_TE_Projectile.moveSpeed)
}

// optional int32 sourceAttachment = 4;
bool CDOTAUserMsg_TE_Projectile::has_sourceattachment() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CDOTAUserMsg_TE_Projectile::set_has_sourceattachment() {
  _has_bits_[0] |= 0x00000008u;
}
void CDOTAUserMsg_TE_Projectile::clear_has_sourceattachment() {
  _has_bits_[0] &= ~0x00000008u;
}
void CDOTAUserMsg_TE_Projectile::clear_sourceattachment() {
  sourceattachment_ = 0;
  clear_has_sourceattachment();
}
::google::protobuf::int32 CDOTAUserMsg_TE_Projectile::sourceattachment() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_TE_Projectile.sourceAttachment)
  return sourceattachment_;
}
void CDOTAUserMsg_TE_Projectile::set_sourceattachment(::google::protobuf::int32 value) {
  set_has_sourceattachment();
  sourceattachment_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_TE_Projectile.sourceAttachment)
}

// optional int64 particleSystemHandle = 5;
bool CDOTAUserMsg_TE_Projectile::has_particlesystemhandle() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CDOTAUserMsg_TE_Projectile::set_has_particlesystemhandle() {
  _has_bits_[0] |= 0x00000010u;
}
void CDOTAUserMsg_TE_Projectile::clear_has_particlesystemhandle() {
  _has_bits_[0] &= ~0x00000010u;
}
void CDOTAUserMsg_TE_Projectile::clear_particlesystemhandle() {
  particlesystemhandle_ = GOOGLE_LONGLONG(0);
  clear_has_particlesystemhandle();
}
::google::protobuf::int64 CDOTAUserMsg_TE_Projectile::particlesystemhandle() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_TE_Projectile.particleSystemHandle)
  return particlesystemhandle_;
}
void CDOTAUserMsg_TE_Projectile::set_particlesystemhandle(::google::protobuf::int64 value) {
  set_has_particlesystemhandle();
  particlesystemhandle_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_TE_Projectile.particleSystemHandle)
}

// optional bool dodgeable = 6;
bool CDOTAUserMsg_TE_Projectile::has_dodgeable() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CDOTAUserMsg_TE_Projectile::set_has_dodgeable() {
  _has_bits_[0] |= 0x00000020u;
}
void CDOTAUserMsg_TE_Projectile::clear_has_dodgeable() {
  _has_bits_[0] &= ~0x00000020u;
}
void CDOTAUserMsg_TE_Projectile::clear_dodgeable() {
  dodgeable_ = false;
  clear_has_dodgeable();
}
bool CDOTAUserMsg_TE_Projectile::dodgeable() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_TE_Projectile.dodgeable)
  return dodgeable_;
}
void CDOTAUserMsg_TE_Projectile::set_dodgeable(bool value) {
  set_has_dodgeable();
  dodgeable_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_TE_Projectile.dodgeable)
}

// optional bool isAttack = 7;
bool CDOTAUserMsg_TE_Projectile::has_isattack() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CDOTAUserMsg_TE_Projectile::set_has_isattack() {
  _has_bits_[0] |= 0x00000040u;
}
void CDOTAUserMsg_TE_Projectile::clear_has_isattack() {
  _has_bits_[0] &= ~0x00000040u;
}
void CDOTAUserMsg_TE_Projectile::clear_isattack() {
  isattack_ = false;
  clear_has_isattack();
}
bool CDOTAUserMsg_TE_Projectile::isattack() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_TE_Projectile.isAttack)
  return isattack_;
}
void CDOTAUserMsg_TE_Projectile::set_isattack(bool value) {
  set_has_isattack();
  isattack_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_TE_Projectile.isAttack)
}

// optional bool isEvaded = 8;
bool CDOTAUserMsg_TE_Projectile::has_isevaded() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CDOTAUserMsg_TE_Projectile::set_has_isevaded() {
  _has_bits_[0] |= 0x00000080u;
}
void CDOTAUserMsg_TE_Projectile::clear_has_isevaded() {
  _has_bits_[0] &= ~0x00000080u;
}
void CDOTAUserMsg_TE_Projectile::clear_isevaded() {
  isevaded_ = false;
  clear_has_isevaded();
}
bool CDOTAUserMsg_TE_Projectile::isevaded() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_TE_Projectile.isEvaded)
  return isevaded_;
}
void CDOTAUserMsg_TE_Projectile::set_isevaded(bool value) {
  set_has_isevaded();
  isevaded_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_TE_Projectile.isEvaded)
}

// optional float expireTime = 9;
bool CDOTAUserMsg_TE_Projectile::has_expiretime() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CDOTAUserMsg_TE_Projectile::set_has_expiretime() {
  _has_bits_[0] |= 0x00000100u;
}
void CDOTAUserMsg_TE_Projectile::clear_has_expiretime() {
  _has_bits_[0] &= ~0x00000100u;
}
void CDOTAUserMsg_TE_Projectile::clear_expiretime() {
  expiretime_ = 0;
  clear_has_expiretime();
}
float CDOTAUserMsg_TE_Projectile::expiretime() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_TE_Projectile.expireTime)
  return expiretime_;
}
void CDOTAUserMsg_TE_Projectile::set_expiretime(float value) {
  set_has_expiretime();
  expiretime_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_TE_Projectile.expireTime)
}

// optional float maximpacttime = 10;
bool CDOTAUserMsg_TE_Projectile::has_maximpacttime() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CDOTAUserMsg_TE_Projectile::set_has_maximpacttime() {
  _has_bits_[0] |= 0x00000200u;
}
void CDOTAUserMsg_TE_Projectile::clear_has_maximpacttime() {
  _has_bits_[0] &= ~0x00000200u;
}
void CDOTAUserMsg_TE_Projectile::clear_maximpacttime() {
  maximpacttime_ = 0;
  clear_has_maximpacttime();
}
float CDOTAUserMsg_TE_Projectile::maximpacttime() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_TE_Projectile.maximpacttime)
  return maximpacttime_;
}
void CDOTAUserMsg_TE_Projectile::set_maximpacttime(float value) {
  set_has_maximpacttime();
  maximpacttime_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_TE_Projectile.maximpacttime)
}

// optional fixed32 colorgemcolor = 11;
bool CDOTAUserMsg_TE_Projectile::has_colorgemcolor() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CDOTAUserMsg_TE_Projectile::set_has_colorgemcolor() {
  _has_bits_[0] |= 0x00000400u;
}
void CDOTAUserMsg_TE_Projectile::clear_has_colorgemcolor() {
  _has_bits_[0] &= ~0x00000400u;
}
void CDOTAUserMsg_TE_Projectile::clear_colorgemcolor() {
  colorgemcolor_ = 0u;
  clear_has_colorgemcolor();
}
::google::protobuf::uint32 CDOTAUserMsg_TE_Projectile::colorgemcolor() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_TE_Projectile.colorgemcolor)
  return colorgemcolor_;
}
void CDOTAUserMsg_TE_Projectile::set_colorgemcolor(::google::protobuf::uint32 value) {
  set_has_colorgemcolor();
  colorgemcolor_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_TE_Projectile.colorgemcolor)
}

// optional int32 launch_tick = 12;
bool CDOTAUserMsg_TE_Projectile::has_launch_tick() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CDOTAUserMsg_TE_Projectile::set_has_launch_tick() {
  _has_bits_[0] |= 0x00000800u;
}
void CDOTAUserMsg_TE_Projectile::clear_has_launch_tick() {
  _has_bits_[0] &= ~0x00000800u;
}
void CDOTAUserMsg_TE_Projectile::clear_launch_tick() {
  launch_tick_ = 0;
  clear_has_launch_tick();
}
::google::protobuf::int32 CDOTAUserMsg_TE_Projectile::launch_tick() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_TE_Projectile.launch_tick)
  return launch_tick_;
}
void CDOTAUserMsg_TE_Projectile::set_launch_tick(::google::protobuf::int32 value) {
  set_has_launch_tick();
  launch_tick_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_TE_Projectile.launch_tick)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_TE_ProjectileLoc::kVSourceLocFieldNumber;
const int CDOTAUserMsg_TE_ProjectileLoc::kHTargetFieldNumber;
const int CDOTAUserMsg_TE_ProjectileLoc::kMoveSpeedFieldNumber;
const int CDOTAUserMsg_TE_ProjectileLoc::kParticleSystemHandleFieldNumber;
const int CDOTAUserMsg_TE_ProjectileLoc::kDodgeableFieldNumber;
const int CDOTAUserMsg_TE_ProjectileLoc::kIsAttackFieldNumber;
const int CDOTAUserMsg_TE_ProjectileLoc::kIsEvadedFieldNumber;
const int CDOTAUserMsg_TE_ProjectileLoc::kExpireTimeFieldNumber;
const int CDOTAUserMsg_TE_ProjectileLoc::kVTargetLocFieldNumber;
const int CDOTAUserMsg_TE_ProjectileLoc::kColorgemcolorFieldNumber;
const int CDOTAUserMsg_TE_ProjectileLoc::kLaunchTickFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_TE_ProjectileLoc::CDOTAUserMsg_TE_ProjectileLoc()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_TE_ProjectileLoc)
}
CDOTAUserMsg_TE_ProjectileLoc::CDOTAUserMsg_TE_ProjectileLoc(const CDOTAUserMsg_TE_ProjectileLoc& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_vsourceloc()) {
    vsourceloc_ = new ::proto::dota::CMsgVector(*from.vsourceloc_);
  } else {
    vsourceloc_ = NULL;
  }
  if (from.has_vtargetloc()) {
    vtargetloc_ = new ::proto::dota::CMsgVector(*from.vtargetloc_);
  } else {
    vtargetloc_ = NULL;
  }
  ::memcpy(&htarget_, &from.htarget_,
    reinterpret_cast<char*>(&launch_tick_) -
    reinterpret_cast<char*>(&htarget_) + sizeof(launch_tick_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_TE_ProjectileLoc)
}

void CDOTAUserMsg_TE_ProjectileLoc::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&vsourceloc_, 0, reinterpret_cast<char*>(&launch_tick_) -
    reinterpret_cast<char*>(&vsourceloc_) + sizeof(launch_tick_));
}

CDOTAUserMsg_TE_ProjectileLoc::~CDOTAUserMsg_TE_ProjectileLoc() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_TE_ProjectileLoc)
  SharedDtor();
}

void CDOTAUserMsg_TE_ProjectileLoc::SharedDtor() {
  if (this != internal_default_instance()) {
    delete vsourceloc_;
  }
  if (this != internal_default_instance()) {
    delete vtargetloc_;
  }
}

void CDOTAUserMsg_TE_ProjectileLoc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_TE_ProjectileLoc::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_TE_ProjectileLoc& CDOTAUserMsg_TE_ProjectileLoc::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_TE_ProjectileLoc* CDOTAUserMsg_TE_ProjectileLoc::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_TE_ProjectileLoc* n = new CDOTAUserMsg_TE_ProjectileLoc;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_TE_ProjectileLoc::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_TE_ProjectileLoc)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_vsourceloc()) {
      GOOGLE_DCHECK(vsourceloc_ != NULL);
      vsourceloc_->::proto::dota::CMsgVector::Clear();
    }
    if (has_vtargetloc()) {
      GOOGLE_DCHECK(vtargetloc_ != NULL);
      vtargetloc_->::proto::dota::CMsgVector::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 252u) {
    ::memset(&htarget_, 0, reinterpret_cast<char*>(&isevaded_) -
      reinterpret_cast<char*>(&htarget_) + sizeof(isevaded_));
  }
  if (_has_bits_[8 / 32] & 1792u) {
    ::memset(&expiretime_, 0, reinterpret_cast<char*>(&launch_tick_) -
      reinterpret_cast<char*>(&expiretime_) + sizeof(launch_tick_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_TE_ProjectileLoc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_TE_ProjectileLoc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgVector vSourceLoc = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vsourceloc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 hTarget = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_htarget();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &htarget_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 moveSpeed = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_movespeed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &movespeed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 particleSystemHandle = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_particlesystemhandle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &particlesystemhandle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool dodgeable = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_dodgeable();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dodgeable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool isAttack = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_isattack();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isattack_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool isEvaded = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_isevaded();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isevaded_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float expireTime = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u)) {
          set_has_expiretime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &expiretime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgVector vTargetLoc = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vtargetloc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 colorgemcolor = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u)) {
          set_has_colorgemcolor();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &colorgemcolor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 launch_tick = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_launch_tick();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &launch_tick_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_TE_ProjectileLoc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_TE_ProjectileLoc)
  return false;
#undef DO_
}

void CDOTAUserMsg_TE_ProjectileLoc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_TE_ProjectileLoc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgVector vSourceLoc = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->vsourceloc_, output);
  }

  // optional int32 hTarget = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->htarget(), output);
  }

  // optional int32 moveSpeed = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->movespeed(), output);
  }

  // optional int64 particleSystemHandle = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->particlesystemhandle(), output);
  }

  // optional bool dodgeable = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->dodgeable(), output);
  }

  // optional bool isAttack = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->isattack(), output);
  }

  // optional bool isEvaded = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->isevaded(), output);
  }

  // optional float expireTime = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->expiretime(), output);
  }

  // optional .proto.dota.CMsgVector vTargetLoc = 10;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->vtargetloc_, output);
  }

  // optional fixed32 colorgemcolor = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(11, this->colorgemcolor(), output);
  }

  // optional int32 launch_tick = 12;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->launch_tick(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_TE_ProjectileLoc)
}

::google::protobuf::uint8* CDOTAUserMsg_TE_ProjectileLoc::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_TE_ProjectileLoc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgVector vSourceLoc = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->vsourceloc_, deterministic, target);
  }

  // optional int32 hTarget = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->htarget(), target);
  }

  // optional int32 moveSpeed = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->movespeed(), target);
  }

  // optional int64 particleSystemHandle = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->particlesystemhandle(), target);
  }

  // optional bool dodgeable = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->dodgeable(), target);
  }

  // optional bool isAttack = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->isattack(), target);
  }

  // optional bool isEvaded = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->isevaded(), target);
  }

  // optional float expireTime = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->expiretime(), target);
  }

  // optional .proto.dota.CMsgVector vTargetLoc = 10;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->vtargetloc_, deterministic, target);
  }

  // optional fixed32 colorgemcolor = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(11, this->colorgemcolor(), target);
  }

  // optional int32 launch_tick = 12;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->launch_tick(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_TE_ProjectileLoc)
  return target;
}

size_t CDOTAUserMsg_TE_ProjectileLoc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_TE_ProjectileLoc)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .proto.dota.CMsgVector vSourceLoc = 1;
    if (has_vsourceloc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->vsourceloc_);
    }

    // optional .proto.dota.CMsgVector vTargetLoc = 10;
    if (has_vtargetloc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->vtargetloc_);
    }

    // optional int32 hTarget = 2;
    if (has_htarget()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->htarget());
    }

    // optional int32 moveSpeed = 3;
    if (has_movespeed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->movespeed());
    }

    // optional int64 particleSystemHandle = 4;
    if (has_particlesystemhandle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->particlesystemhandle());
    }

    // optional bool dodgeable = 5;
    if (has_dodgeable()) {
      total_size += 1 + 1;
    }

    // optional bool isAttack = 6;
    if (has_isattack()) {
      total_size += 1 + 1;
    }

    // optional bool isEvaded = 8;
    if (has_isevaded()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional float expireTime = 9;
    if (has_expiretime()) {
      total_size += 1 + 4;
    }

    // optional fixed32 colorgemcolor = 11;
    if (has_colorgemcolor()) {
      total_size += 1 + 4;
    }

    // optional int32 launch_tick = 12;
    if (has_launch_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->launch_tick());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_TE_ProjectileLoc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_TE_ProjectileLoc)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_TE_ProjectileLoc* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_TE_ProjectileLoc>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_TE_ProjectileLoc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_TE_ProjectileLoc)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_TE_ProjectileLoc::MergeFrom(const CDOTAUserMsg_TE_ProjectileLoc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_TE_ProjectileLoc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_vsourceloc()->::proto::dota::CMsgVector::MergeFrom(from.vsourceloc());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_vtargetloc()->::proto::dota::CMsgVector::MergeFrom(from.vtargetloc());
    }
    if (cached_has_bits & 0x00000004u) {
      htarget_ = from.htarget_;
    }
    if (cached_has_bits & 0x00000008u) {
      movespeed_ = from.movespeed_;
    }
    if (cached_has_bits & 0x00000010u) {
      particlesystemhandle_ = from.particlesystemhandle_;
    }
    if (cached_has_bits & 0x00000020u) {
      dodgeable_ = from.dodgeable_;
    }
    if (cached_has_bits & 0x00000040u) {
      isattack_ = from.isattack_;
    }
    if (cached_has_bits & 0x00000080u) {
      isevaded_ = from.isevaded_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      expiretime_ = from.expiretime_;
    }
    if (cached_has_bits & 0x00000200u) {
      colorgemcolor_ = from.colorgemcolor_;
    }
    if (cached_has_bits & 0x00000400u) {
      launch_tick_ = from.launch_tick_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_TE_ProjectileLoc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_TE_ProjectileLoc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_TE_ProjectileLoc::CopyFrom(const CDOTAUserMsg_TE_ProjectileLoc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_TE_ProjectileLoc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_TE_ProjectileLoc::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_TE_ProjectileLoc::Swap(CDOTAUserMsg_TE_ProjectileLoc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_TE_ProjectileLoc::InternalSwap(CDOTAUserMsg_TE_ProjectileLoc* other) {
  std::swap(vsourceloc_, other->vsourceloc_);
  std::swap(vtargetloc_, other->vtargetloc_);
  std::swap(htarget_, other->htarget_);
  std::swap(movespeed_, other->movespeed_);
  std::swap(particlesystemhandle_, other->particlesystemhandle_);
  std::swap(dodgeable_, other->dodgeable_);
  std::swap(isattack_, other->isattack_);
  std::swap(isevaded_, other->isevaded_);
  std::swap(expiretime_, other->expiretime_);
  std::swap(colorgemcolor_, other->colorgemcolor_);
  std::swap(launch_tick_, other->launch_tick_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_TE_ProjectileLoc::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_TE_ProjectileLoc

// optional .proto.dota.CMsgVector vSourceLoc = 1;
bool CDOTAUserMsg_TE_ProjectileLoc::has_vsourceloc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_TE_ProjectileLoc::set_has_vsourceloc() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_TE_ProjectileLoc::clear_has_vsourceloc() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_TE_ProjectileLoc::clear_vsourceloc() {
  if (vsourceloc_ != NULL) vsourceloc_->::proto::dota::CMsgVector::Clear();
  clear_has_vsourceloc();
}
const ::proto::dota::CMsgVector& CDOTAUserMsg_TE_ProjectileLoc::vsourceloc() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_TE_ProjectileLoc.vSourceLoc)
  return vsourceloc_ != NULL ? *vsourceloc_
                         : *::proto::dota::CMsgVector::internal_default_instance();
}
::proto::dota::CMsgVector* CDOTAUserMsg_TE_ProjectileLoc::mutable_vsourceloc() {
  set_has_vsourceloc();
  if (vsourceloc_ == NULL) {
    vsourceloc_ = new ::proto::dota::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_TE_ProjectileLoc.vSourceLoc)
  return vsourceloc_;
}
::proto::dota::CMsgVector* CDOTAUserMsg_TE_ProjectileLoc::release_vsourceloc() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAUserMsg_TE_ProjectileLoc.vSourceLoc)
  clear_has_vsourceloc();
  ::proto::dota::CMsgVector* temp = vsourceloc_;
  vsourceloc_ = NULL;
  return temp;
}
void CDOTAUserMsg_TE_ProjectileLoc::set_allocated_vsourceloc(::proto::dota::CMsgVector* vsourceloc) {
  delete vsourceloc_;
  vsourceloc_ = vsourceloc;
  if (vsourceloc) {
    set_has_vsourceloc();
  } else {
    clear_has_vsourceloc();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAUserMsg_TE_ProjectileLoc.vSourceLoc)
}

// optional int32 hTarget = 2;
bool CDOTAUserMsg_TE_ProjectileLoc::has_htarget() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDOTAUserMsg_TE_ProjectileLoc::set_has_htarget() {
  _has_bits_[0] |= 0x00000004u;
}
void CDOTAUserMsg_TE_ProjectileLoc::clear_has_htarget() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDOTAUserMsg_TE_ProjectileLoc::clear_htarget() {
  htarget_ = 0;
  clear_has_htarget();
}
::google::protobuf::int32 CDOTAUserMsg_TE_ProjectileLoc::htarget() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_TE_ProjectileLoc.hTarget)
  return htarget_;
}
void CDOTAUserMsg_TE_ProjectileLoc::set_htarget(::google::protobuf::int32 value) {
  set_has_htarget();
  htarget_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_TE_ProjectileLoc.hTarget)
}

// optional int32 moveSpeed = 3;
bool CDOTAUserMsg_TE_ProjectileLoc::has_movespeed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CDOTAUserMsg_TE_ProjectileLoc::set_has_movespeed() {
  _has_bits_[0] |= 0x00000008u;
}
void CDOTAUserMsg_TE_ProjectileLoc::clear_has_movespeed() {
  _has_bits_[0] &= ~0x00000008u;
}
void CDOTAUserMsg_TE_ProjectileLoc::clear_movespeed() {
  movespeed_ = 0;
  clear_has_movespeed();
}
::google::protobuf::int32 CDOTAUserMsg_TE_ProjectileLoc::movespeed() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_TE_ProjectileLoc.moveSpeed)
  return movespeed_;
}
void CDOTAUserMsg_TE_ProjectileLoc::set_movespeed(::google::protobuf::int32 value) {
  set_has_movespeed();
  movespeed_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_TE_ProjectileLoc.moveSpeed)
}

// optional int64 particleSystemHandle = 4;
bool CDOTAUserMsg_TE_ProjectileLoc::has_particlesystemhandle() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CDOTAUserMsg_TE_ProjectileLoc::set_has_particlesystemhandle() {
  _has_bits_[0] |= 0x00000010u;
}
void CDOTAUserMsg_TE_ProjectileLoc::clear_has_particlesystemhandle() {
  _has_bits_[0] &= ~0x00000010u;
}
void CDOTAUserMsg_TE_ProjectileLoc::clear_particlesystemhandle() {
  particlesystemhandle_ = GOOGLE_LONGLONG(0);
  clear_has_particlesystemhandle();
}
::google::protobuf::int64 CDOTAUserMsg_TE_ProjectileLoc::particlesystemhandle() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_TE_ProjectileLoc.particleSystemHandle)
  return particlesystemhandle_;
}
void CDOTAUserMsg_TE_ProjectileLoc::set_particlesystemhandle(::google::protobuf::int64 value) {
  set_has_particlesystemhandle();
  particlesystemhandle_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_TE_ProjectileLoc.particleSystemHandle)
}

// optional bool dodgeable = 5;
bool CDOTAUserMsg_TE_ProjectileLoc::has_dodgeable() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CDOTAUserMsg_TE_ProjectileLoc::set_has_dodgeable() {
  _has_bits_[0] |= 0x00000020u;
}
void CDOTAUserMsg_TE_ProjectileLoc::clear_has_dodgeable() {
  _has_bits_[0] &= ~0x00000020u;
}
void CDOTAUserMsg_TE_ProjectileLoc::clear_dodgeable() {
  dodgeable_ = false;
  clear_has_dodgeable();
}
bool CDOTAUserMsg_TE_ProjectileLoc::dodgeable() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_TE_ProjectileLoc.dodgeable)
  return dodgeable_;
}
void CDOTAUserMsg_TE_ProjectileLoc::set_dodgeable(bool value) {
  set_has_dodgeable();
  dodgeable_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_TE_ProjectileLoc.dodgeable)
}

// optional bool isAttack = 6;
bool CDOTAUserMsg_TE_ProjectileLoc::has_isattack() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CDOTAUserMsg_TE_ProjectileLoc::set_has_isattack() {
  _has_bits_[0] |= 0x00000040u;
}
void CDOTAUserMsg_TE_ProjectileLoc::clear_has_isattack() {
  _has_bits_[0] &= ~0x00000040u;
}
void CDOTAUserMsg_TE_ProjectileLoc::clear_isattack() {
  isattack_ = false;
  clear_has_isattack();
}
bool CDOTAUserMsg_TE_ProjectileLoc::isattack() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_TE_ProjectileLoc.isAttack)
  return isattack_;
}
void CDOTAUserMsg_TE_ProjectileLoc::set_isattack(bool value) {
  set_has_isattack();
  isattack_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_TE_ProjectileLoc.isAttack)
}

// optional bool isEvaded = 8;
bool CDOTAUserMsg_TE_ProjectileLoc::has_isevaded() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CDOTAUserMsg_TE_ProjectileLoc::set_has_isevaded() {
  _has_bits_[0] |= 0x00000080u;
}
void CDOTAUserMsg_TE_ProjectileLoc::clear_has_isevaded() {
  _has_bits_[0] &= ~0x00000080u;
}
void CDOTAUserMsg_TE_ProjectileLoc::clear_isevaded() {
  isevaded_ = false;
  clear_has_isevaded();
}
bool CDOTAUserMsg_TE_ProjectileLoc::isevaded() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_TE_ProjectileLoc.isEvaded)
  return isevaded_;
}
void CDOTAUserMsg_TE_ProjectileLoc::set_isevaded(bool value) {
  set_has_isevaded();
  isevaded_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_TE_ProjectileLoc.isEvaded)
}

// optional float expireTime = 9;
bool CDOTAUserMsg_TE_ProjectileLoc::has_expiretime() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CDOTAUserMsg_TE_ProjectileLoc::set_has_expiretime() {
  _has_bits_[0] |= 0x00000100u;
}
void CDOTAUserMsg_TE_ProjectileLoc::clear_has_expiretime() {
  _has_bits_[0] &= ~0x00000100u;
}
void CDOTAUserMsg_TE_ProjectileLoc::clear_expiretime() {
  expiretime_ = 0;
  clear_has_expiretime();
}
float CDOTAUserMsg_TE_ProjectileLoc::expiretime() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_TE_ProjectileLoc.expireTime)
  return expiretime_;
}
void CDOTAUserMsg_TE_ProjectileLoc::set_expiretime(float value) {
  set_has_expiretime();
  expiretime_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_TE_ProjectileLoc.expireTime)
}

// optional .proto.dota.CMsgVector vTargetLoc = 10;
bool CDOTAUserMsg_TE_ProjectileLoc::has_vtargetloc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAUserMsg_TE_ProjectileLoc::set_has_vtargetloc() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAUserMsg_TE_ProjectileLoc::clear_has_vtargetloc() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAUserMsg_TE_ProjectileLoc::clear_vtargetloc() {
  if (vtargetloc_ != NULL) vtargetloc_->::proto::dota::CMsgVector::Clear();
  clear_has_vtargetloc();
}
const ::proto::dota::CMsgVector& CDOTAUserMsg_TE_ProjectileLoc::vtargetloc() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_TE_ProjectileLoc.vTargetLoc)
  return vtargetloc_ != NULL ? *vtargetloc_
                         : *::proto::dota::CMsgVector::internal_default_instance();
}
::proto::dota::CMsgVector* CDOTAUserMsg_TE_ProjectileLoc::mutable_vtargetloc() {
  set_has_vtargetloc();
  if (vtargetloc_ == NULL) {
    vtargetloc_ = new ::proto::dota::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_TE_ProjectileLoc.vTargetLoc)
  return vtargetloc_;
}
::proto::dota::CMsgVector* CDOTAUserMsg_TE_ProjectileLoc::release_vtargetloc() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAUserMsg_TE_ProjectileLoc.vTargetLoc)
  clear_has_vtargetloc();
  ::proto::dota::CMsgVector* temp = vtargetloc_;
  vtargetloc_ = NULL;
  return temp;
}
void CDOTAUserMsg_TE_ProjectileLoc::set_allocated_vtargetloc(::proto::dota::CMsgVector* vtargetloc) {
  delete vtargetloc_;
  vtargetloc_ = vtargetloc;
  if (vtargetloc) {
    set_has_vtargetloc();
  } else {
    clear_has_vtargetloc();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAUserMsg_TE_ProjectileLoc.vTargetLoc)
}

// optional fixed32 colorgemcolor = 11;
bool CDOTAUserMsg_TE_ProjectileLoc::has_colorgemcolor() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CDOTAUserMsg_TE_ProjectileLoc::set_has_colorgemcolor() {
  _has_bits_[0] |= 0x00000200u;
}
void CDOTAUserMsg_TE_ProjectileLoc::clear_has_colorgemcolor() {
  _has_bits_[0] &= ~0x00000200u;
}
void CDOTAUserMsg_TE_ProjectileLoc::clear_colorgemcolor() {
  colorgemcolor_ = 0u;
  clear_has_colorgemcolor();
}
::google::protobuf::uint32 CDOTAUserMsg_TE_ProjectileLoc::colorgemcolor() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_TE_ProjectileLoc.colorgemcolor)
  return colorgemcolor_;
}
void CDOTAUserMsg_TE_ProjectileLoc::set_colorgemcolor(::google::protobuf::uint32 value) {
  set_has_colorgemcolor();
  colorgemcolor_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_TE_ProjectileLoc.colorgemcolor)
}

// optional int32 launch_tick = 12;
bool CDOTAUserMsg_TE_ProjectileLoc::has_launch_tick() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CDOTAUserMsg_TE_ProjectileLoc::set_has_launch_tick() {
  _has_bits_[0] |= 0x00000400u;
}
void CDOTAUserMsg_TE_ProjectileLoc::clear_has_launch_tick() {
  _has_bits_[0] &= ~0x00000400u;
}
void CDOTAUserMsg_TE_ProjectileLoc::clear_launch_tick() {
  launch_tick_ = 0;
  clear_has_launch_tick();
}
::google::protobuf::int32 CDOTAUserMsg_TE_ProjectileLoc::launch_tick() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_TE_ProjectileLoc.launch_tick)
  return launch_tick_;
}
void CDOTAUserMsg_TE_ProjectileLoc::set_launch_tick(::google::protobuf::int32 value) {
  set_has_launch_tick();
  launch_tick_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_TE_ProjectileLoc.launch_tick)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_TE_DotaBloodImpact::kEntityFieldNumber;
const int CDOTAUserMsg_TE_DotaBloodImpact::kScaleFieldNumber;
const int CDOTAUserMsg_TE_DotaBloodImpact::kXnormalFieldNumber;
const int CDOTAUserMsg_TE_DotaBloodImpact::kYnormalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_TE_DotaBloodImpact::CDOTAUserMsg_TE_DotaBloodImpact()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_TE_DotaBloodImpact)
}
CDOTAUserMsg_TE_DotaBloodImpact::CDOTAUserMsg_TE_DotaBloodImpact(const CDOTAUserMsg_TE_DotaBloodImpact& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&entity_, &from.entity_,
    reinterpret_cast<char*>(&ynormal_) -
    reinterpret_cast<char*>(&entity_) + sizeof(ynormal_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_TE_DotaBloodImpact)
}

void CDOTAUserMsg_TE_DotaBloodImpact::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&entity_, 0, reinterpret_cast<char*>(&ynormal_) -
    reinterpret_cast<char*>(&entity_) + sizeof(ynormal_));
}

CDOTAUserMsg_TE_DotaBloodImpact::~CDOTAUserMsg_TE_DotaBloodImpact() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_TE_DotaBloodImpact)
  SharedDtor();
}

void CDOTAUserMsg_TE_DotaBloodImpact::SharedDtor() {
}

void CDOTAUserMsg_TE_DotaBloodImpact::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_TE_DotaBloodImpact::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_TE_DotaBloodImpact& CDOTAUserMsg_TE_DotaBloodImpact::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_TE_DotaBloodImpact* CDOTAUserMsg_TE_DotaBloodImpact::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_TE_DotaBloodImpact* n = new CDOTAUserMsg_TE_DotaBloodImpact;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_TE_DotaBloodImpact::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_TE_DotaBloodImpact)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&entity_, 0, reinterpret_cast<char*>(&ynormal_) -
      reinterpret_cast<char*>(&entity_) + sizeof(ynormal_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_TE_DotaBloodImpact::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_TE_DotaBloodImpact)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 entity = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_entity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float scale = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float xnormal = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_xnormal();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &xnormal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float ynormal = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_ynormal();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ynormal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_TE_DotaBloodImpact)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_TE_DotaBloodImpact)
  return false;
#undef DO_
}

void CDOTAUserMsg_TE_DotaBloodImpact::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_TE_DotaBloodImpact)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 entity = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->entity(), output);
  }

  // optional float scale = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->scale(), output);
  }

  // optional float xnormal = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->xnormal(), output);
  }

  // optional float ynormal = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->ynormal(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_TE_DotaBloodImpact)
}

::google::protobuf::uint8* CDOTAUserMsg_TE_DotaBloodImpact::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_TE_DotaBloodImpact)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 entity = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->entity(), target);
  }

  // optional float scale = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->scale(), target);
  }

  // optional float xnormal = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->xnormal(), target);
  }

  // optional float ynormal = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->ynormal(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_TE_DotaBloodImpact)
  return target;
}

size_t CDOTAUserMsg_TE_DotaBloodImpact::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_TE_DotaBloodImpact)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional int32 entity = 1;
    if (has_entity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entity());
    }

    // optional float scale = 2;
    if (has_scale()) {
      total_size += 1 + 4;
    }

    // optional float xnormal = 3;
    if (has_xnormal()) {
      total_size += 1 + 4;
    }

    // optional float ynormal = 4;
    if (has_ynormal()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_TE_DotaBloodImpact::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_TE_DotaBloodImpact)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_TE_DotaBloodImpact* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_TE_DotaBloodImpact>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_TE_DotaBloodImpact)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_TE_DotaBloodImpact)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_TE_DotaBloodImpact::MergeFrom(const CDOTAUserMsg_TE_DotaBloodImpact& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_TE_DotaBloodImpact)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      entity_ = from.entity_;
    }
    if (cached_has_bits & 0x00000002u) {
      scale_ = from.scale_;
    }
    if (cached_has_bits & 0x00000004u) {
      xnormal_ = from.xnormal_;
    }
    if (cached_has_bits & 0x00000008u) {
      ynormal_ = from.ynormal_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_TE_DotaBloodImpact::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_TE_DotaBloodImpact)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_TE_DotaBloodImpact::CopyFrom(const CDOTAUserMsg_TE_DotaBloodImpact& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_TE_DotaBloodImpact)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_TE_DotaBloodImpact::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_TE_DotaBloodImpact::Swap(CDOTAUserMsg_TE_DotaBloodImpact* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_TE_DotaBloodImpact::InternalSwap(CDOTAUserMsg_TE_DotaBloodImpact* other) {
  std::swap(entity_, other->entity_);
  std::swap(scale_, other->scale_);
  std::swap(xnormal_, other->xnormal_);
  std::swap(ynormal_, other->ynormal_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_TE_DotaBloodImpact::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_TE_DotaBloodImpact

// optional int32 entity = 1;
bool CDOTAUserMsg_TE_DotaBloodImpact::has_entity() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_TE_DotaBloodImpact::set_has_entity() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_TE_DotaBloodImpact::clear_has_entity() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_TE_DotaBloodImpact::clear_entity() {
  entity_ = 0;
  clear_has_entity();
}
::google::protobuf::int32 CDOTAUserMsg_TE_DotaBloodImpact::entity() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_TE_DotaBloodImpact.entity)
  return entity_;
}
void CDOTAUserMsg_TE_DotaBloodImpact::set_entity(::google::protobuf::int32 value) {
  set_has_entity();
  entity_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_TE_DotaBloodImpact.entity)
}

// optional float scale = 2;
bool CDOTAUserMsg_TE_DotaBloodImpact::has_scale() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAUserMsg_TE_DotaBloodImpact::set_has_scale() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAUserMsg_TE_DotaBloodImpact::clear_has_scale() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAUserMsg_TE_DotaBloodImpact::clear_scale() {
  scale_ = 0;
  clear_has_scale();
}
float CDOTAUserMsg_TE_DotaBloodImpact::scale() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_TE_DotaBloodImpact.scale)
  return scale_;
}
void CDOTAUserMsg_TE_DotaBloodImpact::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_TE_DotaBloodImpact.scale)
}

// optional float xnormal = 3;
bool CDOTAUserMsg_TE_DotaBloodImpact::has_xnormal() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDOTAUserMsg_TE_DotaBloodImpact::set_has_xnormal() {
  _has_bits_[0] |= 0x00000004u;
}
void CDOTAUserMsg_TE_DotaBloodImpact::clear_has_xnormal() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDOTAUserMsg_TE_DotaBloodImpact::clear_xnormal() {
  xnormal_ = 0;
  clear_has_xnormal();
}
float CDOTAUserMsg_TE_DotaBloodImpact::xnormal() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_TE_DotaBloodImpact.xnormal)
  return xnormal_;
}
void CDOTAUserMsg_TE_DotaBloodImpact::set_xnormal(float value) {
  set_has_xnormal();
  xnormal_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_TE_DotaBloodImpact.xnormal)
}

// optional float ynormal = 4;
bool CDOTAUserMsg_TE_DotaBloodImpact::has_ynormal() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CDOTAUserMsg_TE_DotaBloodImpact::set_has_ynormal() {
  _has_bits_[0] |= 0x00000008u;
}
void CDOTAUserMsg_TE_DotaBloodImpact::clear_has_ynormal() {
  _has_bits_[0] &= ~0x00000008u;
}
void CDOTAUserMsg_TE_DotaBloodImpact::clear_ynormal() {
  ynormal_ = 0;
  clear_has_ynormal();
}
float CDOTAUserMsg_TE_DotaBloodImpact::ynormal() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_TE_DotaBloodImpact.ynormal)
  return ynormal_;
}
void CDOTAUserMsg_TE_DotaBloodImpact::set_ynormal(float value) {
  set_has_ynormal();
  ynormal_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_TE_DotaBloodImpact.ynormal)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_AbilityPing::kPlayerIdFieldNumber;
const int CDOTAUserMsg_AbilityPing::kAbilityIdFieldNumber;
const int CDOTAUserMsg_AbilityPing::kTypeFieldNumber;
const int CDOTAUserMsg_AbilityPing::kCooldownSecondsFieldNumber;
const int CDOTAUserMsg_AbilityPing::kLevelFieldNumber;
const int CDOTAUserMsg_AbilityPing::kPassiveFieldNumber;
const int CDOTAUserMsg_AbilityPing::kManaNeededFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_AbilityPing::CDOTAUserMsg_AbilityPing()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_AbilityPing)
}
CDOTAUserMsg_AbilityPing::CDOTAUserMsg_AbilityPing(const CDOTAUserMsg_AbilityPing& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&player_id_, &from.player_id_,
    reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&player_id_) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_AbilityPing)
}

void CDOTAUserMsg_AbilityPing::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&player_id_, 0, reinterpret_cast<char*>(&mana_needed_) -
    reinterpret_cast<char*>(&player_id_) + sizeof(mana_needed_));
  type_ = 1;
}

CDOTAUserMsg_AbilityPing::~CDOTAUserMsg_AbilityPing() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_AbilityPing)
  SharedDtor();
}

void CDOTAUserMsg_AbilityPing::SharedDtor() {
}

void CDOTAUserMsg_AbilityPing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_AbilityPing::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_AbilityPing& CDOTAUserMsg_AbilityPing::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_AbilityPing* CDOTAUserMsg_AbilityPing::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_AbilityPing* n = new CDOTAUserMsg_AbilityPing;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_AbilityPing::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_AbilityPing)
  if (_has_bits_[0 / 32] & 127u) {
    ::memset(&player_id_, 0, reinterpret_cast<char*>(&mana_needed_) -
      reinterpret_cast<char*>(&player_id_) + sizeof(mana_needed_));
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_AbilityPing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_AbilityPing)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_player_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ability_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_ability_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ability_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.DOTA_ABILITY_PING_TYPE type = 3 [default = ABILITY_PING_READY];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTA_ABILITY_PING_TYPE_IsValid(value)) {
            set_type(static_cast< ::proto::dota::DOTA_ABILITY_PING_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cooldown_seconds = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_cooldown_seconds();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cooldown_seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 level = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool passive = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_passive();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &passive_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 mana_needed = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_mana_needed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mana_needed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_AbilityPing)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_AbilityPing)
  return false;
#undef DO_
}

void CDOTAUserMsg_AbilityPing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_AbilityPing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_id(), output);
  }

  // optional uint32 ability_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ability_id(), output);
  }

  // optional .proto.dota.DOTA_ABILITY_PING_TYPE type = 3 [default = ABILITY_PING_READY];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional uint32 cooldown_seconds = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cooldown_seconds(), output);
  }

  // optional uint32 level = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->level(), output);
  }

  // optional bool passive = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->passive(), output);
  }

  // optional uint32 mana_needed = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->mana_needed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_AbilityPing)
}

::google::protobuf::uint8* CDOTAUserMsg_AbilityPing::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_AbilityPing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_id(), target);
  }

  // optional uint32 ability_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ability_id(), target);
  }

  // optional .proto.dota.DOTA_ABILITY_PING_TYPE type = 3 [default = ABILITY_PING_READY];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional uint32 cooldown_seconds = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cooldown_seconds(), target);
  }

  // optional uint32 level = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->level(), target);
  }

  // optional bool passive = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->passive(), target);
  }

  // optional uint32 mana_needed = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->mana_needed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_AbilityPing)
  return target;
}

size_t CDOTAUserMsg_AbilityPing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_AbilityPing)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional uint32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_id());
    }

    // optional uint32 ability_id = 2;
    if (has_ability_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ability_id());
    }

    // optional uint32 cooldown_seconds = 4;
    if (has_cooldown_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cooldown_seconds());
    }

    // optional uint32 level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional bool passive = 6;
    if (has_passive()) {
      total_size += 1 + 1;
    }

    // optional uint32 mana_needed = 7;
    if (has_mana_needed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mana_needed());
    }

    // optional .proto.dota.DOTA_ABILITY_PING_TYPE type = 3 [default = ABILITY_PING_READY];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_AbilityPing::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_AbilityPing)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_AbilityPing* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_AbilityPing>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_AbilityPing)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_AbilityPing)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_AbilityPing::MergeFrom(const CDOTAUserMsg_AbilityPing& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_AbilityPing)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      player_id_ = from.player_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      ability_id_ = from.ability_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      cooldown_seconds_ = from.cooldown_seconds_;
    }
    if (cached_has_bits & 0x00000008u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000010u) {
      passive_ = from.passive_;
    }
    if (cached_has_bits & 0x00000020u) {
      mana_needed_ = from.mana_needed_;
    }
    if (cached_has_bits & 0x00000040u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_AbilityPing::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_AbilityPing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_AbilityPing::CopyFrom(const CDOTAUserMsg_AbilityPing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_AbilityPing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_AbilityPing::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_AbilityPing::Swap(CDOTAUserMsg_AbilityPing* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_AbilityPing::InternalSwap(CDOTAUserMsg_AbilityPing* other) {
  std::swap(player_id_, other->player_id_);
  std::swap(ability_id_, other->ability_id_);
  std::swap(cooldown_seconds_, other->cooldown_seconds_);
  std::swap(level_, other->level_);
  std::swap(passive_, other->passive_);
  std::swap(mana_needed_, other->mana_needed_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_AbilityPing::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_AbilityPing

// optional uint32 player_id = 1;
bool CDOTAUserMsg_AbilityPing::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_AbilityPing::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_AbilityPing::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_AbilityPing::clear_player_id() {
  player_id_ = 0u;
  clear_has_player_id();
}
::google::protobuf::uint32 CDOTAUserMsg_AbilityPing::player_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_AbilityPing.player_id)
  return player_id_;
}
void CDOTAUserMsg_AbilityPing::set_player_id(::google::protobuf::uint32 value) {
  set_has_player_id();
  player_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_AbilityPing.player_id)
}

// optional uint32 ability_id = 2;
bool CDOTAUserMsg_AbilityPing::has_ability_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAUserMsg_AbilityPing::set_has_ability_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAUserMsg_AbilityPing::clear_has_ability_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAUserMsg_AbilityPing::clear_ability_id() {
  ability_id_ = 0u;
  clear_has_ability_id();
}
::google::protobuf::uint32 CDOTAUserMsg_AbilityPing::ability_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_AbilityPing.ability_id)
  return ability_id_;
}
void CDOTAUserMsg_AbilityPing::set_ability_id(::google::protobuf::uint32 value) {
  set_has_ability_id();
  ability_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_AbilityPing.ability_id)
}

// optional .proto.dota.DOTA_ABILITY_PING_TYPE type = 3 [default = ABILITY_PING_READY];
bool CDOTAUserMsg_AbilityPing::has_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CDOTAUserMsg_AbilityPing::set_has_type() {
  _has_bits_[0] |= 0x00000040u;
}
void CDOTAUserMsg_AbilityPing::clear_has_type() {
  _has_bits_[0] &= ~0x00000040u;
}
void CDOTAUserMsg_AbilityPing::clear_type() {
  type_ = 1;
  clear_has_type();
}
::proto::dota::DOTA_ABILITY_PING_TYPE CDOTAUserMsg_AbilityPing::type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_AbilityPing.type)
  return static_cast< ::proto::dota::DOTA_ABILITY_PING_TYPE >(type_);
}
void CDOTAUserMsg_AbilityPing::set_type(::proto::dota::DOTA_ABILITY_PING_TYPE value) {
  assert(::proto::dota::DOTA_ABILITY_PING_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_AbilityPing.type)
}

// optional uint32 cooldown_seconds = 4;
bool CDOTAUserMsg_AbilityPing::has_cooldown_seconds() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDOTAUserMsg_AbilityPing::set_has_cooldown_seconds() {
  _has_bits_[0] |= 0x00000004u;
}
void CDOTAUserMsg_AbilityPing::clear_has_cooldown_seconds() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDOTAUserMsg_AbilityPing::clear_cooldown_seconds() {
  cooldown_seconds_ = 0u;
  clear_has_cooldown_seconds();
}
::google::protobuf::uint32 CDOTAUserMsg_AbilityPing::cooldown_seconds() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_AbilityPing.cooldown_seconds)
  return cooldown_seconds_;
}
void CDOTAUserMsg_AbilityPing::set_cooldown_seconds(::google::protobuf::uint32 value) {
  set_has_cooldown_seconds();
  cooldown_seconds_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_AbilityPing.cooldown_seconds)
}

// optional uint32 level = 5;
bool CDOTAUserMsg_AbilityPing::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CDOTAUserMsg_AbilityPing::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
void CDOTAUserMsg_AbilityPing::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
void CDOTAUserMsg_AbilityPing::clear_level() {
  level_ = 0u;
  clear_has_level();
}
::google::protobuf::uint32 CDOTAUserMsg_AbilityPing::level() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_AbilityPing.level)
  return level_;
}
void CDOTAUserMsg_AbilityPing::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_AbilityPing.level)
}

// optional bool passive = 6;
bool CDOTAUserMsg_AbilityPing::has_passive() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CDOTAUserMsg_AbilityPing::set_has_passive() {
  _has_bits_[0] |= 0x00000010u;
}
void CDOTAUserMsg_AbilityPing::clear_has_passive() {
  _has_bits_[0] &= ~0x00000010u;
}
void CDOTAUserMsg_AbilityPing::clear_passive() {
  passive_ = false;
  clear_has_passive();
}
bool CDOTAUserMsg_AbilityPing::passive() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_AbilityPing.passive)
  return passive_;
}
void CDOTAUserMsg_AbilityPing::set_passive(bool value) {
  set_has_passive();
  passive_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_AbilityPing.passive)
}

// optional uint32 mana_needed = 7;
bool CDOTAUserMsg_AbilityPing::has_mana_needed() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CDOTAUserMsg_AbilityPing::set_has_mana_needed() {
  _has_bits_[0] |= 0x00000020u;
}
void CDOTAUserMsg_AbilityPing::clear_has_mana_needed() {
  _has_bits_[0] &= ~0x00000020u;
}
void CDOTAUserMsg_AbilityPing::clear_mana_needed() {
  mana_needed_ = 0u;
  clear_has_mana_needed();
}
::google::protobuf::uint32 CDOTAUserMsg_AbilityPing::mana_needed() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_AbilityPing.mana_needed)
  return mana_needed_;
}
void CDOTAUserMsg_AbilityPing::set_mana_needed(::google::protobuf::uint32 value) {
  set_has_mana_needed();
  mana_needed_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_AbilityPing.mana_needed)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_TE_UnitAnimation::kEntityFieldNumber;
const int CDOTAUserMsg_TE_UnitAnimation::kSequenceVariantFieldNumber;
const int CDOTAUserMsg_TE_UnitAnimation::kPlaybackrateFieldNumber;
const int CDOTAUserMsg_TE_UnitAnimation::kCastpointFieldNumber;
const int CDOTAUserMsg_TE_UnitAnimation::kTypeFieldNumber;
const int CDOTAUserMsg_TE_UnitAnimation::kActivityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_TE_UnitAnimation::CDOTAUserMsg_TE_UnitAnimation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_TE_UnitAnimation)
}
CDOTAUserMsg_TE_UnitAnimation::CDOTAUserMsg_TE_UnitAnimation(const CDOTAUserMsg_TE_UnitAnimation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&entity_, &from.entity_,
    reinterpret_cast<char*>(&activity_) -
    reinterpret_cast<char*>(&entity_) + sizeof(activity_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_TE_UnitAnimation)
}

void CDOTAUserMsg_TE_UnitAnimation::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&entity_, 0, reinterpret_cast<char*>(&activity_) -
    reinterpret_cast<char*>(&entity_) + sizeof(activity_));
}

CDOTAUserMsg_TE_UnitAnimation::~CDOTAUserMsg_TE_UnitAnimation() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_TE_UnitAnimation)
  SharedDtor();
}

void CDOTAUserMsg_TE_UnitAnimation::SharedDtor() {
}

void CDOTAUserMsg_TE_UnitAnimation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_TE_UnitAnimation::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_TE_UnitAnimation& CDOTAUserMsg_TE_UnitAnimation::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_TE_UnitAnimation* CDOTAUserMsg_TE_UnitAnimation::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_TE_UnitAnimation* n = new CDOTAUserMsg_TE_UnitAnimation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_TE_UnitAnimation::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_TE_UnitAnimation)
  if (_has_bits_[0 / 32] & 63u) {
    ::memset(&entity_, 0, reinterpret_cast<char*>(&activity_) -
      reinterpret_cast<char*>(&entity_) + sizeof(activity_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_TE_UnitAnimation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_TE_UnitAnimation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 entity = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_entity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 sequenceVariant = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_sequencevariant();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sequencevariant_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float playbackrate = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_playbackrate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &playbackrate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float castpoint = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_castpoint();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &castpoint_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 activity = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_activity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &activity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_TE_UnitAnimation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_TE_UnitAnimation)
  return false;
#undef DO_
}

void CDOTAUserMsg_TE_UnitAnimation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_TE_UnitAnimation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 entity = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->entity(), output);
  }

  // optional int32 sequenceVariant = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sequencevariant(), output);
  }

  // optional float playbackrate = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->playbackrate(), output);
  }

  // optional float castpoint = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->castpoint(), output);
  }

  // optional int32 type = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->type(), output);
  }

  // optional int32 activity = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->activity(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_TE_UnitAnimation)
}

::google::protobuf::uint8* CDOTAUserMsg_TE_UnitAnimation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_TE_UnitAnimation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 entity = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->entity(), target);
  }

  // optional int32 sequenceVariant = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sequencevariant(), target);
  }

  // optional float playbackrate = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->playbackrate(), target);
  }

  // optional float castpoint = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->castpoint(), target);
  }

  // optional int32 type = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->type(), target);
  }

  // optional int32 activity = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->activity(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_TE_UnitAnimation)
  return target;
}

size_t CDOTAUserMsg_TE_UnitAnimation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_TE_UnitAnimation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional int32 entity = 1;
    if (has_entity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entity());
    }

    // optional int32 sequenceVariant = 2;
    if (has_sequencevariant()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sequencevariant());
    }

    // optional float playbackrate = 3;
    if (has_playbackrate()) {
      total_size += 1 + 4;
    }

    // optional float castpoint = 4;
    if (has_castpoint()) {
      total_size += 1 + 4;
    }

    // optional int32 type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 activity = 6;
    if (has_activity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->activity());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_TE_UnitAnimation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_TE_UnitAnimation)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_TE_UnitAnimation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_TE_UnitAnimation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_TE_UnitAnimation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_TE_UnitAnimation)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_TE_UnitAnimation::MergeFrom(const CDOTAUserMsg_TE_UnitAnimation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_TE_UnitAnimation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      entity_ = from.entity_;
    }
    if (cached_has_bits & 0x00000002u) {
      sequencevariant_ = from.sequencevariant_;
    }
    if (cached_has_bits & 0x00000004u) {
      playbackrate_ = from.playbackrate_;
    }
    if (cached_has_bits & 0x00000008u) {
      castpoint_ = from.castpoint_;
    }
    if (cached_has_bits & 0x00000010u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000020u) {
      activity_ = from.activity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_TE_UnitAnimation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_TE_UnitAnimation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_TE_UnitAnimation::CopyFrom(const CDOTAUserMsg_TE_UnitAnimation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_TE_UnitAnimation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_TE_UnitAnimation::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_TE_UnitAnimation::Swap(CDOTAUserMsg_TE_UnitAnimation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_TE_UnitAnimation::InternalSwap(CDOTAUserMsg_TE_UnitAnimation* other) {
  std::swap(entity_, other->entity_);
  std::swap(sequencevariant_, other->sequencevariant_);
  std::swap(playbackrate_, other->playbackrate_);
  std::swap(castpoint_, other->castpoint_);
  std::swap(type_, other->type_);
  std::swap(activity_, other->activity_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_TE_UnitAnimation::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_TE_UnitAnimation

// optional int32 entity = 1;
bool CDOTAUserMsg_TE_UnitAnimation::has_entity() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_TE_UnitAnimation::set_has_entity() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_TE_UnitAnimation::clear_has_entity() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_TE_UnitAnimation::clear_entity() {
  entity_ = 0;
  clear_has_entity();
}
::google::protobuf::int32 CDOTAUserMsg_TE_UnitAnimation::entity() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_TE_UnitAnimation.entity)
  return entity_;
}
void CDOTAUserMsg_TE_UnitAnimation::set_entity(::google::protobuf::int32 value) {
  set_has_entity();
  entity_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_TE_UnitAnimation.entity)
}

// optional int32 sequenceVariant = 2;
bool CDOTAUserMsg_TE_UnitAnimation::has_sequencevariant() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAUserMsg_TE_UnitAnimation::set_has_sequencevariant() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAUserMsg_TE_UnitAnimation::clear_has_sequencevariant() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAUserMsg_TE_UnitAnimation::clear_sequencevariant() {
  sequencevariant_ = 0;
  clear_has_sequencevariant();
}
::google::protobuf::int32 CDOTAUserMsg_TE_UnitAnimation::sequencevariant() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_TE_UnitAnimation.sequenceVariant)
  return sequencevariant_;
}
void CDOTAUserMsg_TE_UnitAnimation::set_sequencevariant(::google::protobuf::int32 value) {
  set_has_sequencevariant();
  sequencevariant_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_TE_UnitAnimation.sequenceVariant)
}

// optional float playbackrate = 3;
bool CDOTAUserMsg_TE_UnitAnimation::has_playbackrate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDOTAUserMsg_TE_UnitAnimation::set_has_playbackrate() {
  _has_bits_[0] |= 0x00000004u;
}
void CDOTAUserMsg_TE_UnitAnimation::clear_has_playbackrate() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDOTAUserMsg_TE_UnitAnimation::clear_playbackrate() {
  playbackrate_ = 0;
  clear_has_playbackrate();
}
float CDOTAUserMsg_TE_UnitAnimation::playbackrate() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_TE_UnitAnimation.playbackrate)
  return playbackrate_;
}
void CDOTAUserMsg_TE_UnitAnimation::set_playbackrate(float value) {
  set_has_playbackrate();
  playbackrate_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_TE_UnitAnimation.playbackrate)
}

// optional float castpoint = 4;
bool CDOTAUserMsg_TE_UnitAnimation::has_castpoint() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CDOTAUserMsg_TE_UnitAnimation::set_has_castpoint() {
  _has_bits_[0] |= 0x00000008u;
}
void CDOTAUserMsg_TE_UnitAnimation::clear_has_castpoint() {
  _has_bits_[0] &= ~0x00000008u;
}
void CDOTAUserMsg_TE_UnitAnimation::clear_castpoint() {
  castpoint_ = 0;
  clear_has_castpoint();
}
float CDOTAUserMsg_TE_UnitAnimation::castpoint() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_TE_UnitAnimation.castpoint)
  return castpoint_;
}
void CDOTAUserMsg_TE_UnitAnimation::set_castpoint(float value) {
  set_has_castpoint();
  castpoint_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_TE_UnitAnimation.castpoint)
}

// optional int32 type = 5;
bool CDOTAUserMsg_TE_UnitAnimation::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CDOTAUserMsg_TE_UnitAnimation::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
void CDOTAUserMsg_TE_UnitAnimation::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
void CDOTAUserMsg_TE_UnitAnimation::clear_type() {
  type_ = 0;
  clear_has_type();
}
::google::protobuf::int32 CDOTAUserMsg_TE_UnitAnimation::type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_TE_UnitAnimation.type)
  return type_;
}
void CDOTAUserMsg_TE_UnitAnimation::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_TE_UnitAnimation.type)
}

// optional int32 activity = 6;
bool CDOTAUserMsg_TE_UnitAnimation::has_activity() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CDOTAUserMsg_TE_UnitAnimation::set_has_activity() {
  _has_bits_[0] |= 0x00000020u;
}
void CDOTAUserMsg_TE_UnitAnimation::clear_has_activity() {
  _has_bits_[0] &= ~0x00000020u;
}
void CDOTAUserMsg_TE_UnitAnimation::clear_activity() {
  activity_ = 0;
  clear_has_activity();
}
::google::protobuf::int32 CDOTAUserMsg_TE_UnitAnimation::activity() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_TE_UnitAnimation.activity)
  return activity_;
}
void CDOTAUserMsg_TE_UnitAnimation::set_activity(::google::protobuf::int32 value) {
  set_has_activity();
  activity_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_TE_UnitAnimation.activity)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_TE_UnitAnimationEnd::kEntityFieldNumber;
const int CDOTAUserMsg_TE_UnitAnimationEnd::kSnapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_TE_UnitAnimationEnd::CDOTAUserMsg_TE_UnitAnimationEnd()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_TE_UnitAnimationEnd)
}
CDOTAUserMsg_TE_UnitAnimationEnd::CDOTAUserMsg_TE_UnitAnimationEnd(const CDOTAUserMsg_TE_UnitAnimationEnd& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&entity_, &from.entity_,
    reinterpret_cast<char*>(&snap_) -
    reinterpret_cast<char*>(&entity_) + sizeof(snap_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_TE_UnitAnimationEnd)
}

void CDOTAUserMsg_TE_UnitAnimationEnd::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&entity_, 0, reinterpret_cast<char*>(&snap_) -
    reinterpret_cast<char*>(&entity_) + sizeof(snap_));
}

CDOTAUserMsg_TE_UnitAnimationEnd::~CDOTAUserMsg_TE_UnitAnimationEnd() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_TE_UnitAnimationEnd)
  SharedDtor();
}

void CDOTAUserMsg_TE_UnitAnimationEnd::SharedDtor() {
}

void CDOTAUserMsg_TE_UnitAnimationEnd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_TE_UnitAnimationEnd::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_TE_UnitAnimationEnd& CDOTAUserMsg_TE_UnitAnimationEnd::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_TE_UnitAnimationEnd* CDOTAUserMsg_TE_UnitAnimationEnd::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_TE_UnitAnimationEnd* n = new CDOTAUserMsg_TE_UnitAnimationEnd;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_TE_UnitAnimationEnd::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_TE_UnitAnimationEnd)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&entity_, 0, reinterpret_cast<char*>(&snap_) -
      reinterpret_cast<char*>(&entity_) + sizeof(snap_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_TE_UnitAnimationEnd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_TE_UnitAnimationEnd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 entity = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_entity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool snap = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_snap();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &snap_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_TE_UnitAnimationEnd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_TE_UnitAnimationEnd)
  return false;
#undef DO_
}

void CDOTAUserMsg_TE_UnitAnimationEnd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_TE_UnitAnimationEnd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 entity = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->entity(), output);
  }

  // optional bool snap = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->snap(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_TE_UnitAnimationEnd)
}

::google::protobuf::uint8* CDOTAUserMsg_TE_UnitAnimationEnd::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_TE_UnitAnimationEnd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 entity = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->entity(), target);
  }

  // optional bool snap = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->snap(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_TE_UnitAnimationEnd)
  return target;
}

size_t CDOTAUserMsg_TE_UnitAnimationEnd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_TE_UnitAnimationEnd)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 entity = 1;
    if (has_entity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entity());
    }

    // optional bool snap = 2;
    if (has_snap()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_TE_UnitAnimationEnd::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_TE_UnitAnimationEnd)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_TE_UnitAnimationEnd* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_TE_UnitAnimationEnd>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_TE_UnitAnimationEnd)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_TE_UnitAnimationEnd)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_TE_UnitAnimationEnd::MergeFrom(const CDOTAUserMsg_TE_UnitAnimationEnd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_TE_UnitAnimationEnd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      entity_ = from.entity_;
    }
    if (cached_has_bits & 0x00000002u) {
      snap_ = from.snap_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_TE_UnitAnimationEnd::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_TE_UnitAnimationEnd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_TE_UnitAnimationEnd::CopyFrom(const CDOTAUserMsg_TE_UnitAnimationEnd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_TE_UnitAnimationEnd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_TE_UnitAnimationEnd::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_TE_UnitAnimationEnd::Swap(CDOTAUserMsg_TE_UnitAnimationEnd* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_TE_UnitAnimationEnd::InternalSwap(CDOTAUserMsg_TE_UnitAnimationEnd* other) {
  std::swap(entity_, other->entity_);
  std::swap(snap_, other->snap_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_TE_UnitAnimationEnd::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_TE_UnitAnimationEnd

// optional int32 entity = 1;
bool CDOTAUserMsg_TE_UnitAnimationEnd::has_entity() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_TE_UnitAnimationEnd::set_has_entity() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_TE_UnitAnimationEnd::clear_has_entity() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_TE_UnitAnimationEnd::clear_entity() {
  entity_ = 0;
  clear_has_entity();
}
::google::protobuf::int32 CDOTAUserMsg_TE_UnitAnimationEnd::entity() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_TE_UnitAnimationEnd.entity)
  return entity_;
}
void CDOTAUserMsg_TE_UnitAnimationEnd::set_entity(::google::protobuf::int32 value) {
  set_has_entity();
  entity_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_TE_UnitAnimationEnd.entity)
}

// optional bool snap = 2;
bool CDOTAUserMsg_TE_UnitAnimationEnd::has_snap() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAUserMsg_TE_UnitAnimationEnd::set_has_snap() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAUserMsg_TE_UnitAnimationEnd::clear_has_snap() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAUserMsg_TE_UnitAnimationEnd::clear_snap() {
  snap_ = false;
  clear_has_snap();
}
bool CDOTAUserMsg_TE_UnitAnimationEnd::snap() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_TE_UnitAnimationEnd.snap)
  return snap_;
}
void CDOTAUserMsg_TE_UnitAnimationEnd::set_snap(bool value) {
  set_has_snap();
  snap_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_TE_UnitAnimationEnd.snap)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_ShowGenericPopup::kHeaderFieldNumber;
const int CDOTAUserMsg_ShowGenericPopup::kBodyFieldNumber;
const int CDOTAUserMsg_ShowGenericPopup::kParam1FieldNumber;
const int CDOTAUserMsg_ShowGenericPopup::kParam2FieldNumber;
const int CDOTAUserMsg_ShowGenericPopup::kTintScreenFieldNumber;
const int CDOTAUserMsg_ShowGenericPopup::kShowNoOtherDialogsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_ShowGenericPopup::CDOTAUserMsg_ShowGenericPopup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_ShowGenericPopup)
}
CDOTAUserMsg_ShowGenericPopup::CDOTAUserMsg_ShowGenericPopup(const CDOTAUserMsg_ShowGenericPopup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  header_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_header()) {
    header_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.header_);
  }
  body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_body()) {
    body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body_);
  }
  param1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_param1()) {
    param1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.param1_);
  }
  param2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_param2()) {
    param2_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.param2_);
  }
  ::memcpy(&tint_screen_, &from.tint_screen_,
    reinterpret_cast<char*>(&show_no_other_dialogs_) -
    reinterpret_cast<char*>(&tint_screen_) + sizeof(show_no_other_dialogs_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_ShowGenericPopup)
}

void CDOTAUserMsg_ShowGenericPopup::SharedCtor() {
  _cached_size_ = 0;
  header_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  param1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  param2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&tint_screen_, 0, reinterpret_cast<char*>(&show_no_other_dialogs_) -
    reinterpret_cast<char*>(&tint_screen_) + sizeof(show_no_other_dialogs_));
}

CDOTAUserMsg_ShowGenericPopup::~CDOTAUserMsg_ShowGenericPopup() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_ShowGenericPopup)
  SharedDtor();
}

void CDOTAUserMsg_ShowGenericPopup::SharedDtor() {
  header_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  body_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  param1_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  param2_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CDOTAUserMsg_ShowGenericPopup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_ShowGenericPopup::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_ShowGenericPopup& CDOTAUserMsg_ShowGenericPopup::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_ShowGenericPopup* CDOTAUserMsg_ShowGenericPopup::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_ShowGenericPopup* n = new CDOTAUserMsg_ShowGenericPopup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_ShowGenericPopup::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_ShowGenericPopup)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_header()) {
      GOOGLE_DCHECK(!header_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*header_.UnsafeRawStringPointer())->clear();
    }
    if (has_body()) {
      GOOGLE_DCHECK(!body_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*body_.UnsafeRawStringPointer())->clear();
    }
    if (has_param1()) {
      GOOGLE_DCHECK(!param1_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*param1_.UnsafeRawStringPointer())->clear();
    }
    if (has_param2()) {
      GOOGLE_DCHECK(!param2_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*param2_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 48u) {
    ::memset(&tint_screen_, 0, reinterpret_cast<char*>(&show_no_other_dialogs_) -
      reinterpret_cast<char*>(&tint_screen_) + sizeof(show_no_other_dialogs_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_ShowGenericPopup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_ShowGenericPopup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_header()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->header().data(), this->header().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDOTAUserMsg_ShowGenericPopup.header");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string body = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_body()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->body().data(), this->body().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDOTAUserMsg_ShowGenericPopup.body");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string param1 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_param1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->param1().data(), this->param1().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDOTAUserMsg_ShowGenericPopup.param1");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string param2 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_param2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->param2().data(), this->param2().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDOTAUserMsg_ShowGenericPopup.param2");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool tint_screen = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_tint_screen();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tint_screen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool show_no_other_dialogs = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_show_no_other_dialogs();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_no_other_dialogs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_ShowGenericPopup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_ShowGenericPopup)
  return false;
#undef DO_
}

void CDOTAUserMsg_ShowGenericPopup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_ShowGenericPopup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->header().data(), this->header().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAUserMsg_ShowGenericPopup.header");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->header(), output);
  }

  // required string body = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->body().data(), this->body().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAUserMsg_ShowGenericPopup.body");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->body(), output);
  }

  // optional string param1 = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->param1().data(), this->param1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAUserMsg_ShowGenericPopup.param1");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->param1(), output);
  }

  // optional string param2 = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->param2().data(), this->param2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAUserMsg_ShowGenericPopup.param2");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->param2(), output);
  }

  // optional bool tint_screen = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->tint_screen(), output);
  }

  // optional bool show_no_other_dialogs = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->show_no_other_dialogs(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_ShowGenericPopup)
}

::google::protobuf::uint8* CDOTAUserMsg_ShowGenericPopup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_ShowGenericPopup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->header().data(), this->header().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAUserMsg_ShowGenericPopup.header");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->header(), target);
  }

  // required string body = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->body().data(), this->body().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAUserMsg_ShowGenericPopup.body");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->body(), target);
  }

  // optional string param1 = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->param1().data(), this->param1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAUserMsg_ShowGenericPopup.param1");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->param1(), target);
  }

  // optional string param2 = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->param2().data(), this->param2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAUserMsg_ShowGenericPopup.param2");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->param2(), target);
  }

  // optional bool tint_screen = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->tint_screen(), target);
  }

  // optional bool show_no_other_dialogs = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->show_no_other_dialogs(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_ShowGenericPopup)
  return target;
}

size_t CDOTAUserMsg_ShowGenericPopup::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:proto.dota.CDOTAUserMsg_ShowGenericPopup)
  size_t total_size = 0;

  if (has_header()) {
    // required string header = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->header());
  }

  if (has_body()) {
    // required string body = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->body());
  }

  return total_size;
}
size_t CDOTAUserMsg_ShowGenericPopup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_ShowGenericPopup)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string header = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->header());

    // required string body = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->body());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 60u) {
    // optional string param1 = 3;
    if (has_param1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->param1());
    }

    // optional string param2 = 4;
    if (has_param2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->param2());
    }

    // optional bool tint_screen = 5;
    if (has_tint_screen()) {
      total_size += 1 + 1;
    }

    // optional bool show_no_other_dialogs = 6;
    if (has_show_no_other_dialogs()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_ShowGenericPopup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_ShowGenericPopup)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_ShowGenericPopup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_ShowGenericPopup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_ShowGenericPopup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_ShowGenericPopup)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_ShowGenericPopup::MergeFrom(const CDOTAUserMsg_ShowGenericPopup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_ShowGenericPopup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_header();
      header_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.header_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_body();
      body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_param1();
      param1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.param1_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_param2();
      param2_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.param2_);
    }
    if (cached_has_bits & 0x00000010u) {
      tint_screen_ = from.tint_screen_;
    }
    if (cached_has_bits & 0x00000020u) {
      show_no_other_dialogs_ = from.show_no_other_dialogs_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_ShowGenericPopup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_ShowGenericPopup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_ShowGenericPopup::CopyFrom(const CDOTAUserMsg_ShowGenericPopup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_ShowGenericPopup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ShowGenericPopup::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void CDOTAUserMsg_ShowGenericPopup::Swap(CDOTAUserMsg_ShowGenericPopup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_ShowGenericPopup::InternalSwap(CDOTAUserMsg_ShowGenericPopup* other) {
  header_.Swap(&other->header_);
  body_.Swap(&other->body_);
  param1_.Swap(&other->param1_);
  param2_.Swap(&other->param2_);
  std::swap(tint_screen_, other->tint_screen_);
  std::swap(show_no_other_dialogs_, other->show_no_other_dialogs_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_ShowGenericPopup::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_ShowGenericPopup

// required string header = 1;
bool CDOTAUserMsg_ShowGenericPopup::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_ShowGenericPopup::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_ShowGenericPopup::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_ShowGenericPopup::clear_header() {
  header_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_header();
}
const ::std::string& CDOTAUserMsg_ShowGenericPopup::header() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ShowGenericPopup.header)
  return header_.GetNoArena();
}
void CDOTAUserMsg_ShowGenericPopup::set_header(const ::std::string& value) {
  set_has_header();
  header_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_ShowGenericPopup.header)
}
#if LANG_CXX11
void CDOTAUserMsg_ShowGenericPopup::set_header(::std::string&& value) {
  set_has_header();
  header_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDOTAUserMsg_ShowGenericPopup.header)
}
#endif
void CDOTAUserMsg_ShowGenericPopup::set_header(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_header();
  header_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDOTAUserMsg_ShowGenericPopup.header)
}
void CDOTAUserMsg_ShowGenericPopup::set_header(const char* value, size_t size) {
  set_has_header();
  header_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDOTAUserMsg_ShowGenericPopup.header)
}
::std::string* CDOTAUserMsg_ShowGenericPopup::mutable_header() {
  set_has_header();
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_ShowGenericPopup.header)
  return header_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDOTAUserMsg_ShowGenericPopup::release_header() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAUserMsg_ShowGenericPopup.header)
  clear_has_header();
  return header_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDOTAUserMsg_ShowGenericPopup::set_allocated_header(::std::string* header) {
  if (header != NULL) {
    set_has_header();
  } else {
    clear_has_header();
  }
  header_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), header);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAUserMsg_ShowGenericPopup.header)
}

// required string body = 2;
bool CDOTAUserMsg_ShowGenericPopup::has_body() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAUserMsg_ShowGenericPopup::set_has_body() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAUserMsg_ShowGenericPopup::clear_has_body() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAUserMsg_ShowGenericPopup::clear_body() {
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_body();
}
const ::std::string& CDOTAUserMsg_ShowGenericPopup::body() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ShowGenericPopup.body)
  return body_.GetNoArena();
}
void CDOTAUserMsg_ShowGenericPopup::set_body(const ::std::string& value) {
  set_has_body();
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_ShowGenericPopup.body)
}
#if LANG_CXX11
void CDOTAUserMsg_ShowGenericPopup::set_body(::std::string&& value) {
  set_has_body();
  body_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDOTAUserMsg_ShowGenericPopup.body)
}
#endif
void CDOTAUserMsg_ShowGenericPopup::set_body(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_body();
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDOTAUserMsg_ShowGenericPopup.body)
}
void CDOTAUserMsg_ShowGenericPopup::set_body(const char* value, size_t size) {
  set_has_body();
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDOTAUserMsg_ShowGenericPopup.body)
}
::std::string* CDOTAUserMsg_ShowGenericPopup::mutable_body() {
  set_has_body();
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_ShowGenericPopup.body)
  return body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDOTAUserMsg_ShowGenericPopup::release_body() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAUserMsg_ShowGenericPopup.body)
  clear_has_body();
  return body_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDOTAUserMsg_ShowGenericPopup::set_allocated_body(::std::string* body) {
  if (body != NULL) {
    set_has_body();
  } else {
    clear_has_body();
  }
  body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), body);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAUserMsg_ShowGenericPopup.body)
}

// optional string param1 = 3;
bool CDOTAUserMsg_ShowGenericPopup::has_param1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDOTAUserMsg_ShowGenericPopup::set_has_param1() {
  _has_bits_[0] |= 0x00000004u;
}
void CDOTAUserMsg_ShowGenericPopup::clear_has_param1() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDOTAUserMsg_ShowGenericPopup::clear_param1() {
  param1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_param1();
}
const ::std::string& CDOTAUserMsg_ShowGenericPopup::param1() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ShowGenericPopup.param1)
  return param1_.GetNoArena();
}
void CDOTAUserMsg_ShowGenericPopup::set_param1(const ::std::string& value) {
  set_has_param1();
  param1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_ShowGenericPopup.param1)
}
#if LANG_CXX11
void CDOTAUserMsg_ShowGenericPopup::set_param1(::std::string&& value) {
  set_has_param1();
  param1_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDOTAUserMsg_ShowGenericPopup.param1)
}
#endif
void CDOTAUserMsg_ShowGenericPopup::set_param1(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_param1();
  param1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDOTAUserMsg_ShowGenericPopup.param1)
}
void CDOTAUserMsg_ShowGenericPopup::set_param1(const char* value, size_t size) {
  set_has_param1();
  param1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDOTAUserMsg_ShowGenericPopup.param1)
}
::std::string* CDOTAUserMsg_ShowGenericPopup::mutable_param1() {
  set_has_param1();
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_ShowGenericPopup.param1)
  return param1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDOTAUserMsg_ShowGenericPopup::release_param1() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAUserMsg_ShowGenericPopup.param1)
  clear_has_param1();
  return param1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDOTAUserMsg_ShowGenericPopup::set_allocated_param1(::std::string* param1) {
  if (param1 != NULL) {
    set_has_param1();
  } else {
    clear_has_param1();
  }
  param1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), param1);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAUserMsg_ShowGenericPopup.param1)
}

// optional string param2 = 4;
bool CDOTAUserMsg_ShowGenericPopup::has_param2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CDOTAUserMsg_ShowGenericPopup::set_has_param2() {
  _has_bits_[0] |= 0x00000008u;
}
void CDOTAUserMsg_ShowGenericPopup::clear_has_param2() {
  _has_bits_[0] &= ~0x00000008u;
}
void CDOTAUserMsg_ShowGenericPopup::clear_param2() {
  param2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_param2();
}
const ::std::string& CDOTAUserMsg_ShowGenericPopup::param2() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ShowGenericPopup.param2)
  return param2_.GetNoArena();
}
void CDOTAUserMsg_ShowGenericPopup::set_param2(const ::std::string& value) {
  set_has_param2();
  param2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_ShowGenericPopup.param2)
}
#if LANG_CXX11
void CDOTAUserMsg_ShowGenericPopup::set_param2(::std::string&& value) {
  set_has_param2();
  param2_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDOTAUserMsg_ShowGenericPopup.param2)
}
#endif
void CDOTAUserMsg_ShowGenericPopup::set_param2(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_param2();
  param2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDOTAUserMsg_ShowGenericPopup.param2)
}
void CDOTAUserMsg_ShowGenericPopup::set_param2(const char* value, size_t size) {
  set_has_param2();
  param2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDOTAUserMsg_ShowGenericPopup.param2)
}
::std::string* CDOTAUserMsg_ShowGenericPopup::mutable_param2() {
  set_has_param2();
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_ShowGenericPopup.param2)
  return param2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDOTAUserMsg_ShowGenericPopup::release_param2() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAUserMsg_ShowGenericPopup.param2)
  clear_has_param2();
  return param2_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDOTAUserMsg_ShowGenericPopup::set_allocated_param2(::std::string* param2) {
  if (param2 != NULL) {
    set_has_param2();
  } else {
    clear_has_param2();
  }
  param2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), param2);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAUserMsg_ShowGenericPopup.param2)
}

// optional bool tint_screen = 5;
bool CDOTAUserMsg_ShowGenericPopup::has_tint_screen() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CDOTAUserMsg_ShowGenericPopup::set_has_tint_screen() {
  _has_bits_[0] |= 0x00000010u;
}
void CDOTAUserMsg_ShowGenericPopup::clear_has_tint_screen() {
  _has_bits_[0] &= ~0x00000010u;
}
void CDOTAUserMsg_ShowGenericPopup::clear_tint_screen() {
  tint_screen_ = false;
  clear_has_tint_screen();
}
bool CDOTAUserMsg_ShowGenericPopup::tint_screen() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ShowGenericPopup.tint_screen)
  return tint_screen_;
}
void CDOTAUserMsg_ShowGenericPopup::set_tint_screen(bool value) {
  set_has_tint_screen();
  tint_screen_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_ShowGenericPopup.tint_screen)
}

// optional bool show_no_other_dialogs = 6;
bool CDOTAUserMsg_ShowGenericPopup::has_show_no_other_dialogs() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CDOTAUserMsg_ShowGenericPopup::set_has_show_no_other_dialogs() {
  _has_bits_[0] |= 0x00000020u;
}
void CDOTAUserMsg_ShowGenericPopup::clear_has_show_no_other_dialogs() {
  _has_bits_[0] &= ~0x00000020u;
}
void CDOTAUserMsg_ShowGenericPopup::clear_show_no_other_dialogs() {
  show_no_other_dialogs_ = false;
  clear_has_show_no_other_dialogs();
}
bool CDOTAUserMsg_ShowGenericPopup::show_no_other_dialogs() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ShowGenericPopup.show_no_other_dialogs)
  return show_no_other_dialogs_;
}
void CDOTAUserMsg_ShowGenericPopup::set_show_no_other_dialogs(bool value) {
  set_has_show_no_other_dialogs();
  show_no_other_dialogs_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_ShowGenericPopup.show_no_other_dialogs)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_VoteStart::kTitleFieldNumber;
const int CDOTAUserMsg_VoteStart::kDurationFieldNumber;
const int CDOTAUserMsg_VoteStart::kChoiceCountFieldNumber;
const int CDOTAUserMsg_VoteStart::kChoicesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_VoteStart::CDOTAUserMsg_VoteStart()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_VoteStart)
}
CDOTAUserMsg_VoteStart::CDOTAUserMsg_VoteStart(const CDOTAUserMsg_VoteStart& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      choices_(from.choices_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_title()) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  ::memcpy(&duration_, &from.duration_,
    reinterpret_cast<char*>(&choice_count_) -
    reinterpret_cast<char*>(&duration_) + sizeof(choice_count_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_VoteStart)
}

void CDOTAUserMsg_VoteStart::SharedCtor() {
  _cached_size_ = 0;
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&duration_, 0, reinterpret_cast<char*>(&choice_count_) -
    reinterpret_cast<char*>(&duration_) + sizeof(choice_count_));
}

CDOTAUserMsg_VoteStart::~CDOTAUserMsg_VoteStart() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_VoteStart)
  SharedDtor();
}

void CDOTAUserMsg_VoteStart::SharedDtor() {
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CDOTAUserMsg_VoteStart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_VoteStart::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_VoteStart& CDOTAUserMsg_VoteStart::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_VoteStart* CDOTAUserMsg_VoteStart::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_VoteStart* n = new CDOTAUserMsg_VoteStart;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_VoteStart::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_VoteStart)
  choices_.Clear();
  if (has_title()) {
    GOOGLE_DCHECK(!title_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*title_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&duration_, 0, reinterpret_cast<char*>(&choice_count_) -
      reinterpret_cast<char*>(&duration_) + sizeof(choice_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_VoteStart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_VoteStart)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string title = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDOTAUserMsg_VoteStart.title");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float duration = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_duration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 choice_count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_choice_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &choice_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string choices = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_choices()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->choices(this->choices_size() - 1).data(),
            this->choices(this->choices_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDOTAUserMsg_VoteStart.choices");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_VoteStart)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_VoteStart)
  return false;
#undef DO_
}

void CDOTAUserMsg_VoteStart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_VoteStart)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string title = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAUserMsg_VoteStart.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->title(), output);
  }

  // optional float duration = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->duration(), output);
  }

  // optional int32 choice_count = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->choice_count(), output);
  }

  // repeated string choices = 4;
  for (int i = 0, n = this->choices_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->choices(i).data(), this->choices(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAUserMsg_VoteStart.choices");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->choices(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_VoteStart)
}

::google::protobuf::uint8* CDOTAUserMsg_VoteStart::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_VoteStart)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string title = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAUserMsg_VoteStart.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->title(), target);
  }

  // optional float duration = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->duration(), target);
  }

  // optional int32 choice_count = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->choice_count(), target);
  }

  // repeated string choices = 4;
  for (int i = 0, n = this->choices_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->choices(i).data(), this->choices(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAUserMsg_VoteStart.choices");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->choices(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_VoteStart)
  return target;
}

size_t CDOTAUserMsg_VoteStart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_VoteStart)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated string choices = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->choices_size());
  for (int i = 0, n = this->choices_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->choices(i));
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional string title = 1;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional float duration = 2;
    if (has_duration()) {
      total_size += 1 + 4;
    }

    // optional int32 choice_count = 3;
    if (has_choice_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->choice_count());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_VoteStart::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_VoteStart)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_VoteStart* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_VoteStart>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_VoteStart)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_VoteStart)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_VoteStart::MergeFrom(const CDOTAUserMsg_VoteStart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_VoteStart)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  choices_.MergeFrom(from.choices_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_title();
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (cached_has_bits & 0x00000002u) {
      duration_ = from.duration_;
    }
    if (cached_has_bits & 0x00000004u) {
      choice_count_ = from.choice_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_VoteStart::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_VoteStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_VoteStart::CopyFrom(const CDOTAUserMsg_VoteStart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_VoteStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_VoteStart::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_VoteStart::Swap(CDOTAUserMsg_VoteStart* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_VoteStart::InternalSwap(CDOTAUserMsg_VoteStart* other) {
  choices_.InternalSwap(&other->choices_);
  title_.Swap(&other->title_);
  std::swap(duration_, other->duration_);
  std::swap(choice_count_, other->choice_count_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_VoteStart::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_VoteStart

// optional string title = 1;
bool CDOTAUserMsg_VoteStart::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_VoteStart::set_has_title() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_VoteStart::clear_has_title() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_VoteStart::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
const ::std::string& CDOTAUserMsg_VoteStart::title() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_VoteStart.title)
  return title_.GetNoArena();
}
void CDOTAUserMsg_VoteStart::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_VoteStart.title)
}
#if LANG_CXX11
void CDOTAUserMsg_VoteStart::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDOTAUserMsg_VoteStart.title)
}
#endif
void CDOTAUserMsg_VoteStart::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDOTAUserMsg_VoteStart.title)
}
void CDOTAUserMsg_VoteStart::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDOTAUserMsg_VoteStart.title)
}
::std::string* CDOTAUserMsg_VoteStart::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_VoteStart.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDOTAUserMsg_VoteStart::release_title() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAUserMsg_VoteStart.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDOTAUserMsg_VoteStart::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAUserMsg_VoteStart.title)
}

// optional float duration = 2;
bool CDOTAUserMsg_VoteStart::has_duration() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAUserMsg_VoteStart::set_has_duration() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAUserMsg_VoteStart::clear_has_duration() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAUserMsg_VoteStart::clear_duration() {
  duration_ = 0;
  clear_has_duration();
}
float CDOTAUserMsg_VoteStart::duration() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_VoteStart.duration)
  return duration_;
}
void CDOTAUserMsg_VoteStart::set_duration(float value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_VoteStart.duration)
}

// optional int32 choice_count = 3;
bool CDOTAUserMsg_VoteStart::has_choice_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDOTAUserMsg_VoteStart::set_has_choice_count() {
  _has_bits_[0] |= 0x00000004u;
}
void CDOTAUserMsg_VoteStart::clear_has_choice_count() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDOTAUserMsg_VoteStart::clear_choice_count() {
  choice_count_ = 0;
  clear_has_choice_count();
}
::google::protobuf::int32 CDOTAUserMsg_VoteStart::choice_count() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_VoteStart.choice_count)
  return choice_count_;
}
void CDOTAUserMsg_VoteStart::set_choice_count(::google::protobuf::int32 value) {
  set_has_choice_count();
  choice_count_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_VoteStart.choice_count)
}

// repeated string choices = 4;
int CDOTAUserMsg_VoteStart::choices_size() const {
  return choices_.size();
}
void CDOTAUserMsg_VoteStart::clear_choices() {
  choices_.Clear();
}
const ::std::string& CDOTAUserMsg_VoteStart::choices(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_VoteStart.choices)
  return choices_.Get(index);
}
::std::string* CDOTAUserMsg_VoteStart::mutable_choices(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_VoteStart.choices)
  return choices_.Mutable(index);
}
void CDOTAUserMsg_VoteStart::set_choices(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_VoteStart.choices)
  choices_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void CDOTAUserMsg_VoteStart::set_choices(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_VoteStart.choices)
  choices_.Mutable(index)->assign(std::move(value));
}
#endif
void CDOTAUserMsg_VoteStart::set_choices(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  choices_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.dota.CDOTAUserMsg_VoteStart.choices)
}
void CDOTAUserMsg_VoteStart::set_choices(int index, const char* value, size_t size) {
  choices_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDOTAUserMsg_VoteStart.choices)
}
::std::string* CDOTAUserMsg_VoteStart::add_choices() {
  // @@protoc_insertion_point(field_add_mutable:proto.dota.CDOTAUserMsg_VoteStart.choices)
  return choices_.Add();
}
void CDOTAUserMsg_VoteStart::add_choices(const ::std::string& value) {
  choices_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAUserMsg_VoteStart.choices)
}
#if LANG_CXX11
void CDOTAUserMsg_VoteStart::add_choices(::std::string&& value) {
  choices_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAUserMsg_VoteStart.choices)
}
#endif
void CDOTAUserMsg_VoteStart::add_choices(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  choices_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto.dota.CDOTAUserMsg_VoteStart.choices)
}
void CDOTAUserMsg_VoteStart::add_choices(const char* value, size_t size) {
  choices_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto.dota.CDOTAUserMsg_VoteStart.choices)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
CDOTAUserMsg_VoteStart::choices() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTAUserMsg_VoteStart.choices)
  return choices_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
CDOTAUserMsg_VoteStart::mutable_choices() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTAUserMsg_VoteStart.choices)
  return &choices_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_VoteUpdate::kChoiceCountsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_VoteUpdate::CDOTAUserMsg_VoteUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_VoteUpdate)
}
CDOTAUserMsg_VoteUpdate::CDOTAUserMsg_VoteUpdate(const CDOTAUserMsg_VoteUpdate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      choice_counts_(from.choice_counts_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_VoteUpdate)
}

void CDOTAUserMsg_VoteUpdate::SharedCtor() {
  _cached_size_ = 0;
}

CDOTAUserMsg_VoteUpdate::~CDOTAUserMsg_VoteUpdate() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_VoteUpdate)
  SharedDtor();
}

void CDOTAUserMsg_VoteUpdate::SharedDtor() {
}

void CDOTAUserMsg_VoteUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_VoteUpdate::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_VoteUpdate& CDOTAUserMsg_VoteUpdate::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_VoteUpdate* CDOTAUserMsg_VoteUpdate::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_VoteUpdate* n = new CDOTAUserMsg_VoteUpdate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_VoteUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_VoteUpdate)
  choice_counts_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_VoteUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_VoteUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 choice_counts = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8u, input, this->mutable_choice_counts())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_choice_counts())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_VoteUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_VoteUpdate)
  return false;
#undef DO_
}

void CDOTAUserMsg_VoteUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_VoteUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 choice_counts = 1;
  for (int i = 0, n = this->choice_counts_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->choice_counts(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_VoteUpdate)
}

::google::protobuf::uint8* CDOTAUserMsg_VoteUpdate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_VoteUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 choice_counts = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(1, this->choice_counts_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_VoteUpdate)
  return target;
}

size_t CDOTAUserMsg_VoteUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_VoteUpdate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated int32 choice_counts = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->choice_counts_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->choice_counts_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_VoteUpdate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_VoteUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_VoteUpdate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_VoteUpdate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_VoteUpdate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_VoteUpdate)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_VoteUpdate::MergeFrom(const CDOTAUserMsg_VoteUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_VoteUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  choice_counts_.MergeFrom(from.choice_counts_);
}

void CDOTAUserMsg_VoteUpdate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_VoteUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_VoteUpdate::CopyFrom(const CDOTAUserMsg_VoteUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_VoteUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_VoteUpdate::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_VoteUpdate::Swap(CDOTAUserMsg_VoteUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_VoteUpdate::InternalSwap(CDOTAUserMsg_VoteUpdate* other) {
  choice_counts_.InternalSwap(&other->choice_counts_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_VoteUpdate::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_VoteUpdate

// repeated int32 choice_counts = 1;
int CDOTAUserMsg_VoteUpdate::choice_counts_size() const {
  return choice_counts_.size();
}
void CDOTAUserMsg_VoteUpdate::clear_choice_counts() {
  choice_counts_.Clear();
}
::google::protobuf::int32 CDOTAUserMsg_VoteUpdate::choice_counts(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_VoteUpdate.choice_counts)
  return choice_counts_.Get(index);
}
void CDOTAUserMsg_VoteUpdate::set_choice_counts(int index, ::google::protobuf::int32 value) {
  choice_counts_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_VoteUpdate.choice_counts)
}
void CDOTAUserMsg_VoteUpdate::add_choice_counts(::google::protobuf::int32 value) {
  choice_counts_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAUserMsg_VoteUpdate.choice_counts)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CDOTAUserMsg_VoteUpdate::choice_counts() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTAUserMsg_VoteUpdate.choice_counts)
  return choice_counts_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CDOTAUserMsg_VoteUpdate::mutable_choice_counts() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTAUserMsg_VoteUpdate.choice_counts)
  return &choice_counts_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_VoteEnd::kSelectedChoiceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_VoteEnd::CDOTAUserMsg_VoteEnd()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_VoteEnd)
}
CDOTAUserMsg_VoteEnd::CDOTAUserMsg_VoteEnd(const CDOTAUserMsg_VoteEnd& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  selected_choice_ = from.selected_choice_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_VoteEnd)
}

void CDOTAUserMsg_VoteEnd::SharedCtor() {
  _cached_size_ = 0;
  selected_choice_ = 0;
}

CDOTAUserMsg_VoteEnd::~CDOTAUserMsg_VoteEnd() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_VoteEnd)
  SharedDtor();
}

void CDOTAUserMsg_VoteEnd::SharedDtor() {
}

void CDOTAUserMsg_VoteEnd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_VoteEnd::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_VoteEnd& CDOTAUserMsg_VoteEnd::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_VoteEnd* CDOTAUserMsg_VoteEnd::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_VoteEnd* n = new CDOTAUserMsg_VoteEnd;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_VoteEnd::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_VoteEnd)
  selected_choice_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_VoteEnd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_VoteEnd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 selected_choice = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_selected_choice();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &selected_choice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_VoteEnd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_VoteEnd)
  return false;
#undef DO_
}

void CDOTAUserMsg_VoteEnd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_VoteEnd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 selected_choice = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->selected_choice(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_VoteEnd)
}

::google::protobuf::uint8* CDOTAUserMsg_VoteEnd::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_VoteEnd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 selected_choice = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->selected_choice(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_VoteEnd)
  return target;
}

size_t CDOTAUserMsg_VoteEnd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_VoteEnd)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional int32 selected_choice = 1;
  if (has_selected_choice()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->selected_choice());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_VoteEnd::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_VoteEnd)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_VoteEnd* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_VoteEnd>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_VoteEnd)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_VoteEnd)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_VoteEnd::MergeFrom(const CDOTAUserMsg_VoteEnd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_VoteEnd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_selected_choice()) {
    set_selected_choice(from.selected_choice());
  }
}

void CDOTAUserMsg_VoteEnd::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_VoteEnd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_VoteEnd::CopyFrom(const CDOTAUserMsg_VoteEnd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_VoteEnd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_VoteEnd::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_VoteEnd::Swap(CDOTAUserMsg_VoteEnd* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_VoteEnd::InternalSwap(CDOTAUserMsg_VoteEnd* other) {
  std::swap(selected_choice_, other->selected_choice_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_VoteEnd::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_VoteEnd

// optional int32 selected_choice = 1;
bool CDOTAUserMsg_VoteEnd::has_selected_choice() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_VoteEnd::set_has_selected_choice() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_VoteEnd::clear_has_selected_choice() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_VoteEnd::clear_selected_choice() {
  selected_choice_ = 0;
  clear_has_selected_choice();
}
::google::protobuf::int32 CDOTAUserMsg_VoteEnd::selected_choice() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_VoteEnd.selected_choice)
  return selected_choice_;
}
void CDOTAUserMsg_VoteEnd::set_selected_choice(::google::protobuf::int32 value) {
  set_has_selected_choice();
  selected_choice_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_VoteEnd.selected_choice)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_BoosterStatePlayer::kPlayerIdFieldNumber;
const int CDOTAUserMsg_BoosterStatePlayer::kBonusFieldNumber;
const int CDOTAUserMsg_BoosterStatePlayer::kEventBonusFieldNumber;
const int CDOTAUserMsg_BoosterStatePlayer::kBonusItemIdFieldNumber;
const int CDOTAUserMsg_BoosterStatePlayer::kEventBonusItemIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_BoosterStatePlayer::CDOTAUserMsg_BoosterStatePlayer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_BoosterStatePlayer)
}
CDOTAUserMsg_BoosterStatePlayer::CDOTAUserMsg_BoosterStatePlayer(const CDOTAUserMsg_BoosterStatePlayer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&player_id_, &from.player_id_,
    reinterpret_cast<char*>(&event_bonus_item_id_) -
    reinterpret_cast<char*>(&player_id_) + sizeof(event_bonus_item_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_BoosterStatePlayer)
}

void CDOTAUserMsg_BoosterStatePlayer::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&player_id_, 0, reinterpret_cast<char*>(&event_bonus_item_id_) -
    reinterpret_cast<char*>(&player_id_) + sizeof(event_bonus_item_id_));
}

CDOTAUserMsg_BoosterStatePlayer::~CDOTAUserMsg_BoosterStatePlayer() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_BoosterStatePlayer)
  SharedDtor();
}

void CDOTAUserMsg_BoosterStatePlayer::SharedDtor() {
}

void CDOTAUserMsg_BoosterStatePlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_BoosterStatePlayer::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_BoosterStatePlayer& CDOTAUserMsg_BoosterStatePlayer::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_BoosterStatePlayer* CDOTAUserMsg_BoosterStatePlayer::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_BoosterStatePlayer* n = new CDOTAUserMsg_BoosterStatePlayer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_BoosterStatePlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_BoosterStatePlayer)
  if (_has_bits_[0 / 32] & 31u) {
    ::memset(&player_id_, 0, reinterpret_cast<char*>(&event_bonus_item_id_) -
      reinterpret_cast<char*>(&player_id_) + sizeof(event_bonus_item_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_BoosterStatePlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_BoosterStatePlayer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_player_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float bonus = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_bonus();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bonus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float event_bonus = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_event_bonus();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &event_bonus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 bonus_item_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_bonus_item_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bonus_item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 event_bonus_item_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_event_bonus_item_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_bonus_item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_BoosterStatePlayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_BoosterStatePlayer)
  return false;
#undef DO_
}

void CDOTAUserMsg_BoosterStatePlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_BoosterStatePlayer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_id(), output);
  }

  // optional float bonus = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->bonus(), output);
  }

  // optional float event_bonus = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->event_bonus(), output);
  }

  // optional uint32 bonus_item_id = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->bonus_item_id(), output);
  }

  // optional uint32 event_bonus_item_id = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->event_bonus_item_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_BoosterStatePlayer)
}

::google::protobuf::uint8* CDOTAUserMsg_BoosterStatePlayer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_BoosterStatePlayer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_id(), target);
  }

  // optional float bonus = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->bonus(), target);
  }

  // optional float event_bonus = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->event_bonus(), target);
  }

  // optional uint32 bonus_item_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->bonus_item_id(), target);
  }

  // optional uint32 event_bonus_item_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->event_bonus_item_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_BoosterStatePlayer)
  return target;
}

size_t CDOTAUserMsg_BoosterStatePlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_BoosterStatePlayer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional uint32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_id());
    }

    // optional float bonus = 2;
    if (has_bonus()) {
      total_size += 1 + 4;
    }

    // optional float event_bonus = 3;
    if (has_event_bonus()) {
      total_size += 1 + 4;
    }

    // optional uint32 bonus_item_id = 4;
    if (has_bonus_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bonus_item_id());
    }

    // optional uint32 event_bonus_item_id = 5;
    if (has_event_bonus_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_bonus_item_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_BoosterStatePlayer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_BoosterStatePlayer)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_BoosterStatePlayer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_BoosterStatePlayer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_BoosterStatePlayer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_BoosterStatePlayer)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_BoosterStatePlayer::MergeFrom(const CDOTAUserMsg_BoosterStatePlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_BoosterStatePlayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      player_id_ = from.player_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      bonus_ = from.bonus_;
    }
    if (cached_has_bits & 0x00000004u) {
      event_bonus_ = from.event_bonus_;
    }
    if (cached_has_bits & 0x00000008u) {
      bonus_item_id_ = from.bonus_item_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      event_bonus_item_id_ = from.event_bonus_item_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_BoosterStatePlayer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_BoosterStatePlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_BoosterStatePlayer::CopyFrom(const CDOTAUserMsg_BoosterStatePlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_BoosterStatePlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_BoosterStatePlayer::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_BoosterStatePlayer::Swap(CDOTAUserMsg_BoosterStatePlayer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_BoosterStatePlayer::InternalSwap(CDOTAUserMsg_BoosterStatePlayer* other) {
  std::swap(player_id_, other->player_id_);
  std::swap(bonus_, other->bonus_);
  std::swap(event_bonus_, other->event_bonus_);
  std::swap(bonus_item_id_, other->bonus_item_id_);
  std::swap(event_bonus_item_id_, other->event_bonus_item_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_BoosterStatePlayer::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_BoosterStatePlayer

// optional uint32 player_id = 1;
bool CDOTAUserMsg_BoosterStatePlayer::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_BoosterStatePlayer::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_BoosterStatePlayer::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_BoosterStatePlayer::clear_player_id() {
  player_id_ = 0u;
  clear_has_player_id();
}
::google::protobuf::uint32 CDOTAUserMsg_BoosterStatePlayer::player_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_BoosterStatePlayer.player_id)
  return player_id_;
}
void CDOTAUserMsg_BoosterStatePlayer::set_player_id(::google::protobuf::uint32 value) {
  set_has_player_id();
  player_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_BoosterStatePlayer.player_id)
}

// optional float bonus = 2;
bool CDOTAUserMsg_BoosterStatePlayer::has_bonus() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAUserMsg_BoosterStatePlayer::set_has_bonus() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAUserMsg_BoosterStatePlayer::clear_has_bonus() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAUserMsg_BoosterStatePlayer::clear_bonus() {
  bonus_ = 0;
  clear_has_bonus();
}
float CDOTAUserMsg_BoosterStatePlayer::bonus() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_BoosterStatePlayer.bonus)
  return bonus_;
}
void CDOTAUserMsg_BoosterStatePlayer::set_bonus(float value) {
  set_has_bonus();
  bonus_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_BoosterStatePlayer.bonus)
}

// optional float event_bonus = 3;
bool CDOTAUserMsg_BoosterStatePlayer::has_event_bonus() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDOTAUserMsg_BoosterStatePlayer::set_has_event_bonus() {
  _has_bits_[0] |= 0x00000004u;
}
void CDOTAUserMsg_BoosterStatePlayer::clear_has_event_bonus() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDOTAUserMsg_BoosterStatePlayer::clear_event_bonus() {
  event_bonus_ = 0;
  clear_has_event_bonus();
}
float CDOTAUserMsg_BoosterStatePlayer::event_bonus() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_BoosterStatePlayer.event_bonus)
  return event_bonus_;
}
void CDOTAUserMsg_BoosterStatePlayer::set_event_bonus(float value) {
  set_has_event_bonus();
  event_bonus_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_BoosterStatePlayer.event_bonus)
}

// optional uint32 bonus_item_id = 4;
bool CDOTAUserMsg_BoosterStatePlayer::has_bonus_item_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CDOTAUserMsg_BoosterStatePlayer::set_has_bonus_item_id() {
  _has_bits_[0] |= 0x00000008u;
}
void CDOTAUserMsg_BoosterStatePlayer::clear_has_bonus_item_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void CDOTAUserMsg_BoosterStatePlayer::clear_bonus_item_id() {
  bonus_item_id_ = 0u;
  clear_has_bonus_item_id();
}
::google::protobuf::uint32 CDOTAUserMsg_BoosterStatePlayer::bonus_item_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_BoosterStatePlayer.bonus_item_id)
  return bonus_item_id_;
}
void CDOTAUserMsg_BoosterStatePlayer::set_bonus_item_id(::google::protobuf::uint32 value) {
  set_has_bonus_item_id();
  bonus_item_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_BoosterStatePlayer.bonus_item_id)
}

// optional uint32 event_bonus_item_id = 5;
bool CDOTAUserMsg_BoosterStatePlayer::has_event_bonus_item_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CDOTAUserMsg_BoosterStatePlayer::set_has_event_bonus_item_id() {
  _has_bits_[0] |= 0x00000010u;
}
void CDOTAUserMsg_BoosterStatePlayer::clear_has_event_bonus_item_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void CDOTAUserMsg_BoosterStatePlayer::clear_event_bonus_item_id() {
  event_bonus_item_id_ = 0u;
  clear_has_event_bonus_item_id();
}
::google::protobuf::uint32 CDOTAUserMsg_BoosterStatePlayer::event_bonus_item_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_BoosterStatePlayer.event_bonus_item_id)
  return event_bonus_item_id_;
}
void CDOTAUserMsg_BoosterStatePlayer::set_event_bonus_item_id(::google::protobuf::uint32 value) {
  set_has_event_bonus_item_id();
  event_bonus_item_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_BoosterStatePlayer.event_bonus_item_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_BoosterState::kBoostedPlayersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_BoosterState::CDOTAUserMsg_BoosterState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_BoosterState)
}
CDOTAUserMsg_BoosterState::CDOTAUserMsg_BoosterState(const CDOTAUserMsg_BoosterState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      boosted_players_(from.boosted_players_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_BoosterState)
}

void CDOTAUserMsg_BoosterState::SharedCtor() {
  _cached_size_ = 0;
}

CDOTAUserMsg_BoosterState::~CDOTAUserMsg_BoosterState() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_BoosterState)
  SharedDtor();
}

void CDOTAUserMsg_BoosterState::SharedDtor() {
}

void CDOTAUserMsg_BoosterState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_BoosterState::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_BoosterState& CDOTAUserMsg_BoosterState::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_BoosterState* CDOTAUserMsg_BoosterState::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_BoosterState* n = new CDOTAUserMsg_BoosterState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_BoosterState::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_BoosterState)
  boosted_players_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_BoosterState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_BoosterState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CDOTAUserMsg_BoosterStatePlayer boosted_players = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_boosted_players()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_BoosterState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_BoosterState)
  return false;
#undef DO_
}

void CDOTAUserMsg_BoosterState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_BoosterState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CDOTAUserMsg_BoosterStatePlayer boosted_players = 1;
  for (unsigned int i = 0, n = this->boosted_players_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->boosted_players(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_BoosterState)
}

::google::protobuf::uint8* CDOTAUserMsg_BoosterState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_BoosterState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CDOTAUserMsg_BoosterStatePlayer boosted_players = 1;
  for (unsigned int i = 0, n = this->boosted_players_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->boosted_players(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_BoosterState)
  return target;
}

size_t CDOTAUserMsg_BoosterState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_BoosterState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CDOTAUserMsg_BoosterStatePlayer boosted_players = 1;
  {
    unsigned int count = this->boosted_players_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->boosted_players(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_BoosterState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_BoosterState)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_BoosterState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_BoosterState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_BoosterState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_BoosterState)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_BoosterState::MergeFrom(const CDOTAUserMsg_BoosterState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_BoosterState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  boosted_players_.MergeFrom(from.boosted_players_);
}

void CDOTAUserMsg_BoosterState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_BoosterState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_BoosterState::CopyFrom(const CDOTAUserMsg_BoosterState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_BoosterState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_BoosterState::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_BoosterState::Swap(CDOTAUserMsg_BoosterState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_BoosterState::InternalSwap(CDOTAUserMsg_BoosterState* other) {
  boosted_players_.InternalSwap(&other->boosted_players_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_BoosterState::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_BoosterState

// repeated .proto.dota.CDOTAUserMsg_BoosterStatePlayer boosted_players = 1;
int CDOTAUserMsg_BoosterState::boosted_players_size() const {
  return boosted_players_.size();
}
void CDOTAUserMsg_BoosterState::clear_boosted_players() {
  boosted_players_.Clear();
}
const ::proto::dota::CDOTAUserMsg_BoosterStatePlayer& CDOTAUserMsg_BoosterState::boosted_players(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_BoosterState.boosted_players)
  return boosted_players_.Get(index);
}
::proto::dota::CDOTAUserMsg_BoosterStatePlayer* CDOTAUserMsg_BoosterState::mutable_boosted_players(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_BoosterState.boosted_players)
  return boosted_players_.Mutable(index);
}
::proto::dota::CDOTAUserMsg_BoosterStatePlayer* CDOTAUserMsg_BoosterState::add_boosted_players() {
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAUserMsg_BoosterState.boosted_players)
  return boosted_players_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAUserMsg_BoosterStatePlayer >*
CDOTAUserMsg_BoosterState::mutable_boosted_players() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTAUserMsg_BoosterState.boosted_players)
  return &boosted_players_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAUserMsg_BoosterStatePlayer >&
CDOTAUserMsg_BoosterState::boosted_players() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTAUserMsg_BoosterState.boosted_players)
  return boosted_players_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_PlayerMMR::kMmrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_PlayerMMR::CDOTAUserMsg_PlayerMMR()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_PlayerMMR)
}
CDOTAUserMsg_PlayerMMR::CDOTAUserMsg_PlayerMMR(const CDOTAUserMsg_PlayerMMR& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      mmr_(from.mmr_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_PlayerMMR)
}

void CDOTAUserMsg_PlayerMMR::SharedCtor() {
  _cached_size_ = 0;
}

CDOTAUserMsg_PlayerMMR::~CDOTAUserMsg_PlayerMMR() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_PlayerMMR)
  SharedDtor();
}

void CDOTAUserMsg_PlayerMMR::SharedDtor() {
}

void CDOTAUserMsg_PlayerMMR::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_PlayerMMR::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_PlayerMMR& CDOTAUserMsg_PlayerMMR::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_PlayerMMR* CDOTAUserMsg_PlayerMMR::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_PlayerMMR* n = new CDOTAUserMsg_PlayerMMR;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_PlayerMMR::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_PlayerMMR)
  mmr_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_PlayerMMR::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_PlayerMMR)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated sint32 mmr = 1 [packed = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, this->mutable_mmr())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(8u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 1, 10u, input, this->mutable_mmr())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_PlayerMMR)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_PlayerMMR)
  return false;
#undef DO_
}

void CDOTAUserMsg_PlayerMMR::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_PlayerMMR)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated sint32 mmr = 1 [packed = true];
  if (this->mmr_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_mmr_cached_byte_size_);
  }
  for (int i = 0, n = this->mmr_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32NoTag(
      this->mmr(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_PlayerMMR)
}

::google::protobuf::uint8* CDOTAUserMsg_PlayerMMR::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_PlayerMMR)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated sint32 mmr = 1 [packed = true];
  if (this->mmr_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _mmr_cached_byte_size_, target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt32NoTagToArray(this->mmr_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_PlayerMMR)
  return target;
}

size_t CDOTAUserMsg_PlayerMMR::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_PlayerMMR)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated sint32 mmr = 1 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      SInt32Size(this->mmr_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _mmr_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_PlayerMMR::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_PlayerMMR)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_PlayerMMR* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_PlayerMMR>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_PlayerMMR)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_PlayerMMR)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_PlayerMMR::MergeFrom(const CDOTAUserMsg_PlayerMMR& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_PlayerMMR)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mmr_.MergeFrom(from.mmr_);
}

void CDOTAUserMsg_PlayerMMR::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_PlayerMMR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_PlayerMMR::CopyFrom(const CDOTAUserMsg_PlayerMMR& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_PlayerMMR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_PlayerMMR::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_PlayerMMR::Swap(CDOTAUserMsg_PlayerMMR* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_PlayerMMR::InternalSwap(CDOTAUserMsg_PlayerMMR* other) {
  mmr_.InternalSwap(&other->mmr_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_PlayerMMR::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_PlayerMMR

// repeated sint32 mmr = 1 [packed = true];
int CDOTAUserMsg_PlayerMMR::mmr_size() const {
  return mmr_.size();
}
void CDOTAUserMsg_PlayerMMR::clear_mmr() {
  mmr_.Clear();
}
::google::protobuf::int32 CDOTAUserMsg_PlayerMMR::mmr(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_PlayerMMR.mmr)
  return mmr_.Get(index);
}
void CDOTAUserMsg_PlayerMMR::set_mmr(int index, ::google::protobuf::int32 value) {
  mmr_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_PlayerMMR.mmr)
}
void CDOTAUserMsg_PlayerMMR::add_mmr(::google::protobuf::int32 value) {
  mmr_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAUserMsg_PlayerMMR.mmr)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CDOTAUserMsg_PlayerMMR::mmr() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTAUserMsg_PlayerMMR.mmr)
  return mmr_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CDOTAUserMsg_PlayerMMR::mutable_mmr() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTAUserMsg_PlayerMMR.mmr)
  return &mmr_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_AbilitySteal::kPlayerIdFieldNumber;
const int CDOTAUserMsg_AbilitySteal::kAbilityIdFieldNumber;
const int CDOTAUserMsg_AbilitySteal::kAbilityLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_AbilitySteal::CDOTAUserMsg_AbilitySteal()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_AbilitySteal)
}
CDOTAUserMsg_AbilitySteal::CDOTAUserMsg_AbilitySteal(const CDOTAUserMsg_AbilitySteal& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&player_id_, &from.player_id_,
    reinterpret_cast<char*>(&ability_level_) -
    reinterpret_cast<char*>(&player_id_) + sizeof(ability_level_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_AbilitySteal)
}

void CDOTAUserMsg_AbilitySteal::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&player_id_, 0, reinterpret_cast<char*>(&ability_level_) -
    reinterpret_cast<char*>(&player_id_) + sizeof(ability_level_));
}

CDOTAUserMsg_AbilitySteal::~CDOTAUserMsg_AbilitySteal() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_AbilitySteal)
  SharedDtor();
}

void CDOTAUserMsg_AbilitySteal::SharedDtor() {
}

void CDOTAUserMsg_AbilitySteal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_AbilitySteal::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_AbilitySteal& CDOTAUserMsg_AbilitySteal::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_AbilitySteal* CDOTAUserMsg_AbilitySteal::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_AbilitySteal* n = new CDOTAUserMsg_AbilitySteal;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_AbilitySteal::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_AbilitySteal)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&player_id_, 0, reinterpret_cast<char*>(&ability_level_) -
      reinterpret_cast<char*>(&player_id_) + sizeof(ability_level_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_AbilitySteal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_AbilitySteal)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_player_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ability_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_ability_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ability_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ability_level = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_ability_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ability_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_AbilitySteal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_AbilitySteal)
  return false;
#undef DO_
}

void CDOTAUserMsg_AbilitySteal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_AbilitySteal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_id(), output);
  }

  // optional uint32 ability_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ability_id(), output);
  }

  // optional uint32 ability_level = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ability_level(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_AbilitySteal)
}

::google::protobuf::uint8* CDOTAUserMsg_AbilitySteal::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_AbilitySteal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_id(), target);
  }

  // optional uint32 ability_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ability_id(), target);
  }

  // optional uint32 ability_level = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ability_level(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_AbilitySteal)
  return target;
}

size_t CDOTAUserMsg_AbilitySteal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_AbilitySteal)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_id());
    }

    // optional uint32 ability_id = 2;
    if (has_ability_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ability_id());
    }

    // optional uint32 ability_level = 3;
    if (has_ability_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ability_level());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_AbilitySteal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_AbilitySteal)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_AbilitySteal* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_AbilitySteal>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_AbilitySteal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_AbilitySteal)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_AbilitySteal::MergeFrom(const CDOTAUserMsg_AbilitySteal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_AbilitySteal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      player_id_ = from.player_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      ability_id_ = from.ability_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      ability_level_ = from.ability_level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_AbilitySteal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_AbilitySteal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_AbilitySteal::CopyFrom(const CDOTAUserMsg_AbilitySteal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_AbilitySteal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_AbilitySteal::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_AbilitySteal::Swap(CDOTAUserMsg_AbilitySteal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_AbilitySteal::InternalSwap(CDOTAUserMsg_AbilitySteal* other) {
  std::swap(player_id_, other->player_id_);
  std::swap(ability_id_, other->ability_id_);
  std::swap(ability_level_, other->ability_level_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_AbilitySteal::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_AbilitySteal

// optional uint32 player_id = 1;
bool CDOTAUserMsg_AbilitySteal::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_AbilitySteal::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_AbilitySteal::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_AbilitySteal::clear_player_id() {
  player_id_ = 0u;
  clear_has_player_id();
}
::google::protobuf::uint32 CDOTAUserMsg_AbilitySteal::player_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_AbilitySteal.player_id)
  return player_id_;
}
void CDOTAUserMsg_AbilitySteal::set_player_id(::google::protobuf::uint32 value) {
  set_has_player_id();
  player_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_AbilitySteal.player_id)
}

// optional uint32 ability_id = 2;
bool CDOTAUserMsg_AbilitySteal::has_ability_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAUserMsg_AbilitySteal::set_has_ability_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAUserMsg_AbilitySteal::clear_has_ability_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAUserMsg_AbilitySteal::clear_ability_id() {
  ability_id_ = 0u;
  clear_has_ability_id();
}
::google::protobuf::uint32 CDOTAUserMsg_AbilitySteal::ability_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_AbilitySteal.ability_id)
  return ability_id_;
}
void CDOTAUserMsg_AbilitySteal::set_ability_id(::google::protobuf::uint32 value) {
  set_has_ability_id();
  ability_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_AbilitySteal.ability_id)
}

// optional uint32 ability_level = 3;
bool CDOTAUserMsg_AbilitySteal::has_ability_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDOTAUserMsg_AbilitySteal::set_has_ability_level() {
  _has_bits_[0] |= 0x00000004u;
}
void CDOTAUserMsg_AbilitySteal::clear_has_ability_level() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDOTAUserMsg_AbilitySteal::clear_ability_level() {
  ability_level_ = 0u;
  clear_has_ability_level();
}
::google::protobuf::uint32 CDOTAUserMsg_AbilitySteal::ability_level() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_AbilitySteal.ability_level)
  return ability_level_;
}
void CDOTAUserMsg_AbilitySteal::set_ability_level(::google::protobuf::uint32 value) {
  set_has_ability_level();
  ability_level_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_AbilitySteal.ability_level)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_StatsHeroLookup::kPlayerIdFieldNumber;
const int CDOTAUserMsg_StatsHeroLookup::kHeroIdFieldNumber;
const int CDOTAUserMsg_StatsHeroLookup::kHeroNameFieldNumber;
const int CDOTAUserMsg_StatsHeroLookup::kPersonaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_StatsHeroLookup::CDOTAUserMsg_StatsHeroLookup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_StatsHeroLookup)
}
CDOTAUserMsg_StatsHeroLookup::CDOTAUserMsg_StatsHeroLookup(const CDOTAUserMsg_StatsHeroLookup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hero_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_hero_name()) {
    hero_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hero_name_);
  }
  persona_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_persona()) {
    persona_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.persona_);
  }
  ::memcpy(&player_id_, &from.player_id_,
    reinterpret_cast<char*>(&hero_id_) -
    reinterpret_cast<char*>(&player_id_) + sizeof(hero_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_StatsHeroLookup)
}

void CDOTAUserMsg_StatsHeroLookup::SharedCtor() {
  _cached_size_ = 0;
  hero_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  persona_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&player_id_, 0, reinterpret_cast<char*>(&hero_id_) -
    reinterpret_cast<char*>(&player_id_) + sizeof(hero_id_));
}

CDOTAUserMsg_StatsHeroLookup::~CDOTAUserMsg_StatsHeroLookup() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_StatsHeroLookup)
  SharedDtor();
}

void CDOTAUserMsg_StatsHeroLookup::SharedDtor() {
  hero_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  persona_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CDOTAUserMsg_StatsHeroLookup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_StatsHeroLookup::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_StatsHeroLookup& CDOTAUserMsg_StatsHeroLookup::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_StatsHeroLookup* CDOTAUserMsg_StatsHeroLookup::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_StatsHeroLookup* n = new CDOTAUserMsg_StatsHeroLookup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_StatsHeroLookup::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_StatsHeroLookup)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_hero_name()) {
      GOOGLE_DCHECK(!hero_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*hero_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_persona()) {
      GOOGLE_DCHECK(!persona_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*persona_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&player_id_, 0, reinterpret_cast<char*>(&hero_id_) -
      reinterpret_cast<char*>(&player_id_) + sizeof(hero_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_StatsHeroLookup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_StatsHeroLookup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_player_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 hero_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_hero_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hero_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string hero_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hero_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hero_name().data(), this->hero_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDOTAUserMsg_StatsHeroLookup.hero_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string persona = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_persona()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->persona().data(), this->persona().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDOTAUserMsg_StatsHeroLookup.persona");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_StatsHeroLookup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_StatsHeroLookup)
  return false;
#undef DO_
}

void CDOTAUserMsg_StatsHeroLookup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_StatsHeroLookup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 player_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player_id(), output);
  }

  // optional int32 hero_id = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->hero_id(), output);
  }

  // optional string hero_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hero_name().data(), this->hero_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAUserMsg_StatsHeroLookup.hero_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->hero_name(), output);
  }

  // optional string persona = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->persona().data(), this->persona().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAUserMsg_StatsHeroLookup.persona");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->persona(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_StatsHeroLookup)
}

::google::protobuf::uint8* CDOTAUserMsg_StatsHeroLookup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_StatsHeroLookup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 player_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player_id(), target);
  }

  // optional int32 hero_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->hero_id(), target);
  }

  // optional string hero_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hero_name().data(), this->hero_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAUserMsg_StatsHeroLookup.hero_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->hero_name(), target);
  }

  // optional string persona = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->persona().data(), this->persona().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAUserMsg_StatsHeroLookup.persona");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->persona(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_StatsHeroLookup)
  return target;
}

size_t CDOTAUserMsg_StatsHeroLookup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_StatsHeroLookup)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string hero_name = 3;
    if (has_hero_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hero_name());
    }

    // optional string persona = 4;
    if (has_persona()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->persona());
    }

    // optional int32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // optional int32 hero_id = 2;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hero_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_StatsHeroLookup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_StatsHeroLookup)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_StatsHeroLookup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_StatsHeroLookup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_StatsHeroLookup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_StatsHeroLookup)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_StatsHeroLookup::MergeFrom(const CDOTAUserMsg_StatsHeroLookup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_StatsHeroLookup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_hero_name();
      hero_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hero_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_persona();
      persona_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.persona_);
    }
    if (cached_has_bits & 0x00000004u) {
      player_id_ = from.player_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      hero_id_ = from.hero_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_StatsHeroLookup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_StatsHeroLookup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_StatsHeroLookup::CopyFrom(const CDOTAUserMsg_StatsHeroLookup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_StatsHeroLookup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_StatsHeroLookup::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_StatsHeroLookup::Swap(CDOTAUserMsg_StatsHeroLookup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_StatsHeroLookup::InternalSwap(CDOTAUserMsg_StatsHeroLookup* other) {
  hero_name_.Swap(&other->hero_name_);
  persona_.Swap(&other->persona_);
  std::swap(player_id_, other->player_id_);
  std::swap(hero_id_, other->hero_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_StatsHeroLookup::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_StatsHeroLookup

// optional int32 player_id = 1;
bool CDOTAUserMsg_StatsHeroLookup::has_player_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDOTAUserMsg_StatsHeroLookup::set_has_player_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CDOTAUserMsg_StatsHeroLookup::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDOTAUserMsg_StatsHeroLookup::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
::google::protobuf::int32 CDOTAUserMsg_StatsHeroLookup::player_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_StatsHeroLookup.player_id)
  return player_id_;
}
void CDOTAUserMsg_StatsHeroLookup::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_StatsHeroLookup.player_id)
}

// optional int32 hero_id = 2;
bool CDOTAUserMsg_StatsHeroLookup::has_hero_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CDOTAUserMsg_StatsHeroLookup::set_has_hero_id() {
  _has_bits_[0] |= 0x00000008u;
}
void CDOTAUserMsg_StatsHeroLookup::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void CDOTAUserMsg_StatsHeroLookup::clear_hero_id() {
  hero_id_ = 0;
  clear_has_hero_id();
}
::google::protobuf::int32 CDOTAUserMsg_StatsHeroLookup::hero_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_StatsHeroLookup.hero_id)
  return hero_id_;
}
void CDOTAUserMsg_StatsHeroLookup::set_hero_id(::google::protobuf::int32 value) {
  set_has_hero_id();
  hero_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_StatsHeroLookup.hero_id)
}

// optional string hero_name = 3;
bool CDOTAUserMsg_StatsHeroLookup::has_hero_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_StatsHeroLookup::set_has_hero_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_StatsHeroLookup::clear_has_hero_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_StatsHeroLookup::clear_hero_name() {
  hero_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hero_name();
}
const ::std::string& CDOTAUserMsg_StatsHeroLookup::hero_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_StatsHeroLookup.hero_name)
  return hero_name_.GetNoArena();
}
void CDOTAUserMsg_StatsHeroLookup::set_hero_name(const ::std::string& value) {
  set_has_hero_name();
  hero_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_StatsHeroLookup.hero_name)
}
#if LANG_CXX11
void CDOTAUserMsg_StatsHeroLookup::set_hero_name(::std::string&& value) {
  set_has_hero_name();
  hero_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDOTAUserMsg_StatsHeroLookup.hero_name)
}
#endif
void CDOTAUserMsg_StatsHeroLookup::set_hero_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_hero_name();
  hero_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDOTAUserMsg_StatsHeroLookup.hero_name)
}
void CDOTAUserMsg_StatsHeroLookup::set_hero_name(const char* value, size_t size) {
  set_has_hero_name();
  hero_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDOTAUserMsg_StatsHeroLookup.hero_name)
}
::std::string* CDOTAUserMsg_StatsHeroLookup::mutable_hero_name() {
  set_has_hero_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_StatsHeroLookup.hero_name)
  return hero_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDOTAUserMsg_StatsHeroLookup::release_hero_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAUserMsg_StatsHeroLookup.hero_name)
  clear_has_hero_name();
  return hero_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDOTAUserMsg_StatsHeroLookup::set_allocated_hero_name(::std::string* hero_name) {
  if (hero_name != NULL) {
    set_has_hero_name();
  } else {
    clear_has_hero_name();
  }
  hero_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hero_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAUserMsg_StatsHeroLookup.hero_name)
}

// optional string persona = 4;
bool CDOTAUserMsg_StatsHeroLookup::has_persona() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAUserMsg_StatsHeroLookup::set_has_persona() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAUserMsg_StatsHeroLookup::clear_has_persona() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAUserMsg_StatsHeroLookup::clear_persona() {
  persona_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_persona();
}
const ::std::string& CDOTAUserMsg_StatsHeroLookup::persona() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_StatsHeroLookup.persona)
  return persona_.GetNoArena();
}
void CDOTAUserMsg_StatsHeroLookup::set_persona(const ::std::string& value) {
  set_has_persona();
  persona_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_StatsHeroLookup.persona)
}
#if LANG_CXX11
void CDOTAUserMsg_StatsHeroLookup::set_persona(::std::string&& value) {
  set_has_persona();
  persona_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDOTAUserMsg_StatsHeroLookup.persona)
}
#endif
void CDOTAUserMsg_StatsHeroLookup::set_persona(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_persona();
  persona_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDOTAUserMsg_StatsHeroLookup.persona)
}
void CDOTAUserMsg_StatsHeroLookup::set_persona(const char* value, size_t size) {
  set_has_persona();
  persona_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDOTAUserMsg_StatsHeroLookup.persona)
}
::std::string* CDOTAUserMsg_StatsHeroLookup::mutable_persona() {
  set_has_persona();
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_StatsHeroLookup.persona)
  return persona_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDOTAUserMsg_StatsHeroLookup::release_persona() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAUserMsg_StatsHeroLookup.persona)
  clear_has_persona();
  return persona_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDOTAUserMsg_StatsHeroLookup::set_allocated_persona(::std::string* persona) {
  if (persona != NULL) {
    set_has_persona();
  } else {
    clear_has_persona();
  }
  persona_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), persona);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAUserMsg_StatsHeroLookup.persona)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::kPositionCategoryFieldNumber;
const int CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::kPositionCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::CDOTAUserMsg_StatsHeroPositionInfo_PositionPair()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_StatsHeroPositionInfo.PositionPair)
}
CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::CDOTAUserMsg_StatsHeroPositionInfo_PositionPair(const CDOTAUserMsg_StatsHeroPositionInfo_PositionPair& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&position_category_, &from.position_category_,
    reinterpret_cast<char*>(&position_count_) -
    reinterpret_cast<char*>(&position_category_) + sizeof(position_count_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_StatsHeroPositionInfo.PositionPair)
}

void CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&position_category_, 0, reinterpret_cast<char*>(&position_count_) -
    reinterpret_cast<char*>(&position_category_) + sizeof(position_count_));
}

CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::~CDOTAUserMsg_StatsHeroPositionInfo_PositionPair() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_StatsHeroPositionInfo.PositionPair)
  SharedDtor();
}

void CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::SharedDtor() {
}

void CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_StatsHeroPositionInfo_PositionPair& CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_StatsHeroPositionInfo_PositionPair* CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_StatsHeroPositionInfo_PositionPair* n = new CDOTAUserMsg_StatsHeroPositionInfo_PositionPair;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_StatsHeroPositionInfo.PositionPair)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&position_category_, 0, reinterpret_cast<char*>(&position_count_) -
      reinterpret_cast<char*>(&position_category_) + sizeof(position_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_StatsHeroPositionInfo.PositionPair)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.DOTA_POSITION_CATEGORY position_category = 1 [default = DOTA_POSITION_NONE];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTA_POSITION_CATEGORY_IsValid(value)) {
            set_position_category(static_cast< ::proto::dota::DOTA_POSITION_CATEGORY >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 position_count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_position_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &position_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_StatsHeroPositionInfo.PositionPair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_StatsHeroPositionInfo.PositionPair)
  return false;
#undef DO_
}

void CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_StatsHeroPositionInfo.PositionPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.DOTA_POSITION_CATEGORY position_category = 1 [default = DOTA_POSITION_NONE];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->position_category(), output);
  }

  // optional uint32 position_count = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->position_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_StatsHeroPositionInfo.PositionPair)
}

::google::protobuf::uint8* CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_StatsHeroPositionInfo.PositionPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.DOTA_POSITION_CATEGORY position_category = 1 [default = DOTA_POSITION_NONE];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->position_category(), target);
  }

  // optional uint32 position_count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->position_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_StatsHeroPositionInfo.PositionPair)
  return target;
}

size_t CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_StatsHeroPositionInfo.PositionPair)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .proto.dota.DOTA_POSITION_CATEGORY position_category = 1 [default = DOTA_POSITION_NONE];
    if (has_position_category()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->position_category());
    }

    // optional uint32 position_count = 2;
    if (has_position_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->position_count());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_StatsHeroPositionInfo.PositionPair)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_StatsHeroPositionInfo_PositionPair* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_StatsHeroPositionInfo_PositionPair>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_StatsHeroPositionInfo.PositionPair)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_StatsHeroPositionInfo.PositionPair)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::MergeFrom(const CDOTAUserMsg_StatsHeroPositionInfo_PositionPair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_StatsHeroPositionInfo.PositionPair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      position_category_ = from.position_category_;
    }
    if (cached_has_bits & 0x00000002u) {
      position_count_ = from.position_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_StatsHeroPositionInfo.PositionPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::CopyFrom(const CDOTAUserMsg_StatsHeroPositionInfo_PositionPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_StatsHeroPositionInfo.PositionPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::Swap(CDOTAUserMsg_StatsHeroPositionInfo_PositionPair* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::InternalSwap(CDOTAUserMsg_StatsHeroPositionInfo_PositionPair* other) {
  std::swap(position_category_, other->position_category_);
  std::swap(position_count_, other->position_count_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_StatsHeroPositionInfo_PositionPair

// optional .proto.dota.DOTA_POSITION_CATEGORY position_category = 1 [default = DOTA_POSITION_NONE];
bool CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::has_position_category() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::set_has_position_category() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::clear_has_position_category() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::clear_position_category() {
  position_category_ = 0;
  clear_has_position_category();
}
::proto::dota::DOTA_POSITION_CATEGORY CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::position_category() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_StatsHeroPositionInfo.PositionPair.position_category)
  return static_cast< ::proto::dota::DOTA_POSITION_CATEGORY >(position_category_);
}
void CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::set_position_category(::proto::dota::DOTA_POSITION_CATEGORY value) {
  assert(::proto::dota::DOTA_POSITION_CATEGORY_IsValid(value));
  set_has_position_category();
  position_category_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_StatsHeroPositionInfo.PositionPair.position_category)
}

// optional uint32 position_count = 2;
bool CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::has_position_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::set_has_position_count() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::clear_has_position_count() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::clear_position_count() {
  position_count_ = 0u;
  clear_has_position_count();
}
::google::protobuf::uint32 CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::position_count() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_StatsHeroPositionInfo.PositionPair.position_count)
  return position_count_;
}
void CDOTAUserMsg_StatsHeroPositionInfo_PositionPair::set_position_count(::google::protobuf::uint32 value) {
  set_has_position_count();
  position_count_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_StatsHeroPositionInfo.PositionPair.position_count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_StatsHeroPositionInfo::kAveragePositionFieldNumber;
const int CDOTAUserMsg_StatsHeroPositionInfo::kPositionDetailsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_StatsHeroPositionInfo::CDOTAUserMsg_StatsHeroPositionInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_StatsHeroPositionInfo)
}
CDOTAUserMsg_StatsHeroPositionInfo::CDOTAUserMsg_StatsHeroPositionInfo(const CDOTAUserMsg_StatsHeroPositionInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      position_details_(from.position_details_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  average_position_ = from.average_position_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_StatsHeroPositionInfo)
}

void CDOTAUserMsg_StatsHeroPositionInfo::SharedCtor() {
  _cached_size_ = 0;
  average_position_ = 0;
}

CDOTAUserMsg_StatsHeroPositionInfo::~CDOTAUserMsg_StatsHeroPositionInfo() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_StatsHeroPositionInfo)
  SharedDtor();
}

void CDOTAUserMsg_StatsHeroPositionInfo::SharedDtor() {
}

void CDOTAUserMsg_StatsHeroPositionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_StatsHeroPositionInfo::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_StatsHeroPositionInfo& CDOTAUserMsg_StatsHeroPositionInfo::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_StatsHeroPositionInfo* CDOTAUserMsg_StatsHeroPositionInfo::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_StatsHeroPositionInfo* n = new CDOTAUserMsg_StatsHeroPositionInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_StatsHeroPositionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_StatsHeroPositionInfo)
  position_details_.Clear();
  average_position_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_StatsHeroPositionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_StatsHeroPositionInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float average_position = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {
          set_has_average_position();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &average_position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CDOTAUserMsg_StatsHeroPositionInfo.PositionPair position_details = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_position_details()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_StatsHeroPositionInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_StatsHeroPositionInfo)
  return false;
#undef DO_
}

void CDOTAUserMsg_StatsHeroPositionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_StatsHeroPositionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float average_position = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->average_position(), output);
  }

  // repeated .proto.dota.CDOTAUserMsg_StatsHeroPositionInfo.PositionPair position_details = 2;
  for (unsigned int i = 0, n = this->position_details_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->position_details(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_StatsHeroPositionInfo)
}

::google::protobuf::uint8* CDOTAUserMsg_StatsHeroPositionInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_StatsHeroPositionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float average_position = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->average_position(), target);
  }

  // repeated .proto.dota.CDOTAUserMsg_StatsHeroPositionInfo.PositionPair position_details = 2;
  for (unsigned int i = 0, n = this->position_details_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->position_details(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_StatsHeroPositionInfo)
  return target;
}

size_t CDOTAUserMsg_StatsHeroPositionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_StatsHeroPositionInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CDOTAUserMsg_StatsHeroPositionInfo.PositionPair position_details = 2;
  {
    unsigned int count = this->position_details_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position_details(i));
    }
  }

  // optional float average_position = 1;
  if (has_average_position()) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_StatsHeroPositionInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_StatsHeroPositionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_StatsHeroPositionInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_StatsHeroPositionInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_StatsHeroPositionInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_StatsHeroPositionInfo)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_StatsHeroPositionInfo::MergeFrom(const CDOTAUserMsg_StatsHeroPositionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_StatsHeroPositionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  position_details_.MergeFrom(from.position_details_);
  if (from.has_average_position()) {
    set_average_position(from.average_position());
  }
}

void CDOTAUserMsg_StatsHeroPositionInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_StatsHeroPositionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_StatsHeroPositionInfo::CopyFrom(const CDOTAUserMsg_StatsHeroPositionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_StatsHeroPositionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_StatsHeroPositionInfo::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_StatsHeroPositionInfo::Swap(CDOTAUserMsg_StatsHeroPositionInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_StatsHeroPositionInfo::InternalSwap(CDOTAUserMsg_StatsHeroPositionInfo* other) {
  position_details_.InternalSwap(&other->position_details_);
  std::swap(average_position_, other->average_position_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_StatsHeroPositionInfo::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_StatsHeroPositionInfo

// optional float average_position = 1;
bool CDOTAUserMsg_StatsHeroPositionInfo::has_average_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_StatsHeroPositionInfo::set_has_average_position() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_StatsHeroPositionInfo::clear_has_average_position() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_StatsHeroPositionInfo::clear_average_position() {
  average_position_ = 0;
  clear_has_average_position();
}
float CDOTAUserMsg_StatsHeroPositionInfo::average_position() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_StatsHeroPositionInfo.average_position)
  return average_position_;
}
void CDOTAUserMsg_StatsHeroPositionInfo::set_average_position(float value) {
  set_has_average_position();
  average_position_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_StatsHeroPositionInfo.average_position)
}

// repeated .proto.dota.CDOTAUserMsg_StatsHeroPositionInfo.PositionPair position_details = 2;
int CDOTAUserMsg_StatsHeroPositionInfo::position_details_size() const {
  return position_details_.size();
}
void CDOTAUserMsg_StatsHeroPositionInfo::clear_position_details() {
  position_details_.Clear();
}
const ::proto::dota::CDOTAUserMsg_StatsHeroPositionInfo_PositionPair& CDOTAUserMsg_StatsHeroPositionInfo::position_details(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_StatsHeroPositionInfo.position_details)
  return position_details_.Get(index);
}
::proto::dota::CDOTAUserMsg_StatsHeroPositionInfo_PositionPair* CDOTAUserMsg_StatsHeroPositionInfo::mutable_position_details(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_StatsHeroPositionInfo.position_details)
  return position_details_.Mutable(index);
}
::proto::dota::CDOTAUserMsg_StatsHeroPositionInfo_PositionPair* CDOTAUserMsg_StatsHeroPositionInfo::add_position_details() {
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAUserMsg_StatsHeroPositionInfo.position_details)
  return position_details_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAUserMsg_StatsHeroPositionInfo_PositionPair >*
CDOTAUserMsg_StatsHeroPositionInfo::mutable_position_details() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTAUserMsg_StatsHeroPositionInfo.position_details)
  return &position_details_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAUserMsg_StatsHeroPositionInfo_PositionPair >&
CDOTAUserMsg_StatsHeroPositionInfo::position_details() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTAUserMsg_StatsHeroPositionInfo.position_details)
  return position_details_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_StatsHeroMinuteDetails::kLastHitsFieldNumber;
const int CDOTAUserMsg_StatsHeroMinuteDetails::kHeroKillsFieldNumber;
const int CDOTAUserMsg_StatsHeroMinuteDetails::kHeroDamageFieldNumber;
const int CDOTAUserMsg_StatsHeroMinuteDetails::kTowerDamageFieldNumber;
const int CDOTAUserMsg_StatsHeroMinuteDetails::kPositionInfoFieldNumber;
const int CDOTAUserMsg_StatsHeroMinuteDetails::kTotalXpFieldNumber;
const int CDOTAUserMsg_StatsHeroMinuteDetails::kNetWorthFieldNumber;
const int CDOTAUserMsg_StatsHeroMinuteDetails::kHarvestedCreepGoldFieldNumber;
const int CDOTAUserMsg_StatsHeroMinuteDetails::kClaimedFarmFieldNumber;
const int CDOTAUserMsg_StatsHeroMinuteDetails::kWardsPlacedFieldNumber;
const int CDOTAUserMsg_StatsHeroMinuteDetails::kRunesCollectedFieldNumber;
const int CDOTAUserMsg_StatsHeroMinuteDetails::kTpsUsedFieldNumber;
const int CDOTAUserMsg_StatsHeroMinuteDetails::kManaSpentFieldNumber;
const int CDOTAUserMsg_StatsHeroMinuteDetails::kDamageAbsorbedFieldNumber;
const int CDOTAUserMsg_StatsHeroMinuteDetails::kDamageDoneFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_StatsHeroMinuteDetails::CDOTAUserMsg_StatsHeroMinuteDetails()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_StatsHeroMinuteDetails)
}
CDOTAUserMsg_StatsHeroMinuteDetails::CDOTAUserMsg_StatsHeroMinuteDetails(const CDOTAUserMsg_StatsHeroMinuteDetails& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      mana_spent_(from.mana_spent_),
      damage_absorbed_(from.damage_absorbed_),
      damage_done_(from.damage_done_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_position_info()) {
    position_info_ = new ::proto::dota::CDOTAUserMsg_StatsHeroPositionInfo(*from.position_info_);
  } else {
    position_info_ = NULL;
  }
  ::memcpy(&last_hits_, &from.last_hits_,
    reinterpret_cast<char*>(&tps_used_) -
    reinterpret_cast<char*>(&last_hits_) + sizeof(tps_used_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_StatsHeroMinuteDetails)
}

void CDOTAUserMsg_StatsHeroMinuteDetails::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&position_info_, 0, reinterpret_cast<char*>(&tps_used_) -
    reinterpret_cast<char*>(&position_info_) + sizeof(tps_used_));
}

CDOTAUserMsg_StatsHeroMinuteDetails::~CDOTAUserMsg_StatsHeroMinuteDetails() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_StatsHeroMinuteDetails)
  SharedDtor();
}

void CDOTAUserMsg_StatsHeroMinuteDetails::SharedDtor() {
  if (this != internal_default_instance()) {
    delete position_info_;
  }
}

void CDOTAUserMsg_StatsHeroMinuteDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_StatsHeroMinuteDetails::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_StatsHeroMinuteDetails& CDOTAUserMsg_StatsHeroMinuteDetails::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_StatsHeroMinuteDetails* CDOTAUserMsg_StatsHeroMinuteDetails::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_StatsHeroMinuteDetails* n = new CDOTAUserMsg_StatsHeroMinuteDetails;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_StatsHeroMinuteDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_StatsHeroMinuteDetails)
  mana_spent_.Clear();
  damage_absorbed_.Clear();
  damage_done_.Clear();
  if (has_position_info()) {
    GOOGLE_DCHECK(position_info_ != NULL);
    position_info_->::proto::dota::CDOTAUserMsg_StatsHeroPositionInfo::Clear();
  }
  if (_has_bits_[0 / 32] & 254u) {
    ::memset(&last_hits_, 0, reinterpret_cast<char*>(&harvested_creep_gold_) -
      reinterpret_cast<char*>(&last_hits_) + sizeof(harvested_creep_gold_));
  }
  if (_has_bits_[8 / 32] & 3840u) {
    ::memset(&claimed_farm_, 0, reinterpret_cast<char*>(&tps_used_) -
      reinterpret_cast<char*>(&claimed_farm_) + sizeof(tps_used_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_StatsHeroMinuteDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_StatsHeroMinuteDetails)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 last_hits = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_last_hits();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_hits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 hero_kills = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_hero_kills();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_kills_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 hero_damage = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_hero_damage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_damage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tower_damage = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_tower_damage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tower_damage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CDOTAUserMsg_StatsHeroPositionInfo position_info = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 total_xp = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_total_xp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_xp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 net_worth = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_net_worth();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &net_worth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 harvested_creep_gold = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_harvested_creep_gold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &harvested_creep_gold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 claimed_farm = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_claimed_farm();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &claimed_farm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 wards_placed = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_wards_placed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wards_placed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 runes_collected = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_runes_collected();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &runes_collected_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tps_used = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_tps_used();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tps_used_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 mana_spent = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 104u, input, this->mutable_mana_spent())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(106u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_mana_spent())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 damage_absorbed = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 112u, input, this->mutable_damage_absorbed())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(114u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_damage_absorbed())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 damage_done = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 120u, input, this->mutable_damage_done())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(122u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_damage_done())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_StatsHeroMinuteDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_StatsHeroMinuteDetails)
  return false;
#undef DO_
}

void CDOTAUserMsg_StatsHeroMinuteDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_StatsHeroMinuteDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 last_hits = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->last_hits(), output);
  }

  // optional uint32 hero_kills = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hero_kills(), output);
  }

  // optional uint32 hero_damage = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hero_damage(), output);
  }

  // optional uint32 tower_damage = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->tower_damage(), output);
  }

  // optional .proto.dota.CDOTAUserMsg_StatsHeroPositionInfo position_info = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->position_info_, output);
  }

  // optional uint32 total_xp = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->total_xp(), output);
  }

  // optional uint32 net_worth = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->net_worth(), output);
  }

  // optional uint32 harvested_creep_gold = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->harvested_creep_gold(), output);
  }

  // optional uint32 claimed_farm = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->claimed_farm(), output);
  }

  // optional uint32 wards_placed = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->wards_placed(), output);
  }

  // optional uint32 runes_collected = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->runes_collected(), output);
  }

  // optional uint32 tps_used = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->tps_used(), output);
  }

  // repeated uint32 mana_spent = 13;
  for (int i = 0, n = this->mana_spent_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      13, this->mana_spent(i), output);
  }

  // repeated uint32 damage_absorbed = 14;
  for (int i = 0, n = this->damage_absorbed_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      14, this->damage_absorbed(i), output);
  }

  // repeated uint32 damage_done = 15;
  for (int i = 0, n = this->damage_done_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      15, this->damage_done(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_StatsHeroMinuteDetails)
}

::google::protobuf::uint8* CDOTAUserMsg_StatsHeroMinuteDetails::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_StatsHeroMinuteDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 last_hits = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->last_hits(), target);
  }

  // optional uint32 hero_kills = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hero_kills(), target);
  }

  // optional uint32 hero_damage = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hero_damage(), target);
  }

  // optional uint32 tower_damage = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->tower_damage(), target);
  }

  // optional .proto.dota.CDOTAUserMsg_StatsHeroPositionInfo position_info = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->position_info_, deterministic, target);
  }

  // optional uint32 total_xp = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->total_xp(), target);
  }

  // optional uint32 net_worth = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->net_worth(), target);
  }

  // optional uint32 harvested_creep_gold = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->harvested_creep_gold(), target);
  }

  // optional uint32 claimed_farm = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->claimed_farm(), target);
  }

  // optional uint32 wards_placed = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->wards_placed(), target);
  }

  // optional uint32 runes_collected = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->runes_collected(), target);
  }

  // optional uint32 tps_used = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->tps_used(), target);
  }

  // repeated uint32 mana_spent = 13;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(13, this->mana_spent_, target);

  // repeated uint32 damage_absorbed = 14;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(14, this->damage_absorbed_, target);

  // repeated uint32 damage_done = 15;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(15, this->damage_done_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_StatsHeroMinuteDetails)
  return target;
}

size_t CDOTAUserMsg_StatsHeroMinuteDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_StatsHeroMinuteDetails)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 mana_spent = 13;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->mana_spent_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->mana_spent_size());
    total_size += data_size;
  }

  // repeated uint32 damage_absorbed = 14;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->damage_absorbed_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->damage_absorbed_size());
    total_size += data_size;
  }

  // repeated uint32 damage_done = 15;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->damage_done_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->damage_done_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional .proto.dota.CDOTAUserMsg_StatsHeroPositionInfo position_info = 5;
    if (has_position_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->position_info_);
    }

    // optional uint32 last_hits = 1;
    if (has_last_hits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_hits());
    }

    // optional uint32 hero_kills = 2;
    if (has_hero_kills()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_kills());
    }

    // optional uint32 hero_damage = 3;
    if (has_hero_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_damage());
    }

    // optional uint32 tower_damage = 4;
    if (has_tower_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tower_damage());
    }

    // optional uint32 total_xp = 6;
    if (has_total_xp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_xp());
    }

    // optional uint32 net_worth = 7;
    if (has_net_worth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->net_worth());
    }

    // optional uint32 harvested_creep_gold = 8;
    if (has_harvested_creep_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->harvested_creep_gold());
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional uint32 claimed_farm = 9;
    if (has_claimed_farm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->claimed_farm());
    }

    // optional uint32 wards_placed = 10;
    if (has_wards_placed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wards_placed());
    }

    // optional uint32 runes_collected = 11;
    if (has_runes_collected()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->runes_collected());
    }

    // optional uint32 tps_used = 12;
    if (has_tps_used()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tps_used());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_StatsHeroMinuteDetails::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_StatsHeroMinuteDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_StatsHeroMinuteDetails* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_StatsHeroMinuteDetails>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_StatsHeroMinuteDetails)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_StatsHeroMinuteDetails)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_StatsHeroMinuteDetails::MergeFrom(const CDOTAUserMsg_StatsHeroMinuteDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_StatsHeroMinuteDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mana_spent_.MergeFrom(from.mana_spent_);
  damage_absorbed_.MergeFrom(from.damage_absorbed_);
  damage_done_.MergeFrom(from.damage_done_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_position_info()->::proto::dota::CDOTAUserMsg_StatsHeroPositionInfo::MergeFrom(from.position_info());
    }
    if (cached_has_bits & 0x00000002u) {
      last_hits_ = from.last_hits_;
    }
    if (cached_has_bits & 0x00000004u) {
      hero_kills_ = from.hero_kills_;
    }
    if (cached_has_bits & 0x00000008u) {
      hero_damage_ = from.hero_damage_;
    }
    if (cached_has_bits & 0x00000010u) {
      tower_damage_ = from.tower_damage_;
    }
    if (cached_has_bits & 0x00000020u) {
      total_xp_ = from.total_xp_;
    }
    if (cached_has_bits & 0x00000040u) {
      net_worth_ = from.net_worth_;
    }
    if (cached_has_bits & 0x00000080u) {
      harvested_creep_gold_ = from.harvested_creep_gold_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      claimed_farm_ = from.claimed_farm_;
    }
    if (cached_has_bits & 0x00000200u) {
      wards_placed_ = from.wards_placed_;
    }
    if (cached_has_bits & 0x00000400u) {
      runes_collected_ = from.runes_collected_;
    }
    if (cached_has_bits & 0x00000800u) {
      tps_used_ = from.tps_used_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_StatsHeroMinuteDetails::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_StatsHeroMinuteDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_StatsHeroMinuteDetails::CopyFrom(const CDOTAUserMsg_StatsHeroMinuteDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_StatsHeroMinuteDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_StatsHeroMinuteDetails::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_StatsHeroMinuteDetails::Swap(CDOTAUserMsg_StatsHeroMinuteDetails* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_StatsHeroMinuteDetails::InternalSwap(CDOTAUserMsg_StatsHeroMinuteDetails* other) {
  mana_spent_.InternalSwap(&other->mana_spent_);
  damage_absorbed_.InternalSwap(&other->damage_absorbed_);
  damage_done_.InternalSwap(&other->damage_done_);
  std::swap(position_info_, other->position_info_);
  std::swap(last_hits_, other->last_hits_);
  std::swap(hero_kills_, other->hero_kills_);
  std::swap(hero_damage_, other->hero_damage_);
  std::swap(tower_damage_, other->tower_damage_);
  std::swap(total_xp_, other->total_xp_);
  std::swap(net_worth_, other->net_worth_);
  std::swap(harvested_creep_gold_, other->harvested_creep_gold_);
  std::swap(claimed_farm_, other->claimed_farm_);
  std::swap(wards_placed_, other->wards_placed_);
  std::swap(runes_collected_, other->runes_collected_);
  std::swap(tps_used_, other->tps_used_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_StatsHeroMinuteDetails::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_StatsHeroMinuteDetails

// optional uint32 last_hits = 1;
bool CDOTAUserMsg_StatsHeroMinuteDetails::has_last_hits() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAUserMsg_StatsHeroMinuteDetails::set_has_last_hits() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAUserMsg_StatsHeroMinuteDetails::clear_has_last_hits() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAUserMsg_StatsHeroMinuteDetails::clear_last_hits() {
  last_hits_ = 0u;
  clear_has_last_hits();
}
::google::protobuf::uint32 CDOTAUserMsg_StatsHeroMinuteDetails::last_hits() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_StatsHeroMinuteDetails.last_hits)
  return last_hits_;
}
void CDOTAUserMsg_StatsHeroMinuteDetails::set_last_hits(::google::protobuf::uint32 value) {
  set_has_last_hits();
  last_hits_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_StatsHeroMinuteDetails.last_hits)
}

// optional uint32 hero_kills = 2;
bool CDOTAUserMsg_StatsHeroMinuteDetails::has_hero_kills() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDOTAUserMsg_StatsHeroMinuteDetails::set_has_hero_kills() {
  _has_bits_[0] |= 0x00000004u;
}
void CDOTAUserMsg_StatsHeroMinuteDetails::clear_has_hero_kills() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDOTAUserMsg_StatsHeroMinuteDetails::clear_hero_kills() {
  hero_kills_ = 0u;
  clear_has_hero_kills();
}
::google::protobuf::uint32 CDOTAUserMsg_StatsHeroMinuteDetails::hero_kills() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_StatsHeroMinuteDetails.hero_kills)
  return hero_kills_;
}
void CDOTAUserMsg_StatsHeroMinuteDetails::set_hero_kills(::google::protobuf::uint32 value) {
  set_has_hero_kills();
  hero_kills_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_StatsHeroMinuteDetails.hero_kills)
}

// optional uint32 hero_damage = 3;
bool CDOTAUserMsg_StatsHeroMinuteDetails::has_hero_damage() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CDOTAUserMsg_StatsHeroMinuteDetails::set_has_hero_damage() {
  _has_bits_[0] |= 0x00000008u;
}
void CDOTAUserMsg_StatsHeroMinuteDetails::clear_has_hero_damage() {
  _has_bits_[0] &= ~0x00000008u;
}
void CDOTAUserMsg_StatsHeroMinuteDetails::clear_hero_damage() {
  hero_damage_ = 0u;
  clear_has_hero_damage();
}
::google::protobuf::uint32 CDOTAUserMsg_StatsHeroMinuteDetails::hero_damage() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_StatsHeroMinuteDetails.hero_damage)
  return hero_damage_;
}
void CDOTAUserMsg_StatsHeroMinuteDetails::set_hero_damage(::google::protobuf::uint32 value) {
  set_has_hero_damage();
  hero_damage_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_StatsHeroMinuteDetails.hero_damage)
}

// optional uint32 tower_damage = 4;
bool CDOTAUserMsg_StatsHeroMinuteDetails::has_tower_damage() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CDOTAUserMsg_StatsHeroMinuteDetails::set_has_tower_damage() {
  _has_bits_[0] |= 0x00000010u;
}
void CDOTAUserMsg_StatsHeroMinuteDetails::clear_has_tower_damage() {
  _has_bits_[0] &= ~0x00000010u;
}
void CDOTAUserMsg_StatsHeroMinuteDetails::clear_tower_damage() {
  tower_damage_ = 0u;
  clear_has_tower_damage();
}
::google::protobuf::uint32 CDOTAUserMsg_StatsHeroMinuteDetails::tower_damage() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_StatsHeroMinuteDetails.tower_damage)
  return tower_damage_;
}
void CDOTAUserMsg_StatsHeroMinuteDetails::set_tower_damage(::google::protobuf::uint32 value) {
  set_has_tower_damage();
  tower_damage_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_StatsHeroMinuteDetails.tower_damage)
}

// optional .proto.dota.CDOTAUserMsg_StatsHeroPositionInfo position_info = 5;
bool CDOTAUserMsg_StatsHeroMinuteDetails::has_position_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_StatsHeroMinuteDetails::set_has_position_info() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_StatsHeroMinuteDetails::clear_has_position_info() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_StatsHeroMinuteDetails::clear_position_info() {
  if (position_info_ != NULL) position_info_->::proto::dota::CDOTAUserMsg_StatsHeroPositionInfo::Clear();
  clear_has_position_info();
}
const ::proto::dota::CDOTAUserMsg_StatsHeroPositionInfo& CDOTAUserMsg_StatsHeroMinuteDetails::position_info() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_StatsHeroMinuteDetails.position_info)
  return position_info_ != NULL ? *position_info_
                         : *::proto::dota::CDOTAUserMsg_StatsHeroPositionInfo::internal_default_instance();
}
::proto::dota::CDOTAUserMsg_StatsHeroPositionInfo* CDOTAUserMsg_StatsHeroMinuteDetails::mutable_position_info() {
  set_has_position_info();
  if (position_info_ == NULL) {
    position_info_ = new ::proto::dota::CDOTAUserMsg_StatsHeroPositionInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_StatsHeroMinuteDetails.position_info)
  return position_info_;
}
::proto::dota::CDOTAUserMsg_StatsHeroPositionInfo* CDOTAUserMsg_StatsHeroMinuteDetails::release_position_info() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAUserMsg_StatsHeroMinuteDetails.position_info)
  clear_has_position_info();
  ::proto::dota::CDOTAUserMsg_StatsHeroPositionInfo* temp = position_info_;
  position_info_ = NULL;
  return temp;
}
void CDOTAUserMsg_StatsHeroMinuteDetails::set_allocated_position_info(::proto::dota::CDOTAUserMsg_StatsHeroPositionInfo* position_info) {
  delete position_info_;
  position_info_ = position_info;
  if (position_info) {
    set_has_position_info();
  } else {
    clear_has_position_info();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAUserMsg_StatsHeroMinuteDetails.position_info)
}

// optional uint32 total_xp = 6;
bool CDOTAUserMsg_StatsHeroMinuteDetails::has_total_xp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CDOTAUserMsg_StatsHeroMinuteDetails::set_has_total_xp() {
  _has_bits_[0] |= 0x00000020u;
}
void CDOTAUserMsg_StatsHeroMinuteDetails::clear_has_total_xp() {
  _has_bits_[0] &= ~0x00000020u;
}
void CDOTAUserMsg_StatsHeroMinuteDetails::clear_total_xp() {
  total_xp_ = 0u;
  clear_has_total_xp();
}
::google::protobuf::uint32 CDOTAUserMsg_StatsHeroMinuteDetails::total_xp() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_StatsHeroMinuteDetails.total_xp)
  return total_xp_;
}
void CDOTAUserMsg_StatsHeroMinuteDetails::set_total_xp(::google::protobuf::uint32 value) {
  set_has_total_xp();
  total_xp_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_StatsHeroMinuteDetails.total_xp)
}

// optional uint32 net_worth = 7;
bool CDOTAUserMsg_StatsHeroMinuteDetails::has_net_worth() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CDOTAUserMsg_StatsHeroMinuteDetails::set_has_net_worth() {
  _has_bits_[0] |= 0x00000040u;
}
void CDOTAUserMsg_StatsHeroMinuteDetails::clear_has_net_worth() {
  _has_bits_[0] &= ~0x00000040u;
}
void CDOTAUserMsg_StatsHeroMinuteDetails::clear_net_worth() {
  net_worth_ = 0u;
  clear_has_net_worth();
}
::google::protobuf::uint32 CDOTAUserMsg_StatsHeroMinuteDetails::net_worth() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_StatsHeroMinuteDetails.net_worth)
  return net_worth_;
}
void CDOTAUserMsg_StatsHeroMinuteDetails::set_net_worth(::google::protobuf::uint32 value) {
  set_has_net_worth();
  net_worth_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_StatsHeroMinuteDetails.net_worth)
}

// optional uint32 harvested_creep_gold = 8;
bool CDOTAUserMsg_StatsHeroMinuteDetails::has_harvested_creep_gold() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CDOTAUserMsg_StatsHeroMinuteDetails::set_has_harvested_creep_gold() {
  _has_bits_[0] |= 0x00000080u;
}
void CDOTAUserMsg_StatsHeroMinuteDetails::clear_has_harvested_creep_gold() {
  _has_bits_[0] &= ~0x00000080u;
}
void CDOTAUserMsg_StatsHeroMinuteDetails::clear_harvested_creep_gold() {
  harvested_creep_gold_ = 0u;
  clear_has_harvested_creep_gold();
}
::google::protobuf::uint32 CDOTAUserMsg_StatsHeroMinuteDetails::harvested_creep_gold() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_StatsHeroMinuteDetails.harvested_creep_gold)
  return harvested_creep_gold_;
}
void CDOTAUserMsg_StatsHeroMinuteDetails::set_harvested_creep_gold(::google::protobuf::uint32 value) {
  set_has_harvested_creep_gold();
  harvested_creep_gold_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_StatsHeroMinuteDetails.harvested_creep_gold)
}

// optional uint32 claimed_farm = 9;
bool CDOTAUserMsg_StatsHeroMinuteDetails::has_claimed_farm() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CDOTAUserMsg_StatsHeroMinuteDetails::set_has_claimed_farm() {
  _has_bits_[0] |= 0x00000100u;
}
void CDOTAUserMsg_StatsHeroMinuteDetails::clear_has_claimed_farm() {
  _has_bits_[0] &= ~0x00000100u;
}
void CDOTAUserMsg_StatsHeroMinuteDetails::clear_claimed_farm() {
  claimed_farm_ = 0u;
  clear_has_claimed_farm();
}
::google::protobuf::uint32 CDOTAUserMsg_StatsHeroMinuteDetails::claimed_farm() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_StatsHeroMinuteDetails.claimed_farm)
  return claimed_farm_;
}
void CDOTAUserMsg_StatsHeroMinuteDetails::set_claimed_farm(::google::protobuf::uint32 value) {
  set_has_claimed_farm();
  claimed_farm_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_StatsHeroMinuteDetails.claimed_farm)
}

// optional uint32 wards_placed = 10;
bool CDOTAUserMsg_StatsHeroMinuteDetails::has_wards_placed() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CDOTAUserMsg_StatsHeroMinuteDetails::set_has_wards_placed() {
  _has_bits_[0] |= 0x00000200u;
}
void CDOTAUserMsg_StatsHeroMinuteDetails::clear_has_wards_placed() {
  _has_bits_[0] &= ~0x00000200u;
}
void CDOTAUserMsg_StatsHeroMinuteDetails::clear_wards_placed() {
  wards_placed_ = 0u;
  clear_has_wards_placed();
}
::google::protobuf::uint32 CDOTAUserMsg_StatsHeroMinuteDetails::wards_placed() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_StatsHeroMinuteDetails.wards_placed)
  return wards_placed_;
}
void CDOTAUserMsg_StatsHeroMinuteDetails::set_wards_placed(::google::protobuf::uint32 value) {
  set_has_wards_placed();
  wards_placed_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_StatsHeroMinuteDetails.wards_placed)
}

// optional uint32 runes_collected = 11;
bool CDOTAUserMsg_StatsHeroMinuteDetails::has_runes_collected() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CDOTAUserMsg_StatsHeroMinuteDetails::set_has_runes_collected() {
  _has_bits_[0] |= 0x00000400u;
}
void CDOTAUserMsg_StatsHeroMinuteDetails::clear_has_runes_collected() {
  _has_bits_[0] &= ~0x00000400u;
}
void CDOTAUserMsg_StatsHeroMinuteDetails::clear_runes_collected() {
  runes_collected_ = 0u;
  clear_has_runes_collected();
}
::google::protobuf::uint32 CDOTAUserMsg_StatsHeroMinuteDetails::runes_collected() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_StatsHeroMinuteDetails.runes_collected)
  return runes_collected_;
}
void CDOTAUserMsg_StatsHeroMinuteDetails::set_runes_collected(::google::protobuf::uint32 value) {
  set_has_runes_collected();
  runes_collected_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_StatsHeroMinuteDetails.runes_collected)
}

// optional uint32 tps_used = 12;
bool CDOTAUserMsg_StatsHeroMinuteDetails::has_tps_used() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CDOTAUserMsg_StatsHeroMinuteDetails::set_has_tps_used() {
  _has_bits_[0] |= 0x00000800u;
}
void CDOTAUserMsg_StatsHeroMinuteDetails::clear_has_tps_used() {
  _has_bits_[0] &= ~0x00000800u;
}
void CDOTAUserMsg_StatsHeroMinuteDetails::clear_tps_used() {
  tps_used_ = 0u;
  clear_has_tps_used();
}
::google::protobuf::uint32 CDOTAUserMsg_StatsHeroMinuteDetails::tps_used() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_StatsHeroMinuteDetails.tps_used)
  return tps_used_;
}
void CDOTAUserMsg_StatsHeroMinuteDetails::set_tps_used(::google::protobuf::uint32 value) {
  set_has_tps_used();
  tps_used_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_StatsHeroMinuteDetails.tps_used)
}

// repeated uint32 mana_spent = 13;
int CDOTAUserMsg_StatsHeroMinuteDetails::mana_spent_size() const {
  return mana_spent_.size();
}
void CDOTAUserMsg_StatsHeroMinuteDetails::clear_mana_spent() {
  mana_spent_.Clear();
}
::google::protobuf::uint32 CDOTAUserMsg_StatsHeroMinuteDetails::mana_spent(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_StatsHeroMinuteDetails.mana_spent)
  return mana_spent_.Get(index);
}
void CDOTAUserMsg_StatsHeroMinuteDetails::set_mana_spent(int index, ::google::protobuf::uint32 value) {
  mana_spent_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_StatsHeroMinuteDetails.mana_spent)
}
void CDOTAUserMsg_StatsHeroMinuteDetails::add_mana_spent(::google::protobuf::uint32 value) {
  mana_spent_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAUserMsg_StatsHeroMinuteDetails.mana_spent)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CDOTAUserMsg_StatsHeroMinuteDetails::mana_spent() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTAUserMsg_StatsHeroMinuteDetails.mana_spent)
  return mana_spent_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CDOTAUserMsg_StatsHeroMinuteDetails::mutable_mana_spent() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTAUserMsg_StatsHeroMinuteDetails.mana_spent)
  return &mana_spent_;
}

// repeated uint32 damage_absorbed = 14;
int CDOTAUserMsg_StatsHeroMinuteDetails::damage_absorbed_size() const {
  return damage_absorbed_.size();
}
void CDOTAUserMsg_StatsHeroMinuteDetails::clear_damage_absorbed() {
  damage_absorbed_.Clear();
}
::google::protobuf::uint32 CDOTAUserMsg_StatsHeroMinuteDetails::damage_absorbed(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_StatsHeroMinuteDetails.damage_absorbed)
  return damage_absorbed_.Get(index);
}
void CDOTAUserMsg_StatsHeroMinuteDetails::set_damage_absorbed(int index, ::google::protobuf::uint32 value) {
  damage_absorbed_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_StatsHeroMinuteDetails.damage_absorbed)
}
void CDOTAUserMsg_StatsHeroMinuteDetails::add_damage_absorbed(::google::protobuf::uint32 value) {
  damage_absorbed_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAUserMsg_StatsHeroMinuteDetails.damage_absorbed)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CDOTAUserMsg_StatsHeroMinuteDetails::damage_absorbed() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTAUserMsg_StatsHeroMinuteDetails.damage_absorbed)
  return damage_absorbed_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CDOTAUserMsg_StatsHeroMinuteDetails::mutable_damage_absorbed() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTAUserMsg_StatsHeroMinuteDetails.damage_absorbed)
  return &damage_absorbed_;
}

// repeated uint32 damage_done = 15;
int CDOTAUserMsg_StatsHeroMinuteDetails::damage_done_size() const {
  return damage_done_.size();
}
void CDOTAUserMsg_StatsHeroMinuteDetails::clear_damage_done() {
  damage_done_.Clear();
}
::google::protobuf::uint32 CDOTAUserMsg_StatsHeroMinuteDetails::damage_done(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_StatsHeroMinuteDetails.damage_done)
  return damage_done_.Get(index);
}
void CDOTAUserMsg_StatsHeroMinuteDetails::set_damage_done(int index, ::google::protobuf::uint32 value) {
  damage_done_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_StatsHeroMinuteDetails.damage_done)
}
void CDOTAUserMsg_StatsHeroMinuteDetails::add_damage_done(::google::protobuf::uint32 value) {
  damage_done_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAUserMsg_StatsHeroMinuteDetails.damage_done)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CDOTAUserMsg_StatsHeroMinuteDetails::damage_done() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTAUserMsg_StatsHeroMinuteDetails.damage_done)
  return damage_done_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CDOTAUserMsg_StatsHeroMinuteDetails::mutable_damage_done() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTAUserMsg_StatsHeroMinuteDetails.damage_done)
  return &damage_done_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::kLocationCategoryFieldNumber;
const int CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::kStatTypeFieldNumber;
const int CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_StatsTeamMinuteDetails.LocationPerformance)
}
CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance(const CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&location_category_, &from.location_category_,
    reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&location_category_) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_StatsTeamMinuteDetails.LocationPerformance)
}

void CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&location_category_, 0, reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&location_category_) + sizeof(value_));
}

CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::~CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_StatsTeamMinuteDetails.LocationPerformance)
  SharedDtor();
}

void CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::SharedDtor() {
}

void CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance& CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance* CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance* n = new CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_StatsTeamMinuteDetails.LocationPerformance)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&location_category_, 0, reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&location_category_) + sizeof(value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_StatsTeamMinuteDetails.LocationPerformance)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 location_category = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_location_category();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &location_category_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 stat_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_stat_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stat_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_StatsTeamMinuteDetails.LocationPerformance)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_StatsTeamMinuteDetails.LocationPerformance)
  return false;
#undef DO_
}

void CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_StatsTeamMinuteDetails.LocationPerformance)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 location_category = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->location_category(), output);
  }

  // optional uint32 stat_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->stat_type(), output);
  }

  // optional uint32 value = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_StatsTeamMinuteDetails.LocationPerformance)
}

::google::protobuf::uint8* CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_StatsTeamMinuteDetails.LocationPerformance)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 location_category = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->location_category(), target);
  }

  // optional uint32 stat_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->stat_type(), target);
  }

  // optional uint32 value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_StatsTeamMinuteDetails.LocationPerformance)
  return target;
}

size_t CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_StatsTeamMinuteDetails.LocationPerformance)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 location_category = 1;
    if (has_location_category()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->location_category());
    }

    // optional uint32 stat_type = 2;
    if (has_stat_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stat_type());
    }

    // optional uint32 value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_StatsTeamMinuteDetails.LocationPerformance)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_StatsTeamMinuteDetails.LocationPerformance)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_StatsTeamMinuteDetails.LocationPerformance)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::MergeFrom(const CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_StatsTeamMinuteDetails.LocationPerformance)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      location_category_ = from.location_category_;
    }
    if (cached_has_bits & 0x00000002u) {
      stat_type_ = from.stat_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      value_ = from.value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_StatsTeamMinuteDetails.LocationPerformance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::CopyFrom(const CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_StatsTeamMinuteDetails.LocationPerformance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::Swap(CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::InternalSwap(CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance* other) {
  std::swap(location_category_, other->location_category_);
  std::swap(stat_type_, other->stat_type_);
  std::swap(value_, other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance

// optional uint32 location_category = 1;
bool CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::has_location_category() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::set_has_location_category() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::clear_has_location_category() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::clear_location_category() {
  location_category_ = 0u;
  clear_has_location_category();
}
::google::protobuf::uint32 CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::location_category() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_StatsTeamMinuteDetails.LocationPerformance.location_category)
  return location_category_;
}
void CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::set_location_category(::google::protobuf::uint32 value) {
  set_has_location_category();
  location_category_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_StatsTeamMinuteDetails.LocationPerformance.location_category)
}

// optional uint32 stat_type = 2;
bool CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::has_stat_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::set_has_stat_type() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::clear_has_stat_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::clear_stat_type() {
  stat_type_ = 0u;
  clear_has_stat_type();
}
::google::protobuf::uint32 CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::stat_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_StatsTeamMinuteDetails.LocationPerformance.stat_type)
  return stat_type_;
}
void CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::set_stat_type(::google::protobuf::uint32 value) {
  set_has_stat_type();
  stat_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_StatsTeamMinuteDetails.LocationPerformance.stat_type)
}

// optional uint32 value = 3;
bool CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::set_has_value() {
  _has_bits_[0] |= 0x00000004u;
}
void CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::clear_has_value() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::clear_value() {
  value_ = 0u;
  clear_has_value();
}
::google::protobuf::uint32 CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::value() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_StatsTeamMinuteDetails.LocationPerformance.value)
  return value_;
}
void CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance::set_value(::google::protobuf::uint32 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_StatsTeamMinuteDetails.LocationPerformance.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_StatsTeamMinuteDetails::kPlayerStatsFieldNumber;
const int CDOTAUserMsg_StatsTeamMinuteDetails::kTowerKillsFieldNumber;
const int CDOTAUserMsg_StatsTeamMinuteDetails::kBarrackKillsFieldNumber;
const int CDOTAUserMsg_StatsTeamMinuteDetails::kAvailableLaneCreepGoldFieldNumber;
const int CDOTAUserMsg_StatsTeamMinuteDetails::kBalanceKillValueFieldNumber;
const int CDOTAUserMsg_StatsTeamMinuteDetails::kBalanceTowerValueFieldNumber;
const int CDOTAUserMsg_StatsTeamMinuteDetails::kBalanceBarracksValueFieldNumber;
const int CDOTAUserMsg_StatsTeamMinuteDetails::kBalanceGoldValueFieldNumber;
const int CDOTAUserMsg_StatsTeamMinuteDetails::kBalanceXpValueFieldNumber;
const int CDOTAUserMsg_StatsTeamMinuteDetails::kLanePerformanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_StatsTeamMinuteDetails::CDOTAUserMsg_StatsTeamMinuteDetails()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_StatsTeamMinuteDetails)
}
CDOTAUserMsg_StatsTeamMinuteDetails::CDOTAUserMsg_StatsTeamMinuteDetails(const CDOTAUserMsg_StatsTeamMinuteDetails& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      player_stats_(from.player_stats_),
      lane_performance_(from.lane_performance_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&tower_kills_, &from.tower_kills_,
    reinterpret_cast<char*>(&balance_xp_value_) -
    reinterpret_cast<char*>(&tower_kills_) + sizeof(balance_xp_value_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_StatsTeamMinuteDetails)
}

void CDOTAUserMsg_StatsTeamMinuteDetails::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&tower_kills_, 0, reinterpret_cast<char*>(&balance_xp_value_) -
    reinterpret_cast<char*>(&tower_kills_) + sizeof(balance_xp_value_));
}

CDOTAUserMsg_StatsTeamMinuteDetails::~CDOTAUserMsg_StatsTeamMinuteDetails() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_StatsTeamMinuteDetails)
  SharedDtor();
}

void CDOTAUserMsg_StatsTeamMinuteDetails::SharedDtor() {
}

void CDOTAUserMsg_StatsTeamMinuteDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_StatsTeamMinuteDetails::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_StatsTeamMinuteDetails& CDOTAUserMsg_StatsTeamMinuteDetails::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_StatsTeamMinuteDetails* CDOTAUserMsg_StatsTeamMinuteDetails::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_StatsTeamMinuteDetails* n = new CDOTAUserMsg_StatsTeamMinuteDetails;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_StatsTeamMinuteDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_StatsTeamMinuteDetails)
  player_stats_.Clear();
  lane_performance_.Clear();
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&tower_kills_, 0, reinterpret_cast<char*>(&balance_xp_value_) -
      reinterpret_cast<char*>(&tower_kills_) + sizeof(balance_xp_value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_StatsTeamMinuteDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_StatsTeamMinuteDetails)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CDOTAUserMsg_StatsHeroMinuteDetails player_stats = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tower_kills = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_tower_kills();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tower_kills_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 barrack_kills = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_barrack_kills();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &barrack_kills_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 available_lane_creep_gold = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_available_lane_creep_gold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &available_lane_creep_gold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 balance_kill_value = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_balance_kill_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &balance_kill_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 balance_tower_value = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_balance_tower_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &balance_tower_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 balance_barracks_value = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_balance_barracks_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &balance_barracks_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 balance_gold_value = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_balance_gold_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &balance_gold_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 balance_xp_value = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_balance_xp_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &balance_xp_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CDOTAUserMsg_StatsTeamMinuteDetails.LocationPerformance lane_performance = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lane_performance()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_StatsTeamMinuteDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_StatsTeamMinuteDetails)
  return false;
#undef DO_
}

void CDOTAUserMsg_StatsTeamMinuteDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_StatsTeamMinuteDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CDOTAUserMsg_StatsHeroMinuteDetails player_stats = 1;
  for (unsigned int i = 0, n = this->player_stats_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->player_stats(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 tower_kills = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tower_kills(), output);
  }

  // optional uint32 barrack_kills = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->barrack_kills(), output);
  }

  // optional uint32 available_lane_creep_gold = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->available_lane_creep_gold(), output);
  }

  // optional uint32 balance_kill_value = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->balance_kill_value(), output);
  }

  // optional uint32 balance_tower_value = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->balance_tower_value(), output);
  }

  // optional uint32 balance_barracks_value = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->balance_barracks_value(), output);
  }

  // optional uint32 balance_gold_value = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->balance_gold_value(), output);
  }

  // optional uint32 balance_xp_value = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->balance_xp_value(), output);
  }

  // repeated .proto.dota.CDOTAUserMsg_StatsTeamMinuteDetails.LocationPerformance lane_performance = 10;
  for (unsigned int i = 0, n = this->lane_performance_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->lane_performance(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_StatsTeamMinuteDetails)
}

::google::protobuf::uint8* CDOTAUserMsg_StatsTeamMinuteDetails::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_StatsTeamMinuteDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CDOTAUserMsg_StatsHeroMinuteDetails player_stats = 1;
  for (unsigned int i = 0, n = this->player_stats_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->player_stats(i), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 tower_kills = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->tower_kills(), target);
  }

  // optional uint32 barrack_kills = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->barrack_kills(), target);
  }

  // optional uint32 available_lane_creep_gold = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->available_lane_creep_gold(), target);
  }

  // optional uint32 balance_kill_value = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->balance_kill_value(), target);
  }

  // optional uint32 balance_tower_value = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->balance_tower_value(), target);
  }

  // optional uint32 balance_barracks_value = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->balance_barracks_value(), target);
  }

  // optional uint32 balance_gold_value = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->balance_gold_value(), target);
  }

  // optional uint32 balance_xp_value = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->balance_xp_value(), target);
  }

  // repeated .proto.dota.CDOTAUserMsg_StatsTeamMinuteDetails.LocationPerformance lane_performance = 10;
  for (unsigned int i = 0, n = this->lane_performance_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, this->lane_performance(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_StatsTeamMinuteDetails)
  return target;
}

size_t CDOTAUserMsg_StatsTeamMinuteDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_StatsTeamMinuteDetails)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CDOTAUserMsg_StatsHeroMinuteDetails player_stats = 1;
  {
    unsigned int count = this->player_stats_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_stats(i));
    }
  }

  // repeated .proto.dota.CDOTAUserMsg_StatsTeamMinuteDetails.LocationPerformance lane_performance = 10;
  {
    unsigned int count = this->lane_performance_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lane_performance(i));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 tower_kills = 2;
    if (has_tower_kills()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tower_kills());
    }

    // optional uint32 barrack_kills = 3;
    if (has_barrack_kills()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->barrack_kills());
    }

    // optional uint32 available_lane_creep_gold = 4;
    if (has_available_lane_creep_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->available_lane_creep_gold());
    }

    // optional uint32 balance_kill_value = 5;
    if (has_balance_kill_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->balance_kill_value());
    }

    // optional uint32 balance_tower_value = 6;
    if (has_balance_tower_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->balance_tower_value());
    }

    // optional uint32 balance_barracks_value = 7;
    if (has_balance_barracks_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->balance_barracks_value());
    }

    // optional uint32 balance_gold_value = 8;
    if (has_balance_gold_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->balance_gold_value());
    }

    // optional uint32 balance_xp_value = 9;
    if (has_balance_xp_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->balance_xp_value());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_StatsTeamMinuteDetails::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_StatsTeamMinuteDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_StatsTeamMinuteDetails* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_StatsTeamMinuteDetails>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_StatsTeamMinuteDetails)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_StatsTeamMinuteDetails)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_StatsTeamMinuteDetails::MergeFrom(const CDOTAUserMsg_StatsTeamMinuteDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_StatsTeamMinuteDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_stats_.MergeFrom(from.player_stats_);
  lane_performance_.MergeFrom(from.lane_performance_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      tower_kills_ = from.tower_kills_;
    }
    if (cached_has_bits & 0x00000002u) {
      barrack_kills_ = from.barrack_kills_;
    }
    if (cached_has_bits & 0x00000004u) {
      available_lane_creep_gold_ = from.available_lane_creep_gold_;
    }
    if (cached_has_bits & 0x00000008u) {
      balance_kill_value_ = from.balance_kill_value_;
    }
    if (cached_has_bits & 0x00000010u) {
      balance_tower_value_ = from.balance_tower_value_;
    }
    if (cached_has_bits & 0x00000020u) {
      balance_barracks_value_ = from.balance_barracks_value_;
    }
    if (cached_has_bits & 0x00000040u) {
      balance_gold_value_ = from.balance_gold_value_;
    }
    if (cached_has_bits & 0x00000080u) {
      balance_xp_value_ = from.balance_xp_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_StatsTeamMinuteDetails::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_StatsTeamMinuteDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_StatsTeamMinuteDetails::CopyFrom(const CDOTAUserMsg_StatsTeamMinuteDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_StatsTeamMinuteDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_StatsTeamMinuteDetails::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_StatsTeamMinuteDetails::Swap(CDOTAUserMsg_StatsTeamMinuteDetails* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_StatsTeamMinuteDetails::InternalSwap(CDOTAUserMsg_StatsTeamMinuteDetails* other) {
  player_stats_.InternalSwap(&other->player_stats_);
  lane_performance_.InternalSwap(&other->lane_performance_);
  std::swap(tower_kills_, other->tower_kills_);
  std::swap(barrack_kills_, other->barrack_kills_);
  std::swap(available_lane_creep_gold_, other->available_lane_creep_gold_);
  std::swap(balance_kill_value_, other->balance_kill_value_);
  std::swap(balance_tower_value_, other->balance_tower_value_);
  std::swap(balance_barracks_value_, other->balance_barracks_value_);
  std::swap(balance_gold_value_, other->balance_gold_value_);
  std::swap(balance_xp_value_, other->balance_xp_value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_StatsTeamMinuteDetails::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_StatsTeamMinuteDetails

// repeated .proto.dota.CDOTAUserMsg_StatsHeroMinuteDetails player_stats = 1;
int CDOTAUserMsg_StatsTeamMinuteDetails::player_stats_size() const {
  return player_stats_.size();
}
void CDOTAUserMsg_StatsTeamMinuteDetails::clear_player_stats() {
  player_stats_.Clear();
}
const ::proto::dota::CDOTAUserMsg_StatsHeroMinuteDetails& CDOTAUserMsg_StatsTeamMinuteDetails::player_stats(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_StatsTeamMinuteDetails.player_stats)
  return player_stats_.Get(index);
}
::proto::dota::CDOTAUserMsg_StatsHeroMinuteDetails* CDOTAUserMsg_StatsTeamMinuteDetails::mutable_player_stats(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_StatsTeamMinuteDetails.player_stats)
  return player_stats_.Mutable(index);
}
::proto::dota::CDOTAUserMsg_StatsHeroMinuteDetails* CDOTAUserMsg_StatsTeamMinuteDetails::add_player_stats() {
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAUserMsg_StatsTeamMinuteDetails.player_stats)
  return player_stats_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAUserMsg_StatsHeroMinuteDetails >*
CDOTAUserMsg_StatsTeamMinuteDetails::mutable_player_stats() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTAUserMsg_StatsTeamMinuteDetails.player_stats)
  return &player_stats_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAUserMsg_StatsHeroMinuteDetails >&
CDOTAUserMsg_StatsTeamMinuteDetails::player_stats() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTAUserMsg_StatsTeamMinuteDetails.player_stats)
  return player_stats_;
}

// optional uint32 tower_kills = 2;
bool CDOTAUserMsg_StatsTeamMinuteDetails::has_tower_kills() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_StatsTeamMinuteDetails::set_has_tower_kills() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_StatsTeamMinuteDetails::clear_has_tower_kills() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_StatsTeamMinuteDetails::clear_tower_kills() {
  tower_kills_ = 0u;
  clear_has_tower_kills();
}
::google::protobuf::uint32 CDOTAUserMsg_StatsTeamMinuteDetails::tower_kills() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_StatsTeamMinuteDetails.tower_kills)
  return tower_kills_;
}
void CDOTAUserMsg_StatsTeamMinuteDetails::set_tower_kills(::google::protobuf::uint32 value) {
  set_has_tower_kills();
  tower_kills_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_StatsTeamMinuteDetails.tower_kills)
}

// optional uint32 barrack_kills = 3;
bool CDOTAUserMsg_StatsTeamMinuteDetails::has_barrack_kills() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAUserMsg_StatsTeamMinuteDetails::set_has_barrack_kills() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAUserMsg_StatsTeamMinuteDetails::clear_has_barrack_kills() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAUserMsg_StatsTeamMinuteDetails::clear_barrack_kills() {
  barrack_kills_ = 0u;
  clear_has_barrack_kills();
}
::google::protobuf::uint32 CDOTAUserMsg_StatsTeamMinuteDetails::barrack_kills() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_StatsTeamMinuteDetails.barrack_kills)
  return barrack_kills_;
}
void CDOTAUserMsg_StatsTeamMinuteDetails::set_barrack_kills(::google::protobuf::uint32 value) {
  set_has_barrack_kills();
  barrack_kills_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_StatsTeamMinuteDetails.barrack_kills)
}

// optional uint32 available_lane_creep_gold = 4;
bool CDOTAUserMsg_StatsTeamMinuteDetails::has_available_lane_creep_gold() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDOTAUserMsg_StatsTeamMinuteDetails::set_has_available_lane_creep_gold() {
  _has_bits_[0] |= 0x00000004u;
}
void CDOTAUserMsg_StatsTeamMinuteDetails::clear_has_available_lane_creep_gold() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDOTAUserMsg_StatsTeamMinuteDetails::clear_available_lane_creep_gold() {
  available_lane_creep_gold_ = 0u;
  clear_has_available_lane_creep_gold();
}
::google::protobuf::uint32 CDOTAUserMsg_StatsTeamMinuteDetails::available_lane_creep_gold() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_StatsTeamMinuteDetails.available_lane_creep_gold)
  return available_lane_creep_gold_;
}
void CDOTAUserMsg_StatsTeamMinuteDetails::set_available_lane_creep_gold(::google::protobuf::uint32 value) {
  set_has_available_lane_creep_gold();
  available_lane_creep_gold_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_StatsTeamMinuteDetails.available_lane_creep_gold)
}

// optional uint32 balance_kill_value = 5;
bool CDOTAUserMsg_StatsTeamMinuteDetails::has_balance_kill_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CDOTAUserMsg_StatsTeamMinuteDetails::set_has_balance_kill_value() {
  _has_bits_[0] |= 0x00000008u;
}
void CDOTAUserMsg_StatsTeamMinuteDetails::clear_has_balance_kill_value() {
  _has_bits_[0] &= ~0x00000008u;
}
void CDOTAUserMsg_StatsTeamMinuteDetails::clear_balance_kill_value() {
  balance_kill_value_ = 0u;
  clear_has_balance_kill_value();
}
::google::protobuf::uint32 CDOTAUserMsg_StatsTeamMinuteDetails::balance_kill_value() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_StatsTeamMinuteDetails.balance_kill_value)
  return balance_kill_value_;
}
void CDOTAUserMsg_StatsTeamMinuteDetails::set_balance_kill_value(::google::protobuf::uint32 value) {
  set_has_balance_kill_value();
  balance_kill_value_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_StatsTeamMinuteDetails.balance_kill_value)
}

// optional uint32 balance_tower_value = 6;
bool CDOTAUserMsg_StatsTeamMinuteDetails::has_balance_tower_value() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CDOTAUserMsg_StatsTeamMinuteDetails::set_has_balance_tower_value() {
  _has_bits_[0] |= 0x00000010u;
}
void CDOTAUserMsg_StatsTeamMinuteDetails::clear_has_balance_tower_value() {
  _has_bits_[0] &= ~0x00000010u;
}
void CDOTAUserMsg_StatsTeamMinuteDetails::clear_balance_tower_value() {
  balance_tower_value_ = 0u;
  clear_has_balance_tower_value();
}
::google::protobuf::uint32 CDOTAUserMsg_StatsTeamMinuteDetails::balance_tower_value() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_StatsTeamMinuteDetails.balance_tower_value)
  return balance_tower_value_;
}
void CDOTAUserMsg_StatsTeamMinuteDetails::set_balance_tower_value(::google::protobuf::uint32 value) {
  set_has_balance_tower_value();
  balance_tower_value_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_StatsTeamMinuteDetails.balance_tower_value)
}

// optional uint32 balance_barracks_value = 7;
bool CDOTAUserMsg_StatsTeamMinuteDetails::has_balance_barracks_value() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CDOTAUserMsg_StatsTeamMinuteDetails::set_has_balance_barracks_value() {
  _has_bits_[0] |= 0x00000020u;
}
void CDOTAUserMsg_StatsTeamMinuteDetails::clear_has_balance_barracks_value() {
  _has_bits_[0] &= ~0x00000020u;
}
void CDOTAUserMsg_StatsTeamMinuteDetails::clear_balance_barracks_value() {
  balance_barracks_value_ = 0u;
  clear_has_balance_barracks_value();
}
::google::protobuf::uint32 CDOTAUserMsg_StatsTeamMinuteDetails::balance_barracks_value() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_StatsTeamMinuteDetails.balance_barracks_value)
  return balance_barracks_value_;
}
void CDOTAUserMsg_StatsTeamMinuteDetails::set_balance_barracks_value(::google::protobuf::uint32 value) {
  set_has_balance_barracks_value();
  balance_barracks_value_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_StatsTeamMinuteDetails.balance_barracks_value)
}

// optional uint32 balance_gold_value = 8;
bool CDOTAUserMsg_StatsTeamMinuteDetails::has_balance_gold_value() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CDOTAUserMsg_StatsTeamMinuteDetails::set_has_balance_gold_value() {
  _has_bits_[0] |= 0x00000040u;
}
void CDOTAUserMsg_StatsTeamMinuteDetails::clear_has_balance_gold_value() {
  _has_bits_[0] &= ~0x00000040u;
}
void CDOTAUserMsg_StatsTeamMinuteDetails::clear_balance_gold_value() {
  balance_gold_value_ = 0u;
  clear_has_balance_gold_value();
}
::google::protobuf::uint32 CDOTAUserMsg_StatsTeamMinuteDetails::balance_gold_value() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_StatsTeamMinuteDetails.balance_gold_value)
  return balance_gold_value_;
}
void CDOTAUserMsg_StatsTeamMinuteDetails::set_balance_gold_value(::google::protobuf::uint32 value) {
  set_has_balance_gold_value();
  balance_gold_value_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_StatsTeamMinuteDetails.balance_gold_value)
}

// optional uint32 balance_xp_value = 9;
bool CDOTAUserMsg_StatsTeamMinuteDetails::has_balance_xp_value() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CDOTAUserMsg_StatsTeamMinuteDetails::set_has_balance_xp_value() {
  _has_bits_[0] |= 0x00000080u;
}
void CDOTAUserMsg_StatsTeamMinuteDetails::clear_has_balance_xp_value() {
  _has_bits_[0] &= ~0x00000080u;
}
void CDOTAUserMsg_StatsTeamMinuteDetails::clear_balance_xp_value() {
  balance_xp_value_ = 0u;
  clear_has_balance_xp_value();
}
::google::protobuf::uint32 CDOTAUserMsg_StatsTeamMinuteDetails::balance_xp_value() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_StatsTeamMinuteDetails.balance_xp_value)
  return balance_xp_value_;
}
void CDOTAUserMsg_StatsTeamMinuteDetails::set_balance_xp_value(::google::protobuf::uint32 value) {
  set_has_balance_xp_value();
  balance_xp_value_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_StatsTeamMinuteDetails.balance_xp_value)
}

// repeated .proto.dota.CDOTAUserMsg_StatsTeamMinuteDetails.LocationPerformance lane_performance = 10;
int CDOTAUserMsg_StatsTeamMinuteDetails::lane_performance_size() const {
  return lane_performance_.size();
}
void CDOTAUserMsg_StatsTeamMinuteDetails::clear_lane_performance() {
  lane_performance_.Clear();
}
const ::proto::dota::CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance& CDOTAUserMsg_StatsTeamMinuteDetails::lane_performance(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_StatsTeamMinuteDetails.lane_performance)
  return lane_performance_.Get(index);
}
::proto::dota::CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance* CDOTAUserMsg_StatsTeamMinuteDetails::mutable_lane_performance(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_StatsTeamMinuteDetails.lane_performance)
  return lane_performance_.Mutable(index);
}
::proto::dota::CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance* CDOTAUserMsg_StatsTeamMinuteDetails::add_lane_performance() {
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAUserMsg_StatsTeamMinuteDetails.lane_performance)
  return lane_performance_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance >*
CDOTAUserMsg_StatsTeamMinuteDetails::mutable_lane_performance() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTAUserMsg_StatsTeamMinuteDetails.lane_performance)
  return &lane_performance_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAUserMsg_StatsTeamMinuteDetails_LocationPerformance >&
CDOTAUserMsg_StatsTeamMinuteDetails::lane_performance() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTAUserMsg_StatsTeamMinuteDetails.lane_performance)
  return lane_performance_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_StatsPlayerKillShare::kPlayerIdFieldNumber;
const int CDOTAUserMsg_StatsPlayerKillShare::kKillSharePercentFieldNumber;
const int CDOTAUserMsg_StatsPlayerKillShare::kPlayerLocXFieldNumber;
const int CDOTAUserMsg_StatsPlayerKillShare::kPlayerLocYFieldNumber;
const int CDOTAUserMsg_StatsPlayerKillShare::kHealthPercentFieldNumber;
const int CDOTAUserMsg_StatsPlayerKillShare::kManaPercentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_StatsPlayerKillShare::CDOTAUserMsg_StatsPlayerKillShare()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_StatsPlayerKillShare)
}
CDOTAUserMsg_StatsPlayerKillShare::CDOTAUserMsg_StatsPlayerKillShare(const CDOTAUserMsg_StatsPlayerKillShare& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&player_id_, &from.player_id_,
    reinterpret_cast<char*>(&mana_percent_) -
    reinterpret_cast<char*>(&player_id_) + sizeof(mana_percent_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_StatsPlayerKillShare)
}

void CDOTAUserMsg_StatsPlayerKillShare::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&player_id_, 0, reinterpret_cast<char*>(&mana_percent_) -
    reinterpret_cast<char*>(&player_id_) + sizeof(mana_percent_));
}

CDOTAUserMsg_StatsPlayerKillShare::~CDOTAUserMsg_StatsPlayerKillShare() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_StatsPlayerKillShare)
  SharedDtor();
}

void CDOTAUserMsg_StatsPlayerKillShare::SharedDtor() {
}

void CDOTAUserMsg_StatsPlayerKillShare::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_StatsPlayerKillShare::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_StatsPlayerKillShare& CDOTAUserMsg_StatsPlayerKillShare::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_StatsPlayerKillShare* CDOTAUserMsg_StatsPlayerKillShare::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_StatsPlayerKillShare* n = new CDOTAUserMsg_StatsPlayerKillShare;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_StatsPlayerKillShare::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_StatsPlayerKillShare)
  if (_has_bits_[0 / 32] & 63u) {
    ::memset(&player_id_, 0, reinterpret_cast<char*>(&mana_percent_) -
      reinterpret_cast<char*>(&player_id_) + sizeof(mana_percent_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_StatsPlayerKillShare::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_StatsPlayerKillShare)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_player_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float kill_share_percent = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_kill_share_percent();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &kill_share_percent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float player_loc_x = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_player_loc_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &player_loc_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float player_loc_y = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_player_loc_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &player_loc_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float health_percent = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {
          set_has_health_percent();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &health_percent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float mana_percent = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u)) {
          set_has_mana_percent();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mana_percent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_StatsPlayerKillShare)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_StatsPlayerKillShare)
  return false;
#undef DO_
}

void CDOTAUserMsg_StatsPlayerKillShare::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_StatsPlayerKillShare)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player_id(), output);
  }

  // optional float kill_share_percent = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->kill_share_percent(), output);
  }

  // optional float player_loc_x = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->player_loc_x(), output);
  }

  // optional float player_loc_y = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->player_loc_y(), output);
  }

  // optional float health_percent = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->health_percent(), output);
  }

  // optional float mana_percent = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->mana_percent(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_StatsPlayerKillShare)
}

::google::protobuf::uint8* CDOTAUserMsg_StatsPlayerKillShare::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_StatsPlayerKillShare)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player_id(), target);
  }

  // optional float kill_share_percent = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->kill_share_percent(), target);
  }

  // optional float player_loc_x = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->player_loc_x(), target);
  }

  // optional float player_loc_y = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->player_loc_y(), target);
  }

  // optional float health_percent = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->health_percent(), target);
  }

  // optional float mana_percent = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->mana_percent(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_StatsPlayerKillShare)
  return target;
}

size_t CDOTAUserMsg_StatsPlayerKillShare::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_StatsPlayerKillShare)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional int32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // optional float kill_share_percent = 2;
    if (has_kill_share_percent()) {
      total_size += 1 + 4;
    }

    // optional float player_loc_x = 3;
    if (has_player_loc_x()) {
      total_size += 1 + 4;
    }

    // optional float player_loc_y = 4;
    if (has_player_loc_y()) {
      total_size += 1 + 4;
    }

    // optional float health_percent = 5;
    if (has_health_percent()) {
      total_size += 1 + 4;
    }

    // optional float mana_percent = 6;
    if (has_mana_percent()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_StatsPlayerKillShare::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_StatsPlayerKillShare)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_StatsPlayerKillShare* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_StatsPlayerKillShare>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_StatsPlayerKillShare)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_StatsPlayerKillShare)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_StatsPlayerKillShare::MergeFrom(const CDOTAUserMsg_StatsPlayerKillShare& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_StatsPlayerKillShare)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      player_id_ = from.player_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      kill_share_percent_ = from.kill_share_percent_;
    }
    if (cached_has_bits & 0x00000004u) {
      player_loc_x_ = from.player_loc_x_;
    }
    if (cached_has_bits & 0x00000008u) {
      player_loc_y_ = from.player_loc_y_;
    }
    if (cached_has_bits & 0x00000010u) {
      health_percent_ = from.health_percent_;
    }
    if (cached_has_bits & 0x00000020u) {
      mana_percent_ = from.mana_percent_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_StatsPlayerKillShare::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_StatsPlayerKillShare)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_StatsPlayerKillShare::CopyFrom(const CDOTAUserMsg_StatsPlayerKillShare& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_StatsPlayerKillShare)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_StatsPlayerKillShare::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_StatsPlayerKillShare::Swap(CDOTAUserMsg_StatsPlayerKillShare* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_StatsPlayerKillShare::InternalSwap(CDOTAUserMsg_StatsPlayerKillShare* other) {
  std::swap(player_id_, other->player_id_);
  std::swap(kill_share_percent_, other->kill_share_percent_);
  std::swap(player_loc_x_, other->player_loc_x_);
  std::swap(player_loc_y_, other->player_loc_y_);
  std::swap(health_percent_, other->health_percent_);
  std::swap(mana_percent_, other->mana_percent_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_StatsPlayerKillShare::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_StatsPlayerKillShare

// optional int32 player_id = 1;
bool CDOTAUserMsg_StatsPlayerKillShare::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_StatsPlayerKillShare::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_StatsPlayerKillShare::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_StatsPlayerKillShare::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
::google::protobuf::int32 CDOTAUserMsg_StatsPlayerKillShare::player_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_StatsPlayerKillShare.player_id)
  return player_id_;
}
void CDOTAUserMsg_StatsPlayerKillShare::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_StatsPlayerKillShare.player_id)
}

// optional float kill_share_percent = 2;
bool CDOTAUserMsg_StatsPlayerKillShare::has_kill_share_percent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAUserMsg_StatsPlayerKillShare::set_has_kill_share_percent() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAUserMsg_StatsPlayerKillShare::clear_has_kill_share_percent() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAUserMsg_StatsPlayerKillShare::clear_kill_share_percent() {
  kill_share_percent_ = 0;
  clear_has_kill_share_percent();
}
float CDOTAUserMsg_StatsPlayerKillShare::kill_share_percent() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_StatsPlayerKillShare.kill_share_percent)
  return kill_share_percent_;
}
void CDOTAUserMsg_StatsPlayerKillShare::set_kill_share_percent(float value) {
  set_has_kill_share_percent();
  kill_share_percent_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_StatsPlayerKillShare.kill_share_percent)
}

// optional float player_loc_x = 3;
bool CDOTAUserMsg_StatsPlayerKillShare::has_player_loc_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDOTAUserMsg_StatsPlayerKillShare::set_has_player_loc_x() {
  _has_bits_[0] |= 0x00000004u;
}
void CDOTAUserMsg_StatsPlayerKillShare::clear_has_player_loc_x() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDOTAUserMsg_StatsPlayerKillShare::clear_player_loc_x() {
  player_loc_x_ = 0;
  clear_has_player_loc_x();
}
float CDOTAUserMsg_StatsPlayerKillShare::player_loc_x() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_StatsPlayerKillShare.player_loc_x)
  return player_loc_x_;
}
void CDOTAUserMsg_StatsPlayerKillShare::set_player_loc_x(float value) {
  set_has_player_loc_x();
  player_loc_x_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_StatsPlayerKillShare.player_loc_x)
}

// optional float player_loc_y = 4;
bool CDOTAUserMsg_StatsPlayerKillShare::has_player_loc_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CDOTAUserMsg_StatsPlayerKillShare::set_has_player_loc_y() {
  _has_bits_[0] |= 0x00000008u;
}
void CDOTAUserMsg_StatsPlayerKillShare::clear_has_player_loc_y() {
  _has_bits_[0] &= ~0x00000008u;
}
void CDOTAUserMsg_StatsPlayerKillShare::clear_player_loc_y() {
  player_loc_y_ = 0;
  clear_has_player_loc_y();
}
float CDOTAUserMsg_StatsPlayerKillShare::player_loc_y() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_StatsPlayerKillShare.player_loc_y)
  return player_loc_y_;
}
void CDOTAUserMsg_StatsPlayerKillShare::set_player_loc_y(float value) {
  set_has_player_loc_y();
  player_loc_y_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_StatsPlayerKillShare.player_loc_y)
}

// optional float health_percent = 5;
bool CDOTAUserMsg_StatsPlayerKillShare::has_health_percent() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CDOTAUserMsg_StatsPlayerKillShare::set_has_health_percent() {
  _has_bits_[0] |= 0x00000010u;
}
void CDOTAUserMsg_StatsPlayerKillShare::clear_has_health_percent() {
  _has_bits_[0] &= ~0x00000010u;
}
void CDOTAUserMsg_StatsPlayerKillShare::clear_health_percent() {
  health_percent_ = 0;
  clear_has_health_percent();
}
float CDOTAUserMsg_StatsPlayerKillShare::health_percent() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_StatsPlayerKillShare.health_percent)
  return health_percent_;
}
void CDOTAUserMsg_StatsPlayerKillShare::set_health_percent(float value) {
  set_has_health_percent();
  health_percent_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_StatsPlayerKillShare.health_percent)
}

// optional float mana_percent = 6;
bool CDOTAUserMsg_StatsPlayerKillShare::has_mana_percent() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CDOTAUserMsg_StatsPlayerKillShare::set_has_mana_percent() {
  _has_bits_[0] |= 0x00000020u;
}
void CDOTAUserMsg_StatsPlayerKillShare::clear_has_mana_percent() {
  _has_bits_[0] &= ~0x00000020u;
}
void CDOTAUserMsg_StatsPlayerKillShare::clear_mana_percent() {
  mana_percent_ = 0;
  clear_has_mana_percent();
}
float CDOTAUserMsg_StatsPlayerKillShare::mana_percent() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_StatsPlayerKillShare.mana_percent)
  return mana_percent_;
}
void CDOTAUserMsg_StatsPlayerKillShare::set_mana_percent(float value) {
  set_has_mana_percent();
  mana_percent_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_StatsPlayerKillShare.mana_percent)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_StatsKillDetails::kVictimIdFieldNumber;
const int CDOTAUserMsg_StatsKillDetails::kKillSharesFieldNumber;
const int CDOTAUserMsg_StatsKillDetails::kDamageToKillFieldNumber;
const int CDOTAUserMsg_StatsKillDetails::kEffectiveHealthFieldNumber;
const int CDOTAUserMsg_StatsKillDetails::kDeathTimeFieldNumber;
const int CDOTAUserMsg_StatsKillDetails::kKillerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_StatsKillDetails::CDOTAUserMsg_StatsKillDetails()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_StatsKillDetails)
}
CDOTAUserMsg_StatsKillDetails::CDOTAUserMsg_StatsKillDetails(const CDOTAUserMsg_StatsKillDetails& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      kill_shares_(from.kill_shares_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&victim_id_, &from.victim_id_,
    reinterpret_cast<char*>(&killer_id_) -
    reinterpret_cast<char*>(&victim_id_) + sizeof(killer_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_StatsKillDetails)
}

void CDOTAUserMsg_StatsKillDetails::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&victim_id_, 0, reinterpret_cast<char*>(&killer_id_) -
    reinterpret_cast<char*>(&victim_id_) + sizeof(killer_id_));
}

CDOTAUserMsg_StatsKillDetails::~CDOTAUserMsg_StatsKillDetails() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_StatsKillDetails)
  SharedDtor();
}

void CDOTAUserMsg_StatsKillDetails::SharedDtor() {
}

void CDOTAUserMsg_StatsKillDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_StatsKillDetails::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_StatsKillDetails& CDOTAUserMsg_StatsKillDetails::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_StatsKillDetails* CDOTAUserMsg_StatsKillDetails::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_StatsKillDetails* n = new CDOTAUserMsg_StatsKillDetails;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_StatsKillDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_StatsKillDetails)
  kill_shares_.Clear();
  if (_has_bits_[0 / 32] & 31u) {
    ::memset(&victim_id_, 0, reinterpret_cast<char*>(&killer_id_) -
      reinterpret_cast<char*>(&victim_id_) + sizeof(killer_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_StatsKillDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_StatsKillDetails)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 victim_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_victim_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &victim_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CDOTAUserMsg_StatsPlayerKillShare kill_shares = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_kill_shares()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 damage_to_kill = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_damage_to_kill();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &damage_to_kill_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 effective_health = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_effective_health();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &effective_health_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float death_time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {
          set_has_death_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &death_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 killer_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_killer_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killer_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_StatsKillDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_StatsKillDetails)
  return false;
#undef DO_
}

void CDOTAUserMsg_StatsKillDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_StatsKillDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 victim_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->victim_id(), output);
  }

  // repeated .proto.dota.CDOTAUserMsg_StatsPlayerKillShare kill_shares = 2;
  for (unsigned int i = 0, n = this->kill_shares_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->kill_shares(i), output);
  }

  // optional uint32 damage_to_kill = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->damage_to_kill(), output);
  }

  // optional uint32 effective_health = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->effective_health(), output);
  }

  // optional float death_time = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->death_time(), output);
  }

  // optional uint32 killer_id = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->killer_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_StatsKillDetails)
}

::google::protobuf::uint8* CDOTAUserMsg_StatsKillDetails::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_StatsKillDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 victim_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->victim_id(), target);
  }

  // repeated .proto.dota.CDOTAUserMsg_StatsPlayerKillShare kill_shares = 2;
  for (unsigned int i = 0, n = this->kill_shares_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->kill_shares(i), deterministic, target);
  }

  // optional uint32 damage_to_kill = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->damage_to_kill(), target);
  }

  // optional uint32 effective_health = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->effective_health(), target);
  }

  // optional float death_time = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->death_time(), target);
  }

  // optional uint32 killer_id = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->killer_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_StatsKillDetails)
  return target;
}

size_t CDOTAUserMsg_StatsKillDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_StatsKillDetails)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CDOTAUserMsg_StatsPlayerKillShare kill_shares = 2;
  {
    unsigned int count = this->kill_shares_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->kill_shares(i));
    }
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional uint32 victim_id = 1;
    if (has_victim_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->victim_id());
    }

    // optional uint32 damage_to_kill = 3;
    if (has_damage_to_kill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->damage_to_kill());
    }

    // optional uint32 effective_health = 4;
    if (has_effective_health()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->effective_health());
    }

    // optional float death_time = 5;
    if (has_death_time()) {
      total_size += 1 + 4;
    }

    // optional uint32 killer_id = 6;
    if (has_killer_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killer_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_StatsKillDetails::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_StatsKillDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_StatsKillDetails* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_StatsKillDetails>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_StatsKillDetails)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_StatsKillDetails)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_StatsKillDetails::MergeFrom(const CDOTAUserMsg_StatsKillDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_StatsKillDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  kill_shares_.MergeFrom(from.kill_shares_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      victim_id_ = from.victim_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      damage_to_kill_ = from.damage_to_kill_;
    }
    if (cached_has_bits & 0x00000004u) {
      effective_health_ = from.effective_health_;
    }
    if (cached_has_bits & 0x00000008u) {
      death_time_ = from.death_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      killer_id_ = from.killer_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_StatsKillDetails::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_StatsKillDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_StatsKillDetails::CopyFrom(const CDOTAUserMsg_StatsKillDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_StatsKillDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_StatsKillDetails::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_StatsKillDetails::Swap(CDOTAUserMsg_StatsKillDetails* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_StatsKillDetails::InternalSwap(CDOTAUserMsg_StatsKillDetails* other) {
  kill_shares_.InternalSwap(&other->kill_shares_);
  std::swap(victim_id_, other->victim_id_);
  std::swap(damage_to_kill_, other->damage_to_kill_);
  std::swap(effective_health_, other->effective_health_);
  std::swap(death_time_, other->death_time_);
  std::swap(killer_id_, other->killer_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_StatsKillDetails::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_StatsKillDetails

// optional uint32 victim_id = 1;
bool CDOTAUserMsg_StatsKillDetails::has_victim_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_StatsKillDetails::set_has_victim_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_StatsKillDetails::clear_has_victim_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_StatsKillDetails::clear_victim_id() {
  victim_id_ = 0u;
  clear_has_victim_id();
}
::google::protobuf::uint32 CDOTAUserMsg_StatsKillDetails::victim_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_StatsKillDetails.victim_id)
  return victim_id_;
}
void CDOTAUserMsg_StatsKillDetails::set_victim_id(::google::protobuf::uint32 value) {
  set_has_victim_id();
  victim_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_StatsKillDetails.victim_id)
}

// repeated .proto.dota.CDOTAUserMsg_StatsPlayerKillShare kill_shares = 2;
int CDOTAUserMsg_StatsKillDetails::kill_shares_size() const {
  return kill_shares_.size();
}
void CDOTAUserMsg_StatsKillDetails::clear_kill_shares() {
  kill_shares_.Clear();
}
const ::proto::dota::CDOTAUserMsg_StatsPlayerKillShare& CDOTAUserMsg_StatsKillDetails::kill_shares(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_StatsKillDetails.kill_shares)
  return kill_shares_.Get(index);
}
::proto::dota::CDOTAUserMsg_StatsPlayerKillShare* CDOTAUserMsg_StatsKillDetails::mutable_kill_shares(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_StatsKillDetails.kill_shares)
  return kill_shares_.Mutable(index);
}
::proto::dota::CDOTAUserMsg_StatsPlayerKillShare* CDOTAUserMsg_StatsKillDetails::add_kill_shares() {
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAUserMsg_StatsKillDetails.kill_shares)
  return kill_shares_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAUserMsg_StatsPlayerKillShare >*
CDOTAUserMsg_StatsKillDetails::mutable_kill_shares() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTAUserMsg_StatsKillDetails.kill_shares)
  return &kill_shares_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAUserMsg_StatsPlayerKillShare >&
CDOTAUserMsg_StatsKillDetails::kill_shares() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTAUserMsg_StatsKillDetails.kill_shares)
  return kill_shares_;
}

// optional uint32 damage_to_kill = 3;
bool CDOTAUserMsg_StatsKillDetails::has_damage_to_kill() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAUserMsg_StatsKillDetails::set_has_damage_to_kill() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAUserMsg_StatsKillDetails::clear_has_damage_to_kill() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAUserMsg_StatsKillDetails::clear_damage_to_kill() {
  damage_to_kill_ = 0u;
  clear_has_damage_to_kill();
}
::google::protobuf::uint32 CDOTAUserMsg_StatsKillDetails::damage_to_kill() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_StatsKillDetails.damage_to_kill)
  return damage_to_kill_;
}
void CDOTAUserMsg_StatsKillDetails::set_damage_to_kill(::google::protobuf::uint32 value) {
  set_has_damage_to_kill();
  damage_to_kill_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_StatsKillDetails.damage_to_kill)
}

// optional uint32 effective_health = 4;
bool CDOTAUserMsg_StatsKillDetails::has_effective_health() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDOTAUserMsg_StatsKillDetails::set_has_effective_health() {
  _has_bits_[0] |= 0x00000004u;
}
void CDOTAUserMsg_StatsKillDetails::clear_has_effective_health() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDOTAUserMsg_StatsKillDetails::clear_effective_health() {
  effective_health_ = 0u;
  clear_has_effective_health();
}
::google::protobuf::uint32 CDOTAUserMsg_StatsKillDetails::effective_health() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_StatsKillDetails.effective_health)
  return effective_health_;
}
void CDOTAUserMsg_StatsKillDetails::set_effective_health(::google::protobuf::uint32 value) {
  set_has_effective_health();
  effective_health_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_StatsKillDetails.effective_health)
}

// optional float death_time = 5;
bool CDOTAUserMsg_StatsKillDetails::has_death_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CDOTAUserMsg_StatsKillDetails::set_has_death_time() {
  _has_bits_[0] |= 0x00000008u;
}
void CDOTAUserMsg_StatsKillDetails::clear_has_death_time() {
  _has_bits_[0] &= ~0x00000008u;
}
void CDOTAUserMsg_StatsKillDetails::clear_death_time() {
  death_time_ = 0;
  clear_has_death_time();
}
float CDOTAUserMsg_StatsKillDetails::death_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_StatsKillDetails.death_time)
  return death_time_;
}
void CDOTAUserMsg_StatsKillDetails::set_death_time(float value) {
  set_has_death_time();
  death_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_StatsKillDetails.death_time)
}

// optional uint32 killer_id = 6;
bool CDOTAUserMsg_StatsKillDetails::has_killer_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CDOTAUserMsg_StatsKillDetails::set_has_killer_id() {
  _has_bits_[0] |= 0x00000010u;
}
void CDOTAUserMsg_StatsKillDetails::clear_has_killer_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void CDOTAUserMsg_StatsKillDetails::clear_killer_id() {
  killer_id_ = 0u;
  clear_has_killer_id();
}
::google::protobuf::uint32 CDOTAUserMsg_StatsKillDetails::killer_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_StatsKillDetails.killer_id)
  return killer_id_;
}
void CDOTAUserMsg_StatsKillDetails::set_killer_id(::google::protobuf::uint32 value) {
  set_has_killer_id();
  killer_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_StatsKillDetails.killer_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::kParticipantsFieldNumber;
const int CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::kDeathsFieldNumber;
const int CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::kGoldDeltaFieldNumber;
const int CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::kXpDeltaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightTeamDetails)
}
CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails(const CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      participants_(from.participants_),
      deaths_(from.deaths_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&gold_delta_, &from.gold_delta_,
    reinterpret_cast<char*>(&xp_delta_) -
    reinterpret_cast<char*>(&gold_delta_) + sizeof(xp_delta_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightTeamDetails)
}

void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&gold_delta_, 0, reinterpret_cast<char*>(&xp_delta_) -
    reinterpret_cast<char*>(&gold_delta_) + sizeof(xp_delta_));
}

CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::~CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightTeamDetails)
  SharedDtor();
}

void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::SharedDtor() {
}

void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails& CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails* CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails* n = new CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightTeamDetails)
  participants_.Clear();
  deaths_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&gold_delta_, 0, reinterpret_cast<char*>(&xp_delta_) -
      reinterpret_cast<char*>(&gold_delta_) + sizeof(xp_delta_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightTeamDetails)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 participants = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_participants())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_participants())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 deaths = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_deaths())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_deaths())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 gold_delta = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_gold_delta();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gold_delta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 xp_delta = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_xp_delta();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &xp_delta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightTeamDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightTeamDetails)
  return false;
#undef DO_
}

void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightTeamDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 participants = 1;
  for (int i = 0, n = this->participants_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->participants(i), output);
  }

  // repeated uint32 deaths = 2;
  for (int i = 0, n = this->deaths_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->deaths(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 gold_delta = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->gold_delta(), output);
  }

  // optional uint32 xp_delta = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->xp_delta(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightTeamDetails)
}

::google::protobuf::uint8* CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightTeamDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 participants = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->participants_, target);

  // repeated uint32 deaths = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(2, this->deaths_, target);

  cached_has_bits = _has_bits_[0];
  // optional uint32 gold_delta = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->gold_delta(), target);
  }

  // optional uint32 xp_delta = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->xp_delta(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightTeamDetails)
  return target;
}

size_t CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightTeamDetails)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 participants = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->participants_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->participants_size());
    total_size += data_size;
  }

  // repeated uint32 deaths = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->deaths_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->deaths_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 gold_delta = 3;
    if (has_gold_delta()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gold_delta());
    }

    // optional uint32 xp_delta = 4;
    if (has_xp_delta()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->xp_delta());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightTeamDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightTeamDetails)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightTeamDetails)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::MergeFrom(const CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightTeamDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  participants_.MergeFrom(from.participants_);
  deaths_.MergeFrom(from.deaths_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      gold_delta_ = from.gold_delta_;
    }
    if (cached_has_bits & 0x00000002u) {
      xp_delta_ = from.xp_delta_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightTeamDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::CopyFrom(const CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightTeamDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::Swap(CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::InternalSwap(CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails* other) {
  participants_.InternalSwap(&other->participants_);
  deaths_.InternalSwap(&other->deaths_);
  std::swap(gold_delta_, other->gold_delta_);
  std::swap(xp_delta_, other->xp_delta_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails

// repeated uint32 participants = 1;
int CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::participants_size() const {
  return participants_.size();
}
void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::clear_participants() {
  participants_.Clear();
}
::google::protobuf::uint32 CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::participants(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightTeamDetails.participants)
  return participants_.Get(index);
}
void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::set_participants(int index, ::google::protobuf::uint32 value) {
  participants_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightTeamDetails.participants)
}
void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::add_participants(::google::protobuf::uint32 value) {
  participants_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightTeamDetails.participants)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::participants() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightTeamDetails.participants)
  return participants_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::mutable_participants() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightTeamDetails.participants)
  return &participants_;
}

// repeated uint32 deaths = 2;
int CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::deaths_size() const {
  return deaths_.size();
}
void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::clear_deaths() {
  deaths_.Clear();
}
::google::protobuf::uint32 CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::deaths(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightTeamDetails.deaths)
  return deaths_.Get(index);
}
void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::set_deaths(int index, ::google::protobuf::uint32 value) {
  deaths_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightTeamDetails.deaths)
}
void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::add_deaths(::google::protobuf::uint32 value) {
  deaths_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightTeamDetails.deaths)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::deaths() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightTeamDetails.deaths)
  return deaths_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::mutable_deaths() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightTeamDetails.deaths)
  return &deaths_;
}

// optional uint32 gold_delta = 3;
bool CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::has_gold_delta() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::set_has_gold_delta() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::clear_has_gold_delta() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::clear_gold_delta() {
  gold_delta_ = 0u;
  clear_has_gold_delta();
}
::google::protobuf::uint32 CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::gold_delta() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightTeamDetails.gold_delta)
  return gold_delta_;
}
void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::set_gold_delta(::google::protobuf::uint32 value) {
  set_has_gold_delta();
  gold_delta_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightTeamDetails.gold_delta)
}

// optional uint32 xp_delta = 4;
bool CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::has_xp_delta() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::set_has_xp_delta() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::clear_has_xp_delta() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::clear_xp_delta() {
  xp_delta_ = 0u;
  clear_has_xp_delta();
}
::google::protobuf::uint32 CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::xp_delta() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightTeamDetails.xp_delta)
  return xp_delta_;
}
void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::set_xp_delta(::google::protobuf::uint32 value) {
  set_has_xp_delta();
  xp_delta_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightTeamDetails.xp_delta)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::kStartTimeFieldNumber;
const int CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::kEndTimeFieldNumber;
const int CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::kRadiantFightDetailsFieldNumber;
const int CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::kDireFightDetailsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightDetails)
}
CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails(const CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_radiant_fight_details()) {
    radiant_fight_details_ = new ::proto::dota::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails(*from.radiant_fight_details_);
  } else {
    radiant_fight_details_ = NULL;
  }
  if (from.has_dire_fight_details()) {
    dire_fight_details_ = new ::proto::dota::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails(*from.dire_fight_details_);
  } else {
    dire_fight_details_ = NULL;
  }
  ::memcpy(&start_time_, &from.start_time_,
    reinterpret_cast<char*>(&end_time_) -
    reinterpret_cast<char*>(&start_time_) + sizeof(end_time_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightDetails)
}

void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&radiant_fight_details_, 0, reinterpret_cast<char*>(&end_time_) -
    reinterpret_cast<char*>(&radiant_fight_details_) + sizeof(end_time_));
}

CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::~CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightDetails)
  SharedDtor();
}

void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::SharedDtor() {
  if (this != internal_default_instance()) {
    delete radiant_fight_details_;
  }
  if (this != internal_default_instance()) {
    delete dire_fight_details_;
  }
}

void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails& CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails* CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails* n = new CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightDetails)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_radiant_fight_details()) {
      GOOGLE_DCHECK(radiant_fight_details_ != NULL);
      radiant_fight_details_->::proto::dota::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::Clear();
    }
    if (has_dire_fight_details()) {
      GOOGLE_DCHECK(dire_fight_details_ != NULL);
      dire_fight_details_->::proto::dota::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&start_time_, 0, reinterpret_cast<char*>(&end_time_) -
      reinterpret_cast<char*>(&start_time_) + sizeof(end_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightDetails)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float start_time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {
          set_has_start_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &start_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float end_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_end_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &end_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightTeamDetails radiant_fight_details = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_radiant_fight_details()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightTeamDetails dire_fight_details = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dire_fight_details()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightDetails)
  return false;
#undef DO_
}

void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float start_time = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->start_time(), output);
  }

  // optional float end_time = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->end_time(), output);
  }

  // optional .proto.dota.CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightTeamDetails radiant_fight_details = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->radiant_fight_details_, output);
  }

  // optional .proto.dota.CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightTeamDetails dire_fight_details = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->dire_fight_details_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightDetails)
}

::google::protobuf::uint8* CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float start_time = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->start_time(), target);
  }

  // optional float end_time = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->end_time(), target);
  }

  // optional .proto.dota.CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightTeamDetails radiant_fight_details = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->radiant_fight_details_, deterministic, target);
  }

  // optional .proto.dota.CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightTeamDetails dire_fight_details = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->dire_fight_details_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightDetails)
  return target;
}

size_t CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightDetails)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional .proto.dota.CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightTeamDetails radiant_fight_details = 3;
    if (has_radiant_fight_details()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->radiant_fight_details_);
    }

    // optional .proto.dota.CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightTeamDetails dire_fight_details = 4;
    if (has_dire_fight_details()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->dire_fight_details_);
    }

    // optional float start_time = 1;
    if (has_start_time()) {
      total_size += 1 + 4;
    }

    // optional float end_time = 2;
    if (has_end_time()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightDetails)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightDetails)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::MergeFrom(const CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_radiant_fight_details()->::proto::dota::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::MergeFrom(from.radiant_fight_details());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_dire_fight_details()->::proto::dota::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::MergeFrom(from.dire_fight_details());
    }
    if (cached_has_bits & 0x00000004u) {
      start_time_ = from.start_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      end_time_ = from.end_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::CopyFrom(const CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::Swap(CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::InternalSwap(CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails* other) {
  std::swap(radiant_fight_details_, other->radiant_fight_details_);
  std::swap(dire_fight_details_, other->dire_fight_details_);
  std::swap(start_time_, other->start_time_);
  std::swap(end_time_, other->end_time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails

// optional float start_time = 1;
bool CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::has_start_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::set_has_start_time() {
  _has_bits_[0] |= 0x00000004u;
}
void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::clear_start_time() {
  start_time_ = 0;
  clear_has_start_time();
}
float CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::start_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightDetails.start_time)
  return start_time_;
}
void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::set_start_time(float value) {
  set_has_start_time();
  start_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightDetails.start_time)
}

// optional float end_time = 2;
bool CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::has_end_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::set_has_end_time() {
  _has_bits_[0] |= 0x00000008u;
}
void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000008u;
}
void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::clear_end_time() {
  end_time_ = 0;
  clear_has_end_time();
}
float CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::end_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightDetails.end_time)
  return end_time_;
}
void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::set_end_time(float value) {
  set_has_end_time();
  end_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightDetails.end_time)
}

// optional .proto.dota.CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightTeamDetails radiant_fight_details = 3;
bool CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::has_radiant_fight_details() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::set_has_radiant_fight_details() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::clear_has_radiant_fight_details() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::clear_radiant_fight_details() {
  if (radiant_fight_details_ != NULL) radiant_fight_details_->::proto::dota::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::Clear();
  clear_has_radiant_fight_details();
}
const ::proto::dota::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails& CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::radiant_fight_details() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightDetails.radiant_fight_details)
  return radiant_fight_details_ != NULL ? *radiant_fight_details_
                         : *::proto::dota::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::internal_default_instance();
}
::proto::dota::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails* CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::mutable_radiant_fight_details() {
  set_has_radiant_fight_details();
  if (radiant_fight_details_ == NULL) {
    radiant_fight_details_ = new ::proto::dota::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightDetails.radiant_fight_details)
  return radiant_fight_details_;
}
::proto::dota::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails* CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::release_radiant_fight_details() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightDetails.radiant_fight_details)
  clear_has_radiant_fight_details();
  ::proto::dota::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails* temp = radiant_fight_details_;
  radiant_fight_details_ = NULL;
  return temp;
}
void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::set_allocated_radiant_fight_details(::proto::dota::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails* radiant_fight_details) {
  delete radiant_fight_details_;
  radiant_fight_details_ = radiant_fight_details;
  if (radiant_fight_details) {
    set_has_radiant_fight_details();
  } else {
    clear_has_radiant_fight_details();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightDetails.radiant_fight_details)
}

// optional .proto.dota.CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightTeamDetails dire_fight_details = 4;
bool CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::has_dire_fight_details() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::set_has_dire_fight_details() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::clear_has_dire_fight_details() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::clear_dire_fight_details() {
  if (dire_fight_details_ != NULL) dire_fight_details_->::proto::dota::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::Clear();
  clear_has_dire_fight_details();
}
const ::proto::dota::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails& CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::dire_fight_details() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightDetails.dire_fight_details)
  return dire_fight_details_ != NULL ? *dire_fight_details_
                         : *::proto::dota::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails::internal_default_instance();
}
::proto::dota::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails* CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::mutable_dire_fight_details() {
  set_has_dire_fight_details();
  if (dire_fight_details_ == NULL) {
    dire_fight_details_ = new ::proto::dota::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightDetails.dire_fight_details)
  return dire_fight_details_;
}
::proto::dota::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails* CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::release_dire_fight_details() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightDetails.dire_fight_details)
  clear_has_dire_fight_details();
  ::proto::dota::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails* temp = dire_fight_details_;
  dire_fight_details_ = NULL;
  return temp;
}
void CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails::set_allocated_dire_fight_details(::proto::dota::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightTeamDetails* dire_fight_details) {
  delete dire_fight_details_;
  dire_fight_details_ = dire_fight_details;
  if (dire_fight_details) {
    set_has_dire_fight_details();
  } else {
    clear_has_dire_fight_details();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightDetails.dire_fight_details)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_StatsMatchDetails::kHeroLookupFieldNumber;
const int CDOTAUserMsg_StatsMatchDetails::kRadiantStatsFieldNumber;
const int CDOTAUserMsg_StatsMatchDetails::kDireStatsFieldNumber;
const int CDOTAUserMsg_StatsMatchDetails::kRadiantKillsFieldNumber;
const int CDOTAUserMsg_StatsMatchDetails::kDireKillsFieldNumber;
const int CDOTAUserMsg_StatsMatchDetails::kFightDetailsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_StatsMatchDetails::CDOTAUserMsg_StatsMatchDetails()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_StatsMatchDetails)
}
CDOTAUserMsg_StatsMatchDetails::CDOTAUserMsg_StatsMatchDetails(const CDOTAUserMsg_StatsMatchDetails& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      hero_lookup_(from.hero_lookup_),
      radiant_stats_(from.radiant_stats_),
      dire_stats_(from.dire_stats_),
      radiant_kills_(from.radiant_kills_),
      dire_kills_(from.dire_kills_),
      fight_details_(from.fight_details_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_StatsMatchDetails)
}

void CDOTAUserMsg_StatsMatchDetails::SharedCtor() {
  _cached_size_ = 0;
}

CDOTAUserMsg_StatsMatchDetails::~CDOTAUserMsg_StatsMatchDetails() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_StatsMatchDetails)
  SharedDtor();
}

void CDOTAUserMsg_StatsMatchDetails::SharedDtor() {
}

void CDOTAUserMsg_StatsMatchDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_StatsMatchDetails::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_StatsMatchDetails& CDOTAUserMsg_StatsMatchDetails::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_StatsMatchDetails* CDOTAUserMsg_StatsMatchDetails::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_StatsMatchDetails* n = new CDOTAUserMsg_StatsMatchDetails;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_StatsMatchDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_StatsMatchDetails)
  hero_lookup_.Clear();
  radiant_stats_.Clear();
  dire_stats_.Clear();
  radiant_kills_.Clear();
  dire_kills_.Clear();
  fight_details_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_StatsMatchDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_StatsMatchDetails)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CDOTAUserMsg_StatsHeroLookup hero_lookup = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hero_lookup()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CDOTAUserMsg_StatsTeamMinuteDetails radiant_stats = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_radiant_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CDOTAUserMsg_StatsTeamMinuteDetails dire_stats = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dire_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CDOTAUserMsg_StatsKillDetails radiant_kills = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_radiant_kills()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CDOTAUserMsg_StatsKillDetails dire_kills = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dire_kills()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightDetails fight_details = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fight_details()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_StatsMatchDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_StatsMatchDetails)
  return false;
#undef DO_
}

void CDOTAUserMsg_StatsMatchDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_StatsMatchDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CDOTAUserMsg_StatsHeroLookup hero_lookup = 1;
  for (unsigned int i = 0, n = this->hero_lookup_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->hero_lookup(i), output);
  }

  // repeated .proto.dota.CDOTAUserMsg_StatsTeamMinuteDetails radiant_stats = 2;
  for (unsigned int i = 0, n = this->radiant_stats_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->radiant_stats(i), output);
  }

  // repeated .proto.dota.CDOTAUserMsg_StatsTeamMinuteDetails dire_stats = 3;
  for (unsigned int i = 0, n = this->dire_stats_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->dire_stats(i), output);
  }

  // repeated .proto.dota.CDOTAUserMsg_StatsKillDetails radiant_kills = 4;
  for (unsigned int i = 0, n = this->radiant_kills_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->radiant_kills(i), output);
  }

  // repeated .proto.dota.CDOTAUserMsg_StatsKillDetails dire_kills = 5;
  for (unsigned int i = 0, n = this->dire_kills_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->dire_kills(i), output);
  }

  // repeated .proto.dota.CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightDetails fight_details = 6;
  for (unsigned int i = 0, n = this->fight_details_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->fight_details(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_StatsMatchDetails)
}

::google::protobuf::uint8* CDOTAUserMsg_StatsMatchDetails::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_StatsMatchDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CDOTAUserMsg_StatsHeroLookup hero_lookup = 1;
  for (unsigned int i = 0, n = this->hero_lookup_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->hero_lookup(i), deterministic, target);
  }

  // repeated .proto.dota.CDOTAUserMsg_StatsTeamMinuteDetails radiant_stats = 2;
  for (unsigned int i = 0, n = this->radiant_stats_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->radiant_stats(i), deterministic, target);
  }

  // repeated .proto.dota.CDOTAUserMsg_StatsTeamMinuteDetails dire_stats = 3;
  for (unsigned int i = 0, n = this->dire_stats_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->dire_stats(i), deterministic, target);
  }

  // repeated .proto.dota.CDOTAUserMsg_StatsKillDetails radiant_kills = 4;
  for (unsigned int i = 0, n = this->radiant_kills_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->radiant_kills(i), deterministic, target);
  }

  // repeated .proto.dota.CDOTAUserMsg_StatsKillDetails dire_kills = 5;
  for (unsigned int i = 0, n = this->dire_kills_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->dire_kills(i), deterministic, target);
  }

  // repeated .proto.dota.CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightDetails fight_details = 6;
  for (unsigned int i = 0, n = this->fight_details_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->fight_details(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_StatsMatchDetails)
  return target;
}

size_t CDOTAUserMsg_StatsMatchDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_StatsMatchDetails)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CDOTAUserMsg_StatsHeroLookup hero_lookup = 1;
  {
    unsigned int count = this->hero_lookup_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hero_lookup(i));
    }
  }

  // repeated .proto.dota.CDOTAUserMsg_StatsTeamMinuteDetails radiant_stats = 2;
  {
    unsigned int count = this->radiant_stats_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->radiant_stats(i));
    }
  }

  // repeated .proto.dota.CDOTAUserMsg_StatsTeamMinuteDetails dire_stats = 3;
  {
    unsigned int count = this->dire_stats_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dire_stats(i));
    }
  }

  // repeated .proto.dota.CDOTAUserMsg_StatsKillDetails radiant_kills = 4;
  {
    unsigned int count = this->radiant_kills_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->radiant_kills(i));
    }
  }

  // repeated .proto.dota.CDOTAUserMsg_StatsKillDetails dire_kills = 5;
  {
    unsigned int count = this->dire_kills_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dire_kills(i));
    }
  }

  // repeated .proto.dota.CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightDetails fight_details = 6;
  {
    unsigned int count = this->fight_details_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fight_details(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_StatsMatchDetails::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_StatsMatchDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_StatsMatchDetails* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_StatsMatchDetails>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_StatsMatchDetails)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_StatsMatchDetails)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_StatsMatchDetails::MergeFrom(const CDOTAUserMsg_StatsMatchDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_StatsMatchDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hero_lookup_.MergeFrom(from.hero_lookup_);
  radiant_stats_.MergeFrom(from.radiant_stats_);
  dire_stats_.MergeFrom(from.dire_stats_);
  radiant_kills_.MergeFrom(from.radiant_kills_);
  dire_kills_.MergeFrom(from.dire_kills_);
  fight_details_.MergeFrom(from.fight_details_);
}

void CDOTAUserMsg_StatsMatchDetails::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_StatsMatchDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_StatsMatchDetails::CopyFrom(const CDOTAUserMsg_StatsMatchDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_StatsMatchDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_StatsMatchDetails::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_StatsMatchDetails::Swap(CDOTAUserMsg_StatsMatchDetails* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_StatsMatchDetails::InternalSwap(CDOTAUserMsg_StatsMatchDetails* other) {
  hero_lookup_.InternalSwap(&other->hero_lookup_);
  radiant_stats_.InternalSwap(&other->radiant_stats_);
  dire_stats_.InternalSwap(&other->dire_stats_);
  radiant_kills_.InternalSwap(&other->radiant_kills_);
  dire_kills_.InternalSwap(&other->dire_kills_);
  fight_details_.InternalSwap(&other->fight_details_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_StatsMatchDetails::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_StatsMatchDetails

// repeated .proto.dota.CDOTAUserMsg_StatsHeroLookup hero_lookup = 1;
int CDOTAUserMsg_StatsMatchDetails::hero_lookup_size() const {
  return hero_lookup_.size();
}
void CDOTAUserMsg_StatsMatchDetails::clear_hero_lookup() {
  hero_lookup_.Clear();
}
const ::proto::dota::CDOTAUserMsg_StatsHeroLookup& CDOTAUserMsg_StatsMatchDetails::hero_lookup(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_StatsMatchDetails.hero_lookup)
  return hero_lookup_.Get(index);
}
::proto::dota::CDOTAUserMsg_StatsHeroLookup* CDOTAUserMsg_StatsMatchDetails::mutable_hero_lookup(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_StatsMatchDetails.hero_lookup)
  return hero_lookup_.Mutable(index);
}
::proto::dota::CDOTAUserMsg_StatsHeroLookup* CDOTAUserMsg_StatsMatchDetails::add_hero_lookup() {
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAUserMsg_StatsMatchDetails.hero_lookup)
  return hero_lookup_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAUserMsg_StatsHeroLookup >*
CDOTAUserMsg_StatsMatchDetails::mutable_hero_lookup() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTAUserMsg_StatsMatchDetails.hero_lookup)
  return &hero_lookup_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAUserMsg_StatsHeroLookup >&
CDOTAUserMsg_StatsMatchDetails::hero_lookup() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTAUserMsg_StatsMatchDetails.hero_lookup)
  return hero_lookup_;
}

// repeated .proto.dota.CDOTAUserMsg_StatsTeamMinuteDetails radiant_stats = 2;
int CDOTAUserMsg_StatsMatchDetails::radiant_stats_size() const {
  return radiant_stats_.size();
}
void CDOTAUserMsg_StatsMatchDetails::clear_radiant_stats() {
  radiant_stats_.Clear();
}
const ::proto::dota::CDOTAUserMsg_StatsTeamMinuteDetails& CDOTAUserMsg_StatsMatchDetails::radiant_stats(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_StatsMatchDetails.radiant_stats)
  return radiant_stats_.Get(index);
}
::proto::dota::CDOTAUserMsg_StatsTeamMinuteDetails* CDOTAUserMsg_StatsMatchDetails::mutable_radiant_stats(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_StatsMatchDetails.radiant_stats)
  return radiant_stats_.Mutable(index);
}
::proto::dota::CDOTAUserMsg_StatsTeamMinuteDetails* CDOTAUserMsg_StatsMatchDetails::add_radiant_stats() {
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAUserMsg_StatsMatchDetails.radiant_stats)
  return radiant_stats_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAUserMsg_StatsTeamMinuteDetails >*
CDOTAUserMsg_StatsMatchDetails::mutable_radiant_stats() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTAUserMsg_StatsMatchDetails.radiant_stats)
  return &radiant_stats_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAUserMsg_StatsTeamMinuteDetails >&
CDOTAUserMsg_StatsMatchDetails::radiant_stats() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTAUserMsg_StatsMatchDetails.radiant_stats)
  return radiant_stats_;
}

// repeated .proto.dota.CDOTAUserMsg_StatsTeamMinuteDetails dire_stats = 3;
int CDOTAUserMsg_StatsMatchDetails::dire_stats_size() const {
  return dire_stats_.size();
}
void CDOTAUserMsg_StatsMatchDetails::clear_dire_stats() {
  dire_stats_.Clear();
}
const ::proto::dota::CDOTAUserMsg_StatsTeamMinuteDetails& CDOTAUserMsg_StatsMatchDetails::dire_stats(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_StatsMatchDetails.dire_stats)
  return dire_stats_.Get(index);
}
::proto::dota::CDOTAUserMsg_StatsTeamMinuteDetails* CDOTAUserMsg_StatsMatchDetails::mutable_dire_stats(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_StatsMatchDetails.dire_stats)
  return dire_stats_.Mutable(index);
}
::proto::dota::CDOTAUserMsg_StatsTeamMinuteDetails* CDOTAUserMsg_StatsMatchDetails::add_dire_stats() {
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAUserMsg_StatsMatchDetails.dire_stats)
  return dire_stats_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAUserMsg_StatsTeamMinuteDetails >*
CDOTAUserMsg_StatsMatchDetails::mutable_dire_stats() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTAUserMsg_StatsMatchDetails.dire_stats)
  return &dire_stats_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAUserMsg_StatsTeamMinuteDetails >&
CDOTAUserMsg_StatsMatchDetails::dire_stats() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTAUserMsg_StatsMatchDetails.dire_stats)
  return dire_stats_;
}

// repeated .proto.dota.CDOTAUserMsg_StatsKillDetails radiant_kills = 4;
int CDOTAUserMsg_StatsMatchDetails::radiant_kills_size() const {
  return radiant_kills_.size();
}
void CDOTAUserMsg_StatsMatchDetails::clear_radiant_kills() {
  radiant_kills_.Clear();
}
const ::proto::dota::CDOTAUserMsg_StatsKillDetails& CDOTAUserMsg_StatsMatchDetails::radiant_kills(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_StatsMatchDetails.radiant_kills)
  return radiant_kills_.Get(index);
}
::proto::dota::CDOTAUserMsg_StatsKillDetails* CDOTAUserMsg_StatsMatchDetails::mutable_radiant_kills(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_StatsMatchDetails.radiant_kills)
  return radiant_kills_.Mutable(index);
}
::proto::dota::CDOTAUserMsg_StatsKillDetails* CDOTAUserMsg_StatsMatchDetails::add_radiant_kills() {
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAUserMsg_StatsMatchDetails.radiant_kills)
  return radiant_kills_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAUserMsg_StatsKillDetails >*
CDOTAUserMsg_StatsMatchDetails::mutable_radiant_kills() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTAUserMsg_StatsMatchDetails.radiant_kills)
  return &radiant_kills_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAUserMsg_StatsKillDetails >&
CDOTAUserMsg_StatsMatchDetails::radiant_kills() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTAUserMsg_StatsMatchDetails.radiant_kills)
  return radiant_kills_;
}

// repeated .proto.dota.CDOTAUserMsg_StatsKillDetails dire_kills = 5;
int CDOTAUserMsg_StatsMatchDetails::dire_kills_size() const {
  return dire_kills_.size();
}
void CDOTAUserMsg_StatsMatchDetails::clear_dire_kills() {
  dire_kills_.Clear();
}
const ::proto::dota::CDOTAUserMsg_StatsKillDetails& CDOTAUserMsg_StatsMatchDetails::dire_kills(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_StatsMatchDetails.dire_kills)
  return dire_kills_.Get(index);
}
::proto::dota::CDOTAUserMsg_StatsKillDetails* CDOTAUserMsg_StatsMatchDetails::mutable_dire_kills(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_StatsMatchDetails.dire_kills)
  return dire_kills_.Mutable(index);
}
::proto::dota::CDOTAUserMsg_StatsKillDetails* CDOTAUserMsg_StatsMatchDetails::add_dire_kills() {
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAUserMsg_StatsMatchDetails.dire_kills)
  return dire_kills_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAUserMsg_StatsKillDetails >*
CDOTAUserMsg_StatsMatchDetails::mutable_dire_kills() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTAUserMsg_StatsMatchDetails.dire_kills)
  return &dire_kills_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAUserMsg_StatsKillDetails >&
CDOTAUserMsg_StatsMatchDetails::dire_kills() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTAUserMsg_StatsMatchDetails.dire_kills)
  return dire_kills_;
}

// repeated .proto.dota.CDOTAUserMsg_StatsMatchDetails.CDOTAUserMsg_StatsFightDetails fight_details = 6;
int CDOTAUserMsg_StatsMatchDetails::fight_details_size() const {
  return fight_details_.size();
}
void CDOTAUserMsg_StatsMatchDetails::clear_fight_details() {
  fight_details_.Clear();
}
const ::proto::dota::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails& CDOTAUserMsg_StatsMatchDetails::fight_details(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_StatsMatchDetails.fight_details)
  return fight_details_.Get(index);
}
::proto::dota::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails* CDOTAUserMsg_StatsMatchDetails::mutable_fight_details(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_StatsMatchDetails.fight_details)
  return fight_details_.Mutable(index);
}
::proto::dota::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails* CDOTAUserMsg_StatsMatchDetails::add_fight_details() {
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAUserMsg_StatsMatchDetails.fight_details)
  return fight_details_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails >*
CDOTAUserMsg_StatsMatchDetails::mutable_fight_details() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTAUserMsg_StatsMatchDetails.fight_details)
  return &fight_details_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAUserMsg_StatsMatchDetails_CDOTAUserMsg_StatsFightDetails >&
CDOTAUserMsg_StatsMatchDetails::fight_details() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTAUserMsg_StatsMatchDetails.fight_details)
  return fight_details_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_MiniTaunt::kTauntingPlayerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_MiniTaunt::CDOTAUserMsg_MiniTaunt()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_MiniTaunt)
}
CDOTAUserMsg_MiniTaunt::CDOTAUserMsg_MiniTaunt(const CDOTAUserMsg_MiniTaunt& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  taunting_player_id_ = from.taunting_player_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_MiniTaunt)
}

void CDOTAUserMsg_MiniTaunt::SharedCtor() {
  _cached_size_ = 0;
  taunting_player_id_ = 0u;
}

CDOTAUserMsg_MiniTaunt::~CDOTAUserMsg_MiniTaunt() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_MiniTaunt)
  SharedDtor();
}

void CDOTAUserMsg_MiniTaunt::SharedDtor() {
}

void CDOTAUserMsg_MiniTaunt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_MiniTaunt::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_MiniTaunt& CDOTAUserMsg_MiniTaunt::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_MiniTaunt* CDOTAUserMsg_MiniTaunt::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_MiniTaunt* n = new CDOTAUserMsg_MiniTaunt;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_MiniTaunt::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_MiniTaunt)
  taunting_player_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_MiniTaunt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_MiniTaunt)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 taunting_player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_taunting_player_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &taunting_player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_MiniTaunt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_MiniTaunt)
  return false;
#undef DO_
}

void CDOTAUserMsg_MiniTaunt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_MiniTaunt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 taunting_player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->taunting_player_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_MiniTaunt)
}

::google::protobuf::uint8* CDOTAUserMsg_MiniTaunt::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_MiniTaunt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 taunting_player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->taunting_player_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_MiniTaunt)
  return target;
}

size_t CDOTAUserMsg_MiniTaunt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_MiniTaunt)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 taunting_player_id = 1;
  if (has_taunting_player_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->taunting_player_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_MiniTaunt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_MiniTaunt)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_MiniTaunt* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_MiniTaunt>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_MiniTaunt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_MiniTaunt)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_MiniTaunt::MergeFrom(const CDOTAUserMsg_MiniTaunt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_MiniTaunt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_taunting_player_id()) {
    set_taunting_player_id(from.taunting_player_id());
  }
}

void CDOTAUserMsg_MiniTaunt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_MiniTaunt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_MiniTaunt::CopyFrom(const CDOTAUserMsg_MiniTaunt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_MiniTaunt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_MiniTaunt::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_MiniTaunt::Swap(CDOTAUserMsg_MiniTaunt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_MiniTaunt::InternalSwap(CDOTAUserMsg_MiniTaunt* other) {
  std::swap(taunting_player_id_, other->taunting_player_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_MiniTaunt::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_MiniTaunt

// optional uint32 taunting_player_id = 1;
bool CDOTAUserMsg_MiniTaunt::has_taunting_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_MiniTaunt::set_has_taunting_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_MiniTaunt::clear_has_taunting_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_MiniTaunt::clear_taunting_player_id() {
  taunting_player_id_ = 0u;
  clear_has_taunting_player_id();
}
::google::protobuf::uint32 CDOTAUserMsg_MiniTaunt::taunting_player_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_MiniTaunt.taunting_player_id)
  return taunting_player_id_;
}
void CDOTAUserMsg_MiniTaunt::set_taunting_player_id(::google::protobuf::uint32 value) {
  set_has_taunting_player_id();
  taunting_player_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_MiniTaunt.taunting_player_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_SpeechBubble::kDestroyAllFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_SpeechBubble::CDOTAUserMsg_SpeechBubble()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_SpeechBubble)
}
CDOTAUserMsg_SpeechBubble::CDOTAUserMsg_SpeechBubble(const CDOTAUserMsg_SpeechBubble& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  destroy_all_ = from.destroy_all_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_SpeechBubble)
}

void CDOTAUserMsg_SpeechBubble::SharedCtor() {
  _cached_size_ = 0;
  destroy_all_ = false;
}

CDOTAUserMsg_SpeechBubble::~CDOTAUserMsg_SpeechBubble() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_SpeechBubble)
  SharedDtor();
}

void CDOTAUserMsg_SpeechBubble::SharedDtor() {
}

void CDOTAUserMsg_SpeechBubble::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_SpeechBubble::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_SpeechBubble& CDOTAUserMsg_SpeechBubble::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_SpeechBubble* CDOTAUserMsg_SpeechBubble::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_SpeechBubble* n = new CDOTAUserMsg_SpeechBubble;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_SpeechBubble::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_SpeechBubble)
  destroy_all_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_SpeechBubble::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_SpeechBubble)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool destroy_all = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_destroy_all();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &destroy_all_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_SpeechBubble)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_SpeechBubble)
  return false;
#undef DO_
}

void CDOTAUserMsg_SpeechBubble::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_SpeechBubble)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool destroy_all = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->destroy_all(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_SpeechBubble)
}

::google::protobuf::uint8* CDOTAUserMsg_SpeechBubble::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_SpeechBubble)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool destroy_all = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->destroy_all(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_SpeechBubble)
  return target;
}

size_t CDOTAUserMsg_SpeechBubble::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_SpeechBubble)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional bool destroy_all = 1;
  if (has_destroy_all()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_SpeechBubble::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_SpeechBubble)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_SpeechBubble* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_SpeechBubble>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_SpeechBubble)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_SpeechBubble)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_SpeechBubble::MergeFrom(const CDOTAUserMsg_SpeechBubble& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_SpeechBubble)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_destroy_all()) {
    set_destroy_all(from.destroy_all());
  }
}

void CDOTAUserMsg_SpeechBubble::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_SpeechBubble)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_SpeechBubble::CopyFrom(const CDOTAUserMsg_SpeechBubble& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_SpeechBubble)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_SpeechBubble::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_SpeechBubble::Swap(CDOTAUserMsg_SpeechBubble* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_SpeechBubble::InternalSwap(CDOTAUserMsg_SpeechBubble* other) {
  std::swap(destroy_all_, other->destroy_all_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_SpeechBubble::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_SpeechBubble

// optional bool destroy_all = 1;
bool CDOTAUserMsg_SpeechBubble::has_destroy_all() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_SpeechBubble::set_has_destroy_all() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_SpeechBubble::clear_has_destroy_all() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_SpeechBubble::clear_destroy_all() {
  destroy_all_ = false;
  clear_has_destroy_all();
}
bool CDOTAUserMsg_SpeechBubble::destroy_all() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_SpeechBubble.destroy_all)
  return destroy_all_;
}
void CDOTAUserMsg_SpeechBubble::set_destroy_all(bool value) {
  set_has_destroy_all();
  destroy_all_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_SpeechBubble.destroy_all)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_CustomHeaderMessage::kPlayerIdFieldNumber;
const int CDOTAUserMsg_CustomHeaderMessage::kDurationFieldNumber;
const int CDOTAUserMsg_CustomHeaderMessage::kMessageFieldNumber;
const int CDOTAUserMsg_CustomHeaderMessage::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_CustomHeaderMessage::CDOTAUserMsg_CustomHeaderMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_CustomHeaderMessage)
}
CDOTAUserMsg_CustomHeaderMessage::CDOTAUserMsg_CustomHeaderMessage(const CDOTAUserMsg_CustomHeaderMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_message()) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  ::memcpy(&player_id_, &from.player_id_,
    reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&player_id_) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_CustomHeaderMessage)
}

void CDOTAUserMsg_CustomHeaderMessage::SharedCtor() {
  _cached_size_ = 0;
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&player_id_, 0, reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&player_id_) + sizeof(value_));
}

CDOTAUserMsg_CustomHeaderMessage::~CDOTAUserMsg_CustomHeaderMessage() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_CustomHeaderMessage)
  SharedDtor();
}

void CDOTAUserMsg_CustomHeaderMessage::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CDOTAUserMsg_CustomHeaderMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_CustomHeaderMessage::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_CustomHeaderMessage& CDOTAUserMsg_CustomHeaderMessage::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_CustomHeaderMessage* CDOTAUserMsg_CustomHeaderMessage::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_CustomHeaderMessage* n = new CDOTAUserMsg_CustomHeaderMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_CustomHeaderMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_CustomHeaderMessage)
  if (has_message()) {
    GOOGLE_DCHECK(!message_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*message_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&player_id_, 0, reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&player_id_) + sizeof(value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_CustomHeaderMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_CustomHeaderMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_player_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float duration = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_duration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string message = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDOTAUserMsg_CustomHeaderMessage.message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 value = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_CustomHeaderMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_CustomHeaderMessage)
  return false;
#undef DO_
}

void CDOTAUserMsg_CustomHeaderMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_CustomHeaderMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_id(), output);
  }

  // optional float duration = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->duration(), output);
  }

  // optional string message = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAUserMsg_CustomHeaderMessage.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->message(), output);
  }

  // optional int32 value = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_CustomHeaderMessage)
}

::google::protobuf::uint8* CDOTAUserMsg_CustomHeaderMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_CustomHeaderMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_id(), target);
  }

  // optional float duration = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->duration(), target);
  }

  // optional string message = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAUserMsg_CustomHeaderMessage.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->message(), target);
  }

  // optional int32 value = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_CustomHeaderMessage)
  return target;
}

size_t CDOTAUserMsg_CustomHeaderMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_CustomHeaderMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string message = 3;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional uint32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_id());
    }

    // optional float duration = 2;
    if (has_duration()) {
      total_size += 1 + 4;
    }

    // optional int32 value = 4;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_CustomHeaderMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_CustomHeaderMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_CustomHeaderMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_CustomHeaderMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_CustomHeaderMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_CustomHeaderMessage)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_CustomHeaderMessage::MergeFrom(const CDOTAUserMsg_CustomHeaderMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_CustomHeaderMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_message();
      message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
    if (cached_has_bits & 0x00000002u) {
      player_id_ = from.player_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      duration_ = from.duration_;
    }
    if (cached_has_bits & 0x00000008u) {
      value_ = from.value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_CustomHeaderMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_CustomHeaderMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_CustomHeaderMessage::CopyFrom(const CDOTAUserMsg_CustomHeaderMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_CustomHeaderMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_CustomHeaderMessage::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_CustomHeaderMessage::Swap(CDOTAUserMsg_CustomHeaderMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_CustomHeaderMessage::InternalSwap(CDOTAUserMsg_CustomHeaderMessage* other) {
  message_.Swap(&other->message_);
  std::swap(player_id_, other->player_id_);
  std::swap(duration_, other->duration_);
  std::swap(value_, other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_CustomHeaderMessage::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_CustomHeaderMessage

// optional uint32 player_id = 1;
bool CDOTAUserMsg_CustomHeaderMessage::has_player_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAUserMsg_CustomHeaderMessage::set_has_player_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAUserMsg_CustomHeaderMessage::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAUserMsg_CustomHeaderMessage::clear_player_id() {
  player_id_ = 0u;
  clear_has_player_id();
}
::google::protobuf::uint32 CDOTAUserMsg_CustomHeaderMessage::player_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_CustomHeaderMessage.player_id)
  return player_id_;
}
void CDOTAUserMsg_CustomHeaderMessage::set_player_id(::google::protobuf::uint32 value) {
  set_has_player_id();
  player_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_CustomHeaderMessage.player_id)
}

// optional float duration = 2;
bool CDOTAUserMsg_CustomHeaderMessage::has_duration() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDOTAUserMsg_CustomHeaderMessage::set_has_duration() {
  _has_bits_[0] |= 0x00000004u;
}
void CDOTAUserMsg_CustomHeaderMessage::clear_has_duration() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDOTAUserMsg_CustomHeaderMessage::clear_duration() {
  duration_ = 0;
  clear_has_duration();
}
float CDOTAUserMsg_CustomHeaderMessage::duration() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_CustomHeaderMessage.duration)
  return duration_;
}
void CDOTAUserMsg_CustomHeaderMessage::set_duration(float value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_CustomHeaderMessage.duration)
}

// optional string message = 3;
bool CDOTAUserMsg_CustomHeaderMessage::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_CustomHeaderMessage::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_CustomHeaderMessage::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_CustomHeaderMessage::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
const ::std::string& CDOTAUserMsg_CustomHeaderMessage::message() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_CustomHeaderMessage.message)
  return message_.GetNoArena();
}
void CDOTAUserMsg_CustomHeaderMessage::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_CustomHeaderMessage.message)
}
#if LANG_CXX11
void CDOTAUserMsg_CustomHeaderMessage::set_message(::std::string&& value) {
  set_has_message();
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDOTAUserMsg_CustomHeaderMessage.message)
}
#endif
void CDOTAUserMsg_CustomHeaderMessage::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDOTAUserMsg_CustomHeaderMessage.message)
}
void CDOTAUserMsg_CustomHeaderMessage::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDOTAUserMsg_CustomHeaderMessage.message)
}
::std::string* CDOTAUserMsg_CustomHeaderMessage::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_CustomHeaderMessage.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDOTAUserMsg_CustomHeaderMessage::release_message() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAUserMsg_CustomHeaderMessage.message)
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDOTAUserMsg_CustomHeaderMessage::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAUserMsg_CustomHeaderMessage.message)
}

// optional int32 value = 4;
bool CDOTAUserMsg_CustomHeaderMessage::has_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CDOTAUserMsg_CustomHeaderMessage::set_has_value() {
  _has_bits_[0] |= 0x00000008u;
}
void CDOTAUserMsg_CustomHeaderMessage::clear_has_value() {
  _has_bits_[0] &= ~0x00000008u;
}
void CDOTAUserMsg_CustomHeaderMessage::clear_value() {
  value_ = 0;
  clear_has_value();
}
::google::protobuf::int32 CDOTAUserMsg_CustomHeaderMessage::value() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_CustomHeaderMessage.value)
  return value_;
}
void CDOTAUserMsg_CustomHeaderMessage::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_CustomHeaderMessage.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgHeroAbilityStat::kStatTypeFieldNumber;
const int CMsgHeroAbilityStat::kIntValueFieldNumber;
const int CMsgHeroAbilityStat::kFloatValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgHeroAbilityStat::CMsgHeroAbilityStat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgHeroAbilityStat)
}
CMsgHeroAbilityStat::CMsgHeroAbilityStat(const CMsgHeroAbilityStat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&stat_type_, &from.stat_type_,
    reinterpret_cast<char*>(&float_value_) -
    reinterpret_cast<char*>(&stat_type_) + sizeof(float_value_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgHeroAbilityStat)
}

void CMsgHeroAbilityStat::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&stat_type_, 0, reinterpret_cast<char*>(&float_value_) -
    reinterpret_cast<char*>(&stat_type_) + sizeof(float_value_));
}

CMsgHeroAbilityStat::~CMsgHeroAbilityStat() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgHeroAbilityStat)
  SharedDtor();
}

void CMsgHeroAbilityStat::SharedDtor() {
}

void CMsgHeroAbilityStat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgHeroAbilityStat::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgHeroAbilityStat& CMsgHeroAbilityStat::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgHeroAbilityStat* CMsgHeroAbilityStat::New(::google::protobuf::Arena* arena) const {
  CMsgHeroAbilityStat* n = new CMsgHeroAbilityStat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgHeroAbilityStat::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgHeroAbilityStat)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&stat_type_, 0, reinterpret_cast<char*>(&float_value_) -
      reinterpret_cast<char*>(&stat_type_) + sizeof(float_value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgHeroAbilityStat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgHeroAbilityStat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.EHeroStatType stat_type = 1 [default = k_EHeroStatType_None];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::EHeroStatType_IsValid(value)) {
            set_stat_type(static_cast< ::proto::dota::EHeroStatType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 int_value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_int_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &int_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float float_value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_float_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &float_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgHeroAbilityStat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgHeroAbilityStat)
  return false;
#undef DO_
}

void CMsgHeroAbilityStat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgHeroAbilityStat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.EHeroStatType stat_type = 1 [default = k_EHeroStatType_None];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->stat_type(), output);
  }

  // optional int32 int_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->int_value(), output);
  }

  // optional float float_value = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->float_value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgHeroAbilityStat)
}

::google::protobuf::uint8* CMsgHeroAbilityStat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgHeroAbilityStat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.EHeroStatType stat_type = 1 [default = k_EHeroStatType_None];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->stat_type(), target);
  }

  // optional int32 int_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->int_value(), target);
  }

  // optional float float_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->float_value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgHeroAbilityStat)
  return target;
}

size_t CMsgHeroAbilityStat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgHeroAbilityStat)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .proto.dota.EHeroStatType stat_type = 1 [default = k_EHeroStatType_None];
    if (has_stat_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->stat_type());
    }

    // optional int32 int_value = 2;
    if (has_int_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->int_value());
    }

    // optional float float_value = 3;
    if (has_float_value()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgHeroAbilityStat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgHeroAbilityStat)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgHeroAbilityStat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgHeroAbilityStat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgHeroAbilityStat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgHeroAbilityStat)
    MergeFrom(*source);
  }
}

void CMsgHeroAbilityStat::MergeFrom(const CMsgHeroAbilityStat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgHeroAbilityStat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      stat_type_ = from.stat_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      int_value_ = from.int_value_;
    }
    if (cached_has_bits & 0x00000004u) {
      float_value_ = from.float_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgHeroAbilityStat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgHeroAbilityStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgHeroAbilityStat::CopyFrom(const CMsgHeroAbilityStat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgHeroAbilityStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgHeroAbilityStat::IsInitialized() const {
  return true;
}

void CMsgHeroAbilityStat::Swap(CMsgHeroAbilityStat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgHeroAbilityStat::InternalSwap(CMsgHeroAbilityStat* other) {
  std::swap(stat_type_, other->stat_type_);
  std::swap(int_value_, other->int_value_);
  std::swap(float_value_, other->float_value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgHeroAbilityStat::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgHeroAbilityStat

// optional .proto.dota.EHeroStatType stat_type = 1 [default = k_EHeroStatType_None];
bool CMsgHeroAbilityStat::has_stat_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgHeroAbilityStat::set_has_stat_type() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgHeroAbilityStat::clear_has_stat_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgHeroAbilityStat::clear_stat_type() {
  stat_type_ = 0;
  clear_has_stat_type();
}
::proto::dota::EHeroStatType CMsgHeroAbilityStat::stat_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgHeroAbilityStat.stat_type)
  return static_cast< ::proto::dota::EHeroStatType >(stat_type_);
}
void CMsgHeroAbilityStat::set_stat_type(::proto::dota::EHeroStatType value) {
  assert(::proto::dota::EHeroStatType_IsValid(value));
  set_has_stat_type();
  stat_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgHeroAbilityStat.stat_type)
}

// optional int32 int_value = 2;
bool CMsgHeroAbilityStat::has_int_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgHeroAbilityStat::set_has_int_value() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgHeroAbilityStat::clear_has_int_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgHeroAbilityStat::clear_int_value() {
  int_value_ = 0;
  clear_has_int_value();
}
::google::protobuf::int32 CMsgHeroAbilityStat::int_value() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgHeroAbilityStat.int_value)
  return int_value_;
}
void CMsgHeroAbilityStat::set_int_value(::google::protobuf::int32 value) {
  set_has_int_value();
  int_value_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgHeroAbilityStat.int_value)
}

// optional float float_value = 3;
bool CMsgHeroAbilityStat::has_float_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgHeroAbilityStat::set_has_float_value() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgHeroAbilityStat::clear_has_float_value() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgHeroAbilityStat::clear_float_value() {
  float_value_ = 0;
  clear_has_float_value();
}
float CMsgHeroAbilityStat::float_value() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgHeroAbilityStat.float_value)
  return float_value_;
}
void CMsgHeroAbilityStat::set_float_value(float value) {
  set_has_float_value();
  float_value_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgHeroAbilityStat.float_value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgCombatAnalyzerPlayerStat::kAccountIdFieldNumber;
const int CMsgCombatAnalyzerPlayerStat::kHeroAbilityStatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgCombatAnalyzerPlayerStat::CMsgCombatAnalyzerPlayerStat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgCombatAnalyzerPlayerStat)
}
CMsgCombatAnalyzerPlayerStat::CMsgCombatAnalyzerPlayerStat(const CMsgCombatAnalyzerPlayerStat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      hero_ability_stats_(from.hero_ability_stats_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_id_ = from.account_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgCombatAnalyzerPlayerStat)
}

void CMsgCombatAnalyzerPlayerStat::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
}

CMsgCombatAnalyzerPlayerStat::~CMsgCombatAnalyzerPlayerStat() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgCombatAnalyzerPlayerStat)
  SharedDtor();
}

void CMsgCombatAnalyzerPlayerStat::SharedDtor() {
}

void CMsgCombatAnalyzerPlayerStat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgCombatAnalyzerPlayerStat::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgCombatAnalyzerPlayerStat& CMsgCombatAnalyzerPlayerStat::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgCombatAnalyzerPlayerStat* CMsgCombatAnalyzerPlayerStat::New(::google::protobuf::Arena* arena) const {
  CMsgCombatAnalyzerPlayerStat* n = new CMsgCombatAnalyzerPlayerStat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgCombatAnalyzerPlayerStat::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgCombatAnalyzerPlayerStat)
  hero_ability_stats_.Clear();
  account_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgCombatAnalyzerPlayerStat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgCombatAnalyzerPlayerStat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgHeroAbilityStat hero_ability_stats = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hero_ability_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgCombatAnalyzerPlayerStat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgCombatAnalyzerPlayerStat)
  return false;
#undef DO_
}

void CMsgCombatAnalyzerPlayerStat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgCombatAnalyzerPlayerStat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // repeated .proto.dota.CMsgHeroAbilityStat hero_ability_stats = 2;
  for (unsigned int i = 0, n = this->hero_ability_stats_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->hero_ability_stats(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgCombatAnalyzerPlayerStat)
}

::google::protobuf::uint8* CMsgCombatAnalyzerPlayerStat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgCombatAnalyzerPlayerStat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // repeated .proto.dota.CMsgHeroAbilityStat hero_ability_stats = 2;
  for (unsigned int i = 0, n = this->hero_ability_stats_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->hero_ability_stats(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgCombatAnalyzerPlayerStat)
  return target;
}

size_t CMsgCombatAnalyzerPlayerStat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgCombatAnalyzerPlayerStat)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgHeroAbilityStat hero_ability_stats = 2;
  {
    unsigned int count = this->hero_ability_stats_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hero_ability_stats(i));
    }
  }

  // optional uint32 account_id = 1;
  if (has_account_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->account_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgCombatAnalyzerPlayerStat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgCombatAnalyzerPlayerStat)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgCombatAnalyzerPlayerStat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgCombatAnalyzerPlayerStat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgCombatAnalyzerPlayerStat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgCombatAnalyzerPlayerStat)
    MergeFrom(*source);
  }
}

void CMsgCombatAnalyzerPlayerStat::MergeFrom(const CMsgCombatAnalyzerPlayerStat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgCombatAnalyzerPlayerStat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hero_ability_stats_.MergeFrom(from.hero_ability_stats_);
  if (from.has_account_id()) {
    set_account_id(from.account_id());
  }
}

void CMsgCombatAnalyzerPlayerStat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgCombatAnalyzerPlayerStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgCombatAnalyzerPlayerStat::CopyFrom(const CMsgCombatAnalyzerPlayerStat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgCombatAnalyzerPlayerStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCombatAnalyzerPlayerStat::IsInitialized() const {
  return true;
}

void CMsgCombatAnalyzerPlayerStat::Swap(CMsgCombatAnalyzerPlayerStat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgCombatAnalyzerPlayerStat::InternalSwap(CMsgCombatAnalyzerPlayerStat* other) {
  hero_ability_stats_.InternalSwap(&other->hero_ability_stats_);
  std::swap(account_id_, other->account_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgCombatAnalyzerPlayerStat::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgCombatAnalyzerPlayerStat

// optional uint32 account_id = 1;
bool CMsgCombatAnalyzerPlayerStat::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgCombatAnalyzerPlayerStat::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgCombatAnalyzerPlayerStat::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgCombatAnalyzerPlayerStat::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
::google::protobuf::uint32 CMsgCombatAnalyzerPlayerStat::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgCombatAnalyzerPlayerStat.account_id)
  return account_id_;
}
void CMsgCombatAnalyzerPlayerStat::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgCombatAnalyzerPlayerStat.account_id)
}

// repeated .proto.dota.CMsgHeroAbilityStat hero_ability_stats = 2;
int CMsgCombatAnalyzerPlayerStat::hero_ability_stats_size() const {
  return hero_ability_stats_.size();
}
void CMsgCombatAnalyzerPlayerStat::clear_hero_ability_stats() {
  hero_ability_stats_.Clear();
}
const ::proto::dota::CMsgHeroAbilityStat& CMsgCombatAnalyzerPlayerStat::hero_ability_stats(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgCombatAnalyzerPlayerStat.hero_ability_stats)
  return hero_ability_stats_.Get(index);
}
::proto::dota::CMsgHeroAbilityStat* CMsgCombatAnalyzerPlayerStat::mutable_hero_ability_stats(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgCombatAnalyzerPlayerStat.hero_ability_stats)
  return hero_ability_stats_.Mutable(index);
}
::proto::dota::CMsgHeroAbilityStat* CMsgCombatAnalyzerPlayerStat::add_hero_ability_stats() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgCombatAnalyzerPlayerStat.hero_ability_stats)
  return hero_ability_stats_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgHeroAbilityStat >*
CMsgCombatAnalyzerPlayerStat::mutable_hero_ability_stats() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgCombatAnalyzerPlayerStat.hero_ability_stats)
  return &hero_ability_stats_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgHeroAbilityStat >&
CMsgCombatAnalyzerPlayerStat::hero_ability_stats() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgCombatAnalyzerPlayerStat.hero_ability_stats)
  return hero_ability_stats_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgCombatAnalyzerStats::kMatchIdFieldNumber;
const int CMsgCombatAnalyzerStats::kPlayerStatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgCombatAnalyzerStats::CMsgCombatAnalyzerStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgCombatAnalyzerStats)
}
CMsgCombatAnalyzerStats::CMsgCombatAnalyzerStats(const CMsgCombatAnalyzerStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      player_stats_(from.player_stats_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  match_id_ = from.match_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgCombatAnalyzerStats)
}

void CMsgCombatAnalyzerStats::SharedCtor() {
  _cached_size_ = 0;
  match_id_ = GOOGLE_ULONGLONG(0);
}

CMsgCombatAnalyzerStats::~CMsgCombatAnalyzerStats() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgCombatAnalyzerStats)
  SharedDtor();
}

void CMsgCombatAnalyzerStats::SharedDtor() {
}

void CMsgCombatAnalyzerStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgCombatAnalyzerStats::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgCombatAnalyzerStats& CMsgCombatAnalyzerStats::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgCombatAnalyzerStats* CMsgCombatAnalyzerStats::New(::google::protobuf::Arena* arena) const {
  CMsgCombatAnalyzerStats* n = new CMsgCombatAnalyzerStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgCombatAnalyzerStats::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgCombatAnalyzerStats)
  player_stats_.Clear();
  match_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgCombatAnalyzerStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgCombatAnalyzerStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 match_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_match_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgCombatAnalyzerPlayerStat player_stats = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgCombatAnalyzerStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgCombatAnalyzerStats)
  return false;
#undef DO_
}

void CMsgCombatAnalyzerStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgCombatAnalyzerStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->match_id(), output);
  }

  // repeated .proto.dota.CMsgCombatAnalyzerPlayerStat player_stats = 2;
  for (unsigned int i = 0, n = this->player_stats_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->player_stats(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgCombatAnalyzerStats)
}

::google::protobuf::uint8* CMsgCombatAnalyzerStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgCombatAnalyzerStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->match_id(), target);
  }

  // repeated .proto.dota.CMsgCombatAnalyzerPlayerStat player_stats = 2;
  for (unsigned int i = 0, n = this->player_stats_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->player_stats(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgCombatAnalyzerStats)
  return target;
}

size_t CMsgCombatAnalyzerStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgCombatAnalyzerStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgCombatAnalyzerPlayerStat player_stats = 2;
  {
    unsigned int count = this->player_stats_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_stats(i));
    }
  }

  // optional uint64 match_id = 1;
  if (has_match_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->match_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgCombatAnalyzerStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgCombatAnalyzerStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgCombatAnalyzerStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgCombatAnalyzerStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgCombatAnalyzerStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgCombatAnalyzerStats)
    MergeFrom(*source);
  }
}

void CMsgCombatAnalyzerStats::MergeFrom(const CMsgCombatAnalyzerStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgCombatAnalyzerStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_stats_.MergeFrom(from.player_stats_);
  if (from.has_match_id()) {
    set_match_id(from.match_id());
  }
}

void CMsgCombatAnalyzerStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgCombatAnalyzerStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgCombatAnalyzerStats::CopyFrom(const CMsgCombatAnalyzerStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgCombatAnalyzerStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCombatAnalyzerStats::IsInitialized() const {
  return true;
}

void CMsgCombatAnalyzerStats::Swap(CMsgCombatAnalyzerStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgCombatAnalyzerStats::InternalSwap(CMsgCombatAnalyzerStats* other) {
  player_stats_.InternalSwap(&other->player_stats_);
  std::swap(match_id_, other->match_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgCombatAnalyzerStats::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgCombatAnalyzerStats

// optional uint64 match_id = 1;
bool CMsgCombatAnalyzerStats::has_match_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgCombatAnalyzerStats::set_has_match_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgCombatAnalyzerStats::clear_has_match_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgCombatAnalyzerStats::clear_match_id() {
  match_id_ = GOOGLE_ULONGLONG(0);
  clear_has_match_id();
}
::google::protobuf::uint64 CMsgCombatAnalyzerStats::match_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgCombatAnalyzerStats.match_id)
  return match_id_;
}
void CMsgCombatAnalyzerStats::set_match_id(::google::protobuf::uint64 value) {
  set_has_match_id();
  match_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgCombatAnalyzerStats.match_id)
}

// repeated .proto.dota.CMsgCombatAnalyzerPlayerStat player_stats = 2;
int CMsgCombatAnalyzerStats::player_stats_size() const {
  return player_stats_.size();
}
void CMsgCombatAnalyzerStats::clear_player_stats() {
  player_stats_.Clear();
}
const ::proto::dota::CMsgCombatAnalyzerPlayerStat& CMsgCombatAnalyzerStats::player_stats(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgCombatAnalyzerStats.player_stats)
  return player_stats_.Get(index);
}
::proto::dota::CMsgCombatAnalyzerPlayerStat* CMsgCombatAnalyzerStats::mutable_player_stats(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgCombatAnalyzerStats.player_stats)
  return player_stats_.Mutable(index);
}
::proto::dota::CMsgCombatAnalyzerPlayerStat* CMsgCombatAnalyzerStats::add_player_stats() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgCombatAnalyzerStats.player_stats)
  return player_stats_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgCombatAnalyzerPlayerStat >*
CMsgCombatAnalyzerStats::mutable_player_stats() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgCombatAnalyzerStats.player_stats)
  return &player_stats_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgCombatAnalyzerPlayerStat >&
CMsgCombatAnalyzerStats::player_stats() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgCombatAnalyzerStats.player_stats)
  return player_stats_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_BeastChat::kTeamFieldNumber;
const int CDOTAUserMsg_BeastChat::kFormatFieldNumber;
const int CDOTAUserMsg_BeastChat::kMessageFieldNumber;
const int CDOTAUserMsg_BeastChat::kTargetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_BeastChat::CDOTAUserMsg_BeastChat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_BeastChat)
}
CDOTAUserMsg_BeastChat::CDOTAUserMsg_BeastChat(const CDOTAUserMsg_BeastChat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  format_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_format()) {
    format_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.format_);
  }
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_message()) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  target_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_target()) {
    target_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.target_);
  }
  team_ = from.team_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_BeastChat)
}

void CDOTAUserMsg_BeastChat::SharedCtor() {
  _cached_size_ = 0;
  format_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  target_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_ = 0u;
}

CDOTAUserMsg_BeastChat::~CDOTAUserMsg_BeastChat() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_BeastChat)
  SharedDtor();
}

void CDOTAUserMsg_BeastChat::SharedDtor() {
  format_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  target_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CDOTAUserMsg_BeastChat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_BeastChat::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_BeastChat& CDOTAUserMsg_BeastChat::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_BeastChat* CDOTAUserMsg_BeastChat::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_BeastChat* n = new CDOTAUserMsg_BeastChat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_BeastChat::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_BeastChat)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_format()) {
      GOOGLE_DCHECK(!format_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*format_.UnsafeRawStringPointer())->clear();
    }
    if (has_message()) {
      GOOGLE_DCHECK(!message_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*message_.UnsafeRawStringPointer())->clear();
    }
    if (has_target()) {
      GOOGLE_DCHECK(!target_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*target_.UnsafeRawStringPointer())->clear();
    }
  }
  team_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_BeastChat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_BeastChat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 team = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_team();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string format = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_format()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->format().data(), this->format().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDOTAUserMsg_BeastChat.format");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string message = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDOTAUserMsg_BeastChat.message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string target = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_target()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->target().data(), this->target().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDOTAUserMsg_BeastChat.target");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_BeastChat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_BeastChat)
  return false;
#undef DO_
}

void CDOTAUserMsg_BeastChat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_BeastChat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 team = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->team(), output);
  }

  // optional string format = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->format().data(), this->format().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAUserMsg_BeastChat.format");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->format(), output);
  }

  // optional string message = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAUserMsg_BeastChat.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->message(), output);
  }

  // optional string target = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->target().data(), this->target().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAUserMsg_BeastChat.target");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->target(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_BeastChat)
}

::google::protobuf::uint8* CDOTAUserMsg_BeastChat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_BeastChat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 team = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->team(), target);
  }

  // optional string format = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->format().data(), this->format().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAUserMsg_BeastChat.format");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->format(), target);
  }

  // optional string message = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAUserMsg_BeastChat.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->message(), target);
  }

  // optional string target = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->target().data(), this->target().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAUserMsg_BeastChat.target");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->target(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_BeastChat)
  return target;
}

size_t CDOTAUserMsg_BeastChat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_BeastChat)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string format = 2;
    if (has_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->format());
    }

    // optional string message = 3;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional string target = 4;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->target());
    }

    // optional uint32 team = 1;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_BeastChat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_BeastChat)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_BeastChat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_BeastChat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_BeastChat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_BeastChat)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_BeastChat::MergeFrom(const CDOTAUserMsg_BeastChat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_BeastChat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_format();
      format_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.format_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_message();
      message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_target();
      target_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.target_);
    }
    if (cached_has_bits & 0x00000008u) {
      team_ = from.team_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_BeastChat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_BeastChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_BeastChat::CopyFrom(const CDOTAUserMsg_BeastChat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_BeastChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_BeastChat::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_BeastChat::Swap(CDOTAUserMsg_BeastChat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_BeastChat::InternalSwap(CDOTAUserMsg_BeastChat* other) {
  format_.Swap(&other->format_);
  message_.Swap(&other->message_);
  target_.Swap(&other->target_);
  std::swap(team_, other->team_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_BeastChat::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_BeastChat

// optional uint32 team = 1;
bool CDOTAUserMsg_BeastChat::has_team() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CDOTAUserMsg_BeastChat::set_has_team() {
  _has_bits_[0] |= 0x00000008u;
}
void CDOTAUserMsg_BeastChat::clear_has_team() {
  _has_bits_[0] &= ~0x00000008u;
}
void CDOTAUserMsg_BeastChat::clear_team() {
  team_ = 0u;
  clear_has_team();
}
::google::protobuf::uint32 CDOTAUserMsg_BeastChat::team() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_BeastChat.team)
  return team_;
}
void CDOTAUserMsg_BeastChat::set_team(::google::protobuf::uint32 value) {
  set_has_team();
  team_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_BeastChat.team)
}

// optional string format = 2;
bool CDOTAUserMsg_BeastChat::has_format() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_BeastChat::set_has_format() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_BeastChat::clear_has_format() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_BeastChat::clear_format() {
  format_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_format();
}
const ::std::string& CDOTAUserMsg_BeastChat::format() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_BeastChat.format)
  return format_.GetNoArena();
}
void CDOTAUserMsg_BeastChat::set_format(const ::std::string& value) {
  set_has_format();
  format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_BeastChat.format)
}
#if LANG_CXX11
void CDOTAUserMsg_BeastChat::set_format(::std::string&& value) {
  set_has_format();
  format_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDOTAUserMsg_BeastChat.format)
}
#endif
void CDOTAUserMsg_BeastChat::set_format(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_format();
  format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDOTAUserMsg_BeastChat.format)
}
void CDOTAUserMsg_BeastChat::set_format(const char* value, size_t size) {
  set_has_format();
  format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDOTAUserMsg_BeastChat.format)
}
::std::string* CDOTAUserMsg_BeastChat::mutable_format() {
  set_has_format();
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_BeastChat.format)
  return format_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDOTAUserMsg_BeastChat::release_format() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAUserMsg_BeastChat.format)
  clear_has_format();
  return format_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDOTAUserMsg_BeastChat::set_allocated_format(::std::string* format) {
  if (format != NULL) {
    set_has_format();
  } else {
    clear_has_format();
  }
  format_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), format);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAUserMsg_BeastChat.format)
}

// optional string message = 3;
bool CDOTAUserMsg_BeastChat::has_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAUserMsg_BeastChat::set_has_message() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAUserMsg_BeastChat::clear_has_message() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAUserMsg_BeastChat::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
const ::std::string& CDOTAUserMsg_BeastChat::message() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_BeastChat.message)
  return message_.GetNoArena();
}
void CDOTAUserMsg_BeastChat::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_BeastChat.message)
}
#if LANG_CXX11
void CDOTAUserMsg_BeastChat::set_message(::std::string&& value) {
  set_has_message();
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDOTAUserMsg_BeastChat.message)
}
#endif
void CDOTAUserMsg_BeastChat::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDOTAUserMsg_BeastChat.message)
}
void CDOTAUserMsg_BeastChat::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDOTAUserMsg_BeastChat.message)
}
::std::string* CDOTAUserMsg_BeastChat::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_BeastChat.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDOTAUserMsg_BeastChat::release_message() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAUserMsg_BeastChat.message)
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDOTAUserMsg_BeastChat::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAUserMsg_BeastChat.message)
}

// optional string target = 4;
bool CDOTAUserMsg_BeastChat::has_target() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDOTAUserMsg_BeastChat::set_has_target() {
  _has_bits_[0] |= 0x00000004u;
}
void CDOTAUserMsg_BeastChat::clear_has_target() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDOTAUserMsg_BeastChat::clear_target() {
  target_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_target();
}
const ::std::string& CDOTAUserMsg_BeastChat::target() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_BeastChat.target)
  return target_.GetNoArena();
}
void CDOTAUserMsg_BeastChat::set_target(const ::std::string& value) {
  set_has_target();
  target_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_BeastChat.target)
}
#if LANG_CXX11
void CDOTAUserMsg_BeastChat::set_target(::std::string&& value) {
  set_has_target();
  target_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDOTAUserMsg_BeastChat.target)
}
#endif
void CDOTAUserMsg_BeastChat::set_target(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_target();
  target_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDOTAUserMsg_BeastChat.target)
}
void CDOTAUserMsg_BeastChat::set_target(const char* value, size_t size) {
  set_has_target();
  target_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDOTAUserMsg_BeastChat.target)
}
::std::string* CDOTAUserMsg_BeastChat::mutable_target() {
  set_has_target();
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_BeastChat.target)
  return target_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDOTAUserMsg_BeastChat::release_target() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAUserMsg_BeastChat.target)
  clear_has_target();
  return target_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDOTAUserMsg_BeastChat::set_allocated_target(::std::string* target) {
  if (target != NULL) {
    set_has_target();
  } else {
    clear_has_target();
  }
  target_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), target);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAUserMsg_BeastChat.target)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_CustomHudElement_Create::kElementIdFieldNumber;
const int CDOTAUserMsg_CustomHudElement_Create::kLayoutFilenameFieldNumber;
const int CDOTAUserMsg_CustomHudElement_Create::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_CustomHudElement_Create::CDOTAUserMsg_CustomHudElement_Create()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_CustomHudElement_Create)
}
CDOTAUserMsg_CustomHudElement_Create::CDOTAUserMsg_CustomHudElement_Create(const CDOTAUserMsg_CustomHudElement_Create& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  element_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_element_id()) {
    element_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.element_id_);
  }
  layout_filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_layout_filename()) {
    layout_filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.layout_filename_);
  }
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_CustomHudElement_Create)
}

void CDOTAUserMsg_CustomHudElement_Create::SharedCtor() {
  _cached_size_ = 0;
  element_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  layout_filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CDOTAUserMsg_CustomHudElement_Create::~CDOTAUserMsg_CustomHudElement_Create() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_CustomHudElement_Create)
  SharedDtor();
}

void CDOTAUserMsg_CustomHudElement_Create::SharedDtor() {
  element_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  layout_filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CDOTAUserMsg_CustomHudElement_Create::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_CustomHudElement_Create::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_CustomHudElement_Create& CDOTAUserMsg_CustomHudElement_Create::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_CustomHudElement_Create* CDOTAUserMsg_CustomHudElement_Create::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_CustomHudElement_Create* n = new CDOTAUserMsg_CustomHudElement_Create;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_CustomHudElement_Create::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_CustomHudElement_Create)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_element_id()) {
      GOOGLE_DCHECK(!element_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*element_id_.UnsafeRawStringPointer())->clear();
    }
    if (has_layout_filename()) {
      GOOGLE_DCHECK(!layout_filename_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*layout_filename_.UnsafeRawStringPointer())->clear();
    }
    if (has_data()) {
      GOOGLE_DCHECK(!data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*data_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_CustomHudElement_Create::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_CustomHudElement_Create)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string element_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_element_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->element_id().data(), this->element_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDOTAUserMsg_CustomHudElement_Create.element_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string layout_filename = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_layout_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->layout_filename().data(), this->layout_filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDOTAUserMsg_CustomHudElement_Create.layout_filename");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_CustomHudElement_Create)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_CustomHudElement_Create)
  return false;
#undef DO_
}

void CDOTAUserMsg_CustomHudElement_Create::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_CustomHudElement_Create)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string element_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->element_id().data(), this->element_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAUserMsg_CustomHudElement_Create.element_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->element_id(), output);
  }

  // optional string layout_filename = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->layout_filename().data(), this->layout_filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAUserMsg_CustomHudElement_Create.layout_filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->layout_filename(), output);
  }

  // optional bytes data = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_CustomHudElement_Create)
}

::google::protobuf::uint8* CDOTAUserMsg_CustomHudElement_Create::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_CustomHudElement_Create)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string element_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->element_id().data(), this->element_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAUserMsg_CustomHudElement_Create.element_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->element_id(), target);
  }

  // optional string layout_filename = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->layout_filename().data(), this->layout_filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAUserMsg_CustomHudElement_Create.layout_filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->layout_filename(), target);
  }

  // optional bytes data = 3;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_CustomHudElement_Create)
  return target;
}

size_t CDOTAUserMsg_CustomHudElement_Create::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_CustomHudElement_Create)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string element_id = 1;
    if (has_element_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->element_id());
    }

    // optional string layout_filename = 2;
    if (has_layout_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->layout_filename());
    }

    // optional bytes data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_CustomHudElement_Create::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_CustomHudElement_Create)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_CustomHudElement_Create* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_CustomHudElement_Create>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_CustomHudElement_Create)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_CustomHudElement_Create)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_CustomHudElement_Create::MergeFrom(const CDOTAUserMsg_CustomHudElement_Create& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_CustomHudElement_Create)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_element_id();
      element_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.element_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_layout_filename();
      layout_filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.layout_filename_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
  }
}

void CDOTAUserMsg_CustomHudElement_Create::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_CustomHudElement_Create)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_CustomHudElement_Create::CopyFrom(const CDOTAUserMsg_CustomHudElement_Create& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_CustomHudElement_Create)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_CustomHudElement_Create::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_CustomHudElement_Create::Swap(CDOTAUserMsg_CustomHudElement_Create* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_CustomHudElement_Create::InternalSwap(CDOTAUserMsg_CustomHudElement_Create* other) {
  element_id_.Swap(&other->element_id_);
  layout_filename_.Swap(&other->layout_filename_);
  data_.Swap(&other->data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_CustomHudElement_Create::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_CustomHudElement_Create

// optional string element_id = 1;
bool CDOTAUserMsg_CustomHudElement_Create::has_element_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_CustomHudElement_Create::set_has_element_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_CustomHudElement_Create::clear_has_element_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_CustomHudElement_Create::clear_element_id() {
  element_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_element_id();
}
const ::std::string& CDOTAUserMsg_CustomHudElement_Create::element_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_CustomHudElement_Create.element_id)
  return element_id_.GetNoArena();
}
void CDOTAUserMsg_CustomHudElement_Create::set_element_id(const ::std::string& value) {
  set_has_element_id();
  element_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_CustomHudElement_Create.element_id)
}
#if LANG_CXX11
void CDOTAUserMsg_CustomHudElement_Create::set_element_id(::std::string&& value) {
  set_has_element_id();
  element_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDOTAUserMsg_CustomHudElement_Create.element_id)
}
#endif
void CDOTAUserMsg_CustomHudElement_Create::set_element_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_element_id();
  element_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDOTAUserMsg_CustomHudElement_Create.element_id)
}
void CDOTAUserMsg_CustomHudElement_Create::set_element_id(const char* value, size_t size) {
  set_has_element_id();
  element_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDOTAUserMsg_CustomHudElement_Create.element_id)
}
::std::string* CDOTAUserMsg_CustomHudElement_Create::mutable_element_id() {
  set_has_element_id();
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_CustomHudElement_Create.element_id)
  return element_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDOTAUserMsg_CustomHudElement_Create::release_element_id() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAUserMsg_CustomHudElement_Create.element_id)
  clear_has_element_id();
  return element_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDOTAUserMsg_CustomHudElement_Create::set_allocated_element_id(::std::string* element_id) {
  if (element_id != NULL) {
    set_has_element_id();
  } else {
    clear_has_element_id();
  }
  element_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), element_id);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAUserMsg_CustomHudElement_Create.element_id)
}

// optional string layout_filename = 2;
bool CDOTAUserMsg_CustomHudElement_Create::has_layout_filename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAUserMsg_CustomHudElement_Create::set_has_layout_filename() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAUserMsg_CustomHudElement_Create::clear_has_layout_filename() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAUserMsg_CustomHudElement_Create::clear_layout_filename() {
  layout_filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_layout_filename();
}
const ::std::string& CDOTAUserMsg_CustomHudElement_Create::layout_filename() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_CustomHudElement_Create.layout_filename)
  return layout_filename_.GetNoArena();
}
void CDOTAUserMsg_CustomHudElement_Create::set_layout_filename(const ::std::string& value) {
  set_has_layout_filename();
  layout_filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_CustomHudElement_Create.layout_filename)
}
#if LANG_CXX11
void CDOTAUserMsg_CustomHudElement_Create::set_layout_filename(::std::string&& value) {
  set_has_layout_filename();
  layout_filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDOTAUserMsg_CustomHudElement_Create.layout_filename)
}
#endif
void CDOTAUserMsg_CustomHudElement_Create::set_layout_filename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_layout_filename();
  layout_filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDOTAUserMsg_CustomHudElement_Create.layout_filename)
}
void CDOTAUserMsg_CustomHudElement_Create::set_layout_filename(const char* value, size_t size) {
  set_has_layout_filename();
  layout_filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDOTAUserMsg_CustomHudElement_Create.layout_filename)
}
::std::string* CDOTAUserMsg_CustomHudElement_Create::mutable_layout_filename() {
  set_has_layout_filename();
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_CustomHudElement_Create.layout_filename)
  return layout_filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDOTAUserMsg_CustomHudElement_Create::release_layout_filename() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAUserMsg_CustomHudElement_Create.layout_filename)
  clear_has_layout_filename();
  return layout_filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDOTAUserMsg_CustomHudElement_Create::set_allocated_layout_filename(::std::string* layout_filename) {
  if (layout_filename != NULL) {
    set_has_layout_filename();
  } else {
    clear_has_layout_filename();
  }
  layout_filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), layout_filename);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAUserMsg_CustomHudElement_Create.layout_filename)
}

// optional bytes data = 3;
bool CDOTAUserMsg_CustomHudElement_Create::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDOTAUserMsg_CustomHudElement_Create::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
void CDOTAUserMsg_CustomHudElement_Create::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDOTAUserMsg_CustomHudElement_Create::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
const ::std::string& CDOTAUserMsg_CustomHudElement_Create::data() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_CustomHudElement_Create.data)
  return data_.GetNoArena();
}
void CDOTAUserMsg_CustomHudElement_Create::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_CustomHudElement_Create.data)
}
#if LANG_CXX11
void CDOTAUserMsg_CustomHudElement_Create::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDOTAUserMsg_CustomHudElement_Create.data)
}
#endif
void CDOTAUserMsg_CustomHudElement_Create::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDOTAUserMsg_CustomHudElement_Create.data)
}
void CDOTAUserMsg_CustomHudElement_Create::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDOTAUserMsg_CustomHudElement_Create.data)
}
::std::string* CDOTAUserMsg_CustomHudElement_Create::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_CustomHudElement_Create.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDOTAUserMsg_CustomHudElement_Create::release_data() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAUserMsg_CustomHudElement_Create.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDOTAUserMsg_CustomHudElement_Create::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAUserMsg_CustomHudElement_Create.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_CustomHudElement_Modify::kElementIdFieldNumber;
const int CDOTAUserMsg_CustomHudElement_Modify::kModifyVisibleFieldNumber;
const int CDOTAUserMsg_CustomHudElement_Modify::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_CustomHudElement_Modify::CDOTAUserMsg_CustomHudElement_Modify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_CustomHudElement_Modify)
}
CDOTAUserMsg_CustomHudElement_Modify::CDOTAUserMsg_CustomHudElement_Modify(const CDOTAUserMsg_CustomHudElement_Modify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  element_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_element_id()) {
    element_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.element_id_);
  }
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  modify_visible_ = from.modify_visible_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_CustomHudElement_Modify)
}

void CDOTAUserMsg_CustomHudElement_Modify::SharedCtor() {
  _cached_size_ = 0;
  element_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  modify_visible_ = false;
}

CDOTAUserMsg_CustomHudElement_Modify::~CDOTAUserMsg_CustomHudElement_Modify() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_CustomHudElement_Modify)
  SharedDtor();
}

void CDOTAUserMsg_CustomHudElement_Modify::SharedDtor() {
  element_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CDOTAUserMsg_CustomHudElement_Modify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_CustomHudElement_Modify::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_CustomHudElement_Modify& CDOTAUserMsg_CustomHudElement_Modify::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_CustomHudElement_Modify* CDOTAUserMsg_CustomHudElement_Modify::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_CustomHudElement_Modify* n = new CDOTAUserMsg_CustomHudElement_Modify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_CustomHudElement_Modify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_CustomHudElement_Modify)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_element_id()) {
      GOOGLE_DCHECK(!element_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*element_id_.UnsafeRawStringPointer())->clear();
    }
    if (has_data()) {
      GOOGLE_DCHECK(!data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*data_.UnsafeRawStringPointer())->clear();
    }
  }
  modify_visible_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_CustomHudElement_Modify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_CustomHudElement_Modify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string element_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_element_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->element_id().data(), this->element_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDOTAUserMsg_CustomHudElement_Modify.element_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool modify_visible = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_modify_visible();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &modify_visible_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_CustomHudElement_Modify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_CustomHudElement_Modify)
  return false;
#undef DO_
}

void CDOTAUserMsg_CustomHudElement_Modify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_CustomHudElement_Modify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string element_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->element_id().data(), this->element_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAUserMsg_CustomHudElement_Modify.element_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->element_id(), output);
  }

  // optional bool modify_visible = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->modify_visible(), output);
  }

  // optional bytes data = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_CustomHudElement_Modify)
}

::google::protobuf::uint8* CDOTAUserMsg_CustomHudElement_Modify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_CustomHudElement_Modify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string element_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->element_id().data(), this->element_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAUserMsg_CustomHudElement_Modify.element_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->element_id(), target);
  }

  // optional bool modify_visible = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->modify_visible(), target);
  }

  // optional bytes data = 3;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_CustomHudElement_Modify)
  return target;
}

size_t CDOTAUserMsg_CustomHudElement_Modify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_CustomHudElement_Modify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string element_id = 1;
    if (has_element_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->element_id());
    }

    // optional bytes data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional bool modify_visible = 2;
    if (has_modify_visible()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_CustomHudElement_Modify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_CustomHudElement_Modify)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_CustomHudElement_Modify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_CustomHudElement_Modify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_CustomHudElement_Modify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_CustomHudElement_Modify)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_CustomHudElement_Modify::MergeFrom(const CDOTAUserMsg_CustomHudElement_Modify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_CustomHudElement_Modify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_element_id();
      element_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.element_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000004u) {
      modify_visible_ = from.modify_visible_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_CustomHudElement_Modify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_CustomHudElement_Modify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_CustomHudElement_Modify::CopyFrom(const CDOTAUserMsg_CustomHudElement_Modify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_CustomHudElement_Modify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_CustomHudElement_Modify::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_CustomHudElement_Modify::Swap(CDOTAUserMsg_CustomHudElement_Modify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_CustomHudElement_Modify::InternalSwap(CDOTAUserMsg_CustomHudElement_Modify* other) {
  element_id_.Swap(&other->element_id_);
  data_.Swap(&other->data_);
  std::swap(modify_visible_, other->modify_visible_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_CustomHudElement_Modify::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_CustomHudElement_Modify

// optional string element_id = 1;
bool CDOTAUserMsg_CustomHudElement_Modify::has_element_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_CustomHudElement_Modify::set_has_element_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_CustomHudElement_Modify::clear_has_element_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_CustomHudElement_Modify::clear_element_id() {
  element_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_element_id();
}
const ::std::string& CDOTAUserMsg_CustomHudElement_Modify::element_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_CustomHudElement_Modify.element_id)
  return element_id_.GetNoArena();
}
void CDOTAUserMsg_CustomHudElement_Modify::set_element_id(const ::std::string& value) {
  set_has_element_id();
  element_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_CustomHudElement_Modify.element_id)
}
#if LANG_CXX11
void CDOTAUserMsg_CustomHudElement_Modify::set_element_id(::std::string&& value) {
  set_has_element_id();
  element_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDOTAUserMsg_CustomHudElement_Modify.element_id)
}
#endif
void CDOTAUserMsg_CustomHudElement_Modify::set_element_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_element_id();
  element_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDOTAUserMsg_CustomHudElement_Modify.element_id)
}
void CDOTAUserMsg_CustomHudElement_Modify::set_element_id(const char* value, size_t size) {
  set_has_element_id();
  element_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDOTAUserMsg_CustomHudElement_Modify.element_id)
}
::std::string* CDOTAUserMsg_CustomHudElement_Modify::mutable_element_id() {
  set_has_element_id();
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_CustomHudElement_Modify.element_id)
  return element_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDOTAUserMsg_CustomHudElement_Modify::release_element_id() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAUserMsg_CustomHudElement_Modify.element_id)
  clear_has_element_id();
  return element_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDOTAUserMsg_CustomHudElement_Modify::set_allocated_element_id(::std::string* element_id) {
  if (element_id != NULL) {
    set_has_element_id();
  } else {
    clear_has_element_id();
  }
  element_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), element_id);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAUserMsg_CustomHudElement_Modify.element_id)
}

// optional bool modify_visible = 2;
bool CDOTAUserMsg_CustomHudElement_Modify::has_modify_visible() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDOTAUserMsg_CustomHudElement_Modify::set_has_modify_visible() {
  _has_bits_[0] |= 0x00000004u;
}
void CDOTAUserMsg_CustomHudElement_Modify::clear_has_modify_visible() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDOTAUserMsg_CustomHudElement_Modify::clear_modify_visible() {
  modify_visible_ = false;
  clear_has_modify_visible();
}
bool CDOTAUserMsg_CustomHudElement_Modify::modify_visible() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_CustomHudElement_Modify.modify_visible)
  return modify_visible_;
}
void CDOTAUserMsg_CustomHudElement_Modify::set_modify_visible(bool value) {
  set_has_modify_visible();
  modify_visible_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_CustomHudElement_Modify.modify_visible)
}

// optional bytes data = 3;
bool CDOTAUserMsg_CustomHudElement_Modify::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAUserMsg_CustomHudElement_Modify::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAUserMsg_CustomHudElement_Modify::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAUserMsg_CustomHudElement_Modify::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
const ::std::string& CDOTAUserMsg_CustomHudElement_Modify::data() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_CustomHudElement_Modify.data)
  return data_.GetNoArena();
}
void CDOTAUserMsg_CustomHudElement_Modify::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_CustomHudElement_Modify.data)
}
#if LANG_CXX11
void CDOTAUserMsg_CustomHudElement_Modify::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDOTAUserMsg_CustomHudElement_Modify.data)
}
#endif
void CDOTAUserMsg_CustomHudElement_Modify::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDOTAUserMsg_CustomHudElement_Modify.data)
}
void CDOTAUserMsg_CustomHudElement_Modify::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDOTAUserMsg_CustomHudElement_Modify.data)
}
::std::string* CDOTAUserMsg_CustomHudElement_Modify::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_CustomHudElement_Modify.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDOTAUserMsg_CustomHudElement_Modify::release_data() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAUserMsg_CustomHudElement_Modify.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDOTAUserMsg_CustomHudElement_Modify::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAUserMsg_CustomHudElement_Modify.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_CustomHudElement_Destroy::kElementIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_CustomHudElement_Destroy::CDOTAUserMsg_CustomHudElement_Destroy()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_CustomHudElement_Destroy)
}
CDOTAUserMsg_CustomHudElement_Destroy::CDOTAUserMsg_CustomHudElement_Destroy(const CDOTAUserMsg_CustomHudElement_Destroy& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  element_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_element_id()) {
    element_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.element_id_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_CustomHudElement_Destroy)
}

void CDOTAUserMsg_CustomHudElement_Destroy::SharedCtor() {
  _cached_size_ = 0;
  element_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CDOTAUserMsg_CustomHudElement_Destroy::~CDOTAUserMsg_CustomHudElement_Destroy() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_CustomHudElement_Destroy)
  SharedDtor();
}

void CDOTAUserMsg_CustomHudElement_Destroy::SharedDtor() {
  element_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CDOTAUserMsg_CustomHudElement_Destroy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_CustomHudElement_Destroy::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_CustomHudElement_Destroy& CDOTAUserMsg_CustomHudElement_Destroy::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_CustomHudElement_Destroy* CDOTAUserMsg_CustomHudElement_Destroy::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_CustomHudElement_Destroy* n = new CDOTAUserMsg_CustomHudElement_Destroy;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_CustomHudElement_Destroy::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_CustomHudElement_Destroy)
  if (has_element_id()) {
    GOOGLE_DCHECK(!element_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*element_id_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_CustomHudElement_Destroy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_CustomHudElement_Destroy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string element_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_element_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->element_id().data(), this->element_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDOTAUserMsg_CustomHudElement_Destroy.element_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_CustomHudElement_Destroy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_CustomHudElement_Destroy)
  return false;
#undef DO_
}

void CDOTAUserMsg_CustomHudElement_Destroy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_CustomHudElement_Destroy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string element_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->element_id().data(), this->element_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAUserMsg_CustomHudElement_Destroy.element_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->element_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_CustomHudElement_Destroy)
}

::google::protobuf::uint8* CDOTAUserMsg_CustomHudElement_Destroy::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_CustomHudElement_Destroy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string element_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->element_id().data(), this->element_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAUserMsg_CustomHudElement_Destroy.element_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->element_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_CustomHudElement_Destroy)
  return target;
}

size_t CDOTAUserMsg_CustomHudElement_Destroy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_CustomHudElement_Destroy)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional string element_id = 1;
  if (has_element_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->element_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_CustomHudElement_Destroy::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_CustomHudElement_Destroy)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_CustomHudElement_Destroy* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_CustomHudElement_Destroy>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_CustomHudElement_Destroy)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_CustomHudElement_Destroy)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_CustomHudElement_Destroy::MergeFrom(const CDOTAUserMsg_CustomHudElement_Destroy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_CustomHudElement_Destroy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_element_id()) {
    set_has_element_id();
    element_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.element_id_);
  }
}

void CDOTAUserMsg_CustomHudElement_Destroy::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_CustomHudElement_Destroy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_CustomHudElement_Destroy::CopyFrom(const CDOTAUserMsg_CustomHudElement_Destroy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_CustomHudElement_Destroy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_CustomHudElement_Destroy::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_CustomHudElement_Destroy::Swap(CDOTAUserMsg_CustomHudElement_Destroy* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_CustomHudElement_Destroy::InternalSwap(CDOTAUserMsg_CustomHudElement_Destroy* other) {
  element_id_.Swap(&other->element_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_CustomHudElement_Destroy::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_CustomHudElement_Destroy

// optional string element_id = 1;
bool CDOTAUserMsg_CustomHudElement_Destroy::has_element_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_CustomHudElement_Destroy::set_has_element_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_CustomHudElement_Destroy::clear_has_element_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_CustomHudElement_Destroy::clear_element_id() {
  element_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_element_id();
}
const ::std::string& CDOTAUserMsg_CustomHudElement_Destroy::element_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_CustomHudElement_Destroy.element_id)
  return element_id_.GetNoArena();
}
void CDOTAUserMsg_CustomHudElement_Destroy::set_element_id(const ::std::string& value) {
  set_has_element_id();
  element_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_CustomHudElement_Destroy.element_id)
}
#if LANG_CXX11
void CDOTAUserMsg_CustomHudElement_Destroy::set_element_id(::std::string&& value) {
  set_has_element_id();
  element_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDOTAUserMsg_CustomHudElement_Destroy.element_id)
}
#endif
void CDOTAUserMsg_CustomHudElement_Destroy::set_element_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_element_id();
  element_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDOTAUserMsg_CustomHudElement_Destroy.element_id)
}
void CDOTAUserMsg_CustomHudElement_Destroy::set_element_id(const char* value, size_t size) {
  set_has_element_id();
  element_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDOTAUserMsg_CustomHudElement_Destroy.element_id)
}
::std::string* CDOTAUserMsg_CustomHudElement_Destroy::mutable_element_id() {
  set_has_element_id();
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_CustomHudElement_Destroy.element_id)
  return element_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDOTAUserMsg_CustomHudElement_Destroy::release_element_id() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAUserMsg_CustomHudElement_Destroy.element_id)
  clear_has_element_id();
  return element_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDOTAUserMsg_CustomHudElement_Destroy::set_allocated_element_id(::std::string* element_id) {
  if (element_id != NULL) {
    set_has_element_id();
  } else {
    clear_has_element_id();
  }
  element_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), element_id);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAUserMsg_CustomHudElement_Destroy.element_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_CompendiumStatePlayer::kPlayerIdFieldNumber;
const int CDOTAUserMsg_CompendiumStatePlayer::kLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_CompendiumStatePlayer::CDOTAUserMsg_CompendiumStatePlayer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_CompendiumStatePlayer)
}
CDOTAUserMsg_CompendiumStatePlayer::CDOTAUserMsg_CompendiumStatePlayer(const CDOTAUserMsg_CompendiumStatePlayer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&player_id_, &from.player_id_,
    reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&player_id_) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_CompendiumStatePlayer)
}

void CDOTAUserMsg_CompendiumStatePlayer::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&player_id_, 0, reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&player_id_) + sizeof(level_));
}

CDOTAUserMsg_CompendiumStatePlayer::~CDOTAUserMsg_CompendiumStatePlayer() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_CompendiumStatePlayer)
  SharedDtor();
}

void CDOTAUserMsg_CompendiumStatePlayer::SharedDtor() {
}

void CDOTAUserMsg_CompendiumStatePlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_CompendiumStatePlayer::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_CompendiumStatePlayer& CDOTAUserMsg_CompendiumStatePlayer::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_CompendiumStatePlayer* CDOTAUserMsg_CompendiumStatePlayer::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_CompendiumStatePlayer* n = new CDOTAUserMsg_CompendiumStatePlayer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_CompendiumStatePlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_CompendiumStatePlayer)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&player_id_, 0, reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&player_id_) + sizeof(level_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_CompendiumStatePlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_CompendiumStatePlayer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_player_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 level = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_CompendiumStatePlayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_CompendiumStatePlayer)
  return false;
#undef DO_
}

void CDOTAUserMsg_CompendiumStatePlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_CompendiumStatePlayer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_id(), output);
  }

  // optional uint32 level = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_CompendiumStatePlayer)
}

::google::protobuf::uint8* CDOTAUserMsg_CompendiumStatePlayer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_CompendiumStatePlayer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_id(), target);
  }

  // optional uint32 level = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_CompendiumStatePlayer)
  return target;
}

size_t CDOTAUserMsg_CompendiumStatePlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_CompendiumStatePlayer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_id());
    }

    // optional uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_CompendiumStatePlayer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_CompendiumStatePlayer)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_CompendiumStatePlayer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_CompendiumStatePlayer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_CompendiumStatePlayer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_CompendiumStatePlayer)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_CompendiumStatePlayer::MergeFrom(const CDOTAUserMsg_CompendiumStatePlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_CompendiumStatePlayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      player_id_ = from.player_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      level_ = from.level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_CompendiumStatePlayer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_CompendiumStatePlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_CompendiumStatePlayer::CopyFrom(const CDOTAUserMsg_CompendiumStatePlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_CompendiumStatePlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_CompendiumStatePlayer::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_CompendiumStatePlayer::Swap(CDOTAUserMsg_CompendiumStatePlayer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_CompendiumStatePlayer::InternalSwap(CDOTAUserMsg_CompendiumStatePlayer* other) {
  std::swap(player_id_, other->player_id_);
  std::swap(level_, other->level_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_CompendiumStatePlayer::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_CompendiumStatePlayer

// optional uint32 player_id = 1;
bool CDOTAUserMsg_CompendiumStatePlayer::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_CompendiumStatePlayer::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_CompendiumStatePlayer::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_CompendiumStatePlayer::clear_player_id() {
  player_id_ = 0u;
  clear_has_player_id();
}
::google::protobuf::uint32 CDOTAUserMsg_CompendiumStatePlayer::player_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_CompendiumStatePlayer.player_id)
  return player_id_;
}
void CDOTAUserMsg_CompendiumStatePlayer::set_player_id(::google::protobuf::uint32 value) {
  set_has_player_id();
  player_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_CompendiumStatePlayer.player_id)
}

// optional uint32 level = 2;
bool CDOTAUserMsg_CompendiumStatePlayer::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAUserMsg_CompendiumStatePlayer::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAUserMsg_CompendiumStatePlayer::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAUserMsg_CompendiumStatePlayer::clear_level() {
  level_ = 0u;
  clear_has_level();
}
::google::protobuf::uint32 CDOTAUserMsg_CompendiumStatePlayer::level() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_CompendiumStatePlayer.level)
  return level_;
}
void CDOTAUserMsg_CompendiumStatePlayer::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_CompendiumStatePlayer.level)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_CompendiumState::kCompendiumPlayersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_CompendiumState::CDOTAUserMsg_CompendiumState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_CompendiumState)
}
CDOTAUserMsg_CompendiumState::CDOTAUserMsg_CompendiumState(const CDOTAUserMsg_CompendiumState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      compendium_players_(from.compendium_players_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_CompendiumState)
}

void CDOTAUserMsg_CompendiumState::SharedCtor() {
  _cached_size_ = 0;
}

CDOTAUserMsg_CompendiumState::~CDOTAUserMsg_CompendiumState() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_CompendiumState)
  SharedDtor();
}

void CDOTAUserMsg_CompendiumState::SharedDtor() {
}

void CDOTAUserMsg_CompendiumState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_CompendiumState::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_CompendiumState& CDOTAUserMsg_CompendiumState::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_CompendiumState* CDOTAUserMsg_CompendiumState::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_CompendiumState* n = new CDOTAUserMsg_CompendiumState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_CompendiumState::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_CompendiumState)
  compendium_players_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_CompendiumState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_CompendiumState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CDOTAUserMsg_CompendiumStatePlayer compendium_players = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_compendium_players()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_CompendiumState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_CompendiumState)
  return false;
#undef DO_
}

void CDOTAUserMsg_CompendiumState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_CompendiumState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CDOTAUserMsg_CompendiumStatePlayer compendium_players = 1;
  for (unsigned int i = 0, n = this->compendium_players_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->compendium_players(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_CompendiumState)
}

::google::protobuf::uint8* CDOTAUserMsg_CompendiumState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_CompendiumState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CDOTAUserMsg_CompendiumStatePlayer compendium_players = 1;
  for (unsigned int i = 0, n = this->compendium_players_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->compendium_players(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_CompendiumState)
  return target;
}

size_t CDOTAUserMsg_CompendiumState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_CompendiumState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CDOTAUserMsg_CompendiumStatePlayer compendium_players = 1;
  {
    unsigned int count = this->compendium_players_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->compendium_players(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_CompendiumState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_CompendiumState)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_CompendiumState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_CompendiumState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_CompendiumState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_CompendiumState)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_CompendiumState::MergeFrom(const CDOTAUserMsg_CompendiumState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_CompendiumState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  compendium_players_.MergeFrom(from.compendium_players_);
}

void CDOTAUserMsg_CompendiumState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_CompendiumState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_CompendiumState::CopyFrom(const CDOTAUserMsg_CompendiumState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_CompendiumState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_CompendiumState::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_CompendiumState::Swap(CDOTAUserMsg_CompendiumState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_CompendiumState::InternalSwap(CDOTAUserMsg_CompendiumState* other) {
  compendium_players_.InternalSwap(&other->compendium_players_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_CompendiumState::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_CompendiumState

// repeated .proto.dota.CDOTAUserMsg_CompendiumStatePlayer compendium_players = 1;
int CDOTAUserMsg_CompendiumState::compendium_players_size() const {
  return compendium_players_.size();
}
void CDOTAUserMsg_CompendiumState::clear_compendium_players() {
  compendium_players_.Clear();
}
const ::proto::dota::CDOTAUserMsg_CompendiumStatePlayer& CDOTAUserMsg_CompendiumState::compendium_players(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_CompendiumState.compendium_players)
  return compendium_players_.Get(index);
}
::proto::dota::CDOTAUserMsg_CompendiumStatePlayer* CDOTAUserMsg_CompendiumState::mutable_compendium_players(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_CompendiumState.compendium_players)
  return compendium_players_.Mutable(index);
}
::proto::dota::CDOTAUserMsg_CompendiumStatePlayer* CDOTAUserMsg_CompendiumState::add_compendium_players() {
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAUserMsg_CompendiumState.compendium_players)
  return compendium_players_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAUserMsg_CompendiumStatePlayer >*
CDOTAUserMsg_CompendiumState::mutable_compendium_players() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTAUserMsg_CompendiumState.compendium_players)
  return &compendium_players_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAUserMsg_CompendiumStatePlayer >&
CDOTAUserMsg_CompendiumState::compendium_players() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTAUserMsg_CompendiumState.compendium_players)
  return compendium_players_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_ProjectionAbility::kAbilityIdFieldNumber;
const int CDOTAUserMsg_ProjectionAbility::kCasterEntIndexFieldNumber;
const int CDOTAUserMsg_ProjectionAbility::kCasterTeamFieldNumber;
const int CDOTAUserMsg_ProjectionAbility::kChannelEndFieldNumber;
const int CDOTAUserMsg_ProjectionAbility::kOriginFieldNumber;
const int CDOTAUserMsg_ProjectionAbility::kTrackCasterOnlyFieldNumber;
const int CDOTAUserMsg_ProjectionAbility::kEndTimeFieldNumber;
const int CDOTAUserMsg_ProjectionAbility::kVictimEntIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_ProjectionAbility::CDOTAUserMsg_ProjectionAbility()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_ProjectionAbility)
}
CDOTAUserMsg_ProjectionAbility::CDOTAUserMsg_ProjectionAbility(const CDOTAUserMsg_ProjectionAbility& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_origin()) {
    origin_ = new ::proto::dota::CMsgVector(*from.origin_);
  } else {
    origin_ = NULL;
  }
  ::memcpy(&ability_id_, &from.ability_id_,
    reinterpret_cast<char*>(&victim_ent_index_) -
    reinterpret_cast<char*>(&ability_id_) + sizeof(victim_ent_index_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_ProjectionAbility)
}

void CDOTAUserMsg_ProjectionAbility::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&origin_, 0, reinterpret_cast<char*>(&victim_ent_index_) -
    reinterpret_cast<char*>(&origin_) + sizeof(victim_ent_index_));
}

CDOTAUserMsg_ProjectionAbility::~CDOTAUserMsg_ProjectionAbility() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_ProjectionAbility)
  SharedDtor();
}

void CDOTAUserMsg_ProjectionAbility::SharedDtor() {
  if (this != internal_default_instance()) {
    delete origin_;
  }
}

void CDOTAUserMsg_ProjectionAbility::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_ProjectionAbility::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_ProjectionAbility& CDOTAUserMsg_ProjectionAbility::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_ProjectionAbility* CDOTAUserMsg_ProjectionAbility::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_ProjectionAbility* n = new CDOTAUserMsg_ProjectionAbility;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_ProjectionAbility::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_ProjectionAbility)
  if (has_origin()) {
    GOOGLE_DCHECK(origin_ != NULL);
    origin_->::proto::dota::CMsgVector::Clear();
  }
  if (_has_bits_[0 / 32] & 254u) {
    ::memset(&ability_id_, 0, reinterpret_cast<char*>(&victim_ent_index_) -
      reinterpret_cast<char*>(&ability_id_) + sizeof(victim_ent_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_ProjectionAbility::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_ProjectionAbility)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ability_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_ability_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ability_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 caster_ent_index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_caster_ent_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &caster_ent_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 caster_team = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_caster_team();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &caster_team_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool channel_end = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_channel_end();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &channel_end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgVector origin = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_origin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool track_caster_only = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_track_caster_only();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &track_caster_only_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float end_time = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u)) {
          set_has_end_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &end_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 victim_ent_index = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_victim_ent_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &victim_ent_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_ProjectionAbility)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_ProjectionAbility)
  return false;
#undef DO_
}

void CDOTAUserMsg_ProjectionAbility::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_ProjectionAbility)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ability_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ability_id(), output);
  }

  // optional int32 caster_ent_index = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->caster_ent_index(), output);
  }

  // optional int32 caster_team = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->caster_team(), output);
  }

  // optional bool channel_end = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->channel_end(), output);
  }

  // optional .proto.dota.CMsgVector origin = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->origin_, output);
  }

  // optional bool track_caster_only = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->track_caster_only(), output);
  }

  // optional float end_time = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->end_time(), output);
  }

  // optional int32 victim_ent_index = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->victim_ent_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_ProjectionAbility)
}

::google::protobuf::uint8* CDOTAUserMsg_ProjectionAbility::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_ProjectionAbility)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ability_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ability_id(), target);
  }

  // optional int32 caster_ent_index = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->caster_ent_index(), target);
  }

  // optional int32 caster_team = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->caster_team(), target);
  }

  // optional bool channel_end = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->channel_end(), target);
  }

  // optional .proto.dota.CMsgVector origin = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->origin_, deterministic, target);
  }

  // optional bool track_caster_only = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->track_caster_only(), target);
  }

  // optional float end_time = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->end_time(), target);
  }

  // optional int32 victim_ent_index = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->victim_ent_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_ProjectionAbility)
  return target;
}

size_t CDOTAUserMsg_ProjectionAbility::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_ProjectionAbility)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .proto.dota.CMsgVector origin = 5;
    if (has_origin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->origin_);
    }

    // optional uint32 ability_id = 1;
    if (has_ability_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ability_id());
    }

    // optional int32 caster_ent_index = 2;
    if (has_caster_ent_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->caster_ent_index());
    }

    // optional int32 caster_team = 3;
    if (has_caster_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->caster_team());
    }

    // optional bool channel_end = 4;
    if (has_channel_end()) {
      total_size += 1 + 1;
    }

    // optional bool track_caster_only = 6;
    if (has_track_caster_only()) {
      total_size += 1 + 1;
    }

    // optional float end_time = 7;
    if (has_end_time()) {
      total_size += 1 + 4;
    }

    // optional int32 victim_ent_index = 8;
    if (has_victim_ent_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->victim_ent_index());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_ProjectionAbility::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_ProjectionAbility)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_ProjectionAbility* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_ProjectionAbility>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_ProjectionAbility)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_ProjectionAbility)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_ProjectionAbility::MergeFrom(const CDOTAUserMsg_ProjectionAbility& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_ProjectionAbility)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_origin()->::proto::dota::CMsgVector::MergeFrom(from.origin());
    }
    if (cached_has_bits & 0x00000002u) {
      ability_id_ = from.ability_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      caster_ent_index_ = from.caster_ent_index_;
    }
    if (cached_has_bits & 0x00000008u) {
      caster_team_ = from.caster_team_;
    }
    if (cached_has_bits & 0x00000010u) {
      channel_end_ = from.channel_end_;
    }
    if (cached_has_bits & 0x00000020u) {
      track_caster_only_ = from.track_caster_only_;
    }
    if (cached_has_bits & 0x00000040u) {
      end_time_ = from.end_time_;
    }
    if (cached_has_bits & 0x00000080u) {
      victim_ent_index_ = from.victim_ent_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_ProjectionAbility::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_ProjectionAbility)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_ProjectionAbility::CopyFrom(const CDOTAUserMsg_ProjectionAbility& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_ProjectionAbility)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ProjectionAbility::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_ProjectionAbility::Swap(CDOTAUserMsg_ProjectionAbility* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_ProjectionAbility::InternalSwap(CDOTAUserMsg_ProjectionAbility* other) {
  std::swap(origin_, other->origin_);
  std::swap(ability_id_, other->ability_id_);
  std::swap(caster_ent_index_, other->caster_ent_index_);
  std::swap(caster_team_, other->caster_team_);
  std::swap(channel_end_, other->channel_end_);
  std::swap(track_caster_only_, other->track_caster_only_);
  std::swap(end_time_, other->end_time_);
  std::swap(victim_ent_index_, other->victim_ent_index_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_ProjectionAbility::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_ProjectionAbility

// optional uint32 ability_id = 1;
bool CDOTAUserMsg_ProjectionAbility::has_ability_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAUserMsg_ProjectionAbility::set_has_ability_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAUserMsg_ProjectionAbility::clear_has_ability_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAUserMsg_ProjectionAbility::clear_ability_id() {
  ability_id_ = 0u;
  clear_has_ability_id();
}
::google::protobuf::uint32 CDOTAUserMsg_ProjectionAbility::ability_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ProjectionAbility.ability_id)
  return ability_id_;
}
void CDOTAUserMsg_ProjectionAbility::set_ability_id(::google::protobuf::uint32 value) {
  set_has_ability_id();
  ability_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_ProjectionAbility.ability_id)
}

// optional int32 caster_ent_index = 2;
bool CDOTAUserMsg_ProjectionAbility::has_caster_ent_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDOTAUserMsg_ProjectionAbility::set_has_caster_ent_index() {
  _has_bits_[0] |= 0x00000004u;
}
void CDOTAUserMsg_ProjectionAbility::clear_has_caster_ent_index() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDOTAUserMsg_ProjectionAbility::clear_caster_ent_index() {
  caster_ent_index_ = 0;
  clear_has_caster_ent_index();
}
::google::protobuf::int32 CDOTAUserMsg_ProjectionAbility::caster_ent_index() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ProjectionAbility.caster_ent_index)
  return caster_ent_index_;
}
void CDOTAUserMsg_ProjectionAbility::set_caster_ent_index(::google::protobuf::int32 value) {
  set_has_caster_ent_index();
  caster_ent_index_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_ProjectionAbility.caster_ent_index)
}

// optional int32 caster_team = 3;
bool CDOTAUserMsg_ProjectionAbility::has_caster_team() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CDOTAUserMsg_ProjectionAbility::set_has_caster_team() {
  _has_bits_[0] |= 0x00000008u;
}
void CDOTAUserMsg_ProjectionAbility::clear_has_caster_team() {
  _has_bits_[0] &= ~0x00000008u;
}
void CDOTAUserMsg_ProjectionAbility::clear_caster_team() {
  caster_team_ = 0;
  clear_has_caster_team();
}
::google::protobuf::int32 CDOTAUserMsg_ProjectionAbility::caster_team() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ProjectionAbility.caster_team)
  return caster_team_;
}
void CDOTAUserMsg_ProjectionAbility::set_caster_team(::google::protobuf::int32 value) {
  set_has_caster_team();
  caster_team_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_ProjectionAbility.caster_team)
}

// optional bool channel_end = 4;
bool CDOTAUserMsg_ProjectionAbility::has_channel_end() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CDOTAUserMsg_ProjectionAbility::set_has_channel_end() {
  _has_bits_[0] |= 0x00000010u;
}
void CDOTAUserMsg_ProjectionAbility::clear_has_channel_end() {
  _has_bits_[0] &= ~0x00000010u;
}
void CDOTAUserMsg_ProjectionAbility::clear_channel_end() {
  channel_end_ = false;
  clear_has_channel_end();
}
bool CDOTAUserMsg_ProjectionAbility::channel_end() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ProjectionAbility.channel_end)
  return channel_end_;
}
void CDOTAUserMsg_ProjectionAbility::set_channel_end(bool value) {
  set_has_channel_end();
  channel_end_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_ProjectionAbility.channel_end)
}

// optional .proto.dota.CMsgVector origin = 5;
bool CDOTAUserMsg_ProjectionAbility::has_origin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_ProjectionAbility::set_has_origin() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_ProjectionAbility::clear_has_origin() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_ProjectionAbility::clear_origin() {
  if (origin_ != NULL) origin_->::proto::dota::CMsgVector::Clear();
  clear_has_origin();
}
const ::proto::dota::CMsgVector& CDOTAUserMsg_ProjectionAbility::origin() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ProjectionAbility.origin)
  return origin_ != NULL ? *origin_
                         : *::proto::dota::CMsgVector::internal_default_instance();
}
::proto::dota::CMsgVector* CDOTAUserMsg_ProjectionAbility::mutable_origin() {
  set_has_origin();
  if (origin_ == NULL) {
    origin_ = new ::proto::dota::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_ProjectionAbility.origin)
  return origin_;
}
::proto::dota::CMsgVector* CDOTAUserMsg_ProjectionAbility::release_origin() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAUserMsg_ProjectionAbility.origin)
  clear_has_origin();
  ::proto::dota::CMsgVector* temp = origin_;
  origin_ = NULL;
  return temp;
}
void CDOTAUserMsg_ProjectionAbility::set_allocated_origin(::proto::dota::CMsgVector* origin) {
  delete origin_;
  origin_ = origin;
  if (origin) {
    set_has_origin();
  } else {
    clear_has_origin();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAUserMsg_ProjectionAbility.origin)
}

// optional bool track_caster_only = 6;
bool CDOTAUserMsg_ProjectionAbility::has_track_caster_only() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CDOTAUserMsg_ProjectionAbility::set_has_track_caster_only() {
  _has_bits_[0] |= 0x00000020u;
}
void CDOTAUserMsg_ProjectionAbility::clear_has_track_caster_only() {
  _has_bits_[0] &= ~0x00000020u;
}
void CDOTAUserMsg_ProjectionAbility::clear_track_caster_only() {
  track_caster_only_ = false;
  clear_has_track_caster_only();
}
bool CDOTAUserMsg_ProjectionAbility::track_caster_only() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ProjectionAbility.track_caster_only)
  return track_caster_only_;
}
void CDOTAUserMsg_ProjectionAbility::set_track_caster_only(bool value) {
  set_has_track_caster_only();
  track_caster_only_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_ProjectionAbility.track_caster_only)
}

// optional float end_time = 7;
bool CDOTAUserMsg_ProjectionAbility::has_end_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CDOTAUserMsg_ProjectionAbility::set_has_end_time() {
  _has_bits_[0] |= 0x00000040u;
}
void CDOTAUserMsg_ProjectionAbility::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000040u;
}
void CDOTAUserMsg_ProjectionAbility::clear_end_time() {
  end_time_ = 0;
  clear_has_end_time();
}
float CDOTAUserMsg_ProjectionAbility::end_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ProjectionAbility.end_time)
  return end_time_;
}
void CDOTAUserMsg_ProjectionAbility::set_end_time(float value) {
  set_has_end_time();
  end_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_ProjectionAbility.end_time)
}

// optional int32 victim_ent_index = 8;
bool CDOTAUserMsg_ProjectionAbility::has_victim_ent_index() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CDOTAUserMsg_ProjectionAbility::set_has_victim_ent_index() {
  _has_bits_[0] |= 0x00000080u;
}
void CDOTAUserMsg_ProjectionAbility::clear_has_victim_ent_index() {
  _has_bits_[0] &= ~0x00000080u;
}
void CDOTAUserMsg_ProjectionAbility::clear_victim_ent_index() {
  victim_ent_index_ = 0;
  clear_has_victim_ent_index();
}
::google::protobuf::int32 CDOTAUserMsg_ProjectionAbility::victim_ent_index() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ProjectionAbility.victim_ent_index)
  return victim_ent_index_;
}
void CDOTAUserMsg_ProjectionAbility::set_victim_ent_index(::google::protobuf::int32 value) {
  set_has_victim_ent_index();
  victim_ent_index_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_ProjectionAbility.victim_ent_index)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_ProjectionEvent::kEventIdFieldNumber;
const int CDOTAUserMsg_ProjectionEvent::kTeamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_ProjectionEvent::CDOTAUserMsg_ProjectionEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_ProjectionEvent)
}
CDOTAUserMsg_ProjectionEvent::CDOTAUserMsg_ProjectionEvent(const CDOTAUserMsg_ProjectionEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&event_id_, &from.event_id_,
    reinterpret_cast<char*>(&team_) -
    reinterpret_cast<char*>(&event_id_) + sizeof(team_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_ProjectionEvent)
}

void CDOTAUserMsg_ProjectionEvent::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&event_id_, 0, reinterpret_cast<char*>(&team_) -
    reinterpret_cast<char*>(&event_id_) + sizeof(team_));
}

CDOTAUserMsg_ProjectionEvent::~CDOTAUserMsg_ProjectionEvent() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_ProjectionEvent)
  SharedDtor();
}

void CDOTAUserMsg_ProjectionEvent::SharedDtor() {
}

void CDOTAUserMsg_ProjectionEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_ProjectionEvent::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_ProjectionEvent& CDOTAUserMsg_ProjectionEvent::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_ProjectionEvent* CDOTAUserMsg_ProjectionEvent::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_ProjectionEvent* n = new CDOTAUserMsg_ProjectionEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_ProjectionEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_ProjectionEvent)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&event_id_, 0, reinterpret_cast<char*>(&team_) -
      reinterpret_cast<char*>(&event_id_) + sizeof(team_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_ProjectionEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_ProjectionEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.EProjectionEvent event_id = 1 [default = ePE_FirstBlood];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::EProjectionEvent_IsValid(value)) {
            set_event_id(static_cast< ::proto::dota::EProjectionEvent >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_team();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_ProjectionEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_ProjectionEvent)
  return false;
#undef DO_
}

void CDOTAUserMsg_ProjectionEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_ProjectionEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.EProjectionEvent event_id = 1 [default = ePE_FirstBlood];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->event_id(), output);
  }

  // optional uint32 team = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->team(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_ProjectionEvent)
}

::google::protobuf::uint8* CDOTAUserMsg_ProjectionEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_ProjectionEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.EProjectionEvent event_id = 1 [default = ePE_FirstBlood];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->event_id(), target);
  }

  // optional uint32 team = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->team(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_ProjectionEvent)
  return target;
}

size_t CDOTAUserMsg_ProjectionEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_ProjectionEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .proto.dota.EProjectionEvent event_id = 1 [default = ePE_FirstBlood];
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->event_id());
    }

    // optional uint32 team = 2;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_ProjectionEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_ProjectionEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_ProjectionEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_ProjectionEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_ProjectionEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_ProjectionEvent)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_ProjectionEvent::MergeFrom(const CDOTAUserMsg_ProjectionEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_ProjectionEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      event_id_ = from.event_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      team_ = from.team_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_ProjectionEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_ProjectionEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_ProjectionEvent::CopyFrom(const CDOTAUserMsg_ProjectionEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_ProjectionEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ProjectionEvent::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_ProjectionEvent::Swap(CDOTAUserMsg_ProjectionEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_ProjectionEvent::InternalSwap(CDOTAUserMsg_ProjectionEvent* other) {
  std::swap(event_id_, other->event_id_);
  std::swap(team_, other->team_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_ProjectionEvent::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_ProjectionEvent

// optional .proto.dota.EProjectionEvent event_id = 1 [default = ePE_FirstBlood];
bool CDOTAUserMsg_ProjectionEvent::has_event_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_ProjectionEvent::set_has_event_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_ProjectionEvent::clear_has_event_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_ProjectionEvent::clear_event_id() {
  event_id_ = 0;
  clear_has_event_id();
}
::proto::dota::EProjectionEvent CDOTAUserMsg_ProjectionEvent::event_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ProjectionEvent.event_id)
  return static_cast< ::proto::dota::EProjectionEvent >(event_id_);
}
void CDOTAUserMsg_ProjectionEvent::set_event_id(::proto::dota::EProjectionEvent value) {
  assert(::proto::dota::EProjectionEvent_IsValid(value));
  set_has_event_id();
  event_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_ProjectionEvent.event_id)
}

// optional uint32 team = 2;
bool CDOTAUserMsg_ProjectionEvent::has_team() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAUserMsg_ProjectionEvent::set_has_team() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAUserMsg_ProjectionEvent::clear_has_team() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAUserMsg_ProjectionEvent::clear_team() {
  team_ = 0u;
  clear_has_team();
}
::google::protobuf::uint32 CDOTAUserMsg_ProjectionEvent::team() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ProjectionEvent.team)
  return team_;
}
void CDOTAUserMsg_ProjectionEvent::set_team(::google::protobuf::uint32 value) {
  set_has_team();
  team_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_ProjectionEvent.team)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_XPAlert::kPlayerIdFieldNumber;
const int CDOTAUserMsg_XPAlert::kTargetEntindexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_XPAlert::CDOTAUserMsg_XPAlert()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_XPAlert)
}
CDOTAUserMsg_XPAlert::CDOTAUserMsg_XPAlert(const CDOTAUserMsg_XPAlert& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&player_id_, &from.player_id_,
    reinterpret_cast<char*>(&target_entindex_) -
    reinterpret_cast<char*>(&player_id_) + sizeof(target_entindex_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_XPAlert)
}

void CDOTAUserMsg_XPAlert::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&player_id_, 0, reinterpret_cast<char*>(&target_entindex_) -
    reinterpret_cast<char*>(&player_id_) + sizeof(target_entindex_));
}

CDOTAUserMsg_XPAlert::~CDOTAUserMsg_XPAlert() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_XPAlert)
  SharedDtor();
}

void CDOTAUserMsg_XPAlert::SharedDtor() {
}

void CDOTAUserMsg_XPAlert::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_XPAlert::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_XPAlert& CDOTAUserMsg_XPAlert::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_XPAlert* CDOTAUserMsg_XPAlert::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_XPAlert* n = new CDOTAUserMsg_XPAlert;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_XPAlert::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_XPAlert)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&player_id_, 0, reinterpret_cast<char*>(&target_entindex_) -
      reinterpret_cast<char*>(&player_id_) + sizeof(target_entindex_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_XPAlert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_XPAlert)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_player_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 target_entindex = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_target_entindex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_entindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_XPAlert)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_XPAlert)
  return false;
#undef DO_
}

void CDOTAUserMsg_XPAlert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_XPAlert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_id(), output);
  }

  // optional uint32 target_entindex = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->target_entindex(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_XPAlert)
}

::google::protobuf::uint8* CDOTAUserMsg_XPAlert::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_XPAlert)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_id(), target);
  }

  // optional uint32 target_entindex = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->target_entindex(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_XPAlert)
  return target;
}

size_t CDOTAUserMsg_XPAlert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_XPAlert)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_id());
    }

    // optional uint32 target_entindex = 2;
    if (has_target_entindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_entindex());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_XPAlert::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_XPAlert)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_XPAlert* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_XPAlert>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_XPAlert)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_XPAlert)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_XPAlert::MergeFrom(const CDOTAUserMsg_XPAlert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_XPAlert)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      player_id_ = from.player_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      target_entindex_ = from.target_entindex_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_XPAlert::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_XPAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_XPAlert::CopyFrom(const CDOTAUserMsg_XPAlert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_XPAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_XPAlert::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_XPAlert::Swap(CDOTAUserMsg_XPAlert* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_XPAlert::InternalSwap(CDOTAUserMsg_XPAlert* other) {
  std::swap(player_id_, other->player_id_);
  std::swap(target_entindex_, other->target_entindex_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_XPAlert::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_XPAlert

// optional uint32 player_id = 1;
bool CDOTAUserMsg_XPAlert::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_XPAlert::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_XPAlert::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_XPAlert::clear_player_id() {
  player_id_ = 0u;
  clear_has_player_id();
}
::google::protobuf::uint32 CDOTAUserMsg_XPAlert::player_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_XPAlert.player_id)
  return player_id_;
}
void CDOTAUserMsg_XPAlert::set_player_id(::google::protobuf::uint32 value) {
  set_has_player_id();
  player_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_XPAlert.player_id)
}

// optional uint32 target_entindex = 2;
bool CDOTAUserMsg_XPAlert::has_target_entindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAUserMsg_XPAlert::set_has_target_entindex() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAUserMsg_XPAlert::clear_has_target_entindex() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAUserMsg_XPAlert::clear_target_entindex() {
  target_entindex_ = 0u;
  clear_has_target_entindex();
}
::google::protobuf::uint32 CDOTAUserMsg_XPAlert::target_entindex() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_XPAlert.target_entindex)
  return target_entindex_;
}
void CDOTAUserMsg_XPAlert::set_target_entindex(::google::protobuf::uint32 value) {
  set_has_target_entindex();
  target_entindex_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_XPAlert.target_entindex)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_UpdateQuestProgress::CDOTAUserMsg_UpdateQuestProgress()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_UpdateQuestProgress)
}
CDOTAUserMsg_UpdateQuestProgress::CDOTAUserMsg_UpdateQuestProgress(const CDOTAUserMsg_UpdateQuestProgress& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_UpdateQuestProgress)
}

void CDOTAUserMsg_UpdateQuestProgress::SharedCtor() {
  _cached_size_ = 0;
}

CDOTAUserMsg_UpdateQuestProgress::~CDOTAUserMsg_UpdateQuestProgress() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_UpdateQuestProgress)
  SharedDtor();
}

void CDOTAUserMsg_UpdateQuestProgress::SharedDtor() {
}

void CDOTAUserMsg_UpdateQuestProgress::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_UpdateQuestProgress::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_UpdateQuestProgress& CDOTAUserMsg_UpdateQuestProgress::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_UpdateQuestProgress* CDOTAUserMsg_UpdateQuestProgress::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_UpdateQuestProgress* n = new CDOTAUserMsg_UpdateQuestProgress;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_UpdateQuestProgress::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_UpdateQuestProgress)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_UpdateQuestProgress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_UpdateQuestProgress)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_UpdateQuestProgress)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_UpdateQuestProgress)
  return false;
#undef DO_
}

void CDOTAUserMsg_UpdateQuestProgress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_UpdateQuestProgress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_UpdateQuestProgress)
}

::google::protobuf::uint8* CDOTAUserMsg_UpdateQuestProgress::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_UpdateQuestProgress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_UpdateQuestProgress)
  return target;
}

size_t CDOTAUserMsg_UpdateQuestProgress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_UpdateQuestProgress)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_UpdateQuestProgress::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_UpdateQuestProgress)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_UpdateQuestProgress* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_UpdateQuestProgress>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_UpdateQuestProgress)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_UpdateQuestProgress)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_UpdateQuestProgress::MergeFrom(const CDOTAUserMsg_UpdateQuestProgress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_UpdateQuestProgress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CDOTAUserMsg_UpdateQuestProgress::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_UpdateQuestProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_UpdateQuestProgress::CopyFrom(const CDOTAUserMsg_UpdateQuestProgress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_UpdateQuestProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_UpdateQuestProgress::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_UpdateQuestProgress::Swap(CDOTAUserMsg_UpdateQuestProgress* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_UpdateQuestProgress::InternalSwap(CDOTAUserMsg_UpdateQuestProgress* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_UpdateQuestProgress::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_UpdateQuestProgress

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_QuestStatus::kPlayerIdFieldNumber;
const int CDOTAUserMsg_QuestStatus::kQuestIdFieldNumber;
const int CDOTAUserMsg_QuestStatus::kChallengeIdFieldNumber;
const int CDOTAUserMsg_QuestStatus::kProgressFieldNumber;
const int CDOTAUserMsg_QuestStatus::kGoalFieldNumber;
const int CDOTAUserMsg_QuestStatus::kQueryFieldNumber;
const int CDOTAUserMsg_QuestStatus::kFailGametimeFieldNumber;
const int CDOTAUserMsg_QuestStatus::kItemIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_QuestStatus::CDOTAUserMsg_QuestStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_QuestStatus)
}
CDOTAUserMsg_QuestStatus::CDOTAUserMsg_QuestStatus(const CDOTAUserMsg_QuestStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&player_id_, &from.player_id_,
    reinterpret_cast<char*>(&item_id_) -
    reinterpret_cast<char*>(&player_id_) + sizeof(item_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_QuestStatus)
}

void CDOTAUserMsg_QuestStatus::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&player_id_, 0, reinterpret_cast<char*>(&item_id_) -
    reinterpret_cast<char*>(&player_id_) + sizeof(item_id_));
}

CDOTAUserMsg_QuestStatus::~CDOTAUserMsg_QuestStatus() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_QuestStatus)
  SharedDtor();
}

void CDOTAUserMsg_QuestStatus::SharedDtor() {
}

void CDOTAUserMsg_QuestStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_QuestStatus::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_QuestStatus& CDOTAUserMsg_QuestStatus::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_QuestStatus* CDOTAUserMsg_QuestStatus::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_QuestStatus* n = new CDOTAUserMsg_QuestStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_QuestStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_QuestStatus)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&player_id_, 0, reinterpret_cast<char*>(&item_id_) -
      reinterpret_cast<char*>(&player_id_) + sizeof(item_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_QuestStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_QuestStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_player_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 quest_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_quest_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quest_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 challenge_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_challenge_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &challenge_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 progress = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_progress();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &progress_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 goal = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_goal();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &goal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 query = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_query();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &query_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float fail_gametime = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u)) {
          set_has_fail_gametime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fail_gametime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 item_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_item_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_QuestStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_QuestStatus)
  return false;
#undef DO_
}

void CDOTAUserMsg_QuestStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_QuestStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_id(), output);
  }

  // optional uint32 quest_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->quest_id(), output);
  }

  // optional uint32 challenge_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->challenge_id(), output);
  }

  // optional uint32 progress = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->progress(), output);
  }

  // optional uint32 goal = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->goal(), output);
  }

  // optional uint32 query = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->query(), output);
  }

  // optional float fail_gametime = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->fail_gametime(), output);
  }

  // optional uint32 item_id = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->item_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_QuestStatus)
}

::google::protobuf::uint8* CDOTAUserMsg_QuestStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_QuestStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_id(), target);
  }

  // optional uint32 quest_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->quest_id(), target);
  }

  // optional uint32 challenge_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->challenge_id(), target);
  }

  // optional uint32 progress = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->progress(), target);
  }

  // optional uint32 goal = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->goal(), target);
  }

  // optional uint32 query = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->query(), target);
  }

  // optional float fail_gametime = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->fail_gametime(), target);
  }

  // optional uint32 item_id = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->item_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_QuestStatus)
  return target;
}

size_t CDOTAUserMsg_QuestStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_QuestStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 player_id = 1;
  if (has_player_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->player_id());
  }
  if (_has_bits_[0 / 32] & 254u) {
    // optional uint32 quest_id = 2;
    if (has_quest_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quest_id());
    }

    // optional uint32 challenge_id = 3;
    if (has_challenge_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->challenge_id());
    }

    // optional uint32 progress = 4;
    if (has_progress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->progress());
    }

    // optional uint32 goal = 5;
    if (has_goal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->goal());
    }

    // optional uint32 query = 6;
    if (has_query()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->query());
    }

    // optional float fail_gametime = 7;
    if (has_fail_gametime()) {
      total_size += 1 + 4;
    }

    // optional uint32 item_id = 8;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_QuestStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_QuestStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_QuestStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_QuestStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_QuestStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_QuestStatus)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_QuestStatus::MergeFrom(const CDOTAUserMsg_QuestStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_QuestStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      player_id_ = from.player_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      quest_id_ = from.quest_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      challenge_id_ = from.challenge_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      progress_ = from.progress_;
    }
    if (cached_has_bits & 0x00000010u) {
      goal_ = from.goal_;
    }
    if (cached_has_bits & 0x00000020u) {
      query_ = from.query_;
    }
    if (cached_has_bits & 0x00000040u) {
      fail_gametime_ = from.fail_gametime_;
    }
    if (cached_has_bits & 0x00000080u) {
      item_id_ = from.item_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_QuestStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_QuestStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_QuestStatus::CopyFrom(const CDOTAUserMsg_QuestStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_QuestStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_QuestStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void CDOTAUserMsg_QuestStatus::Swap(CDOTAUserMsg_QuestStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_QuestStatus::InternalSwap(CDOTAUserMsg_QuestStatus* other) {
  std::swap(player_id_, other->player_id_);
  std::swap(quest_id_, other->quest_id_);
  std::swap(challenge_id_, other->challenge_id_);
  std::swap(progress_, other->progress_);
  std::swap(goal_, other->goal_);
  std::swap(query_, other->query_);
  std::swap(fail_gametime_, other->fail_gametime_);
  std::swap(item_id_, other->item_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_QuestStatus::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_QuestStatus

// required uint32 player_id = 1;
bool CDOTAUserMsg_QuestStatus::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_QuestStatus::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_QuestStatus::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_QuestStatus::clear_player_id() {
  player_id_ = 0u;
  clear_has_player_id();
}
::google::protobuf::uint32 CDOTAUserMsg_QuestStatus::player_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_QuestStatus.player_id)
  return player_id_;
}
void CDOTAUserMsg_QuestStatus::set_player_id(::google::protobuf::uint32 value) {
  set_has_player_id();
  player_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_QuestStatus.player_id)
}

// optional uint32 quest_id = 2;
bool CDOTAUserMsg_QuestStatus::has_quest_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAUserMsg_QuestStatus::set_has_quest_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAUserMsg_QuestStatus::clear_has_quest_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAUserMsg_QuestStatus::clear_quest_id() {
  quest_id_ = 0u;
  clear_has_quest_id();
}
::google::protobuf::uint32 CDOTAUserMsg_QuestStatus::quest_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_QuestStatus.quest_id)
  return quest_id_;
}
void CDOTAUserMsg_QuestStatus::set_quest_id(::google::protobuf::uint32 value) {
  set_has_quest_id();
  quest_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_QuestStatus.quest_id)
}

// optional uint32 challenge_id = 3;
bool CDOTAUserMsg_QuestStatus::has_challenge_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDOTAUserMsg_QuestStatus::set_has_challenge_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CDOTAUserMsg_QuestStatus::clear_has_challenge_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDOTAUserMsg_QuestStatus::clear_challenge_id() {
  challenge_id_ = 0u;
  clear_has_challenge_id();
}
::google::protobuf::uint32 CDOTAUserMsg_QuestStatus::challenge_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_QuestStatus.challenge_id)
  return challenge_id_;
}
void CDOTAUserMsg_QuestStatus::set_challenge_id(::google::protobuf::uint32 value) {
  set_has_challenge_id();
  challenge_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_QuestStatus.challenge_id)
}

// optional uint32 progress = 4;
bool CDOTAUserMsg_QuestStatus::has_progress() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CDOTAUserMsg_QuestStatus::set_has_progress() {
  _has_bits_[0] |= 0x00000008u;
}
void CDOTAUserMsg_QuestStatus::clear_has_progress() {
  _has_bits_[0] &= ~0x00000008u;
}
void CDOTAUserMsg_QuestStatus::clear_progress() {
  progress_ = 0u;
  clear_has_progress();
}
::google::protobuf::uint32 CDOTAUserMsg_QuestStatus::progress() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_QuestStatus.progress)
  return progress_;
}
void CDOTAUserMsg_QuestStatus::set_progress(::google::protobuf::uint32 value) {
  set_has_progress();
  progress_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_QuestStatus.progress)
}

// optional uint32 goal = 5;
bool CDOTAUserMsg_QuestStatus::has_goal() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CDOTAUserMsg_QuestStatus::set_has_goal() {
  _has_bits_[0] |= 0x00000010u;
}
void CDOTAUserMsg_QuestStatus::clear_has_goal() {
  _has_bits_[0] &= ~0x00000010u;
}
void CDOTAUserMsg_QuestStatus::clear_goal() {
  goal_ = 0u;
  clear_has_goal();
}
::google::protobuf::uint32 CDOTAUserMsg_QuestStatus::goal() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_QuestStatus.goal)
  return goal_;
}
void CDOTAUserMsg_QuestStatus::set_goal(::google::protobuf::uint32 value) {
  set_has_goal();
  goal_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_QuestStatus.goal)
}

// optional uint32 query = 6;
bool CDOTAUserMsg_QuestStatus::has_query() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CDOTAUserMsg_QuestStatus::set_has_query() {
  _has_bits_[0] |= 0x00000020u;
}
void CDOTAUserMsg_QuestStatus::clear_has_query() {
  _has_bits_[0] &= ~0x00000020u;
}
void CDOTAUserMsg_QuestStatus::clear_query() {
  query_ = 0u;
  clear_has_query();
}
::google::protobuf::uint32 CDOTAUserMsg_QuestStatus::query() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_QuestStatus.query)
  return query_;
}
void CDOTAUserMsg_QuestStatus::set_query(::google::protobuf::uint32 value) {
  set_has_query();
  query_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_QuestStatus.query)
}

// optional float fail_gametime = 7;
bool CDOTAUserMsg_QuestStatus::has_fail_gametime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CDOTAUserMsg_QuestStatus::set_has_fail_gametime() {
  _has_bits_[0] |= 0x00000040u;
}
void CDOTAUserMsg_QuestStatus::clear_has_fail_gametime() {
  _has_bits_[0] &= ~0x00000040u;
}
void CDOTAUserMsg_QuestStatus::clear_fail_gametime() {
  fail_gametime_ = 0;
  clear_has_fail_gametime();
}
float CDOTAUserMsg_QuestStatus::fail_gametime() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_QuestStatus.fail_gametime)
  return fail_gametime_;
}
void CDOTAUserMsg_QuestStatus::set_fail_gametime(float value) {
  set_has_fail_gametime();
  fail_gametime_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_QuestStatus.fail_gametime)
}

// optional uint32 item_id = 8;
bool CDOTAUserMsg_QuestStatus::has_item_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CDOTAUserMsg_QuestStatus::set_has_item_id() {
  _has_bits_[0] |= 0x00000080u;
}
void CDOTAUserMsg_QuestStatus::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000080u;
}
void CDOTAUserMsg_QuestStatus::clear_item_id() {
  item_id_ = 0u;
  clear_has_item_id();
}
::google::protobuf::uint32 CDOTAUserMsg_QuestStatus::item_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_QuestStatus.item_id)
  return item_id_;
}
void CDOTAUserMsg_QuestStatus::set_item_id(::google::protobuf::uint32 value) {
  set_has_item_id();
  item_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_QuestStatus.item_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_SuggestHeroPick::kPlayerIdFieldNumber;
const int CDOTAUserMsg_SuggestHeroPick::kHeroIdFieldNumber;
const int CDOTAUserMsg_SuggestHeroPick::kBanFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_SuggestHeroPick::CDOTAUserMsg_SuggestHeroPick()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_SuggestHeroPick)
}
CDOTAUserMsg_SuggestHeroPick::CDOTAUserMsg_SuggestHeroPick(const CDOTAUserMsg_SuggestHeroPick& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&player_id_, &from.player_id_,
    reinterpret_cast<char*>(&ban_) -
    reinterpret_cast<char*>(&player_id_) + sizeof(ban_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_SuggestHeroPick)
}

void CDOTAUserMsg_SuggestHeroPick::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&player_id_, 0, reinterpret_cast<char*>(&ban_) -
    reinterpret_cast<char*>(&player_id_) + sizeof(ban_));
}

CDOTAUserMsg_SuggestHeroPick::~CDOTAUserMsg_SuggestHeroPick() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_SuggestHeroPick)
  SharedDtor();
}

void CDOTAUserMsg_SuggestHeroPick::SharedDtor() {
}

void CDOTAUserMsg_SuggestHeroPick::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_SuggestHeroPick::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_SuggestHeroPick& CDOTAUserMsg_SuggestHeroPick::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_SuggestHeroPick* CDOTAUserMsg_SuggestHeroPick::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_SuggestHeroPick* n = new CDOTAUserMsg_SuggestHeroPick;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_SuggestHeroPick::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_SuggestHeroPick)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&player_id_, 0, reinterpret_cast<char*>(&ban_) -
      reinterpret_cast<char*>(&player_id_) + sizeof(ban_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_SuggestHeroPick::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_SuggestHeroPick)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_player_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 hero_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_hero_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool ban = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_ban();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ban_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_SuggestHeroPick)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_SuggestHeroPick)
  return false;
#undef DO_
}

void CDOTAUserMsg_SuggestHeroPick::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_SuggestHeroPick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_id(), output);
  }

  // optional uint32 hero_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hero_id(), output);
  }

  // optional bool ban = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->ban(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_SuggestHeroPick)
}

::google::protobuf::uint8* CDOTAUserMsg_SuggestHeroPick::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_SuggestHeroPick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_id(), target);
  }

  // optional uint32 hero_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hero_id(), target);
  }

  // optional bool ban = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->ban(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_SuggestHeroPick)
  return target;
}

size_t CDOTAUserMsg_SuggestHeroPick::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_SuggestHeroPick)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 player_id = 1;
  if (has_player_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->player_id());
  }
  if (_has_bits_[0 / 32] & 6u) {
    // optional uint32 hero_id = 2;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

    // optional bool ban = 3;
    if (has_ban()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_SuggestHeroPick::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_SuggestHeroPick)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_SuggestHeroPick* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_SuggestHeroPick>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_SuggestHeroPick)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_SuggestHeroPick)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_SuggestHeroPick::MergeFrom(const CDOTAUserMsg_SuggestHeroPick& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_SuggestHeroPick)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      player_id_ = from.player_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      hero_id_ = from.hero_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      ban_ = from.ban_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_SuggestHeroPick::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_SuggestHeroPick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_SuggestHeroPick::CopyFrom(const CDOTAUserMsg_SuggestHeroPick& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_SuggestHeroPick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_SuggestHeroPick::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void CDOTAUserMsg_SuggestHeroPick::Swap(CDOTAUserMsg_SuggestHeroPick* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_SuggestHeroPick::InternalSwap(CDOTAUserMsg_SuggestHeroPick* other) {
  std::swap(player_id_, other->player_id_);
  std::swap(hero_id_, other->hero_id_);
  std::swap(ban_, other->ban_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_SuggestHeroPick::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_SuggestHeroPick

// required uint32 player_id = 1;
bool CDOTAUserMsg_SuggestHeroPick::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_SuggestHeroPick::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_SuggestHeroPick::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_SuggestHeroPick::clear_player_id() {
  player_id_ = 0u;
  clear_has_player_id();
}
::google::protobuf::uint32 CDOTAUserMsg_SuggestHeroPick::player_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_SuggestHeroPick.player_id)
  return player_id_;
}
void CDOTAUserMsg_SuggestHeroPick::set_player_id(::google::protobuf::uint32 value) {
  set_has_player_id();
  player_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_SuggestHeroPick.player_id)
}

// optional uint32 hero_id = 2;
bool CDOTAUserMsg_SuggestHeroPick::has_hero_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAUserMsg_SuggestHeroPick::set_has_hero_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAUserMsg_SuggestHeroPick::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAUserMsg_SuggestHeroPick::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
::google::protobuf::uint32 CDOTAUserMsg_SuggestHeroPick::hero_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_SuggestHeroPick.hero_id)
  return hero_id_;
}
void CDOTAUserMsg_SuggestHeroPick::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_SuggestHeroPick.hero_id)
}

// optional bool ban = 3;
bool CDOTAUserMsg_SuggestHeroPick::has_ban() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDOTAUserMsg_SuggestHeroPick::set_has_ban() {
  _has_bits_[0] |= 0x00000004u;
}
void CDOTAUserMsg_SuggestHeroPick::clear_has_ban() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDOTAUserMsg_SuggestHeroPick::clear_ban() {
  ban_ = false;
  clear_has_ban();
}
bool CDOTAUserMsg_SuggestHeroPick::ban() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_SuggestHeroPick.ban)
  return ban_;
}
void CDOTAUserMsg_SuggestHeroPick::set_ban(bool value) {
  set_has_ban();
  ban_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_SuggestHeroPick.ban)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_SuggestHeroRole::kPlayerIdFieldNumber;
const int CDOTAUserMsg_SuggestHeroRole::kHeroRoleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_SuggestHeroRole::CDOTAUserMsg_SuggestHeroRole()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_SuggestHeroRole)
}
CDOTAUserMsg_SuggestHeroRole::CDOTAUserMsg_SuggestHeroRole(const CDOTAUserMsg_SuggestHeroRole& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hero_role_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_hero_role()) {
    hero_role_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hero_role_);
  }
  player_id_ = from.player_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_SuggestHeroRole)
}

void CDOTAUserMsg_SuggestHeroRole::SharedCtor() {
  _cached_size_ = 0;
  hero_role_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  player_id_ = 0u;
}

CDOTAUserMsg_SuggestHeroRole::~CDOTAUserMsg_SuggestHeroRole() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_SuggestHeroRole)
  SharedDtor();
}

void CDOTAUserMsg_SuggestHeroRole::SharedDtor() {
  hero_role_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CDOTAUserMsg_SuggestHeroRole::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_SuggestHeroRole::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_SuggestHeroRole& CDOTAUserMsg_SuggestHeroRole::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_SuggestHeroRole* CDOTAUserMsg_SuggestHeroRole::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_SuggestHeroRole* n = new CDOTAUserMsg_SuggestHeroRole;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_SuggestHeroRole::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_SuggestHeroRole)
  if (has_hero_role()) {
    GOOGLE_DCHECK(!hero_role_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*hero_role_.UnsafeRawStringPointer())->clear();
  }
  player_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_SuggestHeroRole::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_SuggestHeroRole)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_player_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string hero_role = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hero_role()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hero_role().data(), this->hero_role().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDOTAUserMsg_SuggestHeroRole.hero_role");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_SuggestHeroRole)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_SuggestHeroRole)
  return false;
#undef DO_
}

void CDOTAUserMsg_SuggestHeroRole::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_SuggestHeroRole)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 player_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_id(), output);
  }

  // optional string hero_role = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hero_role().data(), this->hero_role().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAUserMsg_SuggestHeroRole.hero_role");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->hero_role(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_SuggestHeroRole)
}

::google::protobuf::uint8* CDOTAUserMsg_SuggestHeroRole::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_SuggestHeroRole)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 player_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_id(), target);
  }

  // optional string hero_role = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hero_role().data(), this->hero_role().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAUserMsg_SuggestHeroRole.hero_role");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->hero_role(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_SuggestHeroRole)
  return target;
}

size_t CDOTAUserMsg_SuggestHeroRole::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_SuggestHeroRole)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 player_id = 1;
  if (has_player_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->player_id());
  }
  // optional string hero_role = 2;
  if (has_hero_role()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hero_role());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_SuggestHeroRole::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_SuggestHeroRole)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_SuggestHeroRole* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_SuggestHeroRole>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_SuggestHeroRole)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_SuggestHeroRole)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_SuggestHeroRole::MergeFrom(const CDOTAUserMsg_SuggestHeroRole& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_SuggestHeroRole)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_hero_role();
      hero_role_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hero_role_);
    }
    if (cached_has_bits & 0x00000002u) {
      player_id_ = from.player_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_SuggestHeroRole::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_SuggestHeroRole)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_SuggestHeroRole::CopyFrom(const CDOTAUserMsg_SuggestHeroRole& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_SuggestHeroRole)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_SuggestHeroRole::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void CDOTAUserMsg_SuggestHeroRole::Swap(CDOTAUserMsg_SuggestHeroRole* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_SuggestHeroRole::InternalSwap(CDOTAUserMsg_SuggestHeroRole* other) {
  hero_role_.Swap(&other->hero_role_);
  std::swap(player_id_, other->player_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_SuggestHeroRole::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_SuggestHeroRole

// required uint32 player_id = 1;
bool CDOTAUserMsg_SuggestHeroRole::has_player_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAUserMsg_SuggestHeroRole::set_has_player_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAUserMsg_SuggestHeroRole::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAUserMsg_SuggestHeroRole::clear_player_id() {
  player_id_ = 0u;
  clear_has_player_id();
}
::google::protobuf::uint32 CDOTAUserMsg_SuggestHeroRole::player_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_SuggestHeroRole.player_id)
  return player_id_;
}
void CDOTAUserMsg_SuggestHeroRole::set_player_id(::google::protobuf::uint32 value) {
  set_has_player_id();
  player_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_SuggestHeroRole.player_id)
}

// optional string hero_role = 2;
bool CDOTAUserMsg_SuggestHeroRole::has_hero_role() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_SuggestHeroRole::set_has_hero_role() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_SuggestHeroRole::clear_has_hero_role() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_SuggestHeroRole::clear_hero_role() {
  hero_role_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hero_role();
}
const ::std::string& CDOTAUserMsg_SuggestHeroRole::hero_role() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_SuggestHeroRole.hero_role)
  return hero_role_.GetNoArena();
}
void CDOTAUserMsg_SuggestHeroRole::set_hero_role(const ::std::string& value) {
  set_has_hero_role();
  hero_role_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_SuggestHeroRole.hero_role)
}
#if LANG_CXX11
void CDOTAUserMsg_SuggestHeroRole::set_hero_role(::std::string&& value) {
  set_has_hero_role();
  hero_role_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDOTAUserMsg_SuggestHeroRole.hero_role)
}
#endif
void CDOTAUserMsg_SuggestHeroRole::set_hero_role(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_hero_role();
  hero_role_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDOTAUserMsg_SuggestHeroRole.hero_role)
}
void CDOTAUserMsg_SuggestHeroRole::set_hero_role(const char* value, size_t size) {
  set_has_hero_role();
  hero_role_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDOTAUserMsg_SuggestHeroRole.hero_role)
}
::std::string* CDOTAUserMsg_SuggestHeroRole::mutable_hero_role() {
  set_has_hero_role();
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_SuggestHeroRole.hero_role)
  return hero_role_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDOTAUserMsg_SuggestHeroRole::release_hero_role() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAUserMsg_SuggestHeroRole.hero_role)
  clear_has_hero_role();
  return hero_role_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDOTAUserMsg_SuggestHeroRole::set_allocated_hero_role(::std::string* hero_role) {
  if (hero_role != NULL) {
    set_has_hero_role();
  } else {
    clear_has_hero_role();
  }
  hero_role_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hero_role);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAUserMsg_SuggestHeroRole.hero_role)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_KillcamDamageTaken::kPlayerIdFieldNumber;
const int CDOTAUserMsg_KillcamDamageTaken::kDamageTakenFieldNumber;
const int CDOTAUserMsg_KillcamDamageTaken::kItemTypeFieldNumber;
const int CDOTAUserMsg_KillcamDamageTaken::kItemIdFieldNumber;
const int CDOTAUserMsg_KillcamDamageTaken::kHeroNameFieldNumber;
const int CDOTAUserMsg_KillcamDamageTaken::kDamageColorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_KillcamDamageTaken::CDOTAUserMsg_KillcamDamageTaken()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_KillcamDamageTaken)
}
CDOTAUserMsg_KillcamDamageTaken::CDOTAUserMsg_KillcamDamageTaken(const CDOTAUserMsg_KillcamDamageTaken& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hero_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_hero_name()) {
    hero_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hero_name_);
  }
  damage_color_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_damage_color()) {
    damage_color_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.damage_color_);
  }
  ::memcpy(&player_id_, &from.player_id_,
    reinterpret_cast<char*>(&item_id_) -
    reinterpret_cast<char*>(&player_id_) + sizeof(item_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_KillcamDamageTaken)
}

void CDOTAUserMsg_KillcamDamageTaken::SharedCtor() {
  _cached_size_ = 0;
  hero_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  damage_color_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&player_id_, 0, reinterpret_cast<char*>(&item_id_) -
    reinterpret_cast<char*>(&player_id_) + sizeof(item_id_));
}

CDOTAUserMsg_KillcamDamageTaken::~CDOTAUserMsg_KillcamDamageTaken() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_KillcamDamageTaken)
  SharedDtor();
}

void CDOTAUserMsg_KillcamDamageTaken::SharedDtor() {
  hero_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  damage_color_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CDOTAUserMsg_KillcamDamageTaken::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_KillcamDamageTaken::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_KillcamDamageTaken& CDOTAUserMsg_KillcamDamageTaken::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_KillcamDamageTaken* CDOTAUserMsg_KillcamDamageTaken::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_KillcamDamageTaken* n = new CDOTAUserMsg_KillcamDamageTaken;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_KillcamDamageTaken::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_KillcamDamageTaken)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_hero_name()) {
      GOOGLE_DCHECK(!hero_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*hero_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_damage_color()) {
      GOOGLE_DCHECK(!damage_color_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*damage_color_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 60u) {
    ::memset(&player_id_, 0, reinterpret_cast<char*>(&item_id_) -
      reinterpret_cast<char*>(&player_id_) + sizeof(item_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_KillcamDamageTaken::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_KillcamDamageTaken)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_player_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 damage_taken = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_damage_taken();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &damage_taken_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 item_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_item_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 item_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_item_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string hero_name = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hero_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hero_name().data(), this->hero_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDOTAUserMsg_KillcamDamageTaken.hero_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string damage_color = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_damage_color()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->damage_color().data(), this->damage_color().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDOTAUserMsg_KillcamDamageTaken.damage_color");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_KillcamDamageTaken)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_KillcamDamageTaken)
  return false;
#undef DO_
}

void CDOTAUserMsg_KillcamDamageTaken::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_KillcamDamageTaken)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 player_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_id(), output);
  }

  // optional uint32 damage_taken = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->damage_taken(), output);
  }

  // optional uint32 item_type = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->item_type(), output);
  }

  // optional uint32 item_id = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->item_id(), output);
  }

  // optional string hero_name = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hero_name().data(), this->hero_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAUserMsg_KillcamDamageTaken.hero_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->hero_name(), output);
  }

  // optional string damage_color = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->damage_color().data(), this->damage_color().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAUserMsg_KillcamDamageTaken.damage_color");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->damage_color(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_KillcamDamageTaken)
}

::google::protobuf::uint8* CDOTAUserMsg_KillcamDamageTaken::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_KillcamDamageTaken)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 player_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_id(), target);
  }

  // optional uint32 damage_taken = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->damage_taken(), target);
  }

  // optional uint32 item_type = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->item_type(), target);
  }

  // optional uint32 item_id = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->item_id(), target);
  }

  // optional string hero_name = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hero_name().data(), this->hero_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAUserMsg_KillcamDamageTaken.hero_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->hero_name(), target);
  }

  // optional string damage_color = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->damage_color().data(), this->damage_color().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAUserMsg_KillcamDamageTaken.damage_color");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->damage_color(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_KillcamDamageTaken)
  return target;
}

size_t CDOTAUserMsg_KillcamDamageTaken::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_KillcamDamageTaken)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 player_id = 1;
  if (has_player_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->player_id());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string hero_name = 5;
    if (has_hero_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hero_name());
    }

    // optional string damage_color = 6;
    if (has_damage_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->damage_color());
    }

  }
  if (_has_bits_[0 / 32] & 56u) {
    // optional uint32 damage_taken = 2;
    if (has_damage_taken()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->damage_taken());
    }

    // optional uint32 item_type = 3;
    if (has_item_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_type());
    }

    // optional uint32 item_id = 4;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_KillcamDamageTaken::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_KillcamDamageTaken)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_KillcamDamageTaken* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_KillcamDamageTaken>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_KillcamDamageTaken)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_KillcamDamageTaken)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_KillcamDamageTaken::MergeFrom(const CDOTAUserMsg_KillcamDamageTaken& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_KillcamDamageTaken)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_hero_name();
      hero_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hero_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_damage_color();
      damage_color_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.damage_color_);
    }
    if (cached_has_bits & 0x00000004u) {
      player_id_ = from.player_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      damage_taken_ = from.damage_taken_;
    }
    if (cached_has_bits & 0x00000010u) {
      item_type_ = from.item_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      item_id_ = from.item_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_KillcamDamageTaken::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_KillcamDamageTaken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_KillcamDamageTaken::CopyFrom(const CDOTAUserMsg_KillcamDamageTaken& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_KillcamDamageTaken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_KillcamDamageTaken::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  return true;
}

void CDOTAUserMsg_KillcamDamageTaken::Swap(CDOTAUserMsg_KillcamDamageTaken* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_KillcamDamageTaken::InternalSwap(CDOTAUserMsg_KillcamDamageTaken* other) {
  hero_name_.Swap(&other->hero_name_);
  damage_color_.Swap(&other->damage_color_);
  std::swap(player_id_, other->player_id_);
  std::swap(damage_taken_, other->damage_taken_);
  std::swap(item_type_, other->item_type_);
  std::swap(item_id_, other->item_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_KillcamDamageTaken::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_KillcamDamageTaken

// required uint32 player_id = 1;
bool CDOTAUserMsg_KillcamDamageTaken::has_player_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDOTAUserMsg_KillcamDamageTaken::set_has_player_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CDOTAUserMsg_KillcamDamageTaken::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDOTAUserMsg_KillcamDamageTaken::clear_player_id() {
  player_id_ = 0u;
  clear_has_player_id();
}
::google::protobuf::uint32 CDOTAUserMsg_KillcamDamageTaken::player_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_KillcamDamageTaken.player_id)
  return player_id_;
}
void CDOTAUserMsg_KillcamDamageTaken::set_player_id(::google::protobuf::uint32 value) {
  set_has_player_id();
  player_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_KillcamDamageTaken.player_id)
}

// optional uint32 damage_taken = 2;
bool CDOTAUserMsg_KillcamDamageTaken::has_damage_taken() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CDOTAUserMsg_KillcamDamageTaken::set_has_damage_taken() {
  _has_bits_[0] |= 0x00000008u;
}
void CDOTAUserMsg_KillcamDamageTaken::clear_has_damage_taken() {
  _has_bits_[0] &= ~0x00000008u;
}
void CDOTAUserMsg_KillcamDamageTaken::clear_damage_taken() {
  damage_taken_ = 0u;
  clear_has_damage_taken();
}
::google::protobuf::uint32 CDOTAUserMsg_KillcamDamageTaken::damage_taken() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_KillcamDamageTaken.damage_taken)
  return damage_taken_;
}
void CDOTAUserMsg_KillcamDamageTaken::set_damage_taken(::google::protobuf::uint32 value) {
  set_has_damage_taken();
  damage_taken_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_KillcamDamageTaken.damage_taken)
}

// optional uint32 item_type = 3;
bool CDOTAUserMsg_KillcamDamageTaken::has_item_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CDOTAUserMsg_KillcamDamageTaken::set_has_item_type() {
  _has_bits_[0] |= 0x00000010u;
}
void CDOTAUserMsg_KillcamDamageTaken::clear_has_item_type() {
  _has_bits_[0] &= ~0x00000010u;
}
void CDOTAUserMsg_KillcamDamageTaken::clear_item_type() {
  item_type_ = 0u;
  clear_has_item_type();
}
::google::protobuf::uint32 CDOTAUserMsg_KillcamDamageTaken::item_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_KillcamDamageTaken.item_type)
  return item_type_;
}
void CDOTAUserMsg_KillcamDamageTaken::set_item_type(::google::protobuf::uint32 value) {
  set_has_item_type();
  item_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_KillcamDamageTaken.item_type)
}

// optional uint32 item_id = 4;
bool CDOTAUserMsg_KillcamDamageTaken::has_item_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CDOTAUserMsg_KillcamDamageTaken::set_has_item_id() {
  _has_bits_[0] |= 0x00000020u;
}
void CDOTAUserMsg_KillcamDamageTaken::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000020u;
}
void CDOTAUserMsg_KillcamDamageTaken::clear_item_id() {
  item_id_ = 0u;
  clear_has_item_id();
}
::google::protobuf::uint32 CDOTAUserMsg_KillcamDamageTaken::item_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_KillcamDamageTaken.item_id)
  return item_id_;
}
void CDOTAUserMsg_KillcamDamageTaken::set_item_id(::google::protobuf::uint32 value) {
  set_has_item_id();
  item_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_KillcamDamageTaken.item_id)
}

// optional string hero_name = 5;
bool CDOTAUserMsg_KillcamDamageTaken::has_hero_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_KillcamDamageTaken::set_has_hero_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_KillcamDamageTaken::clear_has_hero_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_KillcamDamageTaken::clear_hero_name() {
  hero_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hero_name();
}
const ::std::string& CDOTAUserMsg_KillcamDamageTaken::hero_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_KillcamDamageTaken.hero_name)
  return hero_name_.GetNoArena();
}
void CDOTAUserMsg_KillcamDamageTaken::set_hero_name(const ::std::string& value) {
  set_has_hero_name();
  hero_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_KillcamDamageTaken.hero_name)
}
#if LANG_CXX11
void CDOTAUserMsg_KillcamDamageTaken::set_hero_name(::std::string&& value) {
  set_has_hero_name();
  hero_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDOTAUserMsg_KillcamDamageTaken.hero_name)
}
#endif
void CDOTAUserMsg_KillcamDamageTaken::set_hero_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_hero_name();
  hero_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDOTAUserMsg_KillcamDamageTaken.hero_name)
}
void CDOTAUserMsg_KillcamDamageTaken::set_hero_name(const char* value, size_t size) {
  set_has_hero_name();
  hero_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDOTAUserMsg_KillcamDamageTaken.hero_name)
}
::std::string* CDOTAUserMsg_KillcamDamageTaken::mutable_hero_name() {
  set_has_hero_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_KillcamDamageTaken.hero_name)
  return hero_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDOTAUserMsg_KillcamDamageTaken::release_hero_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAUserMsg_KillcamDamageTaken.hero_name)
  clear_has_hero_name();
  return hero_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDOTAUserMsg_KillcamDamageTaken::set_allocated_hero_name(::std::string* hero_name) {
  if (hero_name != NULL) {
    set_has_hero_name();
  } else {
    clear_has_hero_name();
  }
  hero_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hero_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAUserMsg_KillcamDamageTaken.hero_name)
}

// optional string damage_color = 6;
bool CDOTAUserMsg_KillcamDamageTaken::has_damage_color() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAUserMsg_KillcamDamageTaken::set_has_damage_color() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAUserMsg_KillcamDamageTaken::clear_has_damage_color() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAUserMsg_KillcamDamageTaken::clear_damage_color() {
  damage_color_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_damage_color();
}
const ::std::string& CDOTAUserMsg_KillcamDamageTaken::damage_color() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_KillcamDamageTaken.damage_color)
  return damage_color_.GetNoArena();
}
void CDOTAUserMsg_KillcamDamageTaken::set_damage_color(const ::std::string& value) {
  set_has_damage_color();
  damage_color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_KillcamDamageTaken.damage_color)
}
#if LANG_CXX11
void CDOTAUserMsg_KillcamDamageTaken::set_damage_color(::std::string&& value) {
  set_has_damage_color();
  damage_color_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDOTAUserMsg_KillcamDamageTaken.damage_color)
}
#endif
void CDOTAUserMsg_KillcamDamageTaken::set_damage_color(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_damage_color();
  damage_color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDOTAUserMsg_KillcamDamageTaken.damage_color)
}
void CDOTAUserMsg_KillcamDamageTaken::set_damage_color(const char* value, size_t size) {
  set_has_damage_color();
  damage_color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDOTAUserMsg_KillcamDamageTaken.damage_color)
}
::std::string* CDOTAUserMsg_KillcamDamageTaken::mutable_damage_color() {
  set_has_damage_color();
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAUserMsg_KillcamDamageTaken.damage_color)
  return damage_color_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDOTAUserMsg_KillcamDamageTaken::release_damage_color() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAUserMsg_KillcamDamageTaken.damage_color)
  clear_has_damage_color();
  return damage_color_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDOTAUserMsg_KillcamDamageTaken::set_allocated_damage_color(::std::string* damage_color) {
  if (damage_color != NULL) {
    set_has_damage_color();
  } else {
    clear_has_damage_color();
  }
  damage_color_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), damage_color);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAUserMsg_KillcamDamageTaken.damage_color)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_SelectPenaltyGold::kPlayerIdFieldNumber;
const int CDOTAUserMsg_SelectPenaltyGold::kCostFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_SelectPenaltyGold::CDOTAUserMsg_SelectPenaltyGold()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_SelectPenaltyGold)
}
CDOTAUserMsg_SelectPenaltyGold::CDOTAUserMsg_SelectPenaltyGold(const CDOTAUserMsg_SelectPenaltyGold& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&player_id_, &from.player_id_,
    reinterpret_cast<char*>(&cost_) -
    reinterpret_cast<char*>(&player_id_) + sizeof(cost_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_SelectPenaltyGold)
}

void CDOTAUserMsg_SelectPenaltyGold::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&player_id_, 0, reinterpret_cast<char*>(&cost_) -
    reinterpret_cast<char*>(&player_id_) + sizeof(cost_));
}

CDOTAUserMsg_SelectPenaltyGold::~CDOTAUserMsg_SelectPenaltyGold() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_SelectPenaltyGold)
  SharedDtor();
}

void CDOTAUserMsg_SelectPenaltyGold::SharedDtor() {
}

void CDOTAUserMsg_SelectPenaltyGold::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_SelectPenaltyGold::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_SelectPenaltyGold& CDOTAUserMsg_SelectPenaltyGold::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_SelectPenaltyGold* CDOTAUserMsg_SelectPenaltyGold::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_SelectPenaltyGold* n = new CDOTAUserMsg_SelectPenaltyGold;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_SelectPenaltyGold::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_SelectPenaltyGold)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&player_id_, 0, reinterpret_cast<char*>(&cost_) -
      reinterpret_cast<char*>(&player_id_) + sizeof(cost_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_SelectPenaltyGold::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_SelectPenaltyGold)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_player_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 cost = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_cost();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &cost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_SelectPenaltyGold)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_SelectPenaltyGold)
  return false;
#undef DO_
}

void CDOTAUserMsg_SelectPenaltyGold::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_SelectPenaltyGold)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_id(), output);
  }

  // optional sint32 cost = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->cost(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_SelectPenaltyGold)
}

::google::protobuf::uint8* CDOTAUserMsg_SelectPenaltyGold::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_SelectPenaltyGold)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_id(), target);
  }

  // optional sint32 cost = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->cost(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_SelectPenaltyGold)
  return target;
}

size_t CDOTAUserMsg_SelectPenaltyGold::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_SelectPenaltyGold)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 player_id = 1;
  if (has_player_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->player_id());
  }
  // optional sint32 cost = 2;
  if (has_cost()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->cost());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_SelectPenaltyGold::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_SelectPenaltyGold)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_SelectPenaltyGold* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_SelectPenaltyGold>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_SelectPenaltyGold)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_SelectPenaltyGold)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_SelectPenaltyGold::MergeFrom(const CDOTAUserMsg_SelectPenaltyGold& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_SelectPenaltyGold)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      player_id_ = from.player_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      cost_ = from.cost_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_SelectPenaltyGold::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_SelectPenaltyGold)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_SelectPenaltyGold::CopyFrom(const CDOTAUserMsg_SelectPenaltyGold& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_SelectPenaltyGold)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_SelectPenaltyGold::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void CDOTAUserMsg_SelectPenaltyGold::Swap(CDOTAUserMsg_SelectPenaltyGold* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_SelectPenaltyGold::InternalSwap(CDOTAUserMsg_SelectPenaltyGold* other) {
  std::swap(player_id_, other->player_id_);
  std::swap(cost_, other->cost_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_SelectPenaltyGold::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_SelectPenaltyGold

// required uint32 player_id = 1;
bool CDOTAUserMsg_SelectPenaltyGold::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_SelectPenaltyGold::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_SelectPenaltyGold::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_SelectPenaltyGold::clear_player_id() {
  player_id_ = 0u;
  clear_has_player_id();
}
::google::protobuf::uint32 CDOTAUserMsg_SelectPenaltyGold::player_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_SelectPenaltyGold.player_id)
  return player_id_;
}
void CDOTAUserMsg_SelectPenaltyGold::set_player_id(::google::protobuf::uint32 value) {
  set_has_player_id();
  player_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_SelectPenaltyGold.player_id)
}

// optional sint32 cost = 2;
bool CDOTAUserMsg_SelectPenaltyGold::has_cost() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAUserMsg_SelectPenaltyGold::set_has_cost() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAUserMsg_SelectPenaltyGold::clear_has_cost() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAUserMsg_SelectPenaltyGold::clear_cost() {
  cost_ = 0;
  clear_has_cost();
}
::google::protobuf::int32 CDOTAUserMsg_SelectPenaltyGold::cost() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_SelectPenaltyGold.cost)
  return cost_;
}
void CDOTAUserMsg_SelectPenaltyGold::set_cost(::google::protobuf::int32 value) {
  set_has_cost();
  cost_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_SelectPenaltyGold.cost)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_RollDiceResult::kPlayerIdFieldNumber;
const int CDOTAUserMsg_RollDiceResult::kChannelTypeFieldNumber;
const int CDOTAUserMsg_RollDiceResult::kRollMinFieldNumber;
const int CDOTAUserMsg_RollDiceResult::kRollMaxFieldNumber;
const int CDOTAUserMsg_RollDiceResult::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_RollDiceResult::CDOTAUserMsg_RollDiceResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_RollDiceResult)
}
CDOTAUserMsg_RollDiceResult::CDOTAUserMsg_RollDiceResult(const CDOTAUserMsg_RollDiceResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&player_id_, &from.player_id_,
    reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&player_id_) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_RollDiceResult)
}

void CDOTAUserMsg_RollDiceResult::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&player_id_, 0, reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&player_id_) + sizeof(result_));
}

CDOTAUserMsg_RollDiceResult::~CDOTAUserMsg_RollDiceResult() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_RollDiceResult)
  SharedDtor();
}

void CDOTAUserMsg_RollDiceResult::SharedDtor() {
}

void CDOTAUserMsg_RollDiceResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_RollDiceResult::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_RollDiceResult& CDOTAUserMsg_RollDiceResult::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_RollDiceResult* CDOTAUserMsg_RollDiceResult::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_RollDiceResult* n = new CDOTAUserMsg_RollDiceResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_RollDiceResult::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_RollDiceResult)
  if (_has_bits_[0 / 32] & 31u) {
    ::memset(&player_id_, 0, reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&player_id_) + sizeof(result_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_RollDiceResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_RollDiceResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_player_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 channel_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_channel_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 roll_min = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_roll_min();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roll_min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 roll_max = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_roll_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roll_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 result = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_RollDiceResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_RollDiceResult)
  return false;
#undef DO_
}

void CDOTAUserMsg_RollDiceResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_RollDiceResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_id(), output);
  }

  // optional uint32 channel_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->channel_type(), output);
  }

  // optional uint32 roll_min = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->roll_min(), output);
  }

  // optional uint32 roll_max = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->roll_max(), output);
  }

  // optional uint32 result = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_RollDiceResult)
}

::google::protobuf::uint8* CDOTAUserMsg_RollDiceResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_RollDiceResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_id(), target);
  }

  // optional uint32 channel_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->channel_type(), target);
  }

  // optional uint32 roll_min = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->roll_min(), target);
  }

  // optional uint32 roll_max = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->roll_max(), target);
  }

  // optional uint32 result = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_RollDiceResult)
  return target;
}

size_t CDOTAUserMsg_RollDiceResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_RollDiceResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional uint32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_id());
    }

    // optional uint32 channel_type = 2;
    if (has_channel_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_type());
    }

    // optional uint32 roll_min = 3;
    if (has_roll_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roll_min());
    }

    // optional uint32 roll_max = 4;
    if (has_roll_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roll_max());
    }

    // optional uint32 result = 5;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_RollDiceResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_RollDiceResult)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_RollDiceResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_RollDiceResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_RollDiceResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_RollDiceResult)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_RollDiceResult::MergeFrom(const CDOTAUserMsg_RollDiceResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_RollDiceResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      player_id_ = from.player_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      channel_type_ = from.channel_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      roll_min_ = from.roll_min_;
    }
    if (cached_has_bits & 0x00000008u) {
      roll_max_ = from.roll_max_;
    }
    if (cached_has_bits & 0x00000010u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_RollDiceResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_RollDiceResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_RollDiceResult::CopyFrom(const CDOTAUserMsg_RollDiceResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_RollDiceResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_RollDiceResult::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_RollDiceResult::Swap(CDOTAUserMsg_RollDiceResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_RollDiceResult::InternalSwap(CDOTAUserMsg_RollDiceResult* other) {
  std::swap(player_id_, other->player_id_);
  std::swap(channel_type_, other->channel_type_);
  std::swap(roll_min_, other->roll_min_);
  std::swap(roll_max_, other->roll_max_);
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_RollDiceResult::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_RollDiceResult

// optional uint32 player_id = 1;
bool CDOTAUserMsg_RollDiceResult::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_RollDiceResult::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_RollDiceResult::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_RollDiceResult::clear_player_id() {
  player_id_ = 0u;
  clear_has_player_id();
}
::google::protobuf::uint32 CDOTAUserMsg_RollDiceResult::player_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_RollDiceResult.player_id)
  return player_id_;
}
void CDOTAUserMsg_RollDiceResult::set_player_id(::google::protobuf::uint32 value) {
  set_has_player_id();
  player_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_RollDiceResult.player_id)
}

// optional uint32 channel_type = 2;
bool CDOTAUserMsg_RollDiceResult::has_channel_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAUserMsg_RollDiceResult::set_has_channel_type() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAUserMsg_RollDiceResult::clear_has_channel_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAUserMsg_RollDiceResult::clear_channel_type() {
  channel_type_ = 0u;
  clear_has_channel_type();
}
::google::protobuf::uint32 CDOTAUserMsg_RollDiceResult::channel_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_RollDiceResult.channel_type)
  return channel_type_;
}
void CDOTAUserMsg_RollDiceResult::set_channel_type(::google::protobuf::uint32 value) {
  set_has_channel_type();
  channel_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_RollDiceResult.channel_type)
}

// optional uint32 roll_min = 3;
bool CDOTAUserMsg_RollDiceResult::has_roll_min() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDOTAUserMsg_RollDiceResult::set_has_roll_min() {
  _has_bits_[0] |= 0x00000004u;
}
void CDOTAUserMsg_RollDiceResult::clear_has_roll_min() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDOTAUserMsg_RollDiceResult::clear_roll_min() {
  roll_min_ = 0u;
  clear_has_roll_min();
}
::google::protobuf::uint32 CDOTAUserMsg_RollDiceResult::roll_min() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_RollDiceResult.roll_min)
  return roll_min_;
}
void CDOTAUserMsg_RollDiceResult::set_roll_min(::google::protobuf::uint32 value) {
  set_has_roll_min();
  roll_min_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_RollDiceResult.roll_min)
}

// optional uint32 roll_max = 4;
bool CDOTAUserMsg_RollDiceResult::has_roll_max() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CDOTAUserMsg_RollDiceResult::set_has_roll_max() {
  _has_bits_[0] |= 0x00000008u;
}
void CDOTAUserMsg_RollDiceResult::clear_has_roll_max() {
  _has_bits_[0] &= ~0x00000008u;
}
void CDOTAUserMsg_RollDiceResult::clear_roll_max() {
  roll_max_ = 0u;
  clear_has_roll_max();
}
::google::protobuf::uint32 CDOTAUserMsg_RollDiceResult::roll_max() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_RollDiceResult.roll_max)
  return roll_max_;
}
void CDOTAUserMsg_RollDiceResult::set_roll_max(::google::protobuf::uint32 value) {
  set_has_roll_max();
  roll_max_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_RollDiceResult.roll_max)
}

// optional uint32 result = 5;
bool CDOTAUserMsg_RollDiceResult::has_result() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CDOTAUserMsg_RollDiceResult::set_has_result() {
  _has_bits_[0] |= 0x00000010u;
}
void CDOTAUserMsg_RollDiceResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000010u;
}
void CDOTAUserMsg_RollDiceResult::clear_result() {
  result_ = 0u;
  clear_has_result();
}
::google::protobuf::uint32 CDOTAUserMsg_RollDiceResult::result() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_RollDiceResult.result)
  return result_;
}
void CDOTAUserMsg_RollDiceResult::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_RollDiceResult.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_FlipCoinResult::kPlayerIdFieldNumber;
const int CDOTAUserMsg_FlipCoinResult::kChannelTypeFieldNumber;
const int CDOTAUserMsg_FlipCoinResult::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_FlipCoinResult::CDOTAUserMsg_FlipCoinResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_FlipCoinResult)
}
CDOTAUserMsg_FlipCoinResult::CDOTAUserMsg_FlipCoinResult(const CDOTAUserMsg_FlipCoinResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&player_id_, &from.player_id_,
    reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&player_id_) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_FlipCoinResult)
}

void CDOTAUserMsg_FlipCoinResult::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&player_id_, 0, reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&player_id_) + sizeof(result_));
}

CDOTAUserMsg_FlipCoinResult::~CDOTAUserMsg_FlipCoinResult() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_FlipCoinResult)
  SharedDtor();
}

void CDOTAUserMsg_FlipCoinResult::SharedDtor() {
}

void CDOTAUserMsg_FlipCoinResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_FlipCoinResult::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_FlipCoinResult& CDOTAUserMsg_FlipCoinResult::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_FlipCoinResult* CDOTAUserMsg_FlipCoinResult::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_FlipCoinResult* n = new CDOTAUserMsg_FlipCoinResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_FlipCoinResult::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_FlipCoinResult)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&player_id_, 0, reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&player_id_) + sizeof(result_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_FlipCoinResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_FlipCoinResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_player_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 channel_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_channel_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool result = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_FlipCoinResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_FlipCoinResult)
  return false;
#undef DO_
}

void CDOTAUserMsg_FlipCoinResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_FlipCoinResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_id(), output);
  }

  // optional uint32 channel_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->channel_type(), output);
  }

  // optional bool result = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_FlipCoinResult)
}

::google::protobuf::uint8* CDOTAUserMsg_FlipCoinResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_FlipCoinResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_id(), target);
  }

  // optional uint32 channel_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->channel_type(), target);
  }

  // optional bool result = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_FlipCoinResult)
  return target;
}

size_t CDOTAUserMsg_FlipCoinResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_FlipCoinResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_id());
    }

    // optional uint32 channel_type = 2;
    if (has_channel_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_type());
    }

    // optional bool result = 3;
    if (has_result()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_FlipCoinResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_FlipCoinResult)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_FlipCoinResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_FlipCoinResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_FlipCoinResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_FlipCoinResult)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_FlipCoinResult::MergeFrom(const CDOTAUserMsg_FlipCoinResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_FlipCoinResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      player_id_ = from.player_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      channel_type_ = from.channel_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_FlipCoinResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_FlipCoinResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_FlipCoinResult::CopyFrom(const CDOTAUserMsg_FlipCoinResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_FlipCoinResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_FlipCoinResult::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_FlipCoinResult::Swap(CDOTAUserMsg_FlipCoinResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_FlipCoinResult::InternalSwap(CDOTAUserMsg_FlipCoinResult* other) {
  std::swap(player_id_, other->player_id_);
  std::swap(channel_type_, other->channel_type_);
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_FlipCoinResult::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_FlipCoinResult

// optional uint32 player_id = 1;
bool CDOTAUserMsg_FlipCoinResult::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_FlipCoinResult::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_FlipCoinResult::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_FlipCoinResult::clear_player_id() {
  player_id_ = 0u;
  clear_has_player_id();
}
::google::protobuf::uint32 CDOTAUserMsg_FlipCoinResult::player_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_FlipCoinResult.player_id)
  return player_id_;
}
void CDOTAUserMsg_FlipCoinResult::set_player_id(::google::protobuf::uint32 value) {
  set_has_player_id();
  player_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_FlipCoinResult.player_id)
}

// optional uint32 channel_type = 2;
bool CDOTAUserMsg_FlipCoinResult::has_channel_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAUserMsg_FlipCoinResult::set_has_channel_type() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAUserMsg_FlipCoinResult::clear_has_channel_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAUserMsg_FlipCoinResult::clear_channel_type() {
  channel_type_ = 0u;
  clear_has_channel_type();
}
::google::protobuf::uint32 CDOTAUserMsg_FlipCoinResult::channel_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_FlipCoinResult.channel_type)
  return channel_type_;
}
void CDOTAUserMsg_FlipCoinResult::set_channel_type(::google::protobuf::uint32 value) {
  set_has_channel_type();
  channel_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_FlipCoinResult.channel_type)
}

// optional bool result = 3;
bool CDOTAUserMsg_FlipCoinResult::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDOTAUserMsg_FlipCoinResult::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
void CDOTAUserMsg_FlipCoinResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDOTAUserMsg_FlipCoinResult::clear_result() {
  result_ = false;
  clear_has_result();
}
bool CDOTAUserMsg_FlipCoinResult::result() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_FlipCoinResult.result)
  return result_;
}
void CDOTAUserMsg_FlipCoinResult::set_result(bool value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_FlipCoinResult.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMessage_RequestItemSuggestions::kPlayerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMessage_RequestItemSuggestions::CDOTAUserMessage_RequestItemSuggestions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMessage_RequestItemSuggestions)
}
CDOTAUserMessage_RequestItemSuggestions::CDOTAUserMessage_RequestItemSuggestions(const CDOTAUserMessage_RequestItemSuggestions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  player_id_ = from.player_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMessage_RequestItemSuggestions)
}

void CDOTAUserMessage_RequestItemSuggestions::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = 0u;
}

CDOTAUserMessage_RequestItemSuggestions::~CDOTAUserMessage_RequestItemSuggestions() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMessage_RequestItemSuggestions)
  SharedDtor();
}

void CDOTAUserMessage_RequestItemSuggestions::SharedDtor() {
}

void CDOTAUserMessage_RequestItemSuggestions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMessage_RequestItemSuggestions::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMessage_RequestItemSuggestions& CDOTAUserMessage_RequestItemSuggestions::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMessage_RequestItemSuggestions* CDOTAUserMessage_RequestItemSuggestions::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMessage_RequestItemSuggestions* n = new CDOTAUserMessage_RequestItemSuggestions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMessage_RequestItemSuggestions::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMessage_RequestItemSuggestions)
  player_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMessage_RequestItemSuggestions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMessage_RequestItemSuggestions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_player_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMessage_RequestItemSuggestions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMessage_RequestItemSuggestions)
  return false;
#undef DO_
}

void CDOTAUserMessage_RequestItemSuggestions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMessage_RequestItemSuggestions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMessage_RequestItemSuggestions)
}

::google::protobuf::uint8* CDOTAUserMessage_RequestItemSuggestions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMessage_RequestItemSuggestions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMessage_RequestItemSuggestions)
  return target;
}

size_t CDOTAUserMessage_RequestItemSuggestions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMessage_RequestItemSuggestions)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 player_id = 1;
  if (has_player_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->player_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMessage_RequestItemSuggestions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMessage_RequestItemSuggestions)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMessage_RequestItemSuggestions* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMessage_RequestItemSuggestions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMessage_RequestItemSuggestions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMessage_RequestItemSuggestions)
    MergeFrom(*source);
  }
}

void CDOTAUserMessage_RequestItemSuggestions::MergeFrom(const CDOTAUserMessage_RequestItemSuggestions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMessage_RequestItemSuggestions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    set_player_id(from.player_id());
  }
}

void CDOTAUserMessage_RequestItemSuggestions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMessage_RequestItemSuggestions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMessage_RequestItemSuggestions::CopyFrom(const CDOTAUserMessage_RequestItemSuggestions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMessage_RequestItemSuggestions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMessage_RequestItemSuggestions::IsInitialized() const {
  return true;
}

void CDOTAUserMessage_RequestItemSuggestions::Swap(CDOTAUserMessage_RequestItemSuggestions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMessage_RequestItemSuggestions::InternalSwap(CDOTAUserMessage_RequestItemSuggestions* other) {
  std::swap(player_id_, other->player_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMessage_RequestItemSuggestions::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMessage_RequestItemSuggestions

// optional uint32 player_id = 1;
bool CDOTAUserMessage_RequestItemSuggestions::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMessage_RequestItemSuggestions::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMessage_RequestItemSuggestions::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMessage_RequestItemSuggestions::clear_player_id() {
  player_id_ = 0u;
  clear_has_player_id();
}
::google::protobuf::uint32 CDOTAUserMessage_RequestItemSuggestions::player_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMessage_RequestItemSuggestions.player_id)
  return player_id_;
}
void CDOTAUserMessage_RequestItemSuggestions::set_player_id(::google::protobuf::uint32 value) {
  set_has_player_id();
  player_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMessage_RequestItemSuggestions.player_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMessage_TeamCaptainChanged::kTeamFieldNumber;
const int CDOTAUserMessage_TeamCaptainChanged::kCaptainPlayerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMessage_TeamCaptainChanged::CDOTAUserMessage_TeamCaptainChanged()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMessage_TeamCaptainChanged)
}
CDOTAUserMessage_TeamCaptainChanged::CDOTAUserMessage_TeamCaptainChanged(const CDOTAUserMessage_TeamCaptainChanged& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&team_, &from.team_,
    reinterpret_cast<char*>(&captain_player_id_) -
    reinterpret_cast<char*>(&team_) + sizeof(captain_player_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMessage_TeamCaptainChanged)
}

void CDOTAUserMessage_TeamCaptainChanged::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&team_, 0, reinterpret_cast<char*>(&captain_player_id_) -
    reinterpret_cast<char*>(&team_) + sizeof(captain_player_id_));
}

CDOTAUserMessage_TeamCaptainChanged::~CDOTAUserMessage_TeamCaptainChanged() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMessage_TeamCaptainChanged)
  SharedDtor();
}

void CDOTAUserMessage_TeamCaptainChanged::SharedDtor() {
}

void CDOTAUserMessage_TeamCaptainChanged::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMessage_TeamCaptainChanged::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMessage_TeamCaptainChanged& CDOTAUserMessage_TeamCaptainChanged::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMessage_TeamCaptainChanged* CDOTAUserMessage_TeamCaptainChanged::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMessage_TeamCaptainChanged* n = new CDOTAUserMessage_TeamCaptainChanged;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMessage_TeamCaptainChanged::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMessage_TeamCaptainChanged)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&team_, 0, reinterpret_cast<char*>(&captain_player_id_) -
      reinterpret_cast<char*>(&team_) + sizeof(captain_player_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMessage_TeamCaptainChanged::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMessage_TeamCaptainChanged)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 team = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_team();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 captain_player_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_captain_player_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &captain_player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMessage_TeamCaptainChanged)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMessage_TeamCaptainChanged)
  return false;
#undef DO_
}

void CDOTAUserMessage_TeamCaptainChanged::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMessage_TeamCaptainChanged)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 team = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->team(), output);
  }

  // optional uint32 captain_player_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->captain_player_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMessage_TeamCaptainChanged)
}

::google::protobuf::uint8* CDOTAUserMessage_TeamCaptainChanged::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMessage_TeamCaptainChanged)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 team = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->team(), target);
  }

  // optional uint32 captain_player_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->captain_player_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMessage_TeamCaptainChanged)
  return target;
}

size_t CDOTAUserMessage_TeamCaptainChanged::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMessage_TeamCaptainChanged)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 team = 1;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team());
    }

    // optional uint32 captain_player_id = 2;
    if (has_captain_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->captain_player_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMessage_TeamCaptainChanged::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMessage_TeamCaptainChanged)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMessage_TeamCaptainChanged* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMessage_TeamCaptainChanged>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMessage_TeamCaptainChanged)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMessage_TeamCaptainChanged)
    MergeFrom(*source);
  }
}

void CDOTAUserMessage_TeamCaptainChanged::MergeFrom(const CDOTAUserMessage_TeamCaptainChanged& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMessage_TeamCaptainChanged)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      team_ = from.team_;
    }
    if (cached_has_bits & 0x00000002u) {
      captain_player_id_ = from.captain_player_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMessage_TeamCaptainChanged::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMessage_TeamCaptainChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMessage_TeamCaptainChanged::CopyFrom(const CDOTAUserMessage_TeamCaptainChanged& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMessage_TeamCaptainChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMessage_TeamCaptainChanged::IsInitialized() const {
  return true;
}

void CDOTAUserMessage_TeamCaptainChanged::Swap(CDOTAUserMessage_TeamCaptainChanged* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMessage_TeamCaptainChanged::InternalSwap(CDOTAUserMessage_TeamCaptainChanged* other) {
  std::swap(team_, other->team_);
  std::swap(captain_player_id_, other->captain_player_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMessage_TeamCaptainChanged::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMessage_TeamCaptainChanged

// optional uint32 team = 1;
bool CDOTAUserMessage_TeamCaptainChanged::has_team() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMessage_TeamCaptainChanged::set_has_team() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMessage_TeamCaptainChanged::clear_has_team() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMessage_TeamCaptainChanged::clear_team() {
  team_ = 0u;
  clear_has_team();
}
::google::protobuf::uint32 CDOTAUserMessage_TeamCaptainChanged::team() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMessage_TeamCaptainChanged.team)
  return team_;
}
void CDOTAUserMessage_TeamCaptainChanged::set_team(::google::protobuf::uint32 value) {
  set_has_team();
  team_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMessage_TeamCaptainChanged.team)
}

// optional uint32 captain_player_id = 2;
bool CDOTAUserMessage_TeamCaptainChanged::has_captain_player_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAUserMessage_TeamCaptainChanged::set_has_captain_player_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAUserMessage_TeamCaptainChanged::clear_has_captain_player_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAUserMessage_TeamCaptainChanged::clear_captain_player_id() {
  captain_player_id_ = 0u;
  clear_has_captain_player_id();
}
::google::protobuf::uint32 CDOTAUserMessage_TeamCaptainChanged::captain_player_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMessage_TeamCaptainChanged.captain_player_id)
  return captain_player_id_;
}
void CDOTAUserMessage_TeamCaptainChanged::set_captain_player_id(::google::protobuf::uint32 value) {
  set_has_captain_player_id();
  captain_player_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMessage_TeamCaptainChanged.captain_player_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAUserMsg_ChatWheelCooldown::kMessageIdFieldNumber;
const int CDOTAUserMsg_ChatWheelCooldown::kCooldownRemainingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAUserMsg_ChatWheelCooldown::CDOTAUserMsg_ChatWheelCooldown()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fusermessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAUserMsg_ChatWheelCooldown)
}
CDOTAUserMsg_ChatWheelCooldown::CDOTAUserMsg_ChatWheelCooldown(const CDOTAUserMsg_ChatWheelCooldown& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&message_id_, &from.message_id_,
    reinterpret_cast<char*>(&cooldown_remaining_) -
    reinterpret_cast<char*>(&message_id_) + sizeof(cooldown_remaining_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAUserMsg_ChatWheelCooldown)
}

void CDOTAUserMsg_ChatWheelCooldown::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&message_id_, 0, reinterpret_cast<char*>(&cooldown_remaining_) -
    reinterpret_cast<char*>(&message_id_) + sizeof(cooldown_remaining_));
}

CDOTAUserMsg_ChatWheelCooldown::~CDOTAUserMsg_ChatWheelCooldown() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAUserMsg_ChatWheelCooldown)
  SharedDtor();
}

void CDOTAUserMsg_ChatWheelCooldown::SharedDtor() {
}

void CDOTAUserMsg_ChatWheelCooldown::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_ChatWheelCooldown::descriptor() {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAUserMsg_ChatWheelCooldown& CDOTAUserMsg_ChatWheelCooldown::default_instance() {
  protobuf_dota_5fusermessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAUserMsg_ChatWheelCooldown* CDOTAUserMsg_ChatWheelCooldown::New(::google::protobuf::Arena* arena) const {
  CDOTAUserMsg_ChatWheelCooldown* n = new CDOTAUserMsg_ChatWheelCooldown;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAUserMsg_ChatWheelCooldown::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAUserMsg_ChatWheelCooldown)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&message_id_, 0, reinterpret_cast<char*>(&cooldown_remaining_) -
      reinterpret_cast<char*>(&message_id_) + sizeof(cooldown_remaining_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAUserMsg_ChatWheelCooldown::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAUserMsg_ChatWheelCooldown)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 message_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_message_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &message_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float cooldown_remaining = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_cooldown_remaining();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cooldown_remaining_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAUserMsg_ChatWheelCooldown)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAUserMsg_ChatWheelCooldown)
  return false;
#undef DO_
}

void CDOTAUserMsg_ChatWheelCooldown::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAUserMsg_ChatWheelCooldown)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 message_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->message_id(), output);
  }

  // optional float cooldown_remaining = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->cooldown_remaining(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAUserMsg_ChatWheelCooldown)
}

::google::protobuf::uint8* CDOTAUserMsg_ChatWheelCooldown::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAUserMsg_ChatWheelCooldown)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 message_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->message_id(), target);
  }

  // optional float cooldown_remaining = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->cooldown_remaining(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAUserMsg_ChatWheelCooldown)
  return target;
}

size_t CDOTAUserMsg_ChatWheelCooldown::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAUserMsg_ChatWheelCooldown)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->message_id());
    }

    // optional float cooldown_remaining = 2;
    if (has_cooldown_remaining()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_ChatWheelCooldown::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAUserMsg_ChatWheelCooldown)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAUserMsg_ChatWheelCooldown* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAUserMsg_ChatWheelCooldown>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAUserMsg_ChatWheelCooldown)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAUserMsg_ChatWheelCooldown)
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_ChatWheelCooldown::MergeFrom(const CDOTAUserMsg_ChatWheelCooldown& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAUserMsg_ChatWheelCooldown)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      message_id_ = from.message_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      cooldown_remaining_ = from.cooldown_remaining_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAUserMsg_ChatWheelCooldown::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAUserMsg_ChatWheelCooldown)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_ChatWheelCooldown::CopyFrom(const CDOTAUserMsg_ChatWheelCooldown& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAUserMsg_ChatWheelCooldown)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ChatWheelCooldown::IsInitialized() const {
  return true;
}

void CDOTAUserMsg_ChatWheelCooldown::Swap(CDOTAUserMsg_ChatWheelCooldown* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAUserMsg_ChatWheelCooldown::InternalSwap(CDOTAUserMsg_ChatWheelCooldown* other) {
  std::swap(message_id_, other->message_id_);
  std::swap(cooldown_remaining_, other->cooldown_remaining_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAUserMsg_ChatWheelCooldown::GetMetadata() const {
  protobuf_dota_5fusermessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fusermessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAUserMsg_ChatWheelCooldown

// optional uint32 message_id = 1;
bool CDOTAUserMsg_ChatWheelCooldown::has_message_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAUserMsg_ChatWheelCooldown::set_has_message_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAUserMsg_ChatWheelCooldown::clear_has_message_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAUserMsg_ChatWheelCooldown::clear_message_id() {
  message_id_ = 0u;
  clear_has_message_id();
}
::google::protobuf::uint32 CDOTAUserMsg_ChatWheelCooldown::message_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ChatWheelCooldown.message_id)
  return message_id_;
}
void CDOTAUserMsg_ChatWheelCooldown::set_message_id(::google::protobuf::uint32 value) {
  set_has_message_id();
  message_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_ChatWheelCooldown.message_id)
}

// optional float cooldown_remaining = 2;
bool CDOTAUserMsg_ChatWheelCooldown::has_cooldown_remaining() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAUserMsg_ChatWheelCooldown::set_has_cooldown_remaining() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAUserMsg_ChatWheelCooldown::clear_has_cooldown_remaining() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAUserMsg_ChatWheelCooldown::clear_cooldown_remaining() {
  cooldown_remaining_ = 0;
  clear_has_cooldown_remaining();
}
float CDOTAUserMsg_ChatWheelCooldown::cooldown_remaining() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAUserMsg_ChatWheelCooldown.cooldown_remaining)
  return cooldown_remaining_;
}
void CDOTAUserMsg_ChatWheelCooldown::set_cooldown_remaining(float value) {
  set_has_cooldown_remaining();
  cooldown_remaining_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAUserMsg_ChatWheelCooldown.cooldown_remaining)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace dota
}  // namespace proto

// @@protoc_insertion_point(global_scope)
