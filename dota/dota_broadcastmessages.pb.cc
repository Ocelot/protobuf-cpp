// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_broadcastmessages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dota_broadcastmessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace dota {
class CDOTABroadcastMsgDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTABroadcastMsg> {
} _CDOTABroadcastMsg_default_instance_;
class CDOTABroadcastMsg_LANLobbyRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTABroadcastMsg_LANLobbyRequest> {
} _CDOTABroadcastMsg_LANLobbyRequest_default_instance_;
class CDOTABroadcastMsg_LANLobbyReply_CLobbyMemberDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTABroadcastMsg_LANLobbyReply_CLobbyMember> {
} _CDOTABroadcastMsg_LANLobbyReply_CLobbyMember_default_instance_;
class CDOTABroadcastMsg_LANLobbyReplyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTABroadcastMsg_LANLobbyReply> {
} _CDOTABroadcastMsg_LANLobbyReply_default_instance_;

namespace protobuf_dota_5fbroadcastmessages_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[4];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTABroadcastMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTABroadcastMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTABroadcastMsg, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTABroadcastMsg, msg_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTABroadcastMsg_LANLobbyRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTABroadcastMsg_LANLobbyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTABroadcastMsg_LANLobbyReply_CLobbyMember, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTABroadcastMsg_LANLobbyReply_CLobbyMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTABroadcastMsg_LANLobbyReply_CLobbyMember, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTABroadcastMsg_LANLobbyReply_CLobbyMember, player_name_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTABroadcastMsg_LANLobbyReply, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTABroadcastMsg_LANLobbyReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTABroadcastMsg_LANLobbyReply, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTABroadcastMsg_LANLobbyReply, tournament_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTABroadcastMsg_LANLobbyReply, tournament_game_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTABroadcastMsg_LANLobbyReply, members_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTABroadcastMsg_LANLobbyReply, requires_pass_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTABroadcastMsg_LANLobbyReply, leader_account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTABroadcastMsg_LANLobbyReply, game_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTABroadcastMsg_LANLobbyReply, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTABroadcastMsg_LANLobbyReply, players_),
  1,
  2,
  3,
  ~0u,
  4,
  5,
  6,
  0,
  7,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 7, sizeof(CDOTABroadcastMsg)},
  { 9, 14, sizeof(CDOTABroadcastMsg_LANLobbyRequest)},
  { 14, 21, sizeof(CDOTABroadcastMsg_LANLobbyReply_CLobbyMember)},
  { 23, 37, sizeof(CDOTABroadcastMsg_LANLobbyReply)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTABroadcastMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTABroadcastMsg_LANLobbyRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTABroadcastMsg_LANLobbyReply_CLobbyMember_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTABroadcastMsg_LANLobbyReply_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "dota_broadcastmessages.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

}  // namespace

void TableStruct::Shutdown() {
  _CDOTABroadcastMsg_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _CDOTABroadcastMsg_LANLobbyRequest_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _CDOTABroadcastMsg_LANLobbyReply_CLobbyMember_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _CDOTABroadcastMsg_LANLobbyReply_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _CDOTABroadcastMsg_default_instance_.DefaultConstruct();
  _CDOTABroadcastMsg_LANLobbyRequest_default_instance_.DefaultConstruct();
  _CDOTABroadcastMsg_LANLobbyReply_CLobbyMember_default_instance_.DefaultConstruct();
  _CDOTABroadcastMsg_LANLobbyReply_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\034dota_broadcastmessages.proto\022\nproto.do"
      "ta\"k\n\021CDOTABroadcastMsg\022I\n\004type\030\001 \002(\0162\"."
      "proto.dota.EDotaBroadcastMessages:\027DOTA_"
      "BM_LANLobbyRequest\022\013\n\003msg\030\002 \001(\014\"#\n!CDOTA"
      "BroadcastMsg_LANLobbyRequest\"\314\002\n\037CDOTABr"
      "oadcastMsg_LANLobbyReply\022\n\n\002id\030\001 \001(\004\022\025\n\r"
      "tournament_id\030\002 \001(\r\022\032\n\022tournament_game_i"
      "d\030\003 \001(\r\022I\n\007members\030\004 \003(\01328.proto.dota.CD"
      "OTABroadcastMsg_LANLobbyReply.CLobbyMemb"
      "er\022\031\n\021requires_pass_key\030\005 \001(\010\022\031\n\021leader_"
      "account_id\030\006 \001(\r\022\021\n\tgame_mode\030\007 \001(\r\022\014\n\004n"
      "ame\030\010 \001(\t\022\017\n\007players\030\t \001(\r\0327\n\014CLobbyMemb"
      "er\022\022\n\naccount_id\030\001 \001(\r\022\023\n\013player_name\030\002 "
      "\001(\t*P\n\026EDotaBroadcastMessages\022\033\n\027DOTA_BM"
      "_LANLobbyRequest\020\001\022\031\n\025DOTA_BM_LANLobbyRe"
      "ply\020\002B\005H\001\200\001\000"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 612);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dota_broadcastmessages.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_dota_5fbroadcastmessages_2eproto

const ::google::protobuf::EnumDescriptor* EDotaBroadcastMessages_descriptor() {
  protobuf_dota_5fbroadcastmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fbroadcastmessages_2eproto::file_level_enum_descriptors[0];
}
bool EDotaBroadcastMessages_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTABroadcastMsg::kTypeFieldNumber;
const int CDOTABroadcastMsg::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTABroadcastMsg::CDOTABroadcastMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fbroadcastmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTABroadcastMsg)
}
CDOTABroadcastMsg::CDOTABroadcastMsg(const CDOTABroadcastMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_msg()) {
    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTABroadcastMsg)
}

void CDOTABroadcastMsg::SharedCtor() {
  _cached_size_ = 0;
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 1;
}

CDOTABroadcastMsg::~CDOTABroadcastMsg() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTABroadcastMsg)
  SharedDtor();
}

void CDOTABroadcastMsg::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CDOTABroadcastMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTABroadcastMsg::descriptor() {
  protobuf_dota_5fbroadcastmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fbroadcastmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTABroadcastMsg& CDOTABroadcastMsg::default_instance() {
  protobuf_dota_5fbroadcastmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTABroadcastMsg* CDOTABroadcastMsg::New(::google::protobuf::Arena* arena) const {
  CDOTABroadcastMsg* n = new CDOTABroadcastMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTABroadcastMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTABroadcastMsg)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_msg()) {
      GOOGLE_DCHECK(!msg_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*msg_.UnsafeRawStringPointer())->clear();
    }
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTABroadcastMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTABroadcastMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .proto.dota.EDotaBroadcastMessages type = 1 [default = DOTA_BM_LANLobbyRequest];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::EDotaBroadcastMessages_IsValid(value)) {
            set_type(static_cast< ::proto::dota::EDotaBroadcastMessages >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes msg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTABroadcastMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTABroadcastMsg)
  return false;
#undef DO_
}

void CDOTABroadcastMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTABroadcastMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .proto.dota.EDotaBroadcastMessages type = 1 [default = DOTA_BM_LANLobbyRequest];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional bytes msg = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTABroadcastMsg)
}

::google::protobuf::uint8* CDOTABroadcastMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTABroadcastMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .proto.dota.EDotaBroadcastMessages type = 1 [default = DOTA_BM_LANLobbyRequest];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional bytes msg = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTABroadcastMsg)
  return target;
}

size_t CDOTABroadcastMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTABroadcastMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .proto.dota.EDotaBroadcastMessages type = 1 [default = DOTA_BM_LANLobbyRequest];
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }
  // optional bytes msg = 2;
  if (has_msg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->msg());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTABroadcastMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTABroadcastMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTABroadcastMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTABroadcastMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTABroadcastMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTABroadcastMsg)
    MergeFrom(*source);
  }
}

void CDOTABroadcastMsg::MergeFrom(const CDOTABroadcastMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTABroadcastMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_msg();
      msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTABroadcastMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTABroadcastMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTABroadcastMsg::CopyFrom(const CDOTABroadcastMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTABroadcastMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTABroadcastMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void CDOTABroadcastMsg::Swap(CDOTABroadcastMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTABroadcastMsg::InternalSwap(CDOTABroadcastMsg* other) {
  msg_.Swap(&other->msg_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTABroadcastMsg::GetMetadata() const {
  protobuf_dota_5fbroadcastmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fbroadcastmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTABroadcastMsg

// required .proto.dota.EDotaBroadcastMessages type = 1 [default = DOTA_BM_LANLobbyRequest];
bool CDOTABroadcastMsg::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTABroadcastMsg::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTABroadcastMsg::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTABroadcastMsg::clear_type() {
  type_ = 1;
  clear_has_type();
}
::proto::dota::EDotaBroadcastMessages CDOTABroadcastMsg::type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTABroadcastMsg.type)
  return static_cast< ::proto::dota::EDotaBroadcastMessages >(type_);
}
void CDOTABroadcastMsg::set_type(::proto::dota::EDotaBroadcastMessages value) {
  assert(::proto::dota::EDotaBroadcastMessages_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTABroadcastMsg.type)
}

// optional bytes msg = 2;
bool CDOTABroadcastMsg::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTABroadcastMsg::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTABroadcastMsg::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTABroadcastMsg::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg();
}
const ::std::string& CDOTABroadcastMsg::msg() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTABroadcastMsg.msg)
  return msg_.GetNoArena();
}
void CDOTABroadcastMsg::set_msg(const ::std::string& value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTABroadcastMsg.msg)
}
#if LANG_CXX11
void CDOTABroadcastMsg::set_msg(::std::string&& value) {
  set_has_msg();
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDOTABroadcastMsg.msg)
}
#endif
void CDOTABroadcastMsg::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDOTABroadcastMsg.msg)
}
void CDOTABroadcastMsg::set_msg(const void* value, size_t size) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDOTABroadcastMsg.msg)
}
::std::string* CDOTABroadcastMsg::mutable_msg() {
  set_has_msg();
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTABroadcastMsg.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDOTABroadcastMsg::release_msg() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTABroadcastMsg.msg)
  clear_has_msg();
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDOTABroadcastMsg::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTABroadcastMsg.msg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTABroadcastMsg_LANLobbyRequest::CDOTABroadcastMsg_LANLobbyRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fbroadcastmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTABroadcastMsg_LANLobbyRequest)
}
CDOTABroadcastMsg_LANLobbyRequest::CDOTABroadcastMsg_LANLobbyRequest(const CDOTABroadcastMsg_LANLobbyRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTABroadcastMsg_LANLobbyRequest)
}

void CDOTABroadcastMsg_LANLobbyRequest::SharedCtor() {
  _cached_size_ = 0;
}

CDOTABroadcastMsg_LANLobbyRequest::~CDOTABroadcastMsg_LANLobbyRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTABroadcastMsg_LANLobbyRequest)
  SharedDtor();
}

void CDOTABroadcastMsg_LANLobbyRequest::SharedDtor() {
}

void CDOTABroadcastMsg_LANLobbyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTABroadcastMsg_LANLobbyRequest::descriptor() {
  protobuf_dota_5fbroadcastmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fbroadcastmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTABroadcastMsg_LANLobbyRequest& CDOTABroadcastMsg_LANLobbyRequest::default_instance() {
  protobuf_dota_5fbroadcastmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTABroadcastMsg_LANLobbyRequest* CDOTABroadcastMsg_LANLobbyRequest::New(::google::protobuf::Arena* arena) const {
  CDOTABroadcastMsg_LANLobbyRequest* n = new CDOTABroadcastMsg_LANLobbyRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTABroadcastMsg_LANLobbyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTABroadcastMsg_LANLobbyRequest)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTABroadcastMsg_LANLobbyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTABroadcastMsg_LANLobbyRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTABroadcastMsg_LANLobbyRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTABroadcastMsg_LANLobbyRequest)
  return false;
#undef DO_
}

void CDOTABroadcastMsg_LANLobbyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTABroadcastMsg_LANLobbyRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTABroadcastMsg_LANLobbyRequest)
}

::google::protobuf::uint8* CDOTABroadcastMsg_LANLobbyRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTABroadcastMsg_LANLobbyRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTABroadcastMsg_LANLobbyRequest)
  return target;
}

size_t CDOTABroadcastMsg_LANLobbyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTABroadcastMsg_LANLobbyRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTABroadcastMsg_LANLobbyRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTABroadcastMsg_LANLobbyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTABroadcastMsg_LANLobbyRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTABroadcastMsg_LANLobbyRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTABroadcastMsg_LANLobbyRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTABroadcastMsg_LANLobbyRequest)
    MergeFrom(*source);
  }
}

void CDOTABroadcastMsg_LANLobbyRequest::MergeFrom(const CDOTABroadcastMsg_LANLobbyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTABroadcastMsg_LANLobbyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CDOTABroadcastMsg_LANLobbyRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTABroadcastMsg_LANLobbyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTABroadcastMsg_LANLobbyRequest::CopyFrom(const CDOTABroadcastMsg_LANLobbyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTABroadcastMsg_LANLobbyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTABroadcastMsg_LANLobbyRequest::IsInitialized() const {
  return true;
}

void CDOTABroadcastMsg_LANLobbyRequest::Swap(CDOTABroadcastMsg_LANLobbyRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTABroadcastMsg_LANLobbyRequest::InternalSwap(CDOTABroadcastMsg_LANLobbyRequest* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTABroadcastMsg_LANLobbyRequest::GetMetadata() const {
  protobuf_dota_5fbroadcastmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fbroadcastmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTABroadcastMsg_LANLobbyRequest

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::kAccountIdFieldNumber;
const int CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::kPlayerNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::CDOTABroadcastMsg_LANLobbyReply_CLobbyMember()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fbroadcastmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTABroadcastMsg_LANLobbyReply.CLobbyMember)
}
CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::CDOTABroadcastMsg_LANLobbyReply_CLobbyMember(const CDOTABroadcastMsg_LANLobbyReply_CLobbyMember& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  player_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_player_name()) {
    player_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.player_name_);
  }
  account_id_ = from.account_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTABroadcastMsg_LANLobbyReply.CLobbyMember)
}

void CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::SharedCtor() {
  _cached_size_ = 0;
  player_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_id_ = 0u;
}

CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::~CDOTABroadcastMsg_LANLobbyReply_CLobbyMember() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTABroadcastMsg_LANLobbyReply.CLobbyMember)
  SharedDtor();
}

void CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::SharedDtor() {
  player_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::descriptor() {
  protobuf_dota_5fbroadcastmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fbroadcastmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTABroadcastMsg_LANLobbyReply_CLobbyMember& CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::default_instance() {
  protobuf_dota_5fbroadcastmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTABroadcastMsg_LANLobbyReply_CLobbyMember* CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::New(::google::protobuf::Arena* arena) const {
  CDOTABroadcastMsg_LANLobbyReply_CLobbyMember* n = new CDOTABroadcastMsg_LANLobbyReply_CLobbyMember;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTABroadcastMsg_LANLobbyReply.CLobbyMember)
  if (has_player_name()) {
    GOOGLE_DCHECK(!player_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*player_name_.UnsafeRawStringPointer())->clear();
  }
  account_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTABroadcastMsg_LANLobbyReply.CLobbyMember)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string player_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->player_name().data(), this->player_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDOTABroadcastMsg_LANLobbyReply.CLobbyMember.player_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTABroadcastMsg_LANLobbyReply.CLobbyMember)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTABroadcastMsg_LANLobbyReply.CLobbyMember)
  return false;
#undef DO_
}

void CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTABroadcastMsg_LANLobbyReply.CLobbyMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional string player_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTABroadcastMsg_LANLobbyReply.CLobbyMember.player_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->player_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTABroadcastMsg_LANLobbyReply.CLobbyMember)
}

::google::protobuf::uint8* CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTABroadcastMsg_LANLobbyReply.CLobbyMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional string player_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTABroadcastMsg_LANLobbyReply.CLobbyMember.player_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->player_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTABroadcastMsg_LANLobbyReply.CLobbyMember)
  return target;
}

size_t CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTABroadcastMsg_LANLobbyReply.CLobbyMember)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string player_name = 2;
    if (has_player_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_name());
    }

    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTABroadcastMsg_LANLobbyReply.CLobbyMember)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTABroadcastMsg_LANLobbyReply_CLobbyMember* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTABroadcastMsg_LANLobbyReply_CLobbyMember>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTABroadcastMsg_LANLobbyReply.CLobbyMember)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTABroadcastMsg_LANLobbyReply.CLobbyMember)
    MergeFrom(*source);
  }
}

void CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::MergeFrom(const CDOTABroadcastMsg_LANLobbyReply_CLobbyMember& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTABroadcastMsg_LANLobbyReply.CLobbyMember)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_player_name();
      player_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.player_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      account_id_ = from.account_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTABroadcastMsg_LANLobbyReply.CLobbyMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::CopyFrom(const CDOTABroadcastMsg_LANLobbyReply_CLobbyMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTABroadcastMsg_LANLobbyReply.CLobbyMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::IsInitialized() const {
  return true;
}

void CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::Swap(CDOTABroadcastMsg_LANLobbyReply_CLobbyMember* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::InternalSwap(CDOTABroadcastMsg_LANLobbyReply_CLobbyMember* other) {
  player_name_.Swap(&other->player_name_);
  std::swap(account_id_, other->account_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::GetMetadata() const {
  protobuf_dota_5fbroadcastmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fbroadcastmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTABroadcastMsg_LANLobbyReply_CLobbyMember

// optional uint32 account_id = 1;
bool CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::has_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::set_has_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
::google::protobuf::uint32 CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTABroadcastMsg_LANLobbyReply.CLobbyMember.account_id)
  return account_id_;
}
void CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTABroadcastMsg_LANLobbyReply.CLobbyMember.account_id)
}

// optional string player_name = 2;
bool CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::has_player_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::set_has_player_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::clear_has_player_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::clear_player_name() {
  player_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_player_name();
}
const ::std::string& CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::player_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTABroadcastMsg_LANLobbyReply.CLobbyMember.player_name)
  return player_name_.GetNoArena();
}
void CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::set_player_name(const ::std::string& value) {
  set_has_player_name();
  player_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTABroadcastMsg_LANLobbyReply.CLobbyMember.player_name)
}
#if LANG_CXX11
void CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::set_player_name(::std::string&& value) {
  set_has_player_name();
  player_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDOTABroadcastMsg_LANLobbyReply.CLobbyMember.player_name)
}
#endif
void CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::set_player_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_player_name();
  player_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDOTABroadcastMsg_LANLobbyReply.CLobbyMember.player_name)
}
void CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::set_player_name(const char* value, size_t size) {
  set_has_player_name();
  player_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDOTABroadcastMsg_LANLobbyReply.CLobbyMember.player_name)
}
::std::string* CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::mutable_player_name() {
  set_has_player_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTABroadcastMsg_LANLobbyReply.CLobbyMember.player_name)
  return player_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::release_player_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTABroadcastMsg_LANLobbyReply.CLobbyMember.player_name)
  clear_has_player_name();
  return player_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::set_allocated_player_name(::std::string* player_name) {
  if (player_name != NULL) {
    set_has_player_name();
  } else {
    clear_has_player_name();
  }
  player_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), player_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTABroadcastMsg_LANLobbyReply.CLobbyMember.player_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTABroadcastMsg_LANLobbyReply::kIdFieldNumber;
const int CDOTABroadcastMsg_LANLobbyReply::kTournamentIdFieldNumber;
const int CDOTABroadcastMsg_LANLobbyReply::kTournamentGameIdFieldNumber;
const int CDOTABroadcastMsg_LANLobbyReply::kMembersFieldNumber;
const int CDOTABroadcastMsg_LANLobbyReply::kRequiresPassKeyFieldNumber;
const int CDOTABroadcastMsg_LANLobbyReply::kLeaderAccountIdFieldNumber;
const int CDOTABroadcastMsg_LANLobbyReply::kGameModeFieldNumber;
const int CDOTABroadcastMsg_LANLobbyReply::kNameFieldNumber;
const int CDOTABroadcastMsg_LANLobbyReply::kPlayersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTABroadcastMsg_LANLobbyReply::CDOTABroadcastMsg_LANLobbyReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fbroadcastmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTABroadcastMsg_LANLobbyReply)
}
CDOTABroadcastMsg_LANLobbyReply::CDOTABroadcastMsg_LANLobbyReply(const CDOTABroadcastMsg_LANLobbyReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      members_(from.members_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&id_, &from.id_,
    reinterpret_cast<char*>(&players_) -
    reinterpret_cast<char*>(&id_) + sizeof(players_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTABroadcastMsg_LANLobbyReply)
}

void CDOTABroadcastMsg_LANLobbyReply::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, reinterpret_cast<char*>(&players_) -
    reinterpret_cast<char*>(&id_) + sizeof(players_));
}

CDOTABroadcastMsg_LANLobbyReply::~CDOTABroadcastMsg_LANLobbyReply() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTABroadcastMsg_LANLobbyReply)
  SharedDtor();
}

void CDOTABroadcastMsg_LANLobbyReply::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CDOTABroadcastMsg_LANLobbyReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTABroadcastMsg_LANLobbyReply::descriptor() {
  protobuf_dota_5fbroadcastmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fbroadcastmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTABroadcastMsg_LANLobbyReply& CDOTABroadcastMsg_LANLobbyReply::default_instance() {
  protobuf_dota_5fbroadcastmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTABroadcastMsg_LANLobbyReply* CDOTABroadcastMsg_LANLobbyReply::New(::google::protobuf::Arena* arena) const {
  CDOTABroadcastMsg_LANLobbyReply* n = new CDOTABroadcastMsg_LANLobbyReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTABroadcastMsg_LANLobbyReply::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTABroadcastMsg_LANLobbyReply)
  members_.Clear();
  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 254u) {
    ::memset(&id_, 0, reinterpret_cast<char*>(&players_) -
      reinterpret_cast<char*>(&id_) + sizeof(players_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTABroadcastMsg_LANLobbyReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTABroadcastMsg_LANLobbyReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tournament_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_tournament_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tournament_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tournament_game_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_tournament_game_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tournament_game_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CDOTABroadcastMsg_LANLobbyReply.CLobbyMember members = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_members()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool requires_pass_key = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_requires_pass_key();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &requires_pass_key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 leader_account_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_leader_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leader_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 game_mode = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_game_mode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDOTABroadcastMsg_LANLobbyReply.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 players = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_players();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &players_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTABroadcastMsg_LANLobbyReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTABroadcastMsg_LANLobbyReply)
  return false;
#undef DO_
}

void CDOTABroadcastMsg_LANLobbyReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTABroadcastMsg_LANLobbyReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint32 tournament_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tournament_id(), output);
  }

  // optional uint32 tournament_game_id = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->tournament_game_id(), output);
  }

  // repeated .proto.dota.CDOTABroadcastMsg_LANLobbyReply.CLobbyMember members = 4;
  for (unsigned int i = 0, n = this->members_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->members(i), output);
  }

  // optional bool requires_pass_key = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->requires_pass_key(), output);
  }

  // optional uint32 leader_account_id = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->leader_account_id(), output);
  }

  // optional uint32 game_mode = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->game_mode(), output);
  }

  // optional string name = 8;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTABroadcastMsg_LANLobbyReply.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->name(), output);
  }

  // optional uint32 players = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->players(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTABroadcastMsg_LANLobbyReply)
}

::google::protobuf::uint8* CDOTABroadcastMsg_LANLobbyReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTABroadcastMsg_LANLobbyReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional uint32 tournament_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->tournament_id(), target);
  }

  // optional uint32 tournament_game_id = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->tournament_game_id(), target);
  }

  // repeated .proto.dota.CDOTABroadcastMsg_LANLobbyReply.CLobbyMember members = 4;
  for (unsigned int i = 0, n = this->members_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->members(i), deterministic, target);
  }

  // optional bool requires_pass_key = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->requires_pass_key(), target);
  }

  // optional uint32 leader_account_id = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->leader_account_id(), target);
  }

  // optional uint32 game_mode = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->game_mode(), target);
  }

  // optional string name = 8;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTABroadcastMsg_LANLobbyReply.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->name(), target);
  }

  // optional uint32 players = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->players(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTABroadcastMsg_LANLobbyReply)
  return target;
}

size_t CDOTABroadcastMsg_LANLobbyReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTABroadcastMsg_LANLobbyReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CDOTABroadcastMsg_LANLobbyReply.CLobbyMember members = 4;
  {
    unsigned int count = this->members_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->members(i));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string name = 8;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint32 tournament_id = 2;
    if (has_tournament_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tournament_id());
    }

    // optional uint32 tournament_game_id = 3;
    if (has_tournament_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tournament_game_id());
    }

    // optional bool requires_pass_key = 5;
    if (has_requires_pass_key()) {
      total_size += 1 + 1;
    }

    // optional uint32 leader_account_id = 6;
    if (has_leader_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leader_account_id());
    }

    // optional uint32 game_mode = 7;
    if (has_game_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_mode());
    }

    // optional uint32 players = 9;
    if (has_players()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->players());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTABroadcastMsg_LANLobbyReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTABroadcastMsg_LANLobbyReply)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTABroadcastMsg_LANLobbyReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTABroadcastMsg_LANLobbyReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTABroadcastMsg_LANLobbyReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTABroadcastMsg_LANLobbyReply)
    MergeFrom(*source);
  }
}

void CDOTABroadcastMsg_LANLobbyReply::MergeFrom(const CDOTABroadcastMsg_LANLobbyReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTABroadcastMsg_LANLobbyReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      tournament_id_ = from.tournament_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      tournament_game_id_ = from.tournament_game_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      requires_pass_key_ = from.requires_pass_key_;
    }
    if (cached_has_bits & 0x00000020u) {
      leader_account_id_ = from.leader_account_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      game_mode_ = from.game_mode_;
    }
    if (cached_has_bits & 0x00000080u) {
      players_ = from.players_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTABroadcastMsg_LANLobbyReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTABroadcastMsg_LANLobbyReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTABroadcastMsg_LANLobbyReply::CopyFrom(const CDOTABroadcastMsg_LANLobbyReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTABroadcastMsg_LANLobbyReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTABroadcastMsg_LANLobbyReply::IsInitialized() const {
  return true;
}

void CDOTABroadcastMsg_LANLobbyReply::Swap(CDOTABroadcastMsg_LANLobbyReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTABroadcastMsg_LANLobbyReply::InternalSwap(CDOTABroadcastMsg_LANLobbyReply* other) {
  members_.InternalSwap(&other->members_);
  name_.Swap(&other->name_);
  std::swap(id_, other->id_);
  std::swap(tournament_id_, other->tournament_id_);
  std::swap(tournament_game_id_, other->tournament_game_id_);
  std::swap(requires_pass_key_, other->requires_pass_key_);
  std::swap(leader_account_id_, other->leader_account_id_);
  std::swap(game_mode_, other->game_mode_);
  std::swap(players_, other->players_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTABroadcastMsg_LANLobbyReply::GetMetadata() const {
  protobuf_dota_5fbroadcastmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fbroadcastmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTABroadcastMsg_LANLobbyReply

// optional uint64 id = 1;
bool CDOTABroadcastMsg_LANLobbyReply::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTABroadcastMsg_LANLobbyReply::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTABroadcastMsg_LANLobbyReply::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTABroadcastMsg_LANLobbyReply::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
::google::protobuf::uint64 CDOTABroadcastMsg_LANLobbyReply::id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTABroadcastMsg_LANLobbyReply.id)
  return id_;
}
void CDOTABroadcastMsg_LANLobbyReply::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTABroadcastMsg_LANLobbyReply.id)
}

// optional uint32 tournament_id = 2;
bool CDOTABroadcastMsg_LANLobbyReply::has_tournament_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDOTABroadcastMsg_LANLobbyReply::set_has_tournament_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CDOTABroadcastMsg_LANLobbyReply::clear_has_tournament_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDOTABroadcastMsg_LANLobbyReply::clear_tournament_id() {
  tournament_id_ = 0u;
  clear_has_tournament_id();
}
::google::protobuf::uint32 CDOTABroadcastMsg_LANLobbyReply::tournament_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTABroadcastMsg_LANLobbyReply.tournament_id)
  return tournament_id_;
}
void CDOTABroadcastMsg_LANLobbyReply::set_tournament_id(::google::protobuf::uint32 value) {
  set_has_tournament_id();
  tournament_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTABroadcastMsg_LANLobbyReply.tournament_id)
}

// optional uint32 tournament_game_id = 3;
bool CDOTABroadcastMsg_LANLobbyReply::has_tournament_game_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CDOTABroadcastMsg_LANLobbyReply::set_has_tournament_game_id() {
  _has_bits_[0] |= 0x00000008u;
}
void CDOTABroadcastMsg_LANLobbyReply::clear_has_tournament_game_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void CDOTABroadcastMsg_LANLobbyReply::clear_tournament_game_id() {
  tournament_game_id_ = 0u;
  clear_has_tournament_game_id();
}
::google::protobuf::uint32 CDOTABroadcastMsg_LANLobbyReply::tournament_game_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTABroadcastMsg_LANLobbyReply.tournament_game_id)
  return tournament_game_id_;
}
void CDOTABroadcastMsg_LANLobbyReply::set_tournament_game_id(::google::protobuf::uint32 value) {
  set_has_tournament_game_id();
  tournament_game_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTABroadcastMsg_LANLobbyReply.tournament_game_id)
}

// repeated .proto.dota.CDOTABroadcastMsg_LANLobbyReply.CLobbyMember members = 4;
int CDOTABroadcastMsg_LANLobbyReply::members_size() const {
  return members_.size();
}
void CDOTABroadcastMsg_LANLobbyReply::clear_members() {
  members_.Clear();
}
const ::proto::dota::CDOTABroadcastMsg_LANLobbyReply_CLobbyMember& CDOTABroadcastMsg_LANLobbyReply::members(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTABroadcastMsg_LANLobbyReply.members)
  return members_.Get(index);
}
::proto::dota::CDOTABroadcastMsg_LANLobbyReply_CLobbyMember* CDOTABroadcastMsg_LANLobbyReply::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTABroadcastMsg_LANLobbyReply.members)
  return members_.Mutable(index);
}
::proto::dota::CDOTABroadcastMsg_LANLobbyReply_CLobbyMember* CDOTABroadcastMsg_LANLobbyReply::add_members() {
  // @@protoc_insertion_point(field_add:proto.dota.CDOTABroadcastMsg_LANLobbyReply.members)
  return members_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTABroadcastMsg_LANLobbyReply_CLobbyMember >*
CDOTABroadcastMsg_LANLobbyReply::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTABroadcastMsg_LANLobbyReply.members)
  return &members_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTABroadcastMsg_LANLobbyReply_CLobbyMember >&
CDOTABroadcastMsg_LANLobbyReply::members() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTABroadcastMsg_LANLobbyReply.members)
  return members_;
}

// optional bool requires_pass_key = 5;
bool CDOTABroadcastMsg_LANLobbyReply::has_requires_pass_key() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CDOTABroadcastMsg_LANLobbyReply::set_has_requires_pass_key() {
  _has_bits_[0] |= 0x00000010u;
}
void CDOTABroadcastMsg_LANLobbyReply::clear_has_requires_pass_key() {
  _has_bits_[0] &= ~0x00000010u;
}
void CDOTABroadcastMsg_LANLobbyReply::clear_requires_pass_key() {
  requires_pass_key_ = false;
  clear_has_requires_pass_key();
}
bool CDOTABroadcastMsg_LANLobbyReply::requires_pass_key() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTABroadcastMsg_LANLobbyReply.requires_pass_key)
  return requires_pass_key_;
}
void CDOTABroadcastMsg_LANLobbyReply::set_requires_pass_key(bool value) {
  set_has_requires_pass_key();
  requires_pass_key_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTABroadcastMsg_LANLobbyReply.requires_pass_key)
}

// optional uint32 leader_account_id = 6;
bool CDOTABroadcastMsg_LANLobbyReply::has_leader_account_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CDOTABroadcastMsg_LANLobbyReply::set_has_leader_account_id() {
  _has_bits_[0] |= 0x00000020u;
}
void CDOTABroadcastMsg_LANLobbyReply::clear_has_leader_account_id() {
  _has_bits_[0] &= ~0x00000020u;
}
void CDOTABroadcastMsg_LANLobbyReply::clear_leader_account_id() {
  leader_account_id_ = 0u;
  clear_has_leader_account_id();
}
::google::protobuf::uint32 CDOTABroadcastMsg_LANLobbyReply::leader_account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTABroadcastMsg_LANLobbyReply.leader_account_id)
  return leader_account_id_;
}
void CDOTABroadcastMsg_LANLobbyReply::set_leader_account_id(::google::protobuf::uint32 value) {
  set_has_leader_account_id();
  leader_account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTABroadcastMsg_LANLobbyReply.leader_account_id)
}

// optional uint32 game_mode = 7;
bool CDOTABroadcastMsg_LANLobbyReply::has_game_mode() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CDOTABroadcastMsg_LANLobbyReply::set_has_game_mode() {
  _has_bits_[0] |= 0x00000040u;
}
void CDOTABroadcastMsg_LANLobbyReply::clear_has_game_mode() {
  _has_bits_[0] &= ~0x00000040u;
}
void CDOTABroadcastMsg_LANLobbyReply::clear_game_mode() {
  game_mode_ = 0u;
  clear_has_game_mode();
}
::google::protobuf::uint32 CDOTABroadcastMsg_LANLobbyReply::game_mode() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTABroadcastMsg_LANLobbyReply.game_mode)
  return game_mode_;
}
void CDOTABroadcastMsg_LANLobbyReply::set_game_mode(::google::protobuf::uint32 value) {
  set_has_game_mode();
  game_mode_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTABroadcastMsg_LANLobbyReply.game_mode)
}

// optional string name = 8;
bool CDOTABroadcastMsg_LANLobbyReply::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTABroadcastMsg_LANLobbyReply::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTABroadcastMsg_LANLobbyReply::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTABroadcastMsg_LANLobbyReply::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& CDOTABroadcastMsg_LANLobbyReply::name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTABroadcastMsg_LANLobbyReply.name)
  return name_.GetNoArena();
}
void CDOTABroadcastMsg_LANLobbyReply::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTABroadcastMsg_LANLobbyReply.name)
}
#if LANG_CXX11
void CDOTABroadcastMsg_LANLobbyReply::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDOTABroadcastMsg_LANLobbyReply.name)
}
#endif
void CDOTABroadcastMsg_LANLobbyReply::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDOTABroadcastMsg_LANLobbyReply.name)
}
void CDOTABroadcastMsg_LANLobbyReply::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDOTABroadcastMsg_LANLobbyReply.name)
}
::std::string* CDOTABroadcastMsg_LANLobbyReply::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTABroadcastMsg_LANLobbyReply.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDOTABroadcastMsg_LANLobbyReply::release_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTABroadcastMsg_LANLobbyReply.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDOTABroadcastMsg_LANLobbyReply::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTABroadcastMsg_LANLobbyReply.name)
}

// optional uint32 players = 9;
bool CDOTABroadcastMsg_LANLobbyReply::has_players() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CDOTABroadcastMsg_LANLobbyReply::set_has_players() {
  _has_bits_[0] |= 0x00000080u;
}
void CDOTABroadcastMsg_LANLobbyReply::clear_has_players() {
  _has_bits_[0] &= ~0x00000080u;
}
void CDOTABroadcastMsg_LANLobbyReply::clear_players() {
  players_ = 0u;
  clear_has_players();
}
::google::protobuf::uint32 CDOTABroadcastMsg_LANLobbyReply::players() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTABroadcastMsg_LANLobbyReply.players)
  return players_;
}
void CDOTABroadcastMsg_LANLobbyReply::set_players(::google::protobuf::uint32 value) {
  set_has_players();
  players_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTABroadcastMsg_LANLobbyReply.players)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace dota
}  // namespace proto

// @@protoc_insertion_point(global_scope)
