// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_gcmessages_client_fantasy.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dota_gcmessages_client_fantasy.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace dota {
class CMsgGCPlayerInfo_PlayerInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCPlayerInfo_PlayerInfo> {
} _CMsgGCPlayerInfo_PlayerInfo_default_instance_;
class CMsgGCPlayerInfo_RegionLeaderboardDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCPlayerInfo_RegionLeaderboard> {
} _CMsgGCPlayerInfo_RegionLeaderboard_default_instance_;
class CMsgGCPlayerInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCPlayerInfo> {
} _CMsgGCPlayerInfo_default_instance_;
class CMsgDOTACreateFantasyLeagueRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTACreateFantasyLeagueRequest> {
} _CMsgDOTACreateFantasyLeagueRequest_default_instance_;
class CMsgDOTACreateFantasyLeagueResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTACreateFantasyLeagueResponse> {
} _CMsgDOTACreateFantasyLeagueResponse_default_instance_;
class CMsgFantasyLeagueScoringDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgFantasyLeagueScoring> {
} _CMsgFantasyLeagueScoring_default_instance_;
class CMsgDOTAFantasyLeagueInfo_OwnerInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyLeagueInfo_OwnerInfo> {
} _CMsgDOTAFantasyLeagueInfo_OwnerInfo_default_instance_;
class CMsgDOTAFantasyLeagueInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyLeagueInfo> {
} _CMsgDOTAFantasyLeagueInfo_default_instance_;
class CMsgDOTAFantasyLeagueEditInfoRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyLeagueEditInfoRequest> {
} _CMsgDOTAFantasyLeagueEditInfoRequest_default_instance_;
class CMsgDOTAFantasyLeagueEditInfoResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyLeagueEditInfoResponse> {
} _CMsgDOTAFantasyLeagueEditInfoResponse_default_instance_;
class CMsgDOTAFantasyLeagueFindRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyLeagueFindRequest> {
} _CMsgDOTAFantasyLeagueFindRequest_default_instance_;
class CMsgDOTAFantasyLeagueFindResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyLeagueFindResponse> {
} _CMsgDOTAFantasyLeagueFindResponse_default_instance_;
class CMsgDOTAFantasyLeagueInfoRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyLeagueInfoRequest> {
} _CMsgDOTAFantasyLeagueInfoRequest_default_instance_;
class CMsgDOTAFantasyLeagueInfoResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyLeagueInfoResponse> {
} _CMsgDOTAFantasyLeagueInfoResponse_default_instance_;
class CMsgDOTAFantasyLeagueMatchupsRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyLeagueMatchupsRequest> {
} _CMsgDOTAFantasyLeagueMatchupsRequest_default_instance_;
class CMsgDOTAFantasyLeagueMatchupsResponse_MatchupDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyLeagueMatchupsResponse_Matchup> {
} _CMsgDOTAFantasyLeagueMatchupsResponse_Matchup_default_instance_;
class CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchupsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups> {
} _CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups_default_instance_;
class CMsgDOTAFantasyLeagueMatchupsResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyLeagueMatchupsResponse> {
} _CMsgDOTAFantasyLeagueMatchupsResponse_default_instance_;
class CMsgDOTAEditFantasyTeamRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAEditFantasyTeamRequest> {
} _CMsgDOTAEditFantasyTeamRequest_default_instance_;
class CMsgDOTAEditFantasyTeamResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAEditFantasyTeamResponse> {
} _CMsgDOTAEditFantasyTeamResponse_default_instance_;
class CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueIDDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID> {
} _CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID_default_instance_;
class CMsgDOTAFantasyTeamInfoRequestByOwnerAccountIDDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID> {
} _CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID_default_instance_;
class CMsgDOTAFantasyTeamInfoResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyTeamInfoResponse> {
} _CMsgDOTAFantasyTeamInfoResponse_default_instance_;
class CMsgDOTAFantasyTeamInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyTeamInfo> {
} _CMsgDOTAFantasyTeamInfo_default_instance_;
class CMsgDOTAFantasyTeamScoreRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyTeamScoreRequest> {
} _CMsgDOTAFantasyTeamScoreRequest_default_instance_;
class CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScoreDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore> {
} _CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore_default_instance_;
class CMsgDOTAFantasyTeamScoreResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyTeamScoreResponse> {
} _CMsgDOTAFantasyTeamScoreResponse_default_instance_;
class CMsgDOTAFantasyTeamStandingsRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyTeamStandingsRequest> {
} _CMsgDOTAFantasyTeamStandingsRequest_default_instance_;
class CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScoreDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore> {
} _CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore_default_instance_;
class CMsgDOTAFantasyTeamStandingsResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyTeamStandingsResponse> {
} _CMsgDOTAFantasyTeamStandingsResponse_default_instance_;
class CMsgDOTAFantasyPlayerScoreRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyPlayerScoreRequest> {
} _CMsgDOTAFantasyPlayerScoreRequest_default_instance_;
class CMsgDOTAFantasyPlayerScoreResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyPlayerScoreResponse> {
} _CMsgDOTAFantasyPlayerScoreResponse_default_instance_;
class CMsgDOTAFantasyPlayerStandingsRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyPlayerStandingsRequest> {
} _CMsgDOTAFantasyPlayerStandingsRequest_default_instance_;
class CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScoreDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore> {
} _CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore_default_instance_;
class CMsgDOTAFantasyPlayerStandingsResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyPlayerStandingsResponse> {
} _CMsgDOTAFantasyPlayerStandingsResponse_default_instance_;
class CMsgDOTAFantasyPlayerInfoRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyPlayerInfoRequest> {
} _CMsgDOTAFantasyPlayerInfoRequest_default_instance_;
class CMsgDOTAFantasyPlayerInfoResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyPlayerInfoResponse> {
} _CMsgDOTAFantasyPlayerInfoResponse_default_instance_;
class CMsgDOTAFantasyLeagueCreateRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyLeagueCreateRequest> {
} _CMsgDOTAFantasyLeagueCreateRequest_default_instance_;
class CMsgDOTAFantasyLeagueCreateResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyLeagueCreateResponse> {
} _CMsgDOTAFantasyLeagueCreateResponse_default_instance_;
class CMsgDOTAFantasyTeamCreateRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyTeamCreateRequest> {
} _CMsgDOTAFantasyTeamCreateRequest_default_instance_;
class CMsgDOTAFantasyTeamCreateResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyTeamCreateResponse> {
} _CMsgDOTAFantasyTeamCreateResponse_default_instance_;
class CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChangeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange> {
} _CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange_default_instance_;
class CMsgDOTAFantasyLeagueEditInvitesRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyLeagueEditInvitesRequest> {
} _CMsgDOTAFantasyLeagueEditInvitesRequest_default_instance_;
class CMsgDOTAFantasyLeagueEditInvitesResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyLeagueEditInvitesResponse> {
} _CMsgDOTAFantasyLeagueEditInvitesResponse_default_instance_;
class CMsgDOTAFantasyLeagueDraftStatusRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyLeagueDraftStatusRequest> {
} _CMsgDOTAFantasyLeagueDraftStatusRequest_default_instance_;
class CMsgDOTAFantasyLeagueDraftStatusDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyLeagueDraftStatus> {
} _CMsgDOTAFantasyLeagueDraftStatus_default_instance_;
class CMsgDOTAFantasyLeagueDraftPlayerRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyLeagueDraftPlayerRequest> {
} _CMsgDOTAFantasyLeagueDraftPlayerRequest_default_instance_;
class CMsgDOTAFantasyLeagueDraftPlayerResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyLeagueDraftPlayerResponse> {
} _CMsgDOTAFantasyLeagueDraftPlayerResponse_default_instance_;
class CMsgDOTAFantasyTeamRosterSwapRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyTeamRosterSwapRequest> {
} _CMsgDOTAFantasyTeamRosterSwapRequest_default_instance_;
class CMsgDOTAFantasyTeamRosterSwapResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyTeamRosterSwapResponse> {
} _CMsgDOTAFantasyTeamRosterSwapResponse_default_instance_;
class CMsgDOTAFantasyTeamRosterAddDropRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyTeamRosterAddDropRequest> {
} _CMsgDOTAFantasyTeamRosterAddDropRequest_default_instance_;
class CMsgDOTAFantasyTeamRosterAddDropResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyTeamRosterAddDropResponse> {
} _CMsgDOTAFantasyTeamRosterAddDropResponse_default_instance_;
class CMsgDOTAFantasyTeamTradesRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyTeamTradesRequest> {
} _CMsgDOTAFantasyTeamTradesRequest_default_instance_;
class CMsgDOTAFantasyTeamTradesResponse_TradeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyTeamTradesResponse_Trade> {
} _CMsgDOTAFantasyTeamTradesResponse_Trade_default_instance_;
class CMsgDOTAFantasyTeamTradesResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyTeamTradesResponse> {
} _CMsgDOTAFantasyTeamTradesResponse_default_instance_;
class CMsgDOTAFantasyTeamTradeCancelRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyTeamTradeCancelRequest> {
} _CMsgDOTAFantasyTeamTradeCancelRequest_default_instance_;
class CMsgDOTAFantasyTeamTradeCancelResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyTeamTradeCancelResponse> {
} _CMsgDOTAFantasyTeamTradeCancelResponse_default_instance_;
class CMsgDOTAFantasyTeamRosterRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyTeamRosterRequest> {
} _CMsgDOTAFantasyTeamRosterRequest_default_instance_;
class CMsgDOTAFantasyTeamRosterResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyTeamRosterResponse> {
} _CMsgDOTAFantasyTeamRosterResponse_default_instance_;
class CMsgDOTAFantasyPlayerHisoricalStatsRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyPlayerHisoricalStatsRequest> {
} _CMsgDOTAFantasyPlayerHisoricalStatsRequest_default_instance_;
class CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulatorDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator> {
} _CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator_default_instance_;
class CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStatsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats> {
} _CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats_default_instance_;
class CMsgDOTAFantasyPlayerHisoricalStatsResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyPlayerHisoricalStatsResponse> {
} _CMsgDOTAFantasyPlayerHisoricalStatsResponse_default_instance_;
class CMsgDOTAFantasyMessageAddDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyMessageAdd> {
} _CMsgDOTAFantasyMessageAdd_default_instance_;
class CMsgDOTAFantasyMessagesRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyMessagesRequest> {
} _CMsgDOTAFantasyMessagesRequest_default_instance_;
class CMsgDOTAFantasyMessagesResponse_MessageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyMessagesResponse_Message> {
} _CMsgDOTAFantasyMessagesResponse_Message_default_instance_;
class CMsgDOTAFantasyMessagesResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyMessagesResponse> {
} _CMsgDOTAFantasyMessagesResponse_default_instance_;
class CMsgDOTAFantasyRemoveOwnerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyRemoveOwner> {
} _CMsgDOTAFantasyRemoveOwner_default_instance_;
class CMsgDOTAFantasyRemoveOwnerResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyRemoveOwnerResponse> {
} _CMsgDOTAFantasyRemoveOwnerResponse_default_instance_;
class CMsgDOTAFantasyScheduledMatchesRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyScheduledMatchesRequest> {
} _CMsgDOTAFantasyScheduledMatchesRequest_default_instance_;
class CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDaysDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays> {
} _CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays_default_instance_;
class CMsgDOTAFantasyScheduledMatchesResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyScheduledMatchesResponse> {
} _CMsgDOTAFantasyScheduledMatchesResponse_default_instance_;
class CMsgDOTAFantasyLeaveLeagueRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyLeaveLeagueRequest> {
} _CMsgDOTAFantasyLeaveLeagueRequest_default_instance_;
class CMsgDOTAFantasyLeaveLeagueResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyLeaveLeagueResponse> {
} _CMsgDOTAFantasyLeaveLeagueResponse_default_instance_;
class CMsgDOTAFantasyPlayerScoreDetailsRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyPlayerScoreDetailsRequest> {
} _CMsgDOTAFantasyPlayerScoreDetailsRequest_default_instance_;
class CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData> {
} _CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData_default_instance_;
class CMsgDOTAFantasyPlayerScoreDetailsResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyPlayerScoreDetailsResponse> {
} _CMsgDOTAFantasyPlayerScoreDetailsResponse_default_instance_;
class CMsgDOTAPassportVoteTeamGuessDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAPassportVoteTeamGuess> {
} _CMsgDOTAPassportVoteTeamGuess_default_instance_;
class CMsgDOTAPassportVoteGenericSelectionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAPassportVoteGenericSelection> {
} _CMsgDOTAPassportVoteGenericSelection_default_instance_;
class CMsgDOTAPassportStampedPlayerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAPassportStampedPlayer> {
} _CMsgDOTAPassportStampedPlayer_default_instance_;
class CMsgDOTAPassportPlayerCardChallengeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAPassportPlayerCardChallenge> {
} _CMsgDOTAPassportPlayerCardChallenge_default_instance_;
class CMsgDOTAPassportVoteDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAPassportVote> {
} _CMsgDOTAPassportVote_default_instance_;
class CMsgClientToGCGetPlayerCardRosterRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientToGCGetPlayerCardRosterRequest> {
} _CMsgClientToGCGetPlayerCardRosterRequest_default_instance_;
class CMsgClientToGCGetPlayerCardRosterResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientToGCGetPlayerCardRosterResponse> {
} _CMsgClientToGCGetPlayerCardRosterResponse_default_instance_;
class CMsgClientToGCSetPlayerCardRosterRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientToGCSetPlayerCardRosterRequest> {
} _CMsgClientToGCSetPlayerCardRosterRequest_default_instance_;
class CMsgClientToGCSetPlayerCardRosterResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientToGCSetPlayerCardRosterResponse> {
} _CMsgClientToGCSetPlayerCardRosterResponse_default_instance_;

namespace protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[86];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[28];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCPlayerInfo_PlayerInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCPlayerInfo_PlayerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCPlayerInfo_PlayerInfo, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCPlayerInfo_PlayerInfo, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCPlayerInfo_PlayerInfo, country_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCPlayerInfo_PlayerInfo, fantasy_role_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCPlayerInfo_PlayerInfo, team_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCPlayerInfo_PlayerInfo, team_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCPlayerInfo_PlayerInfo, team_tag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCPlayerInfo_PlayerInfo, sponsor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCPlayerInfo_PlayerInfo, is_locked_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCPlayerInfo_PlayerInfo, is_pro_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCPlayerInfo_PlayerInfo, locked_until_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCPlayerInfo_PlayerInfo, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCPlayerInfo_PlayerInfo, registered_team_id_),
  5,
  0,
  1,
  6,
  7,
  2,
  3,
  4,
  8,
  9,
  10,
  11,
  12,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCPlayerInfo_RegionLeaderboard, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCPlayerInfo_RegionLeaderboard, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCPlayerInfo_RegionLeaderboard, division_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCPlayerInfo_RegionLeaderboard, account_ids_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCPlayerInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCPlayerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCPlayerInfo, player_infos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCPlayerInfo, leaderboards_),
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACreateFantasyLeagueRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACreateFantasyLeagueRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACreateFantasyLeagueRequest, league_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACreateFantasyLeagueRequest, league_logo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACreateFantasyLeagueRequest, selection_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACreateFantasyLeagueRequest, team_count_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACreateFantasyLeagueResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACreateFantasyLeagueResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACreateFantasyLeagueResponse, result_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFantasyLeagueScoring, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFantasyLeagueScoring, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFantasyLeagueScoring, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFantasyLeagueScoring, kills_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFantasyLeagueScoring, deaths_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFantasyLeagueScoring, assists_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFantasyLeagueScoring, last_hits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFantasyLeagueScoring, denies_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFantasyLeagueScoring, gpm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFantasyLeagueScoring, xppm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFantasyLeagueScoring, stuns_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFantasyLeagueScoring, healing_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFantasyLeagueScoring, tower_kills_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFantasyLeagueScoring, roshan_kills_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFantasyLeagueScoring, multiplier_premium_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFantasyLeagueScoring, multiplier_professional_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueInfo_OwnerInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueInfo_OwnerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueInfo_OwnerInfo, owner_account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueInfo_OwnerInfo, left_league_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueInfo_OwnerInfo, player_account_id_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueInfo, fantasy_league_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueInfo, commissioner_account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueInfo, fantasy_league_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueInfo, selection_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueInfo, team_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueInfo, logo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueInfo, scoring_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueInfo, draft_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueInfo, draft_pick_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueInfo, season_start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueInfo, season_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueInfo, veto_votes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueInfo, acquisitions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueInfo, slot_1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueInfo, slot_2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueInfo, slot_3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueInfo, slot_4_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueInfo, slot_5_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueInfo, bench_slots_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueInfo, owner_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueInfo, players_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueInfo, time_zone_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueInfo, season_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueInfo, password_),
  3,
  4,
  0,
  5,
  6,
  7,
  2,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  ~0u,
  ~0u,
  20,
  21,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueEditInfoRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueEditInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueEditInfoRequest, fantasy_league_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueEditInfoRequest, edit_info_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueEditInfoResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueEditInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueEditInfoResponse, result_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueFindRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueFindRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueFindRequest, fantasy_league_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueFindRequest, password_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueFindResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueFindResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueFindResponse, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueFindResponse, fantasy_league_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueFindResponse, commissioner_name_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueInfoRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueInfoRequest, fantasy_league_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueInfoResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueInfoResponse, result_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueMatchupsRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueMatchupsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueMatchupsRequest, fantasy_league_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueMatchupsResponse_Matchup, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueMatchupsResponse_Matchup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueMatchupsResponse_Matchup, owner_account_id_1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueMatchupsResponse_Matchup, owner_account_id_2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueMatchupsResponse_Matchup, score_1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueMatchupsResponse_Matchup, score_2_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups, matchup_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups, start_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups, end_time_),
  ~0u,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueMatchupsResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueMatchupsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueMatchupsResponse, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueMatchupsResponse, fantasy_league_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueMatchupsResponse, weekly_matchups_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAEditFantasyTeamRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAEditFantasyTeamRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAEditFantasyTeamRequest, fantasy_league_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAEditFantasyTeamRequest, team_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAEditFantasyTeamRequest, team_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAEditFantasyTeamRequest, team_logo_),
  1,
  2,
  0,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAEditFantasyTeamResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAEditFantasyTeamResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAEditFantasyTeamResponse, result_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID, fantasy_league_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID, owner_account_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamInfoResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamInfoResponse, results_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamInfo, fantasy_league_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamInfo, owner_account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamInfo, fantasy_team_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamInfo, team_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamInfo, team_logo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamInfo, wins_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamInfo, losses_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamInfo, current_roster_),
  1,
  2,
  3,
  0,
  5,
  4,
  6,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamScoreRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamScoreRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamScoreRequest, fantasy_league_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamScoreRequest, owner_account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamScoreRequest, fantasy_team_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamScoreRequest, filter_match_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamScoreRequest, filter_start_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamScoreRequest, filter_end_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamScoreRequest, include_bench_),
  0,
  1,
  3,
  2,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore, score_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamScoreResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamScoreResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamScoreResponse, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamScoreResponse, fantasy_team_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamScoreResponse, fantasy_player_score_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamStandingsRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamStandingsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamStandingsRequest, fantasy_league_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamStandingsRequest, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamStandingsRequest, filter_start_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamStandingsRequest, filter_end_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamStandingsRequest, filter_match_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamStandingsRequest, filter_last_match_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamStandingsRequest, filter_in_hall_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore, fantasy_league_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore, owner_account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore, fantasy_team_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore, fantasy_team_logo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore, owner_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore, fantasy_team_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore, score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore, score_against_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore, wins_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore, losses_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore, streak_),
  2,
  3,
  5,
  4,
  0,
  1,
  6,
  7,
  8,
  9,
  10,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamStandingsResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamStandingsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamStandingsResponse, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamStandingsResponse, team_scores_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerScoreRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerScoreRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerScoreRequest, fantasy_league_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerScoreRequest, player_account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerScoreRequest, filter_start_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerScoreRequest, filter_end_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerScoreRequest, filter_match_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerScoreRequest, filter_last_match_),
  0,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerScoreResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerScoreResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerScoreResponse, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerScoreResponse, fantasy_league_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerScoreResponse, player_account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerScoreResponse, player_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerScoreResponse, score_),
  1,
  2,
  3,
  0,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStandingsRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStandingsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStandingsRequest, fantasy_league_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStandingsRequest, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStandingsRequest, role_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStandingsRequest, filter_start_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStandingsRequest, filter_end_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStandingsRequest, filter_match_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStandingsRequest, filter_last_match_),
  0,
  1,
  2,
  3,
  5,
  4,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore, player_account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore, player_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore, score_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStandingsResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStandingsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStandingsResponse, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStandingsResponse, fantasy_league_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStandingsResponse, role_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStandingsResponse, player_scores_),
  0,
  1,
  2,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerInfoRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerInfoResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerInfoResponse, msg_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueCreateRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueCreateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueCreateRequest, season_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueCreateRequest, fantasy_league_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueCreateRequest, password_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueCreateRequest, team_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueCreateRequest, logo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueCreateRequest, ticket_item_id_),
  5,
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueCreateResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueCreateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueCreateResponse, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueCreateResponse, fantasy_league_id_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamCreateRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamCreateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamCreateRequest, fantasy_league_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamCreateRequest, password_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamCreateRequest, team_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamCreateRequest, logo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamCreateRequest, ticket_item_id_),
  4,
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamCreateResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamCreateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamCreateResponse, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamCreateResponse, fantasy_team_index_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange, invited_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueEditInvitesRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueEditInvitesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueEditInvitesRequest, fantasy_league_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueEditInvitesRequest, password_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueEditInvitesRequest, invite_change_),
  1,
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueEditInvitesResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueEditInvitesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueEditInvitesResponse, result_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueDraftStatusRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueDraftStatusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueDraftStatusRequest, fantasy_league_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueDraftStatus, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueDraftStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueDraftStatus, fantasy_league_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueDraftStatus, draft_order_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueDraftStatus, current_pick_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueDraftStatus, time_remaining_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueDraftStatus, pending_resume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueDraftStatus, completed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueDraftStatus, available_players_),
  0,
  ~0u,
  1,
  2,
  3,
  4,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueDraftPlayerRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueDraftPlayerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueDraftPlayerRequest, fantasy_league_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueDraftPlayerRequest, team_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueDraftPlayerRequest, player_account_id_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueDraftPlayerResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueDraftPlayerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeagueDraftPlayerResponse, result_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamRosterSwapRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamRosterSwapRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamRosterSwapRequest, fantasy_league_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamRosterSwapRequest, team_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamRosterSwapRequest, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamRosterSwapRequest, slot_1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamRosterSwapRequest, slot_2_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamRosterSwapResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamRosterSwapResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamRosterSwapResponse, result_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamRosterAddDropRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamRosterAddDropRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamRosterAddDropRequest, fantasy_league_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamRosterAddDropRequest, team_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamRosterAddDropRequest, add_account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamRosterAddDropRequest, drop_account_id_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamRosterAddDropResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamRosterAddDropResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamRosterAddDropResponse, result_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamTradesRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamTradesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamTradesRequest, fantasy_league_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamTradesResponse_Trade, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamTradesResponse_Trade, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamTradesResponse_Trade, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamTradesResponse_Trade, owner_account_id_1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamTradesResponse_Trade, owner_account_id_2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamTradesResponse_Trade, player_account_id_1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamTradesResponse_Trade, player_account_id_2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamTradesResponse_Trade, status_),
  0,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamTradesResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamTradesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamTradesResponse, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamTradesResponse, trades_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamTradeCancelRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamTradeCancelRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamTradeCancelRequest, fantasy_league_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamTradeCancelRequest, team_index_1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamTradeCancelRequest, owner_account_id_2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamTradeCancelRequest, team_index_2_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamTradeCancelResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamTradeCancelResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamTradeCancelResponse, result_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamRosterRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamRosterRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamRosterRequest, fantasy_league_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamRosterRequest, team_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamRosterRequest, owner_account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamRosterRequest, timestamp_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamRosterResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamRosterResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamRosterResponse, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamRosterResponse, player_account_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyTeamRosterResponse, player_locked_),
  0,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerHisoricalStatsRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerHisoricalStatsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerHisoricalStatsRequest, fantasy_league_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator, matches_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator, levels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator, kills_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator, deaths_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator, assists_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator, last_hits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator, denies_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator, gpm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator, xppm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator, stuns_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator, healing_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator, tower_kills_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator, roshan_kills_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator, score_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats, weeks_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats, stats_premium_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats, stats_professional_),
  2,
  3,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerHisoricalStatsResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerHisoricalStatsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerHisoricalStatsResponse, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerHisoricalStatsResponse, stats_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyMessageAdd, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyMessageAdd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyMessageAdd, fantasy_league_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyMessageAdd, message_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyMessagesRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyMessagesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyMessagesRequest, fantasy_league_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyMessagesRequest, start_message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyMessagesRequest, end_message_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyMessagesResponse_Message, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyMessagesResponse_Message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyMessagesResponse_Message, message_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyMessagesResponse_Message, message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyMessagesResponse_Message, author_account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyMessagesResponse_Message, time_),
  1,
  0,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyMessagesResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyMessagesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyMessagesResponse, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyMessagesResponse, messages_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyMessagesResponse, num_total_messages_),
  0,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyRemoveOwner, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyRemoveOwner, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyRemoveOwner, fantasy_league_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyRemoveOwner, owner_account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyRemoveOwner, team_index_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyRemoveOwnerResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyRemoveOwnerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyRemoveOwnerResponse, result_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyScheduledMatchesRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyScheduledMatchesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyScheduledMatchesRequest, fantasy_league_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays, team_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays, league_ids_),
  0,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyScheduledMatchesResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyScheduledMatchesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyScheduledMatchesResponse, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyScheduledMatchesResponse, scheduled_match_days_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeaveLeagueRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeaveLeagueRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeaveLeagueRequest, fantasy_league_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeaveLeagueRequest, fantasy_team_index_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeaveLeagueResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeaveLeagueResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyLeaveLeagueResponse, result_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerScoreDetailsRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerScoreDetailsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerScoreDetailsRequest, fantasy_league_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerScoreDetailsRequest, player_account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerScoreDetailsRequest, start_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerScoreDetailsRequest, end_time_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData, match_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData, series_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData, series_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData, series_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData, league_tier_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData, league_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData, opposing_team_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData, opposing_team_logo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData, opposing_team_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData, owned_by_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData, benched_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  0,
  9,
  10,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerScoreDetailsResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerScoreDetailsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerScoreDetailsResponse, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerScoreDetailsResponse, data_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAPassportVoteTeamGuess, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAPassportVoteTeamGuess, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAPassportVoteTeamGuess, league_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAPassportVoteTeamGuess, winner_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAPassportVoteTeamGuess, runnerup_id_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAPassportVoteGenericSelection, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAPassportVoteGenericSelection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAPassportVoteGenericSelection, selection_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAPassportVoteGenericSelection, selection_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAPassportStampedPlayer, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAPassportStampedPlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAPassportStampedPlayer, steam_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAPassportStampedPlayer, stamp_level_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAPassportPlayerCardChallenge, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAPassportPlayerCardChallenge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAPassportPlayerCardChallenge, challenge_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAPassportVote, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAPassportVote, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAPassportVote, team_votes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAPassportVote, generic_selections_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAPassportVote, stamped_players_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAPassportVote, player_card_challenges_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCGetPlayerCardRosterRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCGetPlayerCardRosterRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCGetPlayerCardRosterRequest, league_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCGetPlayerCardRosterRequest, timestamp_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCGetPlayerCardRosterResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCGetPlayerCardRosterResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCGetPlayerCardRosterResponse, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCGetPlayerCardRosterResponse, player_card_item_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCGetPlayerCardRosterResponse, score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCGetPlayerCardRosterResponse, finalized_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCGetPlayerCardRosterResponse, percentile_),
  0,
  ~0u,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCSetPlayerCardRosterRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCSetPlayerCardRosterRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCSetPlayerCardRosterRequest, league_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCSetPlayerCardRosterRequest, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCSetPlayerCardRosterRequest, slot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCSetPlayerCardRosterRequest, player_card_item_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCSetPlayerCardRosterRequest, event_id_),
  0,
  1,
  3,
  2,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCSetPlayerCardRosterResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCSetPlayerCardRosterResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCSetPlayerCardRosterResponse, result_),
  0,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 18, sizeof(CMsgGCPlayerInfo_PlayerInfo)},
  { 31, 38, sizeof(CMsgGCPlayerInfo_RegionLeaderboard)},
  { 40, 47, sizeof(CMsgGCPlayerInfo)},
  { 49, 58, sizeof(CMsgDOTACreateFantasyLeagueRequest)},
  { 62, 68, sizeof(CMsgDOTACreateFantasyLeagueResponse)},
  { 69, 88, sizeof(CMsgFantasyLeagueScoring)},
  { 102, 110, sizeof(CMsgDOTAFantasyLeagueInfo_OwnerInfo)},
  { 113, 142, sizeof(CMsgDOTAFantasyLeagueInfo)},
  { 166, 173, sizeof(CMsgDOTAFantasyLeagueEditInfoRequest)},
  { 175, 181, sizeof(CMsgDOTAFantasyLeagueEditInfoResponse)},
  { 182, 189, sizeof(CMsgDOTAFantasyLeagueFindRequest)},
  { 191, 199, sizeof(CMsgDOTAFantasyLeagueFindResponse)},
  { 202, 208, sizeof(CMsgDOTAFantasyLeagueInfoRequest)},
  { 209, 215, sizeof(CMsgDOTAFantasyLeagueInfoResponse)},
  { 216, 222, sizeof(CMsgDOTAFantasyLeagueMatchupsRequest)},
  { 223, 232, sizeof(CMsgDOTAFantasyLeagueMatchupsResponse_Matchup)},
  { 236, 244, sizeof(CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups)},
  { 247, 255, sizeof(CMsgDOTAFantasyLeagueMatchupsResponse)},
  { 258, 267, sizeof(CMsgDOTAEditFantasyTeamRequest)},
  { 271, 277, sizeof(CMsgDOTAEditFantasyTeamResponse)},
  { 278, 284, sizeof(CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID)},
  { 285, 291, sizeof(CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID)},
  { 292, 298, sizeof(CMsgDOTAFantasyTeamInfoResponse)},
  { 299, 312, sizeof(CMsgDOTAFantasyTeamInfo)},
  { 320, 332, sizeof(CMsgDOTAFantasyTeamScoreRequest)},
  { 339, 346, sizeof(CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore)},
  { 348, 356, sizeof(CMsgDOTAFantasyTeamScoreResponse)},
  { 359, 371, sizeof(CMsgDOTAFantasyTeamStandingsRequest)},
  { 378, 394, sizeof(CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore)},
  { 405, 412, sizeof(CMsgDOTAFantasyTeamStandingsResponse)},
  { 414, 425, sizeof(CMsgDOTAFantasyPlayerScoreRequest)},
  { 431, 441, sizeof(CMsgDOTAFantasyPlayerScoreResponse)},
  { 446, 458, sizeof(CMsgDOTAFantasyPlayerStandingsRequest)},
  { 465, 473, sizeof(CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore)},
  { 476, 485, sizeof(CMsgDOTAFantasyPlayerStandingsResponse)},
  { 489, 494, sizeof(CMsgDOTAFantasyPlayerInfoRequest)},
  { 494, 500, sizeof(CMsgDOTAFantasyPlayerInfoResponse)},
  { 501, 512, sizeof(CMsgDOTAFantasyLeagueCreateRequest)},
  { 518, 525, sizeof(CMsgDOTAFantasyLeagueCreateResponse)},
  { 527, 537, sizeof(CMsgDOTAFantasyTeamCreateRequest)},
  { 542, 549, sizeof(CMsgDOTAFantasyTeamCreateResponse)},
  { 551, 558, sizeof(CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange)},
  { 560, 568, sizeof(CMsgDOTAFantasyLeagueEditInvitesRequest)},
  { 571, 577, sizeof(CMsgDOTAFantasyLeagueEditInvitesResponse)},
  { 578, 584, sizeof(CMsgDOTAFantasyLeagueDraftStatusRequest)},
  { 585, 597, sizeof(CMsgDOTAFantasyLeagueDraftStatus)},
  { 604, 612, sizeof(CMsgDOTAFantasyLeagueDraftPlayerRequest)},
  { 615, 621, sizeof(CMsgDOTAFantasyLeagueDraftPlayerResponse)},
  { 622, 632, sizeof(CMsgDOTAFantasyTeamRosterSwapRequest)},
  { 637, 643, sizeof(CMsgDOTAFantasyTeamRosterSwapResponse)},
  { 644, 653, sizeof(CMsgDOTAFantasyTeamRosterAddDropRequest)},
  { 657, 663, sizeof(CMsgDOTAFantasyTeamRosterAddDropResponse)},
  { 664, 670, sizeof(CMsgDOTAFantasyTeamTradesRequest)},
  { 671, 682, sizeof(CMsgDOTAFantasyTeamTradesResponse_Trade)},
  { 688, 695, sizeof(CMsgDOTAFantasyTeamTradesResponse)},
  { 697, 706, sizeof(CMsgDOTAFantasyTeamTradeCancelRequest)},
  { 710, 716, sizeof(CMsgDOTAFantasyTeamTradeCancelResponse)},
  { 717, 726, sizeof(CMsgDOTAFantasyTeamRosterRequest)},
  { 730, 738, sizeof(CMsgDOTAFantasyTeamRosterResponse)},
  { 741, 747, sizeof(CMsgDOTAFantasyPlayerHisoricalStatsRequest)},
  { 748, 767, sizeof(CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator)},
  { 781, 790, sizeof(CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats)},
  { 794, 801, sizeof(CMsgDOTAFantasyPlayerHisoricalStatsResponse)},
  { 803, 810, sizeof(CMsgDOTAFantasyMessageAdd)},
  { 812, 820, sizeof(CMsgDOTAFantasyMessagesRequest)},
  { 823, 832, sizeof(CMsgDOTAFantasyMessagesResponse_Message)},
  { 836, 844, sizeof(CMsgDOTAFantasyMessagesResponse)},
  { 847, 855, sizeof(CMsgDOTAFantasyRemoveOwner)},
  { 858, 864, sizeof(CMsgDOTAFantasyRemoveOwnerResponse)},
  { 865, 871, sizeof(CMsgDOTAFantasyScheduledMatchesRequest)},
  { 872, 880, sizeof(CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays)},
  { 883, 890, sizeof(CMsgDOTAFantasyScheduledMatchesResponse)},
  { 892, 899, sizeof(CMsgDOTAFantasyLeaveLeagueRequest)},
  { 901, 907, sizeof(CMsgDOTAFantasyLeaveLeagueResponse)},
  { 908, 917, sizeof(CMsgDOTAFantasyPlayerScoreDetailsRequest)},
  { 921, 937, sizeof(CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData)},
  { 948, 955, sizeof(CMsgDOTAFantasyPlayerScoreDetailsResponse)},
  { 957, 965, sizeof(CMsgDOTAPassportVoteTeamGuess)},
  { 968, 975, sizeof(CMsgDOTAPassportVoteGenericSelection)},
  { 977, 984, sizeof(CMsgDOTAPassportStampedPlayer)},
  { 986, 992, sizeof(CMsgDOTAPassportPlayerCardChallenge)},
  { 993, 1002, sizeof(CMsgDOTAPassportVote)},
  { 1006, 1013, sizeof(CMsgClientToGCGetPlayerCardRosterRequest)},
  { 1015, 1025, sizeof(CMsgClientToGCGetPlayerCardRosterResponse)},
  { 1030, 1040, sizeof(CMsgClientToGCSetPlayerCardRosterRequest)},
  { 1045, 1051, sizeof(CMsgClientToGCSetPlayerCardRosterResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCPlayerInfo_PlayerInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCPlayerInfo_RegionLeaderboard_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCPlayerInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTACreateFantasyLeagueRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTACreateFantasyLeagueResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgFantasyLeagueScoring_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAFantasyLeagueInfo_OwnerInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAFantasyLeagueInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAFantasyLeagueEditInfoRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAFantasyLeagueEditInfoResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAFantasyLeagueFindRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAFantasyLeagueFindResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAFantasyLeagueInfoRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAFantasyLeagueInfoResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAFantasyLeagueMatchupsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAFantasyLeagueMatchupsResponse_Matchup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAFantasyLeagueMatchupsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAEditFantasyTeamRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAEditFantasyTeamResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAFantasyTeamInfoResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAFantasyTeamInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAFantasyTeamScoreRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAFantasyTeamScoreResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAFantasyTeamStandingsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAFantasyTeamStandingsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAFantasyPlayerScoreRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAFantasyPlayerScoreResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAFantasyPlayerStandingsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAFantasyPlayerStandingsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAFantasyPlayerInfoRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAFantasyPlayerInfoResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAFantasyLeagueCreateRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAFantasyLeagueCreateResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAFantasyTeamCreateRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAFantasyTeamCreateResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAFantasyLeagueEditInvitesRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAFantasyLeagueEditInvitesResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAFantasyLeagueDraftStatusRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAFantasyLeagueDraftStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAFantasyLeagueDraftPlayerRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAFantasyLeagueDraftPlayerResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAFantasyTeamRosterSwapRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAFantasyTeamRosterSwapResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAFantasyTeamRosterAddDropRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAFantasyTeamRosterAddDropResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAFantasyTeamTradesRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAFantasyTeamTradesResponse_Trade_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAFantasyTeamTradesResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAFantasyTeamTradeCancelRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAFantasyTeamTradeCancelResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAFantasyTeamRosterRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAFantasyTeamRosterResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAFantasyPlayerHisoricalStatsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAFantasyPlayerHisoricalStatsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAFantasyMessageAdd_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAFantasyMessagesRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAFantasyMessagesResponse_Message_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAFantasyMessagesResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAFantasyRemoveOwner_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAFantasyRemoveOwnerResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAFantasyScheduledMatchesRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAFantasyScheduledMatchesResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAFantasyLeaveLeagueRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAFantasyLeaveLeagueResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAFantasyPlayerScoreDetailsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAFantasyPlayerScoreDetailsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAPassportVoteTeamGuess_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAPassportVoteGenericSelection_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAPassportStampedPlayer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAPassportPlayerCardChallenge_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAPassportVote_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientToGCGetPlayerCardRosterRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientToGCGetPlayerCardRosterResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientToGCSetPlayerCardRosterRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientToGCSetPlayerCardRosterResponse_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "dota_gcmessages_client_fantasy.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 86);
}

}  // namespace

void TableStruct::Shutdown() {
  _CMsgGCPlayerInfo_PlayerInfo_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _CMsgGCPlayerInfo_RegionLeaderboard_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _CMsgGCPlayerInfo_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _CMsgDOTACreateFantasyLeagueRequest_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _CMsgDOTACreateFantasyLeagueResponse_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _CMsgFantasyLeagueScoring_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _CMsgDOTAFantasyLeagueInfo_OwnerInfo_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _CMsgDOTAFantasyLeagueInfo_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _CMsgDOTAFantasyLeagueEditInfoRequest_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _CMsgDOTAFantasyLeagueEditInfoResponse_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _CMsgDOTAFantasyLeagueFindRequest_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _CMsgDOTAFantasyLeagueFindResponse_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _CMsgDOTAFantasyLeagueInfoRequest_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _CMsgDOTAFantasyLeagueInfoResponse_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _CMsgDOTAFantasyLeagueMatchupsRequest_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _CMsgDOTAFantasyLeagueMatchupsResponse_Matchup_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _CMsgDOTAFantasyLeagueMatchupsResponse_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _CMsgDOTAEditFantasyTeamRequest_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _CMsgDOTAEditFantasyTeamResponse_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID_default_instance_.Shutdown();
  delete file_level_metadata[20].reflection;
  _CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID_default_instance_.Shutdown();
  delete file_level_metadata[21].reflection;
  _CMsgDOTAFantasyTeamInfoResponse_default_instance_.Shutdown();
  delete file_level_metadata[22].reflection;
  _CMsgDOTAFantasyTeamInfo_default_instance_.Shutdown();
  delete file_level_metadata[23].reflection;
  _CMsgDOTAFantasyTeamScoreRequest_default_instance_.Shutdown();
  delete file_level_metadata[24].reflection;
  _CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore_default_instance_.Shutdown();
  delete file_level_metadata[25].reflection;
  _CMsgDOTAFantasyTeamScoreResponse_default_instance_.Shutdown();
  delete file_level_metadata[26].reflection;
  _CMsgDOTAFantasyTeamStandingsRequest_default_instance_.Shutdown();
  delete file_level_metadata[27].reflection;
  _CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore_default_instance_.Shutdown();
  delete file_level_metadata[28].reflection;
  _CMsgDOTAFantasyTeamStandingsResponse_default_instance_.Shutdown();
  delete file_level_metadata[29].reflection;
  _CMsgDOTAFantasyPlayerScoreRequest_default_instance_.Shutdown();
  delete file_level_metadata[30].reflection;
  _CMsgDOTAFantasyPlayerScoreResponse_default_instance_.Shutdown();
  delete file_level_metadata[31].reflection;
  _CMsgDOTAFantasyPlayerStandingsRequest_default_instance_.Shutdown();
  delete file_level_metadata[32].reflection;
  _CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore_default_instance_.Shutdown();
  delete file_level_metadata[33].reflection;
  _CMsgDOTAFantasyPlayerStandingsResponse_default_instance_.Shutdown();
  delete file_level_metadata[34].reflection;
  _CMsgDOTAFantasyPlayerInfoRequest_default_instance_.Shutdown();
  delete file_level_metadata[35].reflection;
  _CMsgDOTAFantasyPlayerInfoResponse_default_instance_.Shutdown();
  delete file_level_metadata[36].reflection;
  _CMsgDOTAFantasyLeagueCreateRequest_default_instance_.Shutdown();
  delete file_level_metadata[37].reflection;
  _CMsgDOTAFantasyLeagueCreateResponse_default_instance_.Shutdown();
  delete file_level_metadata[38].reflection;
  _CMsgDOTAFantasyTeamCreateRequest_default_instance_.Shutdown();
  delete file_level_metadata[39].reflection;
  _CMsgDOTAFantasyTeamCreateResponse_default_instance_.Shutdown();
  delete file_level_metadata[40].reflection;
  _CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange_default_instance_.Shutdown();
  delete file_level_metadata[41].reflection;
  _CMsgDOTAFantasyLeagueEditInvitesRequest_default_instance_.Shutdown();
  delete file_level_metadata[42].reflection;
  _CMsgDOTAFantasyLeagueEditInvitesResponse_default_instance_.Shutdown();
  delete file_level_metadata[43].reflection;
  _CMsgDOTAFantasyLeagueDraftStatusRequest_default_instance_.Shutdown();
  delete file_level_metadata[44].reflection;
  _CMsgDOTAFantasyLeagueDraftStatus_default_instance_.Shutdown();
  delete file_level_metadata[45].reflection;
  _CMsgDOTAFantasyLeagueDraftPlayerRequest_default_instance_.Shutdown();
  delete file_level_metadata[46].reflection;
  _CMsgDOTAFantasyLeagueDraftPlayerResponse_default_instance_.Shutdown();
  delete file_level_metadata[47].reflection;
  _CMsgDOTAFantasyTeamRosterSwapRequest_default_instance_.Shutdown();
  delete file_level_metadata[48].reflection;
  _CMsgDOTAFantasyTeamRosterSwapResponse_default_instance_.Shutdown();
  delete file_level_metadata[49].reflection;
  _CMsgDOTAFantasyTeamRosterAddDropRequest_default_instance_.Shutdown();
  delete file_level_metadata[50].reflection;
  _CMsgDOTAFantasyTeamRosterAddDropResponse_default_instance_.Shutdown();
  delete file_level_metadata[51].reflection;
  _CMsgDOTAFantasyTeamTradesRequest_default_instance_.Shutdown();
  delete file_level_metadata[52].reflection;
  _CMsgDOTAFantasyTeamTradesResponse_Trade_default_instance_.Shutdown();
  delete file_level_metadata[53].reflection;
  _CMsgDOTAFantasyTeamTradesResponse_default_instance_.Shutdown();
  delete file_level_metadata[54].reflection;
  _CMsgDOTAFantasyTeamTradeCancelRequest_default_instance_.Shutdown();
  delete file_level_metadata[55].reflection;
  _CMsgDOTAFantasyTeamTradeCancelResponse_default_instance_.Shutdown();
  delete file_level_metadata[56].reflection;
  _CMsgDOTAFantasyTeamRosterRequest_default_instance_.Shutdown();
  delete file_level_metadata[57].reflection;
  _CMsgDOTAFantasyTeamRosterResponse_default_instance_.Shutdown();
  delete file_level_metadata[58].reflection;
  _CMsgDOTAFantasyPlayerHisoricalStatsRequest_default_instance_.Shutdown();
  delete file_level_metadata[59].reflection;
  _CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator_default_instance_.Shutdown();
  delete file_level_metadata[60].reflection;
  _CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats_default_instance_.Shutdown();
  delete file_level_metadata[61].reflection;
  _CMsgDOTAFantasyPlayerHisoricalStatsResponse_default_instance_.Shutdown();
  delete file_level_metadata[62].reflection;
  _CMsgDOTAFantasyMessageAdd_default_instance_.Shutdown();
  delete file_level_metadata[63].reflection;
  _CMsgDOTAFantasyMessagesRequest_default_instance_.Shutdown();
  delete file_level_metadata[64].reflection;
  _CMsgDOTAFantasyMessagesResponse_Message_default_instance_.Shutdown();
  delete file_level_metadata[65].reflection;
  _CMsgDOTAFantasyMessagesResponse_default_instance_.Shutdown();
  delete file_level_metadata[66].reflection;
  _CMsgDOTAFantasyRemoveOwner_default_instance_.Shutdown();
  delete file_level_metadata[67].reflection;
  _CMsgDOTAFantasyRemoveOwnerResponse_default_instance_.Shutdown();
  delete file_level_metadata[68].reflection;
  _CMsgDOTAFantasyScheduledMatchesRequest_default_instance_.Shutdown();
  delete file_level_metadata[69].reflection;
  _CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays_default_instance_.Shutdown();
  delete file_level_metadata[70].reflection;
  _CMsgDOTAFantasyScheduledMatchesResponse_default_instance_.Shutdown();
  delete file_level_metadata[71].reflection;
  _CMsgDOTAFantasyLeaveLeagueRequest_default_instance_.Shutdown();
  delete file_level_metadata[72].reflection;
  _CMsgDOTAFantasyLeaveLeagueResponse_default_instance_.Shutdown();
  delete file_level_metadata[73].reflection;
  _CMsgDOTAFantasyPlayerScoreDetailsRequest_default_instance_.Shutdown();
  delete file_level_metadata[74].reflection;
  _CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData_default_instance_.Shutdown();
  delete file_level_metadata[75].reflection;
  _CMsgDOTAFantasyPlayerScoreDetailsResponse_default_instance_.Shutdown();
  delete file_level_metadata[76].reflection;
  _CMsgDOTAPassportVoteTeamGuess_default_instance_.Shutdown();
  delete file_level_metadata[77].reflection;
  _CMsgDOTAPassportVoteGenericSelection_default_instance_.Shutdown();
  delete file_level_metadata[78].reflection;
  _CMsgDOTAPassportStampedPlayer_default_instance_.Shutdown();
  delete file_level_metadata[79].reflection;
  _CMsgDOTAPassportPlayerCardChallenge_default_instance_.Shutdown();
  delete file_level_metadata[80].reflection;
  _CMsgDOTAPassportVote_default_instance_.Shutdown();
  delete file_level_metadata[81].reflection;
  _CMsgClientToGCGetPlayerCardRosterRequest_default_instance_.Shutdown();
  delete file_level_metadata[82].reflection;
  _CMsgClientToGCGetPlayerCardRosterResponse_default_instance_.Shutdown();
  delete file_level_metadata[83].reflection;
  _CMsgClientToGCSetPlayerCardRosterRequest_default_instance_.Shutdown();
  delete file_level_metadata[84].reflection;
  _CMsgClientToGCSetPlayerCardRosterResponse_default_instance_.Shutdown();
  delete file_level_metadata[85].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::proto::dota::protobuf_dota_5fshared_5fenums_2eproto::InitDefaults();
  _CMsgGCPlayerInfo_PlayerInfo_default_instance_.DefaultConstruct();
  _CMsgGCPlayerInfo_RegionLeaderboard_default_instance_.DefaultConstruct();
  _CMsgGCPlayerInfo_default_instance_.DefaultConstruct();
  _CMsgDOTACreateFantasyLeagueRequest_default_instance_.DefaultConstruct();
  _CMsgDOTACreateFantasyLeagueResponse_default_instance_.DefaultConstruct();
  _CMsgFantasyLeagueScoring_default_instance_.DefaultConstruct();
  _CMsgDOTAFantasyLeagueInfo_OwnerInfo_default_instance_.DefaultConstruct();
  _CMsgDOTAFantasyLeagueInfo_default_instance_.DefaultConstruct();
  _CMsgDOTAFantasyLeagueEditInfoRequest_default_instance_.DefaultConstruct();
  _CMsgDOTAFantasyLeagueEditInfoResponse_default_instance_.DefaultConstruct();
  _CMsgDOTAFantasyLeagueFindRequest_default_instance_.DefaultConstruct();
  _CMsgDOTAFantasyLeagueFindResponse_default_instance_.DefaultConstruct();
  _CMsgDOTAFantasyLeagueInfoRequest_default_instance_.DefaultConstruct();
  _CMsgDOTAFantasyLeagueInfoResponse_default_instance_.DefaultConstruct();
  _CMsgDOTAFantasyLeagueMatchupsRequest_default_instance_.DefaultConstruct();
  _CMsgDOTAFantasyLeagueMatchupsResponse_Matchup_default_instance_.DefaultConstruct();
  _CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups_default_instance_.DefaultConstruct();
  _CMsgDOTAFantasyLeagueMatchupsResponse_default_instance_.DefaultConstruct();
  _CMsgDOTAEditFantasyTeamRequest_default_instance_.DefaultConstruct();
  _CMsgDOTAEditFantasyTeamResponse_default_instance_.DefaultConstruct();
  _CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID_default_instance_.DefaultConstruct();
  _CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID_default_instance_.DefaultConstruct();
  _CMsgDOTAFantasyTeamInfoResponse_default_instance_.DefaultConstruct();
  _CMsgDOTAFantasyTeamInfo_default_instance_.DefaultConstruct();
  _CMsgDOTAFantasyTeamScoreRequest_default_instance_.DefaultConstruct();
  _CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore_default_instance_.DefaultConstruct();
  _CMsgDOTAFantasyTeamScoreResponse_default_instance_.DefaultConstruct();
  _CMsgDOTAFantasyTeamStandingsRequest_default_instance_.DefaultConstruct();
  _CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore_default_instance_.DefaultConstruct();
  _CMsgDOTAFantasyTeamStandingsResponse_default_instance_.DefaultConstruct();
  _CMsgDOTAFantasyPlayerScoreRequest_default_instance_.DefaultConstruct();
  _CMsgDOTAFantasyPlayerScoreResponse_default_instance_.DefaultConstruct();
  _CMsgDOTAFantasyPlayerStandingsRequest_default_instance_.DefaultConstruct();
  _CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore_default_instance_.DefaultConstruct();
  _CMsgDOTAFantasyPlayerStandingsResponse_default_instance_.DefaultConstruct();
  _CMsgDOTAFantasyPlayerInfoRequest_default_instance_.DefaultConstruct();
  _CMsgDOTAFantasyPlayerInfoResponse_default_instance_.DefaultConstruct();
  _CMsgDOTAFantasyLeagueCreateRequest_default_instance_.DefaultConstruct();
  _CMsgDOTAFantasyLeagueCreateResponse_default_instance_.DefaultConstruct();
  _CMsgDOTAFantasyTeamCreateRequest_default_instance_.DefaultConstruct();
  _CMsgDOTAFantasyTeamCreateResponse_default_instance_.DefaultConstruct();
  _CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange_default_instance_.DefaultConstruct();
  _CMsgDOTAFantasyLeagueEditInvitesRequest_default_instance_.DefaultConstruct();
  _CMsgDOTAFantasyLeagueEditInvitesResponse_default_instance_.DefaultConstruct();
  _CMsgDOTAFantasyLeagueDraftStatusRequest_default_instance_.DefaultConstruct();
  _CMsgDOTAFantasyLeagueDraftStatus_default_instance_.DefaultConstruct();
  _CMsgDOTAFantasyLeagueDraftPlayerRequest_default_instance_.DefaultConstruct();
  _CMsgDOTAFantasyLeagueDraftPlayerResponse_default_instance_.DefaultConstruct();
  _CMsgDOTAFantasyTeamRosterSwapRequest_default_instance_.DefaultConstruct();
  _CMsgDOTAFantasyTeamRosterSwapResponse_default_instance_.DefaultConstruct();
  _CMsgDOTAFantasyTeamRosterAddDropRequest_default_instance_.DefaultConstruct();
  _CMsgDOTAFantasyTeamRosterAddDropResponse_default_instance_.DefaultConstruct();
  _CMsgDOTAFantasyTeamTradesRequest_default_instance_.DefaultConstruct();
  _CMsgDOTAFantasyTeamTradesResponse_Trade_default_instance_.DefaultConstruct();
  _CMsgDOTAFantasyTeamTradesResponse_default_instance_.DefaultConstruct();
  _CMsgDOTAFantasyTeamTradeCancelRequest_default_instance_.DefaultConstruct();
  _CMsgDOTAFantasyTeamTradeCancelResponse_default_instance_.DefaultConstruct();
  _CMsgDOTAFantasyTeamRosterRequest_default_instance_.DefaultConstruct();
  _CMsgDOTAFantasyTeamRosterResponse_default_instance_.DefaultConstruct();
  _CMsgDOTAFantasyPlayerHisoricalStatsRequest_default_instance_.DefaultConstruct();
  _CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator_default_instance_.DefaultConstruct();
  _CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats_default_instance_.DefaultConstruct();
  _CMsgDOTAFantasyPlayerHisoricalStatsResponse_default_instance_.DefaultConstruct();
  _CMsgDOTAFantasyMessageAdd_default_instance_.DefaultConstruct();
  _CMsgDOTAFantasyMessagesRequest_default_instance_.DefaultConstruct();
  _CMsgDOTAFantasyMessagesResponse_Message_default_instance_.DefaultConstruct();
  _CMsgDOTAFantasyMessagesResponse_default_instance_.DefaultConstruct();
  _CMsgDOTAFantasyRemoveOwner_default_instance_.DefaultConstruct();
  _CMsgDOTAFantasyRemoveOwnerResponse_default_instance_.DefaultConstruct();
  _CMsgDOTAFantasyScheduledMatchesRequest_default_instance_.DefaultConstruct();
  _CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays_default_instance_.DefaultConstruct();
  _CMsgDOTAFantasyScheduledMatchesResponse_default_instance_.DefaultConstruct();
  _CMsgDOTAFantasyLeaveLeagueRequest_default_instance_.DefaultConstruct();
  _CMsgDOTAFantasyLeaveLeagueResponse_default_instance_.DefaultConstruct();
  _CMsgDOTAFantasyPlayerScoreDetailsRequest_default_instance_.DefaultConstruct();
  _CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData_default_instance_.DefaultConstruct();
  _CMsgDOTAFantasyPlayerScoreDetailsResponse_default_instance_.DefaultConstruct();
  _CMsgDOTAPassportVoteTeamGuess_default_instance_.DefaultConstruct();
  _CMsgDOTAPassportVoteGenericSelection_default_instance_.DefaultConstruct();
  _CMsgDOTAPassportStampedPlayer_default_instance_.DefaultConstruct();
  _CMsgDOTAPassportPlayerCardChallenge_default_instance_.DefaultConstruct();
  _CMsgDOTAPassportVote_default_instance_.DefaultConstruct();
  _CMsgClientToGCGetPlayerCardRosterRequest_default_instance_.DefaultConstruct();
  _CMsgClientToGCGetPlayerCardRosterResponse_default_instance_.DefaultConstruct();
  _CMsgClientToGCSetPlayerCardRosterRequest_default_instance_.DefaultConstruct();
  _CMsgClientToGCSetPlayerCardRosterResponse_default_instance_.DefaultConstruct();
  _CMsgDOTAFantasyLeagueInfo_default_instance_.get_mutable()->scoring_ = const_cast< ::proto::dota::CMsgFantasyLeagueScoring*>(
      ::proto::dota::CMsgFantasyLeagueScoring::internal_default_instance());
  _CMsgDOTAFantasyLeagueEditInfoRequest_default_instance_.get_mutable()->edit_info_ = const_cast< ::proto::dota::CMsgDOTAFantasyLeagueInfo*>(
      ::proto::dota::CMsgDOTAFantasyLeagueInfo::internal_default_instance());
  _CMsgDOTAFantasyPlayerInfoResponse_default_instance_.get_mutable()->msg_ = const_cast< ::proto::dota::CMsgGCPlayerInfo*>(
      ::proto::dota::CMsgGCPlayerInfo::internal_default_instance());
  _CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats_default_instance_.get_mutable()->stats_premium_ = const_cast< ::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator*>(
      ::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::internal_default_instance());
  _CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats_default_instance_.get_mutable()->stats_professional_ = const_cast< ::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator*>(
      ::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n$dota_gcmessages_client_fantasy.proto\022\n"
      "proto.dota\032\027dota_shared_enums.proto\"\337\003\n\020"
      "CMsgGCPlayerInfo\022=\n\014player_infos\030\001 \003(\0132\'"
      ".proto.dota.CMsgGCPlayerInfo.PlayerInfo\022"
      "D\n\014leaderboards\030\002 \003(\0132..proto.dota.CMsgG"
      "CPlayerInfo.RegionLeaderboard\032\211\002\n\nPlayer"
      "Info\022\022\n\naccount_id\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022\024"
      "\n\014country_code\030\003 \001(\t\022\024\n\014fantasy_role\030\004 \001"
      "(\r\022\017\n\007team_id\030\005 \001(\r\022\021\n\tteam_name\030\006 \001(\t\022\020"
      "\n\010team_tag\030\007 \001(\t\022\017\n\007sponsor\030\010 \001(\t\022\021\n\tis_"
      "locked\030\t \001(\010\022\016\n\006is_pro\030\n \001(\010\022\024\n\014locked_u"
      "ntil\030\013 \001(\r\022\021\n\ttimestamp\030\014 \001(\r\022\032\n\022registe"
      "red_team_id\030\r \001(\r\032:\n\021RegionLeaderboard\022\020"
      "\n\010division\030\001 \001(\r\022\023\n\013account_ids\030\002 \003(\r\"\271\001"
      "\n\"CMsgDOTACreateFantasyLeagueRequest\022\023\n\013"
      "league_name\030\001 \001(\t\022\023\n\013league_logo\030\002 \001(\004\022U"
      "\n\016selection_mode\030\003 \001(\0162\".proto.dota.Fant"
      "asy_Selection_Mode:\031FANTASY_SELECTION_IN"
      "VALID\022\022\n\nteam_count\030\004 \001(\r\"\376\001\n#CMsgDOTACr"
      "eateFantasyLeagueResponse\022P\n\006result\030\001 \001("
      "\01627.proto.dota.CMsgDOTACreateFantasyLeag"
      "ueResponse.EResult:\007SUCCESS\"\204\001\n\007EResult\022"
      "\013\n\007SUCCESS\020\000\022\025\n\021ERROR_UNSPECIFIED\020\001\022\032\n\026E"
      "RROR_TOO_MANY_LEAGUES\020\002\022\034\n\030ERROR_INVALID"
      "_TEAM_COUNT\020\003\022\033\n\027ERROR_CREATION_DISABLED"
      "\020\004\"\237\002\n\030CMsgFantasyLeagueScoring\022\r\n\005level"
      "\030\001 \001(\002\022\r\n\005kills\030\002 \001(\002\022\016\n\006deaths\030\003 \001(\002\022\017\n"
      "\007assists\030\004 \001(\002\022\021\n\tlast_hits\030\005 \001(\002\022\016\n\006den"
      "ies\030\006 \001(\002\022\013\n\003gpm\030\007 \001(\002\022\014\n\004xppm\030\010 \001(\002\022\r\n\005"
      "stuns\030\t \001(\002\022\017\n\007healing\030\n \001(\002\022\023\n\013tower_ki"
      "lls\030\013 \001(\002\022\024\n\014roshan_kills\030\014 \001(\002\022\032\n\022multi"
      "plier_premium\030\r \001(\002\022\037\n\027multiplier_profes"
      "sional\030\016 \001(\002\"\357\005\n\031CMsgDOTAFantasyLeagueIn"
      "fo\022\031\n\021fantasy_league_id\030\001 \001(\r\022\037\n\027commiss"
      "ioner_account_id\030\002 \001(\r\022\033\n\023fantasy_league"
      "_name\030\003 \001(\t\022U\n\016selection_mode\030\004 \001(\0162\".pr"
      "oto.dota.Fantasy_Selection_Mode:\031FANTASY"
      "_SELECTION_INVALID\022\022\n\nteam_count\030\005 \001(\r\022\014"
      "\n\004logo\030\006 \001(\004\0225\n\007scoring\030\007 \001(\0132$.proto.do"
      "ta.CMsgFantasyLeagueScoring\022\022\n\ndraft_tim"
      "e\030\014 \001(\r\022\027\n\017draft_pick_time\030\r \001(\r\022\024\n\014seas"
      "on_start\030\017 \001(\r\022\025\n\rseason_length\030\020 \001(\r\022\022\n"
      "\nveto_votes\030\021 \001(\r\022\024\n\014acquisitions\030\022 \001(\r\022"
      "\016\n\006slot_1\030\023 \001(\r\022\016\n\006slot_2\030\024 \001(\r\022\016\n\006slot_"
      "3\030\025 \001(\r\022\016\n\006slot_4\030\026 \001(\r\022\016\n\006slot_5\030\027 \001(\r\022"
      "\023\n\013bench_slots\030\030 \001(\r\022C\n\nowner_info\030\031 \003(\013"
      "2/.proto.dota.CMsgDOTAFantasyLeagueInfo."
      "OwnerInfo\022\017\n\007players\030\032 \003(\r\022\021\n\ttime_zone\030"
      "\033 \001(\r\022\016\n\006season\030\034 \001(\r\022\020\n\010password\030\035 \001(\t\032"
      "U\n\tOwnerInfo\022\030\n\020owner_account_id\030\001 \001(\r\022\023"
      "\n\013left_league\030\002 \001(\010\022\031\n\021player_account_id"
      "\030\003 \003(\r\"{\n$CMsgDOTAFantasyLeagueEditInfoR"
      "equest\022\031\n\021fantasy_league_id\030\001 \001(\r\0228\n\tedi"
      "t_info\030\002 \001(\0132%.proto.dota.CMsgDOTAFantas"
      "yLeagueInfo\"\303\001\n%CMsgDOTAFantasyLeagueEdi"
      "tInfoResponse\022R\n\006result\030\001 \001(\01629.proto.do"
      "ta.CMsgDOTAFantasyLeagueEditInfoResponse"
      ".EResult:\007SUCCESS\"F\n\007EResult\022\013\n\007SUCCESS\020"
      "\000\022\025\n\021ERROR_UNSPECIFIED\020\001\022\027\n\023ERROR_NO_PER"
      "MISSION\020\002\"O\n CMsgDOTAFantasyLeagueFindRe"
      "quest\022\031\n\021fantasy_league_id\030\001 \001(\r\022\020\n\010pass"
      "word\030\002 \001(\t\"\322\002\n!CMsgDOTAFantasyLeagueFind"
      "Response\022N\n\006result\030\001 \001(\01625.proto.dota.CM"
      "sgDOTAFantasyLeagueFindResponse.EResult:"
      "\007SUCCESS\022\033\n\023fantasy_league_name\030\002 \001(\t\022\031\n"
      "\021commissioner_name\030\003 \001(\t\"\244\001\n\007EResult\022\013\n\007"
      "SUCCESS\020\000\022\032\n\026ERROR_LEAGUE_NOT_FOUND\020\001\022\026\n"
      "\022ERROR_BAD_PASSWORD\020\002\022\025\n\021ERROR_UNSPECIFI"
      "ED\020\003\022\016\n\nERROR_FULL\020\004\022\030\n\024ERROR_ALREADY_ME"
      "MBER\020\005\022\027\n\023ERROR_LEAGUE_LOCKED\020\006\"=\n CMsgD"
      "OTAFantasyLeagueInfoRequest\022\031\n\021fantasy_l"
      "eague_id\030\001 \001(\r\"\273\001\n!CMsgDOTAFantasyLeague"
      "InfoResponse\022N\n\006result\030\001 \001(\01625.proto.dot"
      "a.CMsgDOTAFantasyLeagueInfoResponse.ERes"
      "ult:\007SUCCESS\"F\n\007EResult\022\013\n\007SUCCESS\020\000\022\025\n\021"
      "ERROR_UNSPECIFIED\020\001\022\027\n\023ERROR_BAD_LEAGUE_"
      "ID\020\002\"A\n$CMsgDOTAFantasyLeagueMatchupsReq"
      "uest\022\031\n\021fantasy_league_id\030\001 \001(\r\"\274\004\n%CMsg"
      "DOTAFantasyLeagueMatchupsResponse\022R\n\006res"
      "ult\030\001 \001(\01629.proto.dota.CMsgDOTAFantasyLe"
      "agueMatchupsResponse.EResult:\007SUCCESS\022\031\n"
      "\021fantasy_league_id\030\002 \001(\r\022Y\n\017weekly_match"
      "ups\030\003 \003(\0132@.proto.dota.CMsgDOTAFantasyLe"
      "agueMatchupsResponse.WeeklyMatchups\032c\n\007M"
      "atchup\022\032\n\022owner_account_id_1\030\001 \001(\r\022\032\n\022ow"
      "ner_account_id_2\030\002 \001(\r\022\017\n\007score_1\030\003 \001(\002\022"
      "\017\n\007score_2\030\004 \001(\002\032\202\001\n\016WeeklyMatchups\022J\n\007m"
      "atchup\030\001 \003(\01329.proto.dota.CMsgDOTAFantas"
      "yLeagueMatchupsResponse.Matchup\022\022\n\nstart"
      "_time\030\002 \001(\r\022\020\n\010end_time\030\003 \001(\r\"_\n\007EResult"
      "\022\013\n\007SUCCESS\020\000\022\025\n\021ERROR_UNSPECIFIED\020\001\022\027\n\023"
      "ERROR_BAD_LEAGUE_ID\020\002\022\027\n\023ERROR_NO_PERMIS"
      "SION\020\003\"u\n\036CMsgDOTAEditFantasyTeamRequest"
      "\022\031\n\021fantasy_league_id\030\001 \001(\r\022\022\n\nteam_inde"
      "x\030\002 \001(\r\022\021\n\tteam_name\030\003 \001(\t\022\021\n\tteam_logo\030"
      "\004 \001(\004\"\363\001\n\037CMsgDOTAEditFantasyTeamRespons"
      "e\022L\n\006result\030\001 \001(\01623.proto.dota.CMsgDOTAE"
      "ditFantasyTeamResponse.EResult:\007SUCCESS\""
      "\201\001\n\007EResult\022\013\n\007SUCCESS\020\000\022\025\n\021ERROR_UNSPEC"
      "IFIED\020\001\022\033\n\027ERROR_INVALID_TEAM_INFO\020\002\022\034\n\030"
      "ERROR_NAME_ALREADY_TAKEN\020\003\022\027\n\023ERROR_NO_P"
      "ERMISSION\020\004\"L\n/CMsgDOTAFantasyTeamInfoRe"
      "questByFantasyLeagueID\022\031\n\021fantasy_league"
      "_id\030\001 \001(\r\"J\n.CMsgDOTAFantasyTeamInfoRequ"
      "estByOwnerAccountID\022\030\n\020owner_account_id\030"
      "\001 \001(\r\"W\n\037CMsgDOTAFantasyTeamInfoResponse"
      "\0224\n\007results\030\001 \003(\0132#.proto.dota.CMsgDOTAF"
      "antasyTeamInfo\"\306\001\n\027CMsgDOTAFantasyTeamIn"
      "fo\022\031\n\021fantasy_league_id\030\001 \001(\r\022\030\n\020owner_a"
      "ccount_id\030\002 \001(\r\022\032\n\022fantasy_team_index\030\003 "
      "\001(\r\022\021\n\tteam_name\030\004 \001(\t\022\021\n\tteam_logo\030\005 \001("
      "\004\022\014\n\004wins\030\006 \001(\r\022\016\n\006losses\030\007 \001(\r\022\026\n\016curre"
      "nt_roster\030\010 \003(\r\"\326\001\n\037CMsgDOTAFantasyTeamS"
      "coreRequest\022\031\n\021fantasy_league_id\030\001 \001(\r\022\030"
      "\n\020owner_account_id\030\002 \001(\r\022\032\n\022fantasy_team"
      "_index\030\003 \001(\r\022\027\n\017filter_match_id\030\004 \001(\004\022\031\n"
      "\021filter_start_time\030\005 \001(\r\022\027\n\017filter_end_t"
      "ime\030\006 \001(\r\022\025\n\rinclude_bench\030\007 \001(\010\"\206\003\n CMs"
      "gDOTAFantasyTeamScoreResponse\022M\n\006result\030"
      "\001 \001(\01624.proto.dota.CMsgDOTAFantasyTeamSc"
      "oreResponse.EResult:\007SUCCESS\022\032\n\022fantasy_"
      "team_score\030\002 \001(\002\022Z\n\024fantasy_player_score"
      "\030\003 \003(\0132<.proto.dota.CMsgDOTAFantasyTeamS"
      "coreResponse.CMsgPlayerScore\0324\n\017CMsgPlay"
      "erScore\022\022\n\naccount_id\030\001 \001(\r\022\r\n\005score\030\002 \001"
      "(\002\"e\n\007EResult\022\013\n\007SUCCESS\020\000\022\025\n\021ERROR_UNSP"
      "ECIFIED\020\001\022\027\n\023ERROR_NO_PERMISSION\020\002\022\035\n\031ER"
      "ROR_OWNER_NOT_IN_LEAGUE\020\003\"\317\001\n#CMsgDOTAFa"
      "ntasyTeamStandingsRequest\022\031\n\021fantasy_lea"
      "gue_id\030\001 \001(\r\022\r\n\005count\030\002 \001(\r\022\031\n\021filter_st"
      "art_time\030\003 \001(\r\022\027\n\017filter_end_time\030\004 \001(\r\022"
      "\027\n\017filter_match_id\030\005 \001(\004\022\031\n\021filter_last_"
      "match\030\006 \001(\010\022\026\n\016filter_in_hall\030\007 \001(\010\"\227\004\n$"
      "CMsgDOTAFantasyTeamStandingsResponse\022Q\n\006"
      "result\030\001 \001(\01628.proto.dota.CMsgDOTAFantas"
      "yTeamStandingsResponse.EResult:\007SUCCESS\022"
      "S\n\013team_scores\030\003 \003(\0132>.proto.dota.CMsgDO"
      "TAFantasyTeamStandingsResponse.CMsgTeamS"
      "core\032\376\001\n\rCMsgTeamScore\022\031\n\021fantasy_league"
      "_id\030\001 \001(\r\022\030\n\020owner_account_id\030\002 \001(\r\022\032\n\022f"
      "antasy_team_index\030\003 \001(\r\022\031\n\021fantasy_team_"
      "logo\030\004 \001(\004\022\022\n\nowner_name\030\005 \001(\t\022\031\n\021fantas"
      "y_team_name\030\006 \001(\t\022\r\n\005score\030\007 \001(\002\022\025\n\rscor"
      "e_against\030\010 \001(\002\022\014\n\004wins\030\t \001(\r\022\016\n\006losses\030"
      "\n \001(\r\022\016\n\006streak\030\013 \001(\005\"F\n\007EResult\022\013\n\007SUCC"
      "ESS\020\000\022\025\n\021ERROR_UNSPECIFIED\020\001\022\027\n\023ERROR_NO"
      "_PERMISSION\020\002\"\301\001\n!CMsgDOTAFantasyPlayerS"
      "coreRequest\022\031\n\021fantasy_league_id\030\001 \001(\r\022\031"
      "\n\021player_account_id\030\002 \001(\r\022\031\n\021filter_star"
      "t_time\030\003 \001(\r\022\027\n\017filter_end_time\030\004 \001(\r\022\027\n"
      "\017filter_match_id\030\005 \001(\004\022\031\n\021filter_last_ma"
      "tch\030\006 \001(\010\"\227\002\n\"CMsgDOTAFantasyPlayerScore"
      "Response\022O\n\006result\030\001 \001(\01626.proto.dota.CM"
      "sgDOTAFantasyPlayerScoreResponse.EResult"
      ":\007SUCCESS\022\031\n\021fantasy_league_id\030\002 \001(\r\022\031\n\021"
      "player_account_id\030\003 \001(\r\022\023\n\013player_name\030\004"
      " \001(\t\022\r\n\005score\030\005 \001(\002\"F\n\007EResult\022\013\n\007SUCCES"
      "S\020\000\022\025\n\021ERROR_UNSPECIFIED\020\001\022\027\n\023ERROR_NO_P"
      "ERMISSION\020\002\"\307\001\n%CMsgDOTAFantasyPlayerSta"
      "ndingsRequest\022\031\n\021fantasy_league_id\030\001 \001(\r"
      "\022\r\n\005count\030\002 \001(\r\022\014\n\004role\030\003 \001(\r\022\031\n\021filter_"
      "start_time\030\004 \001(\r\022\027\n\017filter_end_time\030\005 \001("
      "\r\022\027\n\017filter_match_id\030\006 \001(\004\022\031\n\021filter_las"
      "t_match\030\007 \001(\010\"\233\003\n&CMsgDOTAFantasyPlayerS"
      "tandingsResponse\022S\n\006result\030\001 \001(\0162:.proto"
      ".dota.CMsgDOTAFantasyPlayerStandingsResp"
      "onse.EResult:\007SUCCESS\022\031\n\021fantasy_league_"
      "id\030\002 \001(\r\022\014\n\004role\030\003 \001(\r\022Y\n\rplayer_scores\030"
      "\004 \003(\0132B.proto.dota.CMsgDOTAFantasyPlayer"
      "StandingsResponse.CMsgPlayerScore\032P\n\017CMs"
      "gPlayerScore\022\031\n\021player_account_id\030\001 \001(\r\022"
      "\023\n\013player_name\030\002 \001(\t\022\r\n\005score\030\003 \001(\002\"F\n\007E"
      "Result\022\013\n\007SUCCESS\020\000\022\025\n\021ERROR_UNSPECIFIED"
      "\020\001\022\027\n\023ERROR_NO_PERMISSION\020\002\"\"\n CMsgDOTAF"
      "antasyPlayerInfoRequest\"N\n!CMsgDOTAFanta"
      "syPlayerInfoResponse\022)\n\003msg\030\001 \001(\0132\034.prot"
      "o.dota.CMsgGCPlayerInfo\"\237\001\n\"CMsgDOTAFant"
      "asyLeagueCreateRequest\022\021\n\tseason_id\030\001 \001("
      "\r\022\033\n\023fantasy_league_name\030\002 \001(\t\022\020\n\010passwo"
      "rd\030\003 \001(\t\022\021\n\tteam_name\030\004 \001(\t\022\014\n\004logo\030\005 \001("
      "\004\022\026\n\016ticket_item_id\030\006 \001(\004\"\333\002\n#CMsgDOTAFa"
      "ntasyLeagueCreateResponse\022P\n\006result\030\001 \001("
      "\01627.proto.dota.CMsgDOTAFantasyLeagueCrea"
      "teResponse.EResult:\007SUCCESS\022\031\n\021fantasy_l"
      "eague_id\030\002 \001(\r\"\306\001\n\007EResult\022\013\n\007SUCCESS\020\000\022"
      "\027\n\023ERROR_NO_PERMISSION\020\001\022\027\n\023ERROR_BAD_SE"
      "ASON_ID\020\002\022\031\n\025ERROR_BAD_LEAGUE_NAME\020\003\022\027\n\023"
      "ERROR_BAD_TEAM_NAME\020\004\022\025\n\021ERROR_UNSPECIFI"
      "ED\020\005\022\034\n\030ERROR_FAILED_LOGO_UPLOAD\020\006\022\023\n\017ER"
      "ROR_NO_TICKET\020\007\"\210\001\n CMsgDOTAFantasyTeamC"
      "reateRequest\022\031\n\021fantasy_league_id\030\001 \001(\r\022"
      "\020\n\010password\030\002 \001(\t\022\021\n\tteam_name\030\003 \001(\t\022\014\n\004"
      "logo\030\004 \001(\004\022\026\n\016ticket_item_id\030\005 \001(\004\"\233\003\n!C"
      "MsgDOTAFantasyTeamCreateResponse\022N\n\006resu"
      "lt\030\001 \001(\01625.proto.dota.CMsgDOTAFantasyTea"
      "mCreateResponse.EResult:\007SUCCESS\022\032\n\022fant"
      "asy_team_index\030\002 \001(\r\"\211\002\n\007EResult\022\013\n\007SUCC"
      "ESS\020\000\022\027\n\023ERROR_NO_PERMISSION\020\001\022\034\n\030ERROR_"
      "FAILED_LOGO_UPLOAD\020\002\022\037\n\033ERROR_BAD_FANTAS"
      "Y_LEAGUE_ID\020\003\022\022\n\016ERROR_BAD_NAME\020\004\022\016\n\nERR"
      "OR_FULL\020\005\022\030\n\024ERROR_ALREADY_MEMBER\020\006\022\026\n\022E"
      "RROR_BAD_PASSWORD\020\007\022\025\n\021ERROR_UNSPECIFIED"
      "\020\010\022\023\n\017ERROR_NO_TICKET\020\t\022\027\n\023ERROR_LEAGUE_"
      "LOCKED\020\n\"\344\001\n\'CMsgDOTAFantasyLeagueEditIn"
      "vitesRequest\022\031\n\021fantasy_league_id\030\001 \001(\r\022"
      "\020\n\010password\030\002 \001(\t\022W\n\rinvite_change\030\003 \003(\013"
      "2@.proto.dota.CMsgDOTAFantasyLeagueEditI"
      "nvitesRequest.InviteChange\0323\n\014InviteChan"
      "ge\022\022\n\naccount_id\030\001 \001(\r\022\017\n\007invited\030\002 \001(\010\""
      "\260\001\n(CMsgDOTAFantasyLeagueEditInvitesResp"
      "onse\022U\n\006result\030\001 \001(\0162<.proto.dota.CMsgDO"
      "TAFantasyLeagueEditInvitesResponse.EResu"
      "lt:\007SUCCESS\"-\n\007EResult\022\013\n\007SUCCESS\020\000\022\025\n\021E"
      "RROR_UNSPECIFIED\020\001\"D\n\'CMsgDOTAFantasyLea"
      "gueDraftStatusRequest\022\031\n\021fantasy_league_"
      "id\030\001 \001(\r\"\306\001\n CMsgDOTAFantasyLeagueDraftS"
      "tatus\022\031\n\021fantasy_league_id\030\001 \001(\r\022\023\n\013draf"
      "t_order\030\002 \003(\r\022\024\n\014current_pick\030\003 \001(\r\022\026\n\016t"
      "ime_remaining\030\004 \001(\r\022\026\n\016pending_resume\030\005 "
      "\001(\010\022\021\n\tcompleted\030\006 \001(\010\022\031\n\021available_play"
      "ers\030\007 \003(\r\"s\n\'CMsgDOTAFantasyLeagueDraftP"
      "layerRequest\022\031\n\021fantasy_league_id\030\001 \001(\r\022"
      "\022\n\nteam_index\030\002 \001(\r\022\031\n\021player_account_id"
      "\030\003 \001(\r\"\215\003\n(CMsgDOTAFantasyLeagueDraftPla"
      "yerResponse\022U\n\006result\030\001 \001(\0162<.proto.dota"
      ".CMsgDOTAFantasyLeagueDraftPlayerRespons"
      "e.EResult:\007SUCCESS\"\211\002\n\007EResult\022\013\n\007SUCCES"
      "S\020\000\022\025\n\021ERROR_UNSPECIFIED\020\001\022 \n\034ERROR_INVA"
      "LID_FANTASY_LEAGUE\020\002\022%\n!ERROR_FANTASY_LE"
      "AGUE_NOT_DRAFTING\020\003\022\035\n\031ERROR_OWNER_NOT_I"
      "N_LEAGUE\020\004\022\031\n\025ERROR_NOT_OWNERS_TURN\020\005\022\030\n"
      "\024ERROR_PLAYER_INVALID\020\006\022\034\n\030ERROR_PLAYER_"
      "UNAVAILABLE\020\007\022\037\n\033ERROR_PLAYER_NO_VALID_S"
      "LOTS\020\010\"\210\001\n$CMsgDOTAFantasyTeamRosterSwap"
      "Request\022\031\n\021fantasy_league_id\030\001 \001(\r\022\022\n\nte"
      "am_index\030\002 \001(\r\022\021\n\ttimestamp\030\003 \001(\r\022\016\n\006slo"
      "t_1\030\004 \001(\r\022\016\n\006slot_2\030\005 \001(\r\"\371\001\n%CMsgDOTAFa"
      "ntasyTeamRosterSwapResponse\022R\n\006result\030\001 "
      "\001(\01629.proto.dota.CMsgDOTAFantasyTeamRost"
      "erSwapResponse.EResult:\007SUCCESS\"|\n\007EResu"
      "lt\022\013\n\007SUCCESS\020\000\022\025\n\021ERROR_UNSPECIFIED\020\001\022\035"
      "\n\031ERROR_OWNER_NOT_IN_LEAGUE\020\002\022\027\n\023ERROR_S"
      "LOTS_INVALID\020\003\022\025\n\021ERROR_SLOT_LOCKED\020\004\"\211\001"
      "\n\'CMsgDOTAFantasyTeamRosterAddDropReques"
      "t\022\031\n\021fantasy_league_id\030\001 \001(\r\022\022\n\nteam_ind"
      "ex\030\002 \001(\r\022\026\n\016add_account_id\030\005 \001(\r\022\027\n\017drop"
      "_account_id\030\006 \001(\r\"\257\002\n(CMsgDOTAFantasyTea"
      "mRosterAddDropResponse\022U\n\006result\030\001 \001(\0162<"
      ".proto.dota.CMsgDOTAFantasyTeamRosterAdd"
      "DropResponse.EResult:\007SUCCESS\"\253\001\n\007EResul"
      "t\022\013\n\007SUCCESS\020\000\022\025\n\021ERROR_UNSPECIFIED\020\001\022\035\n"
      "\031ERROR_OWNER_NOT_IN_LEAGUE\020\002\022\036\n\032ERROR_PL"
      "AYER_NOT_AVAILABLE\020\003\022\034\n\030ERROR_PLAYER_NOT"
      "_ON_TEAM\020\004\022\037\n\033ERROR_TRADE_ALREADY_PENDIN"
      "G\020\005\"=\n CMsgDOTAFantasyTeamTradesRequest\022"
      "\031\n\021fantasy_league_id\030\001 \001(\r\"\237\003\n!CMsgDOTAF"
      "antasyTeamTradesResponse\022N\n\006result\030\001 \001(\016"
      "25.proto.dota.CMsgDOTAFantasyTeamTradesR"
      "esponse.EResult:\007SUCCESS\022C\n\006trades\030\002 \003(\013"
      "23.proto.dota.CMsgDOTAFantasyTeamTradesR"
      "esponse.Trade\032\234\001\n\005Trade\022\021\n\ttimestamp\030\001 \001"
      "(\r\022\032\n\022owner_account_id_1\030\002 \001(\r\022\032\n\022owner_"
      "account_id_2\030\003 \001(\r\022\033\n\023player_account_id_"
      "1\030\004 \001(\r\022\033\n\023player_account_id_2\030\005 \001(\r\022\016\n\006"
      "status\030\006 \001(\r\"F\n\007EResult\022\013\n\007SUCCESS\020\000\022\025\n\021"
      "ERROR_UNSPECIFIED\020\001\022\027\n\023ERROR_NO_PERMISSI"
      "ON\020\002\"\212\001\n%CMsgDOTAFantasyTeamTradeCancelR"
      "equest\022\031\n\021fantasy_league_id\030\001 \001(\r\022\024\n\014tea"
      "m_index_1\030\003 \001(\r\022\032\n\022owner_account_id_2\030\004 "
      "\001(\r\022\024\n\014team_index_2\030\005 \001(\r\"\331\001\n&CMsgDOTAFa"
      "ntasyTeamTradeCancelResponse\022S\n\006result\030\001"
      " \001(\0162:.proto.dota.CMsgDOTAFantasyTeamTra"
      "deCancelResponse.EResult:\007SUCCESS\"Z\n\007ERe"
      "sult\022\013\n\007SUCCESS\020\000\022\025\n\021ERROR_UNSPECIFIED\020\001"
      "\022\027\n\023ERROR_NO_PERMISSION\020\002\022\022\n\016ERROR_NO_TR"
      "ADE\020\003\"~\n CMsgDOTAFantasyTeamRosterReques"
      "t\022\031\n\021fantasy_league_id\030\001 \001(\r\022\022\n\nteam_ind"
      "ex\030\002 \001(\r\022\030\n\020owner_account_id\030\003 \001(\r\022\021\n\tti"
      "mestamp\030\004 \001(\r\"\215\002\n!CMsgDOTAFantasyTeamRos"
      "terResponse\022N\n\006result\030\001 \001(\01625.proto.dota"
      ".CMsgDOTAFantasyTeamRosterResponse.EResu"
      "lt:\007SUCCESS\022\032\n\022player_account_ids\030\002 \003(\r\022"
      "\025\n\rplayer_locked\030\003 \003(\010\"e\n\007EResult\022\013\n\007SUC"
      "CESS\020\000\022\025\n\021ERROR_UNSPECIFIED\020\001\022\027\n\023ERROR_N"
      "O_PERMISSION\020\002\022\035\n\031ERROR_OWNER_NOT_IN_LEA"
      "GUE\020\003\"G\n*CMsgDOTAFantasyPlayerHisoricalS"
      "tatsRequest\022\031\n\021fantasy_league_id\030\001 \001(\r\"\255"
      "\006\n+CMsgDOTAFantasyPlayerHisoricalStatsRe"
      "sponse\022X\n\006result\030\001 \001(\0162\?.proto.dota.CMsg"
      "DOTAFantasyPlayerHisoricalStatsResponse."
      "EResult:\007SUCCESS\022R\n\005stats\030\002 \003(\0132C.proto."
      "dota.CMsgDOTAFantasyPlayerHisoricalStats"
      "Response.PlayerStats\032\201\002\n\026PlayerScoreAccu"
      "mulator\022\017\n\007matches\030\001 \001(\r\022\016\n\006levels\030\002 \001(\002"
      "\022\r\n\005kills\030\003 \001(\002\022\016\n\006deaths\030\004 \001(\002\022\017\n\007assis"
      "ts\030\005 \001(\002\022\021\n\tlast_hits\030\006 \001(\002\022\016\n\006denies\030\007 "
      "\001(\002\022\013\n\003gpm\030\010 \001(\002\022\014\n\004xppm\030\t \001(\002\022\r\n\005stuns\030"
      "\n \001(\002\022\017\n\007healing\030\013 \001(\002\022\023\n\013tower_kills\030\014 "
      "\001(\002\022\024\n\014roshan_kills\030\r \001(\002\022\r\n\005score\030\016 \001(\002"
      "\032\203\002\n\013PlayerStats\022\022\n\naccount_id\030\001 \001(\r\022\r\n\005"
      "weeks\030\002 \001(\r\022e\n\rstats_premium\030\004 \001(\0132N.pro"
      "to.dota.CMsgDOTAFantasyPlayerHisoricalSt"
      "atsResponse.PlayerScoreAccumulator\022j\n\022st"
      "ats_professional\030\005 \001(\0132N.proto.dota.CMsg"
      "DOTAFantasyPlayerHisoricalStatsResponse."
      "PlayerScoreAccumulator\"F\n\007EResult\022\013\n\007SUC"
      "CESS\020\000\022\025\n\021ERROR_UNSPECIFIED\020\001\022\027\n\023ERROR_N"
      "O_PERMISSION\020\002\"G\n\031CMsgDOTAFantasyMessage"
      "Add\022\031\n\021fantasy_league_id\030\001 \001(\r\022\017\n\007messag"
      "e\030\002 \001(\t\"g\n\036CMsgDOTAFantasyMessagesReques"
      "t\022\031\n\021fantasy_league_id\030\001 \001(\r\022\025\n\rstart_me"
      "ssage\030\002 \001(\r\022\023\n\013end_message\030\003 \001(\r\"\363\002\n\037CMs"
      "gDOTAFantasyMessagesResponse\022L\n\006result\030\001"
      " \001(\01623.proto.dota.CMsgDOTAFantasyMessage"
      "sResponse.EResult:\007SUCCESS\022E\n\010messages\030\002"
      " \003(\01323.proto.dota.CMsgDOTAFantasyMessage"
      "sResponse.Message\022\032\n\022num_total_messages\030"
      "\003 \001(\r\032W\n\007Message\022\022\n\nmessage_id\030\001 \001(\r\022\017\n\007"
      "message\030\002 \001(\t\022\031\n\021author_account_id\030\003 \001(\r"
      "\022\014\n\004time\030\004 \001(\r\"F\n\007EResult\022\013\n\007SUCCESS\020\000\022\025"
      "\n\021ERROR_UNSPECIFIED\020\001\022\027\n\023ERROR_NO_PERMIS"
      "SION\020\002\"e\n\032CMsgDOTAFantasyRemoveOwner\022\031\n\021"
      "fantasy_league_id\030\001 \001(\r\022\030\n\020owner_account"
      "_id\030\002 \001(\r\022\022\n\nteam_index\030\003 \001(\r\"\356\001\n\"CMsgDO"
      "TAFantasyRemoveOwnerResponse\022O\n\006result\030\001"
      " \001(\01626.proto.dota.CMsgDOTAFantasyRemoveO"
      "wnerResponse.EResult:\007SUCCESS\"w\n\007EResult"
      "\022\013\n\007SUCCESS\020\000\022\025\n\021ERROR_UNSPECIFIED\020\001\022\027\n\023"
      "ERROR_NO_PERMISSION\020\002\022\027\n\023ERROR_LEAGUE_LO"
      "CKED\020\003\022\026\n\022ERROR_NOT_A_MEMBER\020\004\"C\n&CMsgDO"
      "TAFantasyScheduledMatchesRequest\022\031\n\021fant"
      "asy_league_id\030\001 \001(\r\"\343\002\n\'CMsgDOTAFantasyS"
      "cheduledMatchesResponse\022T\n\006result\030\001 \001(\0162"
      ";.proto.dota.CMsgDOTAFantasyScheduledMat"
      "chesResponse.EResult:\007SUCCESS\022d\n\024schedul"
      "ed_match_days\030\002 \003(\0132F.proto.dota.CMsgDOT"
      "AFantasyScheduledMatchesResponse.Schedul"
      "edMatchDays\032M\n\022ScheduledMatchDays\022\021\n\ttim"
      "estamp\030\001 \001(\r\022\020\n\010team_ids\030\002 \003(\r\022\022\n\nleague"
      "_ids\030\003 \003(\r\"-\n\007EResult\022\013\n\007SUCCESS\020\000\022\025\n\021ER"
      "ROR_UNSPECIFIED\020\001\"Z\n!CMsgDOTAFantasyLeav"
      "eLeagueRequest\022\031\n\021fantasy_league_id\030\001 \001("
      "\r\022\032\n\022fantasy_team_index\030\002 \001(\r\"\356\001\n\"CMsgDO"
      "TAFantasyLeaveLeagueResponse\022O\n\006result\030\001"
      " \001(\01626.proto.dota.CMsgDOTAFantasyLeaveLe"
      "agueResponse.EResult:\007SUCCESS\"w\n\007EResult"
      "\022\013\n\007SUCCESS\020\000\022\025\n\021ERROR_UNSPECIFIED\020\001\022\024\n\020"
      "ERROR_NOT_MEMBER\020\002\022\032\n\026ERROR_LEAGUE_NOT_F"
      "OUND\020\003\022\026\n\022ERROR_DRAFT_ACTIVE\020\004\"\206\001\n(CMsgD"
      "OTAFantasyPlayerScoreDetailsRequest\022\031\n\021f"
      "antasy_league_id\030\001 \001(\r\022\031\n\021player_account"
      "_id\030\002 \001(\r\022\022\n\nstart_time\030\003 \001(\r\022\020\n\010end_tim"
      "e\030\004 \001(\r\"\234\004\n)CMsgDOTAFantasyPlayerScoreDe"
      "tailsResponse\022V\n\006result\030\001 \001(\0162=.proto.do"
      "ta.CMsgDOTAFantasyPlayerScoreDetailsResp"
      "onse.EResult:\007SUCCESS\022S\n\004data\030\002 \003(\0132E.pr"
      "oto.dota.CMsgDOTAFantasyPlayerScoreDetai"
      "lsResponse.PlayerMatchData\032\374\001\n\017PlayerMat"
      "chData\022\020\n\010match_id\030\001 \001(\004\022\021\n\tseries_id\030\002 "
      "\001(\r\022\022\n\nseries_num\030\003 \001(\r\022\023\n\013series_type\030\004"
      " \001(\r\022\023\n\013league_tier\030\005 \001(\r\022\021\n\tleague_id\030\006"
      " \001(\r\022\030\n\020opposing_team_id\030\007 \001(\r\022\032\n\022opposi"
      "ng_team_logo\030\010 \001(\004\022\032\n\022opposing_team_name"
      "\030\t \001(\t\022\020\n\010owned_by\030\013 \001(\r\022\017\n\007benched\030\014 \001("
      "\010\"C\n\007EResult\022\013\n\007SUCCESS\020\000\022\025\n\021ERROR_UNSPE"
      "CIFIED\020\001\022\024\n\020ERROR_NOT_MEMBER\020\002\"Z\n\035CMsgDO"
      "TAPassportVoteTeamGuess\022\021\n\tleague_id\030\001 \001"
      "(\r\022\021\n\twinner_id\030\002 \001(\r\022\023\n\013runnerup_id\030\003 \001"
      "(\r\"\234\001\n$CMsgDOTAPassportVoteGenericSelect"
      "ion\022a\n\017selection_index\030\001 \001(\0162-.proto.dot"
      "a.DOTA_2013PassportSelectionIndices:\031PP1"
      "3_SEL_ALLSTAR_PLAYER_0\022\021\n\tselection\030\002 \001("
      "\r\"F\n\035CMsgDOTAPassportStampedPlayer\022\020\n\010st"
      "eam_id\030\001 \001(\004\022\023\n\013stamp_level\030\002 \001(\r\";\n#CMs"
      "gDOTAPassportPlayerCardChallenge\022\024\n\014chal"
      "lenge_id\030\001 \001(\r\"\270\002\n\024CMsgDOTAPassportVote\022"
      "=\n\nteam_votes\030\001 \003(\0132).proto.dota.CMsgDOT"
      "APassportVoteTeamGuess\022L\n\022generic_select"
      "ions\030\002 \003(\01320.proto.dota.CMsgDOTAPassport"
      "VoteGenericSelection\022B\n\017stamped_players\030"
      "\003 \003(\0132).proto.dota.CMsgDOTAPassportStamp"
      "edPlayer\022O\n\026player_card_challenges\030\004 \003(\013"
      "2/.proto.dota.CMsgDOTAPassportPlayerCard"
      "Challenge\"P\n(CMsgClientToGCGetPlayerCard"
      "RosterRequest\022\021\n\tleague_id\030\001 \001(\r\022\021\n\ttime"
      "stamp\030\002 \001(\r\"\275\002\n)CMsgClientToGCGetPlayerC"
      "ardRosterResponse\022U\n\006result\030\001 \001(\0162<.prot"
      "o.dota.CMsgClientToGCGetPlayerCardRoster"
      "Response.Result:\007SUCCESS\022\033\n\023player_card_"
      "item_id\030\002 \003(\004\022\r\n\005score\030\003 \001(\002\022\021\n\tfinalize"
      "d\030\004 \001(\010\022\022\n\npercentile\030\005 \001(\002\"f\n\006Result\022\013\n"
      "\007SUCCESS\020\000\022\025\n\021ERROR_UNSPECIFIED\020\001\022\033\n\027ERR"
      "OR_INVALID_LEAGUE_ID\020\002\022\033\n\027ERROR_INVALID_"
      "TIMESTAMP\020\003\"\215\001\n(CMsgClientToGCSetPlayerC"
      "ardRosterRequest\022\021\n\tleague_id\030\001 \001(\r\022\021\n\tt"
      "imestamp\030\002 \001(\r\022\014\n\004slot\030\003 \001(\r\022\033\n\023player_c"
      "ard_item_id\030\004 \001(\004\022\020\n\010event_id\030\005 \001(\r\"\371\002\n)"
      "CMsgClientToGCSetPlayerCardRosterRespons"
      "e\022U\n\006result\030\001 \001(\0162<.proto.dota.CMsgClien"
      "tToGCSetPlayerCardRosterResponse.Result:"
      "\007SUCCESS\"\364\001\n\006Result\022\013\n\007SUCCESS\020\000\022\025\n\021ERRO"
      "R_UNSPECIFIED\020\001\022\033\n\027ERROR_INVALID_LEAGUE_"
      "ID\020\002\022\033\n\027ERROR_INVALID_TIMESTAMP\020\003\022\037\n\033ERR"
      "OR_PLAYER_CARD_NOT_OWNED\020\004\022\026\n\022ERROR_INVA"
      "LID_SLOT\020\005\022\032\n\026ERROR_FAILED_CARD_INFO\020\006\022\033"
      "\n\027ERROR_ACCOUNT_DUPLICATE\020\007\022\032\n\026ERROR_LOC"
      "KED_TIMESTAMP\020\010*\243\025\n!DOTA_2013PassportSel"
      "ectionIndices\022\035\n\031PP13_SEL_ALLSTAR_PLAYER"
      "_0\020\000\022\035\n\031PP13_SEL_ALLSTAR_PLAYER_1\020\001\022\035\n\031P"
      "P13_SEL_ALLSTAR_PLAYER_2\020\002\022\035\n\031PP13_SEL_A"
      "LLSTAR_PLAYER_3\020\003\022\035\n\031PP13_SEL_ALLSTAR_PL"
      "AYER_4\020\004\022\035\n\031PP13_SEL_ALLSTAR_PLAYER_5\020\005\022"
      "\035\n\031PP13_SEL_ALLSTAR_PLAYER_6\020\006\022\035\n\031PP13_S"
      "EL_ALLSTAR_PLAYER_7\020\007\022\035\n\031PP13_SEL_ALLSTA"
      "R_PLAYER_8\020\010\022\035\n\031PP13_SEL_ALLSTAR_PLAYER_"
      "9\020\t\022\034\n\030PP13_SEL_QUALPRED_WEST_0\020\n\022\034\n\030PP1"
      "3_SEL_QUALPRED_WEST_1\020\013\022\034\n\030PP13_SEL_QUAL"
      "PRED_WEST_2\020\014\022\034\n\030PP13_SEL_QUALPRED_WEST_"
      "3\020\r\022\034\n\030PP13_SEL_QUALPRED_WEST_4\020\016\022\034\n\030PP1"
      "3_SEL_QUALPRED_WEST_5\020\017\022\034\n\030PP13_SEL_QUAL"
      "PRED_WEST_6\020\020\022\034\n\030PP13_SEL_QUALPRED_WEST_"
      "7\020\021\022\034\n\030PP13_SEL_QUALPRED_WEST_8\020\022\022\034\n\030PP1"
      "3_SEL_QUALPRED_WEST_9\020\023\022\035\n\031PP13_SEL_QUAL"
      "PRED_WEST_10\020\024\022\035\n\031PP13_SEL_QUALPRED_WEST"
      "_11\020\025\022\035\n\031PP13_SEL_QUALPRED_WEST_12\020\026\022\035\n\031"
      "PP13_SEL_QUALPRED_WEST_13\020\027\022\035\n\031PP13_SEL_"
      "QUALPRED_WEST_14\020\030\022\034\n\030PP13_SEL_QUALPRED_"
      "EAST_0\020\031\022\034\n\030PP13_SEL_QUALPRED_EAST_1\020\032\022\034"
      "\n\030PP13_SEL_QUALPRED_EAST_2\020\033\022\034\n\030PP13_SEL"
      "_QUALPRED_EAST_3\020\034\022\034\n\030PP13_SEL_QUALPRED_"
      "EAST_4\020\035\022\034\n\030PP13_SEL_QUALPRED_EAST_5\020\036\022\034"
      "\n\030PP13_SEL_QUALPRED_EAST_6\020\037\022\034\n\030PP13_SEL"
      "_QUALPRED_EAST_7\020 \022\034\n\030PP13_SEL_QUALPRED_"
      "EAST_8\020!\022\034\n\030PP13_SEL_QUALPRED_EAST_9\020\"\022\035"
      "\n\031PP13_SEL_QUALPRED_EAST_10\020#\022\035\n\031PP13_SE"
      "L_QUALPRED_EAST_11\020$\022\035\n\031PP13_SEL_QUALPRE"
      "D_EAST_12\020%\022\035\n\031PP13_SEL_QUALPRED_EAST_13"
      "\020&\022\035\n\031PP13_SEL_QUALPRED_EAST_14\020\'\022\031\n\025PP1"
      "3_SEL_TEAMCUP_TEAM\020(\022\033\n\027PP13_SEL_TEAMCUP"
      "_PLAYER\020)\022\036\n\032PP13_SEL_TEAMCUP_TEAM_LOCK\020"
      "*\022 \n\034PP13_SEL_TEAMCUP_PLAYER_LOCK\020+\022\030\n\024P"
      "P13_SEL_EVENTPRED_0\020,\022\030\n\024PP13_SEL_EVENTP"
      "RED_1\020-\022\030\n\024PP13_SEL_EVENTPRED_2\020.\022\030\n\024PP1"
      "3_SEL_EVENTPRED_3\020/\022\030\n\024PP13_SEL_EVENTPRE"
      "D_4\0200\022\030\n\024PP13_SEL_EVENTPRED_5\0201\022\030\n\024PP13_"
      "SEL_EVENTPRED_6\0202\022\030\n\024PP13_SEL_EVENTPRED_"
      "7\0203\022\030\n\024PP13_SEL_EVENTPRED_8\0204\022\030\n\024PP13_SE"
      "L_EVENTPRED_9\0205\022\031\n\025PP13_SEL_EVENTPRED_10"
      "\0206\022\031\n\025PP13_SEL_EVENTPRED_11\0207\022\031\n\025PP13_SE"
      "L_EVENTPRED_12\0208\022\031\n\025PP13_SEL_EVENTPRED_1"
      "3\0209\022\031\n\025PP13_SEL_EVENTPRED_14\020:\022\031\n\025PP13_S"
      "EL_EVENTPRED_15\020;\022\031\n\025PP13_SEL_EVENTPRED_"
      "16\020<\022\031\n\025PP13_SEL_EVENTPRED_17\020=\022\031\n\025PP13_"
      "SEL_EVENTPRED_18\020>\022\031\n\025PP13_SEL_EVENTPRED"
      "_19\020\?\022\031\n\025PP13_SEL_EVENTPRED_20\020@\022\031\n\025PP13"
      "_SEL_EVENTPRED_21\020A\022\031\n\025PP13_SEL_EVENTPRE"
      "D_22\020B\022\031\n\025PP13_SEL_EVENTPRED_23\020C\022\031\n\025PP1"
      "3_SEL_EVENTPRED_24\020D\022\031\n\025PP13_SEL_EVENTPR"
      "ED_25\020E\022\031\n\025PP13_SEL_EVENTPRED_26\020F\022\031\n\025PP"
      "13_SEL_EVENTPRED_27\020G\022\031\n\025PP13_SEL_EVENTP"
      "RED_28\020H\022\031\n\025PP13_SEL_EVENTPRED_29\020I\022\031\n\025P"
      "P13_SEL_EVENTPRED_30\020J\022\031\n\025PP13_SEL_EVENT"
      "PRED_31\020K\022\031\n\025PP13_SEL_EVENTPRED_32\020L\022\031\n\025"
      "PP13_SEL_EVENTPRED_33\020M\022\031\n\025PP13_SEL_EVEN"
      "TPRED_34\020N\022\031\n\025PP13_SEL_EVENTPRED_35\020O\022\031\n"
      "\025PP13_SEL_EVENTPRED_36\020P\022\031\n\025PP13_SEL_EVE"
      "NTPRED_37\020Q\022\031\n\025PP13_SEL_EVENTPRED_38\020R\022\031"
      "\n\025PP13_SEL_EVENTPRED_39\020S\022\031\n\025PP13_SEL_EV"
      "ENTPRED_40\020T\022\031\n\025PP13_SEL_EVENTPRED_41\020U\022"
      "\031\n\025PP13_SEL_EVENTPRED_42\020V\022\031\n\025PP13_SEL_E"
      "VENTPRED_43\020W\022\023\n\017PP13_SEL_SOLO_0\020X\022\023\n\017PP"
      "13_SEL_SOLO_1\020Y\022\023\n\017PP13_SEL_SOLO_2\020Z\022\023\n\017"
      "PP13_SEL_SOLO_3\020[\022\023\n\017PP13_SEL_SOLO_4\020\\\022\023"
      "\n\017PP13_SEL_SOLO_5\020]\022\023\n\017PP13_SEL_SOLO_6\020^"
      "\022\023\n\017PP13_SEL_SOLO_7\020_B\005H\001\200\001\000"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 18988);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dota_gcmessages_client_fantasy.proto", &protobuf_RegisterTypes);
  ::proto::dota::protobuf_dota_5fshared_5fenums_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto

const ::google::protobuf::EnumDescriptor* CMsgDOTACreateFantasyLeagueResponse_EResult_descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_enum_descriptors[0];
}
bool CMsgDOTACreateFantasyLeagueResponse_EResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgDOTACreateFantasyLeagueResponse_EResult CMsgDOTACreateFantasyLeagueResponse::SUCCESS;
const CMsgDOTACreateFantasyLeagueResponse_EResult CMsgDOTACreateFantasyLeagueResponse::ERROR_UNSPECIFIED;
const CMsgDOTACreateFantasyLeagueResponse_EResult CMsgDOTACreateFantasyLeagueResponse::ERROR_TOO_MANY_LEAGUES;
const CMsgDOTACreateFantasyLeagueResponse_EResult CMsgDOTACreateFantasyLeagueResponse::ERROR_INVALID_TEAM_COUNT;
const CMsgDOTACreateFantasyLeagueResponse_EResult CMsgDOTACreateFantasyLeagueResponse::ERROR_CREATION_DISABLED;
const CMsgDOTACreateFantasyLeagueResponse_EResult CMsgDOTACreateFantasyLeagueResponse::EResult_MIN;
const CMsgDOTACreateFantasyLeagueResponse_EResult CMsgDOTACreateFantasyLeagueResponse::EResult_MAX;
const int CMsgDOTACreateFantasyLeagueResponse::EResult_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgDOTAFantasyLeagueEditInfoResponse_EResult_descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_enum_descriptors[1];
}
bool CMsgDOTAFantasyLeagueEditInfoResponse_EResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgDOTAFantasyLeagueEditInfoResponse_EResult CMsgDOTAFantasyLeagueEditInfoResponse::SUCCESS;
const CMsgDOTAFantasyLeagueEditInfoResponse_EResult CMsgDOTAFantasyLeagueEditInfoResponse::ERROR_UNSPECIFIED;
const CMsgDOTAFantasyLeagueEditInfoResponse_EResult CMsgDOTAFantasyLeagueEditInfoResponse::ERROR_NO_PERMISSION;
const CMsgDOTAFantasyLeagueEditInfoResponse_EResult CMsgDOTAFantasyLeagueEditInfoResponse::EResult_MIN;
const CMsgDOTAFantasyLeagueEditInfoResponse_EResult CMsgDOTAFantasyLeagueEditInfoResponse::EResult_MAX;
const int CMsgDOTAFantasyLeagueEditInfoResponse::EResult_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgDOTAFantasyLeagueFindResponse_EResult_descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_enum_descriptors[2];
}
bool CMsgDOTAFantasyLeagueFindResponse_EResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgDOTAFantasyLeagueFindResponse_EResult CMsgDOTAFantasyLeagueFindResponse::SUCCESS;
const CMsgDOTAFantasyLeagueFindResponse_EResult CMsgDOTAFantasyLeagueFindResponse::ERROR_LEAGUE_NOT_FOUND;
const CMsgDOTAFantasyLeagueFindResponse_EResult CMsgDOTAFantasyLeagueFindResponse::ERROR_BAD_PASSWORD;
const CMsgDOTAFantasyLeagueFindResponse_EResult CMsgDOTAFantasyLeagueFindResponse::ERROR_UNSPECIFIED;
const CMsgDOTAFantasyLeagueFindResponse_EResult CMsgDOTAFantasyLeagueFindResponse::ERROR_FULL;
const CMsgDOTAFantasyLeagueFindResponse_EResult CMsgDOTAFantasyLeagueFindResponse::ERROR_ALREADY_MEMBER;
const CMsgDOTAFantasyLeagueFindResponse_EResult CMsgDOTAFantasyLeagueFindResponse::ERROR_LEAGUE_LOCKED;
const CMsgDOTAFantasyLeagueFindResponse_EResult CMsgDOTAFantasyLeagueFindResponse::EResult_MIN;
const CMsgDOTAFantasyLeagueFindResponse_EResult CMsgDOTAFantasyLeagueFindResponse::EResult_MAX;
const int CMsgDOTAFantasyLeagueFindResponse::EResult_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgDOTAFantasyLeagueInfoResponse_EResult_descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_enum_descriptors[3];
}
bool CMsgDOTAFantasyLeagueInfoResponse_EResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgDOTAFantasyLeagueInfoResponse_EResult CMsgDOTAFantasyLeagueInfoResponse::SUCCESS;
const CMsgDOTAFantasyLeagueInfoResponse_EResult CMsgDOTAFantasyLeagueInfoResponse::ERROR_UNSPECIFIED;
const CMsgDOTAFantasyLeagueInfoResponse_EResult CMsgDOTAFantasyLeagueInfoResponse::ERROR_BAD_LEAGUE_ID;
const CMsgDOTAFantasyLeagueInfoResponse_EResult CMsgDOTAFantasyLeagueInfoResponse::EResult_MIN;
const CMsgDOTAFantasyLeagueInfoResponse_EResult CMsgDOTAFantasyLeagueInfoResponse::EResult_MAX;
const int CMsgDOTAFantasyLeagueInfoResponse::EResult_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgDOTAFantasyLeagueMatchupsResponse_EResult_descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_enum_descriptors[4];
}
bool CMsgDOTAFantasyLeagueMatchupsResponse_EResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgDOTAFantasyLeagueMatchupsResponse_EResult CMsgDOTAFantasyLeagueMatchupsResponse::SUCCESS;
const CMsgDOTAFantasyLeagueMatchupsResponse_EResult CMsgDOTAFantasyLeagueMatchupsResponse::ERROR_UNSPECIFIED;
const CMsgDOTAFantasyLeagueMatchupsResponse_EResult CMsgDOTAFantasyLeagueMatchupsResponse::ERROR_BAD_LEAGUE_ID;
const CMsgDOTAFantasyLeagueMatchupsResponse_EResult CMsgDOTAFantasyLeagueMatchupsResponse::ERROR_NO_PERMISSION;
const CMsgDOTAFantasyLeagueMatchupsResponse_EResult CMsgDOTAFantasyLeagueMatchupsResponse::EResult_MIN;
const CMsgDOTAFantasyLeagueMatchupsResponse_EResult CMsgDOTAFantasyLeagueMatchupsResponse::EResult_MAX;
const int CMsgDOTAFantasyLeagueMatchupsResponse::EResult_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgDOTAEditFantasyTeamResponse_EResult_descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_enum_descriptors[5];
}
bool CMsgDOTAEditFantasyTeamResponse_EResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgDOTAEditFantasyTeamResponse_EResult CMsgDOTAEditFantasyTeamResponse::SUCCESS;
const CMsgDOTAEditFantasyTeamResponse_EResult CMsgDOTAEditFantasyTeamResponse::ERROR_UNSPECIFIED;
const CMsgDOTAEditFantasyTeamResponse_EResult CMsgDOTAEditFantasyTeamResponse::ERROR_INVALID_TEAM_INFO;
const CMsgDOTAEditFantasyTeamResponse_EResult CMsgDOTAEditFantasyTeamResponse::ERROR_NAME_ALREADY_TAKEN;
const CMsgDOTAEditFantasyTeamResponse_EResult CMsgDOTAEditFantasyTeamResponse::ERROR_NO_PERMISSION;
const CMsgDOTAEditFantasyTeamResponse_EResult CMsgDOTAEditFantasyTeamResponse::EResult_MIN;
const CMsgDOTAEditFantasyTeamResponse_EResult CMsgDOTAEditFantasyTeamResponse::EResult_MAX;
const int CMsgDOTAEditFantasyTeamResponse::EResult_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgDOTAFantasyTeamScoreResponse_EResult_descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_enum_descriptors[6];
}
bool CMsgDOTAFantasyTeamScoreResponse_EResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgDOTAFantasyTeamScoreResponse_EResult CMsgDOTAFantasyTeamScoreResponse::SUCCESS;
const CMsgDOTAFantasyTeamScoreResponse_EResult CMsgDOTAFantasyTeamScoreResponse::ERROR_UNSPECIFIED;
const CMsgDOTAFantasyTeamScoreResponse_EResult CMsgDOTAFantasyTeamScoreResponse::ERROR_NO_PERMISSION;
const CMsgDOTAFantasyTeamScoreResponse_EResult CMsgDOTAFantasyTeamScoreResponse::ERROR_OWNER_NOT_IN_LEAGUE;
const CMsgDOTAFantasyTeamScoreResponse_EResult CMsgDOTAFantasyTeamScoreResponse::EResult_MIN;
const CMsgDOTAFantasyTeamScoreResponse_EResult CMsgDOTAFantasyTeamScoreResponse::EResult_MAX;
const int CMsgDOTAFantasyTeamScoreResponse::EResult_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgDOTAFantasyTeamStandingsResponse_EResult_descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_enum_descriptors[7];
}
bool CMsgDOTAFantasyTeamStandingsResponse_EResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgDOTAFantasyTeamStandingsResponse_EResult CMsgDOTAFantasyTeamStandingsResponse::SUCCESS;
const CMsgDOTAFantasyTeamStandingsResponse_EResult CMsgDOTAFantasyTeamStandingsResponse::ERROR_UNSPECIFIED;
const CMsgDOTAFantasyTeamStandingsResponse_EResult CMsgDOTAFantasyTeamStandingsResponse::ERROR_NO_PERMISSION;
const CMsgDOTAFantasyTeamStandingsResponse_EResult CMsgDOTAFantasyTeamStandingsResponse::EResult_MIN;
const CMsgDOTAFantasyTeamStandingsResponse_EResult CMsgDOTAFantasyTeamStandingsResponse::EResult_MAX;
const int CMsgDOTAFantasyTeamStandingsResponse::EResult_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgDOTAFantasyPlayerScoreResponse_EResult_descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_enum_descriptors[8];
}
bool CMsgDOTAFantasyPlayerScoreResponse_EResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgDOTAFantasyPlayerScoreResponse_EResult CMsgDOTAFantasyPlayerScoreResponse::SUCCESS;
const CMsgDOTAFantasyPlayerScoreResponse_EResult CMsgDOTAFantasyPlayerScoreResponse::ERROR_UNSPECIFIED;
const CMsgDOTAFantasyPlayerScoreResponse_EResult CMsgDOTAFantasyPlayerScoreResponse::ERROR_NO_PERMISSION;
const CMsgDOTAFantasyPlayerScoreResponse_EResult CMsgDOTAFantasyPlayerScoreResponse::EResult_MIN;
const CMsgDOTAFantasyPlayerScoreResponse_EResult CMsgDOTAFantasyPlayerScoreResponse::EResult_MAX;
const int CMsgDOTAFantasyPlayerScoreResponse::EResult_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgDOTAFantasyPlayerStandingsResponse_EResult_descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_enum_descriptors[9];
}
bool CMsgDOTAFantasyPlayerStandingsResponse_EResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgDOTAFantasyPlayerStandingsResponse_EResult CMsgDOTAFantasyPlayerStandingsResponse::SUCCESS;
const CMsgDOTAFantasyPlayerStandingsResponse_EResult CMsgDOTAFantasyPlayerStandingsResponse::ERROR_UNSPECIFIED;
const CMsgDOTAFantasyPlayerStandingsResponse_EResult CMsgDOTAFantasyPlayerStandingsResponse::ERROR_NO_PERMISSION;
const CMsgDOTAFantasyPlayerStandingsResponse_EResult CMsgDOTAFantasyPlayerStandingsResponse::EResult_MIN;
const CMsgDOTAFantasyPlayerStandingsResponse_EResult CMsgDOTAFantasyPlayerStandingsResponse::EResult_MAX;
const int CMsgDOTAFantasyPlayerStandingsResponse::EResult_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgDOTAFantasyLeagueCreateResponse_EResult_descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_enum_descriptors[10];
}
bool CMsgDOTAFantasyLeagueCreateResponse_EResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgDOTAFantasyLeagueCreateResponse_EResult CMsgDOTAFantasyLeagueCreateResponse::SUCCESS;
const CMsgDOTAFantasyLeagueCreateResponse_EResult CMsgDOTAFantasyLeagueCreateResponse::ERROR_NO_PERMISSION;
const CMsgDOTAFantasyLeagueCreateResponse_EResult CMsgDOTAFantasyLeagueCreateResponse::ERROR_BAD_SEASON_ID;
const CMsgDOTAFantasyLeagueCreateResponse_EResult CMsgDOTAFantasyLeagueCreateResponse::ERROR_BAD_LEAGUE_NAME;
const CMsgDOTAFantasyLeagueCreateResponse_EResult CMsgDOTAFantasyLeagueCreateResponse::ERROR_BAD_TEAM_NAME;
const CMsgDOTAFantasyLeagueCreateResponse_EResult CMsgDOTAFantasyLeagueCreateResponse::ERROR_UNSPECIFIED;
const CMsgDOTAFantasyLeagueCreateResponse_EResult CMsgDOTAFantasyLeagueCreateResponse::ERROR_FAILED_LOGO_UPLOAD;
const CMsgDOTAFantasyLeagueCreateResponse_EResult CMsgDOTAFantasyLeagueCreateResponse::ERROR_NO_TICKET;
const CMsgDOTAFantasyLeagueCreateResponse_EResult CMsgDOTAFantasyLeagueCreateResponse::EResult_MIN;
const CMsgDOTAFantasyLeagueCreateResponse_EResult CMsgDOTAFantasyLeagueCreateResponse::EResult_MAX;
const int CMsgDOTAFantasyLeagueCreateResponse::EResult_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgDOTAFantasyTeamCreateResponse_EResult_descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_enum_descriptors[11];
}
bool CMsgDOTAFantasyTeamCreateResponse_EResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgDOTAFantasyTeamCreateResponse_EResult CMsgDOTAFantasyTeamCreateResponse::SUCCESS;
const CMsgDOTAFantasyTeamCreateResponse_EResult CMsgDOTAFantasyTeamCreateResponse::ERROR_NO_PERMISSION;
const CMsgDOTAFantasyTeamCreateResponse_EResult CMsgDOTAFantasyTeamCreateResponse::ERROR_FAILED_LOGO_UPLOAD;
const CMsgDOTAFantasyTeamCreateResponse_EResult CMsgDOTAFantasyTeamCreateResponse::ERROR_BAD_FANTASY_LEAGUE_ID;
const CMsgDOTAFantasyTeamCreateResponse_EResult CMsgDOTAFantasyTeamCreateResponse::ERROR_BAD_NAME;
const CMsgDOTAFantasyTeamCreateResponse_EResult CMsgDOTAFantasyTeamCreateResponse::ERROR_FULL;
const CMsgDOTAFantasyTeamCreateResponse_EResult CMsgDOTAFantasyTeamCreateResponse::ERROR_ALREADY_MEMBER;
const CMsgDOTAFantasyTeamCreateResponse_EResult CMsgDOTAFantasyTeamCreateResponse::ERROR_BAD_PASSWORD;
const CMsgDOTAFantasyTeamCreateResponse_EResult CMsgDOTAFantasyTeamCreateResponse::ERROR_UNSPECIFIED;
const CMsgDOTAFantasyTeamCreateResponse_EResult CMsgDOTAFantasyTeamCreateResponse::ERROR_NO_TICKET;
const CMsgDOTAFantasyTeamCreateResponse_EResult CMsgDOTAFantasyTeamCreateResponse::ERROR_LEAGUE_LOCKED;
const CMsgDOTAFantasyTeamCreateResponse_EResult CMsgDOTAFantasyTeamCreateResponse::EResult_MIN;
const CMsgDOTAFantasyTeamCreateResponse_EResult CMsgDOTAFantasyTeamCreateResponse::EResult_MAX;
const int CMsgDOTAFantasyTeamCreateResponse::EResult_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgDOTAFantasyLeagueEditInvitesResponse_EResult_descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_enum_descriptors[12];
}
bool CMsgDOTAFantasyLeagueEditInvitesResponse_EResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgDOTAFantasyLeagueEditInvitesResponse_EResult CMsgDOTAFantasyLeagueEditInvitesResponse::SUCCESS;
const CMsgDOTAFantasyLeagueEditInvitesResponse_EResult CMsgDOTAFantasyLeagueEditInvitesResponse::ERROR_UNSPECIFIED;
const CMsgDOTAFantasyLeagueEditInvitesResponse_EResult CMsgDOTAFantasyLeagueEditInvitesResponse::EResult_MIN;
const CMsgDOTAFantasyLeagueEditInvitesResponse_EResult CMsgDOTAFantasyLeagueEditInvitesResponse::EResult_MAX;
const int CMsgDOTAFantasyLeagueEditInvitesResponse::EResult_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult_descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_enum_descriptors[13];
}
bool CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult CMsgDOTAFantasyLeagueDraftPlayerResponse::SUCCESS;
const CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult CMsgDOTAFantasyLeagueDraftPlayerResponse::ERROR_UNSPECIFIED;
const CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult CMsgDOTAFantasyLeagueDraftPlayerResponse::ERROR_INVALID_FANTASY_LEAGUE;
const CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult CMsgDOTAFantasyLeagueDraftPlayerResponse::ERROR_FANTASY_LEAGUE_NOT_DRAFTING;
const CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult CMsgDOTAFantasyLeagueDraftPlayerResponse::ERROR_OWNER_NOT_IN_LEAGUE;
const CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult CMsgDOTAFantasyLeagueDraftPlayerResponse::ERROR_NOT_OWNERS_TURN;
const CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult CMsgDOTAFantasyLeagueDraftPlayerResponse::ERROR_PLAYER_INVALID;
const CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult CMsgDOTAFantasyLeagueDraftPlayerResponse::ERROR_PLAYER_UNAVAILABLE;
const CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult CMsgDOTAFantasyLeagueDraftPlayerResponse::ERROR_PLAYER_NO_VALID_SLOTS;
const CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult CMsgDOTAFantasyLeagueDraftPlayerResponse::EResult_MIN;
const CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult CMsgDOTAFantasyLeagueDraftPlayerResponse::EResult_MAX;
const int CMsgDOTAFantasyLeagueDraftPlayerResponse::EResult_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgDOTAFantasyTeamRosterSwapResponse_EResult_descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_enum_descriptors[14];
}
bool CMsgDOTAFantasyTeamRosterSwapResponse_EResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgDOTAFantasyTeamRosterSwapResponse_EResult CMsgDOTAFantasyTeamRosterSwapResponse::SUCCESS;
const CMsgDOTAFantasyTeamRosterSwapResponse_EResult CMsgDOTAFantasyTeamRosterSwapResponse::ERROR_UNSPECIFIED;
const CMsgDOTAFantasyTeamRosterSwapResponse_EResult CMsgDOTAFantasyTeamRosterSwapResponse::ERROR_OWNER_NOT_IN_LEAGUE;
const CMsgDOTAFantasyTeamRosterSwapResponse_EResult CMsgDOTAFantasyTeamRosterSwapResponse::ERROR_SLOTS_INVALID;
const CMsgDOTAFantasyTeamRosterSwapResponse_EResult CMsgDOTAFantasyTeamRosterSwapResponse::ERROR_SLOT_LOCKED;
const CMsgDOTAFantasyTeamRosterSwapResponse_EResult CMsgDOTAFantasyTeamRosterSwapResponse::EResult_MIN;
const CMsgDOTAFantasyTeamRosterSwapResponse_EResult CMsgDOTAFantasyTeamRosterSwapResponse::EResult_MAX;
const int CMsgDOTAFantasyTeamRosterSwapResponse::EResult_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgDOTAFantasyTeamRosterAddDropResponse_EResult_descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_enum_descriptors[15];
}
bool CMsgDOTAFantasyTeamRosterAddDropResponse_EResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgDOTAFantasyTeamRosterAddDropResponse_EResult CMsgDOTAFantasyTeamRosterAddDropResponse::SUCCESS;
const CMsgDOTAFantasyTeamRosterAddDropResponse_EResult CMsgDOTAFantasyTeamRosterAddDropResponse::ERROR_UNSPECIFIED;
const CMsgDOTAFantasyTeamRosterAddDropResponse_EResult CMsgDOTAFantasyTeamRosterAddDropResponse::ERROR_OWNER_NOT_IN_LEAGUE;
const CMsgDOTAFantasyTeamRosterAddDropResponse_EResult CMsgDOTAFantasyTeamRosterAddDropResponse::ERROR_PLAYER_NOT_AVAILABLE;
const CMsgDOTAFantasyTeamRosterAddDropResponse_EResult CMsgDOTAFantasyTeamRosterAddDropResponse::ERROR_PLAYER_NOT_ON_TEAM;
const CMsgDOTAFantasyTeamRosterAddDropResponse_EResult CMsgDOTAFantasyTeamRosterAddDropResponse::ERROR_TRADE_ALREADY_PENDING;
const CMsgDOTAFantasyTeamRosterAddDropResponse_EResult CMsgDOTAFantasyTeamRosterAddDropResponse::EResult_MIN;
const CMsgDOTAFantasyTeamRosterAddDropResponse_EResult CMsgDOTAFantasyTeamRosterAddDropResponse::EResult_MAX;
const int CMsgDOTAFantasyTeamRosterAddDropResponse::EResult_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgDOTAFantasyTeamTradesResponse_EResult_descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_enum_descriptors[16];
}
bool CMsgDOTAFantasyTeamTradesResponse_EResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgDOTAFantasyTeamTradesResponse_EResult CMsgDOTAFantasyTeamTradesResponse::SUCCESS;
const CMsgDOTAFantasyTeamTradesResponse_EResult CMsgDOTAFantasyTeamTradesResponse::ERROR_UNSPECIFIED;
const CMsgDOTAFantasyTeamTradesResponse_EResult CMsgDOTAFantasyTeamTradesResponse::ERROR_NO_PERMISSION;
const CMsgDOTAFantasyTeamTradesResponse_EResult CMsgDOTAFantasyTeamTradesResponse::EResult_MIN;
const CMsgDOTAFantasyTeamTradesResponse_EResult CMsgDOTAFantasyTeamTradesResponse::EResult_MAX;
const int CMsgDOTAFantasyTeamTradesResponse::EResult_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgDOTAFantasyTeamTradeCancelResponse_EResult_descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_enum_descriptors[17];
}
bool CMsgDOTAFantasyTeamTradeCancelResponse_EResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgDOTAFantasyTeamTradeCancelResponse_EResult CMsgDOTAFantasyTeamTradeCancelResponse::SUCCESS;
const CMsgDOTAFantasyTeamTradeCancelResponse_EResult CMsgDOTAFantasyTeamTradeCancelResponse::ERROR_UNSPECIFIED;
const CMsgDOTAFantasyTeamTradeCancelResponse_EResult CMsgDOTAFantasyTeamTradeCancelResponse::ERROR_NO_PERMISSION;
const CMsgDOTAFantasyTeamTradeCancelResponse_EResult CMsgDOTAFantasyTeamTradeCancelResponse::ERROR_NO_TRADE;
const CMsgDOTAFantasyTeamTradeCancelResponse_EResult CMsgDOTAFantasyTeamTradeCancelResponse::EResult_MIN;
const CMsgDOTAFantasyTeamTradeCancelResponse_EResult CMsgDOTAFantasyTeamTradeCancelResponse::EResult_MAX;
const int CMsgDOTAFantasyTeamTradeCancelResponse::EResult_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgDOTAFantasyTeamRosterResponse_EResult_descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_enum_descriptors[18];
}
bool CMsgDOTAFantasyTeamRosterResponse_EResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgDOTAFantasyTeamRosterResponse_EResult CMsgDOTAFantasyTeamRosterResponse::SUCCESS;
const CMsgDOTAFantasyTeamRosterResponse_EResult CMsgDOTAFantasyTeamRosterResponse::ERROR_UNSPECIFIED;
const CMsgDOTAFantasyTeamRosterResponse_EResult CMsgDOTAFantasyTeamRosterResponse::ERROR_NO_PERMISSION;
const CMsgDOTAFantasyTeamRosterResponse_EResult CMsgDOTAFantasyTeamRosterResponse::ERROR_OWNER_NOT_IN_LEAGUE;
const CMsgDOTAFantasyTeamRosterResponse_EResult CMsgDOTAFantasyTeamRosterResponse::EResult_MIN;
const CMsgDOTAFantasyTeamRosterResponse_EResult CMsgDOTAFantasyTeamRosterResponse::EResult_MAX;
const int CMsgDOTAFantasyTeamRosterResponse::EResult_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult_descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_enum_descriptors[19];
}
bool CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult CMsgDOTAFantasyPlayerHisoricalStatsResponse::SUCCESS;
const CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult CMsgDOTAFantasyPlayerHisoricalStatsResponse::ERROR_UNSPECIFIED;
const CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult CMsgDOTAFantasyPlayerHisoricalStatsResponse::ERROR_NO_PERMISSION;
const CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult CMsgDOTAFantasyPlayerHisoricalStatsResponse::EResult_MIN;
const CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult CMsgDOTAFantasyPlayerHisoricalStatsResponse::EResult_MAX;
const int CMsgDOTAFantasyPlayerHisoricalStatsResponse::EResult_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgDOTAFantasyMessagesResponse_EResult_descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_enum_descriptors[20];
}
bool CMsgDOTAFantasyMessagesResponse_EResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgDOTAFantasyMessagesResponse_EResult CMsgDOTAFantasyMessagesResponse::SUCCESS;
const CMsgDOTAFantasyMessagesResponse_EResult CMsgDOTAFantasyMessagesResponse::ERROR_UNSPECIFIED;
const CMsgDOTAFantasyMessagesResponse_EResult CMsgDOTAFantasyMessagesResponse::ERROR_NO_PERMISSION;
const CMsgDOTAFantasyMessagesResponse_EResult CMsgDOTAFantasyMessagesResponse::EResult_MIN;
const CMsgDOTAFantasyMessagesResponse_EResult CMsgDOTAFantasyMessagesResponse::EResult_MAX;
const int CMsgDOTAFantasyMessagesResponse::EResult_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgDOTAFantasyRemoveOwnerResponse_EResult_descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_enum_descriptors[21];
}
bool CMsgDOTAFantasyRemoveOwnerResponse_EResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgDOTAFantasyRemoveOwnerResponse_EResult CMsgDOTAFantasyRemoveOwnerResponse::SUCCESS;
const CMsgDOTAFantasyRemoveOwnerResponse_EResult CMsgDOTAFantasyRemoveOwnerResponse::ERROR_UNSPECIFIED;
const CMsgDOTAFantasyRemoveOwnerResponse_EResult CMsgDOTAFantasyRemoveOwnerResponse::ERROR_NO_PERMISSION;
const CMsgDOTAFantasyRemoveOwnerResponse_EResult CMsgDOTAFantasyRemoveOwnerResponse::ERROR_LEAGUE_LOCKED;
const CMsgDOTAFantasyRemoveOwnerResponse_EResult CMsgDOTAFantasyRemoveOwnerResponse::ERROR_NOT_A_MEMBER;
const CMsgDOTAFantasyRemoveOwnerResponse_EResult CMsgDOTAFantasyRemoveOwnerResponse::EResult_MIN;
const CMsgDOTAFantasyRemoveOwnerResponse_EResult CMsgDOTAFantasyRemoveOwnerResponse::EResult_MAX;
const int CMsgDOTAFantasyRemoveOwnerResponse::EResult_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgDOTAFantasyScheduledMatchesResponse_EResult_descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_enum_descriptors[22];
}
bool CMsgDOTAFantasyScheduledMatchesResponse_EResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgDOTAFantasyScheduledMatchesResponse_EResult CMsgDOTAFantasyScheduledMatchesResponse::SUCCESS;
const CMsgDOTAFantasyScheduledMatchesResponse_EResult CMsgDOTAFantasyScheduledMatchesResponse::ERROR_UNSPECIFIED;
const CMsgDOTAFantasyScheduledMatchesResponse_EResult CMsgDOTAFantasyScheduledMatchesResponse::EResult_MIN;
const CMsgDOTAFantasyScheduledMatchesResponse_EResult CMsgDOTAFantasyScheduledMatchesResponse::EResult_MAX;
const int CMsgDOTAFantasyScheduledMatchesResponse::EResult_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgDOTAFantasyLeaveLeagueResponse_EResult_descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_enum_descriptors[23];
}
bool CMsgDOTAFantasyLeaveLeagueResponse_EResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgDOTAFantasyLeaveLeagueResponse_EResult CMsgDOTAFantasyLeaveLeagueResponse::SUCCESS;
const CMsgDOTAFantasyLeaveLeagueResponse_EResult CMsgDOTAFantasyLeaveLeagueResponse::ERROR_UNSPECIFIED;
const CMsgDOTAFantasyLeaveLeagueResponse_EResult CMsgDOTAFantasyLeaveLeagueResponse::ERROR_NOT_MEMBER;
const CMsgDOTAFantasyLeaveLeagueResponse_EResult CMsgDOTAFantasyLeaveLeagueResponse::ERROR_LEAGUE_NOT_FOUND;
const CMsgDOTAFantasyLeaveLeagueResponse_EResult CMsgDOTAFantasyLeaveLeagueResponse::ERROR_DRAFT_ACTIVE;
const CMsgDOTAFantasyLeaveLeagueResponse_EResult CMsgDOTAFantasyLeaveLeagueResponse::EResult_MIN;
const CMsgDOTAFantasyLeaveLeagueResponse_EResult CMsgDOTAFantasyLeaveLeagueResponse::EResult_MAX;
const int CMsgDOTAFantasyLeaveLeagueResponse::EResult_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult_descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_enum_descriptors[24];
}
bool CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult CMsgDOTAFantasyPlayerScoreDetailsResponse::SUCCESS;
const CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult CMsgDOTAFantasyPlayerScoreDetailsResponse::ERROR_UNSPECIFIED;
const CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult CMsgDOTAFantasyPlayerScoreDetailsResponse::ERROR_NOT_MEMBER;
const CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult CMsgDOTAFantasyPlayerScoreDetailsResponse::EResult_MIN;
const CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult CMsgDOTAFantasyPlayerScoreDetailsResponse::EResult_MAX;
const int CMsgDOTAFantasyPlayerScoreDetailsResponse::EResult_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgClientToGCGetPlayerCardRosterResponse_Result_descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_enum_descriptors[25];
}
bool CMsgClientToGCGetPlayerCardRosterResponse_Result_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgClientToGCGetPlayerCardRosterResponse_Result CMsgClientToGCGetPlayerCardRosterResponse::SUCCESS;
const CMsgClientToGCGetPlayerCardRosterResponse_Result CMsgClientToGCGetPlayerCardRosterResponse::ERROR_UNSPECIFIED;
const CMsgClientToGCGetPlayerCardRosterResponse_Result CMsgClientToGCGetPlayerCardRosterResponse::ERROR_INVALID_LEAGUE_ID;
const CMsgClientToGCGetPlayerCardRosterResponse_Result CMsgClientToGCGetPlayerCardRosterResponse::ERROR_INVALID_TIMESTAMP;
const CMsgClientToGCGetPlayerCardRosterResponse_Result CMsgClientToGCGetPlayerCardRosterResponse::Result_MIN;
const CMsgClientToGCGetPlayerCardRosterResponse_Result CMsgClientToGCGetPlayerCardRosterResponse::Result_MAX;
const int CMsgClientToGCGetPlayerCardRosterResponse::Result_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgClientToGCSetPlayerCardRosterResponse_Result_descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_enum_descriptors[26];
}
bool CMsgClientToGCSetPlayerCardRosterResponse_Result_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgClientToGCSetPlayerCardRosterResponse_Result CMsgClientToGCSetPlayerCardRosterResponse::SUCCESS;
const CMsgClientToGCSetPlayerCardRosterResponse_Result CMsgClientToGCSetPlayerCardRosterResponse::ERROR_UNSPECIFIED;
const CMsgClientToGCSetPlayerCardRosterResponse_Result CMsgClientToGCSetPlayerCardRosterResponse::ERROR_INVALID_LEAGUE_ID;
const CMsgClientToGCSetPlayerCardRosterResponse_Result CMsgClientToGCSetPlayerCardRosterResponse::ERROR_INVALID_TIMESTAMP;
const CMsgClientToGCSetPlayerCardRosterResponse_Result CMsgClientToGCSetPlayerCardRosterResponse::ERROR_PLAYER_CARD_NOT_OWNED;
const CMsgClientToGCSetPlayerCardRosterResponse_Result CMsgClientToGCSetPlayerCardRosterResponse::ERROR_INVALID_SLOT;
const CMsgClientToGCSetPlayerCardRosterResponse_Result CMsgClientToGCSetPlayerCardRosterResponse::ERROR_FAILED_CARD_INFO;
const CMsgClientToGCSetPlayerCardRosterResponse_Result CMsgClientToGCSetPlayerCardRosterResponse::ERROR_ACCOUNT_DUPLICATE;
const CMsgClientToGCSetPlayerCardRosterResponse_Result CMsgClientToGCSetPlayerCardRosterResponse::ERROR_LOCKED_TIMESTAMP;
const CMsgClientToGCSetPlayerCardRosterResponse_Result CMsgClientToGCSetPlayerCardRosterResponse::Result_MIN;
const CMsgClientToGCSetPlayerCardRosterResponse_Result CMsgClientToGCSetPlayerCardRosterResponse::Result_MAX;
const int CMsgClientToGCSetPlayerCardRosterResponse::Result_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* DOTA_2013PassportSelectionIndices_descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_enum_descriptors[27];
}
bool DOTA_2013PassportSelectionIndices_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCPlayerInfo_PlayerInfo::kAccountIdFieldNumber;
const int CMsgGCPlayerInfo_PlayerInfo::kNameFieldNumber;
const int CMsgGCPlayerInfo_PlayerInfo::kCountryCodeFieldNumber;
const int CMsgGCPlayerInfo_PlayerInfo::kFantasyRoleFieldNumber;
const int CMsgGCPlayerInfo_PlayerInfo::kTeamIdFieldNumber;
const int CMsgGCPlayerInfo_PlayerInfo::kTeamNameFieldNumber;
const int CMsgGCPlayerInfo_PlayerInfo::kTeamTagFieldNumber;
const int CMsgGCPlayerInfo_PlayerInfo::kSponsorFieldNumber;
const int CMsgGCPlayerInfo_PlayerInfo::kIsLockedFieldNumber;
const int CMsgGCPlayerInfo_PlayerInfo::kIsProFieldNumber;
const int CMsgGCPlayerInfo_PlayerInfo::kLockedUntilFieldNumber;
const int CMsgGCPlayerInfo_PlayerInfo::kTimestampFieldNumber;
const int CMsgGCPlayerInfo_PlayerInfo::kRegisteredTeamIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCPlayerInfo_PlayerInfo::CMsgGCPlayerInfo_PlayerInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCPlayerInfo.PlayerInfo)
}
CMsgGCPlayerInfo_PlayerInfo::CMsgGCPlayerInfo_PlayerInfo(const CMsgGCPlayerInfo_PlayerInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  country_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_country_code()) {
    country_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_code_);
  }
  team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_team_name()) {
    team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_);
  }
  team_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_team_tag()) {
    team_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_tag_);
  }
  sponsor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sponsor()) {
    sponsor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sponsor_);
  }
  ::memcpy(&account_id_, &from.account_id_,
    reinterpret_cast<char*>(&registered_team_id_) -
    reinterpret_cast<char*>(&account_id_) + sizeof(registered_team_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCPlayerInfo.PlayerInfo)
}

void CMsgGCPlayerInfo_PlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sponsor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&account_id_, 0, reinterpret_cast<char*>(&registered_team_id_) -
    reinterpret_cast<char*>(&account_id_) + sizeof(registered_team_id_));
}

CMsgGCPlayerInfo_PlayerInfo::~CMsgGCPlayerInfo_PlayerInfo() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCPlayerInfo.PlayerInfo)
  SharedDtor();
}

void CMsgGCPlayerInfo_PlayerInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sponsor_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCPlayerInfo_PlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCPlayerInfo_PlayerInfo::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCPlayerInfo_PlayerInfo& CMsgGCPlayerInfo_PlayerInfo::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCPlayerInfo_PlayerInfo* CMsgGCPlayerInfo_PlayerInfo::New(::google::protobuf::Arena* arena) const {
  CMsgGCPlayerInfo_PlayerInfo* n = new CMsgGCPlayerInfo_PlayerInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCPlayerInfo_PlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCPlayerInfo.PlayerInfo)
  if (_has_bits_[0 / 32] & 31u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_country_code()) {
      GOOGLE_DCHECK(!country_code_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*country_code_.UnsafeRawStringPointer())->clear();
    }
    if (has_team_name()) {
      GOOGLE_DCHECK(!team_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*team_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_team_tag()) {
      GOOGLE_DCHECK(!team_tag_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*team_tag_.UnsafeRawStringPointer())->clear();
    }
    if (has_sponsor()) {
      GOOGLE_DCHECK(!sponsor_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*sponsor_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 224u) {
    ::memset(&account_id_, 0, reinterpret_cast<char*>(&team_id_) -
      reinterpret_cast<char*>(&account_id_) + sizeof(team_id_));
  }
  if (_has_bits_[8 / 32] & 7936u) {
    ::memset(&is_locked_, 0, reinterpret_cast<char*>(&registered_team_id_) -
      reinterpret_cast<char*>(&is_locked_) + sizeof(registered_team_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCPlayerInfo_PlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCPlayerInfo.PlayerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgGCPlayerInfo.PlayerInfo.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string country_code = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->country_code().data(), this->country_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgGCPlayerInfo.PlayerInfo.country_code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 fantasy_role = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_fantasy_role();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_role_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_team_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string team_name = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team_name().data(), this->team_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgGCPlayerInfo.PlayerInfo.team_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string team_tag = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team_tag().data(), this->team_tag().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgGCPlayerInfo.PlayerInfo.team_tag");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string sponsor = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sponsor()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sponsor().data(), this->sponsor().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgGCPlayerInfo.PlayerInfo.sponsor");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_locked = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_is_locked();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_locked_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_pro = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_is_pro();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_pro_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 locked_until = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_locked_until();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &locked_until_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 timestamp = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 registered_team_id = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_registered_team_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &registered_team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCPlayerInfo.PlayerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCPlayerInfo.PlayerInfo)
  return false;
#undef DO_
}

void CMsgGCPlayerInfo_PlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCPlayerInfo.PlayerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCPlayerInfo.PlayerInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string country_code = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country_code().data(), this->country_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCPlayerInfo.PlayerInfo.country_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->country_code(), output);
  }

  // optional uint32 fantasy_role = 4;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->fantasy_role(), output);
  }

  // optional uint32 team_id = 5;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->team_id(), output);
  }

  // optional string team_name = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCPlayerInfo.PlayerInfo.team_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->team_name(), output);
  }

  // optional string team_tag = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_tag().data(), this->team_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCPlayerInfo.PlayerInfo.team_tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->team_tag(), output);
  }

  // optional string sponsor = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sponsor().data(), this->sponsor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCPlayerInfo.PlayerInfo.sponsor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->sponsor(), output);
  }

  // optional bool is_locked = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->is_locked(), output);
  }

  // optional bool is_pro = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->is_pro(), output);
  }

  // optional uint32 locked_until = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->locked_until(), output);
  }

  // optional uint32 timestamp = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->timestamp(), output);
  }

  // optional uint32 registered_team_id = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->registered_team_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCPlayerInfo.PlayerInfo)
}

::google::protobuf::uint8* CMsgGCPlayerInfo_PlayerInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCPlayerInfo.PlayerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCPlayerInfo.PlayerInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string country_code = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country_code().data(), this->country_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCPlayerInfo.PlayerInfo.country_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->country_code(), target);
  }

  // optional uint32 fantasy_role = 4;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->fantasy_role(), target);
  }

  // optional uint32 team_id = 5;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->team_id(), target);
  }

  // optional string team_name = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCPlayerInfo.PlayerInfo.team_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->team_name(), target);
  }

  // optional string team_tag = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_tag().data(), this->team_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCPlayerInfo.PlayerInfo.team_tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->team_tag(), target);
  }

  // optional string sponsor = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sponsor().data(), this->sponsor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCPlayerInfo.PlayerInfo.sponsor");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->sponsor(), target);
  }

  // optional bool is_locked = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->is_locked(), target);
  }

  // optional bool is_pro = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->is_pro(), target);
  }

  // optional uint32 locked_until = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->locked_until(), target);
  }

  // optional uint32 timestamp = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->timestamp(), target);
  }

  // optional uint32 registered_team_id = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->registered_team_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCPlayerInfo.PlayerInfo)
  return target;
}

size_t CMsgGCPlayerInfo_PlayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCPlayerInfo.PlayerInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string country_code = 3;
    if (has_country_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country_code());
    }

    // optional string team_name = 6;
    if (has_team_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_name());
    }

    // optional string team_tag = 7;
    if (has_team_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_tag());
    }

    // optional string sponsor = 8;
    if (has_sponsor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sponsor());
    }

    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 fantasy_role = 4;
    if (has_fantasy_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_role());
    }

    // optional uint32 team_id = 5;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

  }
  if (_has_bits_[8 / 32] & 7936u) {
    // optional bool is_locked = 9;
    if (has_is_locked()) {
      total_size += 1 + 1;
    }

    // optional bool is_pro = 10;
    if (has_is_pro()) {
      total_size += 1 + 1;
    }

    // optional uint32 locked_until = 11;
    if (has_locked_until()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->locked_until());
    }

    // optional uint32 timestamp = 12;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

    // optional uint32 registered_team_id = 13;
    if (has_registered_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->registered_team_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCPlayerInfo_PlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCPlayerInfo.PlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCPlayerInfo_PlayerInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCPlayerInfo_PlayerInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCPlayerInfo.PlayerInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCPlayerInfo.PlayerInfo)
    MergeFrom(*source);
  }
}

void CMsgGCPlayerInfo_PlayerInfo::MergeFrom(const CMsgGCPlayerInfo_PlayerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCPlayerInfo.PlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_country_code();
      country_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_code_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_team_name();
      team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_team_tag();
      team_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_tag_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_sponsor();
      sponsor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sponsor_);
    }
    if (cached_has_bits & 0x00000020u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      fantasy_role_ = from.fantasy_role_;
    }
    if (cached_has_bits & 0x00000080u) {
      team_id_ = from.team_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 7936u) {
    if (cached_has_bits & 0x00000100u) {
      is_locked_ = from.is_locked_;
    }
    if (cached_has_bits & 0x00000200u) {
      is_pro_ = from.is_pro_;
    }
    if (cached_has_bits & 0x00000400u) {
      locked_until_ = from.locked_until_;
    }
    if (cached_has_bits & 0x00000800u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00001000u) {
      registered_team_id_ = from.registered_team_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCPlayerInfo_PlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCPlayerInfo.PlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCPlayerInfo_PlayerInfo::CopyFrom(const CMsgGCPlayerInfo_PlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCPlayerInfo.PlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCPlayerInfo_PlayerInfo::IsInitialized() const {
  return true;
}

void CMsgGCPlayerInfo_PlayerInfo::Swap(CMsgGCPlayerInfo_PlayerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCPlayerInfo_PlayerInfo::InternalSwap(CMsgGCPlayerInfo_PlayerInfo* other) {
  name_.Swap(&other->name_);
  country_code_.Swap(&other->country_code_);
  team_name_.Swap(&other->team_name_);
  team_tag_.Swap(&other->team_tag_);
  sponsor_.Swap(&other->sponsor_);
  std::swap(account_id_, other->account_id_);
  std::swap(fantasy_role_, other->fantasy_role_);
  std::swap(team_id_, other->team_id_);
  std::swap(is_locked_, other->is_locked_);
  std::swap(is_pro_, other->is_pro_);
  std::swap(locked_until_, other->locked_until_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(registered_team_id_, other->registered_team_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCPlayerInfo_PlayerInfo::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCPlayerInfo_PlayerInfo

// optional uint32 account_id = 1;
bool CMsgGCPlayerInfo_PlayerInfo::has_account_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgGCPlayerInfo_PlayerInfo::set_has_account_id() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgGCPlayerInfo_PlayerInfo::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgGCPlayerInfo_PlayerInfo::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
::google::protobuf::uint32 CMsgGCPlayerInfo_PlayerInfo::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCPlayerInfo.PlayerInfo.account_id)
  return account_id_;
}
void CMsgGCPlayerInfo_PlayerInfo::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCPlayerInfo.PlayerInfo.account_id)
}

// optional string name = 2;
bool CMsgGCPlayerInfo_PlayerInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCPlayerInfo_PlayerInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCPlayerInfo_PlayerInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCPlayerInfo_PlayerInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& CMsgGCPlayerInfo_PlayerInfo::name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCPlayerInfo.PlayerInfo.name)
  return name_.GetNoArena();
}
void CMsgGCPlayerInfo_PlayerInfo::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCPlayerInfo.PlayerInfo.name)
}
#if LANG_CXX11
void CMsgGCPlayerInfo_PlayerInfo::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgGCPlayerInfo.PlayerInfo.name)
}
#endif
void CMsgGCPlayerInfo_PlayerInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgGCPlayerInfo.PlayerInfo.name)
}
void CMsgGCPlayerInfo_PlayerInfo::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgGCPlayerInfo.PlayerInfo.name)
}
::std::string* CMsgGCPlayerInfo_PlayerInfo::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGCPlayerInfo.PlayerInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgGCPlayerInfo_PlayerInfo::release_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgGCPlayerInfo.PlayerInfo.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgGCPlayerInfo_PlayerInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgGCPlayerInfo.PlayerInfo.name)
}

// optional string country_code = 3;
bool CMsgGCPlayerInfo_PlayerInfo::has_country_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgGCPlayerInfo_PlayerInfo::set_has_country_code() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgGCPlayerInfo_PlayerInfo::clear_has_country_code() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgGCPlayerInfo_PlayerInfo::clear_country_code() {
  country_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_country_code();
}
const ::std::string& CMsgGCPlayerInfo_PlayerInfo::country_code() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCPlayerInfo.PlayerInfo.country_code)
  return country_code_.GetNoArena();
}
void CMsgGCPlayerInfo_PlayerInfo::set_country_code(const ::std::string& value) {
  set_has_country_code();
  country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCPlayerInfo.PlayerInfo.country_code)
}
#if LANG_CXX11
void CMsgGCPlayerInfo_PlayerInfo::set_country_code(::std::string&& value) {
  set_has_country_code();
  country_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgGCPlayerInfo.PlayerInfo.country_code)
}
#endif
void CMsgGCPlayerInfo_PlayerInfo::set_country_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_country_code();
  country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgGCPlayerInfo.PlayerInfo.country_code)
}
void CMsgGCPlayerInfo_PlayerInfo::set_country_code(const char* value, size_t size) {
  set_has_country_code();
  country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgGCPlayerInfo.PlayerInfo.country_code)
}
::std::string* CMsgGCPlayerInfo_PlayerInfo::mutable_country_code() {
  set_has_country_code();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGCPlayerInfo.PlayerInfo.country_code)
  return country_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgGCPlayerInfo_PlayerInfo::release_country_code() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgGCPlayerInfo.PlayerInfo.country_code)
  clear_has_country_code();
  return country_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgGCPlayerInfo_PlayerInfo::set_allocated_country_code(::std::string* country_code) {
  if (country_code != NULL) {
    set_has_country_code();
  } else {
    clear_has_country_code();
  }
  country_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), country_code);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgGCPlayerInfo.PlayerInfo.country_code)
}

// optional uint32 fantasy_role = 4;
bool CMsgGCPlayerInfo_PlayerInfo::has_fantasy_role() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgGCPlayerInfo_PlayerInfo::set_has_fantasy_role() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgGCPlayerInfo_PlayerInfo::clear_has_fantasy_role() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgGCPlayerInfo_PlayerInfo::clear_fantasy_role() {
  fantasy_role_ = 0u;
  clear_has_fantasy_role();
}
::google::protobuf::uint32 CMsgGCPlayerInfo_PlayerInfo::fantasy_role() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCPlayerInfo.PlayerInfo.fantasy_role)
  return fantasy_role_;
}
void CMsgGCPlayerInfo_PlayerInfo::set_fantasy_role(::google::protobuf::uint32 value) {
  set_has_fantasy_role();
  fantasy_role_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCPlayerInfo.PlayerInfo.fantasy_role)
}

// optional uint32 team_id = 5;
bool CMsgGCPlayerInfo_PlayerInfo::has_team_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgGCPlayerInfo_PlayerInfo::set_has_team_id() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgGCPlayerInfo_PlayerInfo::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgGCPlayerInfo_PlayerInfo::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
::google::protobuf::uint32 CMsgGCPlayerInfo_PlayerInfo::team_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCPlayerInfo.PlayerInfo.team_id)
  return team_id_;
}
void CMsgGCPlayerInfo_PlayerInfo::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCPlayerInfo.PlayerInfo.team_id)
}

// optional string team_name = 6;
bool CMsgGCPlayerInfo_PlayerInfo::has_team_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgGCPlayerInfo_PlayerInfo::set_has_team_name() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgGCPlayerInfo_PlayerInfo::clear_has_team_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgGCPlayerInfo_PlayerInfo::clear_team_name() {
  team_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_team_name();
}
const ::std::string& CMsgGCPlayerInfo_PlayerInfo::team_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCPlayerInfo.PlayerInfo.team_name)
  return team_name_.GetNoArena();
}
void CMsgGCPlayerInfo_PlayerInfo::set_team_name(const ::std::string& value) {
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCPlayerInfo.PlayerInfo.team_name)
}
#if LANG_CXX11
void CMsgGCPlayerInfo_PlayerInfo::set_team_name(::std::string&& value) {
  set_has_team_name();
  team_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgGCPlayerInfo.PlayerInfo.team_name)
}
#endif
void CMsgGCPlayerInfo_PlayerInfo::set_team_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgGCPlayerInfo.PlayerInfo.team_name)
}
void CMsgGCPlayerInfo_PlayerInfo::set_team_name(const char* value, size_t size) {
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgGCPlayerInfo.PlayerInfo.team_name)
}
::std::string* CMsgGCPlayerInfo_PlayerInfo::mutable_team_name() {
  set_has_team_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGCPlayerInfo.PlayerInfo.team_name)
  return team_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgGCPlayerInfo_PlayerInfo::release_team_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgGCPlayerInfo.PlayerInfo.team_name)
  clear_has_team_name();
  return team_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgGCPlayerInfo_PlayerInfo::set_allocated_team_name(::std::string* team_name) {
  if (team_name != NULL) {
    set_has_team_name();
  } else {
    clear_has_team_name();
  }
  team_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), team_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgGCPlayerInfo.PlayerInfo.team_name)
}

// optional string team_tag = 7;
bool CMsgGCPlayerInfo_PlayerInfo::has_team_tag() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgGCPlayerInfo_PlayerInfo::set_has_team_tag() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgGCPlayerInfo_PlayerInfo::clear_has_team_tag() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgGCPlayerInfo_PlayerInfo::clear_team_tag() {
  team_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_team_tag();
}
const ::std::string& CMsgGCPlayerInfo_PlayerInfo::team_tag() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCPlayerInfo.PlayerInfo.team_tag)
  return team_tag_.GetNoArena();
}
void CMsgGCPlayerInfo_PlayerInfo::set_team_tag(const ::std::string& value) {
  set_has_team_tag();
  team_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCPlayerInfo.PlayerInfo.team_tag)
}
#if LANG_CXX11
void CMsgGCPlayerInfo_PlayerInfo::set_team_tag(::std::string&& value) {
  set_has_team_tag();
  team_tag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgGCPlayerInfo.PlayerInfo.team_tag)
}
#endif
void CMsgGCPlayerInfo_PlayerInfo::set_team_tag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_team_tag();
  team_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgGCPlayerInfo.PlayerInfo.team_tag)
}
void CMsgGCPlayerInfo_PlayerInfo::set_team_tag(const char* value, size_t size) {
  set_has_team_tag();
  team_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgGCPlayerInfo.PlayerInfo.team_tag)
}
::std::string* CMsgGCPlayerInfo_PlayerInfo::mutable_team_tag() {
  set_has_team_tag();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGCPlayerInfo.PlayerInfo.team_tag)
  return team_tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgGCPlayerInfo_PlayerInfo::release_team_tag() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgGCPlayerInfo.PlayerInfo.team_tag)
  clear_has_team_tag();
  return team_tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgGCPlayerInfo_PlayerInfo::set_allocated_team_tag(::std::string* team_tag) {
  if (team_tag != NULL) {
    set_has_team_tag();
  } else {
    clear_has_team_tag();
  }
  team_tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), team_tag);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgGCPlayerInfo.PlayerInfo.team_tag)
}

// optional string sponsor = 8;
bool CMsgGCPlayerInfo_PlayerInfo::has_sponsor() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgGCPlayerInfo_PlayerInfo::set_has_sponsor() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgGCPlayerInfo_PlayerInfo::clear_has_sponsor() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgGCPlayerInfo_PlayerInfo::clear_sponsor() {
  sponsor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sponsor();
}
const ::std::string& CMsgGCPlayerInfo_PlayerInfo::sponsor() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCPlayerInfo.PlayerInfo.sponsor)
  return sponsor_.GetNoArena();
}
void CMsgGCPlayerInfo_PlayerInfo::set_sponsor(const ::std::string& value) {
  set_has_sponsor();
  sponsor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCPlayerInfo.PlayerInfo.sponsor)
}
#if LANG_CXX11
void CMsgGCPlayerInfo_PlayerInfo::set_sponsor(::std::string&& value) {
  set_has_sponsor();
  sponsor_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgGCPlayerInfo.PlayerInfo.sponsor)
}
#endif
void CMsgGCPlayerInfo_PlayerInfo::set_sponsor(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sponsor();
  sponsor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgGCPlayerInfo.PlayerInfo.sponsor)
}
void CMsgGCPlayerInfo_PlayerInfo::set_sponsor(const char* value, size_t size) {
  set_has_sponsor();
  sponsor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgGCPlayerInfo.PlayerInfo.sponsor)
}
::std::string* CMsgGCPlayerInfo_PlayerInfo::mutable_sponsor() {
  set_has_sponsor();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGCPlayerInfo.PlayerInfo.sponsor)
  return sponsor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgGCPlayerInfo_PlayerInfo::release_sponsor() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgGCPlayerInfo.PlayerInfo.sponsor)
  clear_has_sponsor();
  return sponsor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgGCPlayerInfo_PlayerInfo::set_allocated_sponsor(::std::string* sponsor) {
  if (sponsor != NULL) {
    set_has_sponsor();
  } else {
    clear_has_sponsor();
  }
  sponsor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sponsor);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgGCPlayerInfo.PlayerInfo.sponsor)
}

// optional bool is_locked = 9;
bool CMsgGCPlayerInfo_PlayerInfo::has_is_locked() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CMsgGCPlayerInfo_PlayerInfo::set_has_is_locked() {
  _has_bits_[0] |= 0x00000100u;
}
void CMsgGCPlayerInfo_PlayerInfo::clear_has_is_locked() {
  _has_bits_[0] &= ~0x00000100u;
}
void CMsgGCPlayerInfo_PlayerInfo::clear_is_locked() {
  is_locked_ = false;
  clear_has_is_locked();
}
bool CMsgGCPlayerInfo_PlayerInfo::is_locked() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCPlayerInfo.PlayerInfo.is_locked)
  return is_locked_;
}
void CMsgGCPlayerInfo_PlayerInfo::set_is_locked(bool value) {
  set_has_is_locked();
  is_locked_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCPlayerInfo.PlayerInfo.is_locked)
}

// optional bool is_pro = 10;
bool CMsgGCPlayerInfo_PlayerInfo::has_is_pro() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CMsgGCPlayerInfo_PlayerInfo::set_has_is_pro() {
  _has_bits_[0] |= 0x00000200u;
}
void CMsgGCPlayerInfo_PlayerInfo::clear_has_is_pro() {
  _has_bits_[0] &= ~0x00000200u;
}
void CMsgGCPlayerInfo_PlayerInfo::clear_is_pro() {
  is_pro_ = false;
  clear_has_is_pro();
}
bool CMsgGCPlayerInfo_PlayerInfo::is_pro() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCPlayerInfo.PlayerInfo.is_pro)
  return is_pro_;
}
void CMsgGCPlayerInfo_PlayerInfo::set_is_pro(bool value) {
  set_has_is_pro();
  is_pro_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCPlayerInfo.PlayerInfo.is_pro)
}

// optional uint32 locked_until = 11;
bool CMsgGCPlayerInfo_PlayerInfo::has_locked_until() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CMsgGCPlayerInfo_PlayerInfo::set_has_locked_until() {
  _has_bits_[0] |= 0x00000400u;
}
void CMsgGCPlayerInfo_PlayerInfo::clear_has_locked_until() {
  _has_bits_[0] &= ~0x00000400u;
}
void CMsgGCPlayerInfo_PlayerInfo::clear_locked_until() {
  locked_until_ = 0u;
  clear_has_locked_until();
}
::google::protobuf::uint32 CMsgGCPlayerInfo_PlayerInfo::locked_until() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCPlayerInfo.PlayerInfo.locked_until)
  return locked_until_;
}
void CMsgGCPlayerInfo_PlayerInfo::set_locked_until(::google::protobuf::uint32 value) {
  set_has_locked_until();
  locked_until_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCPlayerInfo.PlayerInfo.locked_until)
}

// optional uint32 timestamp = 12;
bool CMsgGCPlayerInfo_PlayerInfo::has_timestamp() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CMsgGCPlayerInfo_PlayerInfo::set_has_timestamp() {
  _has_bits_[0] |= 0x00000800u;
}
void CMsgGCPlayerInfo_PlayerInfo::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000800u;
}
void CMsgGCPlayerInfo_PlayerInfo::clear_timestamp() {
  timestamp_ = 0u;
  clear_has_timestamp();
}
::google::protobuf::uint32 CMsgGCPlayerInfo_PlayerInfo::timestamp() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCPlayerInfo.PlayerInfo.timestamp)
  return timestamp_;
}
void CMsgGCPlayerInfo_PlayerInfo::set_timestamp(::google::protobuf::uint32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCPlayerInfo.PlayerInfo.timestamp)
}

// optional uint32 registered_team_id = 13;
bool CMsgGCPlayerInfo_PlayerInfo::has_registered_team_id() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void CMsgGCPlayerInfo_PlayerInfo::set_has_registered_team_id() {
  _has_bits_[0] |= 0x00001000u;
}
void CMsgGCPlayerInfo_PlayerInfo::clear_has_registered_team_id() {
  _has_bits_[0] &= ~0x00001000u;
}
void CMsgGCPlayerInfo_PlayerInfo::clear_registered_team_id() {
  registered_team_id_ = 0u;
  clear_has_registered_team_id();
}
::google::protobuf::uint32 CMsgGCPlayerInfo_PlayerInfo::registered_team_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCPlayerInfo.PlayerInfo.registered_team_id)
  return registered_team_id_;
}
void CMsgGCPlayerInfo_PlayerInfo::set_registered_team_id(::google::protobuf::uint32 value) {
  set_has_registered_team_id();
  registered_team_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCPlayerInfo.PlayerInfo.registered_team_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCPlayerInfo_RegionLeaderboard::kDivisionFieldNumber;
const int CMsgGCPlayerInfo_RegionLeaderboard::kAccountIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCPlayerInfo_RegionLeaderboard::CMsgGCPlayerInfo_RegionLeaderboard()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCPlayerInfo.RegionLeaderboard)
}
CMsgGCPlayerInfo_RegionLeaderboard::CMsgGCPlayerInfo_RegionLeaderboard(const CMsgGCPlayerInfo_RegionLeaderboard& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      account_ids_(from.account_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  division_ = from.division_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCPlayerInfo.RegionLeaderboard)
}

void CMsgGCPlayerInfo_RegionLeaderboard::SharedCtor() {
  _cached_size_ = 0;
  division_ = 0u;
}

CMsgGCPlayerInfo_RegionLeaderboard::~CMsgGCPlayerInfo_RegionLeaderboard() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCPlayerInfo.RegionLeaderboard)
  SharedDtor();
}

void CMsgGCPlayerInfo_RegionLeaderboard::SharedDtor() {
}

void CMsgGCPlayerInfo_RegionLeaderboard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCPlayerInfo_RegionLeaderboard::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCPlayerInfo_RegionLeaderboard& CMsgGCPlayerInfo_RegionLeaderboard::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCPlayerInfo_RegionLeaderboard* CMsgGCPlayerInfo_RegionLeaderboard::New(::google::protobuf::Arena* arena) const {
  CMsgGCPlayerInfo_RegionLeaderboard* n = new CMsgGCPlayerInfo_RegionLeaderboard;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCPlayerInfo_RegionLeaderboard::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCPlayerInfo.RegionLeaderboard)
  account_ids_.Clear();
  division_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCPlayerInfo_RegionLeaderboard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCPlayerInfo.RegionLeaderboard)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 division = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_division();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &division_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 account_ids = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_account_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_account_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCPlayerInfo.RegionLeaderboard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCPlayerInfo.RegionLeaderboard)
  return false;
#undef DO_
}

void CMsgGCPlayerInfo_RegionLeaderboard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCPlayerInfo.RegionLeaderboard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 division = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->division(), output);
  }

  // repeated uint32 account_ids = 2;
  for (int i = 0, n = this->account_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->account_ids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCPlayerInfo.RegionLeaderboard)
}

::google::protobuf::uint8* CMsgGCPlayerInfo_RegionLeaderboard::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCPlayerInfo.RegionLeaderboard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 division = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->division(), target);
  }

  // repeated uint32 account_ids = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(2, this->account_ids_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCPlayerInfo.RegionLeaderboard)
  return target;
}

size_t CMsgGCPlayerInfo_RegionLeaderboard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCPlayerInfo.RegionLeaderboard)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 account_ids = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->account_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->account_ids_size());
    total_size += data_size;
  }

  // optional uint32 division = 1;
  if (has_division()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->division());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCPlayerInfo_RegionLeaderboard::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCPlayerInfo.RegionLeaderboard)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCPlayerInfo_RegionLeaderboard* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCPlayerInfo_RegionLeaderboard>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCPlayerInfo.RegionLeaderboard)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCPlayerInfo.RegionLeaderboard)
    MergeFrom(*source);
  }
}

void CMsgGCPlayerInfo_RegionLeaderboard::MergeFrom(const CMsgGCPlayerInfo_RegionLeaderboard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCPlayerInfo.RegionLeaderboard)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  account_ids_.MergeFrom(from.account_ids_);
  if (from.has_division()) {
    set_division(from.division());
  }
}

void CMsgGCPlayerInfo_RegionLeaderboard::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCPlayerInfo.RegionLeaderboard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCPlayerInfo_RegionLeaderboard::CopyFrom(const CMsgGCPlayerInfo_RegionLeaderboard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCPlayerInfo.RegionLeaderboard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCPlayerInfo_RegionLeaderboard::IsInitialized() const {
  return true;
}

void CMsgGCPlayerInfo_RegionLeaderboard::Swap(CMsgGCPlayerInfo_RegionLeaderboard* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCPlayerInfo_RegionLeaderboard::InternalSwap(CMsgGCPlayerInfo_RegionLeaderboard* other) {
  account_ids_.InternalSwap(&other->account_ids_);
  std::swap(division_, other->division_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCPlayerInfo_RegionLeaderboard::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCPlayerInfo_RegionLeaderboard

// optional uint32 division = 1;
bool CMsgGCPlayerInfo_RegionLeaderboard::has_division() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCPlayerInfo_RegionLeaderboard::set_has_division() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCPlayerInfo_RegionLeaderboard::clear_has_division() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCPlayerInfo_RegionLeaderboard::clear_division() {
  division_ = 0u;
  clear_has_division();
}
::google::protobuf::uint32 CMsgGCPlayerInfo_RegionLeaderboard::division() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCPlayerInfo.RegionLeaderboard.division)
  return division_;
}
void CMsgGCPlayerInfo_RegionLeaderboard::set_division(::google::protobuf::uint32 value) {
  set_has_division();
  division_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCPlayerInfo.RegionLeaderboard.division)
}

// repeated uint32 account_ids = 2;
int CMsgGCPlayerInfo_RegionLeaderboard::account_ids_size() const {
  return account_ids_.size();
}
void CMsgGCPlayerInfo_RegionLeaderboard::clear_account_ids() {
  account_ids_.Clear();
}
::google::protobuf::uint32 CMsgGCPlayerInfo_RegionLeaderboard::account_ids(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCPlayerInfo.RegionLeaderboard.account_ids)
  return account_ids_.Get(index);
}
void CMsgGCPlayerInfo_RegionLeaderboard::set_account_ids(int index, ::google::protobuf::uint32 value) {
  account_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCPlayerInfo.RegionLeaderboard.account_ids)
}
void CMsgGCPlayerInfo_RegionLeaderboard::add_account_ids(::google::protobuf::uint32 value) {
  account_ids_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgGCPlayerInfo.RegionLeaderboard.account_ids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgGCPlayerInfo_RegionLeaderboard::account_ids() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgGCPlayerInfo.RegionLeaderboard.account_ids)
  return account_ids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgGCPlayerInfo_RegionLeaderboard::mutable_account_ids() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgGCPlayerInfo.RegionLeaderboard.account_ids)
  return &account_ids_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCPlayerInfo::kPlayerInfosFieldNumber;
const int CMsgGCPlayerInfo::kLeaderboardsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCPlayerInfo::CMsgGCPlayerInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCPlayerInfo)
}
CMsgGCPlayerInfo::CMsgGCPlayerInfo(const CMsgGCPlayerInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      player_infos_(from.player_infos_),
      leaderboards_(from.leaderboards_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCPlayerInfo)
}

void CMsgGCPlayerInfo::SharedCtor() {
  _cached_size_ = 0;
}

CMsgGCPlayerInfo::~CMsgGCPlayerInfo() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCPlayerInfo)
  SharedDtor();
}

void CMsgGCPlayerInfo::SharedDtor() {
}

void CMsgGCPlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCPlayerInfo::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCPlayerInfo& CMsgGCPlayerInfo::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCPlayerInfo* CMsgGCPlayerInfo::New(::google::protobuf::Arena* arena) const {
  CMsgGCPlayerInfo* n = new CMsgGCPlayerInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCPlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCPlayerInfo)
  player_infos_.Clear();
  leaderboards_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCPlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCPlayerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgGCPlayerInfo.PlayerInfo player_infos = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_infos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgGCPlayerInfo.RegionLeaderboard leaderboards = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_leaderboards()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCPlayerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCPlayerInfo)
  return false;
#undef DO_
}

void CMsgGCPlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCPlayerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgGCPlayerInfo.PlayerInfo player_infos = 1;
  for (unsigned int i = 0, n = this->player_infos_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->player_infos(i), output);
  }

  // repeated .proto.dota.CMsgGCPlayerInfo.RegionLeaderboard leaderboards = 2;
  for (unsigned int i = 0, n = this->leaderboards_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->leaderboards(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCPlayerInfo)
}

::google::protobuf::uint8* CMsgGCPlayerInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCPlayerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgGCPlayerInfo.PlayerInfo player_infos = 1;
  for (unsigned int i = 0, n = this->player_infos_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->player_infos(i), deterministic, target);
  }

  // repeated .proto.dota.CMsgGCPlayerInfo.RegionLeaderboard leaderboards = 2;
  for (unsigned int i = 0, n = this->leaderboards_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->leaderboards(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCPlayerInfo)
  return target;
}

size_t CMsgGCPlayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCPlayerInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgGCPlayerInfo.PlayerInfo player_infos = 1;
  {
    unsigned int count = this->player_infos_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_infos(i));
    }
  }

  // repeated .proto.dota.CMsgGCPlayerInfo.RegionLeaderboard leaderboards = 2;
  {
    unsigned int count = this->leaderboards_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->leaderboards(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCPlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCPlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCPlayerInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCPlayerInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCPlayerInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCPlayerInfo)
    MergeFrom(*source);
  }
}

void CMsgGCPlayerInfo::MergeFrom(const CMsgGCPlayerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCPlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_infos_.MergeFrom(from.player_infos_);
  leaderboards_.MergeFrom(from.leaderboards_);
}

void CMsgGCPlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCPlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCPlayerInfo::CopyFrom(const CMsgGCPlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCPlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCPlayerInfo::IsInitialized() const {
  return true;
}

void CMsgGCPlayerInfo::Swap(CMsgGCPlayerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCPlayerInfo::InternalSwap(CMsgGCPlayerInfo* other) {
  player_infos_.InternalSwap(&other->player_infos_);
  leaderboards_.InternalSwap(&other->leaderboards_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCPlayerInfo::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCPlayerInfo

// repeated .proto.dota.CMsgGCPlayerInfo.PlayerInfo player_infos = 1;
int CMsgGCPlayerInfo::player_infos_size() const {
  return player_infos_.size();
}
void CMsgGCPlayerInfo::clear_player_infos() {
  player_infos_.Clear();
}
const ::proto::dota::CMsgGCPlayerInfo_PlayerInfo& CMsgGCPlayerInfo::player_infos(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCPlayerInfo.player_infos)
  return player_infos_.Get(index);
}
::proto::dota::CMsgGCPlayerInfo_PlayerInfo* CMsgGCPlayerInfo::mutable_player_infos(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGCPlayerInfo.player_infos)
  return player_infos_.Mutable(index);
}
::proto::dota::CMsgGCPlayerInfo_PlayerInfo* CMsgGCPlayerInfo::add_player_infos() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgGCPlayerInfo.player_infos)
  return player_infos_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgGCPlayerInfo_PlayerInfo >*
CMsgGCPlayerInfo::mutable_player_infos() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgGCPlayerInfo.player_infos)
  return &player_infos_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgGCPlayerInfo_PlayerInfo >&
CMsgGCPlayerInfo::player_infos() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgGCPlayerInfo.player_infos)
  return player_infos_;
}

// repeated .proto.dota.CMsgGCPlayerInfo.RegionLeaderboard leaderboards = 2;
int CMsgGCPlayerInfo::leaderboards_size() const {
  return leaderboards_.size();
}
void CMsgGCPlayerInfo::clear_leaderboards() {
  leaderboards_.Clear();
}
const ::proto::dota::CMsgGCPlayerInfo_RegionLeaderboard& CMsgGCPlayerInfo::leaderboards(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCPlayerInfo.leaderboards)
  return leaderboards_.Get(index);
}
::proto::dota::CMsgGCPlayerInfo_RegionLeaderboard* CMsgGCPlayerInfo::mutable_leaderboards(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGCPlayerInfo.leaderboards)
  return leaderboards_.Mutable(index);
}
::proto::dota::CMsgGCPlayerInfo_RegionLeaderboard* CMsgGCPlayerInfo::add_leaderboards() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgGCPlayerInfo.leaderboards)
  return leaderboards_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgGCPlayerInfo_RegionLeaderboard >*
CMsgGCPlayerInfo::mutable_leaderboards() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgGCPlayerInfo.leaderboards)
  return &leaderboards_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgGCPlayerInfo_RegionLeaderboard >&
CMsgGCPlayerInfo::leaderboards() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgGCPlayerInfo.leaderboards)
  return leaderboards_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTACreateFantasyLeagueRequest::kLeagueNameFieldNumber;
const int CMsgDOTACreateFantasyLeagueRequest::kLeagueLogoFieldNumber;
const int CMsgDOTACreateFantasyLeagueRequest::kSelectionModeFieldNumber;
const int CMsgDOTACreateFantasyLeagueRequest::kTeamCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTACreateFantasyLeagueRequest::CMsgDOTACreateFantasyLeagueRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTACreateFantasyLeagueRequest)
}
CMsgDOTACreateFantasyLeagueRequest::CMsgDOTACreateFantasyLeagueRequest(const CMsgDOTACreateFantasyLeagueRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  league_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_league_name()) {
    league_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.league_name_);
  }
  ::memcpy(&league_logo_, &from.league_logo_,
    reinterpret_cast<char*>(&team_count_) -
    reinterpret_cast<char*>(&league_logo_) + sizeof(team_count_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTACreateFantasyLeagueRequest)
}

void CMsgDOTACreateFantasyLeagueRequest::SharedCtor() {
  _cached_size_ = 0;
  league_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&league_logo_, 0, reinterpret_cast<char*>(&team_count_) -
    reinterpret_cast<char*>(&league_logo_) + sizeof(team_count_));
}

CMsgDOTACreateFantasyLeagueRequest::~CMsgDOTACreateFantasyLeagueRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTACreateFantasyLeagueRequest)
  SharedDtor();
}

void CMsgDOTACreateFantasyLeagueRequest::SharedDtor() {
  league_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTACreateFantasyLeagueRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTACreateFantasyLeagueRequest::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTACreateFantasyLeagueRequest& CMsgDOTACreateFantasyLeagueRequest::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTACreateFantasyLeagueRequest* CMsgDOTACreateFantasyLeagueRequest::New(::google::protobuf::Arena* arena) const {
  CMsgDOTACreateFantasyLeagueRequest* n = new CMsgDOTACreateFantasyLeagueRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTACreateFantasyLeagueRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTACreateFantasyLeagueRequest)
  if (has_league_name()) {
    GOOGLE_DCHECK(!league_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*league_name_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&league_logo_, 0, reinterpret_cast<char*>(&team_count_) -
      reinterpret_cast<char*>(&league_logo_) + sizeof(team_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTACreateFantasyLeagueRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTACreateFantasyLeagueRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string league_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_league_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->league_name().data(), this->league_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTACreateFantasyLeagueRequest.league_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 league_logo = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_league_logo();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &league_logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.Fantasy_Selection_Mode selection_mode = 3 [default = FANTASY_SELECTION_INVALID];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::Fantasy_Selection_Mode_IsValid(value)) {
            set_selection_mode(static_cast< ::proto::dota::Fantasy_Selection_Mode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team_count = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_team_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTACreateFantasyLeagueRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTACreateFantasyLeagueRequest)
  return false;
#undef DO_
}

void CMsgDOTACreateFantasyLeagueRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTACreateFantasyLeagueRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string league_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->league_name().data(), this->league_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTACreateFantasyLeagueRequest.league_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->league_name(), output);
  }

  // optional uint64 league_logo = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->league_logo(), output);
  }

  // optional .proto.dota.Fantasy_Selection_Mode selection_mode = 3 [default = FANTASY_SELECTION_INVALID];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->selection_mode(), output);
  }

  // optional uint32 team_count = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->team_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTACreateFantasyLeagueRequest)
}

::google::protobuf::uint8* CMsgDOTACreateFantasyLeagueRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTACreateFantasyLeagueRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string league_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->league_name().data(), this->league_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTACreateFantasyLeagueRequest.league_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->league_name(), target);
  }

  // optional uint64 league_logo = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->league_logo(), target);
  }

  // optional .proto.dota.Fantasy_Selection_Mode selection_mode = 3 [default = FANTASY_SELECTION_INVALID];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->selection_mode(), target);
  }

  // optional uint32 team_count = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->team_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTACreateFantasyLeagueRequest)
  return target;
}

size_t CMsgDOTACreateFantasyLeagueRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTACreateFantasyLeagueRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string league_name = 1;
    if (has_league_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->league_name());
    }

    // optional uint64 league_logo = 2;
    if (has_league_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->league_logo());
    }

    // optional .proto.dota.Fantasy_Selection_Mode selection_mode = 3 [default = FANTASY_SELECTION_INVALID];
    if (has_selection_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->selection_mode());
    }

    // optional uint32 team_count = 4;
    if (has_team_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_count());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTACreateFantasyLeagueRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTACreateFantasyLeagueRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTACreateFantasyLeagueRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTACreateFantasyLeagueRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTACreateFantasyLeagueRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTACreateFantasyLeagueRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTACreateFantasyLeagueRequest::MergeFrom(const CMsgDOTACreateFantasyLeagueRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTACreateFantasyLeagueRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_league_name();
      league_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.league_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      league_logo_ = from.league_logo_;
    }
    if (cached_has_bits & 0x00000004u) {
      selection_mode_ = from.selection_mode_;
    }
    if (cached_has_bits & 0x00000008u) {
      team_count_ = from.team_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTACreateFantasyLeagueRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTACreateFantasyLeagueRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTACreateFantasyLeagueRequest::CopyFrom(const CMsgDOTACreateFantasyLeagueRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTACreateFantasyLeagueRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTACreateFantasyLeagueRequest::IsInitialized() const {
  return true;
}

void CMsgDOTACreateFantasyLeagueRequest::Swap(CMsgDOTACreateFantasyLeagueRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTACreateFantasyLeagueRequest::InternalSwap(CMsgDOTACreateFantasyLeagueRequest* other) {
  league_name_.Swap(&other->league_name_);
  std::swap(league_logo_, other->league_logo_);
  std::swap(selection_mode_, other->selection_mode_);
  std::swap(team_count_, other->team_count_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTACreateFantasyLeagueRequest::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTACreateFantasyLeagueRequest

// optional string league_name = 1;
bool CMsgDOTACreateFantasyLeagueRequest::has_league_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTACreateFantasyLeagueRequest::set_has_league_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTACreateFantasyLeagueRequest::clear_has_league_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTACreateFantasyLeagueRequest::clear_league_name() {
  league_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_league_name();
}
const ::std::string& CMsgDOTACreateFantasyLeagueRequest::league_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACreateFantasyLeagueRequest.league_name)
  return league_name_.GetNoArena();
}
void CMsgDOTACreateFantasyLeagueRequest::set_league_name(const ::std::string& value) {
  set_has_league_name();
  league_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACreateFantasyLeagueRequest.league_name)
}
#if LANG_CXX11
void CMsgDOTACreateFantasyLeagueRequest::set_league_name(::std::string&& value) {
  set_has_league_name();
  league_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTACreateFantasyLeagueRequest.league_name)
}
#endif
void CMsgDOTACreateFantasyLeagueRequest::set_league_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_league_name();
  league_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTACreateFantasyLeagueRequest.league_name)
}
void CMsgDOTACreateFantasyLeagueRequest::set_league_name(const char* value, size_t size) {
  set_has_league_name();
  league_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTACreateFantasyLeagueRequest.league_name)
}
::std::string* CMsgDOTACreateFantasyLeagueRequest::mutable_league_name() {
  set_has_league_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTACreateFantasyLeagueRequest.league_name)
  return league_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTACreateFantasyLeagueRequest::release_league_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTACreateFantasyLeagueRequest.league_name)
  clear_has_league_name();
  return league_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTACreateFantasyLeagueRequest::set_allocated_league_name(::std::string* league_name) {
  if (league_name != NULL) {
    set_has_league_name();
  } else {
    clear_has_league_name();
  }
  league_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), league_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTACreateFantasyLeagueRequest.league_name)
}

// optional uint64 league_logo = 2;
bool CMsgDOTACreateFantasyLeagueRequest::has_league_logo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTACreateFantasyLeagueRequest::set_has_league_logo() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTACreateFantasyLeagueRequest::clear_has_league_logo() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTACreateFantasyLeagueRequest::clear_league_logo() {
  league_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_league_logo();
}
::google::protobuf::uint64 CMsgDOTACreateFantasyLeagueRequest::league_logo() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACreateFantasyLeagueRequest.league_logo)
  return league_logo_;
}
void CMsgDOTACreateFantasyLeagueRequest::set_league_logo(::google::protobuf::uint64 value) {
  set_has_league_logo();
  league_logo_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACreateFantasyLeagueRequest.league_logo)
}

// optional .proto.dota.Fantasy_Selection_Mode selection_mode = 3 [default = FANTASY_SELECTION_INVALID];
bool CMsgDOTACreateFantasyLeagueRequest::has_selection_mode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTACreateFantasyLeagueRequest::set_has_selection_mode() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTACreateFantasyLeagueRequest::clear_has_selection_mode() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTACreateFantasyLeagueRequest::clear_selection_mode() {
  selection_mode_ = 0;
  clear_has_selection_mode();
}
::proto::dota::Fantasy_Selection_Mode CMsgDOTACreateFantasyLeagueRequest::selection_mode() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACreateFantasyLeagueRequest.selection_mode)
  return static_cast< ::proto::dota::Fantasy_Selection_Mode >(selection_mode_);
}
void CMsgDOTACreateFantasyLeagueRequest::set_selection_mode(::proto::dota::Fantasy_Selection_Mode value) {
  assert(::proto::dota::Fantasy_Selection_Mode_IsValid(value));
  set_has_selection_mode();
  selection_mode_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACreateFantasyLeagueRequest.selection_mode)
}

// optional uint32 team_count = 4;
bool CMsgDOTACreateFantasyLeagueRequest::has_team_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTACreateFantasyLeagueRequest::set_has_team_count() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTACreateFantasyLeagueRequest::clear_has_team_count() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTACreateFantasyLeagueRequest::clear_team_count() {
  team_count_ = 0u;
  clear_has_team_count();
}
::google::protobuf::uint32 CMsgDOTACreateFantasyLeagueRequest::team_count() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACreateFantasyLeagueRequest.team_count)
  return team_count_;
}
void CMsgDOTACreateFantasyLeagueRequest::set_team_count(::google::protobuf::uint32 value) {
  set_has_team_count();
  team_count_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACreateFantasyLeagueRequest.team_count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTACreateFantasyLeagueResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTACreateFantasyLeagueResponse::CMsgDOTACreateFantasyLeagueResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTACreateFantasyLeagueResponse)
}
CMsgDOTACreateFantasyLeagueResponse::CMsgDOTACreateFantasyLeagueResponse(const CMsgDOTACreateFantasyLeagueResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTACreateFantasyLeagueResponse)
}

void CMsgDOTACreateFantasyLeagueResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
}

CMsgDOTACreateFantasyLeagueResponse::~CMsgDOTACreateFantasyLeagueResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTACreateFantasyLeagueResponse)
  SharedDtor();
}

void CMsgDOTACreateFantasyLeagueResponse::SharedDtor() {
}

void CMsgDOTACreateFantasyLeagueResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTACreateFantasyLeagueResponse::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTACreateFantasyLeagueResponse& CMsgDOTACreateFantasyLeagueResponse::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTACreateFantasyLeagueResponse* CMsgDOTACreateFantasyLeagueResponse::New(::google::protobuf::Arena* arena) const {
  CMsgDOTACreateFantasyLeagueResponse* n = new CMsgDOTACreateFantasyLeagueResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTACreateFantasyLeagueResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTACreateFantasyLeagueResponse)
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTACreateFantasyLeagueResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTACreateFantasyLeagueResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgDOTACreateFantasyLeagueResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgDOTACreateFantasyLeagueResponse_EResult_IsValid(value)) {
            set_result(static_cast< ::proto::dota::CMsgDOTACreateFantasyLeagueResponse_EResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTACreateFantasyLeagueResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTACreateFantasyLeagueResponse)
  return false;
#undef DO_
}

void CMsgDOTACreateFantasyLeagueResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTACreateFantasyLeagueResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTACreateFantasyLeagueResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTACreateFantasyLeagueResponse)
}

::google::protobuf::uint8* CMsgDOTACreateFantasyLeagueResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTACreateFantasyLeagueResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTACreateFantasyLeagueResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTACreateFantasyLeagueResponse)
  return target;
}

size_t CMsgDOTACreateFantasyLeagueResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTACreateFantasyLeagueResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .proto.dota.CMsgDOTACreateFantasyLeagueResponse.EResult result = 1 [default = SUCCESS];
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTACreateFantasyLeagueResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTACreateFantasyLeagueResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTACreateFantasyLeagueResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTACreateFantasyLeagueResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTACreateFantasyLeagueResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTACreateFantasyLeagueResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTACreateFantasyLeagueResponse::MergeFrom(const CMsgDOTACreateFantasyLeagueResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTACreateFantasyLeagueResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void CMsgDOTACreateFantasyLeagueResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTACreateFantasyLeagueResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTACreateFantasyLeagueResponse::CopyFrom(const CMsgDOTACreateFantasyLeagueResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTACreateFantasyLeagueResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTACreateFantasyLeagueResponse::IsInitialized() const {
  return true;
}

void CMsgDOTACreateFantasyLeagueResponse::Swap(CMsgDOTACreateFantasyLeagueResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTACreateFantasyLeagueResponse::InternalSwap(CMsgDOTACreateFantasyLeagueResponse* other) {
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTACreateFantasyLeagueResponse::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTACreateFantasyLeagueResponse

// optional .proto.dota.CMsgDOTACreateFantasyLeagueResponse.EResult result = 1 [default = SUCCESS];
bool CMsgDOTACreateFantasyLeagueResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTACreateFantasyLeagueResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTACreateFantasyLeagueResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTACreateFantasyLeagueResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
::proto::dota::CMsgDOTACreateFantasyLeagueResponse_EResult CMsgDOTACreateFantasyLeagueResponse::result() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACreateFantasyLeagueResponse.result)
  return static_cast< ::proto::dota::CMsgDOTACreateFantasyLeagueResponse_EResult >(result_);
}
void CMsgDOTACreateFantasyLeagueResponse::set_result(::proto::dota::CMsgDOTACreateFantasyLeagueResponse_EResult value) {
  assert(::proto::dota::CMsgDOTACreateFantasyLeagueResponse_EResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACreateFantasyLeagueResponse.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgFantasyLeagueScoring::kLevelFieldNumber;
const int CMsgFantasyLeagueScoring::kKillsFieldNumber;
const int CMsgFantasyLeagueScoring::kDeathsFieldNumber;
const int CMsgFantasyLeagueScoring::kAssistsFieldNumber;
const int CMsgFantasyLeagueScoring::kLastHitsFieldNumber;
const int CMsgFantasyLeagueScoring::kDeniesFieldNumber;
const int CMsgFantasyLeagueScoring::kGpmFieldNumber;
const int CMsgFantasyLeagueScoring::kXppmFieldNumber;
const int CMsgFantasyLeagueScoring::kStunsFieldNumber;
const int CMsgFantasyLeagueScoring::kHealingFieldNumber;
const int CMsgFantasyLeagueScoring::kTowerKillsFieldNumber;
const int CMsgFantasyLeagueScoring::kRoshanKillsFieldNumber;
const int CMsgFantasyLeagueScoring::kMultiplierPremiumFieldNumber;
const int CMsgFantasyLeagueScoring::kMultiplierProfessionalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgFantasyLeagueScoring::CMsgFantasyLeagueScoring()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgFantasyLeagueScoring)
}
CMsgFantasyLeagueScoring::CMsgFantasyLeagueScoring(const CMsgFantasyLeagueScoring& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&level_, &from.level_,
    reinterpret_cast<char*>(&multiplier_professional_) -
    reinterpret_cast<char*>(&level_) + sizeof(multiplier_professional_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgFantasyLeagueScoring)
}

void CMsgFantasyLeagueScoring::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&level_, 0, reinterpret_cast<char*>(&multiplier_professional_) -
    reinterpret_cast<char*>(&level_) + sizeof(multiplier_professional_));
}

CMsgFantasyLeagueScoring::~CMsgFantasyLeagueScoring() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgFantasyLeagueScoring)
  SharedDtor();
}

void CMsgFantasyLeagueScoring::SharedDtor() {
}

void CMsgFantasyLeagueScoring::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgFantasyLeagueScoring::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgFantasyLeagueScoring& CMsgFantasyLeagueScoring::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgFantasyLeagueScoring* CMsgFantasyLeagueScoring::New(::google::protobuf::Arena* arena) const {
  CMsgFantasyLeagueScoring* n = new CMsgFantasyLeagueScoring;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgFantasyLeagueScoring::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgFantasyLeagueScoring)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&level_, 0, reinterpret_cast<char*>(&xppm_) -
      reinterpret_cast<char*>(&level_) + sizeof(xppm_));
  }
  if (_has_bits_[8 / 32] & 16128u) {
    ::memset(&stuns_, 0, reinterpret_cast<char*>(&multiplier_professional_) -
      reinterpret_cast<char*>(&stuns_) + sizeof(multiplier_professional_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgFantasyLeagueScoring::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgFantasyLeagueScoring)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float level = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {
          set_has_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float kills = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_kills();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &kills_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float deaths = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_deaths();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &deaths_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float assists = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_assists();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &assists_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float last_hits = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {
          set_has_last_hits();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &last_hits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float denies = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u)) {
          set_has_denies();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &denies_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float gpm = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u)) {
          set_has_gpm();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gpm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float xppm = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u)) {
          set_has_xppm();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &xppm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float stuns = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u)) {
          set_has_stuns();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &stuns_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float healing = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u)) {
          set_has_healing();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &healing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float tower_kills = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u)) {
          set_has_tower_kills();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tower_kills_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float roshan_kills = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u)) {
          set_has_roshan_kills();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &roshan_kills_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float multiplier_premium = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u)) {
          set_has_multiplier_premium();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &multiplier_premium_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float multiplier_professional = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u)) {
          set_has_multiplier_professional();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &multiplier_professional_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgFantasyLeagueScoring)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgFantasyLeagueScoring)
  return false;
#undef DO_
}

void CMsgFantasyLeagueScoring::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgFantasyLeagueScoring)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float level = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->level(), output);
  }

  // optional float kills = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->kills(), output);
  }

  // optional float deaths = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->deaths(), output);
  }

  // optional float assists = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->assists(), output);
  }

  // optional float last_hits = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->last_hits(), output);
  }

  // optional float denies = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->denies(), output);
  }

  // optional float gpm = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->gpm(), output);
  }

  // optional float xppm = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->xppm(), output);
  }

  // optional float stuns = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->stuns(), output);
  }

  // optional float healing = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->healing(), output);
  }

  // optional float tower_kills = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->tower_kills(), output);
  }

  // optional float roshan_kills = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->roshan_kills(), output);
  }

  // optional float multiplier_premium = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->multiplier_premium(), output);
  }

  // optional float multiplier_professional = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->multiplier_professional(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgFantasyLeagueScoring)
}

::google::protobuf::uint8* CMsgFantasyLeagueScoring::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgFantasyLeagueScoring)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float level = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->level(), target);
  }

  // optional float kills = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->kills(), target);
  }

  // optional float deaths = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->deaths(), target);
  }

  // optional float assists = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->assists(), target);
  }

  // optional float last_hits = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->last_hits(), target);
  }

  // optional float denies = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->denies(), target);
  }

  // optional float gpm = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->gpm(), target);
  }

  // optional float xppm = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->xppm(), target);
  }

  // optional float stuns = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->stuns(), target);
  }

  // optional float healing = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->healing(), target);
  }

  // optional float tower_kills = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->tower_kills(), target);
  }

  // optional float roshan_kills = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->roshan_kills(), target);
  }

  // optional float multiplier_premium = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->multiplier_premium(), target);
  }

  // optional float multiplier_professional = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->multiplier_professional(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgFantasyLeagueScoring)
  return target;
}

size_t CMsgFantasyLeagueScoring::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgFantasyLeagueScoring)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional float level = 1;
    if (has_level()) {
      total_size += 1 + 4;
    }

    // optional float kills = 2;
    if (has_kills()) {
      total_size += 1 + 4;
    }

    // optional float deaths = 3;
    if (has_deaths()) {
      total_size += 1 + 4;
    }

    // optional float assists = 4;
    if (has_assists()) {
      total_size += 1 + 4;
    }

    // optional float last_hits = 5;
    if (has_last_hits()) {
      total_size += 1 + 4;
    }

    // optional float denies = 6;
    if (has_denies()) {
      total_size += 1 + 4;
    }

    // optional float gpm = 7;
    if (has_gpm()) {
      total_size += 1 + 4;
    }

    // optional float xppm = 8;
    if (has_xppm()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & 16128u) {
    // optional float stuns = 9;
    if (has_stuns()) {
      total_size += 1 + 4;
    }

    // optional float healing = 10;
    if (has_healing()) {
      total_size += 1 + 4;
    }

    // optional float tower_kills = 11;
    if (has_tower_kills()) {
      total_size += 1 + 4;
    }

    // optional float roshan_kills = 12;
    if (has_roshan_kills()) {
      total_size += 1 + 4;
    }

    // optional float multiplier_premium = 13;
    if (has_multiplier_premium()) {
      total_size += 1 + 4;
    }

    // optional float multiplier_professional = 14;
    if (has_multiplier_professional()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgFantasyLeagueScoring::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgFantasyLeagueScoring)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgFantasyLeagueScoring* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgFantasyLeagueScoring>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgFantasyLeagueScoring)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgFantasyLeagueScoring)
    MergeFrom(*source);
  }
}

void CMsgFantasyLeagueScoring::MergeFrom(const CMsgFantasyLeagueScoring& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgFantasyLeagueScoring)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000002u) {
      kills_ = from.kills_;
    }
    if (cached_has_bits & 0x00000004u) {
      deaths_ = from.deaths_;
    }
    if (cached_has_bits & 0x00000008u) {
      assists_ = from.assists_;
    }
    if (cached_has_bits & 0x00000010u) {
      last_hits_ = from.last_hits_;
    }
    if (cached_has_bits & 0x00000020u) {
      denies_ = from.denies_;
    }
    if (cached_has_bits & 0x00000040u) {
      gpm_ = from.gpm_;
    }
    if (cached_has_bits & 0x00000080u) {
      xppm_ = from.xppm_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16128u) {
    if (cached_has_bits & 0x00000100u) {
      stuns_ = from.stuns_;
    }
    if (cached_has_bits & 0x00000200u) {
      healing_ = from.healing_;
    }
    if (cached_has_bits & 0x00000400u) {
      tower_kills_ = from.tower_kills_;
    }
    if (cached_has_bits & 0x00000800u) {
      roshan_kills_ = from.roshan_kills_;
    }
    if (cached_has_bits & 0x00001000u) {
      multiplier_premium_ = from.multiplier_premium_;
    }
    if (cached_has_bits & 0x00002000u) {
      multiplier_professional_ = from.multiplier_professional_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgFantasyLeagueScoring::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgFantasyLeagueScoring)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgFantasyLeagueScoring::CopyFrom(const CMsgFantasyLeagueScoring& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgFantasyLeagueScoring)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgFantasyLeagueScoring::IsInitialized() const {
  return true;
}

void CMsgFantasyLeagueScoring::Swap(CMsgFantasyLeagueScoring* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgFantasyLeagueScoring::InternalSwap(CMsgFantasyLeagueScoring* other) {
  std::swap(level_, other->level_);
  std::swap(kills_, other->kills_);
  std::swap(deaths_, other->deaths_);
  std::swap(assists_, other->assists_);
  std::swap(last_hits_, other->last_hits_);
  std::swap(denies_, other->denies_);
  std::swap(gpm_, other->gpm_);
  std::swap(xppm_, other->xppm_);
  std::swap(stuns_, other->stuns_);
  std::swap(healing_, other->healing_);
  std::swap(tower_kills_, other->tower_kills_);
  std::swap(roshan_kills_, other->roshan_kills_);
  std::swap(multiplier_premium_, other->multiplier_premium_);
  std::swap(multiplier_professional_, other->multiplier_professional_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgFantasyLeagueScoring::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgFantasyLeagueScoring

// optional float level = 1;
bool CMsgFantasyLeagueScoring::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgFantasyLeagueScoring::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgFantasyLeagueScoring::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgFantasyLeagueScoring::clear_level() {
  level_ = 0;
  clear_has_level();
}
float CMsgFantasyLeagueScoring::level() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgFantasyLeagueScoring.level)
  return level_;
}
void CMsgFantasyLeagueScoring::set_level(float value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgFantasyLeagueScoring.level)
}

// optional float kills = 2;
bool CMsgFantasyLeagueScoring::has_kills() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgFantasyLeagueScoring::set_has_kills() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgFantasyLeagueScoring::clear_has_kills() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgFantasyLeagueScoring::clear_kills() {
  kills_ = 0;
  clear_has_kills();
}
float CMsgFantasyLeagueScoring::kills() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgFantasyLeagueScoring.kills)
  return kills_;
}
void CMsgFantasyLeagueScoring::set_kills(float value) {
  set_has_kills();
  kills_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgFantasyLeagueScoring.kills)
}

// optional float deaths = 3;
bool CMsgFantasyLeagueScoring::has_deaths() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgFantasyLeagueScoring::set_has_deaths() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgFantasyLeagueScoring::clear_has_deaths() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgFantasyLeagueScoring::clear_deaths() {
  deaths_ = 0;
  clear_has_deaths();
}
float CMsgFantasyLeagueScoring::deaths() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgFantasyLeagueScoring.deaths)
  return deaths_;
}
void CMsgFantasyLeagueScoring::set_deaths(float value) {
  set_has_deaths();
  deaths_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgFantasyLeagueScoring.deaths)
}

// optional float assists = 4;
bool CMsgFantasyLeagueScoring::has_assists() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgFantasyLeagueScoring::set_has_assists() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgFantasyLeagueScoring::clear_has_assists() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgFantasyLeagueScoring::clear_assists() {
  assists_ = 0;
  clear_has_assists();
}
float CMsgFantasyLeagueScoring::assists() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgFantasyLeagueScoring.assists)
  return assists_;
}
void CMsgFantasyLeagueScoring::set_assists(float value) {
  set_has_assists();
  assists_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgFantasyLeagueScoring.assists)
}

// optional float last_hits = 5;
bool CMsgFantasyLeagueScoring::has_last_hits() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgFantasyLeagueScoring::set_has_last_hits() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgFantasyLeagueScoring::clear_has_last_hits() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgFantasyLeagueScoring::clear_last_hits() {
  last_hits_ = 0;
  clear_has_last_hits();
}
float CMsgFantasyLeagueScoring::last_hits() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgFantasyLeagueScoring.last_hits)
  return last_hits_;
}
void CMsgFantasyLeagueScoring::set_last_hits(float value) {
  set_has_last_hits();
  last_hits_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgFantasyLeagueScoring.last_hits)
}

// optional float denies = 6;
bool CMsgFantasyLeagueScoring::has_denies() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgFantasyLeagueScoring::set_has_denies() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgFantasyLeagueScoring::clear_has_denies() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgFantasyLeagueScoring::clear_denies() {
  denies_ = 0;
  clear_has_denies();
}
float CMsgFantasyLeagueScoring::denies() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgFantasyLeagueScoring.denies)
  return denies_;
}
void CMsgFantasyLeagueScoring::set_denies(float value) {
  set_has_denies();
  denies_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgFantasyLeagueScoring.denies)
}

// optional float gpm = 7;
bool CMsgFantasyLeagueScoring::has_gpm() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgFantasyLeagueScoring::set_has_gpm() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgFantasyLeagueScoring::clear_has_gpm() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgFantasyLeagueScoring::clear_gpm() {
  gpm_ = 0;
  clear_has_gpm();
}
float CMsgFantasyLeagueScoring::gpm() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgFantasyLeagueScoring.gpm)
  return gpm_;
}
void CMsgFantasyLeagueScoring::set_gpm(float value) {
  set_has_gpm();
  gpm_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgFantasyLeagueScoring.gpm)
}

// optional float xppm = 8;
bool CMsgFantasyLeagueScoring::has_xppm() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgFantasyLeagueScoring::set_has_xppm() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgFantasyLeagueScoring::clear_has_xppm() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgFantasyLeagueScoring::clear_xppm() {
  xppm_ = 0;
  clear_has_xppm();
}
float CMsgFantasyLeagueScoring::xppm() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgFantasyLeagueScoring.xppm)
  return xppm_;
}
void CMsgFantasyLeagueScoring::set_xppm(float value) {
  set_has_xppm();
  xppm_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgFantasyLeagueScoring.xppm)
}

// optional float stuns = 9;
bool CMsgFantasyLeagueScoring::has_stuns() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CMsgFantasyLeagueScoring::set_has_stuns() {
  _has_bits_[0] |= 0x00000100u;
}
void CMsgFantasyLeagueScoring::clear_has_stuns() {
  _has_bits_[0] &= ~0x00000100u;
}
void CMsgFantasyLeagueScoring::clear_stuns() {
  stuns_ = 0;
  clear_has_stuns();
}
float CMsgFantasyLeagueScoring::stuns() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgFantasyLeagueScoring.stuns)
  return stuns_;
}
void CMsgFantasyLeagueScoring::set_stuns(float value) {
  set_has_stuns();
  stuns_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgFantasyLeagueScoring.stuns)
}

// optional float healing = 10;
bool CMsgFantasyLeagueScoring::has_healing() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CMsgFantasyLeagueScoring::set_has_healing() {
  _has_bits_[0] |= 0x00000200u;
}
void CMsgFantasyLeagueScoring::clear_has_healing() {
  _has_bits_[0] &= ~0x00000200u;
}
void CMsgFantasyLeagueScoring::clear_healing() {
  healing_ = 0;
  clear_has_healing();
}
float CMsgFantasyLeagueScoring::healing() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgFantasyLeagueScoring.healing)
  return healing_;
}
void CMsgFantasyLeagueScoring::set_healing(float value) {
  set_has_healing();
  healing_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgFantasyLeagueScoring.healing)
}

// optional float tower_kills = 11;
bool CMsgFantasyLeagueScoring::has_tower_kills() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CMsgFantasyLeagueScoring::set_has_tower_kills() {
  _has_bits_[0] |= 0x00000400u;
}
void CMsgFantasyLeagueScoring::clear_has_tower_kills() {
  _has_bits_[0] &= ~0x00000400u;
}
void CMsgFantasyLeagueScoring::clear_tower_kills() {
  tower_kills_ = 0;
  clear_has_tower_kills();
}
float CMsgFantasyLeagueScoring::tower_kills() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgFantasyLeagueScoring.tower_kills)
  return tower_kills_;
}
void CMsgFantasyLeagueScoring::set_tower_kills(float value) {
  set_has_tower_kills();
  tower_kills_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgFantasyLeagueScoring.tower_kills)
}

// optional float roshan_kills = 12;
bool CMsgFantasyLeagueScoring::has_roshan_kills() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CMsgFantasyLeagueScoring::set_has_roshan_kills() {
  _has_bits_[0] |= 0x00000800u;
}
void CMsgFantasyLeagueScoring::clear_has_roshan_kills() {
  _has_bits_[0] &= ~0x00000800u;
}
void CMsgFantasyLeagueScoring::clear_roshan_kills() {
  roshan_kills_ = 0;
  clear_has_roshan_kills();
}
float CMsgFantasyLeagueScoring::roshan_kills() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgFantasyLeagueScoring.roshan_kills)
  return roshan_kills_;
}
void CMsgFantasyLeagueScoring::set_roshan_kills(float value) {
  set_has_roshan_kills();
  roshan_kills_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgFantasyLeagueScoring.roshan_kills)
}

// optional float multiplier_premium = 13;
bool CMsgFantasyLeagueScoring::has_multiplier_premium() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void CMsgFantasyLeagueScoring::set_has_multiplier_premium() {
  _has_bits_[0] |= 0x00001000u;
}
void CMsgFantasyLeagueScoring::clear_has_multiplier_premium() {
  _has_bits_[0] &= ~0x00001000u;
}
void CMsgFantasyLeagueScoring::clear_multiplier_premium() {
  multiplier_premium_ = 0;
  clear_has_multiplier_premium();
}
float CMsgFantasyLeagueScoring::multiplier_premium() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgFantasyLeagueScoring.multiplier_premium)
  return multiplier_premium_;
}
void CMsgFantasyLeagueScoring::set_multiplier_premium(float value) {
  set_has_multiplier_premium();
  multiplier_premium_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgFantasyLeagueScoring.multiplier_premium)
}

// optional float multiplier_professional = 14;
bool CMsgFantasyLeagueScoring::has_multiplier_professional() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void CMsgFantasyLeagueScoring::set_has_multiplier_professional() {
  _has_bits_[0] |= 0x00002000u;
}
void CMsgFantasyLeagueScoring::clear_has_multiplier_professional() {
  _has_bits_[0] &= ~0x00002000u;
}
void CMsgFantasyLeagueScoring::clear_multiplier_professional() {
  multiplier_professional_ = 0;
  clear_has_multiplier_professional();
}
float CMsgFantasyLeagueScoring::multiplier_professional() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgFantasyLeagueScoring.multiplier_professional)
  return multiplier_professional_;
}
void CMsgFantasyLeagueScoring::set_multiplier_professional(float value) {
  set_has_multiplier_professional();
  multiplier_professional_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgFantasyLeagueScoring.multiplier_professional)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyLeagueInfo_OwnerInfo::kOwnerAccountIdFieldNumber;
const int CMsgDOTAFantasyLeagueInfo_OwnerInfo::kLeftLeagueFieldNumber;
const int CMsgDOTAFantasyLeagueInfo_OwnerInfo::kPlayerAccountIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyLeagueInfo_OwnerInfo::CMsgDOTAFantasyLeagueInfo_OwnerInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyLeagueInfo.OwnerInfo)
}
CMsgDOTAFantasyLeagueInfo_OwnerInfo::CMsgDOTAFantasyLeagueInfo_OwnerInfo(const CMsgDOTAFantasyLeagueInfo_OwnerInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      player_account_id_(from.player_account_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&owner_account_id_, &from.owner_account_id_,
    reinterpret_cast<char*>(&left_league_) -
    reinterpret_cast<char*>(&owner_account_id_) + sizeof(left_league_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyLeagueInfo.OwnerInfo)
}

void CMsgDOTAFantasyLeagueInfo_OwnerInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&owner_account_id_, 0, reinterpret_cast<char*>(&left_league_) -
    reinterpret_cast<char*>(&owner_account_id_) + sizeof(left_league_));
}

CMsgDOTAFantasyLeagueInfo_OwnerInfo::~CMsgDOTAFantasyLeagueInfo_OwnerInfo() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyLeagueInfo.OwnerInfo)
  SharedDtor();
}

void CMsgDOTAFantasyLeagueInfo_OwnerInfo::SharedDtor() {
}

void CMsgDOTAFantasyLeagueInfo_OwnerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyLeagueInfo_OwnerInfo::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAFantasyLeagueInfo_OwnerInfo& CMsgDOTAFantasyLeagueInfo_OwnerInfo::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAFantasyLeagueInfo_OwnerInfo* CMsgDOTAFantasyLeagueInfo_OwnerInfo::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyLeagueInfo_OwnerInfo* n = new CMsgDOTAFantasyLeagueInfo_OwnerInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyLeagueInfo_OwnerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyLeagueInfo.OwnerInfo)
  player_account_id_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&owner_account_id_, 0, reinterpret_cast<char*>(&left_league_) -
      reinterpret_cast<char*>(&owner_account_id_) + sizeof(left_league_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAFantasyLeagueInfo_OwnerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyLeagueInfo.OwnerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 owner_account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_owner_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &owner_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool left_league = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_left_league();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &left_league_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 player_account_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24u, input, this->mutable_player_account_id())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(26u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_player_account_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyLeagueInfo.OwnerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyLeagueInfo.OwnerInfo)
  return false;
#undef DO_
}

void CMsgDOTAFantasyLeagueInfo_OwnerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyLeagueInfo.OwnerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 owner_account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->owner_account_id(), output);
  }

  // optional bool left_league = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->left_league(), output);
  }

  // repeated uint32 player_account_id = 3;
  for (int i = 0, n = this->player_account_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->player_account_id(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyLeagueInfo.OwnerInfo)
}

::google::protobuf::uint8* CMsgDOTAFantasyLeagueInfo_OwnerInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyLeagueInfo.OwnerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 owner_account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->owner_account_id(), target);
  }

  // optional bool left_league = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->left_league(), target);
  }

  // repeated uint32 player_account_id = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(3, this->player_account_id_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyLeagueInfo.OwnerInfo)
  return target;
}

size_t CMsgDOTAFantasyLeagueInfo_OwnerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyLeagueInfo.OwnerInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 player_account_id = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->player_account_id_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->player_account_id_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 owner_account_id = 1;
    if (has_owner_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->owner_account_id());
    }

    // optional bool left_league = 2;
    if (has_left_league()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyLeagueInfo_OwnerInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyLeagueInfo.OwnerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyLeagueInfo_OwnerInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyLeagueInfo_OwnerInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyLeagueInfo.OwnerInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyLeagueInfo.OwnerInfo)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyLeagueInfo_OwnerInfo::MergeFrom(const CMsgDOTAFantasyLeagueInfo_OwnerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyLeagueInfo.OwnerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_account_id_.MergeFrom(from.player_account_id_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      owner_account_id_ = from.owner_account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      left_league_ = from.left_league_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyLeagueInfo_OwnerInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyLeagueInfo.OwnerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyLeagueInfo_OwnerInfo::CopyFrom(const CMsgDOTAFantasyLeagueInfo_OwnerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyLeagueInfo.OwnerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyLeagueInfo_OwnerInfo::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyLeagueInfo_OwnerInfo::Swap(CMsgDOTAFantasyLeagueInfo_OwnerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyLeagueInfo_OwnerInfo::InternalSwap(CMsgDOTAFantasyLeagueInfo_OwnerInfo* other) {
  player_account_id_.InternalSwap(&other->player_account_id_);
  std::swap(owner_account_id_, other->owner_account_id_);
  std::swap(left_league_, other->left_league_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyLeagueInfo_OwnerInfo::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyLeagueInfo_OwnerInfo

// optional uint32 owner_account_id = 1;
bool CMsgDOTAFantasyLeagueInfo_OwnerInfo::has_owner_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyLeagueInfo_OwnerInfo::set_has_owner_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyLeagueInfo_OwnerInfo::clear_has_owner_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyLeagueInfo_OwnerInfo::clear_owner_account_id() {
  owner_account_id_ = 0u;
  clear_has_owner_account_id();
}
::google::protobuf::uint32 CMsgDOTAFantasyLeagueInfo_OwnerInfo::owner_account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyLeagueInfo.OwnerInfo.owner_account_id)
  return owner_account_id_;
}
void CMsgDOTAFantasyLeagueInfo_OwnerInfo::set_owner_account_id(::google::protobuf::uint32 value) {
  set_has_owner_account_id();
  owner_account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyLeagueInfo.OwnerInfo.owner_account_id)
}

// optional bool left_league = 2;
bool CMsgDOTAFantasyLeagueInfo_OwnerInfo::has_left_league() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAFantasyLeagueInfo_OwnerInfo::set_has_left_league() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAFantasyLeagueInfo_OwnerInfo::clear_has_left_league() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAFantasyLeagueInfo_OwnerInfo::clear_left_league() {
  left_league_ = false;
  clear_has_left_league();
}
bool CMsgDOTAFantasyLeagueInfo_OwnerInfo::left_league() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyLeagueInfo.OwnerInfo.left_league)
  return left_league_;
}
void CMsgDOTAFantasyLeagueInfo_OwnerInfo::set_left_league(bool value) {
  set_has_left_league();
  left_league_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyLeagueInfo.OwnerInfo.left_league)
}

// repeated uint32 player_account_id = 3;
int CMsgDOTAFantasyLeagueInfo_OwnerInfo::player_account_id_size() const {
  return player_account_id_.size();
}
void CMsgDOTAFantasyLeagueInfo_OwnerInfo::clear_player_account_id() {
  player_account_id_.Clear();
}
::google::protobuf::uint32 CMsgDOTAFantasyLeagueInfo_OwnerInfo::player_account_id(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyLeagueInfo.OwnerInfo.player_account_id)
  return player_account_id_.Get(index);
}
void CMsgDOTAFantasyLeagueInfo_OwnerInfo::set_player_account_id(int index, ::google::protobuf::uint32 value) {
  player_account_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyLeagueInfo.OwnerInfo.player_account_id)
}
void CMsgDOTAFantasyLeagueInfo_OwnerInfo::add_player_account_id(::google::protobuf::uint32 value) {
  player_account_id_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTAFantasyLeagueInfo.OwnerInfo.player_account_id)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgDOTAFantasyLeagueInfo_OwnerInfo::player_account_id() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTAFantasyLeagueInfo.OwnerInfo.player_account_id)
  return player_account_id_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgDOTAFantasyLeagueInfo_OwnerInfo::mutable_player_account_id() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTAFantasyLeagueInfo.OwnerInfo.player_account_id)
  return &player_account_id_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyLeagueInfo::kFantasyLeagueIdFieldNumber;
const int CMsgDOTAFantasyLeagueInfo::kCommissionerAccountIdFieldNumber;
const int CMsgDOTAFantasyLeagueInfo::kFantasyLeagueNameFieldNumber;
const int CMsgDOTAFantasyLeagueInfo::kSelectionModeFieldNumber;
const int CMsgDOTAFantasyLeagueInfo::kTeamCountFieldNumber;
const int CMsgDOTAFantasyLeagueInfo::kLogoFieldNumber;
const int CMsgDOTAFantasyLeagueInfo::kScoringFieldNumber;
const int CMsgDOTAFantasyLeagueInfo::kDraftTimeFieldNumber;
const int CMsgDOTAFantasyLeagueInfo::kDraftPickTimeFieldNumber;
const int CMsgDOTAFantasyLeagueInfo::kSeasonStartFieldNumber;
const int CMsgDOTAFantasyLeagueInfo::kSeasonLengthFieldNumber;
const int CMsgDOTAFantasyLeagueInfo::kVetoVotesFieldNumber;
const int CMsgDOTAFantasyLeagueInfo::kAcquisitionsFieldNumber;
const int CMsgDOTAFantasyLeagueInfo::kSlot1FieldNumber;
const int CMsgDOTAFantasyLeagueInfo::kSlot2FieldNumber;
const int CMsgDOTAFantasyLeagueInfo::kSlot3FieldNumber;
const int CMsgDOTAFantasyLeagueInfo::kSlot4FieldNumber;
const int CMsgDOTAFantasyLeagueInfo::kSlot5FieldNumber;
const int CMsgDOTAFantasyLeagueInfo::kBenchSlotsFieldNumber;
const int CMsgDOTAFantasyLeagueInfo::kOwnerInfoFieldNumber;
const int CMsgDOTAFantasyLeagueInfo::kPlayersFieldNumber;
const int CMsgDOTAFantasyLeagueInfo::kTimeZoneFieldNumber;
const int CMsgDOTAFantasyLeagueInfo::kSeasonFieldNumber;
const int CMsgDOTAFantasyLeagueInfo::kPasswordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyLeagueInfo::CMsgDOTAFantasyLeagueInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyLeagueInfo)
}
CMsgDOTAFantasyLeagueInfo::CMsgDOTAFantasyLeagueInfo(const CMsgDOTAFantasyLeagueInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      owner_info_(from.owner_info_),
      players_(from.players_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fantasy_league_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fantasy_league_name()) {
    fantasy_league_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fantasy_league_name_);
  }
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_password()) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  if (from.has_scoring()) {
    scoring_ = new ::proto::dota::CMsgFantasyLeagueScoring(*from.scoring_);
  } else {
    scoring_ = NULL;
  }
  ::memcpy(&fantasy_league_id_, &from.fantasy_league_id_,
    reinterpret_cast<char*>(&season_) -
    reinterpret_cast<char*>(&fantasy_league_id_) + sizeof(season_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyLeagueInfo)
}

void CMsgDOTAFantasyLeagueInfo::SharedCtor() {
  _cached_size_ = 0;
  fantasy_league_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&scoring_, 0, reinterpret_cast<char*>(&season_) -
    reinterpret_cast<char*>(&scoring_) + sizeof(season_));
}

CMsgDOTAFantasyLeagueInfo::~CMsgDOTAFantasyLeagueInfo() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyLeagueInfo)
  SharedDtor();
}

void CMsgDOTAFantasyLeagueInfo::SharedDtor() {
  fantasy_league_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete scoring_;
  }
}

void CMsgDOTAFantasyLeagueInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyLeagueInfo::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAFantasyLeagueInfo& CMsgDOTAFantasyLeagueInfo::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAFantasyLeagueInfo* CMsgDOTAFantasyLeagueInfo::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyLeagueInfo* n = new CMsgDOTAFantasyLeagueInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyLeagueInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyLeagueInfo)
  owner_info_.Clear();
  players_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    if (has_fantasy_league_name()) {
      GOOGLE_DCHECK(!fantasy_league_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*fantasy_league_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_password()) {
      GOOGLE_DCHECK(!password_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*password_.UnsafeRawStringPointer())->clear();
    }
    if (has_scoring()) {
      GOOGLE_DCHECK(scoring_ != NULL);
      scoring_->::proto::dota::CMsgFantasyLeagueScoring::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 248u) {
    ::memset(&fantasy_league_id_, 0, reinterpret_cast<char*>(&logo_) -
      reinterpret_cast<char*>(&fantasy_league_id_) + sizeof(logo_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&draft_time_, 0, reinterpret_cast<char*>(&slot_2_) -
      reinterpret_cast<char*>(&draft_time_) + sizeof(slot_2_));
  }
  if (_has_bits_[16 / 32] & 4128768u) {
    ::memset(&slot_3_, 0, reinterpret_cast<char*>(&season_) -
      reinterpret_cast<char*>(&slot_3_) + sizeof(season_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAFantasyLeagueInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyLeagueInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_fantasy_league_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 commissioner_account_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_commissioner_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &commissioner_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string fantasy_league_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fantasy_league_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fantasy_league_name().data(), this->fantasy_league_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAFantasyLeagueInfo.fantasy_league_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.Fantasy_Selection_Mode selection_mode = 4 [default = FANTASY_SELECTION_INVALID];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::Fantasy_Selection_Mode_IsValid(value)) {
            set_selection_mode(static_cast< ::proto::dota::Fantasy_Selection_Mode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team_count = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_team_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 logo = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_logo();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgFantasyLeagueScoring scoring = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scoring()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 draft_time = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_draft_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &draft_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 draft_pick_time = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_draft_pick_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &draft_pick_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 season_start = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          set_has_season_start();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &season_start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 season_length = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u)) {
          set_has_season_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &season_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 veto_votes = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u)) {
          set_has_veto_votes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &veto_votes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 acquisitions = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u)) {
          set_has_acquisitions();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &acquisitions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 slot_1 = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u)) {
          set_has_slot_1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 slot_2 = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u)) {
          set_has_slot_2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 slot_3 = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u)) {
          set_has_slot_3();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 slot_4 = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u)) {
          set_has_slot_4();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_4_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 slot_5 = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u)) {
          set_has_slot_5();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_5_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 bench_slots = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u)) {
          set_has_bench_slots();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bench_slots_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTAFantasyLeagueInfo.OwnerInfo owner_info = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_owner_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 players = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 208u, input, this->mutable_players())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(210u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_players())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time_zone = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u)) {
          set_has_time_zone();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_zone_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 season = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u)) {
          set_has_season();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &season_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string password = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAFantasyLeagueInfo.password");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyLeagueInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyLeagueInfo)
  return false;
#undef DO_
}

void CMsgDOTAFantasyLeagueInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyLeagueInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fantasy_league_id(), output);
  }

  // optional uint32 commissioner_account_id = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->commissioner_account_id(), output);
  }

  // optional string fantasy_league_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fantasy_league_name().data(), this->fantasy_league_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAFantasyLeagueInfo.fantasy_league_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->fantasy_league_name(), output);
  }

  // optional .proto.dota.Fantasy_Selection_Mode selection_mode = 4 [default = FANTASY_SELECTION_INVALID];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->selection_mode(), output);
  }

  // optional uint32 team_count = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->team_count(), output);
  }

  // optional uint64 logo = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->logo(), output);
  }

  // optional .proto.dota.CMsgFantasyLeagueScoring scoring = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->scoring_, output);
  }

  // optional uint32 draft_time = 12;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->draft_time(), output);
  }

  // optional uint32 draft_pick_time = 13;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->draft_pick_time(), output);
  }

  // optional uint32 season_start = 15;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->season_start(), output);
  }

  // optional uint32 season_length = 16;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->season_length(), output);
  }

  // optional uint32 veto_votes = 17;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->veto_votes(), output);
  }

  // optional uint32 acquisitions = 18;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->acquisitions(), output);
  }

  // optional uint32 slot_1 = 19;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->slot_1(), output);
  }

  // optional uint32 slot_2 = 20;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->slot_2(), output);
  }

  // optional uint32 slot_3 = 21;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->slot_3(), output);
  }

  // optional uint32 slot_4 = 22;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->slot_4(), output);
  }

  // optional uint32 slot_5 = 23;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->slot_5(), output);
  }

  // optional uint32 bench_slots = 24;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->bench_slots(), output);
  }

  // repeated .proto.dota.CMsgDOTAFantasyLeagueInfo.OwnerInfo owner_info = 25;
  for (unsigned int i = 0, n = this->owner_info_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->owner_info(i), output);
  }

  // repeated uint32 players = 26;
  for (int i = 0, n = this->players_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      26, this->players(i), output);
  }

  // optional uint32 time_zone = 27;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->time_zone(), output);
  }

  // optional uint32 season = 28;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->season(), output);
  }

  // optional string password = 29;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAFantasyLeagueInfo.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      29, this->password(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyLeagueInfo)
}

::google::protobuf::uint8* CMsgDOTAFantasyLeagueInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyLeagueInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fantasy_league_id(), target);
  }

  // optional uint32 commissioner_account_id = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->commissioner_account_id(), target);
  }

  // optional string fantasy_league_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fantasy_league_name().data(), this->fantasy_league_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAFantasyLeagueInfo.fantasy_league_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->fantasy_league_name(), target);
  }

  // optional .proto.dota.Fantasy_Selection_Mode selection_mode = 4 [default = FANTASY_SELECTION_INVALID];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->selection_mode(), target);
  }

  // optional uint32 team_count = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->team_count(), target);
  }

  // optional uint64 logo = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->logo(), target);
  }

  // optional .proto.dota.CMsgFantasyLeagueScoring scoring = 7;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->scoring_, deterministic, target);
  }

  // optional uint32 draft_time = 12;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->draft_time(), target);
  }

  // optional uint32 draft_pick_time = 13;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->draft_pick_time(), target);
  }

  // optional uint32 season_start = 15;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->season_start(), target);
  }

  // optional uint32 season_length = 16;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->season_length(), target);
  }

  // optional uint32 veto_votes = 17;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->veto_votes(), target);
  }

  // optional uint32 acquisitions = 18;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->acquisitions(), target);
  }

  // optional uint32 slot_1 = 19;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->slot_1(), target);
  }

  // optional uint32 slot_2 = 20;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->slot_2(), target);
  }

  // optional uint32 slot_3 = 21;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->slot_3(), target);
  }

  // optional uint32 slot_4 = 22;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->slot_4(), target);
  }

  // optional uint32 slot_5 = 23;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->slot_5(), target);
  }

  // optional uint32 bench_slots = 24;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->bench_slots(), target);
  }

  // repeated .proto.dota.CMsgDOTAFantasyLeagueInfo.OwnerInfo owner_info = 25;
  for (unsigned int i = 0, n = this->owner_info_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        25, this->owner_info(i), deterministic, target);
  }

  // repeated uint32 players = 26;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(26, this->players_, target);

  // optional uint32 time_zone = 27;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->time_zone(), target);
  }

  // optional uint32 season = 28;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->season(), target);
  }

  // optional string password = 29;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAFantasyLeagueInfo.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        29, this->password(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyLeagueInfo)
  return target;
}

size_t CMsgDOTAFantasyLeagueInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyLeagueInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgDOTAFantasyLeagueInfo.OwnerInfo owner_info = 25;
  {
    unsigned int count = this->owner_info_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->owner_info(i));
    }
  }

  // repeated uint32 players = 26;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->players_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->players_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string fantasy_league_name = 3;
    if (has_fantasy_league_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fantasy_league_name());
    }

    // optional string password = 29;
    if (has_password()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional .proto.dota.CMsgFantasyLeagueScoring scoring = 7;
    if (has_scoring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->scoring_);
    }

    // optional uint32 fantasy_league_id = 1;
    if (has_fantasy_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_league_id());
    }

    // optional uint32 commissioner_account_id = 2;
    if (has_commissioner_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->commissioner_account_id());
    }

    // optional .proto.dota.Fantasy_Selection_Mode selection_mode = 4 [default = FANTASY_SELECTION_INVALID];
    if (has_selection_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->selection_mode());
    }

    // optional uint32 team_count = 5;
    if (has_team_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_count());
    }

    // optional uint64 logo = 6;
    if (has_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->logo());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint32 draft_time = 12;
    if (has_draft_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->draft_time());
    }

    // optional uint32 draft_pick_time = 13;
    if (has_draft_pick_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->draft_pick_time());
    }

    // optional uint32 season_start = 15;
    if (has_season_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->season_start());
    }

    // optional uint32 season_length = 16;
    if (has_season_length()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->season_length());
    }

    // optional uint32 veto_votes = 17;
    if (has_veto_votes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->veto_votes());
    }

    // optional uint32 acquisitions = 18;
    if (has_acquisitions()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->acquisitions());
    }

    // optional uint32 slot_1 = 19;
    if (has_slot_1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot_1());
    }

    // optional uint32 slot_2 = 20;
    if (has_slot_2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot_2());
    }

  }
  if (_has_bits_[16 / 32] & 4128768u) {
    // optional uint32 slot_3 = 21;
    if (has_slot_3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot_3());
    }

    // optional uint32 slot_4 = 22;
    if (has_slot_4()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot_4());
    }

    // optional uint32 slot_5 = 23;
    if (has_slot_5()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot_5());
    }

    // optional uint32 bench_slots = 24;
    if (has_bench_slots()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bench_slots());
    }

    // optional uint32 time_zone = 27;
    if (has_time_zone()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_zone());
    }

    // optional uint32 season = 28;
    if (has_season()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->season());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyLeagueInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyLeagueInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyLeagueInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyLeagueInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyLeagueInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyLeagueInfo)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyLeagueInfo::MergeFrom(const CMsgDOTAFantasyLeagueInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyLeagueInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  owner_info_.MergeFrom(from.owner_info_);
  players_.MergeFrom(from.players_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_fantasy_league_name();
      fantasy_league_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fantasy_league_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_password();
      password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_scoring()->::proto::dota::CMsgFantasyLeagueScoring::MergeFrom(from.scoring());
    }
    if (cached_has_bits & 0x00000008u) {
      fantasy_league_id_ = from.fantasy_league_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      commissioner_account_id_ = from.commissioner_account_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      selection_mode_ = from.selection_mode_;
    }
    if (cached_has_bits & 0x00000040u) {
      team_count_ = from.team_count_;
    }
    if (cached_has_bits & 0x00000080u) {
      logo_ = from.logo_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      draft_time_ = from.draft_time_;
    }
    if (cached_has_bits & 0x00000200u) {
      draft_pick_time_ = from.draft_pick_time_;
    }
    if (cached_has_bits & 0x00000400u) {
      season_start_ = from.season_start_;
    }
    if (cached_has_bits & 0x00000800u) {
      season_length_ = from.season_length_;
    }
    if (cached_has_bits & 0x00001000u) {
      veto_votes_ = from.veto_votes_;
    }
    if (cached_has_bits & 0x00002000u) {
      acquisitions_ = from.acquisitions_;
    }
    if (cached_has_bits & 0x00004000u) {
      slot_1_ = from.slot_1_;
    }
    if (cached_has_bits & 0x00008000u) {
      slot_2_ = from.slot_2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 4128768u) {
    if (cached_has_bits & 0x00010000u) {
      slot_3_ = from.slot_3_;
    }
    if (cached_has_bits & 0x00020000u) {
      slot_4_ = from.slot_4_;
    }
    if (cached_has_bits & 0x00040000u) {
      slot_5_ = from.slot_5_;
    }
    if (cached_has_bits & 0x00080000u) {
      bench_slots_ = from.bench_slots_;
    }
    if (cached_has_bits & 0x00100000u) {
      time_zone_ = from.time_zone_;
    }
    if (cached_has_bits & 0x00200000u) {
      season_ = from.season_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyLeagueInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyLeagueInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyLeagueInfo::CopyFrom(const CMsgDOTAFantasyLeagueInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyLeagueInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyLeagueInfo::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyLeagueInfo::Swap(CMsgDOTAFantasyLeagueInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyLeagueInfo::InternalSwap(CMsgDOTAFantasyLeagueInfo* other) {
  owner_info_.InternalSwap(&other->owner_info_);
  players_.InternalSwap(&other->players_);
  fantasy_league_name_.Swap(&other->fantasy_league_name_);
  password_.Swap(&other->password_);
  std::swap(scoring_, other->scoring_);
  std::swap(fantasy_league_id_, other->fantasy_league_id_);
  std::swap(commissioner_account_id_, other->commissioner_account_id_);
  std::swap(selection_mode_, other->selection_mode_);
  std::swap(team_count_, other->team_count_);
  std::swap(logo_, other->logo_);
  std::swap(draft_time_, other->draft_time_);
  std::swap(draft_pick_time_, other->draft_pick_time_);
  std::swap(season_start_, other->season_start_);
  std::swap(season_length_, other->season_length_);
  std::swap(veto_votes_, other->veto_votes_);
  std::swap(acquisitions_, other->acquisitions_);
  std::swap(slot_1_, other->slot_1_);
  std::swap(slot_2_, other->slot_2_);
  std::swap(slot_3_, other->slot_3_);
  std::swap(slot_4_, other->slot_4_);
  std::swap(slot_5_, other->slot_5_);
  std::swap(bench_slots_, other->bench_slots_);
  std::swap(time_zone_, other->time_zone_);
  std::swap(season_, other->season_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyLeagueInfo::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyLeagueInfo

// optional uint32 fantasy_league_id = 1;
bool CMsgDOTAFantasyLeagueInfo::has_fantasy_league_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTAFantasyLeagueInfo::set_has_fantasy_league_id() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTAFantasyLeagueInfo::clear_has_fantasy_league_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTAFantasyLeagueInfo::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  clear_has_fantasy_league_id();
}
::google::protobuf::uint32 CMsgDOTAFantasyLeagueInfo::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyLeagueInfo.fantasy_league_id)
  return fantasy_league_id_;
}
void CMsgDOTAFantasyLeagueInfo::set_fantasy_league_id(::google::protobuf::uint32 value) {
  set_has_fantasy_league_id();
  fantasy_league_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyLeagueInfo.fantasy_league_id)
}

// optional uint32 commissioner_account_id = 2;
bool CMsgDOTAFantasyLeagueInfo::has_commissioner_account_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDOTAFantasyLeagueInfo::set_has_commissioner_account_id() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDOTAFantasyLeagueInfo::clear_has_commissioner_account_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDOTAFantasyLeagueInfo::clear_commissioner_account_id() {
  commissioner_account_id_ = 0u;
  clear_has_commissioner_account_id();
}
::google::protobuf::uint32 CMsgDOTAFantasyLeagueInfo::commissioner_account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyLeagueInfo.commissioner_account_id)
  return commissioner_account_id_;
}
void CMsgDOTAFantasyLeagueInfo::set_commissioner_account_id(::google::protobuf::uint32 value) {
  set_has_commissioner_account_id();
  commissioner_account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyLeagueInfo.commissioner_account_id)
}

// optional string fantasy_league_name = 3;
bool CMsgDOTAFantasyLeagueInfo::has_fantasy_league_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyLeagueInfo::set_has_fantasy_league_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyLeagueInfo::clear_has_fantasy_league_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyLeagueInfo::clear_fantasy_league_name() {
  fantasy_league_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fantasy_league_name();
}
const ::std::string& CMsgDOTAFantasyLeagueInfo::fantasy_league_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyLeagueInfo.fantasy_league_name)
  return fantasy_league_name_.GetNoArena();
}
void CMsgDOTAFantasyLeagueInfo::set_fantasy_league_name(const ::std::string& value) {
  set_has_fantasy_league_name();
  fantasy_league_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyLeagueInfo.fantasy_league_name)
}
#if LANG_CXX11
void CMsgDOTAFantasyLeagueInfo::set_fantasy_league_name(::std::string&& value) {
  set_has_fantasy_league_name();
  fantasy_league_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAFantasyLeagueInfo.fantasy_league_name)
}
#endif
void CMsgDOTAFantasyLeagueInfo::set_fantasy_league_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fantasy_league_name();
  fantasy_league_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAFantasyLeagueInfo.fantasy_league_name)
}
void CMsgDOTAFantasyLeagueInfo::set_fantasy_league_name(const char* value, size_t size) {
  set_has_fantasy_league_name();
  fantasy_league_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAFantasyLeagueInfo.fantasy_league_name)
}
::std::string* CMsgDOTAFantasyLeagueInfo::mutable_fantasy_league_name() {
  set_has_fantasy_league_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAFantasyLeagueInfo.fantasy_league_name)
  return fantasy_league_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTAFantasyLeagueInfo::release_fantasy_league_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAFantasyLeagueInfo.fantasy_league_name)
  clear_has_fantasy_league_name();
  return fantasy_league_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTAFantasyLeagueInfo::set_allocated_fantasy_league_name(::std::string* fantasy_league_name) {
  if (fantasy_league_name != NULL) {
    set_has_fantasy_league_name();
  } else {
    clear_has_fantasy_league_name();
  }
  fantasy_league_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fantasy_league_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAFantasyLeagueInfo.fantasy_league_name)
}

// optional .proto.dota.Fantasy_Selection_Mode selection_mode = 4 [default = FANTASY_SELECTION_INVALID];
bool CMsgDOTAFantasyLeagueInfo::has_selection_mode() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgDOTAFantasyLeagueInfo::set_has_selection_mode() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgDOTAFantasyLeagueInfo::clear_has_selection_mode() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgDOTAFantasyLeagueInfo::clear_selection_mode() {
  selection_mode_ = 0;
  clear_has_selection_mode();
}
::proto::dota::Fantasy_Selection_Mode CMsgDOTAFantasyLeagueInfo::selection_mode() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyLeagueInfo.selection_mode)
  return static_cast< ::proto::dota::Fantasy_Selection_Mode >(selection_mode_);
}
void CMsgDOTAFantasyLeagueInfo::set_selection_mode(::proto::dota::Fantasy_Selection_Mode value) {
  assert(::proto::dota::Fantasy_Selection_Mode_IsValid(value));
  set_has_selection_mode();
  selection_mode_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyLeagueInfo.selection_mode)
}

// optional uint32 team_count = 5;
bool CMsgDOTAFantasyLeagueInfo::has_team_count() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgDOTAFantasyLeagueInfo::set_has_team_count() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgDOTAFantasyLeagueInfo::clear_has_team_count() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgDOTAFantasyLeagueInfo::clear_team_count() {
  team_count_ = 0u;
  clear_has_team_count();
}
::google::protobuf::uint32 CMsgDOTAFantasyLeagueInfo::team_count() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyLeagueInfo.team_count)
  return team_count_;
}
void CMsgDOTAFantasyLeagueInfo::set_team_count(::google::protobuf::uint32 value) {
  set_has_team_count();
  team_count_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyLeagueInfo.team_count)
}

// optional uint64 logo = 6;
bool CMsgDOTAFantasyLeagueInfo::has_logo() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgDOTAFantasyLeagueInfo::set_has_logo() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgDOTAFantasyLeagueInfo::clear_has_logo() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgDOTAFantasyLeagueInfo::clear_logo() {
  logo_ = GOOGLE_ULONGLONG(0);
  clear_has_logo();
}
::google::protobuf::uint64 CMsgDOTAFantasyLeagueInfo::logo() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyLeagueInfo.logo)
  return logo_;
}
void CMsgDOTAFantasyLeagueInfo::set_logo(::google::protobuf::uint64 value) {
  set_has_logo();
  logo_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyLeagueInfo.logo)
}

// optional .proto.dota.CMsgFantasyLeagueScoring scoring = 7;
bool CMsgDOTAFantasyLeagueInfo::has_scoring() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAFantasyLeagueInfo::set_has_scoring() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAFantasyLeagueInfo::clear_has_scoring() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAFantasyLeagueInfo::clear_scoring() {
  if (scoring_ != NULL) scoring_->::proto::dota::CMsgFantasyLeagueScoring::Clear();
  clear_has_scoring();
}
const ::proto::dota::CMsgFantasyLeagueScoring& CMsgDOTAFantasyLeagueInfo::scoring() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyLeagueInfo.scoring)
  return scoring_ != NULL ? *scoring_
                         : *::proto::dota::CMsgFantasyLeagueScoring::internal_default_instance();
}
::proto::dota::CMsgFantasyLeagueScoring* CMsgDOTAFantasyLeagueInfo::mutable_scoring() {
  set_has_scoring();
  if (scoring_ == NULL) {
    scoring_ = new ::proto::dota::CMsgFantasyLeagueScoring;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAFantasyLeagueInfo.scoring)
  return scoring_;
}
::proto::dota::CMsgFantasyLeagueScoring* CMsgDOTAFantasyLeagueInfo::release_scoring() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAFantasyLeagueInfo.scoring)
  clear_has_scoring();
  ::proto::dota::CMsgFantasyLeagueScoring* temp = scoring_;
  scoring_ = NULL;
  return temp;
}
void CMsgDOTAFantasyLeagueInfo::set_allocated_scoring(::proto::dota::CMsgFantasyLeagueScoring* scoring) {
  delete scoring_;
  scoring_ = scoring;
  if (scoring) {
    set_has_scoring();
  } else {
    clear_has_scoring();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAFantasyLeagueInfo.scoring)
}

// optional uint32 draft_time = 12;
bool CMsgDOTAFantasyLeagueInfo::has_draft_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CMsgDOTAFantasyLeagueInfo::set_has_draft_time() {
  _has_bits_[0] |= 0x00000100u;
}
void CMsgDOTAFantasyLeagueInfo::clear_has_draft_time() {
  _has_bits_[0] &= ~0x00000100u;
}
void CMsgDOTAFantasyLeagueInfo::clear_draft_time() {
  draft_time_ = 0u;
  clear_has_draft_time();
}
::google::protobuf::uint32 CMsgDOTAFantasyLeagueInfo::draft_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyLeagueInfo.draft_time)
  return draft_time_;
}
void CMsgDOTAFantasyLeagueInfo::set_draft_time(::google::protobuf::uint32 value) {
  set_has_draft_time();
  draft_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyLeagueInfo.draft_time)
}

// optional uint32 draft_pick_time = 13;
bool CMsgDOTAFantasyLeagueInfo::has_draft_pick_time() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CMsgDOTAFantasyLeagueInfo::set_has_draft_pick_time() {
  _has_bits_[0] |= 0x00000200u;
}
void CMsgDOTAFantasyLeagueInfo::clear_has_draft_pick_time() {
  _has_bits_[0] &= ~0x00000200u;
}
void CMsgDOTAFantasyLeagueInfo::clear_draft_pick_time() {
  draft_pick_time_ = 0u;
  clear_has_draft_pick_time();
}
::google::protobuf::uint32 CMsgDOTAFantasyLeagueInfo::draft_pick_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyLeagueInfo.draft_pick_time)
  return draft_pick_time_;
}
void CMsgDOTAFantasyLeagueInfo::set_draft_pick_time(::google::protobuf::uint32 value) {
  set_has_draft_pick_time();
  draft_pick_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyLeagueInfo.draft_pick_time)
}

// optional uint32 season_start = 15;
bool CMsgDOTAFantasyLeagueInfo::has_season_start() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CMsgDOTAFantasyLeagueInfo::set_has_season_start() {
  _has_bits_[0] |= 0x00000400u;
}
void CMsgDOTAFantasyLeagueInfo::clear_has_season_start() {
  _has_bits_[0] &= ~0x00000400u;
}
void CMsgDOTAFantasyLeagueInfo::clear_season_start() {
  season_start_ = 0u;
  clear_has_season_start();
}
::google::protobuf::uint32 CMsgDOTAFantasyLeagueInfo::season_start() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyLeagueInfo.season_start)
  return season_start_;
}
void CMsgDOTAFantasyLeagueInfo::set_season_start(::google::protobuf::uint32 value) {
  set_has_season_start();
  season_start_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyLeagueInfo.season_start)
}

// optional uint32 season_length = 16;
bool CMsgDOTAFantasyLeagueInfo::has_season_length() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CMsgDOTAFantasyLeagueInfo::set_has_season_length() {
  _has_bits_[0] |= 0x00000800u;
}
void CMsgDOTAFantasyLeagueInfo::clear_has_season_length() {
  _has_bits_[0] &= ~0x00000800u;
}
void CMsgDOTAFantasyLeagueInfo::clear_season_length() {
  season_length_ = 0u;
  clear_has_season_length();
}
::google::protobuf::uint32 CMsgDOTAFantasyLeagueInfo::season_length() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyLeagueInfo.season_length)
  return season_length_;
}
void CMsgDOTAFantasyLeagueInfo::set_season_length(::google::protobuf::uint32 value) {
  set_has_season_length();
  season_length_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyLeagueInfo.season_length)
}

// optional uint32 veto_votes = 17;
bool CMsgDOTAFantasyLeagueInfo::has_veto_votes() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void CMsgDOTAFantasyLeagueInfo::set_has_veto_votes() {
  _has_bits_[0] |= 0x00001000u;
}
void CMsgDOTAFantasyLeagueInfo::clear_has_veto_votes() {
  _has_bits_[0] &= ~0x00001000u;
}
void CMsgDOTAFantasyLeagueInfo::clear_veto_votes() {
  veto_votes_ = 0u;
  clear_has_veto_votes();
}
::google::protobuf::uint32 CMsgDOTAFantasyLeagueInfo::veto_votes() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyLeagueInfo.veto_votes)
  return veto_votes_;
}
void CMsgDOTAFantasyLeagueInfo::set_veto_votes(::google::protobuf::uint32 value) {
  set_has_veto_votes();
  veto_votes_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyLeagueInfo.veto_votes)
}

// optional uint32 acquisitions = 18;
bool CMsgDOTAFantasyLeagueInfo::has_acquisitions() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void CMsgDOTAFantasyLeagueInfo::set_has_acquisitions() {
  _has_bits_[0] |= 0x00002000u;
}
void CMsgDOTAFantasyLeagueInfo::clear_has_acquisitions() {
  _has_bits_[0] &= ~0x00002000u;
}
void CMsgDOTAFantasyLeagueInfo::clear_acquisitions() {
  acquisitions_ = 0u;
  clear_has_acquisitions();
}
::google::protobuf::uint32 CMsgDOTAFantasyLeagueInfo::acquisitions() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyLeagueInfo.acquisitions)
  return acquisitions_;
}
void CMsgDOTAFantasyLeagueInfo::set_acquisitions(::google::protobuf::uint32 value) {
  set_has_acquisitions();
  acquisitions_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyLeagueInfo.acquisitions)
}

// optional uint32 slot_1 = 19;
bool CMsgDOTAFantasyLeagueInfo::has_slot_1() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void CMsgDOTAFantasyLeagueInfo::set_has_slot_1() {
  _has_bits_[0] |= 0x00004000u;
}
void CMsgDOTAFantasyLeagueInfo::clear_has_slot_1() {
  _has_bits_[0] &= ~0x00004000u;
}
void CMsgDOTAFantasyLeagueInfo::clear_slot_1() {
  slot_1_ = 0u;
  clear_has_slot_1();
}
::google::protobuf::uint32 CMsgDOTAFantasyLeagueInfo::slot_1() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyLeagueInfo.slot_1)
  return slot_1_;
}
void CMsgDOTAFantasyLeagueInfo::set_slot_1(::google::protobuf::uint32 value) {
  set_has_slot_1();
  slot_1_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyLeagueInfo.slot_1)
}

// optional uint32 slot_2 = 20;
bool CMsgDOTAFantasyLeagueInfo::has_slot_2() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void CMsgDOTAFantasyLeagueInfo::set_has_slot_2() {
  _has_bits_[0] |= 0x00008000u;
}
void CMsgDOTAFantasyLeagueInfo::clear_has_slot_2() {
  _has_bits_[0] &= ~0x00008000u;
}
void CMsgDOTAFantasyLeagueInfo::clear_slot_2() {
  slot_2_ = 0u;
  clear_has_slot_2();
}
::google::protobuf::uint32 CMsgDOTAFantasyLeagueInfo::slot_2() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyLeagueInfo.slot_2)
  return slot_2_;
}
void CMsgDOTAFantasyLeagueInfo::set_slot_2(::google::protobuf::uint32 value) {
  set_has_slot_2();
  slot_2_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyLeagueInfo.slot_2)
}

// optional uint32 slot_3 = 21;
bool CMsgDOTAFantasyLeagueInfo::has_slot_3() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void CMsgDOTAFantasyLeagueInfo::set_has_slot_3() {
  _has_bits_[0] |= 0x00010000u;
}
void CMsgDOTAFantasyLeagueInfo::clear_has_slot_3() {
  _has_bits_[0] &= ~0x00010000u;
}
void CMsgDOTAFantasyLeagueInfo::clear_slot_3() {
  slot_3_ = 0u;
  clear_has_slot_3();
}
::google::protobuf::uint32 CMsgDOTAFantasyLeagueInfo::slot_3() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyLeagueInfo.slot_3)
  return slot_3_;
}
void CMsgDOTAFantasyLeagueInfo::set_slot_3(::google::protobuf::uint32 value) {
  set_has_slot_3();
  slot_3_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyLeagueInfo.slot_3)
}

// optional uint32 slot_4 = 22;
bool CMsgDOTAFantasyLeagueInfo::has_slot_4() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void CMsgDOTAFantasyLeagueInfo::set_has_slot_4() {
  _has_bits_[0] |= 0x00020000u;
}
void CMsgDOTAFantasyLeagueInfo::clear_has_slot_4() {
  _has_bits_[0] &= ~0x00020000u;
}
void CMsgDOTAFantasyLeagueInfo::clear_slot_4() {
  slot_4_ = 0u;
  clear_has_slot_4();
}
::google::protobuf::uint32 CMsgDOTAFantasyLeagueInfo::slot_4() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyLeagueInfo.slot_4)
  return slot_4_;
}
void CMsgDOTAFantasyLeagueInfo::set_slot_4(::google::protobuf::uint32 value) {
  set_has_slot_4();
  slot_4_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyLeagueInfo.slot_4)
}

// optional uint32 slot_5 = 23;
bool CMsgDOTAFantasyLeagueInfo::has_slot_5() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void CMsgDOTAFantasyLeagueInfo::set_has_slot_5() {
  _has_bits_[0] |= 0x00040000u;
}
void CMsgDOTAFantasyLeagueInfo::clear_has_slot_5() {
  _has_bits_[0] &= ~0x00040000u;
}
void CMsgDOTAFantasyLeagueInfo::clear_slot_5() {
  slot_5_ = 0u;
  clear_has_slot_5();
}
::google::protobuf::uint32 CMsgDOTAFantasyLeagueInfo::slot_5() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyLeagueInfo.slot_5)
  return slot_5_;
}
void CMsgDOTAFantasyLeagueInfo::set_slot_5(::google::protobuf::uint32 value) {
  set_has_slot_5();
  slot_5_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyLeagueInfo.slot_5)
}

// optional uint32 bench_slots = 24;
bool CMsgDOTAFantasyLeagueInfo::has_bench_slots() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void CMsgDOTAFantasyLeagueInfo::set_has_bench_slots() {
  _has_bits_[0] |= 0x00080000u;
}
void CMsgDOTAFantasyLeagueInfo::clear_has_bench_slots() {
  _has_bits_[0] &= ~0x00080000u;
}
void CMsgDOTAFantasyLeagueInfo::clear_bench_slots() {
  bench_slots_ = 0u;
  clear_has_bench_slots();
}
::google::protobuf::uint32 CMsgDOTAFantasyLeagueInfo::bench_slots() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyLeagueInfo.bench_slots)
  return bench_slots_;
}
void CMsgDOTAFantasyLeagueInfo::set_bench_slots(::google::protobuf::uint32 value) {
  set_has_bench_slots();
  bench_slots_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyLeagueInfo.bench_slots)
}

// repeated .proto.dota.CMsgDOTAFantasyLeagueInfo.OwnerInfo owner_info = 25;
int CMsgDOTAFantasyLeagueInfo::owner_info_size() const {
  return owner_info_.size();
}
void CMsgDOTAFantasyLeagueInfo::clear_owner_info() {
  owner_info_.Clear();
}
const ::proto::dota::CMsgDOTAFantasyLeagueInfo_OwnerInfo& CMsgDOTAFantasyLeagueInfo::owner_info(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyLeagueInfo.owner_info)
  return owner_info_.Get(index);
}
::proto::dota::CMsgDOTAFantasyLeagueInfo_OwnerInfo* CMsgDOTAFantasyLeagueInfo::mutable_owner_info(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAFantasyLeagueInfo.owner_info)
  return owner_info_.Mutable(index);
}
::proto::dota::CMsgDOTAFantasyLeagueInfo_OwnerInfo* CMsgDOTAFantasyLeagueInfo::add_owner_info() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTAFantasyLeagueInfo.owner_info)
  return owner_info_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAFantasyLeagueInfo_OwnerInfo >*
CMsgDOTAFantasyLeagueInfo::mutable_owner_info() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTAFantasyLeagueInfo.owner_info)
  return &owner_info_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAFantasyLeagueInfo_OwnerInfo >&
CMsgDOTAFantasyLeagueInfo::owner_info() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTAFantasyLeagueInfo.owner_info)
  return owner_info_;
}

// repeated uint32 players = 26;
int CMsgDOTAFantasyLeagueInfo::players_size() const {
  return players_.size();
}
void CMsgDOTAFantasyLeagueInfo::clear_players() {
  players_.Clear();
}
::google::protobuf::uint32 CMsgDOTAFantasyLeagueInfo::players(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyLeagueInfo.players)
  return players_.Get(index);
}
void CMsgDOTAFantasyLeagueInfo::set_players(int index, ::google::protobuf::uint32 value) {
  players_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyLeagueInfo.players)
}
void CMsgDOTAFantasyLeagueInfo::add_players(::google::protobuf::uint32 value) {
  players_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTAFantasyLeagueInfo.players)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgDOTAFantasyLeagueInfo::players() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTAFantasyLeagueInfo.players)
  return players_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgDOTAFantasyLeagueInfo::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTAFantasyLeagueInfo.players)
  return &players_;
}

// optional uint32 time_zone = 27;
bool CMsgDOTAFantasyLeagueInfo::has_time_zone() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void CMsgDOTAFantasyLeagueInfo::set_has_time_zone() {
  _has_bits_[0] |= 0x00100000u;
}
void CMsgDOTAFantasyLeagueInfo::clear_has_time_zone() {
  _has_bits_[0] &= ~0x00100000u;
}
void CMsgDOTAFantasyLeagueInfo::clear_time_zone() {
  time_zone_ = 0u;
  clear_has_time_zone();
}
::google::protobuf::uint32 CMsgDOTAFantasyLeagueInfo::time_zone() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyLeagueInfo.time_zone)
  return time_zone_;
}
void CMsgDOTAFantasyLeagueInfo::set_time_zone(::google::protobuf::uint32 value) {
  set_has_time_zone();
  time_zone_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyLeagueInfo.time_zone)
}

// optional uint32 season = 28;
bool CMsgDOTAFantasyLeagueInfo::has_season() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void CMsgDOTAFantasyLeagueInfo::set_has_season() {
  _has_bits_[0] |= 0x00200000u;
}
void CMsgDOTAFantasyLeagueInfo::clear_has_season() {
  _has_bits_[0] &= ~0x00200000u;
}
void CMsgDOTAFantasyLeagueInfo::clear_season() {
  season_ = 0u;
  clear_has_season();
}
::google::protobuf::uint32 CMsgDOTAFantasyLeagueInfo::season() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyLeagueInfo.season)
  return season_;
}
void CMsgDOTAFantasyLeagueInfo::set_season(::google::protobuf::uint32 value) {
  set_has_season();
  season_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyLeagueInfo.season)
}

// optional string password = 29;
bool CMsgDOTAFantasyLeagueInfo::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAFantasyLeagueInfo::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAFantasyLeagueInfo::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAFantasyLeagueInfo::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
const ::std::string& CMsgDOTAFantasyLeagueInfo::password() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyLeagueInfo.password)
  return password_.GetNoArena();
}
void CMsgDOTAFantasyLeagueInfo::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyLeagueInfo.password)
}
#if LANG_CXX11
void CMsgDOTAFantasyLeagueInfo::set_password(::std::string&& value) {
  set_has_password();
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAFantasyLeagueInfo.password)
}
#endif
void CMsgDOTAFantasyLeagueInfo::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAFantasyLeagueInfo.password)
}
void CMsgDOTAFantasyLeagueInfo::set_password(const char* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAFantasyLeagueInfo.password)
}
::std::string* CMsgDOTAFantasyLeagueInfo::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAFantasyLeagueInfo.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTAFantasyLeagueInfo::release_password() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAFantasyLeagueInfo.password)
  clear_has_password();
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTAFantasyLeagueInfo::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAFantasyLeagueInfo.password)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyLeagueEditInfoRequest::kFantasyLeagueIdFieldNumber;
const int CMsgDOTAFantasyLeagueEditInfoRequest::kEditInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyLeagueEditInfoRequest::CMsgDOTAFantasyLeagueEditInfoRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyLeagueEditInfoRequest)
}
CMsgDOTAFantasyLeagueEditInfoRequest::CMsgDOTAFantasyLeagueEditInfoRequest(const CMsgDOTAFantasyLeagueEditInfoRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_edit_info()) {
    edit_info_ = new ::proto::dota::CMsgDOTAFantasyLeagueInfo(*from.edit_info_);
  } else {
    edit_info_ = NULL;
  }
  fantasy_league_id_ = from.fantasy_league_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyLeagueEditInfoRequest)
}

void CMsgDOTAFantasyLeagueEditInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&edit_info_, 0, reinterpret_cast<char*>(&fantasy_league_id_) -
    reinterpret_cast<char*>(&edit_info_) + sizeof(fantasy_league_id_));
}

CMsgDOTAFantasyLeagueEditInfoRequest::~CMsgDOTAFantasyLeagueEditInfoRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyLeagueEditInfoRequest)
  SharedDtor();
}

void CMsgDOTAFantasyLeagueEditInfoRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete edit_info_;
  }
}

void CMsgDOTAFantasyLeagueEditInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyLeagueEditInfoRequest::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAFantasyLeagueEditInfoRequest& CMsgDOTAFantasyLeagueEditInfoRequest::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAFantasyLeagueEditInfoRequest* CMsgDOTAFantasyLeagueEditInfoRequest::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyLeagueEditInfoRequest* n = new CMsgDOTAFantasyLeagueEditInfoRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyLeagueEditInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyLeagueEditInfoRequest)
  if (has_edit_info()) {
    GOOGLE_DCHECK(edit_info_ != NULL);
    edit_info_->::proto::dota::CMsgDOTAFantasyLeagueInfo::Clear();
  }
  fantasy_league_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAFantasyLeagueEditInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyLeagueEditInfoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_fantasy_league_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgDOTAFantasyLeagueInfo edit_info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_edit_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyLeagueEditInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyLeagueEditInfoRequest)
  return false;
#undef DO_
}

void CMsgDOTAFantasyLeagueEditInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyLeagueEditInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fantasy_league_id(), output);
  }

  // optional .proto.dota.CMsgDOTAFantasyLeagueInfo edit_info = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->edit_info_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyLeagueEditInfoRequest)
}

::google::protobuf::uint8* CMsgDOTAFantasyLeagueEditInfoRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyLeagueEditInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fantasy_league_id(), target);
  }

  // optional .proto.dota.CMsgDOTAFantasyLeagueInfo edit_info = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->edit_info_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyLeagueEditInfoRequest)
  return target;
}

size_t CMsgDOTAFantasyLeagueEditInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyLeagueEditInfoRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .proto.dota.CMsgDOTAFantasyLeagueInfo edit_info = 2;
    if (has_edit_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->edit_info_);
    }

    // optional uint32 fantasy_league_id = 1;
    if (has_fantasy_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_league_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyLeagueEditInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyLeagueEditInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyLeagueEditInfoRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyLeagueEditInfoRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyLeagueEditInfoRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyLeagueEditInfoRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyLeagueEditInfoRequest::MergeFrom(const CMsgDOTAFantasyLeagueEditInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyLeagueEditInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_edit_info()->::proto::dota::CMsgDOTAFantasyLeagueInfo::MergeFrom(from.edit_info());
    }
    if (cached_has_bits & 0x00000002u) {
      fantasy_league_id_ = from.fantasy_league_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyLeagueEditInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyLeagueEditInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyLeagueEditInfoRequest::CopyFrom(const CMsgDOTAFantasyLeagueEditInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyLeagueEditInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyLeagueEditInfoRequest::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyLeagueEditInfoRequest::Swap(CMsgDOTAFantasyLeagueEditInfoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyLeagueEditInfoRequest::InternalSwap(CMsgDOTAFantasyLeagueEditInfoRequest* other) {
  std::swap(edit_info_, other->edit_info_);
  std::swap(fantasy_league_id_, other->fantasy_league_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyLeagueEditInfoRequest::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyLeagueEditInfoRequest

// optional uint32 fantasy_league_id = 1;
bool CMsgDOTAFantasyLeagueEditInfoRequest::has_fantasy_league_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAFantasyLeagueEditInfoRequest::set_has_fantasy_league_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAFantasyLeagueEditInfoRequest::clear_has_fantasy_league_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAFantasyLeagueEditInfoRequest::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  clear_has_fantasy_league_id();
}
::google::protobuf::uint32 CMsgDOTAFantasyLeagueEditInfoRequest::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyLeagueEditInfoRequest.fantasy_league_id)
  return fantasy_league_id_;
}
void CMsgDOTAFantasyLeagueEditInfoRequest::set_fantasy_league_id(::google::protobuf::uint32 value) {
  set_has_fantasy_league_id();
  fantasy_league_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyLeagueEditInfoRequest.fantasy_league_id)
}

// optional .proto.dota.CMsgDOTAFantasyLeagueInfo edit_info = 2;
bool CMsgDOTAFantasyLeagueEditInfoRequest::has_edit_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyLeagueEditInfoRequest::set_has_edit_info() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyLeagueEditInfoRequest::clear_has_edit_info() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyLeagueEditInfoRequest::clear_edit_info() {
  if (edit_info_ != NULL) edit_info_->::proto::dota::CMsgDOTAFantasyLeagueInfo::Clear();
  clear_has_edit_info();
}
const ::proto::dota::CMsgDOTAFantasyLeagueInfo& CMsgDOTAFantasyLeagueEditInfoRequest::edit_info() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyLeagueEditInfoRequest.edit_info)
  return edit_info_ != NULL ? *edit_info_
                         : *::proto::dota::CMsgDOTAFantasyLeagueInfo::internal_default_instance();
}
::proto::dota::CMsgDOTAFantasyLeagueInfo* CMsgDOTAFantasyLeagueEditInfoRequest::mutable_edit_info() {
  set_has_edit_info();
  if (edit_info_ == NULL) {
    edit_info_ = new ::proto::dota::CMsgDOTAFantasyLeagueInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAFantasyLeagueEditInfoRequest.edit_info)
  return edit_info_;
}
::proto::dota::CMsgDOTAFantasyLeagueInfo* CMsgDOTAFantasyLeagueEditInfoRequest::release_edit_info() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAFantasyLeagueEditInfoRequest.edit_info)
  clear_has_edit_info();
  ::proto::dota::CMsgDOTAFantasyLeagueInfo* temp = edit_info_;
  edit_info_ = NULL;
  return temp;
}
void CMsgDOTAFantasyLeagueEditInfoRequest::set_allocated_edit_info(::proto::dota::CMsgDOTAFantasyLeagueInfo* edit_info) {
  delete edit_info_;
  edit_info_ = edit_info;
  if (edit_info) {
    set_has_edit_info();
  } else {
    clear_has_edit_info();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAFantasyLeagueEditInfoRequest.edit_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyLeagueEditInfoResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyLeagueEditInfoResponse::CMsgDOTAFantasyLeagueEditInfoResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyLeagueEditInfoResponse)
}
CMsgDOTAFantasyLeagueEditInfoResponse::CMsgDOTAFantasyLeagueEditInfoResponse(const CMsgDOTAFantasyLeagueEditInfoResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyLeagueEditInfoResponse)
}

void CMsgDOTAFantasyLeagueEditInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
}

CMsgDOTAFantasyLeagueEditInfoResponse::~CMsgDOTAFantasyLeagueEditInfoResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyLeagueEditInfoResponse)
  SharedDtor();
}

void CMsgDOTAFantasyLeagueEditInfoResponse::SharedDtor() {
}

void CMsgDOTAFantasyLeagueEditInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyLeagueEditInfoResponse::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAFantasyLeagueEditInfoResponse& CMsgDOTAFantasyLeagueEditInfoResponse::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAFantasyLeagueEditInfoResponse* CMsgDOTAFantasyLeagueEditInfoResponse::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyLeagueEditInfoResponse* n = new CMsgDOTAFantasyLeagueEditInfoResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyLeagueEditInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyLeagueEditInfoResponse)
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAFantasyLeagueEditInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyLeagueEditInfoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgDOTAFantasyLeagueEditInfoResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgDOTAFantasyLeagueEditInfoResponse_EResult_IsValid(value)) {
            set_result(static_cast< ::proto::dota::CMsgDOTAFantasyLeagueEditInfoResponse_EResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyLeagueEditInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyLeagueEditInfoResponse)
  return false;
#undef DO_
}

void CMsgDOTAFantasyLeagueEditInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyLeagueEditInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAFantasyLeagueEditInfoResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyLeagueEditInfoResponse)
}

::google::protobuf::uint8* CMsgDOTAFantasyLeagueEditInfoResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyLeagueEditInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAFantasyLeagueEditInfoResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyLeagueEditInfoResponse)
  return target;
}

size_t CMsgDOTAFantasyLeagueEditInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyLeagueEditInfoResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .proto.dota.CMsgDOTAFantasyLeagueEditInfoResponse.EResult result = 1 [default = SUCCESS];
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyLeagueEditInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyLeagueEditInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyLeagueEditInfoResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyLeagueEditInfoResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyLeagueEditInfoResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyLeagueEditInfoResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyLeagueEditInfoResponse::MergeFrom(const CMsgDOTAFantasyLeagueEditInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyLeagueEditInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void CMsgDOTAFantasyLeagueEditInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyLeagueEditInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyLeagueEditInfoResponse::CopyFrom(const CMsgDOTAFantasyLeagueEditInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyLeagueEditInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyLeagueEditInfoResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyLeagueEditInfoResponse::Swap(CMsgDOTAFantasyLeagueEditInfoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyLeagueEditInfoResponse::InternalSwap(CMsgDOTAFantasyLeagueEditInfoResponse* other) {
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyLeagueEditInfoResponse::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyLeagueEditInfoResponse

// optional .proto.dota.CMsgDOTAFantasyLeagueEditInfoResponse.EResult result = 1 [default = SUCCESS];
bool CMsgDOTAFantasyLeagueEditInfoResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyLeagueEditInfoResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyLeagueEditInfoResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyLeagueEditInfoResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
::proto::dota::CMsgDOTAFantasyLeagueEditInfoResponse_EResult CMsgDOTAFantasyLeagueEditInfoResponse::result() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyLeagueEditInfoResponse.result)
  return static_cast< ::proto::dota::CMsgDOTAFantasyLeagueEditInfoResponse_EResult >(result_);
}
void CMsgDOTAFantasyLeagueEditInfoResponse::set_result(::proto::dota::CMsgDOTAFantasyLeagueEditInfoResponse_EResult value) {
  assert(::proto::dota::CMsgDOTAFantasyLeagueEditInfoResponse_EResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyLeagueEditInfoResponse.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyLeagueFindRequest::kFantasyLeagueIdFieldNumber;
const int CMsgDOTAFantasyLeagueFindRequest::kPasswordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyLeagueFindRequest::CMsgDOTAFantasyLeagueFindRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyLeagueFindRequest)
}
CMsgDOTAFantasyLeagueFindRequest::CMsgDOTAFantasyLeagueFindRequest(const CMsgDOTAFantasyLeagueFindRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_password()) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  fantasy_league_id_ = from.fantasy_league_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyLeagueFindRequest)
}

void CMsgDOTAFantasyLeagueFindRequest::SharedCtor() {
  _cached_size_ = 0;
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fantasy_league_id_ = 0u;
}

CMsgDOTAFantasyLeagueFindRequest::~CMsgDOTAFantasyLeagueFindRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyLeagueFindRequest)
  SharedDtor();
}

void CMsgDOTAFantasyLeagueFindRequest::SharedDtor() {
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTAFantasyLeagueFindRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyLeagueFindRequest::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAFantasyLeagueFindRequest& CMsgDOTAFantasyLeagueFindRequest::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAFantasyLeagueFindRequest* CMsgDOTAFantasyLeagueFindRequest::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyLeagueFindRequest* n = new CMsgDOTAFantasyLeagueFindRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyLeagueFindRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyLeagueFindRequest)
  if (has_password()) {
    GOOGLE_DCHECK(!password_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*password_.UnsafeRawStringPointer())->clear();
  }
  fantasy_league_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAFantasyLeagueFindRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyLeagueFindRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_fantasy_league_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string password = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAFantasyLeagueFindRequest.password");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyLeagueFindRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyLeagueFindRequest)
  return false;
#undef DO_
}

void CMsgDOTAFantasyLeagueFindRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyLeagueFindRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fantasy_league_id(), output);
  }

  // optional string password = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAFantasyLeagueFindRequest.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyLeagueFindRequest)
}

::google::protobuf::uint8* CMsgDOTAFantasyLeagueFindRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyLeagueFindRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fantasy_league_id(), target);
  }

  // optional string password = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAFantasyLeagueFindRequest.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyLeagueFindRequest)
  return target;
}

size_t CMsgDOTAFantasyLeagueFindRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyLeagueFindRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional uint32 fantasy_league_id = 1;
    if (has_fantasy_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_league_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyLeagueFindRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyLeagueFindRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyLeagueFindRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyLeagueFindRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyLeagueFindRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyLeagueFindRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyLeagueFindRequest::MergeFrom(const CMsgDOTAFantasyLeagueFindRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyLeagueFindRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_password();
      password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
    }
    if (cached_has_bits & 0x00000002u) {
      fantasy_league_id_ = from.fantasy_league_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyLeagueFindRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyLeagueFindRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyLeagueFindRequest::CopyFrom(const CMsgDOTAFantasyLeagueFindRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyLeagueFindRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyLeagueFindRequest::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyLeagueFindRequest::Swap(CMsgDOTAFantasyLeagueFindRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyLeagueFindRequest::InternalSwap(CMsgDOTAFantasyLeagueFindRequest* other) {
  password_.Swap(&other->password_);
  std::swap(fantasy_league_id_, other->fantasy_league_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyLeagueFindRequest::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyLeagueFindRequest

// optional uint32 fantasy_league_id = 1;
bool CMsgDOTAFantasyLeagueFindRequest::has_fantasy_league_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAFantasyLeagueFindRequest::set_has_fantasy_league_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAFantasyLeagueFindRequest::clear_has_fantasy_league_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAFantasyLeagueFindRequest::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  clear_has_fantasy_league_id();
}
::google::protobuf::uint32 CMsgDOTAFantasyLeagueFindRequest::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyLeagueFindRequest.fantasy_league_id)
  return fantasy_league_id_;
}
void CMsgDOTAFantasyLeagueFindRequest::set_fantasy_league_id(::google::protobuf::uint32 value) {
  set_has_fantasy_league_id();
  fantasy_league_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyLeagueFindRequest.fantasy_league_id)
}

// optional string password = 2;
bool CMsgDOTAFantasyLeagueFindRequest::has_password() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyLeagueFindRequest::set_has_password() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyLeagueFindRequest::clear_has_password() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyLeagueFindRequest::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
const ::std::string& CMsgDOTAFantasyLeagueFindRequest::password() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyLeagueFindRequest.password)
  return password_.GetNoArena();
}
void CMsgDOTAFantasyLeagueFindRequest::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyLeagueFindRequest.password)
}
#if LANG_CXX11
void CMsgDOTAFantasyLeagueFindRequest::set_password(::std::string&& value) {
  set_has_password();
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAFantasyLeagueFindRequest.password)
}
#endif
void CMsgDOTAFantasyLeagueFindRequest::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAFantasyLeagueFindRequest.password)
}
void CMsgDOTAFantasyLeagueFindRequest::set_password(const char* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAFantasyLeagueFindRequest.password)
}
::std::string* CMsgDOTAFantasyLeagueFindRequest::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAFantasyLeagueFindRequest.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTAFantasyLeagueFindRequest::release_password() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAFantasyLeagueFindRequest.password)
  clear_has_password();
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTAFantasyLeagueFindRequest::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAFantasyLeagueFindRequest.password)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyLeagueFindResponse::kResultFieldNumber;
const int CMsgDOTAFantasyLeagueFindResponse::kFantasyLeagueNameFieldNumber;
const int CMsgDOTAFantasyLeagueFindResponse::kCommissionerNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyLeagueFindResponse::CMsgDOTAFantasyLeagueFindResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyLeagueFindResponse)
}
CMsgDOTAFantasyLeagueFindResponse::CMsgDOTAFantasyLeagueFindResponse(const CMsgDOTAFantasyLeagueFindResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fantasy_league_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fantasy_league_name()) {
    fantasy_league_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fantasy_league_name_);
  }
  commissioner_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_commissioner_name()) {
    commissioner_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.commissioner_name_);
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyLeagueFindResponse)
}

void CMsgDOTAFantasyLeagueFindResponse::SharedCtor() {
  _cached_size_ = 0;
  fantasy_league_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  commissioner_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
}

CMsgDOTAFantasyLeagueFindResponse::~CMsgDOTAFantasyLeagueFindResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyLeagueFindResponse)
  SharedDtor();
}

void CMsgDOTAFantasyLeagueFindResponse::SharedDtor() {
  fantasy_league_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  commissioner_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTAFantasyLeagueFindResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyLeagueFindResponse::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAFantasyLeagueFindResponse& CMsgDOTAFantasyLeagueFindResponse::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAFantasyLeagueFindResponse* CMsgDOTAFantasyLeagueFindResponse::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyLeagueFindResponse* n = new CMsgDOTAFantasyLeagueFindResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyLeagueFindResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyLeagueFindResponse)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_fantasy_league_name()) {
      GOOGLE_DCHECK(!fantasy_league_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*fantasy_league_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_commissioner_name()) {
      GOOGLE_DCHECK(!commissioner_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*commissioner_name_.UnsafeRawStringPointer())->clear();
    }
  }
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAFantasyLeagueFindResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyLeagueFindResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgDOTAFantasyLeagueFindResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgDOTAFantasyLeagueFindResponse_EResult_IsValid(value)) {
            set_result(static_cast< ::proto::dota::CMsgDOTAFantasyLeagueFindResponse_EResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string fantasy_league_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fantasy_league_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fantasy_league_name().data(), this->fantasy_league_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAFantasyLeagueFindResponse.fantasy_league_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string commissioner_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_commissioner_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->commissioner_name().data(), this->commissioner_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAFantasyLeagueFindResponse.commissioner_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyLeagueFindResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyLeagueFindResponse)
  return false;
#undef DO_
}

void CMsgDOTAFantasyLeagueFindResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyLeagueFindResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAFantasyLeagueFindResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional string fantasy_league_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fantasy_league_name().data(), this->fantasy_league_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAFantasyLeagueFindResponse.fantasy_league_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->fantasy_league_name(), output);
  }

  // optional string commissioner_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->commissioner_name().data(), this->commissioner_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAFantasyLeagueFindResponse.commissioner_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->commissioner_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyLeagueFindResponse)
}

::google::protobuf::uint8* CMsgDOTAFantasyLeagueFindResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyLeagueFindResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAFantasyLeagueFindResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional string fantasy_league_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fantasy_league_name().data(), this->fantasy_league_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAFantasyLeagueFindResponse.fantasy_league_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->fantasy_league_name(), target);
  }

  // optional string commissioner_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->commissioner_name().data(), this->commissioner_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAFantasyLeagueFindResponse.commissioner_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->commissioner_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyLeagueFindResponse)
  return target;
}

size_t CMsgDOTAFantasyLeagueFindResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyLeagueFindResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string fantasy_league_name = 2;
    if (has_fantasy_league_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fantasy_league_name());
    }

    // optional string commissioner_name = 3;
    if (has_commissioner_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->commissioner_name());
    }

    // optional .proto.dota.CMsgDOTAFantasyLeagueFindResponse.EResult result = 1 [default = SUCCESS];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyLeagueFindResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyLeagueFindResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyLeagueFindResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyLeagueFindResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyLeagueFindResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyLeagueFindResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyLeagueFindResponse::MergeFrom(const CMsgDOTAFantasyLeagueFindResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyLeagueFindResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_fantasy_league_name();
      fantasy_league_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fantasy_league_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_commissioner_name();
      commissioner_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.commissioner_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyLeagueFindResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyLeagueFindResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyLeagueFindResponse::CopyFrom(const CMsgDOTAFantasyLeagueFindResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyLeagueFindResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyLeagueFindResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyLeagueFindResponse::Swap(CMsgDOTAFantasyLeagueFindResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyLeagueFindResponse::InternalSwap(CMsgDOTAFantasyLeagueFindResponse* other) {
  fantasy_league_name_.Swap(&other->fantasy_league_name_);
  commissioner_name_.Swap(&other->commissioner_name_);
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyLeagueFindResponse::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyLeagueFindResponse

// optional .proto.dota.CMsgDOTAFantasyLeagueFindResponse.EResult result = 1 [default = SUCCESS];
bool CMsgDOTAFantasyLeagueFindResponse::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAFantasyLeagueFindResponse::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAFantasyLeagueFindResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAFantasyLeagueFindResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
::proto::dota::CMsgDOTAFantasyLeagueFindResponse_EResult CMsgDOTAFantasyLeagueFindResponse::result() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyLeagueFindResponse.result)
  return static_cast< ::proto::dota::CMsgDOTAFantasyLeagueFindResponse_EResult >(result_);
}
void CMsgDOTAFantasyLeagueFindResponse::set_result(::proto::dota::CMsgDOTAFantasyLeagueFindResponse_EResult value) {
  assert(::proto::dota::CMsgDOTAFantasyLeagueFindResponse_EResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyLeagueFindResponse.result)
}

// optional string fantasy_league_name = 2;
bool CMsgDOTAFantasyLeagueFindResponse::has_fantasy_league_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyLeagueFindResponse::set_has_fantasy_league_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyLeagueFindResponse::clear_has_fantasy_league_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyLeagueFindResponse::clear_fantasy_league_name() {
  fantasy_league_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fantasy_league_name();
}
const ::std::string& CMsgDOTAFantasyLeagueFindResponse::fantasy_league_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyLeagueFindResponse.fantasy_league_name)
  return fantasy_league_name_.GetNoArena();
}
void CMsgDOTAFantasyLeagueFindResponse::set_fantasy_league_name(const ::std::string& value) {
  set_has_fantasy_league_name();
  fantasy_league_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyLeagueFindResponse.fantasy_league_name)
}
#if LANG_CXX11
void CMsgDOTAFantasyLeagueFindResponse::set_fantasy_league_name(::std::string&& value) {
  set_has_fantasy_league_name();
  fantasy_league_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAFantasyLeagueFindResponse.fantasy_league_name)
}
#endif
void CMsgDOTAFantasyLeagueFindResponse::set_fantasy_league_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fantasy_league_name();
  fantasy_league_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAFantasyLeagueFindResponse.fantasy_league_name)
}
void CMsgDOTAFantasyLeagueFindResponse::set_fantasy_league_name(const char* value, size_t size) {
  set_has_fantasy_league_name();
  fantasy_league_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAFantasyLeagueFindResponse.fantasy_league_name)
}
::std::string* CMsgDOTAFantasyLeagueFindResponse::mutable_fantasy_league_name() {
  set_has_fantasy_league_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAFantasyLeagueFindResponse.fantasy_league_name)
  return fantasy_league_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTAFantasyLeagueFindResponse::release_fantasy_league_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAFantasyLeagueFindResponse.fantasy_league_name)
  clear_has_fantasy_league_name();
  return fantasy_league_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTAFantasyLeagueFindResponse::set_allocated_fantasy_league_name(::std::string* fantasy_league_name) {
  if (fantasy_league_name != NULL) {
    set_has_fantasy_league_name();
  } else {
    clear_has_fantasy_league_name();
  }
  fantasy_league_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fantasy_league_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAFantasyLeagueFindResponse.fantasy_league_name)
}

// optional string commissioner_name = 3;
bool CMsgDOTAFantasyLeagueFindResponse::has_commissioner_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAFantasyLeagueFindResponse::set_has_commissioner_name() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAFantasyLeagueFindResponse::clear_has_commissioner_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAFantasyLeagueFindResponse::clear_commissioner_name() {
  commissioner_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_commissioner_name();
}
const ::std::string& CMsgDOTAFantasyLeagueFindResponse::commissioner_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyLeagueFindResponse.commissioner_name)
  return commissioner_name_.GetNoArena();
}
void CMsgDOTAFantasyLeagueFindResponse::set_commissioner_name(const ::std::string& value) {
  set_has_commissioner_name();
  commissioner_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyLeagueFindResponse.commissioner_name)
}
#if LANG_CXX11
void CMsgDOTAFantasyLeagueFindResponse::set_commissioner_name(::std::string&& value) {
  set_has_commissioner_name();
  commissioner_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAFantasyLeagueFindResponse.commissioner_name)
}
#endif
void CMsgDOTAFantasyLeagueFindResponse::set_commissioner_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_commissioner_name();
  commissioner_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAFantasyLeagueFindResponse.commissioner_name)
}
void CMsgDOTAFantasyLeagueFindResponse::set_commissioner_name(const char* value, size_t size) {
  set_has_commissioner_name();
  commissioner_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAFantasyLeagueFindResponse.commissioner_name)
}
::std::string* CMsgDOTAFantasyLeagueFindResponse::mutable_commissioner_name() {
  set_has_commissioner_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAFantasyLeagueFindResponse.commissioner_name)
  return commissioner_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTAFantasyLeagueFindResponse::release_commissioner_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAFantasyLeagueFindResponse.commissioner_name)
  clear_has_commissioner_name();
  return commissioner_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTAFantasyLeagueFindResponse::set_allocated_commissioner_name(::std::string* commissioner_name) {
  if (commissioner_name != NULL) {
    set_has_commissioner_name();
  } else {
    clear_has_commissioner_name();
  }
  commissioner_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), commissioner_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAFantasyLeagueFindResponse.commissioner_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyLeagueInfoRequest::kFantasyLeagueIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyLeagueInfoRequest::CMsgDOTAFantasyLeagueInfoRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyLeagueInfoRequest)
}
CMsgDOTAFantasyLeagueInfoRequest::CMsgDOTAFantasyLeagueInfoRequest(const CMsgDOTAFantasyLeagueInfoRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fantasy_league_id_ = from.fantasy_league_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyLeagueInfoRequest)
}

void CMsgDOTAFantasyLeagueInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  fantasy_league_id_ = 0u;
}

CMsgDOTAFantasyLeagueInfoRequest::~CMsgDOTAFantasyLeagueInfoRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyLeagueInfoRequest)
  SharedDtor();
}

void CMsgDOTAFantasyLeagueInfoRequest::SharedDtor() {
}

void CMsgDOTAFantasyLeagueInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyLeagueInfoRequest::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAFantasyLeagueInfoRequest& CMsgDOTAFantasyLeagueInfoRequest::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAFantasyLeagueInfoRequest* CMsgDOTAFantasyLeagueInfoRequest::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyLeagueInfoRequest* n = new CMsgDOTAFantasyLeagueInfoRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyLeagueInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyLeagueInfoRequest)
  fantasy_league_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAFantasyLeagueInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyLeagueInfoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_fantasy_league_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyLeagueInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyLeagueInfoRequest)
  return false;
#undef DO_
}

void CMsgDOTAFantasyLeagueInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyLeagueInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fantasy_league_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyLeagueInfoRequest)
}

::google::protobuf::uint8* CMsgDOTAFantasyLeagueInfoRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyLeagueInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fantasy_league_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyLeagueInfoRequest)
  return target;
}

size_t CMsgDOTAFantasyLeagueInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyLeagueInfoRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 fantasy_league_id = 1;
  if (has_fantasy_league_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->fantasy_league_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyLeagueInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyLeagueInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyLeagueInfoRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyLeagueInfoRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyLeagueInfoRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyLeagueInfoRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyLeagueInfoRequest::MergeFrom(const CMsgDOTAFantasyLeagueInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyLeagueInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_fantasy_league_id()) {
    set_fantasy_league_id(from.fantasy_league_id());
  }
}

void CMsgDOTAFantasyLeagueInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyLeagueInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyLeagueInfoRequest::CopyFrom(const CMsgDOTAFantasyLeagueInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyLeagueInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyLeagueInfoRequest::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyLeagueInfoRequest::Swap(CMsgDOTAFantasyLeagueInfoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyLeagueInfoRequest::InternalSwap(CMsgDOTAFantasyLeagueInfoRequest* other) {
  std::swap(fantasy_league_id_, other->fantasy_league_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyLeagueInfoRequest::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyLeagueInfoRequest

// optional uint32 fantasy_league_id = 1;
bool CMsgDOTAFantasyLeagueInfoRequest::has_fantasy_league_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyLeagueInfoRequest::set_has_fantasy_league_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyLeagueInfoRequest::clear_has_fantasy_league_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyLeagueInfoRequest::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  clear_has_fantasy_league_id();
}
::google::protobuf::uint32 CMsgDOTAFantasyLeagueInfoRequest::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyLeagueInfoRequest.fantasy_league_id)
  return fantasy_league_id_;
}
void CMsgDOTAFantasyLeagueInfoRequest::set_fantasy_league_id(::google::protobuf::uint32 value) {
  set_has_fantasy_league_id();
  fantasy_league_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyLeagueInfoRequest.fantasy_league_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyLeagueInfoResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyLeagueInfoResponse::CMsgDOTAFantasyLeagueInfoResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyLeagueInfoResponse)
}
CMsgDOTAFantasyLeagueInfoResponse::CMsgDOTAFantasyLeagueInfoResponse(const CMsgDOTAFantasyLeagueInfoResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyLeagueInfoResponse)
}

void CMsgDOTAFantasyLeagueInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
}

CMsgDOTAFantasyLeagueInfoResponse::~CMsgDOTAFantasyLeagueInfoResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyLeagueInfoResponse)
  SharedDtor();
}

void CMsgDOTAFantasyLeagueInfoResponse::SharedDtor() {
}

void CMsgDOTAFantasyLeagueInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyLeagueInfoResponse::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAFantasyLeagueInfoResponse& CMsgDOTAFantasyLeagueInfoResponse::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAFantasyLeagueInfoResponse* CMsgDOTAFantasyLeagueInfoResponse::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyLeagueInfoResponse* n = new CMsgDOTAFantasyLeagueInfoResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyLeagueInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyLeagueInfoResponse)
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAFantasyLeagueInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyLeagueInfoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgDOTAFantasyLeagueInfoResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgDOTAFantasyLeagueInfoResponse_EResult_IsValid(value)) {
            set_result(static_cast< ::proto::dota::CMsgDOTAFantasyLeagueInfoResponse_EResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyLeagueInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyLeagueInfoResponse)
  return false;
#undef DO_
}

void CMsgDOTAFantasyLeagueInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyLeagueInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAFantasyLeagueInfoResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyLeagueInfoResponse)
}

::google::protobuf::uint8* CMsgDOTAFantasyLeagueInfoResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyLeagueInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAFantasyLeagueInfoResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyLeagueInfoResponse)
  return target;
}

size_t CMsgDOTAFantasyLeagueInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyLeagueInfoResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .proto.dota.CMsgDOTAFantasyLeagueInfoResponse.EResult result = 1 [default = SUCCESS];
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyLeagueInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyLeagueInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyLeagueInfoResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyLeagueInfoResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyLeagueInfoResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyLeagueInfoResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyLeagueInfoResponse::MergeFrom(const CMsgDOTAFantasyLeagueInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyLeagueInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void CMsgDOTAFantasyLeagueInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyLeagueInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyLeagueInfoResponse::CopyFrom(const CMsgDOTAFantasyLeagueInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyLeagueInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyLeagueInfoResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyLeagueInfoResponse::Swap(CMsgDOTAFantasyLeagueInfoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyLeagueInfoResponse::InternalSwap(CMsgDOTAFantasyLeagueInfoResponse* other) {
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyLeagueInfoResponse::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyLeagueInfoResponse

// optional .proto.dota.CMsgDOTAFantasyLeagueInfoResponse.EResult result = 1 [default = SUCCESS];
bool CMsgDOTAFantasyLeagueInfoResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyLeagueInfoResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyLeagueInfoResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyLeagueInfoResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
::proto::dota::CMsgDOTAFantasyLeagueInfoResponse_EResult CMsgDOTAFantasyLeagueInfoResponse::result() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyLeagueInfoResponse.result)
  return static_cast< ::proto::dota::CMsgDOTAFantasyLeagueInfoResponse_EResult >(result_);
}
void CMsgDOTAFantasyLeagueInfoResponse::set_result(::proto::dota::CMsgDOTAFantasyLeagueInfoResponse_EResult value) {
  assert(::proto::dota::CMsgDOTAFantasyLeagueInfoResponse_EResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyLeagueInfoResponse.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyLeagueMatchupsRequest::kFantasyLeagueIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyLeagueMatchupsRequest::CMsgDOTAFantasyLeagueMatchupsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyLeagueMatchupsRequest)
}
CMsgDOTAFantasyLeagueMatchupsRequest::CMsgDOTAFantasyLeagueMatchupsRequest(const CMsgDOTAFantasyLeagueMatchupsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fantasy_league_id_ = from.fantasy_league_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyLeagueMatchupsRequest)
}

void CMsgDOTAFantasyLeagueMatchupsRequest::SharedCtor() {
  _cached_size_ = 0;
  fantasy_league_id_ = 0u;
}

CMsgDOTAFantasyLeagueMatchupsRequest::~CMsgDOTAFantasyLeagueMatchupsRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyLeagueMatchupsRequest)
  SharedDtor();
}

void CMsgDOTAFantasyLeagueMatchupsRequest::SharedDtor() {
}

void CMsgDOTAFantasyLeagueMatchupsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyLeagueMatchupsRequest::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAFantasyLeagueMatchupsRequest& CMsgDOTAFantasyLeagueMatchupsRequest::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAFantasyLeagueMatchupsRequest* CMsgDOTAFantasyLeagueMatchupsRequest::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyLeagueMatchupsRequest* n = new CMsgDOTAFantasyLeagueMatchupsRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyLeagueMatchupsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyLeagueMatchupsRequest)
  fantasy_league_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAFantasyLeagueMatchupsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyLeagueMatchupsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_fantasy_league_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyLeagueMatchupsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyLeagueMatchupsRequest)
  return false;
#undef DO_
}

void CMsgDOTAFantasyLeagueMatchupsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyLeagueMatchupsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fantasy_league_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyLeagueMatchupsRequest)
}

::google::protobuf::uint8* CMsgDOTAFantasyLeagueMatchupsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyLeagueMatchupsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fantasy_league_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyLeagueMatchupsRequest)
  return target;
}

size_t CMsgDOTAFantasyLeagueMatchupsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyLeagueMatchupsRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 fantasy_league_id = 1;
  if (has_fantasy_league_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->fantasy_league_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyLeagueMatchupsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyLeagueMatchupsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyLeagueMatchupsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyLeagueMatchupsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyLeagueMatchupsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyLeagueMatchupsRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyLeagueMatchupsRequest::MergeFrom(const CMsgDOTAFantasyLeagueMatchupsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyLeagueMatchupsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_fantasy_league_id()) {
    set_fantasy_league_id(from.fantasy_league_id());
  }
}

void CMsgDOTAFantasyLeagueMatchupsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyLeagueMatchupsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyLeagueMatchupsRequest::CopyFrom(const CMsgDOTAFantasyLeagueMatchupsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyLeagueMatchupsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyLeagueMatchupsRequest::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyLeagueMatchupsRequest::Swap(CMsgDOTAFantasyLeagueMatchupsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyLeagueMatchupsRequest::InternalSwap(CMsgDOTAFantasyLeagueMatchupsRequest* other) {
  std::swap(fantasy_league_id_, other->fantasy_league_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyLeagueMatchupsRequest::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyLeagueMatchupsRequest

// optional uint32 fantasy_league_id = 1;
bool CMsgDOTAFantasyLeagueMatchupsRequest::has_fantasy_league_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyLeagueMatchupsRequest::set_has_fantasy_league_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyLeagueMatchupsRequest::clear_has_fantasy_league_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyLeagueMatchupsRequest::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  clear_has_fantasy_league_id();
}
::google::protobuf::uint32 CMsgDOTAFantasyLeagueMatchupsRequest::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyLeagueMatchupsRequest.fantasy_league_id)
  return fantasy_league_id_;
}
void CMsgDOTAFantasyLeagueMatchupsRequest::set_fantasy_league_id(::google::protobuf::uint32 value) {
  set_has_fantasy_league_id();
  fantasy_league_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyLeagueMatchupsRequest.fantasy_league_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::kOwnerAccountId1FieldNumber;
const int CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::kOwnerAccountId2FieldNumber;
const int CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::kScore1FieldNumber;
const int CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::kScore2FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::CMsgDOTAFantasyLeagueMatchupsResponse_Matchup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.Matchup)
}
CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::CMsgDOTAFantasyLeagueMatchupsResponse_Matchup(const CMsgDOTAFantasyLeagueMatchupsResponse_Matchup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&owner_account_id_1_, &from.owner_account_id_1_,
    reinterpret_cast<char*>(&score_2_) -
    reinterpret_cast<char*>(&owner_account_id_1_) + sizeof(score_2_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.Matchup)
}

void CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&owner_account_id_1_, 0, reinterpret_cast<char*>(&score_2_) -
    reinterpret_cast<char*>(&owner_account_id_1_) + sizeof(score_2_));
}

CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::~CMsgDOTAFantasyLeagueMatchupsResponse_Matchup() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.Matchup)
  SharedDtor();
}

void CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::SharedDtor() {
}

void CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAFantasyLeagueMatchupsResponse_Matchup& CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAFantasyLeagueMatchupsResponse_Matchup* CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyLeagueMatchupsResponse_Matchup* n = new CMsgDOTAFantasyLeagueMatchupsResponse_Matchup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.Matchup)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&owner_account_id_1_, 0, reinterpret_cast<char*>(&score_2_) -
      reinterpret_cast<char*>(&owner_account_id_1_) + sizeof(score_2_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.Matchup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 owner_account_id_1 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_owner_account_id_1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &owner_account_id_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 owner_account_id_2 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_owner_account_id_2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &owner_account_id_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float score_1 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_score_1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &score_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float score_2 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_score_2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &score_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.Matchup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.Matchup)
  return false;
#undef DO_
}

void CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.Matchup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 owner_account_id_1 = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->owner_account_id_1(), output);
  }

  // optional uint32 owner_account_id_2 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->owner_account_id_2(), output);
  }

  // optional float score_1 = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->score_1(), output);
  }

  // optional float score_2 = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->score_2(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.Matchup)
}

::google::protobuf::uint8* CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.Matchup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 owner_account_id_1 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->owner_account_id_1(), target);
  }

  // optional uint32 owner_account_id_2 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->owner_account_id_2(), target);
  }

  // optional float score_1 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->score_1(), target);
  }

  // optional float score_2 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->score_2(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.Matchup)
  return target;
}

size_t CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.Matchup)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional uint32 owner_account_id_1 = 1;
    if (has_owner_account_id_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->owner_account_id_1());
    }

    // optional uint32 owner_account_id_2 = 2;
    if (has_owner_account_id_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->owner_account_id_2());
    }

    // optional float score_1 = 3;
    if (has_score_1()) {
      total_size += 1 + 4;
    }

    // optional float score_2 = 4;
    if (has_score_2()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.Matchup)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyLeagueMatchupsResponse_Matchup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyLeagueMatchupsResponse_Matchup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.Matchup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.Matchup)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::MergeFrom(const CMsgDOTAFantasyLeagueMatchupsResponse_Matchup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.Matchup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      owner_account_id_1_ = from.owner_account_id_1_;
    }
    if (cached_has_bits & 0x00000002u) {
      owner_account_id_2_ = from.owner_account_id_2_;
    }
    if (cached_has_bits & 0x00000004u) {
      score_1_ = from.score_1_;
    }
    if (cached_has_bits & 0x00000008u) {
      score_2_ = from.score_2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.Matchup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::CopyFrom(const CMsgDOTAFantasyLeagueMatchupsResponse_Matchup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.Matchup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::Swap(CMsgDOTAFantasyLeagueMatchupsResponse_Matchup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::InternalSwap(CMsgDOTAFantasyLeagueMatchupsResponse_Matchup* other) {
  std::swap(owner_account_id_1_, other->owner_account_id_1_);
  std::swap(owner_account_id_2_, other->owner_account_id_2_);
  std::swap(score_1_, other->score_1_);
  std::swap(score_2_, other->score_2_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyLeagueMatchupsResponse_Matchup

// optional uint32 owner_account_id_1 = 1;
bool CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::has_owner_account_id_1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::set_has_owner_account_id_1() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::clear_has_owner_account_id_1() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::clear_owner_account_id_1() {
  owner_account_id_1_ = 0u;
  clear_has_owner_account_id_1();
}
::google::protobuf::uint32 CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::owner_account_id_1() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.Matchup.owner_account_id_1)
  return owner_account_id_1_;
}
void CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::set_owner_account_id_1(::google::protobuf::uint32 value) {
  set_has_owner_account_id_1();
  owner_account_id_1_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.Matchup.owner_account_id_1)
}

// optional uint32 owner_account_id_2 = 2;
bool CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::has_owner_account_id_2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::set_has_owner_account_id_2() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::clear_has_owner_account_id_2() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::clear_owner_account_id_2() {
  owner_account_id_2_ = 0u;
  clear_has_owner_account_id_2();
}
::google::protobuf::uint32 CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::owner_account_id_2() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.Matchup.owner_account_id_2)
  return owner_account_id_2_;
}
void CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::set_owner_account_id_2(::google::protobuf::uint32 value) {
  set_has_owner_account_id_2();
  owner_account_id_2_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.Matchup.owner_account_id_2)
}

// optional float score_1 = 3;
bool CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::has_score_1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::set_has_score_1() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::clear_has_score_1() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::clear_score_1() {
  score_1_ = 0;
  clear_has_score_1();
}
float CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::score_1() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.Matchup.score_1)
  return score_1_;
}
void CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::set_score_1(float value) {
  set_has_score_1();
  score_1_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.Matchup.score_1)
}

// optional float score_2 = 4;
bool CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::has_score_2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::set_has_score_2() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::clear_has_score_2() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::clear_score_2() {
  score_2_ = 0;
  clear_has_score_2();
}
float CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::score_2() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.Matchup.score_2)
  return score_2_;
}
void CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::set_score_2(float value) {
  set_has_score_2();
  score_2_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.Matchup.score_2)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::kMatchupFieldNumber;
const int CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::kStartTimeFieldNumber;
const int CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::kEndTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups)
}
CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups(const CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      matchup_(from.matchup_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&start_time_, &from.start_time_,
    reinterpret_cast<char*>(&end_time_) -
    reinterpret_cast<char*>(&start_time_) + sizeof(end_time_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups)
}

void CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&start_time_, 0, reinterpret_cast<char*>(&end_time_) -
    reinterpret_cast<char*>(&start_time_) + sizeof(end_time_));
}

CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::~CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups)
  SharedDtor();
}

void CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::SharedDtor() {
}

void CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups& CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups* CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups* n = new CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups)
  matchup_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&start_time_, 0, reinterpret_cast<char*>(&end_time_) -
      reinterpret_cast<char*>(&start_time_) + sizeof(end_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.Matchup matchup = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_matchup()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 start_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_start_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 end_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_end_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups)
  return false;
#undef DO_
}

void CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.Matchup matchup = 1;
  for (unsigned int i = 0, n = this->matchup_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->matchup(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 start_time = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->start_time(), output);
  }

  // optional uint32 end_time = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->end_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups)
}

::google::protobuf::uint8* CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.Matchup matchup = 1;
  for (unsigned int i = 0, n = this->matchup_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->matchup(i), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 start_time = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->start_time(), target);
  }

  // optional uint32 end_time = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->end_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups)
  return target;
}

size_t CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.Matchup matchup = 1;
  {
    unsigned int count = this->matchup_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->matchup(i));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 start_time = 2;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_time());
    }

    // optional uint32 end_time = 3;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->end_time());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::MergeFrom(const CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  matchup_.MergeFrom(from.matchup_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      start_time_ = from.start_time_;
    }
    if (cached_has_bits & 0x00000002u) {
      end_time_ = from.end_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::CopyFrom(const CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::Swap(CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::InternalSwap(CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups* other) {
  matchup_.InternalSwap(&other->matchup_);
  std::swap(start_time_, other->start_time_);
  std::swap(end_time_, other->end_time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups

// repeated .proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.Matchup matchup = 1;
int CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::matchup_size() const {
  return matchup_.size();
}
void CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::clear_matchup() {
  matchup_.Clear();
}
const ::proto::dota::CMsgDOTAFantasyLeagueMatchupsResponse_Matchup& CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::matchup(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups.matchup)
  return matchup_.Get(index);
}
::proto::dota::CMsgDOTAFantasyLeagueMatchupsResponse_Matchup* CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::mutable_matchup(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups.matchup)
  return matchup_.Mutable(index);
}
::proto::dota::CMsgDOTAFantasyLeagueMatchupsResponse_Matchup* CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::add_matchup() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups.matchup)
  return matchup_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAFantasyLeagueMatchupsResponse_Matchup >*
CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::mutable_matchup() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups.matchup)
  return &matchup_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAFantasyLeagueMatchupsResponse_Matchup >&
CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::matchup() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups.matchup)
  return matchup_;
}

// optional uint32 start_time = 2;
bool CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::has_start_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::set_has_start_time() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::clear_start_time() {
  start_time_ = 0u;
  clear_has_start_time();
}
::google::protobuf::uint32 CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::start_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups.start_time)
  return start_time_;
}
void CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::set_start_time(::google::protobuf::uint32 value) {
  set_has_start_time();
  start_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups.start_time)
}

// optional uint32 end_time = 3;
bool CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::has_end_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::set_has_end_time() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::clear_end_time() {
  end_time_ = 0u;
  clear_has_end_time();
}
::google::protobuf::uint32 CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::end_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups.end_time)
  return end_time_;
}
void CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::set_end_time(::google::protobuf::uint32 value) {
  set_has_end_time();
  end_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups.end_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyLeagueMatchupsResponse::kResultFieldNumber;
const int CMsgDOTAFantasyLeagueMatchupsResponse::kFantasyLeagueIdFieldNumber;
const int CMsgDOTAFantasyLeagueMatchupsResponse::kWeeklyMatchupsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyLeagueMatchupsResponse::CMsgDOTAFantasyLeagueMatchupsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse)
}
CMsgDOTAFantasyLeagueMatchupsResponse::CMsgDOTAFantasyLeagueMatchupsResponse(const CMsgDOTAFantasyLeagueMatchupsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      weekly_matchups_(from.weekly_matchups_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    reinterpret_cast<char*>(&fantasy_league_id_) -
    reinterpret_cast<char*>(&result_) + sizeof(fantasy_league_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse)
}

void CMsgDOTAFantasyLeagueMatchupsResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&result_, 0, reinterpret_cast<char*>(&fantasy_league_id_) -
    reinterpret_cast<char*>(&result_) + sizeof(fantasy_league_id_));
}

CMsgDOTAFantasyLeagueMatchupsResponse::~CMsgDOTAFantasyLeagueMatchupsResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse)
  SharedDtor();
}

void CMsgDOTAFantasyLeagueMatchupsResponse::SharedDtor() {
}

void CMsgDOTAFantasyLeagueMatchupsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyLeagueMatchupsResponse::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAFantasyLeagueMatchupsResponse& CMsgDOTAFantasyLeagueMatchupsResponse::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAFantasyLeagueMatchupsResponse* CMsgDOTAFantasyLeagueMatchupsResponse::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyLeagueMatchupsResponse* n = new CMsgDOTAFantasyLeagueMatchupsResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyLeagueMatchupsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse)
  weekly_matchups_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&result_, 0, reinterpret_cast<char*>(&fantasy_league_id_) -
      reinterpret_cast<char*>(&result_) + sizeof(fantasy_league_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAFantasyLeagueMatchupsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgDOTAFantasyLeagueMatchupsResponse_EResult_IsValid(value)) {
            set_result(static_cast< ::proto::dota::CMsgDOTAFantasyLeagueMatchupsResponse_EResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 fantasy_league_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_fantasy_league_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups weekly_matchups = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_weekly_matchups()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse)
  return false;
#undef DO_
}

void CMsgDOTAFantasyLeagueMatchupsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional uint32 fantasy_league_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->fantasy_league_id(), output);
  }

  // repeated .proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups weekly_matchups = 3;
  for (unsigned int i = 0, n = this->weekly_matchups_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->weekly_matchups(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse)
}

::google::protobuf::uint8* CMsgDOTAFantasyLeagueMatchupsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional uint32 fantasy_league_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->fantasy_league_id(), target);
  }

  // repeated .proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups weekly_matchups = 3;
  for (unsigned int i = 0, n = this->weekly_matchups_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->weekly_matchups(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse)
  return target;
}

size_t CMsgDOTAFantasyLeagueMatchupsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups weekly_matchups = 3;
  {
    unsigned int count = this->weekly_matchups_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->weekly_matchups(i));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional .proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.EResult result = 1 [default = SUCCESS];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 fantasy_league_id = 2;
    if (has_fantasy_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_league_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyLeagueMatchupsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyLeagueMatchupsResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyLeagueMatchupsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyLeagueMatchupsResponse::MergeFrom(const CMsgDOTAFantasyLeagueMatchupsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  weekly_matchups_.MergeFrom(from.weekly_matchups_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000002u) {
      fantasy_league_id_ = from.fantasy_league_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyLeagueMatchupsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyLeagueMatchupsResponse::CopyFrom(const CMsgDOTAFantasyLeagueMatchupsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyLeagueMatchupsResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyLeagueMatchupsResponse::Swap(CMsgDOTAFantasyLeagueMatchupsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyLeagueMatchupsResponse::InternalSwap(CMsgDOTAFantasyLeagueMatchupsResponse* other) {
  weekly_matchups_.InternalSwap(&other->weekly_matchups_);
  std::swap(result_, other->result_);
  std::swap(fantasy_league_id_, other->fantasy_league_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyLeagueMatchupsResponse::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyLeagueMatchupsResponse

// optional .proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.EResult result = 1 [default = SUCCESS];
bool CMsgDOTAFantasyLeagueMatchupsResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyLeagueMatchupsResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyLeagueMatchupsResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyLeagueMatchupsResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
::proto::dota::CMsgDOTAFantasyLeagueMatchupsResponse_EResult CMsgDOTAFantasyLeagueMatchupsResponse::result() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.result)
  return static_cast< ::proto::dota::CMsgDOTAFantasyLeagueMatchupsResponse_EResult >(result_);
}
void CMsgDOTAFantasyLeagueMatchupsResponse::set_result(::proto::dota::CMsgDOTAFantasyLeagueMatchupsResponse_EResult value) {
  assert(::proto::dota::CMsgDOTAFantasyLeagueMatchupsResponse_EResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.result)
}

// optional uint32 fantasy_league_id = 2;
bool CMsgDOTAFantasyLeagueMatchupsResponse::has_fantasy_league_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAFantasyLeagueMatchupsResponse::set_has_fantasy_league_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAFantasyLeagueMatchupsResponse::clear_has_fantasy_league_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAFantasyLeagueMatchupsResponse::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  clear_has_fantasy_league_id();
}
::google::protobuf::uint32 CMsgDOTAFantasyLeagueMatchupsResponse::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.fantasy_league_id)
  return fantasy_league_id_;
}
void CMsgDOTAFantasyLeagueMatchupsResponse::set_fantasy_league_id(::google::protobuf::uint32 value) {
  set_has_fantasy_league_id();
  fantasy_league_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.fantasy_league_id)
}

// repeated .proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups weekly_matchups = 3;
int CMsgDOTAFantasyLeagueMatchupsResponse::weekly_matchups_size() const {
  return weekly_matchups_.size();
}
void CMsgDOTAFantasyLeagueMatchupsResponse::clear_weekly_matchups() {
  weekly_matchups_.Clear();
}
const ::proto::dota::CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups& CMsgDOTAFantasyLeagueMatchupsResponse::weekly_matchups(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.weekly_matchups)
  return weekly_matchups_.Get(index);
}
::proto::dota::CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups* CMsgDOTAFantasyLeagueMatchupsResponse::mutable_weekly_matchups(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.weekly_matchups)
  return weekly_matchups_.Mutable(index);
}
::proto::dota::CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups* CMsgDOTAFantasyLeagueMatchupsResponse::add_weekly_matchups() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.weekly_matchups)
  return weekly_matchups_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups >*
CMsgDOTAFantasyLeagueMatchupsResponse::mutable_weekly_matchups() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.weekly_matchups)
  return &weekly_matchups_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups >&
CMsgDOTAFantasyLeagueMatchupsResponse::weekly_matchups() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTAFantasyLeagueMatchupsResponse.weekly_matchups)
  return weekly_matchups_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAEditFantasyTeamRequest::kFantasyLeagueIdFieldNumber;
const int CMsgDOTAEditFantasyTeamRequest::kTeamIndexFieldNumber;
const int CMsgDOTAEditFantasyTeamRequest::kTeamNameFieldNumber;
const int CMsgDOTAEditFantasyTeamRequest::kTeamLogoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAEditFantasyTeamRequest::CMsgDOTAEditFantasyTeamRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAEditFantasyTeamRequest)
}
CMsgDOTAEditFantasyTeamRequest::CMsgDOTAEditFantasyTeamRequest(const CMsgDOTAEditFantasyTeamRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_team_name()) {
    team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_);
  }
  ::memcpy(&fantasy_league_id_, &from.fantasy_league_id_,
    reinterpret_cast<char*>(&team_logo_) -
    reinterpret_cast<char*>(&fantasy_league_id_) + sizeof(team_logo_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAEditFantasyTeamRequest)
}

void CMsgDOTAEditFantasyTeamRequest::SharedCtor() {
  _cached_size_ = 0;
  team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&fantasy_league_id_, 0, reinterpret_cast<char*>(&team_logo_) -
    reinterpret_cast<char*>(&fantasy_league_id_) + sizeof(team_logo_));
}

CMsgDOTAEditFantasyTeamRequest::~CMsgDOTAEditFantasyTeamRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAEditFantasyTeamRequest)
  SharedDtor();
}

void CMsgDOTAEditFantasyTeamRequest::SharedDtor() {
  team_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTAEditFantasyTeamRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAEditFantasyTeamRequest::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAEditFantasyTeamRequest& CMsgDOTAEditFantasyTeamRequest::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAEditFantasyTeamRequest* CMsgDOTAEditFantasyTeamRequest::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAEditFantasyTeamRequest* n = new CMsgDOTAEditFantasyTeamRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAEditFantasyTeamRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAEditFantasyTeamRequest)
  if (has_team_name()) {
    GOOGLE_DCHECK(!team_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*team_name_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&fantasy_league_id_, 0, reinterpret_cast<char*>(&team_logo_) -
      reinterpret_cast<char*>(&fantasy_league_id_) + sizeof(team_logo_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAEditFantasyTeamRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAEditFantasyTeamRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_fantasy_league_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team_index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_team_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string team_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team_name().data(), this->team_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAEditFantasyTeamRequest.team_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 team_logo = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_team_logo();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &team_logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAEditFantasyTeamRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAEditFantasyTeamRequest)
  return false;
#undef DO_
}

void CMsgDOTAEditFantasyTeamRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAEditFantasyTeamRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fantasy_league_id(), output);
  }

  // optional uint32 team_index = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->team_index(), output);
  }

  // optional string team_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAEditFantasyTeamRequest.team_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->team_name(), output);
  }

  // optional uint64 team_logo = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->team_logo(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAEditFantasyTeamRequest)
}

::google::protobuf::uint8* CMsgDOTAEditFantasyTeamRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAEditFantasyTeamRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fantasy_league_id(), target);
  }

  // optional uint32 team_index = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->team_index(), target);
  }

  // optional string team_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAEditFantasyTeamRequest.team_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->team_name(), target);
  }

  // optional uint64 team_logo = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->team_logo(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAEditFantasyTeamRequest)
  return target;
}

size_t CMsgDOTAEditFantasyTeamRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAEditFantasyTeamRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string team_name = 3;
    if (has_team_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_name());
    }

    // optional uint32 fantasy_league_id = 1;
    if (has_fantasy_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_league_id());
    }

    // optional uint32 team_index = 2;
    if (has_team_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_index());
    }

    // optional uint64 team_logo = 4;
    if (has_team_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->team_logo());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAEditFantasyTeamRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAEditFantasyTeamRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAEditFantasyTeamRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAEditFantasyTeamRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAEditFantasyTeamRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAEditFantasyTeamRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTAEditFantasyTeamRequest::MergeFrom(const CMsgDOTAEditFantasyTeamRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAEditFantasyTeamRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_team_name();
      team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      fantasy_league_id_ = from.fantasy_league_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      team_index_ = from.team_index_;
    }
    if (cached_has_bits & 0x00000008u) {
      team_logo_ = from.team_logo_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAEditFantasyTeamRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAEditFantasyTeamRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAEditFantasyTeamRequest::CopyFrom(const CMsgDOTAEditFantasyTeamRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAEditFantasyTeamRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAEditFantasyTeamRequest::IsInitialized() const {
  return true;
}

void CMsgDOTAEditFantasyTeamRequest::Swap(CMsgDOTAEditFantasyTeamRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAEditFantasyTeamRequest::InternalSwap(CMsgDOTAEditFantasyTeamRequest* other) {
  team_name_.Swap(&other->team_name_);
  std::swap(fantasy_league_id_, other->fantasy_league_id_);
  std::swap(team_index_, other->team_index_);
  std::swap(team_logo_, other->team_logo_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAEditFantasyTeamRequest::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAEditFantasyTeamRequest

// optional uint32 fantasy_league_id = 1;
bool CMsgDOTAEditFantasyTeamRequest::has_fantasy_league_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAEditFantasyTeamRequest::set_has_fantasy_league_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAEditFantasyTeamRequest::clear_has_fantasy_league_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAEditFantasyTeamRequest::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  clear_has_fantasy_league_id();
}
::google::protobuf::uint32 CMsgDOTAEditFantasyTeamRequest::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAEditFantasyTeamRequest.fantasy_league_id)
  return fantasy_league_id_;
}
void CMsgDOTAEditFantasyTeamRequest::set_fantasy_league_id(::google::protobuf::uint32 value) {
  set_has_fantasy_league_id();
  fantasy_league_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAEditFantasyTeamRequest.fantasy_league_id)
}

// optional uint32 team_index = 2;
bool CMsgDOTAEditFantasyTeamRequest::has_team_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAEditFantasyTeamRequest::set_has_team_index() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAEditFantasyTeamRequest::clear_has_team_index() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAEditFantasyTeamRequest::clear_team_index() {
  team_index_ = 0u;
  clear_has_team_index();
}
::google::protobuf::uint32 CMsgDOTAEditFantasyTeamRequest::team_index() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAEditFantasyTeamRequest.team_index)
  return team_index_;
}
void CMsgDOTAEditFantasyTeamRequest::set_team_index(::google::protobuf::uint32 value) {
  set_has_team_index();
  team_index_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAEditFantasyTeamRequest.team_index)
}

// optional string team_name = 3;
bool CMsgDOTAEditFantasyTeamRequest::has_team_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAEditFantasyTeamRequest::set_has_team_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAEditFantasyTeamRequest::clear_has_team_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAEditFantasyTeamRequest::clear_team_name() {
  team_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_team_name();
}
const ::std::string& CMsgDOTAEditFantasyTeamRequest::team_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAEditFantasyTeamRequest.team_name)
  return team_name_.GetNoArena();
}
void CMsgDOTAEditFantasyTeamRequest::set_team_name(const ::std::string& value) {
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAEditFantasyTeamRequest.team_name)
}
#if LANG_CXX11
void CMsgDOTAEditFantasyTeamRequest::set_team_name(::std::string&& value) {
  set_has_team_name();
  team_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAEditFantasyTeamRequest.team_name)
}
#endif
void CMsgDOTAEditFantasyTeamRequest::set_team_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAEditFantasyTeamRequest.team_name)
}
void CMsgDOTAEditFantasyTeamRequest::set_team_name(const char* value, size_t size) {
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAEditFantasyTeamRequest.team_name)
}
::std::string* CMsgDOTAEditFantasyTeamRequest::mutable_team_name() {
  set_has_team_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAEditFantasyTeamRequest.team_name)
  return team_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTAEditFantasyTeamRequest::release_team_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAEditFantasyTeamRequest.team_name)
  clear_has_team_name();
  return team_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTAEditFantasyTeamRequest::set_allocated_team_name(::std::string* team_name) {
  if (team_name != NULL) {
    set_has_team_name();
  } else {
    clear_has_team_name();
  }
  team_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), team_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAEditFantasyTeamRequest.team_name)
}

// optional uint64 team_logo = 4;
bool CMsgDOTAEditFantasyTeamRequest::has_team_logo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTAEditFantasyTeamRequest::set_has_team_logo() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTAEditFantasyTeamRequest::clear_has_team_logo() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTAEditFantasyTeamRequest::clear_team_logo() {
  team_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_team_logo();
}
::google::protobuf::uint64 CMsgDOTAEditFantasyTeamRequest::team_logo() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAEditFantasyTeamRequest.team_logo)
  return team_logo_;
}
void CMsgDOTAEditFantasyTeamRequest::set_team_logo(::google::protobuf::uint64 value) {
  set_has_team_logo();
  team_logo_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAEditFantasyTeamRequest.team_logo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAEditFantasyTeamResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAEditFantasyTeamResponse::CMsgDOTAEditFantasyTeamResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAEditFantasyTeamResponse)
}
CMsgDOTAEditFantasyTeamResponse::CMsgDOTAEditFantasyTeamResponse(const CMsgDOTAEditFantasyTeamResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAEditFantasyTeamResponse)
}

void CMsgDOTAEditFantasyTeamResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
}

CMsgDOTAEditFantasyTeamResponse::~CMsgDOTAEditFantasyTeamResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAEditFantasyTeamResponse)
  SharedDtor();
}

void CMsgDOTAEditFantasyTeamResponse::SharedDtor() {
}

void CMsgDOTAEditFantasyTeamResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAEditFantasyTeamResponse::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAEditFantasyTeamResponse& CMsgDOTAEditFantasyTeamResponse::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAEditFantasyTeamResponse* CMsgDOTAEditFantasyTeamResponse::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAEditFantasyTeamResponse* n = new CMsgDOTAEditFantasyTeamResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAEditFantasyTeamResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAEditFantasyTeamResponse)
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAEditFantasyTeamResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAEditFantasyTeamResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgDOTAEditFantasyTeamResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgDOTAEditFantasyTeamResponse_EResult_IsValid(value)) {
            set_result(static_cast< ::proto::dota::CMsgDOTAEditFantasyTeamResponse_EResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAEditFantasyTeamResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAEditFantasyTeamResponse)
  return false;
#undef DO_
}

void CMsgDOTAEditFantasyTeamResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAEditFantasyTeamResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAEditFantasyTeamResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAEditFantasyTeamResponse)
}

::google::protobuf::uint8* CMsgDOTAEditFantasyTeamResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAEditFantasyTeamResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAEditFantasyTeamResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAEditFantasyTeamResponse)
  return target;
}

size_t CMsgDOTAEditFantasyTeamResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAEditFantasyTeamResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .proto.dota.CMsgDOTAEditFantasyTeamResponse.EResult result = 1 [default = SUCCESS];
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAEditFantasyTeamResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAEditFantasyTeamResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAEditFantasyTeamResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAEditFantasyTeamResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAEditFantasyTeamResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAEditFantasyTeamResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAEditFantasyTeamResponse::MergeFrom(const CMsgDOTAEditFantasyTeamResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAEditFantasyTeamResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void CMsgDOTAEditFantasyTeamResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAEditFantasyTeamResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAEditFantasyTeamResponse::CopyFrom(const CMsgDOTAEditFantasyTeamResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAEditFantasyTeamResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAEditFantasyTeamResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAEditFantasyTeamResponse::Swap(CMsgDOTAEditFantasyTeamResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAEditFantasyTeamResponse::InternalSwap(CMsgDOTAEditFantasyTeamResponse* other) {
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAEditFantasyTeamResponse::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAEditFantasyTeamResponse

// optional .proto.dota.CMsgDOTAEditFantasyTeamResponse.EResult result = 1 [default = SUCCESS];
bool CMsgDOTAEditFantasyTeamResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAEditFantasyTeamResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAEditFantasyTeamResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAEditFantasyTeamResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
::proto::dota::CMsgDOTAEditFantasyTeamResponse_EResult CMsgDOTAEditFantasyTeamResponse::result() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAEditFantasyTeamResponse.result)
  return static_cast< ::proto::dota::CMsgDOTAEditFantasyTeamResponse_EResult >(result_);
}
void CMsgDOTAEditFantasyTeamResponse::set_result(::proto::dota::CMsgDOTAEditFantasyTeamResponse_EResult value) {
  assert(::proto::dota::CMsgDOTAEditFantasyTeamResponse_EResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAEditFantasyTeamResponse.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::kFantasyLeagueIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID)
}
CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID(const CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fantasy_league_id_ = from.fantasy_league_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID)
}

void CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::SharedCtor() {
  _cached_size_ = 0;
  fantasy_league_id_ = 0u;
}

CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::~CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID)
  SharedDtor();
}

void CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::SharedDtor() {
}

void CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID& CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID* CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID* n = new CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID)
  fantasy_league_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_fantasy_league_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID)
  return false;
#undef DO_
}

void CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fantasy_league_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID)
}

::google::protobuf::uint8* CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fantasy_league_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID)
  return target;
}

size_t CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 fantasy_league_id = 1;
  if (has_fantasy_league_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->fantasy_league_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::MergeFrom(const CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_fantasy_league_id()) {
    set_fantasy_league_id(from.fantasy_league_id());
  }
}

void CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::CopyFrom(const CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::Swap(CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::InternalSwap(CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID* other) {
  std::swap(fantasy_league_id_, other->fantasy_league_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID

// optional uint32 fantasy_league_id = 1;
bool CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::has_fantasy_league_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::set_has_fantasy_league_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::clear_has_fantasy_league_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  clear_has_fantasy_league_id();
}
::google::protobuf::uint32 CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID.fantasy_league_id)
  return fantasy_league_id_;
}
void CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::set_fantasy_league_id(::google::protobuf::uint32 value) {
  set_has_fantasy_league_id();
  fantasy_league_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID.fantasy_league_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::kOwnerAccountIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID)
}
CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID(const CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  owner_account_id_ = from.owner_account_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID)
}

void CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::SharedCtor() {
  _cached_size_ = 0;
  owner_account_id_ = 0u;
}

CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::~CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID)
  SharedDtor();
}

void CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::SharedDtor() {
}

void CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID& CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID* CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID* n = new CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID)
  owner_account_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 owner_account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_owner_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &owner_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID)
  return false;
#undef DO_
}

void CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 owner_account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->owner_account_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID)
}

::google::protobuf::uint8* CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 owner_account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->owner_account_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID)
  return target;
}

size_t CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 owner_account_id = 1;
  if (has_owner_account_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->owner_account_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::MergeFrom(const CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_owner_account_id()) {
    set_owner_account_id(from.owner_account_id());
  }
}

void CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::CopyFrom(const CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::Swap(CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::InternalSwap(CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID* other) {
  std::swap(owner_account_id_, other->owner_account_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID

// optional uint32 owner_account_id = 1;
bool CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::has_owner_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::set_has_owner_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::clear_has_owner_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::clear_owner_account_id() {
  owner_account_id_ = 0u;
  clear_has_owner_account_id();
}
::google::protobuf::uint32 CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::owner_account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID.owner_account_id)
  return owner_account_id_;
}
void CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::set_owner_account_id(::google::protobuf::uint32 value) {
  set_has_owner_account_id();
  owner_account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID.owner_account_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyTeamInfoResponse::kResultsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyTeamInfoResponse::CMsgDOTAFantasyTeamInfoResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyTeamInfoResponse)
}
CMsgDOTAFantasyTeamInfoResponse::CMsgDOTAFantasyTeamInfoResponse(const CMsgDOTAFantasyTeamInfoResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      results_(from.results_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyTeamInfoResponse)
}

void CMsgDOTAFantasyTeamInfoResponse::SharedCtor() {
  _cached_size_ = 0;
}

CMsgDOTAFantasyTeamInfoResponse::~CMsgDOTAFantasyTeamInfoResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyTeamInfoResponse)
  SharedDtor();
}

void CMsgDOTAFantasyTeamInfoResponse::SharedDtor() {
}

void CMsgDOTAFantasyTeamInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyTeamInfoResponse::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAFantasyTeamInfoResponse& CMsgDOTAFantasyTeamInfoResponse::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAFantasyTeamInfoResponse* CMsgDOTAFantasyTeamInfoResponse::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyTeamInfoResponse* n = new CMsgDOTAFantasyTeamInfoResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyTeamInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyTeamInfoResponse)
  results_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAFantasyTeamInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyTeamInfoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgDOTAFantasyTeamInfo results = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_results()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyTeamInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyTeamInfoResponse)
  return false;
#undef DO_
}

void CMsgDOTAFantasyTeamInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyTeamInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTAFantasyTeamInfo results = 1;
  for (unsigned int i = 0, n = this->results_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->results(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyTeamInfoResponse)
}

::google::protobuf::uint8* CMsgDOTAFantasyTeamInfoResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyTeamInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTAFantasyTeamInfo results = 1;
  for (unsigned int i = 0, n = this->results_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->results(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyTeamInfoResponse)
  return target;
}

size_t CMsgDOTAFantasyTeamInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyTeamInfoResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgDOTAFantasyTeamInfo results = 1;
  {
    unsigned int count = this->results_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->results(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyTeamInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyTeamInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyTeamInfoResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyTeamInfoResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyTeamInfoResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyTeamInfoResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyTeamInfoResponse::MergeFrom(const CMsgDOTAFantasyTeamInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyTeamInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
}

void CMsgDOTAFantasyTeamInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyTeamInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyTeamInfoResponse::CopyFrom(const CMsgDOTAFantasyTeamInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyTeamInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyTeamInfoResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyTeamInfoResponse::Swap(CMsgDOTAFantasyTeamInfoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyTeamInfoResponse::InternalSwap(CMsgDOTAFantasyTeamInfoResponse* other) {
  results_.InternalSwap(&other->results_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyTeamInfoResponse::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyTeamInfoResponse

// repeated .proto.dota.CMsgDOTAFantasyTeamInfo results = 1;
int CMsgDOTAFantasyTeamInfoResponse::results_size() const {
  return results_.size();
}
void CMsgDOTAFantasyTeamInfoResponse::clear_results() {
  results_.Clear();
}
const ::proto::dota::CMsgDOTAFantasyTeamInfo& CMsgDOTAFantasyTeamInfoResponse::results(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyTeamInfoResponse.results)
  return results_.Get(index);
}
::proto::dota::CMsgDOTAFantasyTeamInfo* CMsgDOTAFantasyTeamInfoResponse::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAFantasyTeamInfoResponse.results)
  return results_.Mutable(index);
}
::proto::dota::CMsgDOTAFantasyTeamInfo* CMsgDOTAFantasyTeamInfoResponse::add_results() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTAFantasyTeamInfoResponse.results)
  return results_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAFantasyTeamInfo >*
CMsgDOTAFantasyTeamInfoResponse::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTAFantasyTeamInfoResponse.results)
  return &results_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAFantasyTeamInfo >&
CMsgDOTAFantasyTeamInfoResponse::results() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTAFantasyTeamInfoResponse.results)
  return results_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyTeamInfo::kFantasyLeagueIdFieldNumber;
const int CMsgDOTAFantasyTeamInfo::kOwnerAccountIdFieldNumber;
const int CMsgDOTAFantasyTeamInfo::kFantasyTeamIndexFieldNumber;
const int CMsgDOTAFantasyTeamInfo::kTeamNameFieldNumber;
const int CMsgDOTAFantasyTeamInfo::kTeamLogoFieldNumber;
const int CMsgDOTAFantasyTeamInfo::kWinsFieldNumber;
const int CMsgDOTAFantasyTeamInfo::kLossesFieldNumber;
const int CMsgDOTAFantasyTeamInfo::kCurrentRosterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyTeamInfo::CMsgDOTAFantasyTeamInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyTeamInfo)
}
CMsgDOTAFantasyTeamInfo::CMsgDOTAFantasyTeamInfo(const CMsgDOTAFantasyTeamInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      current_roster_(from.current_roster_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_team_name()) {
    team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_);
  }
  ::memcpy(&fantasy_league_id_, &from.fantasy_league_id_,
    reinterpret_cast<char*>(&losses_) -
    reinterpret_cast<char*>(&fantasy_league_id_) + sizeof(losses_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyTeamInfo)
}

void CMsgDOTAFantasyTeamInfo::SharedCtor() {
  _cached_size_ = 0;
  team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&fantasy_league_id_, 0, reinterpret_cast<char*>(&losses_) -
    reinterpret_cast<char*>(&fantasy_league_id_) + sizeof(losses_));
}

CMsgDOTAFantasyTeamInfo::~CMsgDOTAFantasyTeamInfo() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyTeamInfo)
  SharedDtor();
}

void CMsgDOTAFantasyTeamInfo::SharedDtor() {
  team_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTAFantasyTeamInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyTeamInfo::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAFantasyTeamInfo& CMsgDOTAFantasyTeamInfo::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAFantasyTeamInfo* CMsgDOTAFantasyTeamInfo::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyTeamInfo* n = new CMsgDOTAFantasyTeamInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyTeamInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyTeamInfo)
  current_roster_.Clear();
  if (has_team_name()) {
    GOOGLE_DCHECK(!team_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*team_name_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 126u) {
    ::memset(&fantasy_league_id_, 0, reinterpret_cast<char*>(&losses_) -
      reinterpret_cast<char*>(&fantasy_league_id_) + sizeof(losses_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAFantasyTeamInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyTeamInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_fantasy_league_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 owner_account_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_owner_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &owner_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 fantasy_team_index = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_fantasy_team_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_team_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string team_name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team_name().data(), this->team_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAFantasyTeamInfo.team_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 team_logo = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_team_logo();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &team_logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 wins = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_wins();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wins_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 losses = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_losses();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &losses_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 current_roster = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 64u, input, this->mutable_current_roster())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(66u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_current_roster())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyTeamInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyTeamInfo)
  return false;
#undef DO_
}

void CMsgDOTAFantasyTeamInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyTeamInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fantasy_league_id(), output);
  }

  // optional uint32 owner_account_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->owner_account_id(), output);
  }

  // optional uint32 fantasy_team_index = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->fantasy_team_index(), output);
  }

  // optional string team_name = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAFantasyTeamInfo.team_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->team_name(), output);
  }

  // optional uint64 team_logo = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->team_logo(), output);
  }

  // optional uint32 wins = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->wins(), output);
  }

  // optional uint32 losses = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->losses(), output);
  }

  // repeated uint32 current_roster = 8;
  for (int i = 0, n = this->current_roster_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      8, this->current_roster(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyTeamInfo)
}

::google::protobuf::uint8* CMsgDOTAFantasyTeamInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyTeamInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fantasy_league_id(), target);
  }

  // optional uint32 owner_account_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->owner_account_id(), target);
  }

  // optional uint32 fantasy_team_index = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->fantasy_team_index(), target);
  }

  // optional string team_name = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAFantasyTeamInfo.team_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->team_name(), target);
  }

  // optional uint64 team_logo = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->team_logo(), target);
  }

  // optional uint32 wins = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->wins(), target);
  }

  // optional uint32 losses = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->losses(), target);
  }

  // repeated uint32 current_roster = 8;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(8, this->current_roster_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyTeamInfo)
  return target;
}

size_t CMsgDOTAFantasyTeamInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyTeamInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 current_roster = 8;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->current_roster_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->current_roster_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 127u) {
    // optional string team_name = 4;
    if (has_team_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_name());
    }

    // optional uint32 fantasy_league_id = 1;
    if (has_fantasy_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_league_id());
    }

    // optional uint32 owner_account_id = 2;
    if (has_owner_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->owner_account_id());
    }

    // optional uint32 fantasy_team_index = 3;
    if (has_fantasy_team_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_team_index());
    }

    // optional uint32 wins = 6;
    if (has_wins()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wins());
    }

    // optional uint64 team_logo = 5;
    if (has_team_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->team_logo());
    }

    // optional uint32 losses = 7;
    if (has_losses()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->losses());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyTeamInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyTeamInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyTeamInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyTeamInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyTeamInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyTeamInfo)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyTeamInfo::MergeFrom(const CMsgDOTAFantasyTeamInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyTeamInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  current_roster_.MergeFrom(from.current_roster_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_team_name();
      team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      fantasy_league_id_ = from.fantasy_league_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      owner_account_id_ = from.owner_account_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      fantasy_team_index_ = from.fantasy_team_index_;
    }
    if (cached_has_bits & 0x00000010u) {
      wins_ = from.wins_;
    }
    if (cached_has_bits & 0x00000020u) {
      team_logo_ = from.team_logo_;
    }
    if (cached_has_bits & 0x00000040u) {
      losses_ = from.losses_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyTeamInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyTeamInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyTeamInfo::CopyFrom(const CMsgDOTAFantasyTeamInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyTeamInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyTeamInfo::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyTeamInfo::Swap(CMsgDOTAFantasyTeamInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyTeamInfo::InternalSwap(CMsgDOTAFantasyTeamInfo* other) {
  current_roster_.InternalSwap(&other->current_roster_);
  team_name_.Swap(&other->team_name_);
  std::swap(fantasy_league_id_, other->fantasy_league_id_);
  std::swap(owner_account_id_, other->owner_account_id_);
  std::swap(fantasy_team_index_, other->fantasy_team_index_);
  std::swap(wins_, other->wins_);
  std::swap(team_logo_, other->team_logo_);
  std::swap(losses_, other->losses_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyTeamInfo::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyTeamInfo

// optional uint32 fantasy_league_id = 1;
bool CMsgDOTAFantasyTeamInfo::has_fantasy_league_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAFantasyTeamInfo::set_has_fantasy_league_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAFantasyTeamInfo::clear_has_fantasy_league_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAFantasyTeamInfo::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  clear_has_fantasy_league_id();
}
::google::protobuf::uint32 CMsgDOTAFantasyTeamInfo::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyTeamInfo.fantasy_league_id)
  return fantasy_league_id_;
}
void CMsgDOTAFantasyTeamInfo::set_fantasy_league_id(::google::protobuf::uint32 value) {
  set_has_fantasy_league_id();
  fantasy_league_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyTeamInfo.fantasy_league_id)
}

// optional uint32 owner_account_id = 2;
bool CMsgDOTAFantasyTeamInfo::has_owner_account_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAFantasyTeamInfo::set_has_owner_account_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAFantasyTeamInfo::clear_has_owner_account_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAFantasyTeamInfo::clear_owner_account_id() {
  owner_account_id_ = 0u;
  clear_has_owner_account_id();
}
::google::protobuf::uint32 CMsgDOTAFantasyTeamInfo::owner_account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyTeamInfo.owner_account_id)
  return owner_account_id_;
}
void CMsgDOTAFantasyTeamInfo::set_owner_account_id(::google::protobuf::uint32 value) {
  set_has_owner_account_id();
  owner_account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyTeamInfo.owner_account_id)
}

// optional uint32 fantasy_team_index = 3;
bool CMsgDOTAFantasyTeamInfo::has_fantasy_team_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTAFantasyTeamInfo::set_has_fantasy_team_index() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTAFantasyTeamInfo::clear_has_fantasy_team_index() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTAFantasyTeamInfo::clear_fantasy_team_index() {
  fantasy_team_index_ = 0u;
  clear_has_fantasy_team_index();
}
::google::protobuf::uint32 CMsgDOTAFantasyTeamInfo::fantasy_team_index() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyTeamInfo.fantasy_team_index)
  return fantasy_team_index_;
}
void CMsgDOTAFantasyTeamInfo::set_fantasy_team_index(::google::protobuf::uint32 value) {
  set_has_fantasy_team_index();
  fantasy_team_index_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyTeamInfo.fantasy_team_index)
}

// optional string team_name = 4;
bool CMsgDOTAFantasyTeamInfo::has_team_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyTeamInfo::set_has_team_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyTeamInfo::clear_has_team_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyTeamInfo::clear_team_name() {
  team_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_team_name();
}
const ::std::string& CMsgDOTAFantasyTeamInfo::team_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyTeamInfo.team_name)
  return team_name_.GetNoArena();
}
void CMsgDOTAFantasyTeamInfo::set_team_name(const ::std::string& value) {
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyTeamInfo.team_name)
}
#if LANG_CXX11
void CMsgDOTAFantasyTeamInfo::set_team_name(::std::string&& value) {
  set_has_team_name();
  team_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAFantasyTeamInfo.team_name)
}
#endif
void CMsgDOTAFantasyTeamInfo::set_team_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAFantasyTeamInfo.team_name)
}
void CMsgDOTAFantasyTeamInfo::set_team_name(const char* value, size_t size) {
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAFantasyTeamInfo.team_name)
}
::std::string* CMsgDOTAFantasyTeamInfo::mutable_team_name() {
  set_has_team_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAFantasyTeamInfo.team_name)
  return team_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTAFantasyTeamInfo::release_team_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAFantasyTeamInfo.team_name)
  clear_has_team_name();
  return team_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTAFantasyTeamInfo::set_allocated_team_name(::std::string* team_name) {
  if (team_name != NULL) {
    set_has_team_name();
  } else {
    clear_has_team_name();
  }
  team_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), team_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAFantasyTeamInfo.team_name)
}

// optional uint64 team_logo = 5;
bool CMsgDOTAFantasyTeamInfo::has_team_logo() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgDOTAFantasyTeamInfo::set_has_team_logo() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgDOTAFantasyTeamInfo::clear_has_team_logo() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgDOTAFantasyTeamInfo::clear_team_logo() {
  team_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_team_logo();
}
::google::protobuf::uint64 CMsgDOTAFantasyTeamInfo::team_logo() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyTeamInfo.team_logo)
  return team_logo_;
}
void CMsgDOTAFantasyTeamInfo::set_team_logo(::google::protobuf::uint64 value) {
  set_has_team_logo();
  team_logo_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyTeamInfo.team_logo)
}

// optional uint32 wins = 6;
bool CMsgDOTAFantasyTeamInfo::has_wins() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDOTAFantasyTeamInfo::set_has_wins() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDOTAFantasyTeamInfo::clear_has_wins() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDOTAFantasyTeamInfo::clear_wins() {
  wins_ = 0u;
  clear_has_wins();
}
::google::protobuf::uint32 CMsgDOTAFantasyTeamInfo::wins() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyTeamInfo.wins)
  return wins_;
}
void CMsgDOTAFantasyTeamInfo::set_wins(::google::protobuf::uint32 value) {
  set_has_wins();
  wins_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyTeamInfo.wins)
}

// optional uint32 losses = 7;
bool CMsgDOTAFantasyTeamInfo::has_losses() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgDOTAFantasyTeamInfo::set_has_losses() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgDOTAFantasyTeamInfo::clear_has_losses() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgDOTAFantasyTeamInfo::clear_losses() {
  losses_ = 0u;
  clear_has_losses();
}
::google::protobuf::uint32 CMsgDOTAFantasyTeamInfo::losses() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyTeamInfo.losses)
  return losses_;
}
void CMsgDOTAFantasyTeamInfo::set_losses(::google::protobuf::uint32 value) {
  set_has_losses();
  losses_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyTeamInfo.losses)
}

// repeated uint32 current_roster = 8;
int CMsgDOTAFantasyTeamInfo::current_roster_size() const {
  return current_roster_.size();
}
void CMsgDOTAFantasyTeamInfo::clear_current_roster() {
  current_roster_.Clear();
}
::google::protobuf::uint32 CMsgDOTAFantasyTeamInfo::current_roster(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyTeamInfo.current_roster)
  return current_roster_.Get(index);
}
void CMsgDOTAFantasyTeamInfo::set_current_roster(int index, ::google::protobuf::uint32 value) {
  current_roster_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyTeamInfo.current_roster)
}
void CMsgDOTAFantasyTeamInfo::add_current_roster(::google::protobuf::uint32 value) {
  current_roster_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTAFantasyTeamInfo.current_roster)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgDOTAFantasyTeamInfo::current_roster() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTAFantasyTeamInfo.current_roster)
  return current_roster_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgDOTAFantasyTeamInfo::mutable_current_roster() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTAFantasyTeamInfo.current_roster)
  return &current_roster_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyTeamScoreRequest::kFantasyLeagueIdFieldNumber;
const int CMsgDOTAFantasyTeamScoreRequest::kOwnerAccountIdFieldNumber;
const int CMsgDOTAFantasyTeamScoreRequest::kFantasyTeamIndexFieldNumber;
const int CMsgDOTAFantasyTeamScoreRequest::kFilterMatchIdFieldNumber;
const int CMsgDOTAFantasyTeamScoreRequest::kFilterStartTimeFieldNumber;
const int CMsgDOTAFantasyTeamScoreRequest::kFilterEndTimeFieldNumber;
const int CMsgDOTAFantasyTeamScoreRequest::kIncludeBenchFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyTeamScoreRequest::CMsgDOTAFantasyTeamScoreRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyTeamScoreRequest)
}
CMsgDOTAFantasyTeamScoreRequest::CMsgDOTAFantasyTeamScoreRequest(const CMsgDOTAFantasyTeamScoreRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&fantasy_league_id_, &from.fantasy_league_id_,
    reinterpret_cast<char*>(&include_bench_) -
    reinterpret_cast<char*>(&fantasy_league_id_) + sizeof(include_bench_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyTeamScoreRequest)
}

void CMsgDOTAFantasyTeamScoreRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&fantasy_league_id_, 0, reinterpret_cast<char*>(&include_bench_) -
    reinterpret_cast<char*>(&fantasy_league_id_) + sizeof(include_bench_));
}

CMsgDOTAFantasyTeamScoreRequest::~CMsgDOTAFantasyTeamScoreRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyTeamScoreRequest)
  SharedDtor();
}

void CMsgDOTAFantasyTeamScoreRequest::SharedDtor() {
}

void CMsgDOTAFantasyTeamScoreRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyTeamScoreRequest::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAFantasyTeamScoreRequest& CMsgDOTAFantasyTeamScoreRequest::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAFantasyTeamScoreRequest* CMsgDOTAFantasyTeamScoreRequest::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyTeamScoreRequest* n = new CMsgDOTAFantasyTeamScoreRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyTeamScoreRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyTeamScoreRequest)
  if (_has_bits_[0 / 32] & 127u) {
    ::memset(&fantasy_league_id_, 0, reinterpret_cast<char*>(&include_bench_) -
      reinterpret_cast<char*>(&fantasy_league_id_) + sizeof(include_bench_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAFantasyTeamScoreRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyTeamScoreRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_fantasy_league_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 owner_account_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_owner_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &owner_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 fantasy_team_index = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_fantasy_team_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_team_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 filter_match_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_filter_match_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &filter_match_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 filter_start_time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_filter_start_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &filter_start_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 filter_end_time = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_filter_end_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &filter_end_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool include_bench = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_include_bench();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &include_bench_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyTeamScoreRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyTeamScoreRequest)
  return false;
#undef DO_
}

void CMsgDOTAFantasyTeamScoreRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyTeamScoreRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fantasy_league_id(), output);
  }

  // optional uint32 owner_account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->owner_account_id(), output);
  }

  // optional uint32 fantasy_team_index = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->fantasy_team_index(), output);
  }

  // optional uint64 filter_match_id = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->filter_match_id(), output);
  }

  // optional uint32 filter_start_time = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->filter_start_time(), output);
  }

  // optional uint32 filter_end_time = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->filter_end_time(), output);
  }

  // optional bool include_bench = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->include_bench(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyTeamScoreRequest)
}

::google::protobuf::uint8* CMsgDOTAFantasyTeamScoreRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyTeamScoreRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fantasy_league_id(), target);
  }

  // optional uint32 owner_account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->owner_account_id(), target);
  }

  // optional uint32 fantasy_team_index = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->fantasy_team_index(), target);
  }

  // optional uint64 filter_match_id = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->filter_match_id(), target);
  }

  // optional uint32 filter_start_time = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->filter_start_time(), target);
  }

  // optional uint32 filter_end_time = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->filter_end_time(), target);
  }

  // optional bool include_bench = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->include_bench(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyTeamScoreRequest)
  return target;
}

size_t CMsgDOTAFantasyTeamScoreRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyTeamScoreRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional uint32 fantasy_league_id = 1;
    if (has_fantasy_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_league_id());
    }

    // optional uint32 owner_account_id = 2;
    if (has_owner_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->owner_account_id());
    }

    // optional uint64 filter_match_id = 4;
    if (has_filter_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->filter_match_id());
    }

    // optional uint32 fantasy_team_index = 3;
    if (has_fantasy_team_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_team_index());
    }

    // optional uint32 filter_start_time = 5;
    if (has_filter_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->filter_start_time());
    }

    // optional uint32 filter_end_time = 6;
    if (has_filter_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->filter_end_time());
    }

    // optional bool include_bench = 7;
    if (has_include_bench()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyTeamScoreRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyTeamScoreRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyTeamScoreRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyTeamScoreRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyTeamScoreRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyTeamScoreRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyTeamScoreRequest::MergeFrom(const CMsgDOTAFantasyTeamScoreRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyTeamScoreRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      fantasy_league_id_ = from.fantasy_league_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      owner_account_id_ = from.owner_account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      filter_match_id_ = from.filter_match_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      fantasy_team_index_ = from.fantasy_team_index_;
    }
    if (cached_has_bits & 0x00000010u) {
      filter_start_time_ = from.filter_start_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      filter_end_time_ = from.filter_end_time_;
    }
    if (cached_has_bits & 0x00000040u) {
      include_bench_ = from.include_bench_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyTeamScoreRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyTeamScoreRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyTeamScoreRequest::CopyFrom(const CMsgDOTAFantasyTeamScoreRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyTeamScoreRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyTeamScoreRequest::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyTeamScoreRequest::Swap(CMsgDOTAFantasyTeamScoreRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyTeamScoreRequest::InternalSwap(CMsgDOTAFantasyTeamScoreRequest* other) {
  std::swap(fantasy_league_id_, other->fantasy_league_id_);
  std::swap(owner_account_id_, other->owner_account_id_);
  std::swap(filter_match_id_, other->filter_match_id_);
  std::swap(fantasy_team_index_, other->fantasy_team_index_);
  std::swap(filter_start_time_, other->filter_start_time_);
  std::swap(filter_end_time_, other->filter_end_time_);
  std::swap(include_bench_, other->include_bench_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyTeamScoreRequest::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyTeamScoreRequest

// optional uint32 fantasy_league_id = 1;
bool CMsgDOTAFantasyTeamScoreRequest::has_fantasy_league_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyTeamScoreRequest::set_has_fantasy_league_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyTeamScoreRequest::clear_has_fantasy_league_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyTeamScoreRequest::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  clear_has_fantasy_league_id();
}
::google::protobuf::uint32 CMsgDOTAFantasyTeamScoreRequest::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyTeamScoreRequest.fantasy_league_id)
  return fantasy_league_id_;
}
void CMsgDOTAFantasyTeamScoreRequest::set_fantasy_league_id(::google::protobuf::uint32 value) {
  set_has_fantasy_league_id();
  fantasy_league_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyTeamScoreRequest.fantasy_league_id)
}

// optional uint32 owner_account_id = 2;
bool CMsgDOTAFantasyTeamScoreRequest::has_owner_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAFantasyTeamScoreRequest::set_has_owner_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAFantasyTeamScoreRequest::clear_has_owner_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAFantasyTeamScoreRequest::clear_owner_account_id() {
  owner_account_id_ = 0u;
  clear_has_owner_account_id();
}
::google::protobuf::uint32 CMsgDOTAFantasyTeamScoreRequest::owner_account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyTeamScoreRequest.owner_account_id)
  return owner_account_id_;
}
void CMsgDOTAFantasyTeamScoreRequest::set_owner_account_id(::google::protobuf::uint32 value) {
  set_has_owner_account_id();
  owner_account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyTeamScoreRequest.owner_account_id)
}

// optional uint32 fantasy_team_index = 3;
bool CMsgDOTAFantasyTeamScoreRequest::has_fantasy_team_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTAFantasyTeamScoreRequest::set_has_fantasy_team_index() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTAFantasyTeamScoreRequest::clear_has_fantasy_team_index() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTAFantasyTeamScoreRequest::clear_fantasy_team_index() {
  fantasy_team_index_ = 0u;
  clear_has_fantasy_team_index();
}
::google::protobuf::uint32 CMsgDOTAFantasyTeamScoreRequest::fantasy_team_index() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyTeamScoreRequest.fantasy_team_index)
  return fantasy_team_index_;
}
void CMsgDOTAFantasyTeamScoreRequest::set_fantasy_team_index(::google::protobuf::uint32 value) {
  set_has_fantasy_team_index();
  fantasy_team_index_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyTeamScoreRequest.fantasy_team_index)
}

// optional uint64 filter_match_id = 4;
bool CMsgDOTAFantasyTeamScoreRequest::has_filter_match_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAFantasyTeamScoreRequest::set_has_filter_match_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAFantasyTeamScoreRequest::clear_has_filter_match_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAFantasyTeamScoreRequest::clear_filter_match_id() {
  filter_match_id_ = GOOGLE_ULONGLONG(0);
  clear_has_filter_match_id();
}
::google::protobuf::uint64 CMsgDOTAFantasyTeamScoreRequest::filter_match_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyTeamScoreRequest.filter_match_id)
  return filter_match_id_;
}
void CMsgDOTAFantasyTeamScoreRequest::set_filter_match_id(::google::protobuf::uint64 value) {
  set_has_filter_match_id();
  filter_match_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyTeamScoreRequest.filter_match_id)
}

// optional uint32 filter_start_time = 5;
bool CMsgDOTAFantasyTeamScoreRequest::has_filter_start_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDOTAFantasyTeamScoreRequest::set_has_filter_start_time() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDOTAFantasyTeamScoreRequest::clear_has_filter_start_time() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDOTAFantasyTeamScoreRequest::clear_filter_start_time() {
  filter_start_time_ = 0u;
  clear_has_filter_start_time();
}
::google::protobuf::uint32 CMsgDOTAFantasyTeamScoreRequest::filter_start_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyTeamScoreRequest.filter_start_time)
  return filter_start_time_;
}
void CMsgDOTAFantasyTeamScoreRequest::set_filter_start_time(::google::protobuf::uint32 value) {
  set_has_filter_start_time();
  filter_start_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyTeamScoreRequest.filter_start_time)
}

// optional uint32 filter_end_time = 6;
bool CMsgDOTAFantasyTeamScoreRequest::has_filter_end_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgDOTAFantasyTeamScoreRequest::set_has_filter_end_time() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgDOTAFantasyTeamScoreRequest::clear_has_filter_end_time() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgDOTAFantasyTeamScoreRequest::clear_filter_end_time() {
  filter_end_time_ = 0u;
  clear_has_filter_end_time();
}
::google::protobuf::uint32 CMsgDOTAFantasyTeamScoreRequest::filter_end_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyTeamScoreRequest.filter_end_time)
  return filter_end_time_;
}
void CMsgDOTAFantasyTeamScoreRequest::set_filter_end_time(::google::protobuf::uint32 value) {
  set_has_filter_end_time();
  filter_end_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyTeamScoreRequest.filter_end_time)
}

// optional bool include_bench = 7;
bool CMsgDOTAFantasyTeamScoreRequest::has_include_bench() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgDOTAFantasyTeamScoreRequest::set_has_include_bench() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgDOTAFantasyTeamScoreRequest::clear_has_include_bench() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgDOTAFantasyTeamScoreRequest::clear_include_bench() {
  include_bench_ = false;
  clear_has_include_bench();
}
bool CMsgDOTAFantasyTeamScoreRequest::include_bench() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyTeamScoreRequest.include_bench)
  return include_bench_;
}
void CMsgDOTAFantasyTeamScoreRequest::set_include_bench(bool value) {
  set_has_include_bench();
  include_bench_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyTeamScoreRequest.include_bench)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::kAccountIdFieldNumber;
const int CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::kScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyTeamScoreResponse.CMsgPlayerScore)
}
CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore(const CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&account_id_) + sizeof(score_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyTeamScoreResponse.CMsgPlayerScore)
}

void CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&account_id_, 0, reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&account_id_) + sizeof(score_));
}

CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::~CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyTeamScoreResponse.CMsgPlayerScore)
  SharedDtor();
}

void CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::SharedDtor() {
}

void CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore& CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore* CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore* n = new CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyTeamScoreResponse.CMsgPlayerScore)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&account_id_, 0, reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&account_id_) + sizeof(score_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyTeamScoreResponse.CMsgPlayerScore)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float score = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyTeamScoreResponse.CMsgPlayerScore)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyTeamScoreResponse.CMsgPlayerScore)
  return false;
#undef DO_
}

void CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyTeamScoreResponse.CMsgPlayerScore)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional float score = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->score(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyTeamScoreResponse.CMsgPlayerScore)
}

::google::protobuf::uint8* CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyTeamScoreResponse.CMsgPlayerScore)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional float score = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->score(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyTeamScoreResponse.CMsgPlayerScore)
  return target;
}

size_t CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyTeamScoreResponse.CMsgPlayerScore)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional float score = 2;
    if (has_score()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyTeamScoreResponse.CMsgPlayerScore)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyTeamScoreResponse.CMsgPlayerScore)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyTeamScoreResponse.CMsgPlayerScore)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::MergeFrom(const CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyTeamScoreResponse.CMsgPlayerScore)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      score_ = from.score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyTeamScoreResponse.CMsgPlayerScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::CopyFrom(const CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyTeamScoreResponse.CMsgPlayerScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::Swap(CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::InternalSwap(CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore* other) {
  std::swap(account_id_, other->account_id_);
  std::swap(score_, other->score_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore

// optional uint32 account_id = 1;
bool CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
::google::protobuf::uint32 CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyTeamScoreResponse.CMsgPlayerScore.account_id)
  return account_id_;
}
void CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyTeamScoreResponse.CMsgPlayerScore.account_id)
}

// optional float score = 2;
bool CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::has_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::set_has_score() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::clear_has_score() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::clear_score() {
  score_ = 0;
  clear_has_score();
}
float CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::score() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyTeamScoreResponse.CMsgPlayerScore.score)
  return score_;
}
void CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::set_score(float value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyTeamScoreResponse.CMsgPlayerScore.score)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyTeamScoreResponse::kResultFieldNumber;
const int CMsgDOTAFantasyTeamScoreResponse::kFantasyTeamScoreFieldNumber;
const int CMsgDOTAFantasyTeamScoreResponse::kFantasyPlayerScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyTeamScoreResponse::CMsgDOTAFantasyTeamScoreResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyTeamScoreResponse)
}
CMsgDOTAFantasyTeamScoreResponse::CMsgDOTAFantasyTeamScoreResponse(const CMsgDOTAFantasyTeamScoreResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      fantasy_player_score_(from.fantasy_player_score_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    reinterpret_cast<char*>(&fantasy_team_score_) -
    reinterpret_cast<char*>(&result_) + sizeof(fantasy_team_score_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyTeamScoreResponse)
}

void CMsgDOTAFantasyTeamScoreResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&result_, 0, reinterpret_cast<char*>(&fantasy_team_score_) -
    reinterpret_cast<char*>(&result_) + sizeof(fantasy_team_score_));
}

CMsgDOTAFantasyTeamScoreResponse::~CMsgDOTAFantasyTeamScoreResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyTeamScoreResponse)
  SharedDtor();
}

void CMsgDOTAFantasyTeamScoreResponse::SharedDtor() {
}

void CMsgDOTAFantasyTeamScoreResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyTeamScoreResponse::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAFantasyTeamScoreResponse& CMsgDOTAFantasyTeamScoreResponse::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAFantasyTeamScoreResponse* CMsgDOTAFantasyTeamScoreResponse::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyTeamScoreResponse* n = new CMsgDOTAFantasyTeamScoreResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyTeamScoreResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyTeamScoreResponse)
  fantasy_player_score_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&result_, 0, reinterpret_cast<char*>(&fantasy_team_score_) -
      reinterpret_cast<char*>(&result_) + sizeof(fantasy_team_score_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAFantasyTeamScoreResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyTeamScoreResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgDOTAFantasyTeamScoreResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgDOTAFantasyTeamScoreResponse_EResult_IsValid(value)) {
            set_result(static_cast< ::proto::dota::CMsgDOTAFantasyTeamScoreResponse_EResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float fantasy_team_score = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_fantasy_team_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fantasy_team_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTAFantasyTeamScoreResponse.CMsgPlayerScore fantasy_player_score = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fantasy_player_score()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyTeamScoreResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyTeamScoreResponse)
  return false;
#undef DO_
}

void CMsgDOTAFantasyTeamScoreResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyTeamScoreResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAFantasyTeamScoreResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional float fantasy_team_score = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->fantasy_team_score(), output);
  }

  // repeated .proto.dota.CMsgDOTAFantasyTeamScoreResponse.CMsgPlayerScore fantasy_player_score = 3;
  for (unsigned int i = 0, n = this->fantasy_player_score_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->fantasy_player_score(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyTeamScoreResponse)
}

::google::protobuf::uint8* CMsgDOTAFantasyTeamScoreResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyTeamScoreResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAFantasyTeamScoreResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional float fantasy_team_score = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->fantasy_team_score(), target);
  }

  // repeated .proto.dota.CMsgDOTAFantasyTeamScoreResponse.CMsgPlayerScore fantasy_player_score = 3;
  for (unsigned int i = 0, n = this->fantasy_player_score_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->fantasy_player_score(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyTeamScoreResponse)
  return target;
}

size_t CMsgDOTAFantasyTeamScoreResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyTeamScoreResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgDOTAFantasyTeamScoreResponse.CMsgPlayerScore fantasy_player_score = 3;
  {
    unsigned int count = this->fantasy_player_score_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fantasy_player_score(i));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional .proto.dota.CMsgDOTAFantasyTeamScoreResponse.EResult result = 1 [default = SUCCESS];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional float fantasy_team_score = 2;
    if (has_fantasy_team_score()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyTeamScoreResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyTeamScoreResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyTeamScoreResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyTeamScoreResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyTeamScoreResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyTeamScoreResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyTeamScoreResponse::MergeFrom(const CMsgDOTAFantasyTeamScoreResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyTeamScoreResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fantasy_player_score_.MergeFrom(from.fantasy_player_score_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000002u) {
      fantasy_team_score_ = from.fantasy_team_score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyTeamScoreResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyTeamScoreResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyTeamScoreResponse::CopyFrom(const CMsgDOTAFantasyTeamScoreResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyTeamScoreResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyTeamScoreResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyTeamScoreResponse::Swap(CMsgDOTAFantasyTeamScoreResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyTeamScoreResponse::InternalSwap(CMsgDOTAFantasyTeamScoreResponse* other) {
  fantasy_player_score_.InternalSwap(&other->fantasy_player_score_);
  std::swap(result_, other->result_);
  std::swap(fantasy_team_score_, other->fantasy_team_score_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyTeamScoreResponse::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyTeamScoreResponse

// optional .proto.dota.CMsgDOTAFantasyTeamScoreResponse.EResult result = 1 [default = SUCCESS];
bool CMsgDOTAFantasyTeamScoreResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyTeamScoreResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyTeamScoreResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyTeamScoreResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
::proto::dota::CMsgDOTAFantasyTeamScoreResponse_EResult CMsgDOTAFantasyTeamScoreResponse::result() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyTeamScoreResponse.result)
  return static_cast< ::proto::dota::CMsgDOTAFantasyTeamScoreResponse_EResult >(result_);
}
void CMsgDOTAFantasyTeamScoreResponse::set_result(::proto::dota::CMsgDOTAFantasyTeamScoreResponse_EResult value) {
  assert(::proto::dota::CMsgDOTAFantasyTeamScoreResponse_EResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyTeamScoreResponse.result)
}

// optional float fantasy_team_score = 2;
bool CMsgDOTAFantasyTeamScoreResponse::has_fantasy_team_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAFantasyTeamScoreResponse::set_has_fantasy_team_score() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAFantasyTeamScoreResponse::clear_has_fantasy_team_score() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAFantasyTeamScoreResponse::clear_fantasy_team_score() {
  fantasy_team_score_ = 0;
  clear_has_fantasy_team_score();
}
float CMsgDOTAFantasyTeamScoreResponse::fantasy_team_score() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyTeamScoreResponse.fantasy_team_score)
  return fantasy_team_score_;
}
void CMsgDOTAFantasyTeamScoreResponse::set_fantasy_team_score(float value) {
  set_has_fantasy_team_score();
  fantasy_team_score_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyTeamScoreResponse.fantasy_team_score)
}

// repeated .proto.dota.CMsgDOTAFantasyTeamScoreResponse.CMsgPlayerScore fantasy_player_score = 3;
int CMsgDOTAFantasyTeamScoreResponse::fantasy_player_score_size() const {
  return fantasy_player_score_.size();
}
void CMsgDOTAFantasyTeamScoreResponse::clear_fantasy_player_score() {
  fantasy_player_score_.Clear();
}
const ::proto::dota::CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore& CMsgDOTAFantasyTeamScoreResponse::fantasy_player_score(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyTeamScoreResponse.fantasy_player_score)
  return fantasy_player_score_.Get(index);
}
::proto::dota::CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore* CMsgDOTAFantasyTeamScoreResponse::mutable_fantasy_player_score(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAFantasyTeamScoreResponse.fantasy_player_score)
  return fantasy_player_score_.Mutable(index);
}
::proto::dota::CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore* CMsgDOTAFantasyTeamScoreResponse::add_fantasy_player_score() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTAFantasyTeamScoreResponse.fantasy_player_score)
  return fantasy_player_score_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore >*
CMsgDOTAFantasyTeamScoreResponse::mutable_fantasy_player_score() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTAFantasyTeamScoreResponse.fantasy_player_score)
  return &fantasy_player_score_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore >&
CMsgDOTAFantasyTeamScoreResponse::fantasy_player_score() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTAFantasyTeamScoreResponse.fantasy_player_score)
  return fantasy_player_score_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyTeamStandingsRequest::kFantasyLeagueIdFieldNumber;
const int CMsgDOTAFantasyTeamStandingsRequest::kCountFieldNumber;
const int CMsgDOTAFantasyTeamStandingsRequest::kFilterStartTimeFieldNumber;
const int CMsgDOTAFantasyTeamStandingsRequest::kFilterEndTimeFieldNumber;
const int CMsgDOTAFantasyTeamStandingsRequest::kFilterMatchIdFieldNumber;
const int CMsgDOTAFantasyTeamStandingsRequest::kFilterLastMatchFieldNumber;
const int CMsgDOTAFantasyTeamStandingsRequest::kFilterInHallFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyTeamStandingsRequest::CMsgDOTAFantasyTeamStandingsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyTeamStandingsRequest)
}
CMsgDOTAFantasyTeamStandingsRequest::CMsgDOTAFantasyTeamStandingsRequest(const CMsgDOTAFantasyTeamStandingsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&fantasy_league_id_, &from.fantasy_league_id_,
    reinterpret_cast<char*>(&filter_in_hall_) -
    reinterpret_cast<char*>(&fantasy_league_id_) + sizeof(filter_in_hall_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyTeamStandingsRequest)
}

void CMsgDOTAFantasyTeamStandingsRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&fantasy_league_id_, 0, reinterpret_cast<char*>(&filter_in_hall_) -
    reinterpret_cast<char*>(&fantasy_league_id_) + sizeof(filter_in_hall_));
}

CMsgDOTAFantasyTeamStandingsRequest::~CMsgDOTAFantasyTeamStandingsRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyTeamStandingsRequest)
  SharedDtor();
}

void CMsgDOTAFantasyTeamStandingsRequest::SharedDtor() {
}

void CMsgDOTAFantasyTeamStandingsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyTeamStandingsRequest::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAFantasyTeamStandingsRequest& CMsgDOTAFantasyTeamStandingsRequest::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAFantasyTeamStandingsRequest* CMsgDOTAFantasyTeamStandingsRequest::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyTeamStandingsRequest* n = new CMsgDOTAFantasyTeamStandingsRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyTeamStandingsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyTeamStandingsRequest)
  if (_has_bits_[0 / 32] & 127u) {
    ::memset(&fantasy_league_id_, 0, reinterpret_cast<char*>(&filter_in_hall_) -
      reinterpret_cast<char*>(&fantasy_league_id_) + sizeof(filter_in_hall_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAFantasyTeamStandingsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyTeamStandingsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_fantasy_league_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 filter_start_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_filter_start_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &filter_start_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 filter_end_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_filter_end_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &filter_end_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 filter_match_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_filter_match_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &filter_match_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool filter_last_match = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_filter_last_match();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &filter_last_match_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool filter_in_hall = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_filter_in_hall();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &filter_in_hall_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyTeamStandingsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyTeamStandingsRequest)
  return false;
#undef DO_
}

void CMsgDOTAFantasyTeamStandingsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyTeamStandingsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fantasy_league_id(), output);
  }

  // optional uint32 count = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  // optional uint32 filter_start_time = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->filter_start_time(), output);
  }

  // optional uint32 filter_end_time = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->filter_end_time(), output);
  }

  // optional uint64 filter_match_id = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->filter_match_id(), output);
  }

  // optional bool filter_last_match = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->filter_last_match(), output);
  }

  // optional bool filter_in_hall = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->filter_in_hall(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyTeamStandingsRequest)
}

::google::protobuf::uint8* CMsgDOTAFantasyTeamStandingsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyTeamStandingsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fantasy_league_id(), target);
  }

  // optional uint32 count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  // optional uint32 filter_start_time = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->filter_start_time(), target);
  }

  // optional uint32 filter_end_time = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->filter_end_time(), target);
  }

  // optional uint64 filter_match_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->filter_match_id(), target);
  }

  // optional bool filter_last_match = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->filter_last_match(), target);
  }

  // optional bool filter_in_hall = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->filter_in_hall(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyTeamStandingsRequest)
  return target;
}

size_t CMsgDOTAFantasyTeamStandingsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyTeamStandingsRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional uint32 fantasy_league_id = 1;
    if (has_fantasy_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_league_id());
    }

    // optional uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // optional uint32 filter_start_time = 3;
    if (has_filter_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->filter_start_time());
    }

    // optional uint32 filter_end_time = 4;
    if (has_filter_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->filter_end_time());
    }

    // optional uint64 filter_match_id = 5;
    if (has_filter_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->filter_match_id());
    }

    // optional bool filter_last_match = 6;
    if (has_filter_last_match()) {
      total_size += 1 + 1;
    }

    // optional bool filter_in_hall = 7;
    if (has_filter_in_hall()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyTeamStandingsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyTeamStandingsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyTeamStandingsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyTeamStandingsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyTeamStandingsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyTeamStandingsRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyTeamStandingsRequest::MergeFrom(const CMsgDOTAFantasyTeamStandingsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyTeamStandingsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      fantasy_league_id_ = from.fantasy_league_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    if (cached_has_bits & 0x00000004u) {
      filter_start_time_ = from.filter_start_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      filter_end_time_ = from.filter_end_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      filter_match_id_ = from.filter_match_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      filter_last_match_ = from.filter_last_match_;
    }
    if (cached_has_bits & 0x00000040u) {
      filter_in_hall_ = from.filter_in_hall_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyTeamStandingsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyTeamStandingsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyTeamStandingsRequest::CopyFrom(const CMsgDOTAFantasyTeamStandingsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyTeamStandingsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyTeamStandingsRequest::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyTeamStandingsRequest::Swap(CMsgDOTAFantasyTeamStandingsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyTeamStandingsRequest::InternalSwap(CMsgDOTAFantasyTeamStandingsRequest* other) {
  std::swap(fantasy_league_id_, other->fantasy_league_id_);
  std::swap(count_, other->count_);
  std::swap(filter_start_time_, other->filter_start_time_);
  std::swap(filter_end_time_, other->filter_end_time_);
  std::swap(filter_match_id_, other->filter_match_id_);
  std::swap(filter_last_match_, other->filter_last_match_);
  std::swap(filter_in_hall_, other->filter_in_hall_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyTeamStandingsRequest::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyTeamStandingsRequest

// optional uint32 fantasy_league_id = 1;
bool CMsgDOTAFantasyTeamStandingsRequest::has_fantasy_league_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyTeamStandingsRequest::set_has_fantasy_league_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyTeamStandingsRequest::clear_has_fantasy_league_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyTeamStandingsRequest::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  clear_has_fantasy_league_id();
}
::google::protobuf::uint32 CMsgDOTAFantasyTeamStandingsRequest::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyTeamStandingsRequest.fantasy_league_id)
  return fantasy_league_id_;
}
void CMsgDOTAFantasyTeamStandingsRequest::set_fantasy_league_id(::google::protobuf::uint32 value) {
  set_has_fantasy_league_id();
  fantasy_league_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyTeamStandingsRequest.fantasy_league_id)
}

// optional uint32 count = 2;
bool CMsgDOTAFantasyTeamStandingsRequest::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAFantasyTeamStandingsRequest::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAFantasyTeamStandingsRequest::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAFantasyTeamStandingsRequest::clear_count() {
  count_ = 0u;
  clear_has_count();
}
::google::protobuf::uint32 CMsgDOTAFantasyTeamStandingsRequest::count() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyTeamStandingsRequest.count)
  return count_;
}
void CMsgDOTAFantasyTeamStandingsRequest::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyTeamStandingsRequest.count)
}

// optional uint32 filter_start_time = 3;
bool CMsgDOTAFantasyTeamStandingsRequest::has_filter_start_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAFantasyTeamStandingsRequest::set_has_filter_start_time() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAFantasyTeamStandingsRequest::clear_has_filter_start_time() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAFantasyTeamStandingsRequest::clear_filter_start_time() {
  filter_start_time_ = 0u;
  clear_has_filter_start_time();
}
::google::protobuf::uint32 CMsgDOTAFantasyTeamStandingsRequest::filter_start_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyTeamStandingsRequest.filter_start_time)
  return filter_start_time_;
}
void CMsgDOTAFantasyTeamStandingsRequest::set_filter_start_time(::google::protobuf::uint32 value) {
  set_has_filter_start_time();
  filter_start_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyTeamStandingsRequest.filter_start_time)
}

// optional uint32 filter_end_time = 4;
bool CMsgDOTAFantasyTeamStandingsRequest::has_filter_end_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTAFantasyTeamStandingsRequest::set_has_filter_end_time() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTAFantasyTeamStandingsRequest::clear_has_filter_end_time() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTAFantasyTeamStandingsRequest::clear_filter_end_time() {
  filter_end_time_ = 0u;
  clear_has_filter_end_time();
}
::google::protobuf::uint32 CMsgDOTAFantasyTeamStandingsRequest::filter_end_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyTeamStandingsRequest.filter_end_time)
  return filter_end_time_;
}
void CMsgDOTAFantasyTeamStandingsRequest::set_filter_end_time(::google::protobuf::uint32 value) {
  set_has_filter_end_time();
  filter_end_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyTeamStandingsRequest.filter_end_time)
}

// optional uint64 filter_match_id = 5;
bool CMsgDOTAFantasyTeamStandingsRequest::has_filter_match_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDOTAFantasyTeamStandingsRequest::set_has_filter_match_id() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDOTAFantasyTeamStandingsRequest::clear_has_filter_match_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDOTAFantasyTeamStandingsRequest::clear_filter_match_id() {
  filter_match_id_ = GOOGLE_ULONGLONG(0);
  clear_has_filter_match_id();
}
::google::protobuf::uint64 CMsgDOTAFantasyTeamStandingsRequest::filter_match_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyTeamStandingsRequest.filter_match_id)
  return filter_match_id_;
}
void CMsgDOTAFantasyTeamStandingsRequest::set_filter_match_id(::google::protobuf::uint64 value) {
  set_has_filter_match_id();
  filter_match_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyTeamStandingsRequest.filter_match_id)
}

// optional bool filter_last_match = 6;
bool CMsgDOTAFantasyTeamStandingsRequest::has_filter_last_match() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgDOTAFantasyTeamStandingsRequest::set_has_filter_last_match() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgDOTAFantasyTeamStandingsRequest::clear_has_filter_last_match() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgDOTAFantasyTeamStandingsRequest::clear_filter_last_match() {
  filter_last_match_ = false;
  clear_has_filter_last_match();
}
bool CMsgDOTAFantasyTeamStandingsRequest::filter_last_match() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyTeamStandingsRequest.filter_last_match)
  return filter_last_match_;
}
void CMsgDOTAFantasyTeamStandingsRequest::set_filter_last_match(bool value) {
  set_has_filter_last_match();
  filter_last_match_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyTeamStandingsRequest.filter_last_match)
}

// optional bool filter_in_hall = 7;
bool CMsgDOTAFantasyTeamStandingsRequest::has_filter_in_hall() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgDOTAFantasyTeamStandingsRequest::set_has_filter_in_hall() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgDOTAFantasyTeamStandingsRequest::clear_has_filter_in_hall() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgDOTAFantasyTeamStandingsRequest::clear_filter_in_hall() {
  filter_in_hall_ = false;
  clear_has_filter_in_hall();
}
bool CMsgDOTAFantasyTeamStandingsRequest::filter_in_hall() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyTeamStandingsRequest.filter_in_hall)
  return filter_in_hall_;
}
void CMsgDOTAFantasyTeamStandingsRequest::set_filter_in_hall(bool value) {
  set_has_filter_in_hall();
  filter_in_hall_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyTeamStandingsRequest.filter_in_hall)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::kFantasyLeagueIdFieldNumber;
const int CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::kOwnerAccountIdFieldNumber;
const int CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::kFantasyTeamIndexFieldNumber;
const int CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::kFantasyTeamLogoFieldNumber;
const int CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::kOwnerNameFieldNumber;
const int CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::kFantasyTeamNameFieldNumber;
const int CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::kScoreFieldNumber;
const int CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::kScoreAgainstFieldNumber;
const int CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::kWinsFieldNumber;
const int CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::kLossesFieldNumber;
const int CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::kStreakFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore)
}
CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore(const CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  owner_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_owner_name()) {
    owner_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.owner_name_);
  }
  fantasy_team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fantasy_team_name()) {
    fantasy_team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fantasy_team_name_);
  }
  ::memcpy(&fantasy_league_id_, &from.fantasy_league_id_,
    reinterpret_cast<char*>(&streak_) -
    reinterpret_cast<char*>(&fantasy_league_id_) + sizeof(streak_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore)
}

void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::SharedCtor() {
  _cached_size_ = 0;
  owner_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fantasy_team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&fantasy_league_id_, 0, reinterpret_cast<char*>(&streak_) -
    reinterpret_cast<char*>(&fantasy_league_id_) + sizeof(streak_));
}

CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::~CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore)
  SharedDtor();
}

void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::SharedDtor() {
  owner_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fantasy_team_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore& CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore* CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore* n = new CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_owner_name()) {
      GOOGLE_DCHECK(!owner_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*owner_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_fantasy_team_name()) {
      GOOGLE_DCHECK(!fantasy_team_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*fantasy_team_name_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 252u) {
    ::memset(&fantasy_league_id_, 0, reinterpret_cast<char*>(&score_against_) -
      reinterpret_cast<char*>(&fantasy_league_id_) + sizeof(score_against_));
  }
  if (_has_bits_[8 / 32] & 1792u) {
    ::memset(&wins_, 0, reinterpret_cast<char*>(&streak_) -
      reinterpret_cast<char*>(&wins_) + sizeof(streak_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_fantasy_league_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 owner_account_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_owner_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &owner_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 fantasy_team_index = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_fantasy_team_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_team_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 fantasy_team_logo = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_fantasy_team_logo();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fantasy_team_logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string owner_name = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_owner_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->owner_name().data(), this->owner_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.owner_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string fantasy_team_name = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fantasy_team_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fantasy_team_name().data(), this->fantasy_team_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.fantasy_team_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float score = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u)) {
          set_has_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float score_against = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u)) {
          set_has_score_against();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &score_against_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 wins = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_wins();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wins_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 losses = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_losses();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &losses_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 streak = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_streak();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &streak_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore)
  return false;
#undef DO_
}

void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fantasy_league_id(), output);
  }

  // optional uint32 owner_account_id = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->owner_account_id(), output);
  }

  // optional uint32 fantasy_team_index = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->fantasy_team_index(), output);
  }

  // optional uint64 fantasy_team_logo = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->fantasy_team_logo(), output);
  }

  // optional string owner_name = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->owner_name().data(), this->owner_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.owner_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->owner_name(), output);
  }

  // optional string fantasy_team_name = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fantasy_team_name().data(), this->fantasy_team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.fantasy_team_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->fantasy_team_name(), output);
  }

  // optional float score = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->score(), output);
  }

  // optional float score_against = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->score_against(), output);
  }

  // optional uint32 wins = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->wins(), output);
  }

  // optional uint32 losses = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->losses(), output);
  }

  // optional int32 streak = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->streak(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore)
}

::google::protobuf::uint8* CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fantasy_league_id(), target);
  }

  // optional uint32 owner_account_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->owner_account_id(), target);
  }

  // optional uint32 fantasy_team_index = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->fantasy_team_index(), target);
  }

  // optional uint64 fantasy_team_logo = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->fantasy_team_logo(), target);
  }

  // optional string owner_name = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->owner_name().data(), this->owner_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.owner_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->owner_name(), target);
  }

  // optional string fantasy_team_name = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fantasy_team_name().data(), this->fantasy_team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.fantasy_team_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->fantasy_team_name(), target);
  }

  // optional float score = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->score(), target);
  }

  // optional float score_against = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->score_against(), target);
  }

  // optional uint32 wins = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->wins(), target);
  }

  // optional uint32 losses = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->losses(), target);
  }

  // optional int32 streak = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->streak(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore)
  return target;
}

size_t CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string owner_name = 5;
    if (has_owner_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->owner_name());
    }

    // optional string fantasy_team_name = 6;
    if (has_fantasy_team_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fantasy_team_name());
    }

    // optional uint32 fantasy_league_id = 1;
    if (has_fantasy_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_league_id());
    }

    // optional uint32 owner_account_id = 2;
    if (has_owner_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->owner_account_id());
    }

    // optional uint64 fantasy_team_logo = 4;
    if (has_fantasy_team_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fantasy_team_logo());
    }

    // optional uint32 fantasy_team_index = 3;
    if (has_fantasy_team_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_team_index());
    }

    // optional float score = 7;
    if (has_score()) {
      total_size += 1 + 4;
    }

    // optional float score_against = 8;
    if (has_score_against()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional uint32 wins = 9;
    if (has_wins()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wins());
    }

    // optional uint32 losses = 10;
    if (has_losses()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->losses());
    }

    // optional int32 streak = 11;
    if (has_streak()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->streak());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::MergeFrom(const CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_owner_name();
      owner_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.owner_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_fantasy_team_name();
      fantasy_team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fantasy_team_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      fantasy_league_id_ = from.fantasy_league_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      owner_account_id_ = from.owner_account_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      fantasy_team_logo_ = from.fantasy_team_logo_;
    }
    if (cached_has_bits & 0x00000020u) {
      fantasy_team_index_ = from.fantasy_team_index_;
    }
    if (cached_has_bits & 0x00000040u) {
      score_ = from.score_;
    }
    if (cached_has_bits & 0x00000080u) {
      score_against_ = from.score_against_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      wins_ = from.wins_;
    }
    if (cached_has_bits & 0x00000200u) {
      losses_ = from.losses_;
    }
    if (cached_has_bits & 0x00000400u) {
      streak_ = from.streak_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::CopyFrom(const CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::Swap(CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::InternalSwap(CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore* other) {
  owner_name_.Swap(&other->owner_name_);
  fantasy_team_name_.Swap(&other->fantasy_team_name_);
  std::swap(fantasy_league_id_, other->fantasy_league_id_);
  std::swap(owner_account_id_, other->owner_account_id_);
  std::swap(fantasy_team_logo_, other->fantasy_team_logo_);
  std::swap(fantasy_team_index_, other->fantasy_team_index_);
  std::swap(score_, other->score_);
  std::swap(score_against_, other->score_against_);
  std::swap(wins_, other->wins_);
  std::swap(losses_, other->losses_);
  std::swap(streak_, other->streak_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore

// optional uint32 fantasy_league_id = 1;
bool CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::has_fantasy_league_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::set_has_fantasy_league_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::clear_has_fantasy_league_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  clear_has_fantasy_league_id();
}
::google::protobuf::uint32 CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.fantasy_league_id)
  return fantasy_league_id_;
}
void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::set_fantasy_league_id(::google::protobuf::uint32 value) {
  set_has_fantasy_league_id();
  fantasy_league_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.fantasy_league_id)
}

// optional uint32 owner_account_id = 2;
bool CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::has_owner_account_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::set_has_owner_account_id() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::clear_has_owner_account_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::clear_owner_account_id() {
  owner_account_id_ = 0u;
  clear_has_owner_account_id();
}
::google::protobuf::uint32 CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::owner_account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.owner_account_id)
  return owner_account_id_;
}
void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::set_owner_account_id(::google::protobuf::uint32 value) {
  set_has_owner_account_id();
  owner_account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.owner_account_id)
}

// optional uint32 fantasy_team_index = 3;
bool CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::has_fantasy_team_index() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::set_has_fantasy_team_index() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::clear_has_fantasy_team_index() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::clear_fantasy_team_index() {
  fantasy_team_index_ = 0u;
  clear_has_fantasy_team_index();
}
::google::protobuf::uint32 CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::fantasy_team_index() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.fantasy_team_index)
  return fantasy_team_index_;
}
void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::set_fantasy_team_index(::google::protobuf::uint32 value) {
  set_has_fantasy_team_index();
  fantasy_team_index_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.fantasy_team_index)
}

// optional uint64 fantasy_team_logo = 4;
bool CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::has_fantasy_team_logo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::set_has_fantasy_team_logo() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::clear_has_fantasy_team_logo() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::clear_fantasy_team_logo() {
  fantasy_team_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_fantasy_team_logo();
}
::google::protobuf::uint64 CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::fantasy_team_logo() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.fantasy_team_logo)
  return fantasy_team_logo_;
}
void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::set_fantasy_team_logo(::google::protobuf::uint64 value) {
  set_has_fantasy_team_logo();
  fantasy_team_logo_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.fantasy_team_logo)
}

// optional string owner_name = 5;
bool CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::has_owner_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::set_has_owner_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::clear_has_owner_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::clear_owner_name() {
  owner_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_owner_name();
}
const ::std::string& CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::owner_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.owner_name)
  return owner_name_.GetNoArena();
}
void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::set_owner_name(const ::std::string& value) {
  set_has_owner_name();
  owner_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.owner_name)
}
#if LANG_CXX11
void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::set_owner_name(::std::string&& value) {
  set_has_owner_name();
  owner_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.owner_name)
}
#endif
void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::set_owner_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_owner_name();
  owner_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.owner_name)
}
void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::set_owner_name(const char* value, size_t size) {
  set_has_owner_name();
  owner_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.owner_name)
}
::std::string* CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::mutable_owner_name() {
  set_has_owner_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.owner_name)
  return owner_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::release_owner_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.owner_name)
  clear_has_owner_name();
  return owner_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::set_allocated_owner_name(::std::string* owner_name) {
  if (owner_name != NULL) {
    set_has_owner_name();
  } else {
    clear_has_owner_name();
  }
  owner_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), owner_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.owner_name)
}

// optional string fantasy_team_name = 6;
bool CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::has_fantasy_team_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::set_has_fantasy_team_name() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::clear_has_fantasy_team_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::clear_fantasy_team_name() {
  fantasy_team_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fantasy_team_name();
}
const ::std::string& CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::fantasy_team_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.fantasy_team_name)
  return fantasy_team_name_.GetNoArena();
}
void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::set_fantasy_team_name(const ::std::string& value) {
  set_has_fantasy_team_name();
  fantasy_team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.fantasy_team_name)
}
#if LANG_CXX11
void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::set_fantasy_team_name(::std::string&& value) {
  set_has_fantasy_team_name();
  fantasy_team_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.fantasy_team_name)
}
#endif
void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::set_fantasy_team_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fantasy_team_name();
  fantasy_team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.fantasy_team_name)
}
void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::set_fantasy_team_name(const char* value, size_t size) {
  set_has_fantasy_team_name();
  fantasy_team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.fantasy_team_name)
}
::std::string* CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::mutable_fantasy_team_name() {
  set_has_fantasy_team_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.fantasy_team_name)
  return fantasy_team_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::release_fantasy_team_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.fantasy_team_name)
  clear_has_fantasy_team_name();
  return fantasy_team_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::set_allocated_fantasy_team_name(::std::string* fantasy_team_name) {
  if (fantasy_team_name != NULL) {
    set_has_fantasy_team_name();
  } else {
    clear_has_fantasy_team_name();
  }
  fantasy_team_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fantasy_team_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.fantasy_team_name)
}

// optional float score = 7;
bool CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::has_score() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::set_has_score() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::clear_has_score() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::clear_score() {
  score_ = 0;
  clear_has_score();
}
float CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::score() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.score)
  return score_;
}
void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::set_score(float value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.score)
}

// optional float score_against = 8;
bool CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::has_score_against() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::set_has_score_against() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::clear_has_score_against() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::clear_score_against() {
  score_against_ = 0;
  clear_has_score_against();
}
float CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::score_against() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.score_against)
  return score_against_;
}
void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::set_score_against(float value) {
  set_has_score_against();
  score_against_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.score_against)
}

// optional uint32 wins = 9;
bool CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::has_wins() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::set_has_wins() {
  _has_bits_[0] |= 0x00000100u;
}
void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::clear_has_wins() {
  _has_bits_[0] &= ~0x00000100u;
}
void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::clear_wins() {
  wins_ = 0u;
  clear_has_wins();
}
::google::protobuf::uint32 CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::wins() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.wins)
  return wins_;
}
void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::set_wins(::google::protobuf::uint32 value) {
  set_has_wins();
  wins_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.wins)
}

// optional uint32 losses = 10;
bool CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::has_losses() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::set_has_losses() {
  _has_bits_[0] |= 0x00000200u;
}
void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::clear_has_losses() {
  _has_bits_[0] &= ~0x00000200u;
}
void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::clear_losses() {
  losses_ = 0u;
  clear_has_losses();
}
::google::protobuf::uint32 CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::losses() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.losses)
  return losses_;
}
void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::set_losses(::google::protobuf::uint32 value) {
  set_has_losses();
  losses_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.losses)
}

// optional int32 streak = 11;
bool CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::has_streak() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::set_has_streak() {
  _has_bits_[0] |= 0x00000400u;
}
void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::clear_has_streak() {
  _has_bits_[0] &= ~0x00000400u;
}
void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::clear_streak() {
  streak_ = 0;
  clear_has_streak();
}
::google::protobuf::int32 CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::streak() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.streak)
  return streak_;
}
void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::set_streak(::google::protobuf::int32 value) {
  set_has_streak();
  streak_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.streak)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyTeamStandingsResponse::kResultFieldNumber;
const int CMsgDOTAFantasyTeamStandingsResponse::kTeamScoresFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyTeamStandingsResponse::CMsgDOTAFantasyTeamStandingsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyTeamStandingsResponse)
}
CMsgDOTAFantasyTeamStandingsResponse::CMsgDOTAFantasyTeamStandingsResponse(const CMsgDOTAFantasyTeamStandingsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      team_scores_(from.team_scores_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyTeamStandingsResponse)
}

void CMsgDOTAFantasyTeamStandingsResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
}

CMsgDOTAFantasyTeamStandingsResponse::~CMsgDOTAFantasyTeamStandingsResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyTeamStandingsResponse)
  SharedDtor();
}

void CMsgDOTAFantasyTeamStandingsResponse::SharedDtor() {
}

void CMsgDOTAFantasyTeamStandingsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyTeamStandingsResponse::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAFantasyTeamStandingsResponse& CMsgDOTAFantasyTeamStandingsResponse::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAFantasyTeamStandingsResponse* CMsgDOTAFantasyTeamStandingsResponse::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyTeamStandingsResponse* n = new CMsgDOTAFantasyTeamStandingsResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyTeamStandingsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyTeamStandingsResponse)
  team_scores_.Clear();
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAFantasyTeamStandingsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyTeamStandingsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgDOTAFantasyTeamStandingsResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgDOTAFantasyTeamStandingsResponse_EResult_IsValid(value)) {
            set_result(static_cast< ::proto::dota::CMsgDOTAFantasyTeamStandingsResponse_EResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore team_scores = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_team_scores()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyTeamStandingsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyTeamStandingsResponse)
  return false;
#undef DO_
}

void CMsgDOTAFantasyTeamStandingsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyTeamStandingsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAFantasyTeamStandingsResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // repeated .proto.dota.CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore team_scores = 3;
  for (unsigned int i = 0, n = this->team_scores_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->team_scores(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyTeamStandingsResponse)
}

::google::protobuf::uint8* CMsgDOTAFantasyTeamStandingsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyTeamStandingsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAFantasyTeamStandingsResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // repeated .proto.dota.CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore team_scores = 3;
  for (unsigned int i = 0, n = this->team_scores_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->team_scores(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyTeamStandingsResponse)
  return target;
}

size_t CMsgDOTAFantasyTeamStandingsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyTeamStandingsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore team_scores = 3;
  {
    unsigned int count = this->team_scores_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->team_scores(i));
    }
  }

  // optional .proto.dota.CMsgDOTAFantasyTeamStandingsResponse.EResult result = 1 [default = SUCCESS];
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyTeamStandingsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyTeamStandingsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyTeamStandingsResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyTeamStandingsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyTeamStandingsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyTeamStandingsResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyTeamStandingsResponse::MergeFrom(const CMsgDOTAFantasyTeamStandingsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyTeamStandingsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  team_scores_.MergeFrom(from.team_scores_);
  if (from.has_result()) {
    set_result(from.result());
  }
}

void CMsgDOTAFantasyTeamStandingsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyTeamStandingsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyTeamStandingsResponse::CopyFrom(const CMsgDOTAFantasyTeamStandingsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyTeamStandingsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyTeamStandingsResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyTeamStandingsResponse::Swap(CMsgDOTAFantasyTeamStandingsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyTeamStandingsResponse::InternalSwap(CMsgDOTAFantasyTeamStandingsResponse* other) {
  team_scores_.InternalSwap(&other->team_scores_);
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyTeamStandingsResponse::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyTeamStandingsResponse

// optional .proto.dota.CMsgDOTAFantasyTeamStandingsResponse.EResult result = 1 [default = SUCCESS];
bool CMsgDOTAFantasyTeamStandingsResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyTeamStandingsResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyTeamStandingsResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyTeamStandingsResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
::proto::dota::CMsgDOTAFantasyTeamStandingsResponse_EResult CMsgDOTAFantasyTeamStandingsResponse::result() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyTeamStandingsResponse.result)
  return static_cast< ::proto::dota::CMsgDOTAFantasyTeamStandingsResponse_EResult >(result_);
}
void CMsgDOTAFantasyTeamStandingsResponse::set_result(::proto::dota::CMsgDOTAFantasyTeamStandingsResponse_EResult value) {
  assert(::proto::dota::CMsgDOTAFantasyTeamStandingsResponse_EResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyTeamStandingsResponse.result)
}

// repeated .proto.dota.CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore team_scores = 3;
int CMsgDOTAFantasyTeamStandingsResponse::team_scores_size() const {
  return team_scores_.size();
}
void CMsgDOTAFantasyTeamStandingsResponse::clear_team_scores() {
  team_scores_.Clear();
}
const ::proto::dota::CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore& CMsgDOTAFantasyTeamStandingsResponse::team_scores(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyTeamStandingsResponse.team_scores)
  return team_scores_.Get(index);
}
::proto::dota::CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore* CMsgDOTAFantasyTeamStandingsResponse::mutable_team_scores(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAFantasyTeamStandingsResponse.team_scores)
  return team_scores_.Mutable(index);
}
::proto::dota::CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore* CMsgDOTAFantasyTeamStandingsResponse::add_team_scores() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTAFantasyTeamStandingsResponse.team_scores)
  return team_scores_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore >*
CMsgDOTAFantasyTeamStandingsResponse::mutable_team_scores() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTAFantasyTeamStandingsResponse.team_scores)
  return &team_scores_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore >&
CMsgDOTAFantasyTeamStandingsResponse::team_scores() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTAFantasyTeamStandingsResponse.team_scores)
  return team_scores_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyPlayerScoreRequest::kFantasyLeagueIdFieldNumber;
const int CMsgDOTAFantasyPlayerScoreRequest::kPlayerAccountIdFieldNumber;
const int CMsgDOTAFantasyPlayerScoreRequest::kFilterStartTimeFieldNumber;
const int CMsgDOTAFantasyPlayerScoreRequest::kFilterEndTimeFieldNumber;
const int CMsgDOTAFantasyPlayerScoreRequest::kFilterMatchIdFieldNumber;
const int CMsgDOTAFantasyPlayerScoreRequest::kFilterLastMatchFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyPlayerScoreRequest::CMsgDOTAFantasyPlayerScoreRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyPlayerScoreRequest)
}
CMsgDOTAFantasyPlayerScoreRequest::CMsgDOTAFantasyPlayerScoreRequest(const CMsgDOTAFantasyPlayerScoreRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&fantasy_league_id_, &from.fantasy_league_id_,
    reinterpret_cast<char*>(&filter_last_match_) -
    reinterpret_cast<char*>(&fantasy_league_id_) + sizeof(filter_last_match_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyPlayerScoreRequest)
}

void CMsgDOTAFantasyPlayerScoreRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&fantasy_league_id_, 0, reinterpret_cast<char*>(&filter_last_match_) -
    reinterpret_cast<char*>(&fantasy_league_id_) + sizeof(filter_last_match_));
}

CMsgDOTAFantasyPlayerScoreRequest::~CMsgDOTAFantasyPlayerScoreRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyPlayerScoreRequest)
  SharedDtor();
}

void CMsgDOTAFantasyPlayerScoreRequest::SharedDtor() {
}

void CMsgDOTAFantasyPlayerScoreRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyPlayerScoreRequest::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAFantasyPlayerScoreRequest& CMsgDOTAFantasyPlayerScoreRequest::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAFantasyPlayerScoreRequest* CMsgDOTAFantasyPlayerScoreRequest::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyPlayerScoreRequest* n = new CMsgDOTAFantasyPlayerScoreRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyPlayerScoreRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyPlayerScoreRequest)
  if (_has_bits_[0 / 32] & 63u) {
    ::memset(&fantasy_league_id_, 0, reinterpret_cast<char*>(&filter_last_match_) -
      reinterpret_cast<char*>(&fantasy_league_id_) + sizeof(filter_last_match_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAFantasyPlayerScoreRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyPlayerScoreRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_fantasy_league_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 player_account_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_player_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 filter_start_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_filter_start_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &filter_start_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 filter_end_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_filter_end_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &filter_end_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 filter_match_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_filter_match_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &filter_match_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool filter_last_match = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_filter_last_match();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &filter_last_match_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyPlayerScoreRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyPlayerScoreRequest)
  return false;
#undef DO_
}

void CMsgDOTAFantasyPlayerScoreRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyPlayerScoreRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fantasy_league_id(), output);
  }

  // optional uint32 player_account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->player_account_id(), output);
  }

  // optional uint32 filter_start_time = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->filter_start_time(), output);
  }

  // optional uint32 filter_end_time = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->filter_end_time(), output);
  }

  // optional uint64 filter_match_id = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->filter_match_id(), output);
  }

  // optional bool filter_last_match = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->filter_last_match(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyPlayerScoreRequest)
}

::google::protobuf::uint8* CMsgDOTAFantasyPlayerScoreRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyPlayerScoreRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fantasy_league_id(), target);
  }

  // optional uint32 player_account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->player_account_id(), target);
  }

  // optional uint32 filter_start_time = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->filter_start_time(), target);
  }

  // optional uint32 filter_end_time = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->filter_end_time(), target);
  }

  // optional uint64 filter_match_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->filter_match_id(), target);
  }

  // optional bool filter_last_match = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->filter_last_match(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyPlayerScoreRequest)
  return target;
}

size_t CMsgDOTAFantasyPlayerScoreRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyPlayerScoreRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional uint32 fantasy_league_id = 1;
    if (has_fantasy_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_league_id());
    }

    // optional uint32 player_account_id = 2;
    if (has_player_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_account_id());
    }

    // optional uint32 filter_start_time = 3;
    if (has_filter_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->filter_start_time());
    }

    // optional uint32 filter_end_time = 4;
    if (has_filter_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->filter_end_time());
    }

    // optional uint64 filter_match_id = 5;
    if (has_filter_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->filter_match_id());
    }

    // optional bool filter_last_match = 6;
    if (has_filter_last_match()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyPlayerScoreRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyPlayerScoreRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyPlayerScoreRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyPlayerScoreRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyPlayerScoreRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyPlayerScoreRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyPlayerScoreRequest::MergeFrom(const CMsgDOTAFantasyPlayerScoreRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyPlayerScoreRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      fantasy_league_id_ = from.fantasy_league_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      player_account_id_ = from.player_account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      filter_start_time_ = from.filter_start_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      filter_end_time_ = from.filter_end_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      filter_match_id_ = from.filter_match_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      filter_last_match_ = from.filter_last_match_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyPlayerScoreRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyPlayerScoreRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyPlayerScoreRequest::CopyFrom(const CMsgDOTAFantasyPlayerScoreRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyPlayerScoreRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyPlayerScoreRequest::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyPlayerScoreRequest::Swap(CMsgDOTAFantasyPlayerScoreRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyPlayerScoreRequest::InternalSwap(CMsgDOTAFantasyPlayerScoreRequest* other) {
  std::swap(fantasy_league_id_, other->fantasy_league_id_);
  std::swap(player_account_id_, other->player_account_id_);
  std::swap(filter_start_time_, other->filter_start_time_);
  std::swap(filter_end_time_, other->filter_end_time_);
  std::swap(filter_match_id_, other->filter_match_id_);
  std::swap(filter_last_match_, other->filter_last_match_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyPlayerScoreRequest::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyPlayerScoreRequest

// optional uint32 fantasy_league_id = 1;
bool CMsgDOTAFantasyPlayerScoreRequest::has_fantasy_league_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyPlayerScoreRequest::set_has_fantasy_league_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyPlayerScoreRequest::clear_has_fantasy_league_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyPlayerScoreRequest::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  clear_has_fantasy_league_id();
}
::google::protobuf::uint32 CMsgDOTAFantasyPlayerScoreRequest::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerScoreRequest.fantasy_league_id)
  return fantasy_league_id_;
}
void CMsgDOTAFantasyPlayerScoreRequest::set_fantasy_league_id(::google::protobuf::uint32 value) {
  set_has_fantasy_league_id();
  fantasy_league_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyPlayerScoreRequest.fantasy_league_id)
}

// optional uint32 player_account_id = 2;
bool CMsgDOTAFantasyPlayerScoreRequest::has_player_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAFantasyPlayerScoreRequest::set_has_player_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAFantasyPlayerScoreRequest::clear_has_player_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAFantasyPlayerScoreRequest::clear_player_account_id() {
  player_account_id_ = 0u;
  clear_has_player_account_id();
}
::google::protobuf::uint32 CMsgDOTAFantasyPlayerScoreRequest::player_account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerScoreRequest.player_account_id)
  return player_account_id_;
}
void CMsgDOTAFantasyPlayerScoreRequest::set_player_account_id(::google::protobuf::uint32 value) {
  set_has_player_account_id();
  player_account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyPlayerScoreRequest.player_account_id)
}

// optional uint32 filter_start_time = 3;
bool CMsgDOTAFantasyPlayerScoreRequest::has_filter_start_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAFantasyPlayerScoreRequest::set_has_filter_start_time() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAFantasyPlayerScoreRequest::clear_has_filter_start_time() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAFantasyPlayerScoreRequest::clear_filter_start_time() {
  filter_start_time_ = 0u;
  clear_has_filter_start_time();
}
::google::protobuf::uint32 CMsgDOTAFantasyPlayerScoreRequest::filter_start_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerScoreRequest.filter_start_time)
  return filter_start_time_;
}
void CMsgDOTAFantasyPlayerScoreRequest::set_filter_start_time(::google::protobuf::uint32 value) {
  set_has_filter_start_time();
  filter_start_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyPlayerScoreRequest.filter_start_time)
}

// optional uint32 filter_end_time = 4;
bool CMsgDOTAFantasyPlayerScoreRequest::has_filter_end_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTAFantasyPlayerScoreRequest::set_has_filter_end_time() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTAFantasyPlayerScoreRequest::clear_has_filter_end_time() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTAFantasyPlayerScoreRequest::clear_filter_end_time() {
  filter_end_time_ = 0u;
  clear_has_filter_end_time();
}
::google::protobuf::uint32 CMsgDOTAFantasyPlayerScoreRequest::filter_end_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerScoreRequest.filter_end_time)
  return filter_end_time_;
}
void CMsgDOTAFantasyPlayerScoreRequest::set_filter_end_time(::google::protobuf::uint32 value) {
  set_has_filter_end_time();
  filter_end_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyPlayerScoreRequest.filter_end_time)
}

// optional uint64 filter_match_id = 5;
bool CMsgDOTAFantasyPlayerScoreRequest::has_filter_match_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDOTAFantasyPlayerScoreRequest::set_has_filter_match_id() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDOTAFantasyPlayerScoreRequest::clear_has_filter_match_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDOTAFantasyPlayerScoreRequest::clear_filter_match_id() {
  filter_match_id_ = GOOGLE_ULONGLONG(0);
  clear_has_filter_match_id();
}
::google::protobuf::uint64 CMsgDOTAFantasyPlayerScoreRequest::filter_match_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerScoreRequest.filter_match_id)
  return filter_match_id_;
}
void CMsgDOTAFantasyPlayerScoreRequest::set_filter_match_id(::google::protobuf::uint64 value) {
  set_has_filter_match_id();
  filter_match_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyPlayerScoreRequest.filter_match_id)
}

// optional bool filter_last_match = 6;
bool CMsgDOTAFantasyPlayerScoreRequest::has_filter_last_match() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgDOTAFantasyPlayerScoreRequest::set_has_filter_last_match() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgDOTAFantasyPlayerScoreRequest::clear_has_filter_last_match() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgDOTAFantasyPlayerScoreRequest::clear_filter_last_match() {
  filter_last_match_ = false;
  clear_has_filter_last_match();
}
bool CMsgDOTAFantasyPlayerScoreRequest::filter_last_match() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerScoreRequest.filter_last_match)
  return filter_last_match_;
}
void CMsgDOTAFantasyPlayerScoreRequest::set_filter_last_match(bool value) {
  set_has_filter_last_match();
  filter_last_match_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyPlayerScoreRequest.filter_last_match)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyPlayerScoreResponse::kResultFieldNumber;
const int CMsgDOTAFantasyPlayerScoreResponse::kFantasyLeagueIdFieldNumber;
const int CMsgDOTAFantasyPlayerScoreResponse::kPlayerAccountIdFieldNumber;
const int CMsgDOTAFantasyPlayerScoreResponse::kPlayerNameFieldNumber;
const int CMsgDOTAFantasyPlayerScoreResponse::kScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyPlayerScoreResponse::CMsgDOTAFantasyPlayerScoreResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyPlayerScoreResponse)
}
CMsgDOTAFantasyPlayerScoreResponse::CMsgDOTAFantasyPlayerScoreResponse(const CMsgDOTAFantasyPlayerScoreResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  player_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_player_name()) {
    player_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.player_name_);
  }
  ::memcpy(&result_, &from.result_,
    reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&result_) + sizeof(score_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyPlayerScoreResponse)
}

void CMsgDOTAFantasyPlayerScoreResponse::SharedCtor() {
  _cached_size_ = 0;
  player_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&result_, 0, reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&result_) + sizeof(score_));
}

CMsgDOTAFantasyPlayerScoreResponse::~CMsgDOTAFantasyPlayerScoreResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyPlayerScoreResponse)
  SharedDtor();
}

void CMsgDOTAFantasyPlayerScoreResponse::SharedDtor() {
  player_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTAFantasyPlayerScoreResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyPlayerScoreResponse::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAFantasyPlayerScoreResponse& CMsgDOTAFantasyPlayerScoreResponse::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAFantasyPlayerScoreResponse* CMsgDOTAFantasyPlayerScoreResponse::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyPlayerScoreResponse* n = new CMsgDOTAFantasyPlayerScoreResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyPlayerScoreResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyPlayerScoreResponse)
  if (has_player_name()) {
    GOOGLE_DCHECK(!player_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*player_name_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 30u) {
    ::memset(&result_, 0, reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&result_) + sizeof(score_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAFantasyPlayerScoreResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyPlayerScoreResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgDOTAFantasyPlayerScoreResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgDOTAFantasyPlayerScoreResponse_EResult_IsValid(value)) {
            set_result(static_cast< ::proto::dota::CMsgDOTAFantasyPlayerScoreResponse_EResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 fantasy_league_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_fantasy_league_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 player_account_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_player_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string player_name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->player_name().data(), this->player_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAFantasyPlayerScoreResponse.player_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float score = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {
          set_has_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyPlayerScoreResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyPlayerScoreResponse)
  return false;
#undef DO_
}

void CMsgDOTAFantasyPlayerScoreResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyPlayerScoreResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAFantasyPlayerScoreResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional uint32 fantasy_league_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->fantasy_league_id(), output);
  }

  // optional uint32 player_account_id = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->player_account_id(), output);
  }

  // optional string player_name = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAFantasyPlayerScoreResponse.player_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->player_name(), output);
  }

  // optional float score = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->score(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyPlayerScoreResponse)
}

::google::protobuf::uint8* CMsgDOTAFantasyPlayerScoreResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyPlayerScoreResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAFantasyPlayerScoreResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional uint32 fantasy_league_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->fantasy_league_id(), target);
  }

  // optional uint32 player_account_id = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->player_account_id(), target);
  }

  // optional string player_name = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAFantasyPlayerScoreResponse.player_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->player_name(), target);
  }

  // optional float score = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->score(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyPlayerScoreResponse)
  return target;
}

size_t CMsgDOTAFantasyPlayerScoreResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyPlayerScoreResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string player_name = 4;
    if (has_player_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_name());
    }

    // optional .proto.dota.CMsgDOTAFantasyPlayerScoreResponse.EResult result = 1 [default = SUCCESS];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 fantasy_league_id = 2;
    if (has_fantasy_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_league_id());
    }

    // optional uint32 player_account_id = 3;
    if (has_player_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_account_id());
    }

    // optional float score = 5;
    if (has_score()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyPlayerScoreResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyPlayerScoreResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyPlayerScoreResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyPlayerScoreResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyPlayerScoreResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyPlayerScoreResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyPlayerScoreResponse::MergeFrom(const CMsgDOTAFantasyPlayerScoreResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyPlayerScoreResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_player_name();
      player_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.player_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000004u) {
      fantasy_league_id_ = from.fantasy_league_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      player_account_id_ = from.player_account_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      score_ = from.score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyPlayerScoreResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyPlayerScoreResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyPlayerScoreResponse::CopyFrom(const CMsgDOTAFantasyPlayerScoreResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyPlayerScoreResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyPlayerScoreResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyPlayerScoreResponse::Swap(CMsgDOTAFantasyPlayerScoreResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyPlayerScoreResponse::InternalSwap(CMsgDOTAFantasyPlayerScoreResponse* other) {
  player_name_.Swap(&other->player_name_);
  std::swap(result_, other->result_);
  std::swap(fantasy_league_id_, other->fantasy_league_id_);
  std::swap(player_account_id_, other->player_account_id_);
  std::swap(score_, other->score_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyPlayerScoreResponse::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyPlayerScoreResponse

// optional .proto.dota.CMsgDOTAFantasyPlayerScoreResponse.EResult result = 1 [default = SUCCESS];
bool CMsgDOTAFantasyPlayerScoreResponse::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAFantasyPlayerScoreResponse::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAFantasyPlayerScoreResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAFantasyPlayerScoreResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
::proto::dota::CMsgDOTAFantasyPlayerScoreResponse_EResult CMsgDOTAFantasyPlayerScoreResponse::result() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerScoreResponse.result)
  return static_cast< ::proto::dota::CMsgDOTAFantasyPlayerScoreResponse_EResult >(result_);
}
void CMsgDOTAFantasyPlayerScoreResponse::set_result(::proto::dota::CMsgDOTAFantasyPlayerScoreResponse_EResult value) {
  assert(::proto::dota::CMsgDOTAFantasyPlayerScoreResponse_EResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyPlayerScoreResponse.result)
}

// optional uint32 fantasy_league_id = 2;
bool CMsgDOTAFantasyPlayerScoreResponse::has_fantasy_league_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAFantasyPlayerScoreResponse::set_has_fantasy_league_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAFantasyPlayerScoreResponse::clear_has_fantasy_league_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAFantasyPlayerScoreResponse::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  clear_has_fantasy_league_id();
}
::google::protobuf::uint32 CMsgDOTAFantasyPlayerScoreResponse::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerScoreResponse.fantasy_league_id)
  return fantasy_league_id_;
}
void CMsgDOTAFantasyPlayerScoreResponse::set_fantasy_league_id(::google::protobuf::uint32 value) {
  set_has_fantasy_league_id();
  fantasy_league_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyPlayerScoreResponse.fantasy_league_id)
}

// optional uint32 player_account_id = 3;
bool CMsgDOTAFantasyPlayerScoreResponse::has_player_account_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTAFantasyPlayerScoreResponse::set_has_player_account_id() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTAFantasyPlayerScoreResponse::clear_has_player_account_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTAFantasyPlayerScoreResponse::clear_player_account_id() {
  player_account_id_ = 0u;
  clear_has_player_account_id();
}
::google::protobuf::uint32 CMsgDOTAFantasyPlayerScoreResponse::player_account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerScoreResponse.player_account_id)
  return player_account_id_;
}
void CMsgDOTAFantasyPlayerScoreResponse::set_player_account_id(::google::protobuf::uint32 value) {
  set_has_player_account_id();
  player_account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyPlayerScoreResponse.player_account_id)
}

// optional string player_name = 4;
bool CMsgDOTAFantasyPlayerScoreResponse::has_player_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyPlayerScoreResponse::set_has_player_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyPlayerScoreResponse::clear_has_player_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyPlayerScoreResponse::clear_player_name() {
  player_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_player_name();
}
const ::std::string& CMsgDOTAFantasyPlayerScoreResponse::player_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerScoreResponse.player_name)
  return player_name_.GetNoArena();
}
void CMsgDOTAFantasyPlayerScoreResponse::set_player_name(const ::std::string& value) {
  set_has_player_name();
  player_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyPlayerScoreResponse.player_name)
}
#if LANG_CXX11
void CMsgDOTAFantasyPlayerScoreResponse::set_player_name(::std::string&& value) {
  set_has_player_name();
  player_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAFantasyPlayerScoreResponse.player_name)
}
#endif
void CMsgDOTAFantasyPlayerScoreResponse::set_player_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_player_name();
  player_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAFantasyPlayerScoreResponse.player_name)
}
void CMsgDOTAFantasyPlayerScoreResponse::set_player_name(const char* value, size_t size) {
  set_has_player_name();
  player_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAFantasyPlayerScoreResponse.player_name)
}
::std::string* CMsgDOTAFantasyPlayerScoreResponse::mutable_player_name() {
  set_has_player_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAFantasyPlayerScoreResponse.player_name)
  return player_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTAFantasyPlayerScoreResponse::release_player_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAFantasyPlayerScoreResponse.player_name)
  clear_has_player_name();
  return player_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTAFantasyPlayerScoreResponse::set_allocated_player_name(::std::string* player_name) {
  if (player_name != NULL) {
    set_has_player_name();
  } else {
    clear_has_player_name();
  }
  player_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), player_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAFantasyPlayerScoreResponse.player_name)
}

// optional float score = 5;
bool CMsgDOTAFantasyPlayerScoreResponse::has_score() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDOTAFantasyPlayerScoreResponse::set_has_score() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDOTAFantasyPlayerScoreResponse::clear_has_score() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDOTAFantasyPlayerScoreResponse::clear_score() {
  score_ = 0;
  clear_has_score();
}
float CMsgDOTAFantasyPlayerScoreResponse::score() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerScoreResponse.score)
  return score_;
}
void CMsgDOTAFantasyPlayerScoreResponse::set_score(float value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyPlayerScoreResponse.score)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyPlayerStandingsRequest::kFantasyLeagueIdFieldNumber;
const int CMsgDOTAFantasyPlayerStandingsRequest::kCountFieldNumber;
const int CMsgDOTAFantasyPlayerStandingsRequest::kRoleFieldNumber;
const int CMsgDOTAFantasyPlayerStandingsRequest::kFilterStartTimeFieldNumber;
const int CMsgDOTAFantasyPlayerStandingsRequest::kFilterEndTimeFieldNumber;
const int CMsgDOTAFantasyPlayerStandingsRequest::kFilterMatchIdFieldNumber;
const int CMsgDOTAFantasyPlayerStandingsRequest::kFilterLastMatchFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyPlayerStandingsRequest::CMsgDOTAFantasyPlayerStandingsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyPlayerStandingsRequest)
}
CMsgDOTAFantasyPlayerStandingsRequest::CMsgDOTAFantasyPlayerStandingsRequest(const CMsgDOTAFantasyPlayerStandingsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&fantasy_league_id_, &from.fantasy_league_id_,
    reinterpret_cast<char*>(&filter_last_match_) -
    reinterpret_cast<char*>(&fantasy_league_id_) + sizeof(filter_last_match_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyPlayerStandingsRequest)
}

void CMsgDOTAFantasyPlayerStandingsRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&fantasy_league_id_, 0, reinterpret_cast<char*>(&filter_last_match_) -
    reinterpret_cast<char*>(&fantasy_league_id_) + sizeof(filter_last_match_));
}

CMsgDOTAFantasyPlayerStandingsRequest::~CMsgDOTAFantasyPlayerStandingsRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyPlayerStandingsRequest)
  SharedDtor();
}

void CMsgDOTAFantasyPlayerStandingsRequest::SharedDtor() {
}

void CMsgDOTAFantasyPlayerStandingsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyPlayerStandingsRequest::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAFantasyPlayerStandingsRequest& CMsgDOTAFantasyPlayerStandingsRequest::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAFantasyPlayerStandingsRequest* CMsgDOTAFantasyPlayerStandingsRequest::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyPlayerStandingsRequest* n = new CMsgDOTAFantasyPlayerStandingsRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyPlayerStandingsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyPlayerStandingsRequest)
  if (_has_bits_[0 / 32] & 127u) {
    ::memset(&fantasy_league_id_, 0, reinterpret_cast<char*>(&filter_last_match_) -
      reinterpret_cast<char*>(&fantasy_league_id_) + sizeof(filter_last_match_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAFantasyPlayerStandingsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyPlayerStandingsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_fantasy_league_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 role = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_role();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 filter_start_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_filter_start_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &filter_start_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 filter_end_time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_filter_end_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &filter_end_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 filter_match_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_filter_match_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &filter_match_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool filter_last_match = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_filter_last_match();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &filter_last_match_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyPlayerStandingsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyPlayerStandingsRequest)
  return false;
#undef DO_
}

void CMsgDOTAFantasyPlayerStandingsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyPlayerStandingsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fantasy_league_id(), output);
  }

  // optional uint32 count = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  // optional uint32 role = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->role(), output);
  }

  // optional uint32 filter_start_time = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->filter_start_time(), output);
  }

  // optional uint32 filter_end_time = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->filter_end_time(), output);
  }

  // optional uint64 filter_match_id = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->filter_match_id(), output);
  }

  // optional bool filter_last_match = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->filter_last_match(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyPlayerStandingsRequest)
}

::google::protobuf::uint8* CMsgDOTAFantasyPlayerStandingsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyPlayerStandingsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fantasy_league_id(), target);
  }

  // optional uint32 count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  // optional uint32 role = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->role(), target);
  }

  // optional uint32 filter_start_time = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->filter_start_time(), target);
  }

  // optional uint32 filter_end_time = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->filter_end_time(), target);
  }

  // optional uint64 filter_match_id = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->filter_match_id(), target);
  }

  // optional bool filter_last_match = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->filter_last_match(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyPlayerStandingsRequest)
  return target;
}

size_t CMsgDOTAFantasyPlayerStandingsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyPlayerStandingsRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional uint32 fantasy_league_id = 1;
    if (has_fantasy_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_league_id());
    }

    // optional uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // optional uint32 role = 3;
    if (has_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role());
    }

    // optional uint32 filter_start_time = 4;
    if (has_filter_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->filter_start_time());
    }

    // optional uint64 filter_match_id = 6;
    if (has_filter_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->filter_match_id());
    }

    // optional uint32 filter_end_time = 5;
    if (has_filter_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->filter_end_time());
    }

    // optional bool filter_last_match = 7;
    if (has_filter_last_match()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyPlayerStandingsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyPlayerStandingsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyPlayerStandingsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyPlayerStandingsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyPlayerStandingsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyPlayerStandingsRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyPlayerStandingsRequest::MergeFrom(const CMsgDOTAFantasyPlayerStandingsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyPlayerStandingsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      fantasy_league_id_ = from.fantasy_league_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    if (cached_has_bits & 0x00000004u) {
      role_ = from.role_;
    }
    if (cached_has_bits & 0x00000008u) {
      filter_start_time_ = from.filter_start_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      filter_match_id_ = from.filter_match_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      filter_end_time_ = from.filter_end_time_;
    }
    if (cached_has_bits & 0x00000040u) {
      filter_last_match_ = from.filter_last_match_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyPlayerStandingsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyPlayerStandingsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyPlayerStandingsRequest::CopyFrom(const CMsgDOTAFantasyPlayerStandingsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyPlayerStandingsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyPlayerStandingsRequest::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyPlayerStandingsRequest::Swap(CMsgDOTAFantasyPlayerStandingsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyPlayerStandingsRequest::InternalSwap(CMsgDOTAFantasyPlayerStandingsRequest* other) {
  std::swap(fantasy_league_id_, other->fantasy_league_id_);
  std::swap(count_, other->count_);
  std::swap(role_, other->role_);
  std::swap(filter_start_time_, other->filter_start_time_);
  std::swap(filter_match_id_, other->filter_match_id_);
  std::swap(filter_end_time_, other->filter_end_time_);
  std::swap(filter_last_match_, other->filter_last_match_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyPlayerStandingsRequest::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyPlayerStandingsRequest

// optional uint32 fantasy_league_id = 1;
bool CMsgDOTAFantasyPlayerStandingsRequest::has_fantasy_league_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyPlayerStandingsRequest::set_has_fantasy_league_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyPlayerStandingsRequest::clear_has_fantasy_league_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyPlayerStandingsRequest::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  clear_has_fantasy_league_id();
}
::google::protobuf::uint32 CMsgDOTAFantasyPlayerStandingsRequest::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerStandingsRequest.fantasy_league_id)
  return fantasy_league_id_;
}
void CMsgDOTAFantasyPlayerStandingsRequest::set_fantasy_league_id(::google::protobuf::uint32 value) {
  set_has_fantasy_league_id();
  fantasy_league_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyPlayerStandingsRequest.fantasy_league_id)
}

// optional uint32 count = 2;
bool CMsgDOTAFantasyPlayerStandingsRequest::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAFantasyPlayerStandingsRequest::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAFantasyPlayerStandingsRequest::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAFantasyPlayerStandingsRequest::clear_count() {
  count_ = 0u;
  clear_has_count();
}
::google::protobuf::uint32 CMsgDOTAFantasyPlayerStandingsRequest::count() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerStandingsRequest.count)
  return count_;
}
void CMsgDOTAFantasyPlayerStandingsRequest::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyPlayerStandingsRequest.count)
}

// optional uint32 role = 3;
bool CMsgDOTAFantasyPlayerStandingsRequest::has_role() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAFantasyPlayerStandingsRequest::set_has_role() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAFantasyPlayerStandingsRequest::clear_has_role() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAFantasyPlayerStandingsRequest::clear_role() {
  role_ = 0u;
  clear_has_role();
}
::google::protobuf::uint32 CMsgDOTAFantasyPlayerStandingsRequest::role() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerStandingsRequest.role)
  return role_;
}
void CMsgDOTAFantasyPlayerStandingsRequest::set_role(::google::protobuf::uint32 value) {
  set_has_role();
  role_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyPlayerStandingsRequest.role)
}

// optional uint32 filter_start_time = 4;
bool CMsgDOTAFantasyPlayerStandingsRequest::has_filter_start_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTAFantasyPlayerStandingsRequest::set_has_filter_start_time() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTAFantasyPlayerStandingsRequest::clear_has_filter_start_time() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTAFantasyPlayerStandingsRequest::clear_filter_start_time() {
  filter_start_time_ = 0u;
  clear_has_filter_start_time();
}
::google::protobuf::uint32 CMsgDOTAFantasyPlayerStandingsRequest::filter_start_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerStandingsRequest.filter_start_time)
  return filter_start_time_;
}
void CMsgDOTAFantasyPlayerStandingsRequest::set_filter_start_time(::google::protobuf::uint32 value) {
  set_has_filter_start_time();
  filter_start_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyPlayerStandingsRequest.filter_start_time)
}

// optional uint32 filter_end_time = 5;
bool CMsgDOTAFantasyPlayerStandingsRequest::has_filter_end_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgDOTAFantasyPlayerStandingsRequest::set_has_filter_end_time() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgDOTAFantasyPlayerStandingsRequest::clear_has_filter_end_time() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgDOTAFantasyPlayerStandingsRequest::clear_filter_end_time() {
  filter_end_time_ = 0u;
  clear_has_filter_end_time();
}
::google::protobuf::uint32 CMsgDOTAFantasyPlayerStandingsRequest::filter_end_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerStandingsRequest.filter_end_time)
  return filter_end_time_;
}
void CMsgDOTAFantasyPlayerStandingsRequest::set_filter_end_time(::google::protobuf::uint32 value) {
  set_has_filter_end_time();
  filter_end_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyPlayerStandingsRequest.filter_end_time)
}

// optional uint64 filter_match_id = 6;
bool CMsgDOTAFantasyPlayerStandingsRequest::has_filter_match_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDOTAFantasyPlayerStandingsRequest::set_has_filter_match_id() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDOTAFantasyPlayerStandingsRequest::clear_has_filter_match_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDOTAFantasyPlayerStandingsRequest::clear_filter_match_id() {
  filter_match_id_ = GOOGLE_ULONGLONG(0);
  clear_has_filter_match_id();
}
::google::protobuf::uint64 CMsgDOTAFantasyPlayerStandingsRequest::filter_match_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerStandingsRequest.filter_match_id)
  return filter_match_id_;
}
void CMsgDOTAFantasyPlayerStandingsRequest::set_filter_match_id(::google::protobuf::uint64 value) {
  set_has_filter_match_id();
  filter_match_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyPlayerStandingsRequest.filter_match_id)
}

// optional bool filter_last_match = 7;
bool CMsgDOTAFantasyPlayerStandingsRequest::has_filter_last_match() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgDOTAFantasyPlayerStandingsRequest::set_has_filter_last_match() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgDOTAFantasyPlayerStandingsRequest::clear_has_filter_last_match() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgDOTAFantasyPlayerStandingsRequest::clear_filter_last_match() {
  filter_last_match_ = false;
  clear_has_filter_last_match();
}
bool CMsgDOTAFantasyPlayerStandingsRequest::filter_last_match() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerStandingsRequest.filter_last_match)
  return filter_last_match_;
}
void CMsgDOTAFantasyPlayerStandingsRequest::set_filter_last_match(bool value) {
  set_has_filter_last_match();
  filter_last_match_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyPlayerStandingsRequest.filter_last_match)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::kPlayerAccountIdFieldNumber;
const int CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::kPlayerNameFieldNumber;
const int CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::kScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore)
}
CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore(const CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  player_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_player_name()) {
    player_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.player_name_);
  }
  ::memcpy(&player_account_id_, &from.player_account_id_,
    reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&player_account_id_) + sizeof(score_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore)
}

void CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::SharedCtor() {
  _cached_size_ = 0;
  player_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&player_account_id_, 0, reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&player_account_id_) + sizeof(score_));
}

CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::~CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore)
  SharedDtor();
}

void CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::SharedDtor() {
  player_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore& CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore* CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore* n = new CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore)
  if (has_player_name()) {
    GOOGLE_DCHECK(!player_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*player_name_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&player_account_id_, 0, reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&player_account_id_) + sizeof(score_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 player_account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_player_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string player_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->player_name().data(), this->player_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore.player_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float score = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore)
  return false;
#undef DO_
}

void CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_account_id(), output);
  }

  // optional string player_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore.player_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->player_name(), output);
  }

  // optional float score = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->score(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore)
}

::google::protobuf::uint8* CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_account_id(), target);
  }

  // optional string player_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore.player_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->player_name(), target);
  }

  // optional float score = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->score(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore)
  return target;
}

size_t CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string player_name = 2;
    if (has_player_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_name());
    }

    // optional uint32 player_account_id = 1;
    if (has_player_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_account_id());
    }

    // optional float score = 3;
    if (has_score()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::MergeFrom(const CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_player_name();
      player_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.player_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      player_account_id_ = from.player_account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      score_ = from.score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::CopyFrom(const CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::Swap(CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::InternalSwap(CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore* other) {
  player_name_.Swap(&other->player_name_);
  std::swap(player_account_id_, other->player_account_id_);
  std::swap(score_, other->score_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore

// optional uint32 player_account_id = 1;
bool CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::has_player_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::set_has_player_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::clear_has_player_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::clear_player_account_id() {
  player_account_id_ = 0u;
  clear_has_player_account_id();
}
::google::protobuf::uint32 CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::player_account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore.player_account_id)
  return player_account_id_;
}
void CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::set_player_account_id(::google::protobuf::uint32 value) {
  set_has_player_account_id();
  player_account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore.player_account_id)
}

// optional string player_name = 2;
bool CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::has_player_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::set_has_player_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::clear_has_player_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::clear_player_name() {
  player_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_player_name();
}
const ::std::string& CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::player_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore.player_name)
  return player_name_.GetNoArena();
}
void CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::set_player_name(const ::std::string& value) {
  set_has_player_name();
  player_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore.player_name)
}
#if LANG_CXX11
void CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::set_player_name(::std::string&& value) {
  set_has_player_name();
  player_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore.player_name)
}
#endif
void CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::set_player_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_player_name();
  player_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore.player_name)
}
void CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::set_player_name(const char* value, size_t size) {
  set_has_player_name();
  player_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore.player_name)
}
::std::string* CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::mutable_player_name() {
  set_has_player_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore.player_name)
  return player_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::release_player_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore.player_name)
  clear_has_player_name();
  return player_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::set_allocated_player_name(::std::string* player_name) {
  if (player_name != NULL) {
    set_has_player_name();
  } else {
    clear_has_player_name();
  }
  player_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), player_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore.player_name)
}

// optional float score = 3;
bool CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::has_score() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::set_has_score() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::clear_has_score() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::clear_score() {
  score_ = 0;
  clear_has_score();
}
float CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::score() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore.score)
  return score_;
}
void CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::set_score(float value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore.score)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyPlayerStandingsResponse::kResultFieldNumber;
const int CMsgDOTAFantasyPlayerStandingsResponse::kFantasyLeagueIdFieldNumber;
const int CMsgDOTAFantasyPlayerStandingsResponse::kRoleFieldNumber;
const int CMsgDOTAFantasyPlayerStandingsResponse::kPlayerScoresFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyPlayerStandingsResponse::CMsgDOTAFantasyPlayerStandingsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyPlayerStandingsResponse)
}
CMsgDOTAFantasyPlayerStandingsResponse::CMsgDOTAFantasyPlayerStandingsResponse(const CMsgDOTAFantasyPlayerStandingsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      player_scores_(from.player_scores_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    reinterpret_cast<char*>(&role_) -
    reinterpret_cast<char*>(&result_) + sizeof(role_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyPlayerStandingsResponse)
}

void CMsgDOTAFantasyPlayerStandingsResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&result_, 0, reinterpret_cast<char*>(&role_) -
    reinterpret_cast<char*>(&result_) + sizeof(role_));
}

CMsgDOTAFantasyPlayerStandingsResponse::~CMsgDOTAFantasyPlayerStandingsResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyPlayerStandingsResponse)
  SharedDtor();
}

void CMsgDOTAFantasyPlayerStandingsResponse::SharedDtor() {
}

void CMsgDOTAFantasyPlayerStandingsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyPlayerStandingsResponse::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAFantasyPlayerStandingsResponse& CMsgDOTAFantasyPlayerStandingsResponse::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAFantasyPlayerStandingsResponse* CMsgDOTAFantasyPlayerStandingsResponse::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyPlayerStandingsResponse* n = new CMsgDOTAFantasyPlayerStandingsResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyPlayerStandingsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyPlayerStandingsResponse)
  player_scores_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&result_, 0, reinterpret_cast<char*>(&role_) -
      reinterpret_cast<char*>(&result_) + sizeof(role_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAFantasyPlayerStandingsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyPlayerStandingsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgDOTAFantasyPlayerStandingsResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgDOTAFantasyPlayerStandingsResponse_EResult_IsValid(value)) {
            set_result(static_cast< ::proto::dota::CMsgDOTAFantasyPlayerStandingsResponse_EResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 fantasy_league_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_fantasy_league_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 role = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_role();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore player_scores = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_scores()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyPlayerStandingsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyPlayerStandingsResponse)
  return false;
#undef DO_
}

void CMsgDOTAFantasyPlayerStandingsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyPlayerStandingsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAFantasyPlayerStandingsResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional uint32 fantasy_league_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->fantasy_league_id(), output);
  }

  // optional uint32 role = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->role(), output);
  }

  // repeated .proto.dota.CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore player_scores = 4;
  for (unsigned int i = 0, n = this->player_scores_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->player_scores(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyPlayerStandingsResponse)
}

::google::protobuf::uint8* CMsgDOTAFantasyPlayerStandingsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyPlayerStandingsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAFantasyPlayerStandingsResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional uint32 fantasy_league_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->fantasy_league_id(), target);
  }

  // optional uint32 role = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->role(), target);
  }

  // repeated .proto.dota.CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore player_scores = 4;
  for (unsigned int i = 0, n = this->player_scores_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->player_scores(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyPlayerStandingsResponse)
  return target;
}

size_t CMsgDOTAFantasyPlayerStandingsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyPlayerStandingsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore player_scores = 4;
  {
    unsigned int count = this->player_scores_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_scores(i));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional .proto.dota.CMsgDOTAFantasyPlayerStandingsResponse.EResult result = 1 [default = SUCCESS];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 fantasy_league_id = 2;
    if (has_fantasy_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_league_id());
    }

    // optional uint32 role = 3;
    if (has_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyPlayerStandingsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyPlayerStandingsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyPlayerStandingsResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyPlayerStandingsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyPlayerStandingsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyPlayerStandingsResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyPlayerStandingsResponse::MergeFrom(const CMsgDOTAFantasyPlayerStandingsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyPlayerStandingsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_scores_.MergeFrom(from.player_scores_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000002u) {
      fantasy_league_id_ = from.fantasy_league_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      role_ = from.role_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyPlayerStandingsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyPlayerStandingsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyPlayerStandingsResponse::CopyFrom(const CMsgDOTAFantasyPlayerStandingsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyPlayerStandingsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyPlayerStandingsResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyPlayerStandingsResponse::Swap(CMsgDOTAFantasyPlayerStandingsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyPlayerStandingsResponse::InternalSwap(CMsgDOTAFantasyPlayerStandingsResponse* other) {
  player_scores_.InternalSwap(&other->player_scores_);
  std::swap(result_, other->result_);
  std::swap(fantasy_league_id_, other->fantasy_league_id_);
  std::swap(role_, other->role_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyPlayerStandingsResponse::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyPlayerStandingsResponse

// optional .proto.dota.CMsgDOTAFantasyPlayerStandingsResponse.EResult result = 1 [default = SUCCESS];
bool CMsgDOTAFantasyPlayerStandingsResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyPlayerStandingsResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyPlayerStandingsResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyPlayerStandingsResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
::proto::dota::CMsgDOTAFantasyPlayerStandingsResponse_EResult CMsgDOTAFantasyPlayerStandingsResponse::result() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerStandingsResponse.result)
  return static_cast< ::proto::dota::CMsgDOTAFantasyPlayerStandingsResponse_EResult >(result_);
}
void CMsgDOTAFantasyPlayerStandingsResponse::set_result(::proto::dota::CMsgDOTAFantasyPlayerStandingsResponse_EResult value) {
  assert(::proto::dota::CMsgDOTAFantasyPlayerStandingsResponse_EResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyPlayerStandingsResponse.result)
}

// optional uint32 fantasy_league_id = 2;
bool CMsgDOTAFantasyPlayerStandingsResponse::has_fantasy_league_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAFantasyPlayerStandingsResponse::set_has_fantasy_league_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAFantasyPlayerStandingsResponse::clear_has_fantasy_league_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAFantasyPlayerStandingsResponse::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  clear_has_fantasy_league_id();
}
::google::protobuf::uint32 CMsgDOTAFantasyPlayerStandingsResponse::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerStandingsResponse.fantasy_league_id)
  return fantasy_league_id_;
}
void CMsgDOTAFantasyPlayerStandingsResponse::set_fantasy_league_id(::google::protobuf::uint32 value) {
  set_has_fantasy_league_id();
  fantasy_league_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyPlayerStandingsResponse.fantasy_league_id)
}

// optional uint32 role = 3;
bool CMsgDOTAFantasyPlayerStandingsResponse::has_role() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAFantasyPlayerStandingsResponse::set_has_role() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAFantasyPlayerStandingsResponse::clear_has_role() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAFantasyPlayerStandingsResponse::clear_role() {
  role_ = 0u;
  clear_has_role();
}
::google::protobuf::uint32 CMsgDOTAFantasyPlayerStandingsResponse::role() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerStandingsResponse.role)
  return role_;
}
void CMsgDOTAFantasyPlayerStandingsResponse::set_role(::google::protobuf::uint32 value) {
  set_has_role();
  role_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyPlayerStandingsResponse.role)
}

// repeated .proto.dota.CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore player_scores = 4;
int CMsgDOTAFantasyPlayerStandingsResponse::player_scores_size() const {
  return player_scores_.size();
}
void CMsgDOTAFantasyPlayerStandingsResponse::clear_player_scores() {
  player_scores_.Clear();
}
const ::proto::dota::CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore& CMsgDOTAFantasyPlayerStandingsResponse::player_scores(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerStandingsResponse.player_scores)
  return player_scores_.Get(index);
}
::proto::dota::CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore* CMsgDOTAFantasyPlayerStandingsResponse::mutable_player_scores(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAFantasyPlayerStandingsResponse.player_scores)
  return player_scores_.Mutable(index);
}
::proto::dota::CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore* CMsgDOTAFantasyPlayerStandingsResponse::add_player_scores() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTAFantasyPlayerStandingsResponse.player_scores)
  return player_scores_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore >*
CMsgDOTAFantasyPlayerStandingsResponse::mutable_player_scores() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTAFantasyPlayerStandingsResponse.player_scores)
  return &player_scores_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore >&
CMsgDOTAFantasyPlayerStandingsResponse::player_scores() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTAFantasyPlayerStandingsResponse.player_scores)
  return player_scores_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyPlayerInfoRequest::CMsgDOTAFantasyPlayerInfoRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyPlayerInfoRequest)
}
CMsgDOTAFantasyPlayerInfoRequest::CMsgDOTAFantasyPlayerInfoRequest(const CMsgDOTAFantasyPlayerInfoRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyPlayerInfoRequest)
}

void CMsgDOTAFantasyPlayerInfoRequest::SharedCtor() {
  _cached_size_ = 0;
}

CMsgDOTAFantasyPlayerInfoRequest::~CMsgDOTAFantasyPlayerInfoRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyPlayerInfoRequest)
  SharedDtor();
}

void CMsgDOTAFantasyPlayerInfoRequest::SharedDtor() {
}

void CMsgDOTAFantasyPlayerInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyPlayerInfoRequest::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAFantasyPlayerInfoRequest& CMsgDOTAFantasyPlayerInfoRequest::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAFantasyPlayerInfoRequest* CMsgDOTAFantasyPlayerInfoRequest::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyPlayerInfoRequest* n = new CMsgDOTAFantasyPlayerInfoRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyPlayerInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyPlayerInfoRequest)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAFantasyPlayerInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyPlayerInfoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyPlayerInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyPlayerInfoRequest)
  return false;
#undef DO_
}

void CMsgDOTAFantasyPlayerInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyPlayerInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyPlayerInfoRequest)
}

::google::protobuf::uint8* CMsgDOTAFantasyPlayerInfoRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyPlayerInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyPlayerInfoRequest)
  return target;
}

size_t CMsgDOTAFantasyPlayerInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyPlayerInfoRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyPlayerInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyPlayerInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyPlayerInfoRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyPlayerInfoRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyPlayerInfoRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyPlayerInfoRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyPlayerInfoRequest::MergeFrom(const CMsgDOTAFantasyPlayerInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyPlayerInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgDOTAFantasyPlayerInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyPlayerInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyPlayerInfoRequest::CopyFrom(const CMsgDOTAFantasyPlayerInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyPlayerInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyPlayerInfoRequest::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyPlayerInfoRequest::Swap(CMsgDOTAFantasyPlayerInfoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyPlayerInfoRequest::InternalSwap(CMsgDOTAFantasyPlayerInfoRequest* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyPlayerInfoRequest::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyPlayerInfoRequest

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyPlayerInfoResponse::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyPlayerInfoResponse::CMsgDOTAFantasyPlayerInfoResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyPlayerInfoResponse)
}
CMsgDOTAFantasyPlayerInfoResponse::CMsgDOTAFantasyPlayerInfoResponse(const CMsgDOTAFantasyPlayerInfoResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_msg()) {
    msg_ = new ::proto::dota::CMsgGCPlayerInfo(*from.msg_);
  } else {
    msg_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyPlayerInfoResponse)
}

void CMsgDOTAFantasyPlayerInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  msg_ = NULL;
}

CMsgDOTAFantasyPlayerInfoResponse::~CMsgDOTAFantasyPlayerInfoResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyPlayerInfoResponse)
  SharedDtor();
}

void CMsgDOTAFantasyPlayerInfoResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete msg_;
  }
}

void CMsgDOTAFantasyPlayerInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyPlayerInfoResponse::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAFantasyPlayerInfoResponse& CMsgDOTAFantasyPlayerInfoResponse::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAFantasyPlayerInfoResponse* CMsgDOTAFantasyPlayerInfoResponse::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyPlayerInfoResponse* n = new CMsgDOTAFantasyPlayerInfoResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyPlayerInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyPlayerInfoResponse)
  if (has_msg()) {
    GOOGLE_DCHECK(msg_ != NULL);
    msg_->::proto::dota::CMsgGCPlayerInfo::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAFantasyPlayerInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyPlayerInfoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgGCPlayerInfo msg = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyPlayerInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyPlayerInfoResponse)
  return false;
#undef DO_
}

void CMsgDOTAFantasyPlayerInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyPlayerInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgGCPlayerInfo msg = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->msg_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyPlayerInfoResponse)
}

::google::protobuf::uint8* CMsgDOTAFantasyPlayerInfoResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyPlayerInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgGCPlayerInfo msg = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->msg_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyPlayerInfoResponse)
  return target;
}

size_t CMsgDOTAFantasyPlayerInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyPlayerInfoResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .proto.dota.CMsgGCPlayerInfo msg = 1;
  if (has_msg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msg_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyPlayerInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyPlayerInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyPlayerInfoResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyPlayerInfoResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyPlayerInfoResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyPlayerInfoResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyPlayerInfoResponse::MergeFrom(const CMsgDOTAFantasyPlayerInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyPlayerInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_msg()) {
    mutable_msg()->::proto::dota::CMsgGCPlayerInfo::MergeFrom(from.msg());
  }
}

void CMsgDOTAFantasyPlayerInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyPlayerInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyPlayerInfoResponse::CopyFrom(const CMsgDOTAFantasyPlayerInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyPlayerInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyPlayerInfoResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyPlayerInfoResponse::Swap(CMsgDOTAFantasyPlayerInfoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyPlayerInfoResponse::InternalSwap(CMsgDOTAFantasyPlayerInfoResponse* other) {
  std::swap(msg_, other->msg_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyPlayerInfoResponse::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyPlayerInfoResponse

// optional .proto.dota.CMsgGCPlayerInfo msg = 1;
bool CMsgDOTAFantasyPlayerInfoResponse::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyPlayerInfoResponse::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyPlayerInfoResponse::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyPlayerInfoResponse::clear_msg() {
  if (msg_ != NULL) msg_->::proto::dota::CMsgGCPlayerInfo::Clear();
  clear_has_msg();
}
const ::proto::dota::CMsgGCPlayerInfo& CMsgDOTAFantasyPlayerInfoResponse::msg() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerInfoResponse.msg)
  return msg_ != NULL ? *msg_
                         : *::proto::dota::CMsgGCPlayerInfo::internal_default_instance();
}
::proto::dota::CMsgGCPlayerInfo* CMsgDOTAFantasyPlayerInfoResponse::mutable_msg() {
  set_has_msg();
  if (msg_ == NULL) {
    msg_ = new ::proto::dota::CMsgGCPlayerInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAFantasyPlayerInfoResponse.msg)
  return msg_;
}
::proto::dota::CMsgGCPlayerInfo* CMsgDOTAFantasyPlayerInfoResponse::release_msg() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAFantasyPlayerInfoResponse.msg)
  clear_has_msg();
  ::proto::dota::CMsgGCPlayerInfo* temp = msg_;
  msg_ = NULL;
  return temp;
}
void CMsgDOTAFantasyPlayerInfoResponse::set_allocated_msg(::proto::dota::CMsgGCPlayerInfo* msg) {
  delete msg_;
  msg_ = msg;
  if (msg) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAFantasyPlayerInfoResponse.msg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyLeagueCreateRequest::kSeasonIdFieldNumber;
const int CMsgDOTAFantasyLeagueCreateRequest::kFantasyLeagueNameFieldNumber;
const int CMsgDOTAFantasyLeagueCreateRequest::kPasswordFieldNumber;
const int CMsgDOTAFantasyLeagueCreateRequest::kTeamNameFieldNumber;
const int CMsgDOTAFantasyLeagueCreateRequest::kLogoFieldNumber;
const int CMsgDOTAFantasyLeagueCreateRequest::kTicketItemIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyLeagueCreateRequest::CMsgDOTAFantasyLeagueCreateRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyLeagueCreateRequest)
}
CMsgDOTAFantasyLeagueCreateRequest::CMsgDOTAFantasyLeagueCreateRequest(const CMsgDOTAFantasyLeagueCreateRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fantasy_league_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fantasy_league_name()) {
    fantasy_league_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fantasy_league_name_);
  }
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_password()) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_team_name()) {
    team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_);
  }
  ::memcpy(&logo_, &from.logo_,
    reinterpret_cast<char*>(&season_id_) -
    reinterpret_cast<char*>(&logo_) + sizeof(season_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyLeagueCreateRequest)
}

void CMsgDOTAFantasyLeagueCreateRequest::SharedCtor() {
  _cached_size_ = 0;
  fantasy_league_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&logo_, 0, reinterpret_cast<char*>(&season_id_) -
    reinterpret_cast<char*>(&logo_) + sizeof(season_id_));
}

CMsgDOTAFantasyLeagueCreateRequest::~CMsgDOTAFantasyLeagueCreateRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyLeagueCreateRequest)
  SharedDtor();
}

void CMsgDOTAFantasyLeagueCreateRequest::SharedDtor() {
  fantasy_league_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTAFantasyLeagueCreateRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyLeagueCreateRequest::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAFantasyLeagueCreateRequest& CMsgDOTAFantasyLeagueCreateRequest::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAFantasyLeagueCreateRequest* CMsgDOTAFantasyLeagueCreateRequest::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyLeagueCreateRequest* n = new CMsgDOTAFantasyLeagueCreateRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyLeagueCreateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyLeagueCreateRequest)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_fantasy_league_name()) {
      GOOGLE_DCHECK(!fantasy_league_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*fantasy_league_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_password()) {
      GOOGLE_DCHECK(!password_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*password_.UnsafeRawStringPointer())->clear();
    }
    if (has_team_name()) {
      GOOGLE_DCHECK(!team_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*team_name_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 56u) {
    ::memset(&logo_, 0, reinterpret_cast<char*>(&season_id_) -
      reinterpret_cast<char*>(&logo_) + sizeof(season_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAFantasyLeagueCreateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyLeagueCreateRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 season_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_season_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &season_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string fantasy_league_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fantasy_league_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fantasy_league_name().data(), this->fantasy_league_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAFantasyLeagueCreateRequest.fantasy_league_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string password = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAFantasyLeagueCreateRequest.password");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string team_name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team_name().data(), this->team_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAFantasyLeagueCreateRequest.team_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 logo = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_logo();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 ticket_item_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_ticket_item_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ticket_item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyLeagueCreateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyLeagueCreateRequest)
  return false;
#undef DO_
}

void CMsgDOTAFantasyLeagueCreateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyLeagueCreateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 season_id = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->season_id(), output);
  }

  // optional string fantasy_league_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fantasy_league_name().data(), this->fantasy_league_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAFantasyLeagueCreateRequest.fantasy_league_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->fantasy_league_name(), output);
  }

  // optional string password = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAFantasyLeagueCreateRequest.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->password(), output);
  }

  // optional string team_name = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAFantasyLeagueCreateRequest.team_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->team_name(), output);
  }

  // optional uint64 logo = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->logo(), output);
  }

  // optional uint64 ticket_item_id = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->ticket_item_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyLeagueCreateRequest)
}

::google::protobuf::uint8* CMsgDOTAFantasyLeagueCreateRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyLeagueCreateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 season_id = 1;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->season_id(), target);
  }

  // optional string fantasy_league_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fantasy_league_name().data(), this->fantasy_league_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAFantasyLeagueCreateRequest.fantasy_league_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->fantasy_league_name(), target);
  }

  // optional string password = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAFantasyLeagueCreateRequest.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->password(), target);
  }

  // optional string team_name = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAFantasyLeagueCreateRequest.team_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->team_name(), target);
  }

  // optional uint64 logo = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->logo(), target);
  }

  // optional uint64 ticket_item_id = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->ticket_item_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyLeagueCreateRequest)
  return target;
}

size_t CMsgDOTAFantasyLeagueCreateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyLeagueCreateRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional string fantasy_league_name = 2;
    if (has_fantasy_league_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fantasy_league_name());
    }

    // optional string password = 3;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional string team_name = 4;
    if (has_team_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_name());
    }

    // optional uint64 logo = 5;
    if (has_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->logo());
    }

    // optional uint64 ticket_item_id = 6;
    if (has_ticket_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ticket_item_id());
    }

    // optional uint32 season_id = 1;
    if (has_season_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->season_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyLeagueCreateRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyLeagueCreateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyLeagueCreateRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyLeagueCreateRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyLeagueCreateRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyLeagueCreateRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyLeagueCreateRequest::MergeFrom(const CMsgDOTAFantasyLeagueCreateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyLeagueCreateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_fantasy_league_name();
      fantasy_league_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fantasy_league_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_password();
      password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_team_name();
      team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_);
    }
    if (cached_has_bits & 0x00000008u) {
      logo_ = from.logo_;
    }
    if (cached_has_bits & 0x00000010u) {
      ticket_item_id_ = from.ticket_item_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      season_id_ = from.season_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyLeagueCreateRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyLeagueCreateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyLeagueCreateRequest::CopyFrom(const CMsgDOTAFantasyLeagueCreateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyLeagueCreateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyLeagueCreateRequest::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyLeagueCreateRequest::Swap(CMsgDOTAFantasyLeagueCreateRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyLeagueCreateRequest::InternalSwap(CMsgDOTAFantasyLeagueCreateRequest* other) {
  fantasy_league_name_.Swap(&other->fantasy_league_name_);
  password_.Swap(&other->password_);
  team_name_.Swap(&other->team_name_);
  std::swap(logo_, other->logo_);
  std::swap(ticket_item_id_, other->ticket_item_id_);
  std::swap(season_id_, other->season_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyLeagueCreateRequest::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyLeagueCreateRequest

// optional uint32 season_id = 1;
bool CMsgDOTAFantasyLeagueCreateRequest::has_season_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgDOTAFantasyLeagueCreateRequest::set_has_season_id() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgDOTAFantasyLeagueCreateRequest::clear_has_season_id() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgDOTAFantasyLeagueCreateRequest::clear_season_id() {
  season_id_ = 0u;
  clear_has_season_id();
}
::google::protobuf::uint32 CMsgDOTAFantasyLeagueCreateRequest::season_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyLeagueCreateRequest.season_id)
  return season_id_;
}
void CMsgDOTAFantasyLeagueCreateRequest::set_season_id(::google::protobuf::uint32 value) {
  set_has_season_id();
  season_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyLeagueCreateRequest.season_id)
}

// optional string fantasy_league_name = 2;
bool CMsgDOTAFantasyLeagueCreateRequest::has_fantasy_league_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyLeagueCreateRequest::set_has_fantasy_league_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyLeagueCreateRequest::clear_has_fantasy_league_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyLeagueCreateRequest::clear_fantasy_league_name() {
  fantasy_league_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fantasy_league_name();
}
const ::std::string& CMsgDOTAFantasyLeagueCreateRequest::fantasy_league_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyLeagueCreateRequest.fantasy_league_name)
  return fantasy_league_name_.GetNoArena();
}
void CMsgDOTAFantasyLeagueCreateRequest::set_fantasy_league_name(const ::std::string& value) {
  set_has_fantasy_league_name();
  fantasy_league_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyLeagueCreateRequest.fantasy_league_name)
}
#if LANG_CXX11
void CMsgDOTAFantasyLeagueCreateRequest::set_fantasy_league_name(::std::string&& value) {
  set_has_fantasy_league_name();
  fantasy_league_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAFantasyLeagueCreateRequest.fantasy_league_name)
}
#endif
void CMsgDOTAFantasyLeagueCreateRequest::set_fantasy_league_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fantasy_league_name();
  fantasy_league_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAFantasyLeagueCreateRequest.fantasy_league_name)
}
void CMsgDOTAFantasyLeagueCreateRequest::set_fantasy_league_name(const char* value, size_t size) {
  set_has_fantasy_league_name();
  fantasy_league_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAFantasyLeagueCreateRequest.fantasy_league_name)
}
::std::string* CMsgDOTAFantasyLeagueCreateRequest::mutable_fantasy_league_name() {
  set_has_fantasy_league_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAFantasyLeagueCreateRequest.fantasy_league_name)
  return fantasy_league_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTAFantasyLeagueCreateRequest::release_fantasy_league_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAFantasyLeagueCreateRequest.fantasy_league_name)
  clear_has_fantasy_league_name();
  return fantasy_league_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTAFantasyLeagueCreateRequest::set_allocated_fantasy_league_name(::std::string* fantasy_league_name) {
  if (fantasy_league_name != NULL) {
    set_has_fantasy_league_name();
  } else {
    clear_has_fantasy_league_name();
  }
  fantasy_league_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fantasy_league_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAFantasyLeagueCreateRequest.fantasy_league_name)
}

// optional string password = 3;
bool CMsgDOTAFantasyLeagueCreateRequest::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAFantasyLeagueCreateRequest::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAFantasyLeagueCreateRequest::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAFantasyLeagueCreateRequest::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
const ::std::string& CMsgDOTAFantasyLeagueCreateRequest::password() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyLeagueCreateRequest.password)
  return password_.GetNoArena();
}
void CMsgDOTAFantasyLeagueCreateRequest::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyLeagueCreateRequest.password)
}
#if LANG_CXX11
void CMsgDOTAFantasyLeagueCreateRequest::set_password(::std::string&& value) {
  set_has_password();
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAFantasyLeagueCreateRequest.password)
}
#endif
void CMsgDOTAFantasyLeagueCreateRequest::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAFantasyLeagueCreateRequest.password)
}
void CMsgDOTAFantasyLeagueCreateRequest::set_password(const char* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAFantasyLeagueCreateRequest.password)
}
::std::string* CMsgDOTAFantasyLeagueCreateRequest::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAFantasyLeagueCreateRequest.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTAFantasyLeagueCreateRequest::release_password() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAFantasyLeagueCreateRequest.password)
  clear_has_password();
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTAFantasyLeagueCreateRequest::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAFantasyLeagueCreateRequest.password)
}

// optional string team_name = 4;
bool CMsgDOTAFantasyLeagueCreateRequest::has_team_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAFantasyLeagueCreateRequest::set_has_team_name() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAFantasyLeagueCreateRequest::clear_has_team_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAFantasyLeagueCreateRequest::clear_team_name() {
  team_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_team_name();
}
const ::std::string& CMsgDOTAFantasyLeagueCreateRequest::team_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyLeagueCreateRequest.team_name)
  return team_name_.GetNoArena();
}
void CMsgDOTAFantasyLeagueCreateRequest::set_team_name(const ::std::string& value) {
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyLeagueCreateRequest.team_name)
}
#if LANG_CXX11
void CMsgDOTAFantasyLeagueCreateRequest::set_team_name(::std::string&& value) {
  set_has_team_name();
  team_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAFantasyLeagueCreateRequest.team_name)
}
#endif
void CMsgDOTAFantasyLeagueCreateRequest::set_team_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAFantasyLeagueCreateRequest.team_name)
}
void CMsgDOTAFantasyLeagueCreateRequest::set_team_name(const char* value, size_t size) {
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAFantasyLeagueCreateRequest.team_name)
}
::std::string* CMsgDOTAFantasyLeagueCreateRequest::mutable_team_name() {
  set_has_team_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAFantasyLeagueCreateRequest.team_name)
  return team_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTAFantasyLeagueCreateRequest::release_team_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAFantasyLeagueCreateRequest.team_name)
  clear_has_team_name();
  return team_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTAFantasyLeagueCreateRequest::set_allocated_team_name(::std::string* team_name) {
  if (team_name != NULL) {
    set_has_team_name();
  } else {
    clear_has_team_name();
  }
  team_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), team_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAFantasyLeagueCreateRequest.team_name)
}

// optional uint64 logo = 5;
bool CMsgDOTAFantasyLeagueCreateRequest::has_logo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTAFantasyLeagueCreateRequest::set_has_logo() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTAFantasyLeagueCreateRequest::clear_has_logo() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTAFantasyLeagueCreateRequest::clear_logo() {
  logo_ = GOOGLE_ULONGLONG(0);
  clear_has_logo();
}
::google::protobuf::uint64 CMsgDOTAFantasyLeagueCreateRequest::logo() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyLeagueCreateRequest.logo)
  return logo_;
}
void CMsgDOTAFantasyLeagueCreateRequest::set_logo(::google::protobuf::uint64 value) {
  set_has_logo();
  logo_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyLeagueCreateRequest.logo)
}

// optional uint64 ticket_item_id = 6;
bool CMsgDOTAFantasyLeagueCreateRequest::has_ticket_item_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDOTAFantasyLeagueCreateRequest::set_has_ticket_item_id() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDOTAFantasyLeagueCreateRequest::clear_has_ticket_item_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDOTAFantasyLeagueCreateRequest::clear_ticket_item_id() {
  ticket_item_id_ = GOOGLE_ULONGLONG(0);
  clear_has_ticket_item_id();
}
::google::protobuf::uint64 CMsgDOTAFantasyLeagueCreateRequest::ticket_item_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyLeagueCreateRequest.ticket_item_id)
  return ticket_item_id_;
}
void CMsgDOTAFantasyLeagueCreateRequest::set_ticket_item_id(::google::protobuf::uint64 value) {
  set_has_ticket_item_id();
  ticket_item_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyLeagueCreateRequest.ticket_item_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyLeagueCreateResponse::kResultFieldNumber;
const int CMsgDOTAFantasyLeagueCreateResponse::kFantasyLeagueIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyLeagueCreateResponse::CMsgDOTAFantasyLeagueCreateResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyLeagueCreateResponse)
}
CMsgDOTAFantasyLeagueCreateResponse::CMsgDOTAFantasyLeagueCreateResponse(const CMsgDOTAFantasyLeagueCreateResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    reinterpret_cast<char*>(&fantasy_league_id_) -
    reinterpret_cast<char*>(&result_) + sizeof(fantasy_league_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyLeagueCreateResponse)
}

void CMsgDOTAFantasyLeagueCreateResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&result_, 0, reinterpret_cast<char*>(&fantasy_league_id_) -
    reinterpret_cast<char*>(&result_) + sizeof(fantasy_league_id_));
}

CMsgDOTAFantasyLeagueCreateResponse::~CMsgDOTAFantasyLeagueCreateResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyLeagueCreateResponse)
  SharedDtor();
}

void CMsgDOTAFantasyLeagueCreateResponse::SharedDtor() {
}

void CMsgDOTAFantasyLeagueCreateResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyLeagueCreateResponse::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAFantasyLeagueCreateResponse& CMsgDOTAFantasyLeagueCreateResponse::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAFantasyLeagueCreateResponse* CMsgDOTAFantasyLeagueCreateResponse::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyLeagueCreateResponse* n = new CMsgDOTAFantasyLeagueCreateResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyLeagueCreateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyLeagueCreateResponse)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&result_, 0, reinterpret_cast<char*>(&fantasy_league_id_) -
      reinterpret_cast<char*>(&result_) + sizeof(fantasy_league_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAFantasyLeagueCreateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyLeagueCreateResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgDOTAFantasyLeagueCreateResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgDOTAFantasyLeagueCreateResponse_EResult_IsValid(value)) {
            set_result(static_cast< ::proto::dota::CMsgDOTAFantasyLeagueCreateResponse_EResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 fantasy_league_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_fantasy_league_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyLeagueCreateResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyLeagueCreateResponse)
  return false;
#undef DO_
}

void CMsgDOTAFantasyLeagueCreateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyLeagueCreateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAFantasyLeagueCreateResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional uint32 fantasy_league_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->fantasy_league_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyLeagueCreateResponse)
}

::google::protobuf::uint8* CMsgDOTAFantasyLeagueCreateResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyLeagueCreateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAFantasyLeagueCreateResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional uint32 fantasy_league_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->fantasy_league_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyLeagueCreateResponse)
  return target;
}

size_t CMsgDOTAFantasyLeagueCreateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyLeagueCreateResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .proto.dota.CMsgDOTAFantasyLeagueCreateResponse.EResult result = 1 [default = SUCCESS];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 fantasy_league_id = 2;
    if (has_fantasy_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_league_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyLeagueCreateResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyLeagueCreateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyLeagueCreateResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyLeagueCreateResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyLeagueCreateResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyLeagueCreateResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyLeagueCreateResponse::MergeFrom(const CMsgDOTAFantasyLeagueCreateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyLeagueCreateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000002u) {
      fantasy_league_id_ = from.fantasy_league_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyLeagueCreateResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyLeagueCreateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyLeagueCreateResponse::CopyFrom(const CMsgDOTAFantasyLeagueCreateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyLeagueCreateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyLeagueCreateResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyLeagueCreateResponse::Swap(CMsgDOTAFantasyLeagueCreateResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyLeagueCreateResponse::InternalSwap(CMsgDOTAFantasyLeagueCreateResponse* other) {
  std::swap(result_, other->result_);
  std::swap(fantasy_league_id_, other->fantasy_league_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyLeagueCreateResponse::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyLeagueCreateResponse

// optional .proto.dota.CMsgDOTAFantasyLeagueCreateResponse.EResult result = 1 [default = SUCCESS];
bool CMsgDOTAFantasyLeagueCreateResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyLeagueCreateResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyLeagueCreateResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyLeagueCreateResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
::proto::dota::CMsgDOTAFantasyLeagueCreateResponse_EResult CMsgDOTAFantasyLeagueCreateResponse::result() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyLeagueCreateResponse.result)
  return static_cast< ::proto::dota::CMsgDOTAFantasyLeagueCreateResponse_EResult >(result_);
}
void CMsgDOTAFantasyLeagueCreateResponse::set_result(::proto::dota::CMsgDOTAFantasyLeagueCreateResponse_EResult value) {
  assert(::proto::dota::CMsgDOTAFantasyLeagueCreateResponse_EResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyLeagueCreateResponse.result)
}

// optional uint32 fantasy_league_id = 2;
bool CMsgDOTAFantasyLeagueCreateResponse::has_fantasy_league_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAFantasyLeagueCreateResponse::set_has_fantasy_league_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAFantasyLeagueCreateResponse::clear_has_fantasy_league_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAFantasyLeagueCreateResponse::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  clear_has_fantasy_league_id();
}
::google::protobuf::uint32 CMsgDOTAFantasyLeagueCreateResponse::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyLeagueCreateResponse.fantasy_league_id)
  return fantasy_league_id_;
}
void CMsgDOTAFantasyLeagueCreateResponse::set_fantasy_league_id(::google::protobuf::uint32 value) {
  set_has_fantasy_league_id();
  fantasy_league_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyLeagueCreateResponse.fantasy_league_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyTeamCreateRequest::kFantasyLeagueIdFieldNumber;
const int CMsgDOTAFantasyTeamCreateRequest::kPasswordFieldNumber;
const int CMsgDOTAFantasyTeamCreateRequest::kTeamNameFieldNumber;
const int CMsgDOTAFantasyTeamCreateRequest::kLogoFieldNumber;
const int CMsgDOTAFantasyTeamCreateRequest::kTicketItemIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyTeamCreateRequest::CMsgDOTAFantasyTeamCreateRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyTeamCreateRequest)
}
CMsgDOTAFantasyTeamCreateRequest::CMsgDOTAFantasyTeamCreateRequest(const CMsgDOTAFantasyTeamCreateRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_password()) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_team_name()) {
    team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_);
  }
  ::memcpy(&logo_, &from.logo_,
    reinterpret_cast<char*>(&fantasy_league_id_) -
    reinterpret_cast<char*>(&logo_) + sizeof(fantasy_league_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyTeamCreateRequest)
}

void CMsgDOTAFantasyTeamCreateRequest::SharedCtor() {
  _cached_size_ = 0;
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&logo_, 0, reinterpret_cast<char*>(&fantasy_league_id_) -
    reinterpret_cast<char*>(&logo_) + sizeof(fantasy_league_id_));
}

CMsgDOTAFantasyTeamCreateRequest::~CMsgDOTAFantasyTeamCreateRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyTeamCreateRequest)
  SharedDtor();
}

void CMsgDOTAFantasyTeamCreateRequest::SharedDtor() {
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTAFantasyTeamCreateRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyTeamCreateRequest::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAFantasyTeamCreateRequest& CMsgDOTAFantasyTeamCreateRequest::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAFantasyTeamCreateRequest* CMsgDOTAFantasyTeamCreateRequest::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyTeamCreateRequest* n = new CMsgDOTAFantasyTeamCreateRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyTeamCreateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyTeamCreateRequest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_password()) {
      GOOGLE_DCHECK(!password_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*password_.UnsafeRawStringPointer())->clear();
    }
    if (has_team_name()) {
      GOOGLE_DCHECK(!team_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*team_name_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 28u) {
    ::memset(&logo_, 0, reinterpret_cast<char*>(&fantasy_league_id_) -
      reinterpret_cast<char*>(&logo_) + sizeof(fantasy_league_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAFantasyTeamCreateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyTeamCreateRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_fantasy_league_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string password = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAFantasyTeamCreateRequest.password");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string team_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team_name().data(), this->team_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAFantasyTeamCreateRequest.team_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 logo = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_logo();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 ticket_item_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_ticket_item_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ticket_item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyTeamCreateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyTeamCreateRequest)
  return false;
#undef DO_
}

void CMsgDOTAFantasyTeamCreateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyTeamCreateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fantasy_league_id(), output);
  }

  // optional string password = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAFantasyTeamCreateRequest.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  // optional string team_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAFantasyTeamCreateRequest.team_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->team_name(), output);
  }

  // optional uint64 logo = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->logo(), output);
  }

  // optional uint64 ticket_item_id = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->ticket_item_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyTeamCreateRequest)
}

::google::protobuf::uint8* CMsgDOTAFantasyTeamCreateRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyTeamCreateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fantasy_league_id(), target);
  }

  // optional string password = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAFantasyTeamCreateRequest.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  // optional string team_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAFantasyTeamCreateRequest.team_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->team_name(), target);
  }

  // optional uint64 logo = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->logo(), target);
  }

  // optional uint64 ticket_item_id = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->ticket_item_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyTeamCreateRequest)
  return target;
}

size_t CMsgDOTAFantasyTeamCreateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyTeamCreateRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional string team_name = 3;
    if (has_team_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_name());
    }

    // optional uint64 logo = 4;
    if (has_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->logo());
    }

    // optional uint64 ticket_item_id = 5;
    if (has_ticket_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ticket_item_id());
    }

    // optional uint32 fantasy_league_id = 1;
    if (has_fantasy_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_league_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyTeamCreateRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyTeamCreateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyTeamCreateRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyTeamCreateRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyTeamCreateRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyTeamCreateRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyTeamCreateRequest::MergeFrom(const CMsgDOTAFantasyTeamCreateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyTeamCreateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_password();
      password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_team_name();
      team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      logo_ = from.logo_;
    }
    if (cached_has_bits & 0x00000008u) {
      ticket_item_id_ = from.ticket_item_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      fantasy_league_id_ = from.fantasy_league_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyTeamCreateRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyTeamCreateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyTeamCreateRequest::CopyFrom(const CMsgDOTAFantasyTeamCreateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyTeamCreateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyTeamCreateRequest::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyTeamCreateRequest::Swap(CMsgDOTAFantasyTeamCreateRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyTeamCreateRequest::InternalSwap(CMsgDOTAFantasyTeamCreateRequest* other) {
  password_.Swap(&other->password_);
  team_name_.Swap(&other->team_name_);
  std::swap(logo_, other->logo_);
  std::swap(ticket_item_id_, other->ticket_item_id_);
  std::swap(fantasy_league_id_, other->fantasy_league_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyTeamCreateRequest::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyTeamCreateRequest

// optional uint32 fantasy_league_id = 1;
bool CMsgDOTAFantasyTeamCreateRequest::has_fantasy_league_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDOTAFantasyTeamCreateRequest::set_has_fantasy_league_id() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDOTAFantasyTeamCreateRequest::clear_has_fantasy_league_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDOTAFantasyTeamCreateRequest::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  clear_has_fantasy_league_id();
}
::google::protobuf::uint32 CMsgDOTAFantasyTeamCreateRequest::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyTeamCreateRequest.fantasy_league_id)
  return fantasy_league_id_;
}
void CMsgDOTAFantasyTeamCreateRequest::set_fantasy_league_id(::google::protobuf::uint32 value) {
  set_has_fantasy_league_id();
  fantasy_league_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyTeamCreateRequest.fantasy_league_id)
}

// optional string password = 2;
bool CMsgDOTAFantasyTeamCreateRequest::has_password() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyTeamCreateRequest::set_has_password() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyTeamCreateRequest::clear_has_password() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyTeamCreateRequest::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
const ::std::string& CMsgDOTAFantasyTeamCreateRequest::password() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyTeamCreateRequest.password)
  return password_.GetNoArena();
}
void CMsgDOTAFantasyTeamCreateRequest::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyTeamCreateRequest.password)
}
#if LANG_CXX11
void CMsgDOTAFantasyTeamCreateRequest::set_password(::std::string&& value) {
  set_has_password();
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAFantasyTeamCreateRequest.password)
}
#endif
void CMsgDOTAFantasyTeamCreateRequest::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAFantasyTeamCreateRequest.password)
}
void CMsgDOTAFantasyTeamCreateRequest::set_password(const char* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAFantasyTeamCreateRequest.password)
}
::std::string* CMsgDOTAFantasyTeamCreateRequest::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAFantasyTeamCreateRequest.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTAFantasyTeamCreateRequest::release_password() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAFantasyTeamCreateRequest.password)
  clear_has_password();
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTAFantasyTeamCreateRequest::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAFantasyTeamCreateRequest.password)
}

// optional string team_name = 3;
bool CMsgDOTAFantasyTeamCreateRequest::has_team_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAFantasyTeamCreateRequest::set_has_team_name() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAFantasyTeamCreateRequest::clear_has_team_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAFantasyTeamCreateRequest::clear_team_name() {
  team_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_team_name();
}
const ::std::string& CMsgDOTAFantasyTeamCreateRequest::team_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyTeamCreateRequest.team_name)
  return team_name_.GetNoArena();
}
void CMsgDOTAFantasyTeamCreateRequest::set_team_name(const ::std::string& value) {
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyTeamCreateRequest.team_name)
}
#if LANG_CXX11
void CMsgDOTAFantasyTeamCreateRequest::set_team_name(::std::string&& value) {
  set_has_team_name();
  team_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAFantasyTeamCreateRequest.team_name)
}
#endif
void CMsgDOTAFantasyTeamCreateRequest::set_team_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAFantasyTeamCreateRequest.team_name)
}
void CMsgDOTAFantasyTeamCreateRequest::set_team_name(const char* value, size_t size) {
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAFantasyTeamCreateRequest.team_name)
}
::std::string* CMsgDOTAFantasyTeamCreateRequest::mutable_team_name() {
  set_has_team_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAFantasyTeamCreateRequest.team_name)
  return team_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTAFantasyTeamCreateRequest::release_team_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAFantasyTeamCreateRequest.team_name)
  clear_has_team_name();
  return team_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTAFantasyTeamCreateRequest::set_allocated_team_name(::std::string* team_name) {
  if (team_name != NULL) {
    set_has_team_name();
  } else {
    clear_has_team_name();
  }
  team_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), team_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAFantasyTeamCreateRequest.team_name)
}

// optional uint64 logo = 4;
bool CMsgDOTAFantasyTeamCreateRequest::has_logo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAFantasyTeamCreateRequest::set_has_logo() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAFantasyTeamCreateRequest::clear_has_logo() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAFantasyTeamCreateRequest::clear_logo() {
  logo_ = GOOGLE_ULONGLONG(0);
  clear_has_logo();
}
::google::protobuf::uint64 CMsgDOTAFantasyTeamCreateRequest::logo() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyTeamCreateRequest.logo)
  return logo_;
}
void CMsgDOTAFantasyTeamCreateRequest::set_logo(::google::protobuf::uint64 value) {
  set_has_logo();
  logo_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyTeamCreateRequest.logo)
}

// optional uint64 ticket_item_id = 5;
bool CMsgDOTAFantasyTeamCreateRequest::has_ticket_item_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTAFantasyTeamCreateRequest::set_has_ticket_item_id() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTAFantasyTeamCreateRequest::clear_has_ticket_item_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTAFantasyTeamCreateRequest::clear_ticket_item_id() {
  ticket_item_id_ = GOOGLE_ULONGLONG(0);
  clear_has_ticket_item_id();
}
::google::protobuf::uint64 CMsgDOTAFantasyTeamCreateRequest::ticket_item_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyTeamCreateRequest.ticket_item_id)
  return ticket_item_id_;
}
void CMsgDOTAFantasyTeamCreateRequest::set_ticket_item_id(::google::protobuf::uint64 value) {
  set_has_ticket_item_id();
  ticket_item_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyTeamCreateRequest.ticket_item_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyTeamCreateResponse::kResultFieldNumber;
const int CMsgDOTAFantasyTeamCreateResponse::kFantasyTeamIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyTeamCreateResponse::CMsgDOTAFantasyTeamCreateResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyTeamCreateResponse)
}
CMsgDOTAFantasyTeamCreateResponse::CMsgDOTAFantasyTeamCreateResponse(const CMsgDOTAFantasyTeamCreateResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    reinterpret_cast<char*>(&fantasy_team_index_) -
    reinterpret_cast<char*>(&result_) + sizeof(fantasy_team_index_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyTeamCreateResponse)
}

void CMsgDOTAFantasyTeamCreateResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&result_, 0, reinterpret_cast<char*>(&fantasy_team_index_) -
    reinterpret_cast<char*>(&result_) + sizeof(fantasy_team_index_));
}

CMsgDOTAFantasyTeamCreateResponse::~CMsgDOTAFantasyTeamCreateResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyTeamCreateResponse)
  SharedDtor();
}

void CMsgDOTAFantasyTeamCreateResponse::SharedDtor() {
}

void CMsgDOTAFantasyTeamCreateResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyTeamCreateResponse::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAFantasyTeamCreateResponse& CMsgDOTAFantasyTeamCreateResponse::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAFantasyTeamCreateResponse* CMsgDOTAFantasyTeamCreateResponse::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyTeamCreateResponse* n = new CMsgDOTAFantasyTeamCreateResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyTeamCreateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyTeamCreateResponse)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&result_, 0, reinterpret_cast<char*>(&fantasy_team_index_) -
      reinterpret_cast<char*>(&result_) + sizeof(fantasy_team_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAFantasyTeamCreateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyTeamCreateResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgDOTAFantasyTeamCreateResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgDOTAFantasyTeamCreateResponse_EResult_IsValid(value)) {
            set_result(static_cast< ::proto::dota::CMsgDOTAFantasyTeamCreateResponse_EResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 fantasy_team_index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_fantasy_team_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_team_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyTeamCreateResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyTeamCreateResponse)
  return false;
#undef DO_
}

void CMsgDOTAFantasyTeamCreateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyTeamCreateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAFantasyTeamCreateResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional uint32 fantasy_team_index = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->fantasy_team_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyTeamCreateResponse)
}

::google::protobuf::uint8* CMsgDOTAFantasyTeamCreateResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyTeamCreateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAFantasyTeamCreateResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional uint32 fantasy_team_index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->fantasy_team_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyTeamCreateResponse)
  return target;
}

size_t CMsgDOTAFantasyTeamCreateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyTeamCreateResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .proto.dota.CMsgDOTAFantasyTeamCreateResponse.EResult result = 1 [default = SUCCESS];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 fantasy_team_index = 2;
    if (has_fantasy_team_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_team_index());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyTeamCreateResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyTeamCreateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyTeamCreateResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyTeamCreateResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyTeamCreateResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyTeamCreateResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyTeamCreateResponse::MergeFrom(const CMsgDOTAFantasyTeamCreateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyTeamCreateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000002u) {
      fantasy_team_index_ = from.fantasy_team_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyTeamCreateResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyTeamCreateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyTeamCreateResponse::CopyFrom(const CMsgDOTAFantasyTeamCreateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyTeamCreateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyTeamCreateResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyTeamCreateResponse::Swap(CMsgDOTAFantasyTeamCreateResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyTeamCreateResponse::InternalSwap(CMsgDOTAFantasyTeamCreateResponse* other) {
  std::swap(result_, other->result_);
  std::swap(fantasy_team_index_, other->fantasy_team_index_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyTeamCreateResponse::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyTeamCreateResponse

// optional .proto.dota.CMsgDOTAFantasyTeamCreateResponse.EResult result = 1 [default = SUCCESS];
bool CMsgDOTAFantasyTeamCreateResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyTeamCreateResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyTeamCreateResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyTeamCreateResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
::proto::dota::CMsgDOTAFantasyTeamCreateResponse_EResult CMsgDOTAFantasyTeamCreateResponse::result() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyTeamCreateResponse.result)
  return static_cast< ::proto::dota::CMsgDOTAFantasyTeamCreateResponse_EResult >(result_);
}
void CMsgDOTAFantasyTeamCreateResponse::set_result(::proto::dota::CMsgDOTAFantasyTeamCreateResponse_EResult value) {
  assert(::proto::dota::CMsgDOTAFantasyTeamCreateResponse_EResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyTeamCreateResponse.result)
}

// optional uint32 fantasy_team_index = 2;
bool CMsgDOTAFantasyTeamCreateResponse::has_fantasy_team_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAFantasyTeamCreateResponse::set_has_fantasy_team_index() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAFantasyTeamCreateResponse::clear_has_fantasy_team_index() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAFantasyTeamCreateResponse::clear_fantasy_team_index() {
  fantasy_team_index_ = 0u;
  clear_has_fantasy_team_index();
}
::google::protobuf::uint32 CMsgDOTAFantasyTeamCreateResponse::fantasy_team_index() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyTeamCreateResponse.fantasy_team_index)
  return fantasy_team_index_;
}
void CMsgDOTAFantasyTeamCreateResponse::set_fantasy_team_index(::google::protobuf::uint32 value) {
  set_has_fantasy_team_index();
  fantasy_team_index_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyTeamCreateResponse.fantasy_team_index)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::kAccountIdFieldNumber;
const int CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::kInvitedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest.InviteChange)
}
CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange(const CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    reinterpret_cast<char*>(&invited_) -
    reinterpret_cast<char*>(&account_id_) + sizeof(invited_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest.InviteChange)
}

void CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&account_id_, 0, reinterpret_cast<char*>(&invited_) -
    reinterpret_cast<char*>(&account_id_) + sizeof(invited_));
}

CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::~CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest.InviteChange)
  SharedDtor();
}

void CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::SharedDtor() {
}

void CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange& CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange* CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange* n = new CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest.InviteChange)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&account_id_, 0, reinterpret_cast<char*>(&invited_) -
      reinterpret_cast<char*>(&account_id_) + sizeof(invited_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest.InviteChange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool invited = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_invited();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &invited_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest.InviteChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest.InviteChange)
  return false;
#undef DO_
}

void CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest.InviteChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional bool invited = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->invited(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest.InviteChange)
}

::google::protobuf::uint8* CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest.InviteChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional bool invited = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->invited(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest.InviteChange)
  return target;
}

size_t CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest.InviteChange)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional bool invited = 2;
    if (has_invited()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest.InviteChange)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest.InviteChange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest.InviteChange)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::MergeFrom(const CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest.InviteChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      invited_ = from.invited_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest.InviteChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::CopyFrom(const CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest.InviteChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::Swap(CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::InternalSwap(CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange* other) {
  std::swap(account_id_, other->account_id_);
  std::swap(invited_, other->invited_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange

// optional uint32 account_id = 1;
bool CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
::google::protobuf::uint32 CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest.InviteChange.account_id)
  return account_id_;
}
void CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest.InviteChange.account_id)
}

// optional bool invited = 2;
bool CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::has_invited() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::set_has_invited() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::clear_has_invited() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::clear_invited() {
  invited_ = false;
  clear_has_invited();
}
bool CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::invited() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest.InviteChange.invited)
  return invited_;
}
void CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::set_invited(bool value) {
  set_has_invited();
  invited_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest.InviteChange.invited)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyLeagueEditInvitesRequest::kFantasyLeagueIdFieldNumber;
const int CMsgDOTAFantasyLeagueEditInvitesRequest::kPasswordFieldNumber;
const int CMsgDOTAFantasyLeagueEditInvitesRequest::kInviteChangeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyLeagueEditInvitesRequest::CMsgDOTAFantasyLeagueEditInvitesRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest)
}
CMsgDOTAFantasyLeagueEditInvitesRequest::CMsgDOTAFantasyLeagueEditInvitesRequest(const CMsgDOTAFantasyLeagueEditInvitesRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      invite_change_(from.invite_change_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_password()) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  fantasy_league_id_ = from.fantasy_league_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest)
}

void CMsgDOTAFantasyLeagueEditInvitesRequest::SharedCtor() {
  _cached_size_ = 0;
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fantasy_league_id_ = 0u;
}

CMsgDOTAFantasyLeagueEditInvitesRequest::~CMsgDOTAFantasyLeagueEditInvitesRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest)
  SharedDtor();
}

void CMsgDOTAFantasyLeagueEditInvitesRequest::SharedDtor() {
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTAFantasyLeagueEditInvitesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyLeagueEditInvitesRequest::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAFantasyLeagueEditInvitesRequest& CMsgDOTAFantasyLeagueEditInvitesRequest::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAFantasyLeagueEditInvitesRequest* CMsgDOTAFantasyLeagueEditInvitesRequest::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyLeagueEditInvitesRequest* n = new CMsgDOTAFantasyLeagueEditInvitesRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyLeagueEditInvitesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest)
  invite_change_.Clear();
  if (has_password()) {
    GOOGLE_DCHECK(!password_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*password_.UnsafeRawStringPointer())->clear();
  }
  fantasy_league_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAFantasyLeagueEditInvitesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_fantasy_league_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string password = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest.password");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest.InviteChange invite_change = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_invite_change()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest)
  return false;
#undef DO_
}

void CMsgDOTAFantasyLeagueEditInvitesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fantasy_league_id(), output);
  }

  // optional string password = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  // repeated .proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest.InviteChange invite_change = 3;
  for (unsigned int i = 0, n = this->invite_change_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->invite_change(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest)
}

::google::protobuf::uint8* CMsgDOTAFantasyLeagueEditInvitesRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fantasy_league_id(), target);
  }

  // optional string password = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  // repeated .proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest.InviteChange invite_change = 3;
  for (unsigned int i = 0, n = this->invite_change_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->invite_change(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest)
  return target;
}

size_t CMsgDOTAFantasyLeagueEditInvitesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest.InviteChange invite_change = 3;
  {
    unsigned int count = this->invite_change_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->invite_change(i));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional string password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional uint32 fantasy_league_id = 1;
    if (has_fantasy_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_league_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyLeagueEditInvitesRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyLeagueEditInvitesRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyLeagueEditInvitesRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyLeagueEditInvitesRequest::MergeFrom(const CMsgDOTAFantasyLeagueEditInvitesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  invite_change_.MergeFrom(from.invite_change_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_password();
      password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
    }
    if (cached_has_bits & 0x00000002u) {
      fantasy_league_id_ = from.fantasy_league_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyLeagueEditInvitesRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyLeagueEditInvitesRequest::CopyFrom(const CMsgDOTAFantasyLeagueEditInvitesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyLeagueEditInvitesRequest::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyLeagueEditInvitesRequest::Swap(CMsgDOTAFantasyLeagueEditInvitesRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyLeagueEditInvitesRequest::InternalSwap(CMsgDOTAFantasyLeagueEditInvitesRequest* other) {
  invite_change_.InternalSwap(&other->invite_change_);
  password_.Swap(&other->password_);
  std::swap(fantasy_league_id_, other->fantasy_league_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyLeagueEditInvitesRequest::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyLeagueEditInvitesRequest

// optional uint32 fantasy_league_id = 1;
bool CMsgDOTAFantasyLeagueEditInvitesRequest::has_fantasy_league_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAFantasyLeagueEditInvitesRequest::set_has_fantasy_league_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAFantasyLeagueEditInvitesRequest::clear_has_fantasy_league_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAFantasyLeagueEditInvitesRequest::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  clear_has_fantasy_league_id();
}
::google::protobuf::uint32 CMsgDOTAFantasyLeagueEditInvitesRequest::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest.fantasy_league_id)
  return fantasy_league_id_;
}
void CMsgDOTAFantasyLeagueEditInvitesRequest::set_fantasy_league_id(::google::protobuf::uint32 value) {
  set_has_fantasy_league_id();
  fantasy_league_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest.fantasy_league_id)
}

// optional string password = 2;
bool CMsgDOTAFantasyLeagueEditInvitesRequest::has_password() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyLeagueEditInvitesRequest::set_has_password() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyLeagueEditInvitesRequest::clear_has_password() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyLeagueEditInvitesRequest::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
const ::std::string& CMsgDOTAFantasyLeagueEditInvitesRequest::password() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest.password)
  return password_.GetNoArena();
}
void CMsgDOTAFantasyLeagueEditInvitesRequest::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest.password)
}
#if LANG_CXX11
void CMsgDOTAFantasyLeagueEditInvitesRequest::set_password(::std::string&& value) {
  set_has_password();
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest.password)
}
#endif
void CMsgDOTAFantasyLeagueEditInvitesRequest::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest.password)
}
void CMsgDOTAFantasyLeagueEditInvitesRequest::set_password(const char* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest.password)
}
::std::string* CMsgDOTAFantasyLeagueEditInvitesRequest::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTAFantasyLeagueEditInvitesRequest::release_password() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest.password)
  clear_has_password();
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTAFantasyLeagueEditInvitesRequest::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest.password)
}

// repeated .proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest.InviteChange invite_change = 3;
int CMsgDOTAFantasyLeagueEditInvitesRequest::invite_change_size() const {
  return invite_change_.size();
}
void CMsgDOTAFantasyLeagueEditInvitesRequest::clear_invite_change() {
  invite_change_.Clear();
}
const ::proto::dota::CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange& CMsgDOTAFantasyLeagueEditInvitesRequest::invite_change(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest.invite_change)
  return invite_change_.Get(index);
}
::proto::dota::CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange* CMsgDOTAFantasyLeagueEditInvitesRequest::mutable_invite_change(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest.invite_change)
  return invite_change_.Mutable(index);
}
::proto::dota::CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange* CMsgDOTAFantasyLeagueEditInvitesRequest::add_invite_change() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest.invite_change)
  return invite_change_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange >*
CMsgDOTAFantasyLeagueEditInvitesRequest::mutable_invite_change() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest.invite_change)
  return &invite_change_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange >&
CMsgDOTAFantasyLeagueEditInvitesRequest::invite_change() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTAFantasyLeagueEditInvitesRequest.invite_change)
  return invite_change_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyLeagueEditInvitesResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyLeagueEditInvitesResponse::CMsgDOTAFantasyLeagueEditInvitesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyLeagueEditInvitesResponse)
}
CMsgDOTAFantasyLeagueEditInvitesResponse::CMsgDOTAFantasyLeagueEditInvitesResponse(const CMsgDOTAFantasyLeagueEditInvitesResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyLeagueEditInvitesResponse)
}

void CMsgDOTAFantasyLeagueEditInvitesResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
}

CMsgDOTAFantasyLeagueEditInvitesResponse::~CMsgDOTAFantasyLeagueEditInvitesResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyLeagueEditInvitesResponse)
  SharedDtor();
}

void CMsgDOTAFantasyLeagueEditInvitesResponse::SharedDtor() {
}

void CMsgDOTAFantasyLeagueEditInvitesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyLeagueEditInvitesResponse::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAFantasyLeagueEditInvitesResponse& CMsgDOTAFantasyLeagueEditInvitesResponse::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAFantasyLeagueEditInvitesResponse* CMsgDOTAFantasyLeagueEditInvitesResponse::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyLeagueEditInvitesResponse* n = new CMsgDOTAFantasyLeagueEditInvitesResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyLeagueEditInvitesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyLeagueEditInvitesResponse)
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAFantasyLeagueEditInvitesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyLeagueEditInvitesResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgDOTAFantasyLeagueEditInvitesResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgDOTAFantasyLeagueEditInvitesResponse_EResult_IsValid(value)) {
            set_result(static_cast< ::proto::dota::CMsgDOTAFantasyLeagueEditInvitesResponse_EResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyLeagueEditInvitesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyLeagueEditInvitesResponse)
  return false;
#undef DO_
}

void CMsgDOTAFantasyLeagueEditInvitesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyLeagueEditInvitesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAFantasyLeagueEditInvitesResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyLeagueEditInvitesResponse)
}

::google::protobuf::uint8* CMsgDOTAFantasyLeagueEditInvitesResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyLeagueEditInvitesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAFantasyLeagueEditInvitesResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyLeagueEditInvitesResponse)
  return target;
}

size_t CMsgDOTAFantasyLeagueEditInvitesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyLeagueEditInvitesResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .proto.dota.CMsgDOTAFantasyLeagueEditInvitesResponse.EResult result = 1 [default = SUCCESS];
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyLeagueEditInvitesResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyLeagueEditInvitesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyLeagueEditInvitesResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyLeagueEditInvitesResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyLeagueEditInvitesResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyLeagueEditInvitesResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyLeagueEditInvitesResponse::MergeFrom(const CMsgDOTAFantasyLeagueEditInvitesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyLeagueEditInvitesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void CMsgDOTAFantasyLeagueEditInvitesResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyLeagueEditInvitesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyLeagueEditInvitesResponse::CopyFrom(const CMsgDOTAFantasyLeagueEditInvitesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyLeagueEditInvitesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyLeagueEditInvitesResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyLeagueEditInvitesResponse::Swap(CMsgDOTAFantasyLeagueEditInvitesResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyLeagueEditInvitesResponse::InternalSwap(CMsgDOTAFantasyLeagueEditInvitesResponse* other) {
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyLeagueEditInvitesResponse::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyLeagueEditInvitesResponse

// optional .proto.dota.CMsgDOTAFantasyLeagueEditInvitesResponse.EResult result = 1 [default = SUCCESS];
bool CMsgDOTAFantasyLeagueEditInvitesResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyLeagueEditInvitesResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyLeagueEditInvitesResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyLeagueEditInvitesResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
::proto::dota::CMsgDOTAFantasyLeagueEditInvitesResponse_EResult CMsgDOTAFantasyLeagueEditInvitesResponse::result() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyLeagueEditInvitesResponse.result)
  return static_cast< ::proto::dota::CMsgDOTAFantasyLeagueEditInvitesResponse_EResult >(result_);
}
void CMsgDOTAFantasyLeagueEditInvitesResponse::set_result(::proto::dota::CMsgDOTAFantasyLeagueEditInvitesResponse_EResult value) {
  assert(::proto::dota::CMsgDOTAFantasyLeagueEditInvitesResponse_EResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyLeagueEditInvitesResponse.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyLeagueDraftStatusRequest::kFantasyLeagueIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyLeagueDraftStatusRequest::CMsgDOTAFantasyLeagueDraftStatusRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyLeagueDraftStatusRequest)
}
CMsgDOTAFantasyLeagueDraftStatusRequest::CMsgDOTAFantasyLeagueDraftStatusRequest(const CMsgDOTAFantasyLeagueDraftStatusRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fantasy_league_id_ = from.fantasy_league_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyLeagueDraftStatusRequest)
}

void CMsgDOTAFantasyLeagueDraftStatusRequest::SharedCtor() {
  _cached_size_ = 0;
  fantasy_league_id_ = 0u;
}

CMsgDOTAFantasyLeagueDraftStatusRequest::~CMsgDOTAFantasyLeagueDraftStatusRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyLeagueDraftStatusRequest)
  SharedDtor();
}

void CMsgDOTAFantasyLeagueDraftStatusRequest::SharedDtor() {
}

void CMsgDOTAFantasyLeagueDraftStatusRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyLeagueDraftStatusRequest::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAFantasyLeagueDraftStatusRequest& CMsgDOTAFantasyLeagueDraftStatusRequest::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAFantasyLeagueDraftStatusRequest* CMsgDOTAFantasyLeagueDraftStatusRequest::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyLeagueDraftStatusRequest* n = new CMsgDOTAFantasyLeagueDraftStatusRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyLeagueDraftStatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyLeagueDraftStatusRequest)
  fantasy_league_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAFantasyLeagueDraftStatusRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyLeagueDraftStatusRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_fantasy_league_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyLeagueDraftStatusRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyLeagueDraftStatusRequest)
  return false;
#undef DO_
}

void CMsgDOTAFantasyLeagueDraftStatusRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyLeagueDraftStatusRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fantasy_league_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyLeagueDraftStatusRequest)
}

::google::protobuf::uint8* CMsgDOTAFantasyLeagueDraftStatusRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyLeagueDraftStatusRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fantasy_league_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyLeagueDraftStatusRequest)
  return target;
}

size_t CMsgDOTAFantasyLeagueDraftStatusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyLeagueDraftStatusRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 fantasy_league_id = 1;
  if (has_fantasy_league_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->fantasy_league_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyLeagueDraftStatusRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyLeagueDraftStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyLeagueDraftStatusRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyLeagueDraftStatusRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyLeagueDraftStatusRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyLeagueDraftStatusRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyLeagueDraftStatusRequest::MergeFrom(const CMsgDOTAFantasyLeagueDraftStatusRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyLeagueDraftStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_fantasy_league_id()) {
    set_fantasy_league_id(from.fantasy_league_id());
  }
}

void CMsgDOTAFantasyLeagueDraftStatusRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyLeagueDraftStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyLeagueDraftStatusRequest::CopyFrom(const CMsgDOTAFantasyLeagueDraftStatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyLeagueDraftStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyLeagueDraftStatusRequest::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyLeagueDraftStatusRequest::Swap(CMsgDOTAFantasyLeagueDraftStatusRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyLeagueDraftStatusRequest::InternalSwap(CMsgDOTAFantasyLeagueDraftStatusRequest* other) {
  std::swap(fantasy_league_id_, other->fantasy_league_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyLeagueDraftStatusRequest::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyLeagueDraftStatusRequest

// optional uint32 fantasy_league_id = 1;
bool CMsgDOTAFantasyLeagueDraftStatusRequest::has_fantasy_league_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyLeagueDraftStatusRequest::set_has_fantasy_league_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyLeagueDraftStatusRequest::clear_has_fantasy_league_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyLeagueDraftStatusRequest::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  clear_has_fantasy_league_id();
}
::google::protobuf::uint32 CMsgDOTAFantasyLeagueDraftStatusRequest::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyLeagueDraftStatusRequest.fantasy_league_id)
  return fantasy_league_id_;
}
void CMsgDOTAFantasyLeagueDraftStatusRequest::set_fantasy_league_id(::google::protobuf::uint32 value) {
  set_has_fantasy_league_id();
  fantasy_league_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyLeagueDraftStatusRequest.fantasy_league_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyLeagueDraftStatus::kFantasyLeagueIdFieldNumber;
const int CMsgDOTAFantasyLeagueDraftStatus::kDraftOrderFieldNumber;
const int CMsgDOTAFantasyLeagueDraftStatus::kCurrentPickFieldNumber;
const int CMsgDOTAFantasyLeagueDraftStatus::kTimeRemainingFieldNumber;
const int CMsgDOTAFantasyLeagueDraftStatus::kPendingResumeFieldNumber;
const int CMsgDOTAFantasyLeagueDraftStatus::kCompletedFieldNumber;
const int CMsgDOTAFantasyLeagueDraftStatus::kAvailablePlayersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyLeagueDraftStatus::CMsgDOTAFantasyLeagueDraftStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyLeagueDraftStatus)
}
CMsgDOTAFantasyLeagueDraftStatus::CMsgDOTAFantasyLeagueDraftStatus(const CMsgDOTAFantasyLeagueDraftStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      draft_order_(from.draft_order_),
      available_players_(from.available_players_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&fantasy_league_id_, &from.fantasy_league_id_,
    reinterpret_cast<char*>(&completed_) -
    reinterpret_cast<char*>(&fantasy_league_id_) + sizeof(completed_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyLeagueDraftStatus)
}

void CMsgDOTAFantasyLeagueDraftStatus::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&fantasy_league_id_, 0, reinterpret_cast<char*>(&completed_) -
    reinterpret_cast<char*>(&fantasy_league_id_) + sizeof(completed_));
}

CMsgDOTAFantasyLeagueDraftStatus::~CMsgDOTAFantasyLeagueDraftStatus() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyLeagueDraftStatus)
  SharedDtor();
}

void CMsgDOTAFantasyLeagueDraftStatus::SharedDtor() {
}

void CMsgDOTAFantasyLeagueDraftStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyLeagueDraftStatus::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAFantasyLeagueDraftStatus& CMsgDOTAFantasyLeagueDraftStatus::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAFantasyLeagueDraftStatus* CMsgDOTAFantasyLeagueDraftStatus::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyLeagueDraftStatus* n = new CMsgDOTAFantasyLeagueDraftStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyLeagueDraftStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyLeagueDraftStatus)
  draft_order_.Clear();
  available_players_.Clear();
  if (_has_bits_[0 / 32] & 31u) {
    ::memset(&fantasy_league_id_, 0, reinterpret_cast<char*>(&completed_) -
      reinterpret_cast<char*>(&fantasy_league_id_) + sizeof(completed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAFantasyLeagueDraftStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyLeagueDraftStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_fantasy_league_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 draft_order = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_draft_order())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_draft_order())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 current_pick = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_current_pick();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &current_pick_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time_remaining = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_time_remaining();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_remaining_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool pending_resume = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_pending_resume();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pending_resume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool completed = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_completed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &completed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 available_players = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56u, input, this->mutable_available_players())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(58u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_available_players())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyLeagueDraftStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyLeagueDraftStatus)
  return false;
#undef DO_
}

void CMsgDOTAFantasyLeagueDraftStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyLeagueDraftStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fantasy_league_id(), output);
  }

  // repeated uint32 draft_order = 2;
  for (int i = 0, n = this->draft_order_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->draft_order(i), output);
  }

  // optional uint32 current_pick = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->current_pick(), output);
  }

  // optional uint32 time_remaining = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->time_remaining(), output);
  }

  // optional bool pending_resume = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->pending_resume(), output);
  }

  // optional bool completed = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->completed(), output);
  }

  // repeated uint32 available_players = 7;
  for (int i = 0, n = this->available_players_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->available_players(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyLeagueDraftStatus)
}

::google::protobuf::uint8* CMsgDOTAFantasyLeagueDraftStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyLeagueDraftStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fantasy_league_id(), target);
  }

  // repeated uint32 draft_order = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(2, this->draft_order_, target);

  // optional uint32 current_pick = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->current_pick(), target);
  }

  // optional uint32 time_remaining = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->time_remaining(), target);
  }

  // optional bool pending_resume = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->pending_resume(), target);
  }

  // optional bool completed = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->completed(), target);
  }

  // repeated uint32 available_players = 7;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(7, this->available_players_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyLeagueDraftStatus)
  return target;
}

size_t CMsgDOTAFantasyLeagueDraftStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyLeagueDraftStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 draft_order = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->draft_order_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->draft_order_size());
    total_size += data_size;
  }

  // repeated uint32 available_players = 7;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->available_players_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->available_players_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional uint32 fantasy_league_id = 1;
    if (has_fantasy_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_league_id());
    }

    // optional uint32 current_pick = 3;
    if (has_current_pick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->current_pick());
    }

    // optional uint32 time_remaining = 4;
    if (has_time_remaining()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_remaining());
    }

    // optional bool pending_resume = 5;
    if (has_pending_resume()) {
      total_size += 1 + 1;
    }

    // optional bool completed = 6;
    if (has_completed()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyLeagueDraftStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyLeagueDraftStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyLeagueDraftStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyLeagueDraftStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyLeagueDraftStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyLeagueDraftStatus)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyLeagueDraftStatus::MergeFrom(const CMsgDOTAFantasyLeagueDraftStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyLeagueDraftStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  draft_order_.MergeFrom(from.draft_order_);
  available_players_.MergeFrom(from.available_players_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      fantasy_league_id_ = from.fantasy_league_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      current_pick_ = from.current_pick_;
    }
    if (cached_has_bits & 0x00000004u) {
      time_remaining_ = from.time_remaining_;
    }
    if (cached_has_bits & 0x00000008u) {
      pending_resume_ = from.pending_resume_;
    }
    if (cached_has_bits & 0x00000010u) {
      completed_ = from.completed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyLeagueDraftStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyLeagueDraftStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyLeagueDraftStatus::CopyFrom(const CMsgDOTAFantasyLeagueDraftStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyLeagueDraftStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyLeagueDraftStatus::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyLeagueDraftStatus::Swap(CMsgDOTAFantasyLeagueDraftStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyLeagueDraftStatus::InternalSwap(CMsgDOTAFantasyLeagueDraftStatus* other) {
  draft_order_.InternalSwap(&other->draft_order_);
  available_players_.InternalSwap(&other->available_players_);
  std::swap(fantasy_league_id_, other->fantasy_league_id_);
  std::swap(current_pick_, other->current_pick_);
  std::swap(time_remaining_, other->time_remaining_);
  std::swap(pending_resume_, other->pending_resume_);
  std::swap(completed_, other->completed_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyLeagueDraftStatus::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyLeagueDraftStatus

// optional uint32 fantasy_league_id = 1;
bool CMsgDOTAFantasyLeagueDraftStatus::has_fantasy_league_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyLeagueDraftStatus::set_has_fantasy_league_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyLeagueDraftStatus::clear_has_fantasy_league_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyLeagueDraftStatus::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  clear_has_fantasy_league_id();
}
::google::protobuf::uint32 CMsgDOTAFantasyLeagueDraftStatus::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyLeagueDraftStatus.fantasy_league_id)
  return fantasy_league_id_;
}
void CMsgDOTAFantasyLeagueDraftStatus::set_fantasy_league_id(::google::protobuf::uint32 value) {
  set_has_fantasy_league_id();
  fantasy_league_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyLeagueDraftStatus.fantasy_league_id)
}

// repeated uint32 draft_order = 2;
int CMsgDOTAFantasyLeagueDraftStatus::draft_order_size() const {
  return draft_order_.size();
}
void CMsgDOTAFantasyLeagueDraftStatus::clear_draft_order() {
  draft_order_.Clear();
}
::google::protobuf::uint32 CMsgDOTAFantasyLeagueDraftStatus::draft_order(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyLeagueDraftStatus.draft_order)
  return draft_order_.Get(index);
}
void CMsgDOTAFantasyLeagueDraftStatus::set_draft_order(int index, ::google::protobuf::uint32 value) {
  draft_order_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyLeagueDraftStatus.draft_order)
}
void CMsgDOTAFantasyLeagueDraftStatus::add_draft_order(::google::protobuf::uint32 value) {
  draft_order_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTAFantasyLeagueDraftStatus.draft_order)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgDOTAFantasyLeagueDraftStatus::draft_order() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTAFantasyLeagueDraftStatus.draft_order)
  return draft_order_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgDOTAFantasyLeagueDraftStatus::mutable_draft_order() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTAFantasyLeagueDraftStatus.draft_order)
  return &draft_order_;
}

// optional uint32 current_pick = 3;
bool CMsgDOTAFantasyLeagueDraftStatus::has_current_pick() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAFantasyLeagueDraftStatus::set_has_current_pick() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAFantasyLeagueDraftStatus::clear_has_current_pick() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAFantasyLeagueDraftStatus::clear_current_pick() {
  current_pick_ = 0u;
  clear_has_current_pick();
}
::google::protobuf::uint32 CMsgDOTAFantasyLeagueDraftStatus::current_pick() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyLeagueDraftStatus.current_pick)
  return current_pick_;
}
void CMsgDOTAFantasyLeagueDraftStatus::set_current_pick(::google::protobuf::uint32 value) {
  set_has_current_pick();
  current_pick_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyLeagueDraftStatus.current_pick)
}

// optional uint32 time_remaining = 4;
bool CMsgDOTAFantasyLeagueDraftStatus::has_time_remaining() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAFantasyLeagueDraftStatus::set_has_time_remaining() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAFantasyLeagueDraftStatus::clear_has_time_remaining() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAFantasyLeagueDraftStatus::clear_time_remaining() {
  time_remaining_ = 0u;
  clear_has_time_remaining();
}
::google::protobuf::uint32 CMsgDOTAFantasyLeagueDraftStatus::time_remaining() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyLeagueDraftStatus.time_remaining)
  return time_remaining_;
}
void CMsgDOTAFantasyLeagueDraftStatus::set_time_remaining(::google::protobuf::uint32 value) {
  set_has_time_remaining();
  time_remaining_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyLeagueDraftStatus.time_remaining)
}

// optional bool pending_resume = 5;
bool CMsgDOTAFantasyLeagueDraftStatus::has_pending_resume() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTAFantasyLeagueDraftStatus::set_has_pending_resume() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTAFantasyLeagueDraftStatus::clear_has_pending_resume() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTAFantasyLeagueDraftStatus::clear_pending_resume() {
  pending_resume_ = false;
  clear_has_pending_resume();
}
bool CMsgDOTAFantasyLeagueDraftStatus::pending_resume() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyLeagueDraftStatus.pending_resume)
  return pending_resume_;
}
void CMsgDOTAFantasyLeagueDraftStatus::set_pending_resume(bool value) {
  set_has_pending_resume();
  pending_resume_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyLeagueDraftStatus.pending_resume)
}

// optional bool completed = 6;
bool CMsgDOTAFantasyLeagueDraftStatus::has_completed() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDOTAFantasyLeagueDraftStatus::set_has_completed() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDOTAFantasyLeagueDraftStatus::clear_has_completed() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDOTAFantasyLeagueDraftStatus::clear_completed() {
  completed_ = false;
  clear_has_completed();
}
bool CMsgDOTAFantasyLeagueDraftStatus::completed() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyLeagueDraftStatus.completed)
  return completed_;
}
void CMsgDOTAFantasyLeagueDraftStatus::set_completed(bool value) {
  set_has_completed();
  completed_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyLeagueDraftStatus.completed)
}

// repeated uint32 available_players = 7;
int CMsgDOTAFantasyLeagueDraftStatus::available_players_size() const {
  return available_players_.size();
}
void CMsgDOTAFantasyLeagueDraftStatus::clear_available_players() {
  available_players_.Clear();
}
::google::protobuf::uint32 CMsgDOTAFantasyLeagueDraftStatus::available_players(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyLeagueDraftStatus.available_players)
  return available_players_.Get(index);
}
void CMsgDOTAFantasyLeagueDraftStatus::set_available_players(int index, ::google::protobuf::uint32 value) {
  available_players_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyLeagueDraftStatus.available_players)
}
void CMsgDOTAFantasyLeagueDraftStatus::add_available_players(::google::protobuf::uint32 value) {
  available_players_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTAFantasyLeagueDraftStatus.available_players)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgDOTAFantasyLeagueDraftStatus::available_players() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTAFantasyLeagueDraftStatus.available_players)
  return available_players_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgDOTAFantasyLeagueDraftStatus::mutable_available_players() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTAFantasyLeagueDraftStatus.available_players)
  return &available_players_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyLeagueDraftPlayerRequest::kFantasyLeagueIdFieldNumber;
const int CMsgDOTAFantasyLeagueDraftPlayerRequest::kTeamIndexFieldNumber;
const int CMsgDOTAFantasyLeagueDraftPlayerRequest::kPlayerAccountIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyLeagueDraftPlayerRequest::CMsgDOTAFantasyLeagueDraftPlayerRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyLeagueDraftPlayerRequest)
}
CMsgDOTAFantasyLeagueDraftPlayerRequest::CMsgDOTAFantasyLeagueDraftPlayerRequest(const CMsgDOTAFantasyLeagueDraftPlayerRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&fantasy_league_id_, &from.fantasy_league_id_,
    reinterpret_cast<char*>(&player_account_id_) -
    reinterpret_cast<char*>(&fantasy_league_id_) + sizeof(player_account_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyLeagueDraftPlayerRequest)
}

void CMsgDOTAFantasyLeagueDraftPlayerRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&fantasy_league_id_, 0, reinterpret_cast<char*>(&player_account_id_) -
    reinterpret_cast<char*>(&fantasy_league_id_) + sizeof(player_account_id_));
}

CMsgDOTAFantasyLeagueDraftPlayerRequest::~CMsgDOTAFantasyLeagueDraftPlayerRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyLeagueDraftPlayerRequest)
  SharedDtor();
}

void CMsgDOTAFantasyLeagueDraftPlayerRequest::SharedDtor() {
}

void CMsgDOTAFantasyLeagueDraftPlayerRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyLeagueDraftPlayerRequest::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAFantasyLeagueDraftPlayerRequest& CMsgDOTAFantasyLeagueDraftPlayerRequest::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAFantasyLeagueDraftPlayerRequest* CMsgDOTAFantasyLeagueDraftPlayerRequest::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyLeagueDraftPlayerRequest* n = new CMsgDOTAFantasyLeagueDraftPlayerRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyLeagueDraftPlayerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyLeagueDraftPlayerRequest)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&fantasy_league_id_, 0, reinterpret_cast<char*>(&player_account_id_) -
      reinterpret_cast<char*>(&fantasy_league_id_) + sizeof(player_account_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAFantasyLeagueDraftPlayerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyLeagueDraftPlayerRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_fantasy_league_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team_index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_team_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 player_account_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_player_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyLeagueDraftPlayerRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyLeagueDraftPlayerRequest)
  return false;
#undef DO_
}

void CMsgDOTAFantasyLeagueDraftPlayerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyLeagueDraftPlayerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fantasy_league_id(), output);
  }

  // optional uint32 team_index = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->team_index(), output);
  }

  // optional uint32 player_account_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->player_account_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyLeagueDraftPlayerRequest)
}

::google::protobuf::uint8* CMsgDOTAFantasyLeagueDraftPlayerRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyLeagueDraftPlayerRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fantasy_league_id(), target);
  }

  // optional uint32 team_index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->team_index(), target);
  }

  // optional uint32 player_account_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->player_account_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyLeagueDraftPlayerRequest)
  return target;
}

size_t CMsgDOTAFantasyLeagueDraftPlayerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyLeagueDraftPlayerRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 fantasy_league_id = 1;
    if (has_fantasy_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_league_id());
    }

    // optional uint32 team_index = 2;
    if (has_team_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_index());
    }

    // optional uint32 player_account_id = 3;
    if (has_player_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_account_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyLeagueDraftPlayerRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyLeagueDraftPlayerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyLeagueDraftPlayerRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyLeagueDraftPlayerRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyLeagueDraftPlayerRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyLeagueDraftPlayerRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyLeagueDraftPlayerRequest::MergeFrom(const CMsgDOTAFantasyLeagueDraftPlayerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyLeagueDraftPlayerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      fantasy_league_id_ = from.fantasy_league_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      team_index_ = from.team_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      player_account_id_ = from.player_account_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyLeagueDraftPlayerRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyLeagueDraftPlayerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyLeagueDraftPlayerRequest::CopyFrom(const CMsgDOTAFantasyLeagueDraftPlayerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyLeagueDraftPlayerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyLeagueDraftPlayerRequest::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyLeagueDraftPlayerRequest::Swap(CMsgDOTAFantasyLeagueDraftPlayerRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyLeagueDraftPlayerRequest::InternalSwap(CMsgDOTAFantasyLeagueDraftPlayerRequest* other) {
  std::swap(fantasy_league_id_, other->fantasy_league_id_);
  std::swap(team_index_, other->team_index_);
  std::swap(player_account_id_, other->player_account_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyLeagueDraftPlayerRequest::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyLeagueDraftPlayerRequest

// optional uint32 fantasy_league_id = 1;
bool CMsgDOTAFantasyLeagueDraftPlayerRequest::has_fantasy_league_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyLeagueDraftPlayerRequest::set_has_fantasy_league_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyLeagueDraftPlayerRequest::clear_has_fantasy_league_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyLeagueDraftPlayerRequest::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  clear_has_fantasy_league_id();
}
::google::protobuf::uint32 CMsgDOTAFantasyLeagueDraftPlayerRequest::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyLeagueDraftPlayerRequest.fantasy_league_id)
  return fantasy_league_id_;
}
void CMsgDOTAFantasyLeagueDraftPlayerRequest::set_fantasy_league_id(::google::protobuf::uint32 value) {
  set_has_fantasy_league_id();
  fantasy_league_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyLeagueDraftPlayerRequest.fantasy_league_id)
}

// optional uint32 team_index = 2;
bool CMsgDOTAFantasyLeagueDraftPlayerRequest::has_team_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAFantasyLeagueDraftPlayerRequest::set_has_team_index() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAFantasyLeagueDraftPlayerRequest::clear_has_team_index() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAFantasyLeagueDraftPlayerRequest::clear_team_index() {
  team_index_ = 0u;
  clear_has_team_index();
}
::google::protobuf::uint32 CMsgDOTAFantasyLeagueDraftPlayerRequest::team_index() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyLeagueDraftPlayerRequest.team_index)
  return team_index_;
}
void CMsgDOTAFantasyLeagueDraftPlayerRequest::set_team_index(::google::protobuf::uint32 value) {
  set_has_team_index();
  team_index_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyLeagueDraftPlayerRequest.team_index)
}

// optional uint32 player_account_id = 3;
bool CMsgDOTAFantasyLeagueDraftPlayerRequest::has_player_account_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAFantasyLeagueDraftPlayerRequest::set_has_player_account_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAFantasyLeagueDraftPlayerRequest::clear_has_player_account_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAFantasyLeagueDraftPlayerRequest::clear_player_account_id() {
  player_account_id_ = 0u;
  clear_has_player_account_id();
}
::google::protobuf::uint32 CMsgDOTAFantasyLeagueDraftPlayerRequest::player_account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyLeagueDraftPlayerRequest.player_account_id)
  return player_account_id_;
}
void CMsgDOTAFantasyLeagueDraftPlayerRequest::set_player_account_id(::google::protobuf::uint32 value) {
  set_has_player_account_id();
  player_account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyLeagueDraftPlayerRequest.player_account_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyLeagueDraftPlayerResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyLeagueDraftPlayerResponse::CMsgDOTAFantasyLeagueDraftPlayerResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyLeagueDraftPlayerResponse)
}
CMsgDOTAFantasyLeagueDraftPlayerResponse::CMsgDOTAFantasyLeagueDraftPlayerResponse(const CMsgDOTAFantasyLeagueDraftPlayerResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyLeagueDraftPlayerResponse)
}

void CMsgDOTAFantasyLeagueDraftPlayerResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
}

CMsgDOTAFantasyLeagueDraftPlayerResponse::~CMsgDOTAFantasyLeagueDraftPlayerResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyLeagueDraftPlayerResponse)
  SharedDtor();
}

void CMsgDOTAFantasyLeagueDraftPlayerResponse::SharedDtor() {
}

void CMsgDOTAFantasyLeagueDraftPlayerResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyLeagueDraftPlayerResponse::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAFantasyLeagueDraftPlayerResponse& CMsgDOTAFantasyLeagueDraftPlayerResponse::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAFantasyLeagueDraftPlayerResponse* CMsgDOTAFantasyLeagueDraftPlayerResponse::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyLeagueDraftPlayerResponse* n = new CMsgDOTAFantasyLeagueDraftPlayerResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyLeagueDraftPlayerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyLeagueDraftPlayerResponse)
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAFantasyLeagueDraftPlayerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyLeagueDraftPlayerResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgDOTAFantasyLeagueDraftPlayerResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult_IsValid(value)) {
            set_result(static_cast< ::proto::dota::CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyLeagueDraftPlayerResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyLeagueDraftPlayerResponse)
  return false;
#undef DO_
}

void CMsgDOTAFantasyLeagueDraftPlayerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyLeagueDraftPlayerResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAFantasyLeagueDraftPlayerResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyLeagueDraftPlayerResponse)
}

::google::protobuf::uint8* CMsgDOTAFantasyLeagueDraftPlayerResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyLeagueDraftPlayerResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAFantasyLeagueDraftPlayerResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyLeagueDraftPlayerResponse)
  return target;
}

size_t CMsgDOTAFantasyLeagueDraftPlayerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyLeagueDraftPlayerResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .proto.dota.CMsgDOTAFantasyLeagueDraftPlayerResponse.EResult result = 1 [default = SUCCESS];
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyLeagueDraftPlayerResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyLeagueDraftPlayerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyLeagueDraftPlayerResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyLeagueDraftPlayerResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyLeagueDraftPlayerResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyLeagueDraftPlayerResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyLeagueDraftPlayerResponse::MergeFrom(const CMsgDOTAFantasyLeagueDraftPlayerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyLeagueDraftPlayerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void CMsgDOTAFantasyLeagueDraftPlayerResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyLeagueDraftPlayerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyLeagueDraftPlayerResponse::CopyFrom(const CMsgDOTAFantasyLeagueDraftPlayerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyLeagueDraftPlayerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyLeagueDraftPlayerResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyLeagueDraftPlayerResponse::Swap(CMsgDOTAFantasyLeagueDraftPlayerResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyLeagueDraftPlayerResponse::InternalSwap(CMsgDOTAFantasyLeagueDraftPlayerResponse* other) {
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyLeagueDraftPlayerResponse::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyLeagueDraftPlayerResponse

// optional .proto.dota.CMsgDOTAFantasyLeagueDraftPlayerResponse.EResult result = 1 [default = SUCCESS];
bool CMsgDOTAFantasyLeagueDraftPlayerResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyLeagueDraftPlayerResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyLeagueDraftPlayerResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyLeagueDraftPlayerResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
::proto::dota::CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult CMsgDOTAFantasyLeagueDraftPlayerResponse::result() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyLeagueDraftPlayerResponse.result)
  return static_cast< ::proto::dota::CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult >(result_);
}
void CMsgDOTAFantasyLeagueDraftPlayerResponse::set_result(::proto::dota::CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult value) {
  assert(::proto::dota::CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyLeagueDraftPlayerResponse.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyTeamRosterSwapRequest::kFantasyLeagueIdFieldNumber;
const int CMsgDOTAFantasyTeamRosterSwapRequest::kTeamIndexFieldNumber;
const int CMsgDOTAFantasyTeamRosterSwapRequest::kTimestampFieldNumber;
const int CMsgDOTAFantasyTeamRosterSwapRequest::kSlot1FieldNumber;
const int CMsgDOTAFantasyTeamRosterSwapRequest::kSlot2FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyTeamRosterSwapRequest::CMsgDOTAFantasyTeamRosterSwapRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyTeamRosterSwapRequest)
}
CMsgDOTAFantasyTeamRosterSwapRequest::CMsgDOTAFantasyTeamRosterSwapRequest(const CMsgDOTAFantasyTeamRosterSwapRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&fantasy_league_id_, &from.fantasy_league_id_,
    reinterpret_cast<char*>(&slot_2_) -
    reinterpret_cast<char*>(&fantasy_league_id_) + sizeof(slot_2_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyTeamRosterSwapRequest)
}

void CMsgDOTAFantasyTeamRosterSwapRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&fantasy_league_id_, 0, reinterpret_cast<char*>(&slot_2_) -
    reinterpret_cast<char*>(&fantasy_league_id_) + sizeof(slot_2_));
}

CMsgDOTAFantasyTeamRosterSwapRequest::~CMsgDOTAFantasyTeamRosterSwapRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyTeamRosterSwapRequest)
  SharedDtor();
}

void CMsgDOTAFantasyTeamRosterSwapRequest::SharedDtor() {
}

void CMsgDOTAFantasyTeamRosterSwapRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyTeamRosterSwapRequest::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAFantasyTeamRosterSwapRequest& CMsgDOTAFantasyTeamRosterSwapRequest::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAFantasyTeamRosterSwapRequest* CMsgDOTAFantasyTeamRosterSwapRequest::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyTeamRosterSwapRequest* n = new CMsgDOTAFantasyTeamRosterSwapRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyTeamRosterSwapRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyTeamRosterSwapRequest)
  if (_has_bits_[0 / 32] & 31u) {
    ::memset(&fantasy_league_id_, 0, reinterpret_cast<char*>(&slot_2_) -
      reinterpret_cast<char*>(&fantasy_league_id_) + sizeof(slot_2_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAFantasyTeamRosterSwapRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyTeamRosterSwapRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_fantasy_league_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team_index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_team_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 timestamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 slot_1 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_slot_1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 slot_2 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_slot_2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyTeamRosterSwapRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyTeamRosterSwapRequest)
  return false;
#undef DO_
}

void CMsgDOTAFantasyTeamRosterSwapRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyTeamRosterSwapRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fantasy_league_id(), output);
  }

  // optional uint32 team_index = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->team_index(), output);
  }

  // optional uint32 timestamp = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->timestamp(), output);
  }

  // optional uint32 slot_1 = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->slot_1(), output);
  }

  // optional uint32 slot_2 = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->slot_2(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyTeamRosterSwapRequest)
}

::google::protobuf::uint8* CMsgDOTAFantasyTeamRosterSwapRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyTeamRosterSwapRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fantasy_league_id(), target);
  }

  // optional uint32 team_index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->team_index(), target);
  }

  // optional uint32 timestamp = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->timestamp(), target);
  }

  // optional uint32 slot_1 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->slot_1(), target);
  }

  // optional uint32 slot_2 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->slot_2(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyTeamRosterSwapRequest)
  return target;
}

size_t CMsgDOTAFantasyTeamRosterSwapRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyTeamRosterSwapRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional uint32 fantasy_league_id = 1;
    if (has_fantasy_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_league_id());
    }

    // optional uint32 team_index = 2;
    if (has_team_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_index());
    }

    // optional uint32 timestamp = 3;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

    // optional uint32 slot_1 = 4;
    if (has_slot_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot_1());
    }

    // optional uint32 slot_2 = 5;
    if (has_slot_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot_2());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyTeamRosterSwapRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyTeamRosterSwapRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyTeamRosterSwapRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyTeamRosterSwapRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyTeamRosterSwapRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyTeamRosterSwapRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyTeamRosterSwapRequest::MergeFrom(const CMsgDOTAFantasyTeamRosterSwapRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyTeamRosterSwapRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      fantasy_league_id_ = from.fantasy_league_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      team_index_ = from.team_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000008u) {
      slot_1_ = from.slot_1_;
    }
    if (cached_has_bits & 0x00000010u) {
      slot_2_ = from.slot_2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyTeamRosterSwapRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyTeamRosterSwapRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyTeamRosterSwapRequest::CopyFrom(const CMsgDOTAFantasyTeamRosterSwapRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyTeamRosterSwapRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyTeamRosterSwapRequest::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyTeamRosterSwapRequest::Swap(CMsgDOTAFantasyTeamRosterSwapRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyTeamRosterSwapRequest::InternalSwap(CMsgDOTAFantasyTeamRosterSwapRequest* other) {
  std::swap(fantasy_league_id_, other->fantasy_league_id_);
  std::swap(team_index_, other->team_index_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(slot_1_, other->slot_1_);
  std::swap(slot_2_, other->slot_2_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyTeamRosterSwapRequest::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyTeamRosterSwapRequest

// optional uint32 fantasy_league_id = 1;
bool CMsgDOTAFantasyTeamRosterSwapRequest::has_fantasy_league_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyTeamRosterSwapRequest::set_has_fantasy_league_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyTeamRosterSwapRequest::clear_has_fantasy_league_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyTeamRosterSwapRequest::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  clear_has_fantasy_league_id();
}
::google::protobuf::uint32 CMsgDOTAFantasyTeamRosterSwapRequest::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyTeamRosterSwapRequest.fantasy_league_id)
  return fantasy_league_id_;
}
void CMsgDOTAFantasyTeamRosterSwapRequest::set_fantasy_league_id(::google::protobuf::uint32 value) {
  set_has_fantasy_league_id();
  fantasy_league_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyTeamRosterSwapRequest.fantasy_league_id)
}

// optional uint32 team_index = 2;
bool CMsgDOTAFantasyTeamRosterSwapRequest::has_team_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAFantasyTeamRosterSwapRequest::set_has_team_index() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAFantasyTeamRosterSwapRequest::clear_has_team_index() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAFantasyTeamRosterSwapRequest::clear_team_index() {
  team_index_ = 0u;
  clear_has_team_index();
}
::google::protobuf::uint32 CMsgDOTAFantasyTeamRosterSwapRequest::team_index() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyTeamRosterSwapRequest.team_index)
  return team_index_;
}
void CMsgDOTAFantasyTeamRosterSwapRequest::set_team_index(::google::protobuf::uint32 value) {
  set_has_team_index();
  team_index_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyTeamRosterSwapRequest.team_index)
}

// optional uint32 timestamp = 3;
bool CMsgDOTAFantasyTeamRosterSwapRequest::has_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAFantasyTeamRosterSwapRequest::set_has_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAFantasyTeamRosterSwapRequest::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAFantasyTeamRosterSwapRequest::clear_timestamp() {
  timestamp_ = 0u;
  clear_has_timestamp();
}
::google::protobuf::uint32 CMsgDOTAFantasyTeamRosterSwapRequest::timestamp() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyTeamRosterSwapRequest.timestamp)
  return timestamp_;
}
void CMsgDOTAFantasyTeamRosterSwapRequest::set_timestamp(::google::protobuf::uint32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyTeamRosterSwapRequest.timestamp)
}

// optional uint32 slot_1 = 4;
bool CMsgDOTAFantasyTeamRosterSwapRequest::has_slot_1() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTAFantasyTeamRosterSwapRequest::set_has_slot_1() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTAFantasyTeamRosterSwapRequest::clear_has_slot_1() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTAFantasyTeamRosterSwapRequest::clear_slot_1() {
  slot_1_ = 0u;
  clear_has_slot_1();
}
::google::protobuf::uint32 CMsgDOTAFantasyTeamRosterSwapRequest::slot_1() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyTeamRosterSwapRequest.slot_1)
  return slot_1_;
}
void CMsgDOTAFantasyTeamRosterSwapRequest::set_slot_1(::google::protobuf::uint32 value) {
  set_has_slot_1();
  slot_1_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyTeamRosterSwapRequest.slot_1)
}

// optional uint32 slot_2 = 5;
bool CMsgDOTAFantasyTeamRosterSwapRequest::has_slot_2() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDOTAFantasyTeamRosterSwapRequest::set_has_slot_2() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDOTAFantasyTeamRosterSwapRequest::clear_has_slot_2() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDOTAFantasyTeamRosterSwapRequest::clear_slot_2() {
  slot_2_ = 0u;
  clear_has_slot_2();
}
::google::protobuf::uint32 CMsgDOTAFantasyTeamRosterSwapRequest::slot_2() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyTeamRosterSwapRequest.slot_2)
  return slot_2_;
}
void CMsgDOTAFantasyTeamRosterSwapRequest::set_slot_2(::google::protobuf::uint32 value) {
  set_has_slot_2();
  slot_2_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyTeamRosterSwapRequest.slot_2)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyTeamRosterSwapResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyTeamRosterSwapResponse::CMsgDOTAFantasyTeamRosterSwapResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyTeamRosterSwapResponse)
}
CMsgDOTAFantasyTeamRosterSwapResponse::CMsgDOTAFantasyTeamRosterSwapResponse(const CMsgDOTAFantasyTeamRosterSwapResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyTeamRosterSwapResponse)
}

void CMsgDOTAFantasyTeamRosterSwapResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
}

CMsgDOTAFantasyTeamRosterSwapResponse::~CMsgDOTAFantasyTeamRosterSwapResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyTeamRosterSwapResponse)
  SharedDtor();
}

void CMsgDOTAFantasyTeamRosterSwapResponse::SharedDtor() {
}

void CMsgDOTAFantasyTeamRosterSwapResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyTeamRosterSwapResponse::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAFantasyTeamRosterSwapResponse& CMsgDOTAFantasyTeamRosterSwapResponse::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAFantasyTeamRosterSwapResponse* CMsgDOTAFantasyTeamRosterSwapResponse::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyTeamRosterSwapResponse* n = new CMsgDOTAFantasyTeamRosterSwapResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyTeamRosterSwapResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyTeamRosterSwapResponse)
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAFantasyTeamRosterSwapResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyTeamRosterSwapResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgDOTAFantasyTeamRosterSwapResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgDOTAFantasyTeamRosterSwapResponse_EResult_IsValid(value)) {
            set_result(static_cast< ::proto::dota::CMsgDOTAFantasyTeamRosterSwapResponse_EResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyTeamRosterSwapResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyTeamRosterSwapResponse)
  return false;
#undef DO_
}

void CMsgDOTAFantasyTeamRosterSwapResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyTeamRosterSwapResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAFantasyTeamRosterSwapResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyTeamRosterSwapResponse)
}

::google::protobuf::uint8* CMsgDOTAFantasyTeamRosterSwapResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyTeamRosterSwapResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAFantasyTeamRosterSwapResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyTeamRosterSwapResponse)
  return target;
}

size_t CMsgDOTAFantasyTeamRosterSwapResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyTeamRosterSwapResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .proto.dota.CMsgDOTAFantasyTeamRosterSwapResponse.EResult result = 1 [default = SUCCESS];
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyTeamRosterSwapResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyTeamRosterSwapResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyTeamRosterSwapResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyTeamRosterSwapResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyTeamRosterSwapResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyTeamRosterSwapResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyTeamRosterSwapResponse::MergeFrom(const CMsgDOTAFantasyTeamRosterSwapResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyTeamRosterSwapResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void CMsgDOTAFantasyTeamRosterSwapResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyTeamRosterSwapResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyTeamRosterSwapResponse::CopyFrom(const CMsgDOTAFantasyTeamRosterSwapResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyTeamRosterSwapResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyTeamRosterSwapResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyTeamRosterSwapResponse::Swap(CMsgDOTAFantasyTeamRosterSwapResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyTeamRosterSwapResponse::InternalSwap(CMsgDOTAFantasyTeamRosterSwapResponse* other) {
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyTeamRosterSwapResponse::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyTeamRosterSwapResponse

// optional .proto.dota.CMsgDOTAFantasyTeamRosterSwapResponse.EResult result = 1 [default = SUCCESS];
bool CMsgDOTAFantasyTeamRosterSwapResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyTeamRosterSwapResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyTeamRosterSwapResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyTeamRosterSwapResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
::proto::dota::CMsgDOTAFantasyTeamRosterSwapResponse_EResult CMsgDOTAFantasyTeamRosterSwapResponse::result() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyTeamRosterSwapResponse.result)
  return static_cast< ::proto::dota::CMsgDOTAFantasyTeamRosterSwapResponse_EResult >(result_);
}
void CMsgDOTAFantasyTeamRosterSwapResponse::set_result(::proto::dota::CMsgDOTAFantasyTeamRosterSwapResponse_EResult value) {
  assert(::proto::dota::CMsgDOTAFantasyTeamRosterSwapResponse_EResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyTeamRosterSwapResponse.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyTeamRosterAddDropRequest::kFantasyLeagueIdFieldNumber;
const int CMsgDOTAFantasyTeamRosterAddDropRequest::kTeamIndexFieldNumber;
const int CMsgDOTAFantasyTeamRosterAddDropRequest::kAddAccountIdFieldNumber;
const int CMsgDOTAFantasyTeamRosterAddDropRequest::kDropAccountIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyTeamRosterAddDropRequest::CMsgDOTAFantasyTeamRosterAddDropRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyTeamRosterAddDropRequest)
}
CMsgDOTAFantasyTeamRosterAddDropRequest::CMsgDOTAFantasyTeamRosterAddDropRequest(const CMsgDOTAFantasyTeamRosterAddDropRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&fantasy_league_id_, &from.fantasy_league_id_,
    reinterpret_cast<char*>(&drop_account_id_) -
    reinterpret_cast<char*>(&fantasy_league_id_) + sizeof(drop_account_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyTeamRosterAddDropRequest)
}

void CMsgDOTAFantasyTeamRosterAddDropRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&fantasy_league_id_, 0, reinterpret_cast<char*>(&drop_account_id_) -
    reinterpret_cast<char*>(&fantasy_league_id_) + sizeof(drop_account_id_));
}

CMsgDOTAFantasyTeamRosterAddDropRequest::~CMsgDOTAFantasyTeamRosterAddDropRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyTeamRosterAddDropRequest)
  SharedDtor();
}

void CMsgDOTAFantasyTeamRosterAddDropRequest::SharedDtor() {
}

void CMsgDOTAFantasyTeamRosterAddDropRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyTeamRosterAddDropRequest::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAFantasyTeamRosterAddDropRequest& CMsgDOTAFantasyTeamRosterAddDropRequest::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAFantasyTeamRosterAddDropRequest* CMsgDOTAFantasyTeamRosterAddDropRequest::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyTeamRosterAddDropRequest* n = new CMsgDOTAFantasyTeamRosterAddDropRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyTeamRosterAddDropRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyTeamRosterAddDropRequest)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&fantasy_league_id_, 0, reinterpret_cast<char*>(&drop_account_id_) -
      reinterpret_cast<char*>(&fantasy_league_id_) + sizeof(drop_account_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAFantasyTeamRosterAddDropRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyTeamRosterAddDropRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_fantasy_league_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team_index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_team_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 add_account_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_add_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &add_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 drop_account_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_drop_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &drop_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyTeamRosterAddDropRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyTeamRosterAddDropRequest)
  return false;
#undef DO_
}

void CMsgDOTAFantasyTeamRosterAddDropRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyTeamRosterAddDropRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fantasy_league_id(), output);
  }

  // optional uint32 team_index = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->team_index(), output);
  }

  // optional uint32 add_account_id = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->add_account_id(), output);
  }

  // optional uint32 drop_account_id = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->drop_account_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyTeamRosterAddDropRequest)
}

::google::protobuf::uint8* CMsgDOTAFantasyTeamRosterAddDropRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyTeamRosterAddDropRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fantasy_league_id(), target);
  }

  // optional uint32 team_index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->team_index(), target);
  }

  // optional uint32 add_account_id = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->add_account_id(), target);
  }

  // optional uint32 drop_account_id = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->drop_account_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyTeamRosterAddDropRequest)
  return target;
}

size_t CMsgDOTAFantasyTeamRosterAddDropRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyTeamRosterAddDropRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional uint32 fantasy_league_id = 1;
    if (has_fantasy_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_league_id());
    }

    // optional uint32 team_index = 2;
    if (has_team_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_index());
    }

    // optional uint32 add_account_id = 5;
    if (has_add_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->add_account_id());
    }

    // optional uint32 drop_account_id = 6;
    if (has_drop_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->drop_account_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyTeamRosterAddDropRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyTeamRosterAddDropRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyTeamRosterAddDropRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyTeamRosterAddDropRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyTeamRosterAddDropRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyTeamRosterAddDropRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyTeamRosterAddDropRequest::MergeFrom(const CMsgDOTAFantasyTeamRosterAddDropRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyTeamRosterAddDropRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      fantasy_league_id_ = from.fantasy_league_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      team_index_ = from.team_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      add_account_id_ = from.add_account_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      drop_account_id_ = from.drop_account_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyTeamRosterAddDropRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyTeamRosterAddDropRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyTeamRosterAddDropRequest::CopyFrom(const CMsgDOTAFantasyTeamRosterAddDropRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyTeamRosterAddDropRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyTeamRosterAddDropRequest::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyTeamRosterAddDropRequest::Swap(CMsgDOTAFantasyTeamRosterAddDropRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyTeamRosterAddDropRequest::InternalSwap(CMsgDOTAFantasyTeamRosterAddDropRequest* other) {
  std::swap(fantasy_league_id_, other->fantasy_league_id_);
  std::swap(team_index_, other->team_index_);
  std::swap(add_account_id_, other->add_account_id_);
  std::swap(drop_account_id_, other->drop_account_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyTeamRosterAddDropRequest::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyTeamRosterAddDropRequest

// optional uint32 fantasy_league_id = 1;
bool CMsgDOTAFantasyTeamRosterAddDropRequest::has_fantasy_league_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyTeamRosterAddDropRequest::set_has_fantasy_league_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyTeamRosterAddDropRequest::clear_has_fantasy_league_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyTeamRosterAddDropRequest::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  clear_has_fantasy_league_id();
}
::google::protobuf::uint32 CMsgDOTAFantasyTeamRosterAddDropRequest::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyTeamRosterAddDropRequest.fantasy_league_id)
  return fantasy_league_id_;
}
void CMsgDOTAFantasyTeamRosterAddDropRequest::set_fantasy_league_id(::google::protobuf::uint32 value) {
  set_has_fantasy_league_id();
  fantasy_league_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyTeamRosterAddDropRequest.fantasy_league_id)
}

// optional uint32 team_index = 2;
bool CMsgDOTAFantasyTeamRosterAddDropRequest::has_team_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAFantasyTeamRosterAddDropRequest::set_has_team_index() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAFantasyTeamRosterAddDropRequest::clear_has_team_index() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAFantasyTeamRosterAddDropRequest::clear_team_index() {
  team_index_ = 0u;
  clear_has_team_index();
}
::google::protobuf::uint32 CMsgDOTAFantasyTeamRosterAddDropRequest::team_index() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyTeamRosterAddDropRequest.team_index)
  return team_index_;
}
void CMsgDOTAFantasyTeamRosterAddDropRequest::set_team_index(::google::protobuf::uint32 value) {
  set_has_team_index();
  team_index_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyTeamRosterAddDropRequest.team_index)
}

// optional uint32 add_account_id = 5;
bool CMsgDOTAFantasyTeamRosterAddDropRequest::has_add_account_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAFantasyTeamRosterAddDropRequest::set_has_add_account_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAFantasyTeamRosterAddDropRequest::clear_has_add_account_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAFantasyTeamRosterAddDropRequest::clear_add_account_id() {
  add_account_id_ = 0u;
  clear_has_add_account_id();
}
::google::protobuf::uint32 CMsgDOTAFantasyTeamRosterAddDropRequest::add_account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyTeamRosterAddDropRequest.add_account_id)
  return add_account_id_;
}
void CMsgDOTAFantasyTeamRosterAddDropRequest::set_add_account_id(::google::protobuf::uint32 value) {
  set_has_add_account_id();
  add_account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyTeamRosterAddDropRequest.add_account_id)
}

// optional uint32 drop_account_id = 6;
bool CMsgDOTAFantasyTeamRosterAddDropRequest::has_drop_account_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTAFantasyTeamRosterAddDropRequest::set_has_drop_account_id() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTAFantasyTeamRosterAddDropRequest::clear_has_drop_account_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTAFantasyTeamRosterAddDropRequest::clear_drop_account_id() {
  drop_account_id_ = 0u;
  clear_has_drop_account_id();
}
::google::protobuf::uint32 CMsgDOTAFantasyTeamRosterAddDropRequest::drop_account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyTeamRosterAddDropRequest.drop_account_id)
  return drop_account_id_;
}
void CMsgDOTAFantasyTeamRosterAddDropRequest::set_drop_account_id(::google::protobuf::uint32 value) {
  set_has_drop_account_id();
  drop_account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyTeamRosterAddDropRequest.drop_account_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyTeamRosterAddDropResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyTeamRosterAddDropResponse::CMsgDOTAFantasyTeamRosterAddDropResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyTeamRosterAddDropResponse)
}
CMsgDOTAFantasyTeamRosterAddDropResponse::CMsgDOTAFantasyTeamRosterAddDropResponse(const CMsgDOTAFantasyTeamRosterAddDropResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyTeamRosterAddDropResponse)
}

void CMsgDOTAFantasyTeamRosterAddDropResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
}

CMsgDOTAFantasyTeamRosterAddDropResponse::~CMsgDOTAFantasyTeamRosterAddDropResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyTeamRosterAddDropResponse)
  SharedDtor();
}

void CMsgDOTAFantasyTeamRosterAddDropResponse::SharedDtor() {
}

void CMsgDOTAFantasyTeamRosterAddDropResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyTeamRosterAddDropResponse::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAFantasyTeamRosterAddDropResponse& CMsgDOTAFantasyTeamRosterAddDropResponse::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAFantasyTeamRosterAddDropResponse* CMsgDOTAFantasyTeamRosterAddDropResponse::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyTeamRosterAddDropResponse* n = new CMsgDOTAFantasyTeamRosterAddDropResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyTeamRosterAddDropResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyTeamRosterAddDropResponse)
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAFantasyTeamRosterAddDropResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyTeamRosterAddDropResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgDOTAFantasyTeamRosterAddDropResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgDOTAFantasyTeamRosterAddDropResponse_EResult_IsValid(value)) {
            set_result(static_cast< ::proto::dota::CMsgDOTAFantasyTeamRosterAddDropResponse_EResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyTeamRosterAddDropResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyTeamRosterAddDropResponse)
  return false;
#undef DO_
}

void CMsgDOTAFantasyTeamRosterAddDropResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyTeamRosterAddDropResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAFantasyTeamRosterAddDropResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyTeamRosterAddDropResponse)
}

::google::protobuf::uint8* CMsgDOTAFantasyTeamRosterAddDropResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyTeamRosterAddDropResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAFantasyTeamRosterAddDropResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyTeamRosterAddDropResponse)
  return target;
}

size_t CMsgDOTAFantasyTeamRosterAddDropResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyTeamRosterAddDropResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .proto.dota.CMsgDOTAFantasyTeamRosterAddDropResponse.EResult result = 1 [default = SUCCESS];
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyTeamRosterAddDropResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyTeamRosterAddDropResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyTeamRosterAddDropResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyTeamRosterAddDropResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyTeamRosterAddDropResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyTeamRosterAddDropResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyTeamRosterAddDropResponse::MergeFrom(const CMsgDOTAFantasyTeamRosterAddDropResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyTeamRosterAddDropResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void CMsgDOTAFantasyTeamRosterAddDropResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyTeamRosterAddDropResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyTeamRosterAddDropResponse::CopyFrom(const CMsgDOTAFantasyTeamRosterAddDropResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyTeamRosterAddDropResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyTeamRosterAddDropResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyTeamRosterAddDropResponse::Swap(CMsgDOTAFantasyTeamRosterAddDropResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyTeamRosterAddDropResponse::InternalSwap(CMsgDOTAFantasyTeamRosterAddDropResponse* other) {
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyTeamRosterAddDropResponse::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyTeamRosterAddDropResponse

// optional .proto.dota.CMsgDOTAFantasyTeamRosterAddDropResponse.EResult result = 1 [default = SUCCESS];
bool CMsgDOTAFantasyTeamRosterAddDropResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyTeamRosterAddDropResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyTeamRosterAddDropResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyTeamRosterAddDropResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
::proto::dota::CMsgDOTAFantasyTeamRosterAddDropResponse_EResult CMsgDOTAFantasyTeamRosterAddDropResponse::result() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyTeamRosterAddDropResponse.result)
  return static_cast< ::proto::dota::CMsgDOTAFantasyTeamRosterAddDropResponse_EResult >(result_);
}
void CMsgDOTAFantasyTeamRosterAddDropResponse::set_result(::proto::dota::CMsgDOTAFantasyTeamRosterAddDropResponse_EResult value) {
  assert(::proto::dota::CMsgDOTAFantasyTeamRosterAddDropResponse_EResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyTeamRosterAddDropResponse.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyTeamTradesRequest::kFantasyLeagueIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyTeamTradesRequest::CMsgDOTAFantasyTeamTradesRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyTeamTradesRequest)
}
CMsgDOTAFantasyTeamTradesRequest::CMsgDOTAFantasyTeamTradesRequest(const CMsgDOTAFantasyTeamTradesRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fantasy_league_id_ = from.fantasy_league_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyTeamTradesRequest)
}

void CMsgDOTAFantasyTeamTradesRequest::SharedCtor() {
  _cached_size_ = 0;
  fantasy_league_id_ = 0u;
}

CMsgDOTAFantasyTeamTradesRequest::~CMsgDOTAFantasyTeamTradesRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyTeamTradesRequest)
  SharedDtor();
}

void CMsgDOTAFantasyTeamTradesRequest::SharedDtor() {
}

void CMsgDOTAFantasyTeamTradesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyTeamTradesRequest::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAFantasyTeamTradesRequest& CMsgDOTAFantasyTeamTradesRequest::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAFantasyTeamTradesRequest* CMsgDOTAFantasyTeamTradesRequest::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyTeamTradesRequest* n = new CMsgDOTAFantasyTeamTradesRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyTeamTradesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyTeamTradesRequest)
  fantasy_league_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAFantasyTeamTradesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyTeamTradesRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_fantasy_league_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyTeamTradesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyTeamTradesRequest)
  return false;
#undef DO_
}

void CMsgDOTAFantasyTeamTradesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyTeamTradesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fantasy_league_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyTeamTradesRequest)
}

::google::protobuf::uint8* CMsgDOTAFantasyTeamTradesRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyTeamTradesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fantasy_league_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyTeamTradesRequest)
  return target;
}

size_t CMsgDOTAFantasyTeamTradesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyTeamTradesRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 fantasy_league_id = 1;
  if (has_fantasy_league_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->fantasy_league_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyTeamTradesRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyTeamTradesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyTeamTradesRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyTeamTradesRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyTeamTradesRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyTeamTradesRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyTeamTradesRequest::MergeFrom(const CMsgDOTAFantasyTeamTradesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyTeamTradesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_fantasy_league_id()) {
    set_fantasy_league_id(from.fantasy_league_id());
  }
}

void CMsgDOTAFantasyTeamTradesRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyTeamTradesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyTeamTradesRequest::CopyFrom(const CMsgDOTAFantasyTeamTradesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyTeamTradesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyTeamTradesRequest::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyTeamTradesRequest::Swap(CMsgDOTAFantasyTeamTradesRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyTeamTradesRequest::InternalSwap(CMsgDOTAFantasyTeamTradesRequest* other) {
  std::swap(fantasy_league_id_, other->fantasy_league_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyTeamTradesRequest::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyTeamTradesRequest

// optional uint32 fantasy_league_id = 1;
bool CMsgDOTAFantasyTeamTradesRequest::has_fantasy_league_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyTeamTradesRequest::set_has_fantasy_league_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyTeamTradesRequest::clear_has_fantasy_league_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyTeamTradesRequest::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  clear_has_fantasy_league_id();
}
::google::protobuf::uint32 CMsgDOTAFantasyTeamTradesRequest::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyTeamTradesRequest.fantasy_league_id)
  return fantasy_league_id_;
}
void CMsgDOTAFantasyTeamTradesRequest::set_fantasy_league_id(::google::protobuf::uint32 value) {
  set_has_fantasy_league_id();
  fantasy_league_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyTeamTradesRequest.fantasy_league_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyTeamTradesResponse_Trade::kTimestampFieldNumber;
const int CMsgDOTAFantasyTeamTradesResponse_Trade::kOwnerAccountId1FieldNumber;
const int CMsgDOTAFantasyTeamTradesResponse_Trade::kOwnerAccountId2FieldNumber;
const int CMsgDOTAFantasyTeamTradesResponse_Trade::kPlayerAccountId1FieldNumber;
const int CMsgDOTAFantasyTeamTradesResponse_Trade::kPlayerAccountId2FieldNumber;
const int CMsgDOTAFantasyTeamTradesResponse_Trade::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyTeamTradesResponse_Trade::CMsgDOTAFantasyTeamTradesResponse_Trade()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyTeamTradesResponse.Trade)
}
CMsgDOTAFantasyTeamTradesResponse_Trade::CMsgDOTAFantasyTeamTradesResponse_Trade(const CMsgDOTAFantasyTeamTradesResponse_Trade& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&timestamp_) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyTeamTradesResponse.Trade)
}

void CMsgDOTAFantasyTeamTradesResponse_Trade::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&timestamp_, 0, reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&timestamp_) + sizeof(status_));
}

CMsgDOTAFantasyTeamTradesResponse_Trade::~CMsgDOTAFantasyTeamTradesResponse_Trade() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyTeamTradesResponse.Trade)
  SharedDtor();
}

void CMsgDOTAFantasyTeamTradesResponse_Trade::SharedDtor() {
}

void CMsgDOTAFantasyTeamTradesResponse_Trade::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyTeamTradesResponse_Trade::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAFantasyTeamTradesResponse_Trade& CMsgDOTAFantasyTeamTradesResponse_Trade::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAFantasyTeamTradesResponse_Trade* CMsgDOTAFantasyTeamTradesResponse_Trade::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyTeamTradesResponse_Trade* n = new CMsgDOTAFantasyTeamTradesResponse_Trade;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyTeamTradesResponse_Trade::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyTeamTradesResponse.Trade)
  if (_has_bits_[0 / 32] & 63u) {
    ::memset(&timestamp_, 0, reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&timestamp_) + sizeof(status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAFantasyTeamTradesResponse_Trade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyTeamTradesResponse.Trade)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 owner_account_id_1 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_owner_account_id_1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &owner_account_id_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 owner_account_id_2 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_owner_account_id_2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &owner_account_id_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 player_account_id_1 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_player_account_id_1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_account_id_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 player_account_id_2 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_player_account_id_2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_account_id_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 status = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyTeamTradesResponse.Trade)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyTeamTradesResponse.Trade)
  return false;
#undef DO_
}

void CMsgDOTAFantasyTeamTradesResponse_Trade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyTeamTradesResponse.Trade)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->timestamp(), output);
  }

  // optional uint32 owner_account_id_1 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->owner_account_id_1(), output);
  }

  // optional uint32 owner_account_id_2 = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->owner_account_id_2(), output);
  }

  // optional uint32 player_account_id_1 = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->player_account_id_1(), output);
  }

  // optional uint32 player_account_id_2 = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->player_account_id_2(), output);
  }

  // optional uint32 status = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyTeamTradesResponse.Trade)
}

::google::protobuf::uint8* CMsgDOTAFantasyTeamTradesResponse_Trade::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyTeamTradesResponse.Trade)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->timestamp(), target);
  }

  // optional uint32 owner_account_id_1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->owner_account_id_1(), target);
  }

  // optional uint32 owner_account_id_2 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->owner_account_id_2(), target);
  }

  // optional uint32 player_account_id_1 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->player_account_id_1(), target);
  }

  // optional uint32 player_account_id_2 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->player_account_id_2(), target);
  }

  // optional uint32 status = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyTeamTradesResponse.Trade)
  return target;
}

size_t CMsgDOTAFantasyTeamTradesResponse_Trade::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyTeamTradesResponse.Trade)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional uint32 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

    // optional uint32 owner_account_id_1 = 2;
    if (has_owner_account_id_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->owner_account_id_1());
    }

    // optional uint32 owner_account_id_2 = 3;
    if (has_owner_account_id_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->owner_account_id_2());
    }

    // optional uint32 player_account_id_1 = 4;
    if (has_player_account_id_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_account_id_1());
    }

    // optional uint32 player_account_id_2 = 5;
    if (has_player_account_id_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_account_id_2());
    }

    // optional uint32 status = 6;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyTeamTradesResponse_Trade::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyTeamTradesResponse.Trade)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyTeamTradesResponse_Trade* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyTeamTradesResponse_Trade>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyTeamTradesResponse.Trade)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyTeamTradesResponse.Trade)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyTeamTradesResponse_Trade::MergeFrom(const CMsgDOTAFantasyTeamTradesResponse_Trade& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyTeamTradesResponse.Trade)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000002u) {
      owner_account_id_1_ = from.owner_account_id_1_;
    }
    if (cached_has_bits & 0x00000004u) {
      owner_account_id_2_ = from.owner_account_id_2_;
    }
    if (cached_has_bits & 0x00000008u) {
      player_account_id_1_ = from.player_account_id_1_;
    }
    if (cached_has_bits & 0x00000010u) {
      player_account_id_2_ = from.player_account_id_2_;
    }
    if (cached_has_bits & 0x00000020u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyTeamTradesResponse_Trade::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyTeamTradesResponse.Trade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyTeamTradesResponse_Trade::CopyFrom(const CMsgDOTAFantasyTeamTradesResponse_Trade& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyTeamTradesResponse.Trade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyTeamTradesResponse_Trade::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyTeamTradesResponse_Trade::Swap(CMsgDOTAFantasyTeamTradesResponse_Trade* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyTeamTradesResponse_Trade::InternalSwap(CMsgDOTAFantasyTeamTradesResponse_Trade* other) {
  std::swap(timestamp_, other->timestamp_);
  std::swap(owner_account_id_1_, other->owner_account_id_1_);
  std::swap(owner_account_id_2_, other->owner_account_id_2_);
  std::swap(player_account_id_1_, other->player_account_id_1_);
  std::swap(player_account_id_2_, other->player_account_id_2_);
  std::swap(status_, other->status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyTeamTradesResponse_Trade::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyTeamTradesResponse_Trade

// optional uint32 timestamp = 1;
bool CMsgDOTAFantasyTeamTradesResponse_Trade::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyTeamTradesResponse_Trade::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyTeamTradesResponse_Trade::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyTeamTradesResponse_Trade::clear_timestamp() {
  timestamp_ = 0u;
  clear_has_timestamp();
}
::google::protobuf::uint32 CMsgDOTAFantasyTeamTradesResponse_Trade::timestamp() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyTeamTradesResponse.Trade.timestamp)
  return timestamp_;
}
void CMsgDOTAFantasyTeamTradesResponse_Trade::set_timestamp(::google::protobuf::uint32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyTeamTradesResponse.Trade.timestamp)
}

// optional uint32 owner_account_id_1 = 2;
bool CMsgDOTAFantasyTeamTradesResponse_Trade::has_owner_account_id_1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAFantasyTeamTradesResponse_Trade::set_has_owner_account_id_1() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAFantasyTeamTradesResponse_Trade::clear_has_owner_account_id_1() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAFantasyTeamTradesResponse_Trade::clear_owner_account_id_1() {
  owner_account_id_1_ = 0u;
  clear_has_owner_account_id_1();
}
::google::protobuf::uint32 CMsgDOTAFantasyTeamTradesResponse_Trade::owner_account_id_1() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyTeamTradesResponse.Trade.owner_account_id_1)
  return owner_account_id_1_;
}
void CMsgDOTAFantasyTeamTradesResponse_Trade::set_owner_account_id_1(::google::protobuf::uint32 value) {
  set_has_owner_account_id_1();
  owner_account_id_1_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyTeamTradesResponse.Trade.owner_account_id_1)
}

// optional uint32 owner_account_id_2 = 3;
bool CMsgDOTAFantasyTeamTradesResponse_Trade::has_owner_account_id_2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAFantasyTeamTradesResponse_Trade::set_has_owner_account_id_2() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAFantasyTeamTradesResponse_Trade::clear_has_owner_account_id_2() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAFantasyTeamTradesResponse_Trade::clear_owner_account_id_2() {
  owner_account_id_2_ = 0u;
  clear_has_owner_account_id_2();
}
::google::protobuf::uint32 CMsgDOTAFantasyTeamTradesResponse_Trade::owner_account_id_2() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyTeamTradesResponse.Trade.owner_account_id_2)
  return owner_account_id_2_;
}
void CMsgDOTAFantasyTeamTradesResponse_Trade::set_owner_account_id_2(::google::protobuf::uint32 value) {
  set_has_owner_account_id_2();
  owner_account_id_2_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyTeamTradesResponse.Trade.owner_account_id_2)
}

// optional uint32 player_account_id_1 = 4;
bool CMsgDOTAFantasyTeamTradesResponse_Trade::has_player_account_id_1() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTAFantasyTeamTradesResponse_Trade::set_has_player_account_id_1() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTAFantasyTeamTradesResponse_Trade::clear_has_player_account_id_1() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTAFantasyTeamTradesResponse_Trade::clear_player_account_id_1() {
  player_account_id_1_ = 0u;
  clear_has_player_account_id_1();
}
::google::protobuf::uint32 CMsgDOTAFantasyTeamTradesResponse_Trade::player_account_id_1() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyTeamTradesResponse.Trade.player_account_id_1)
  return player_account_id_1_;
}
void CMsgDOTAFantasyTeamTradesResponse_Trade::set_player_account_id_1(::google::protobuf::uint32 value) {
  set_has_player_account_id_1();
  player_account_id_1_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyTeamTradesResponse.Trade.player_account_id_1)
}

// optional uint32 player_account_id_2 = 5;
bool CMsgDOTAFantasyTeamTradesResponse_Trade::has_player_account_id_2() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDOTAFantasyTeamTradesResponse_Trade::set_has_player_account_id_2() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDOTAFantasyTeamTradesResponse_Trade::clear_has_player_account_id_2() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDOTAFantasyTeamTradesResponse_Trade::clear_player_account_id_2() {
  player_account_id_2_ = 0u;
  clear_has_player_account_id_2();
}
::google::protobuf::uint32 CMsgDOTAFantasyTeamTradesResponse_Trade::player_account_id_2() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyTeamTradesResponse.Trade.player_account_id_2)
  return player_account_id_2_;
}
void CMsgDOTAFantasyTeamTradesResponse_Trade::set_player_account_id_2(::google::protobuf::uint32 value) {
  set_has_player_account_id_2();
  player_account_id_2_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyTeamTradesResponse.Trade.player_account_id_2)
}

// optional uint32 status = 6;
bool CMsgDOTAFantasyTeamTradesResponse_Trade::has_status() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgDOTAFantasyTeamTradesResponse_Trade::set_has_status() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgDOTAFantasyTeamTradesResponse_Trade::clear_has_status() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgDOTAFantasyTeamTradesResponse_Trade::clear_status() {
  status_ = 0u;
  clear_has_status();
}
::google::protobuf::uint32 CMsgDOTAFantasyTeamTradesResponse_Trade::status() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyTeamTradesResponse.Trade.status)
  return status_;
}
void CMsgDOTAFantasyTeamTradesResponse_Trade::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyTeamTradesResponse.Trade.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyTeamTradesResponse::kResultFieldNumber;
const int CMsgDOTAFantasyTeamTradesResponse::kTradesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyTeamTradesResponse::CMsgDOTAFantasyTeamTradesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyTeamTradesResponse)
}
CMsgDOTAFantasyTeamTradesResponse::CMsgDOTAFantasyTeamTradesResponse(const CMsgDOTAFantasyTeamTradesResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      trades_(from.trades_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyTeamTradesResponse)
}

void CMsgDOTAFantasyTeamTradesResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
}

CMsgDOTAFantasyTeamTradesResponse::~CMsgDOTAFantasyTeamTradesResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyTeamTradesResponse)
  SharedDtor();
}

void CMsgDOTAFantasyTeamTradesResponse::SharedDtor() {
}

void CMsgDOTAFantasyTeamTradesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyTeamTradesResponse::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAFantasyTeamTradesResponse& CMsgDOTAFantasyTeamTradesResponse::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAFantasyTeamTradesResponse* CMsgDOTAFantasyTeamTradesResponse::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyTeamTradesResponse* n = new CMsgDOTAFantasyTeamTradesResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyTeamTradesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyTeamTradesResponse)
  trades_.Clear();
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAFantasyTeamTradesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyTeamTradesResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgDOTAFantasyTeamTradesResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgDOTAFantasyTeamTradesResponse_EResult_IsValid(value)) {
            set_result(static_cast< ::proto::dota::CMsgDOTAFantasyTeamTradesResponse_EResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTAFantasyTeamTradesResponse.Trade trades = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_trades()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyTeamTradesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyTeamTradesResponse)
  return false;
#undef DO_
}

void CMsgDOTAFantasyTeamTradesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyTeamTradesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAFantasyTeamTradesResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // repeated .proto.dota.CMsgDOTAFantasyTeamTradesResponse.Trade trades = 2;
  for (unsigned int i = 0, n = this->trades_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->trades(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyTeamTradesResponse)
}

::google::protobuf::uint8* CMsgDOTAFantasyTeamTradesResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyTeamTradesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAFantasyTeamTradesResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // repeated .proto.dota.CMsgDOTAFantasyTeamTradesResponse.Trade trades = 2;
  for (unsigned int i = 0, n = this->trades_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->trades(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyTeamTradesResponse)
  return target;
}

size_t CMsgDOTAFantasyTeamTradesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyTeamTradesResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgDOTAFantasyTeamTradesResponse.Trade trades = 2;
  {
    unsigned int count = this->trades_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->trades(i));
    }
  }

  // optional .proto.dota.CMsgDOTAFantasyTeamTradesResponse.EResult result = 1 [default = SUCCESS];
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyTeamTradesResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyTeamTradesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyTeamTradesResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyTeamTradesResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyTeamTradesResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyTeamTradesResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyTeamTradesResponse::MergeFrom(const CMsgDOTAFantasyTeamTradesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyTeamTradesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trades_.MergeFrom(from.trades_);
  if (from.has_result()) {
    set_result(from.result());
  }
}

void CMsgDOTAFantasyTeamTradesResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyTeamTradesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyTeamTradesResponse::CopyFrom(const CMsgDOTAFantasyTeamTradesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyTeamTradesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyTeamTradesResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyTeamTradesResponse::Swap(CMsgDOTAFantasyTeamTradesResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyTeamTradesResponse::InternalSwap(CMsgDOTAFantasyTeamTradesResponse* other) {
  trades_.InternalSwap(&other->trades_);
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyTeamTradesResponse::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyTeamTradesResponse

// optional .proto.dota.CMsgDOTAFantasyTeamTradesResponse.EResult result = 1 [default = SUCCESS];
bool CMsgDOTAFantasyTeamTradesResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyTeamTradesResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyTeamTradesResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyTeamTradesResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
::proto::dota::CMsgDOTAFantasyTeamTradesResponse_EResult CMsgDOTAFantasyTeamTradesResponse::result() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyTeamTradesResponse.result)
  return static_cast< ::proto::dota::CMsgDOTAFantasyTeamTradesResponse_EResult >(result_);
}
void CMsgDOTAFantasyTeamTradesResponse::set_result(::proto::dota::CMsgDOTAFantasyTeamTradesResponse_EResult value) {
  assert(::proto::dota::CMsgDOTAFantasyTeamTradesResponse_EResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyTeamTradesResponse.result)
}

// repeated .proto.dota.CMsgDOTAFantasyTeamTradesResponse.Trade trades = 2;
int CMsgDOTAFantasyTeamTradesResponse::trades_size() const {
  return trades_.size();
}
void CMsgDOTAFantasyTeamTradesResponse::clear_trades() {
  trades_.Clear();
}
const ::proto::dota::CMsgDOTAFantasyTeamTradesResponse_Trade& CMsgDOTAFantasyTeamTradesResponse::trades(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyTeamTradesResponse.trades)
  return trades_.Get(index);
}
::proto::dota::CMsgDOTAFantasyTeamTradesResponse_Trade* CMsgDOTAFantasyTeamTradesResponse::mutable_trades(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAFantasyTeamTradesResponse.trades)
  return trades_.Mutable(index);
}
::proto::dota::CMsgDOTAFantasyTeamTradesResponse_Trade* CMsgDOTAFantasyTeamTradesResponse::add_trades() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTAFantasyTeamTradesResponse.trades)
  return trades_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAFantasyTeamTradesResponse_Trade >*
CMsgDOTAFantasyTeamTradesResponse::mutable_trades() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTAFantasyTeamTradesResponse.trades)
  return &trades_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAFantasyTeamTradesResponse_Trade >&
CMsgDOTAFantasyTeamTradesResponse::trades() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTAFantasyTeamTradesResponse.trades)
  return trades_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyTeamTradeCancelRequest::kFantasyLeagueIdFieldNumber;
const int CMsgDOTAFantasyTeamTradeCancelRequest::kTeamIndex1FieldNumber;
const int CMsgDOTAFantasyTeamTradeCancelRequest::kOwnerAccountId2FieldNumber;
const int CMsgDOTAFantasyTeamTradeCancelRequest::kTeamIndex2FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyTeamTradeCancelRequest::CMsgDOTAFantasyTeamTradeCancelRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyTeamTradeCancelRequest)
}
CMsgDOTAFantasyTeamTradeCancelRequest::CMsgDOTAFantasyTeamTradeCancelRequest(const CMsgDOTAFantasyTeamTradeCancelRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&fantasy_league_id_, &from.fantasy_league_id_,
    reinterpret_cast<char*>(&team_index_2_) -
    reinterpret_cast<char*>(&fantasy_league_id_) + sizeof(team_index_2_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyTeamTradeCancelRequest)
}

void CMsgDOTAFantasyTeamTradeCancelRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&fantasy_league_id_, 0, reinterpret_cast<char*>(&team_index_2_) -
    reinterpret_cast<char*>(&fantasy_league_id_) + sizeof(team_index_2_));
}

CMsgDOTAFantasyTeamTradeCancelRequest::~CMsgDOTAFantasyTeamTradeCancelRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyTeamTradeCancelRequest)
  SharedDtor();
}

void CMsgDOTAFantasyTeamTradeCancelRequest::SharedDtor() {
}

void CMsgDOTAFantasyTeamTradeCancelRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyTeamTradeCancelRequest::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAFantasyTeamTradeCancelRequest& CMsgDOTAFantasyTeamTradeCancelRequest::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAFantasyTeamTradeCancelRequest* CMsgDOTAFantasyTeamTradeCancelRequest::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyTeamTradeCancelRequest* n = new CMsgDOTAFantasyTeamTradeCancelRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyTeamTradeCancelRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyTeamTradeCancelRequest)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&fantasy_league_id_, 0, reinterpret_cast<char*>(&team_index_2_) -
      reinterpret_cast<char*>(&fantasy_league_id_) + sizeof(team_index_2_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAFantasyTeamTradeCancelRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyTeamTradeCancelRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_fantasy_league_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team_index_1 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_team_index_1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_index_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 owner_account_id_2 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_owner_account_id_2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &owner_account_id_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team_index_2 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_team_index_2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_index_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyTeamTradeCancelRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyTeamTradeCancelRequest)
  return false;
#undef DO_
}

void CMsgDOTAFantasyTeamTradeCancelRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyTeamTradeCancelRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fantasy_league_id(), output);
  }

  // optional uint32 team_index_1 = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->team_index_1(), output);
  }

  // optional uint32 owner_account_id_2 = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->owner_account_id_2(), output);
  }

  // optional uint32 team_index_2 = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->team_index_2(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyTeamTradeCancelRequest)
}

::google::protobuf::uint8* CMsgDOTAFantasyTeamTradeCancelRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyTeamTradeCancelRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fantasy_league_id(), target);
  }

  // optional uint32 team_index_1 = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->team_index_1(), target);
  }

  // optional uint32 owner_account_id_2 = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->owner_account_id_2(), target);
  }

  // optional uint32 team_index_2 = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->team_index_2(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyTeamTradeCancelRequest)
  return target;
}

size_t CMsgDOTAFantasyTeamTradeCancelRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyTeamTradeCancelRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional uint32 fantasy_league_id = 1;
    if (has_fantasy_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_league_id());
    }

    // optional uint32 team_index_1 = 3;
    if (has_team_index_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_index_1());
    }

    // optional uint32 owner_account_id_2 = 4;
    if (has_owner_account_id_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->owner_account_id_2());
    }

    // optional uint32 team_index_2 = 5;
    if (has_team_index_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_index_2());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyTeamTradeCancelRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyTeamTradeCancelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyTeamTradeCancelRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyTeamTradeCancelRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyTeamTradeCancelRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyTeamTradeCancelRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyTeamTradeCancelRequest::MergeFrom(const CMsgDOTAFantasyTeamTradeCancelRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyTeamTradeCancelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      fantasy_league_id_ = from.fantasy_league_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      team_index_1_ = from.team_index_1_;
    }
    if (cached_has_bits & 0x00000004u) {
      owner_account_id_2_ = from.owner_account_id_2_;
    }
    if (cached_has_bits & 0x00000008u) {
      team_index_2_ = from.team_index_2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyTeamTradeCancelRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyTeamTradeCancelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyTeamTradeCancelRequest::CopyFrom(const CMsgDOTAFantasyTeamTradeCancelRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyTeamTradeCancelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyTeamTradeCancelRequest::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyTeamTradeCancelRequest::Swap(CMsgDOTAFantasyTeamTradeCancelRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyTeamTradeCancelRequest::InternalSwap(CMsgDOTAFantasyTeamTradeCancelRequest* other) {
  std::swap(fantasy_league_id_, other->fantasy_league_id_);
  std::swap(team_index_1_, other->team_index_1_);
  std::swap(owner_account_id_2_, other->owner_account_id_2_);
  std::swap(team_index_2_, other->team_index_2_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyTeamTradeCancelRequest::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyTeamTradeCancelRequest

// optional uint32 fantasy_league_id = 1;
bool CMsgDOTAFantasyTeamTradeCancelRequest::has_fantasy_league_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyTeamTradeCancelRequest::set_has_fantasy_league_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyTeamTradeCancelRequest::clear_has_fantasy_league_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyTeamTradeCancelRequest::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  clear_has_fantasy_league_id();
}
::google::protobuf::uint32 CMsgDOTAFantasyTeamTradeCancelRequest::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyTeamTradeCancelRequest.fantasy_league_id)
  return fantasy_league_id_;
}
void CMsgDOTAFantasyTeamTradeCancelRequest::set_fantasy_league_id(::google::protobuf::uint32 value) {
  set_has_fantasy_league_id();
  fantasy_league_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyTeamTradeCancelRequest.fantasy_league_id)
}

// optional uint32 team_index_1 = 3;
bool CMsgDOTAFantasyTeamTradeCancelRequest::has_team_index_1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAFantasyTeamTradeCancelRequest::set_has_team_index_1() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAFantasyTeamTradeCancelRequest::clear_has_team_index_1() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAFantasyTeamTradeCancelRequest::clear_team_index_1() {
  team_index_1_ = 0u;
  clear_has_team_index_1();
}
::google::protobuf::uint32 CMsgDOTAFantasyTeamTradeCancelRequest::team_index_1() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyTeamTradeCancelRequest.team_index_1)
  return team_index_1_;
}
void CMsgDOTAFantasyTeamTradeCancelRequest::set_team_index_1(::google::protobuf::uint32 value) {
  set_has_team_index_1();
  team_index_1_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyTeamTradeCancelRequest.team_index_1)
}

// optional uint32 owner_account_id_2 = 4;
bool CMsgDOTAFantasyTeamTradeCancelRequest::has_owner_account_id_2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAFantasyTeamTradeCancelRequest::set_has_owner_account_id_2() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAFantasyTeamTradeCancelRequest::clear_has_owner_account_id_2() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAFantasyTeamTradeCancelRequest::clear_owner_account_id_2() {
  owner_account_id_2_ = 0u;
  clear_has_owner_account_id_2();
}
::google::protobuf::uint32 CMsgDOTAFantasyTeamTradeCancelRequest::owner_account_id_2() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyTeamTradeCancelRequest.owner_account_id_2)
  return owner_account_id_2_;
}
void CMsgDOTAFantasyTeamTradeCancelRequest::set_owner_account_id_2(::google::protobuf::uint32 value) {
  set_has_owner_account_id_2();
  owner_account_id_2_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyTeamTradeCancelRequest.owner_account_id_2)
}

// optional uint32 team_index_2 = 5;
bool CMsgDOTAFantasyTeamTradeCancelRequest::has_team_index_2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTAFantasyTeamTradeCancelRequest::set_has_team_index_2() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTAFantasyTeamTradeCancelRequest::clear_has_team_index_2() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTAFantasyTeamTradeCancelRequest::clear_team_index_2() {
  team_index_2_ = 0u;
  clear_has_team_index_2();
}
::google::protobuf::uint32 CMsgDOTAFantasyTeamTradeCancelRequest::team_index_2() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyTeamTradeCancelRequest.team_index_2)
  return team_index_2_;
}
void CMsgDOTAFantasyTeamTradeCancelRequest::set_team_index_2(::google::protobuf::uint32 value) {
  set_has_team_index_2();
  team_index_2_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyTeamTradeCancelRequest.team_index_2)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyTeamTradeCancelResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyTeamTradeCancelResponse::CMsgDOTAFantasyTeamTradeCancelResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyTeamTradeCancelResponse)
}
CMsgDOTAFantasyTeamTradeCancelResponse::CMsgDOTAFantasyTeamTradeCancelResponse(const CMsgDOTAFantasyTeamTradeCancelResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyTeamTradeCancelResponse)
}

void CMsgDOTAFantasyTeamTradeCancelResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
}

CMsgDOTAFantasyTeamTradeCancelResponse::~CMsgDOTAFantasyTeamTradeCancelResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyTeamTradeCancelResponse)
  SharedDtor();
}

void CMsgDOTAFantasyTeamTradeCancelResponse::SharedDtor() {
}

void CMsgDOTAFantasyTeamTradeCancelResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyTeamTradeCancelResponse::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAFantasyTeamTradeCancelResponse& CMsgDOTAFantasyTeamTradeCancelResponse::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAFantasyTeamTradeCancelResponse* CMsgDOTAFantasyTeamTradeCancelResponse::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyTeamTradeCancelResponse* n = new CMsgDOTAFantasyTeamTradeCancelResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyTeamTradeCancelResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyTeamTradeCancelResponse)
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAFantasyTeamTradeCancelResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyTeamTradeCancelResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgDOTAFantasyTeamTradeCancelResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgDOTAFantasyTeamTradeCancelResponse_EResult_IsValid(value)) {
            set_result(static_cast< ::proto::dota::CMsgDOTAFantasyTeamTradeCancelResponse_EResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyTeamTradeCancelResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyTeamTradeCancelResponse)
  return false;
#undef DO_
}

void CMsgDOTAFantasyTeamTradeCancelResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyTeamTradeCancelResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAFantasyTeamTradeCancelResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyTeamTradeCancelResponse)
}

::google::protobuf::uint8* CMsgDOTAFantasyTeamTradeCancelResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyTeamTradeCancelResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAFantasyTeamTradeCancelResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyTeamTradeCancelResponse)
  return target;
}

size_t CMsgDOTAFantasyTeamTradeCancelResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyTeamTradeCancelResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .proto.dota.CMsgDOTAFantasyTeamTradeCancelResponse.EResult result = 1 [default = SUCCESS];
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyTeamTradeCancelResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyTeamTradeCancelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyTeamTradeCancelResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyTeamTradeCancelResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyTeamTradeCancelResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyTeamTradeCancelResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyTeamTradeCancelResponse::MergeFrom(const CMsgDOTAFantasyTeamTradeCancelResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyTeamTradeCancelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void CMsgDOTAFantasyTeamTradeCancelResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyTeamTradeCancelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyTeamTradeCancelResponse::CopyFrom(const CMsgDOTAFantasyTeamTradeCancelResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyTeamTradeCancelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyTeamTradeCancelResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyTeamTradeCancelResponse::Swap(CMsgDOTAFantasyTeamTradeCancelResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyTeamTradeCancelResponse::InternalSwap(CMsgDOTAFantasyTeamTradeCancelResponse* other) {
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyTeamTradeCancelResponse::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyTeamTradeCancelResponse

// optional .proto.dota.CMsgDOTAFantasyTeamTradeCancelResponse.EResult result = 1 [default = SUCCESS];
bool CMsgDOTAFantasyTeamTradeCancelResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyTeamTradeCancelResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyTeamTradeCancelResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyTeamTradeCancelResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
::proto::dota::CMsgDOTAFantasyTeamTradeCancelResponse_EResult CMsgDOTAFantasyTeamTradeCancelResponse::result() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyTeamTradeCancelResponse.result)
  return static_cast< ::proto::dota::CMsgDOTAFantasyTeamTradeCancelResponse_EResult >(result_);
}
void CMsgDOTAFantasyTeamTradeCancelResponse::set_result(::proto::dota::CMsgDOTAFantasyTeamTradeCancelResponse_EResult value) {
  assert(::proto::dota::CMsgDOTAFantasyTeamTradeCancelResponse_EResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyTeamTradeCancelResponse.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyTeamRosterRequest::kFantasyLeagueIdFieldNumber;
const int CMsgDOTAFantasyTeamRosterRequest::kTeamIndexFieldNumber;
const int CMsgDOTAFantasyTeamRosterRequest::kOwnerAccountIdFieldNumber;
const int CMsgDOTAFantasyTeamRosterRequest::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyTeamRosterRequest::CMsgDOTAFantasyTeamRosterRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyTeamRosterRequest)
}
CMsgDOTAFantasyTeamRosterRequest::CMsgDOTAFantasyTeamRosterRequest(const CMsgDOTAFantasyTeamRosterRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&fantasy_league_id_, &from.fantasy_league_id_,
    reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&fantasy_league_id_) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyTeamRosterRequest)
}

void CMsgDOTAFantasyTeamRosterRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&fantasy_league_id_, 0, reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&fantasy_league_id_) + sizeof(timestamp_));
}

CMsgDOTAFantasyTeamRosterRequest::~CMsgDOTAFantasyTeamRosterRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyTeamRosterRequest)
  SharedDtor();
}

void CMsgDOTAFantasyTeamRosterRequest::SharedDtor() {
}

void CMsgDOTAFantasyTeamRosterRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyTeamRosterRequest::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAFantasyTeamRosterRequest& CMsgDOTAFantasyTeamRosterRequest::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAFantasyTeamRosterRequest* CMsgDOTAFantasyTeamRosterRequest::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyTeamRosterRequest* n = new CMsgDOTAFantasyTeamRosterRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyTeamRosterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyTeamRosterRequest)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&fantasy_league_id_, 0, reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&fantasy_league_id_) + sizeof(timestamp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAFantasyTeamRosterRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyTeamRosterRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_fantasy_league_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team_index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_team_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 owner_account_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_owner_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &owner_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 timestamp = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyTeamRosterRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyTeamRosterRequest)
  return false;
#undef DO_
}

void CMsgDOTAFantasyTeamRosterRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyTeamRosterRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fantasy_league_id(), output);
  }

  // optional uint32 team_index = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->team_index(), output);
  }

  // optional uint32 owner_account_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->owner_account_id(), output);
  }

  // optional uint32 timestamp = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyTeamRosterRequest)
}

::google::protobuf::uint8* CMsgDOTAFantasyTeamRosterRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyTeamRosterRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fantasy_league_id(), target);
  }

  // optional uint32 team_index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->team_index(), target);
  }

  // optional uint32 owner_account_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->owner_account_id(), target);
  }

  // optional uint32 timestamp = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyTeamRosterRequest)
  return target;
}

size_t CMsgDOTAFantasyTeamRosterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyTeamRosterRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional uint32 fantasy_league_id = 1;
    if (has_fantasy_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_league_id());
    }

    // optional uint32 team_index = 2;
    if (has_team_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_index());
    }

    // optional uint32 owner_account_id = 3;
    if (has_owner_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->owner_account_id());
    }

    // optional uint32 timestamp = 4;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyTeamRosterRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyTeamRosterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyTeamRosterRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyTeamRosterRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyTeamRosterRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyTeamRosterRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyTeamRosterRequest::MergeFrom(const CMsgDOTAFantasyTeamRosterRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyTeamRosterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      fantasy_league_id_ = from.fantasy_league_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      team_index_ = from.team_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      owner_account_id_ = from.owner_account_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      timestamp_ = from.timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyTeamRosterRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyTeamRosterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyTeamRosterRequest::CopyFrom(const CMsgDOTAFantasyTeamRosterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyTeamRosterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyTeamRosterRequest::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyTeamRosterRequest::Swap(CMsgDOTAFantasyTeamRosterRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyTeamRosterRequest::InternalSwap(CMsgDOTAFantasyTeamRosterRequest* other) {
  std::swap(fantasy_league_id_, other->fantasy_league_id_);
  std::swap(team_index_, other->team_index_);
  std::swap(owner_account_id_, other->owner_account_id_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyTeamRosterRequest::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyTeamRosterRequest

// optional uint32 fantasy_league_id = 1;
bool CMsgDOTAFantasyTeamRosterRequest::has_fantasy_league_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyTeamRosterRequest::set_has_fantasy_league_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyTeamRosterRequest::clear_has_fantasy_league_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyTeamRosterRequest::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  clear_has_fantasy_league_id();
}
::google::protobuf::uint32 CMsgDOTAFantasyTeamRosterRequest::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyTeamRosterRequest.fantasy_league_id)
  return fantasy_league_id_;
}
void CMsgDOTAFantasyTeamRosterRequest::set_fantasy_league_id(::google::protobuf::uint32 value) {
  set_has_fantasy_league_id();
  fantasy_league_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyTeamRosterRequest.fantasy_league_id)
}

// optional uint32 team_index = 2;
bool CMsgDOTAFantasyTeamRosterRequest::has_team_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAFantasyTeamRosterRequest::set_has_team_index() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAFantasyTeamRosterRequest::clear_has_team_index() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAFantasyTeamRosterRequest::clear_team_index() {
  team_index_ = 0u;
  clear_has_team_index();
}
::google::protobuf::uint32 CMsgDOTAFantasyTeamRosterRequest::team_index() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyTeamRosterRequest.team_index)
  return team_index_;
}
void CMsgDOTAFantasyTeamRosterRequest::set_team_index(::google::protobuf::uint32 value) {
  set_has_team_index();
  team_index_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyTeamRosterRequest.team_index)
}

// optional uint32 owner_account_id = 3;
bool CMsgDOTAFantasyTeamRosterRequest::has_owner_account_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAFantasyTeamRosterRequest::set_has_owner_account_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAFantasyTeamRosterRequest::clear_has_owner_account_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAFantasyTeamRosterRequest::clear_owner_account_id() {
  owner_account_id_ = 0u;
  clear_has_owner_account_id();
}
::google::protobuf::uint32 CMsgDOTAFantasyTeamRosterRequest::owner_account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyTeamRosterRequest.owner_account_id)
  return owner_account_id_;
}
void CMsgDOTAFantasyTeamRosterRequest::set_owner_account_id(::google::protobuf::uint32 value) {
  set_has_owner_account_id();
  owner_account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyTeamRosterRequest.owner_account_id)
}

// optional uint32 timestamp = 4;
bool CMsgDOTAFantasyTeamRosterRequest::has_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTAFantasyTeamRosterRequest::set_has_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTAFantasyTeamRosterRequest::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTAFantasyTeamRosterRequest::clear_timestamp() {
  timestamp_ = 0u;
  clear_has_timestamp();
}
::google::protobuf::uint32 CMsgDOTAFantasyTeamRosterRequest::timestamp() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyTeamRosterRequest.timestamp)
  return timestamp_;
}
void CMsgDOTAFantasyTeamRosterRequest::set_timestamp(::google::protobuf::uint32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyTeamRosterRequest.timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyTeamRosterResponse::kResultFieldNumber;
const int CMsgDOTAFantasyTeamRosterResponse::kPlayerAccountIdsFieldNumber;
const int CMsgDOTAFantasyTeamRosterResponse::kPlayerLockedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyTeamRosterResponse::CMsgDOTAFantasyTeamRosterResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyTeamRosterResponse)
}
CMsgDOTAFantasyTeamRosterResponse::CMsgDOTAFantasyTeamRosterResponse(const CMsgDOTAFantasyTeamRosterResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      player_account_ids_(from.player_account_ids_),
      player_locked_(from.player_locked_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyTeamRosterResponse)
}

void CMsgDOTAFantasyTeamRosterResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
}

CMsgDOTAFantasyTeamRosterResponse::~CMsgDOTAFantasyTeamRosterResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyTeamRosterResponse)
  SharedDtor();
}

void CMsgDOTAFantasyTeamRosterResponse::SharedDtor() {
}

void CMsgDOTAFantasyTeamRosterResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyTeamRosterResponse::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAFantasyTeamRosterResponse& CMsgDOTAFantasyTeamRosterResponse::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAFantasyTeamRosterResponse* CMsgDOTAFantasyTeamRosterResponse::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyTeamRosterResponse* n = new CMsgDOTAFantasyTeamRosterResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyTeamRosterResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyTeamRosterResponse)
  player_account_ids_.Clear();
  player_locked_.Clear();
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAFantasyTeamRosterResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyTeamRosterResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgDOTAFantasyTeamRosterResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgDOTAFantasyTeamRosterResponse_EResult_IsValid(value)) {
            set_result(static_cast< ::proto::dota::CMsgDOTAFantasyTeamRosterResponse_EResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 player_account_ids = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_player_account_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_player_account_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bool player_locked = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 24u, input, this->mutable_player_locked())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(26u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_player_locked())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyTeamRosterResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyTeamRosterResponse)
  return false;
#undef DO_
}

void CMsgDOTAFantasyTeamRosterResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyTeamRosterResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAFantasyTeamRosterResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // repeated uint32 player_account_ids = 2;
  for (int i = 0, n = this->player_account_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->player_account_ids(i), output);
  }

  // repeated bool player_locked = 3;
  for (int i = 0, n = this->player_locked_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      3, this->player_locked(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyTeamRosterResponse)
}

::google::protobuf::uint8* CMsgDOTAFantasyTeamRosterResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyTeamRosterResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAFantasyTeamRosterResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // repeated uint32 player_account_ids = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(2, this->player_account_ids_, target);

  // repeated bool player_locked = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteBoolToArray(3, this->player_locked_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyTeamRosterResponse)
  return target;
}

size_t CMsgDOTAFantasyTeamRosterResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyTeamRosterResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 player_account_ids = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->player_account_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->player_account_ids_size());
    total_size += data_size;
  }

  // repeated bool player_locked = 3;
  {
    unsigned int count = this->player_locked_size();
    size_t data_size = 1UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->player_locked_size());
    total_size += data_size;
  }

  // optional .proto.dota.CMsgDOTAFantasyTeamRosterResponse.EResult result = 1 [default = SUCCESS];
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyTeamRosterResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyTeamRosterResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyTeamRosterResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyTeamRosterResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyTeamRosterResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyTeamRosterResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyTeamRosterResponse::MergeFrom(const CMsgDOTAFantasyTeamRosterResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyTeamRosterResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_account_ids_.MergeFrom(from.player_account_ids_);
  player_locked_.MergeFrom(from.player_locked_);
  if (from.has_result()) {
    set_result(from.result());
  }
}

void CMsgDOTAFantasyTeamRosterResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyTeamRosterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyTeamRosterResponse::CopyFrom(const CMsgDOTAFantasyTeamRosterResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyTeamRosterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyTeamRosterResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyTeamRosterResponse::Swap(CMsgDOTAFantasyTeamRosterResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyTeamRosterResponse::InternalSwap(CMsgDOTAFantasyTeamRosterResponse* other) {
  player_account_ids_.InternalSwap(&other->player_account_ids_);
  player_locked_.InternalSwap(&other->player_locked_);
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyTeamRosterResponse::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyTeamRosterResponse

// optional .proto.dota.CMsgDOTAFantasyTeamRosterResponse.EResult result = 1 [default = SUCCESS];
bool CMsgDOTAFantasyTeamRosterResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyTeamRosterResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyTeamRosterResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyTeamRosterResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
::proto::dota::CMsgDOTAFantasyTeamRosterResponse_EResult CMsgDOTAFantasyTeamRosterResponse::result() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyTeamRosterResponse.result)
  return static_cast< ::proto::dota::CMsgDOTAFantasyTeamRosterResponse_EResult >(result_);
}
void CMsgDOTAFantasyTeamRosterResponse::set_result(::proto::dota::CMsgDOTAFantasyTeamRosterResponse_EResult value) {
  assert(::proto::dota::CMsgDOTAFantasyTeamRosterResponse_EResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyTeamRosterResponse.result)
}

// repeated uint32 player_account_ids = 2;
int CMsgDOTAFantasyTeamRosterResponse::player_account_ids_size() const {
  return player_account_ids_.size();
}
void CMsgDOTAFantasyTeamRosterResponse::clear_player_account_ids() {
  player_account_ids_.Clear();
}
::google::protobuf::uint32 CMsgDOTAFantasyTeamRosterResponse::player_account_ids(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyTeamRosterResponse.player_account_ids)
  return player_account_ids_.Get(index);
}
void CMsgDOTAFantasyTeamRosterResponse::set_player_account_ids(int index, ::google::protobuf::uint32 value) {
  player_account_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyTeamRosterResponse.player_account_ids)
}
void CMsgDOTAFantasyTeamRosterResponse::add_player_account_ids(::google::protobuf::uint32 value) {
  player_account_ids_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTAFantasyTeamRosterResponse.player_account_ids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgDOTAFantasyTeamRosterResponse::player_account_ids() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTAFantasyTeamRosterResponse.player_account_ids)
  return player_account_ids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgDOTAFantasyTeamRosterResponse::mutable_player_account_ids() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTAFantasyTeamRosterResponse.player_account_ids)
  return &player_account_ids_;
}

// repeated bool player_locked = 3;
int CMsgDOTAFantasyTeamRosterResponse::player_locked_size() const {
  return player_locked_.size();
}
void CMsgDOTAFantasyTeamRosterResponse::clear_player_locked() {
  player_locked_.Clear();
}
bool CMsgDOTAFantasyTeamRosterResponse::player_locked(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyTeamRosterResponse.player_locked)
  return player_locked_.Get(index);
}
void CMsgDOTAFantasyTeamRosterResponse::set_player_locked(int index, bool value) {
  player_locked_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyTeamRosterResponse.player_locked)
}
void CMsgDOTAFantasyTeamRosterResponse::add_player_locked(bool value) {
  player_locked_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTAFantasyTeamRosterResponse.player_locked)
}
const ::google::protobuf::RepeatedField< bool >&
CMsgDOTAFantasyTeamRosterResponse::player_locked() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTAFantasyTeamRosterResponse.player_locked)
  return player_locked_;
}
::google::protobuf::RepeatedField< bool >*
CMsgDOTAFantasyTeamRosterResponse::mutable_player_locked() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTAFantasyTeamRosterResponse.player_locked)
  return &player_locked_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyPlayerHisoricalStatsRequest::kFantasyLeagueIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyPlayerHisoricalStatsRequest::CMsgDOTAFantasyPlayerHisoricalStatsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsRequest)
}
CMsgDOTAFantasyPlayerHisoricalStatsRequest::CMsgDOTAFantasyPlayerHisoricalStatsRequest(const CMsgDOTAFantasyPlayerHisoricalStatsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fantasy_league_id_ = from.fantasy_league_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsRequest)
}

void CMsgDOTAFantasyPlayerHisoricalStatsRequest::SharedCtor() {
  _cached_size_ = 0;
  fantasy_league_id_ = 0u;
}

CMsgDOTAFantasyPlayerHisoricalStatsRequest::~CMsgDOTAFantasyPlayerHisoricalStatsRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsRequest)
  SharedDtor();
}

void CMsgDOTAFantasyPlayerHisoricalStatsRequest::SharedDtor() {
}

void CMsgDOTAFantasyPlayerHisoricalStatsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyPlayerHisoricalStatsRequest::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAFantasyPlayerHisoricalStatsRequest& CMsgDOTAFantasyPlayerHisoricalStatsRequest::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAFantasyPlayerHisoricalStatsRequest* CMsgDOTAFantasyPlayerHisoricalStatsRequest::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyPlayerHisoricalStatsRequest* n = new CMsgDOTAFantasyPlayerHisoricalStatsRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyPlayerHisoricalStatsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsRequest)
  fantasy_league_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAFantasyPlayerHisoricalStatsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_fantasy_league_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsRequest)
  return false;
#undef DO_
}

void CMsgDOTAFantasyPlayerHisoricalStatsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fantasy_league_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsRequest)
}

::google::protobuf::uint8* CMsgDOTAFantasyPlayerHisoricalStatsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fantasy_league_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsRequest)
  return target;
}

size_t CMsgDOTAFantasyPlayerHisoricalStatsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 fantasy_league_id = 1;
  if (has_fantasy_league_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->fantasy_league_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyPlayerHisoricalStatsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyPlayerHisoricalStatsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyPlayerHisoricalStatsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyPlayerHisoricalStatsRequest::MergeFrom(const CMsgDOTAFantasyPlayerHisoricalStatsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_fantasy_league_id()) {
    set_fantasy_league_id(from.fantasy_league_id());
  }
}

void CMsgDOTAFantasyPlayerHisoricalStatsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyPlayerHisoricalStatsRequest::CopyFrom(const CMsgDOTAFantasyPlayerHisoricalStatsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyPlayerHisoricalStatsRequest::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyPlayerHisoricalStatsRequest::Swap(CMsgDOTAFantasyPlayerHisoricalStatsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyPlayerHisoricalStatsRequest::InternalSwap(CMsgDOTAFantasyPlayerHisoricalStatsRequest* other) {
  std::swap(fantasy_league_id_, other->fantasy_league_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyPlayerHisoricalStatsRequest::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyPlayerHisoricalStatsRequest

// optional uint32 fantasy_league_id = 1;
bool CMsgDOTAFantasyPlayerHisoricalStatsRequest::has_fantasy_league_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyPlayerHisoricalStatsRequest::set_has_fantasy_league_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyPlayerHisoricalStatsRequest::clear_has_fantasy_league_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyPlayerHisoricalStatsRequest::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  clear_has_fantasy_league_id();
}
::google::protobuf::uint32 CMsgDOTAFantasyPlayerHisoricalStatsRequest::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsRequest.fantasy_league_id)
  return fantasy_league_id_;
}
void CMsgDOTAFantasyPlayerHisoricalStatsRequest::set_fantasy_league_id(::google::protobuf::uint32 value) {
  set_has_fantasy_league_id();
  fantasy_league_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsRequest.fantasy_league_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::kMatchesFieldNumber;
const int CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::kLevelsFieldNumber;
const int CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::kKillsFieldNumber;
const int CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::kDeathsFieldNumber;
const int CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::kAssistsFieldNumber;
const int CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::kLastHitsFieldNumber;
const int CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::kDeniesFieldNumber;
const int CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::kGpmFieldNumber;
const int CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::kXppmFieldNumber;
const int CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::kStunsFieldNumber;
const int CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::kHealingFieldNumber;
const int CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::kTowerKillsFieldNumber;
const int CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::kRoshanKillsFieldNumber;
const int CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::kScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator)
}
CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator(const CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&matches_, &from.matches_,
    reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&matches_) + sizeof(score_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator)
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&matches_, 0, reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&matches_) + sizeof(score_));
}

CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::~CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator)
  SharedDtor();
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::SharedDtor() {
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator& CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator* CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator* n = new CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&matches_, 0, reinterpret_cast<char*>(&gpm_) -
      reinterpret_cast<char*>(&matches_) + sizeof(gpm_));
  }
  if (_has_bits_[8 / 32] & 16128u) {
    ::memset(&xppm_, 0, reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&xppm_) + sizeof(score_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 matches = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_matches();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matches_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float levels = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_levels();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &levels_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float kills = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_kills();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &kills_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float deaths = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_deaths();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &deaths_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float assists = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {
          set_has_assists();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &assists_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float last_hits = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u)) {
          set_has_last_hits();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &last_hits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float denies = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u)) {
          set_has_denies();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &denies_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float gpm = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u)) {
          set_has_gpm();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gpm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float xppm = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u)) {
          set_has_xppm();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &xppm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float stuns = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u)) {
          set_has_stuns();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &stuns_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float healing = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u)) {
          set_has_healing();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &healing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float tower_kills = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u)) {
          set_has_tower_kills();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tower_kills_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float roshan_kills = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u)) {
          set_has_roshan_kills();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &roshan_kills_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float score = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u)) {
          set_has_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator)
  return false;
#undef DO_
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 matches = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->matches(), output);
  }

  // optional float levels = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->levels(), output);
  }

  // optional float kills = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->kills(), output);
  }

  // optional float deaths = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->deaths(), output);
  }

  // optional float assists = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->assists(), output);
  }

  // optional float last_hits = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->last_hits(), output);
  }

  // optional float denies = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->denies(), output);
  }

  // optional float gpm = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->gpm(), output);
  }

  // optional float xppm = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->xppm(), output);
  }

  // optional float stuns = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->stuns(), output);
  }

  // optional float healing = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->healing(), output);
  }

  // optional float tower_kills = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->tower_kills(), output);
  }

  // optional float roshan_kills = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->roshan_kills(), output);
  }

  // optional float score = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->score(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator)
}

::google::protobuf::uint8* CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 matches = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->matches(), target);
  }

  // optional float levels = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->levels(), target);
  }

  // optional float kills = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->kills(), target);
  }

  // optional float deaths = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->deaths(), target);
  }

  // optional float assists = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->assists(), target);
  }

  // optional float last_hits = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->last_hits(), target);
  }

  // optional float denies = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->denies(), target);
  }

  // optional float gpm = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->gpm(), target);
  }

  // optional float xppm = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->xppm(), target);
  }

  // optional float stuns = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->stuns(), target);
  }

  // optional float healing = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->healing(), target);
  }

  // optional float tower_kills = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->tower_kills(), target);
  }

  // optional float roshan_kills = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->roshan_kills(), target);
  }

  // optional float score = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->score(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator)
  return target;
}

size_t CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 matches = 1;
    if (has_matches()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matches());
    }

    // optional float levels = 2;
    if (has_levels()) {
      total_size += 1 + 4;
    }

    // optional float kills = 3;
    if (has_kills()) {
      total_size += 1 + 4;
    }

    // optional float deaths = 4;
    if (has_deaths()) {
      total_size += 1 + 4;
    }

    // optional float assists = 5;
    if (has_assists()) {
      total_size += 1 + 4;
    }

    // optional float last_hits = 6;
    if (has_last_hits()) {
      total_size += 1 + 4;
    }

    // optional float denies = 7;
    if (has_denies()) {
      total_size += 1 + 4;
    }

    // optional float gpm = 8;
    if (has_gpm()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & 16128u) {
    // optional float xppm = 9;
    if (has_xppm()) {
      total_size += 1 + 4;
    }

    // optional float stuns = 10;
    if (has_stuns()) {
      total_size += 1 + 4;
    }

    // optional float healing = 11;
    if (has_healing()) {
      total_size += 1 + 4;
    }

    // optional float tower_kills = 12;
    if (has_tower_kills()) {
      total_size += 1 + 4;
    }

    // optional float roshan_kills = 13;
    if (has_roshan_kills()) {
      total_size += 1 + 4;
    }

    // optional float score = 14;
    if (has_score()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::MergeFrom(const CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      matches_ = from.matches_;
    }
    if (cached_has_bits & 0x00000002u) {
      levels_ = from.levels_;
    }
    if (cached_has_bits & 0x00000004u) {
      kills_ = from.kills_;
    }
    if (cached_has_bits & 0x00000008u) {
      deaths_ = from.deaths_;
    }
    if (cached_has_bits & 0x00000010u) {
      assists_ = from.assists_;
    }
    if (cached_has_bits & 0x00000020u) {
      last_hits_ = from.last_hits_;
    }
    if (cached_has_bits & 0x00000040u) {
      denies_ = from.denies_;
    }
    if (cached_has_bits & 0x00000080u) {
      gpm_ = from.gpm_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16128u) {
    if (cached_has_bits & 0x00000100u) {
      xppm_ = from.xppm_;
    }
    if (cached_has_bits & 0x00000200u) {
      stuns_ = from.stuns_;
    }
    if (cached_has_bits & 0x00000400u) {
      healing_ = from.healing_;
    }
    if (cached_has_bits & 0x00000800u) {
      tower_kills_ = from.tower_kills_;
    }
    if (cached_has_bits & 0x00001000u) {
      roshan_kills_ = from.roshan_kills_;
    }
    if (cached_has_bits & 0x00002000u) {
      score_ = from.score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::CopyFrom(const CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::Swap(CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::InternalSwap(CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator* other) {
  std::swap(matches_, other->matches_);
  std::swap(levels_, other->levels_);
  std::swap(kills_, other->kills_);
  std::swap(deaths_, other->deaths_);
  std::swap(assists_, other->assists_);
  std::swap(last_hits_, other->last_hits_);
  std::swap(denies_, other->denies_);
  std::swap(gpm_, other->gpm_);
  std::swap(xppm_, other->xppm_);
  std::swap(stuns_, other->stuns_);
  std::swap(healing_, other->healing_);
  std::swap(tower_kills_, other->tower_kills_);
  std::swap(roshan_kills_, other->roshan_kills_);
  std::swap(score_, other->score_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator

// optional uint32 matches = 1;
bool CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::has_matches() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::set_has_matches() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::clear_has_matches() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::clear_matches() {
  matches_ = 0u;
  clear_has_matches();
}
::google::protobuf::uint32 CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::matches() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator.matches)
  return matches_;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::set_matches(::google::protobuf::uint32 value) {
  set_has_matches();
  matches_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator.matches)
}

// optional float levels = 2;
bool CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::has_levels() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::set_has_levels() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::clear_has_levels() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::clear_levels() {
  levels_ = 0;
  clear_has_levels();
}
float CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::levels() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator.levels)
  return levels_;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::set_levels(float value) {
  set_has_levels();
  levels_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator.levels)
}

// optional float kills = 3;
bool CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::has_kills() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::set_has_kills() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::clear_has_kills() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::clear_kills() {
  kills_ = 0;
  clear_has_kills();
}
float CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::kills() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator.kills)
  return kills_;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::set_kills(float value) {
  set_has_kills();
  kills_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator.kills)
}

// optional float deaths = 4;
bool CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::has_deaths() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::set_has_deaths() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::clear_has_deaths() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::clear_deaths() {
  deaths_ = 0;
  clear_has_deaths();
}
float CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::deaths() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator.deaths)
  return deaths_;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::set_deaths(float value) {
  set_has_deaths();
  deaths_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator.deaths)
}

// optional float assists = 5;
bool CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::has_assists() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::set_has_assists() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::clear_has_assists() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::clear_assists() {
  assists_ = 0;
  clear_has_assists();
}
float CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::assists() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator.assists)
  return assists_;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::set_assists(float value) {
  set_has_assists();
  assists_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator.assists)
}

// optional float last_hits = 6;
bool CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::has_last_hits() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::set_has_last_hits() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::clear_has_last_hits() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::clear_last_hits() {
  last_hits_ = 0;
  clear_has_last_hits();
}
float CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::last_hits() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator.last_hits)
  return last_hits_;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::set_last_hits(float value) {
  set_has_last_hits();
  last_hits_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator.last_hits)
}

// optional float denies = 7;
bool CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::has_denies() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::set_has_denies() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::clear_has_denies() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::clear_denies() {
  denies_ = 0;
  clear_has_denies();
}
float CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::denies() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator.denies)
  return denies_;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::set_denies(float value) {
  set_has_denies();
  denies_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator.denies)
}

// optional float gpm = 8;
bool CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::has_gpm() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::set_has_gpm() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::clear_has_gpm() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::clear_gpm() {
  gpm_ = 0;
  clear_has_gpm();
}
float CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::gpm() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator.gpm)
  return gpm_;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::set_gpm(float value) {
  set_has_gpm();
  gpm_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator.gpm)
}

// optional float xppm = 9;
bool CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::has_xppm() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::set_has_xppm() {
  _has_bits_[0] |= 0x00000100u;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::clear_has_xppm() {
  _has_bits_[0] &= ~0x00000100u;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::clear_xppm() {
  xppm_ = 0;
  clear_has_xppm();
}
float CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::xppm() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator.xppm)
  return xppm_;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::set_xppm(float value) {
  set_has_xppm();
  xppm_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator.xppm)
}

// optional float stuns = 10;
bool CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::has_stuns() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::set_has_stuns() {
  _has_bits_[0] |= 0x00000200u;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::clear_has_stuns() {
  _has_bits_[0] &= ~0x00000200u;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::clear_stuns() {
  stuns_ = 0;
  clear_has_stuns();
}
float CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::stuns() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator.stuns)
  return stuns_;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::set_stuns(float value) {
  set_has_stuns();
  stuns_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator.stuns)
}

// optional float healing = 11;
bool CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::has_healing() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::set_has_healing() {
  _has_bits_[0] |= 0x00000400u;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::clear_has_healing() {
  _has_bits_[0] &= ~0x00000400u;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::clear_healing() {
  healing_ = 0;
  clear_has_healing();
}
float CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::healing() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator.healing)
  return healing_;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::set_healing(float value) {
  set_has_healing();
  healing_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator.healing)
}

// optional float tower_kills = 12;
bool CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::has_tower_kills() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::set_has_tower_kills() {
  _has_bits_[0] |= 0x00000800u;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::clear_has_tower_kills() {
  _has_bits_[0] &= ~0x00000800u;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::clear_tower_kills() {
  tower_kills_ = 0;
  clear_has_tower_kills();
}
float CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::tower_kills() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator.tower_kills)
  return tower_kills_;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::set_tower_kills(float value) {
  set_has_tower_kills();
  tower_kills_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator.tower_kills)
}

// optional float roshan_kills = 13;
bool CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::has_roshan_kills() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::set_has_roshan_kills() {
  _has_bits_[0] |= 0x00001000u;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::clear_has_roshan_kills() {
  _has_bits_[0] &= ~0x00001000u;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::clear_roshan_kills() {
  roshan_kills_ = 0;
  clear_has_roshan_kills();
}
float CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::roshan_kills() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator.roshan_kills)
  return roshan_kills_;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::set_roshan_kills(float value) {
  set_has_roshan_kills();
  roshan_kills_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator.roshan_kills)
}

// optional float score = 14;
bool CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::has_score() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::set_has_score() {
  _has_bits_[0] |= 0x00002000u;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::clear_has_score() {
  _has_bits_[0] &= ~0x00002000u;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::clear_score() {
  score_ = 0;
  clear_has_score();
}
float CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::score() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator.score)
  return score_;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::set_score(float value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator.score)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::kAccountIdFieldNumber;
const int CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::kWeeksFieldNumber;
const int CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::kStatsPremiumFieldNumber;
const int CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::kStatsProfessionalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats)
}
CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats(const CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_stats_premium()) {
    stats_premium_ = new ::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator(*from.stats_premium_);
  } else {
    stats_premium_ = NULL;
  }
  if (from.has_stats_professional()) {
    stats_professional_ = new ::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator(*from.stats_professional_);
  } else {
    stats_professional_ = NULL;
  }
  ::memcpy(&account_id_, &from.account_id_,
    reinterpret_cast<char*>(&weeks_) -
    reinterpret_cast<char*>(&account_id_) + sizeof(weeks_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats)
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&stats_premium_, 0, reinterpret_cast<char*>(&weeks_) -
    reinterpret_cast<char*>(&stats_premium_) + sizeof(weeks_));
}

CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::~CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats)
  SharedDtor();
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::SharedDtor() {
  if (this != internal_default_instance()) {
    delete stats_premium_;
  }
  if (this != internal_default_instance()) {
    delete stats_professional_;
  }
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats& CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats* CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats* n = new CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_stats_premium()) {
      GOOGLE_DCHECK(stats_premium_ != NULL);
      stats_premium_->::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::Clear();
    }
    if (has_stats_professional()) {
      GOOGLE_DCHECK(stats_professional_ != NULL);
      stats_professional_->::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&account_id_, 0, reinterpret_cast<char*>(&weeks_) -
      reinterpret_cast<char*>(&account_id_) + sizeof(weeks_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 weeks = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_weeks();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weeks_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator stats_premium = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stats_premium()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator stats_professional = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stats_professional()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats)
  return false;
#undef DO_
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 weeks = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->weeks(), output);
  }

  // optional .proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator stats_premium = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->stats_premium_, output);
  }

  // optional .proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator stats_professional = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->stats_professional_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats)
}

::google::protobuf::uint8* CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 weeks = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->weeks(), target);
  }

  // optional .proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator stats_premium = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->stats_premium_, deterministic, target);
  }

  // optional .proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator stats_professional = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->stats_professional_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats)
  return target;
}

size_t CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional .proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator stats_premium = 4;
    if (has_stats_premium()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->stats_premium_);
    }

    // optional .proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator stats_professional = 5;
    if (has_stats_professional()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->stats_professional_);
    }

    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 weeks = 2;
    if (has_weeks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weeks());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::MergeFrom(const CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_stats_premium()->::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::MergeFrom(from.stats_premium());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_stats_professional()->::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::MergeFrom(from.stats_professional());
    }
    if (cached_has_bits & 0x00000004u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      weeks_ = from.weeks_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::CopyFrom(const CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::Swap(CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::InternalSwap(CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats* other) {
  std::swap(stats_premium_, other->stats_premium_);
  std::swap(stats_professional_, other->stats_professional_);
  std::swap(account_id_, other->account_id_);
  std::swap(weeks_, other->weeks_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats

// optional uint32 account_id = 1;
bool CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::has_account_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::set_has_account_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
::google::protobuf::uint32 CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats.account_id)
  return account_id_;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats.account_id)
}

// optional uint32 weeks = 2;
bool CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::has_weeks() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::set_has_weeks() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::clear_has_weeks() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::clear_weeks() {
  weeks_ = 0u;
  clear_has_weeks();
}
::google::protobuf::uint32 CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::weeks() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats.weeks)
  return weeks_;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::set_weeks(::google::protobuf::uint32 value) {
  set_has_weeks();
  weeks_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats.weeks)
}

// optional .proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator stats_premium = 4;
bool CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::has_stats_premium() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::set_has_stats_premium() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::clear_has_stats_premium() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::clear_stats_premium() {
  if (stats_premium_ != NULL) stats_premium_->::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::Clear();
  clear_has_stats_premium();
}
const ::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator& CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::stats_premium() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats.stats_premium)
  return stats_premium_ != NULL ? *stats_premium_
                         : *::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::internal_default_instance();
}
::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator* CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::mutable_stats_premium() {
  set_has_stats_premium();
  if (stats_premium_ == NULL) {
    stats_premium_ = new ::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats.stats_premium)
  return stats_premium_;
}
::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator* CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::release_stats_premium() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats.stats_premium)
  clear_has_stats_premium();
  ::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator* temp = stats_premium_;
  stats_premium_ = NULL;
  return temp;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::set_allocated_stats_premium(::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator* stats_premium) {
  delete stats_premium_;
  stats_premium_ = stats_premium;
  if (stats_premium) {
    set_has_stats_premium();
  } else {
    clear_has_stats_premium();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats.stats_premium)
}

// optional .proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator stats_professional = 5;
bool CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::has_stats_professional() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::set_has_stats_professional() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::clear_has_stats_professional() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::clear_stats_professional() {
  if (stats_professional_ != NULL) stats_professional_->::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::Clear();
  clear_has_stats_professional();
}
const ::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator& CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::stats_professional() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats.stats_professional)
  return stats_professional_ != NULL ? *stats_professional_
                         : *::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::internal_default_instance();
}
::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator* CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::mutable_stats_professional() {
  set_has_stats_professional();
  if (stats_professional_ == NULL) {
    stats_professional_ = new ::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats.stats_professional)
  return stats_professional_;
}
::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator* CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::release_stats_professional() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats.stats_professional)
  clear_has_stats_professional();
  ::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator* temp = stats_professional_;
  stats_professional_ = NULL;
  return temp;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::set_allocated_stats_professional(::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator* stats_professional) {
  delete stats_professional_;
  stats_professional_ = stats_professional;
  if (stats_professional) {
    set_has_stats_professional();
  } else {
    clear_has_stats_professional();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats.stats_professional)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyPlayerHisoricalStatsResponse::kResultFieldNumber;
const int CMsgDOTAFantasyPlayerHisoricalStatsResponse::kStatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyPlayerHisoricalStatsResponse::CMsgDOTAFantasyPlayerHisoricalStatsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse)
}
CMsgDOTAFantasyPlayerHisoricalStatsResponse::CMsgDOTAFantasyPlayerHisoricalStatsResponse(const CMsgDOTAFantasyPlayerHisoricalStatsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      stats_(from.stats_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse)
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
}

CMsgDOTAFantasyPlayerHisoricalStatsResponse::~CMsgDOTAFantasyPlayerHisoricalStatsResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse)
  SharedDtor();
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse::SharedDtor() {
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyPlayerHisoricalStatsResponse::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAFantasyPlayerHisoricalStatsResponse& CMsgDOTAFantasyPlayerHisoricalStatsResponse::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAFantasyPlayerHisoricalStatsResponse* CMsgDOTAFantasyPlayerHisoricalStatsResponse::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyPlayerHisoricalStatsResponse* n = new CMsgDOTAFantasyPlayerHisoricalStatsResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse)
  stats_.Clear();
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAFantasyPlayerHisoricalStatsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult_IsValid(value)) {
            set_result(static_cast< ::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats stats = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse)
  return false;
#undef DO_
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // repeated .proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats stats = 2;
  for (unsigned int i = 0, n = this->stats_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stats(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse)
}

::google::protobuf::uint8* CMsgDOTAFantasyPlayerHisoricalStatsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // repeated .proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats stats = 2;
  for (unsigned int i = 0, n = this->stats_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->stats(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse)
  return target;
}

size_t CMsgDOTAFantasyPlayerHisoricalStatsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats stats = 2;
  {
    unsigned int count = this->stats_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stats(i));
    }
  }

  // optional .proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.EResult result = 1 [default = SUCCESS];
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyPlayerHisoricalStatsResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyPlayerHisoricalStatsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse::MergeFrom(const CMsgDOTAFantasyPlayerHisoricalStatsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stats_.MergeFrom(from.stats_);
  if (from.has_result()) {
    set_result(from.result());
  }
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse::CopyFrom(const CMsgDOTAFantasyPlayerHisoricalStatsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyPlayerHisoricalStatsResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyPlayerHisoricalStatsResponse::Swap(CMsgDOTAFantasyPlayerHisoricalStatsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse::InternalSwap(CMsgDOTAFantasyPlayerHisoricalStatsResponse* other) {
  stats_.InternalSwap(&other->stats_);
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyPlayerHisoricalStatsResponse::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyPlayerHisoricalStatsResponse

// optional .proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.EResult result = 1 [default = SUCCESS];
bool CMsgDOTAFantasyPlayerHisoricalStatsResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult CMsgDOTAFantasyPlayerHisoricalStatsResponse::result() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.result)
  return static_cast< ::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult >(result_);
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse::set_result(::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult value) {
  assert(::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.result)
}

// repeated .proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats stats = 2;
int CMsgDOTAFantasyPlayerHisoricalStatsResponse::stats_size() const {
  return stats_.size();
}
void CMsgDOTAFantasyPlayerHisoricalStatsResponse::clear_stats() {
  stats_.Clear();
}
const ::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats& CMsgDOTAFantasyPlayerHisoricalStatsResponse::stats(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.stats)
  return stats_.Get(index);
}
::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats* CMsgDOTAFantasyPlayerHisoricalStatsResponse::mutable_stats(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.stats)
  return stats_.Mutable(index);
}
::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats* CMsgDOTAFantasyPlayerHisoricalStatsResponse::add_stats() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.stats)
  return stats_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats >*
CMsgDOTAFantasyPlayerHisoricalStatsResponse::mutable_stats() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.stats)
  return &stats_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats >&
CMsgDOTAFantasyPlayerHisoricalStatsResponse::stats() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTAFantasyPlayerHisoricalStatsResponse.stats)
  return stats_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyMessageAdd::kFantasyLeagueIdFieldNumber;
const int CMsgDOTAFantasyMessageAdd::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyMessageAdd::CMsgDOTAFantasyMessageAdd()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyMessageAdd)
}
CMsgDOTAFantasyMessageAdd::CMsgDOTAFantasyMessageAdd(const CMsgDOTAFantasyMessageAdd& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_message()) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  fantasy_league_id_ = from.fantasy_league_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyMessageAdd)
}

void CMsgDOTAFantasyMessageAdd::SharedCtor() {
  _cached_size_ = 0;
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fantasy_league_id_ = 0u;
}

CMsgDOTAFantasyMessageAdd::~CMsgDOTAFantasyMessageAdd() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyMessageAdd)
  SharedDtor();
}

void CMsgDOTAFantasyMessageAdd::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTAFantasyMessageAdd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyMessageAdd::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAFantasyMessageAdd& CMsgDOTAFantasyMessageAdd::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAFantasyMessageAdd* CMsgDOTAFantasyMessageAdd::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyMessageAdd* n = new CMsgDOTAFantasyMessageAdd;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyMessageAdd::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyMessageAdd)
  if (has_message()) {
    GOOGLE_DCHECK(!message_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*message_.UnsafeRawStringPointer())->clear();
  }
  fantasy_league_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAFantasyMessageAdd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyMessageAdd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_fantasy_league_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string message = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAFantasyMessageAdd.message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyMessageAdd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyMessageAdd)
  return false;
#undef DO_
}

void CMsgDOTAFantasyMessageAdd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyMessageAdd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fantasy_league_id(), output);
  }

  // optional string message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAFantasyMessageAdd.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyMessageAdd)
}

::google::protobuf::uint8* CMsgDOTAFantasyMessageAdd::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyMessageAdd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fantasy_league_id(), target);
  }

  // optional string message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAFantasyMessageAdd.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyMessageAdd)
  return target;
}

size_t CMsgDOTAFantasyMessageAdd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyMessageAdd)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional uint32 fantasy_league_id = 1;
    if (has_fantasy_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_league_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyMessageAdd::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyMessageAdd)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyMessageAdd* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyMessageAdd>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyMessageAdd)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyMessageAdd)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyMessageAdd::MergeFrom(const CMsgDOTAFantasyMessageAdd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyMessageAdd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_message();
      message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
    if (cached_has_bits & 0x00000002u) {
      fantasy_league_id_ = from.fantasy_league_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyMessageAdd::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyMessageAdd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyMessageAdd::CopyFrom(const CMsgDOTAFantasyMessageAdd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyMessageAdd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyMessageAdd::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyMessageAdd::Swap(CMsgDOTAFantasyMessageAdd* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyMessageAdd::InternalSwap(CMsgDOTAFantasyMessageAdd* other) {
  message_.Swap(&other->message_);
  std::swap(fantasy_league_id_, other->fantasy_league_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyMessageAdd::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyMessageAdd

// optional uint32 fantasy_league_id = 1;
bool CMsgDOTAFantasyMessageAdd::has_fantasy_league_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAFantasyMessageAdd::set_has_fantasy_league_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAFantasyMessageAdd::clear_has_fantasy_league_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAFantasyMessageAdd::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  clear_has_fantasy_league_id();
}
::google::protobuf::uint32 CMsgDOTAFantasyMessageAdd::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyMessageAdd.fantasy_league_id)
  return fantasy_league_id_;
}
void CMsgDOTAFantasyMessageAdd::set_fantasy_league_id(::google::protobuf::uint32 value) {
  set_has_fantasy_league_id();
  fantasy_league_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyMessageAdd.fantasy_league_id)
}

// optional string message = 2;
bool CMsgDOTAFantasyMessageAdd::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyMessageAdd::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyMessageAdd::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyMessageAdd::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
const ::std::string& CMsgDOTAFantasyMessageAdd::message() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyMessageAdd.message)
  return message_.GetNoArena();
}
void CMsgDOTAFantasyMessageAdd::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyMessageAdd.message)
}
#if LANG_CXX11
void CMsgDOTAFantasyMessageAdd::set_message(::std::string&& value) {
  set_has_message();
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAFantasyMessageAdd.message)
}
#endif
void CMsgDOTAFantasyMessageAdd::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAFantasyMessageAdd.message)
}
void CMsgDOTAFantasyMessageAdd::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAFantasyMessageAdd.message)
}
::std::string* CMsgDOTAFantasyMessageAdd::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAFantasyMessageAdd.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTAFantasyMessageAdd::release_message() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAFantasyMessageAdd.message)
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTAFantasyMessageAdd::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAFantasyMessageAdd.message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyMessagesRequest::kFantasyLeagueIdFieldNumber;
const int CMsgDOTAFantasyMessagesRequest::kStartMessageFieldNumber;
const int CMsgDOTAFantasyMessagesRequest::kEndMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyMessagesRequest::CMsgDOTAFantasyMessagesRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyMessagesRequest)
}
CMsgDOTAFantasyMessagesRequest::CMsgDOTAFantasyMessagesRequest(const CMsgDOTAFantasyMessagesRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&fantasy_league_id_, &from.fantasy_league_id_,
    reinterpret_cast<char*>(&end_message_) -
    reinterpret_cast<char*>(&fantasy_league_id_) + sizeof(end_message_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyMessagesRequest)
}

void CMsgDOTAFantasyMessagesRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&fantasy_league_id_, 0, reinterpret_cast<char*>(&end_message_) -
    reinterpret_cast<char*>(&fantasy_league_id_) + sizeof(end_message_));
}

CMsgDOTAFantasyMessagesRequest::~CMsgDOTAFantasyMessagesRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyMessagesRequest)
  SharedDtor();
}

void CMsgDOTAFantasyMessagesRequest::SharedDtor() {
}

void CMsgDOTAFantasyMessagesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyMessagesRequest::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAFantasyMessagesRequest& CMsgDOTAFantasyMessagesRequest::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAFantasyMessagesRequest* CMsgDOTAFantasyMessagesRequest::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyMessagesRequest* n = new CMsgDOTAFantasyMessagesRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyMessagesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyMessagesRequest)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&fantasy_league_id_, 0, reinterpret_cast<char*>(&end_message_) -
      reinterpret_cast<char*>(&fantasy_league_id_) + sizeof(end_message_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAFantasyMessagesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyMessagesRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_fantasy_league_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 start_message = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_start_message();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_message_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 end_message = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_end_message();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_message_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyMessagesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyMessagesRequest)
  return false;
#undef DO_
}

void CMsgDOTAFantasyMessagesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyMessagesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fantasy_league_id(), output);
  }

  // optional uint32 start_message = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->start_message(), output);
  }

  // optional uint32 end_message = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->end_message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyMessagesRequest)
}

::google::protobuf::uint8* CMsgDOTAFantasyMessagesRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyMessagesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fantasy_league_id(), target);
  }

  // optional uint32 start_message = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->start_message(), target);
  }

  // optional uint32 end_message = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->end_message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyMessagesRequest)
  return target;
}

size_t CMsgDOTAFantasyMessagesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyMessagesRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 fantasy_league_id = 1;
    if (has_fantasy_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_league_id());
    }

    // optional uint32 start_message = 2;
    if (has_start_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_message());
    }

    // optional uint32 end_message = 3;
    if (has_end_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->end_message());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyMessagesRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyMessagesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyMessagesRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyMessagesRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyMessagesRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyMessagesRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyMessagesRequest::MergeFrom(const CMsgDOTAFantasyMessagesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyMessagesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      fantasy_league_id_ = from.fantasy_league_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      start_message_ = from.start_message_;
    }
    if (cached_has_bits & 0x00000004u) {
      end_message_ = from.end_message_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyMessagesRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyMessagesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyMessagesRequest::CopyFrom(const CMsgDOTAFantasyMessagesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyMessagesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyMessagesRequest::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyMessagesRequest::Swap(CMsgDOTAFantasyMessagesRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyMessagesRequest::InternalSwap(CMsgDOTAFantasyMessagesRequest* other) {
  std::swap(fantasy_league_id_, other->fantasy_league_id_);
  std::swap(start_message_, other->start_message_);
  std::swap(end_message_, other->end_message_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyMessagesRequest::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyMessagesRequest

// optional uint32 fantasy_league_id = 1;
bool CMsgDOTAFantasyMessagesRequest::has_fantasy_league_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyMessagesRequest::set_has_fantasy_league_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyMessagesRequest::clear_has_fantasy_league_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyMessagesRequest::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  clear_has_fantasy_league_id();
}
::google::protobuf::uint32 CMsgDOTAFantasyMessagesRequest::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyMessagesRequest.fantasy_league_id)
  return fantasy_league_id_;
}
void CMsgDOTAFantasyMessagesRequest::set_fantasy_league_id(::google::protobuf::uint32 value) {
  set_has_fantasy_league_id();
  fantasy_league_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyMessagesRequest.fantasy_league_id)
}

// optional uint32 start_message = 2;
bool CMsgDOTAFantasyMessagesRequest::has_start_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAFantasyMessagesRequest::set_has_start_message() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAFantasyMessagesRequest::clear_has_start_message() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAFantasyMessagesRequest::clear_start_message() {
  start_message_ = 0u;
  clear_has_start_message();
}
::google::protobuf::uint32 CMsgDOTAFantasyMessagesRequest::start_message() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyMessagesRequest.start_message)
  return start_message_;
}
void CMsgDOTAFantasyMessagesRequest::set_start_message(::google::protobuf::uint32 value) {
  set_has_start_message();
  start_message_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyMessagesRequest.start_message)
}

// optional uint32 end_message = 3;
bool CMsgDOTAFantasyMessagesRequest::has_end_message() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAFantasyMessagesRequest::set_has_end_message() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAFantasyMessagesRequest::clear_has_end_message() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAFantasyMessagesRequest::clear_end_message() {
  end_message_ = 0u;
  clear_has_end_message();
}
::google::protobuf::uint32 CMsgDOTAFantasyMessagesRequest::end_message() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyMessagesRequest.end_message)
  return end_message_;
}
void CMsgDOTAFantasyMessagesRequest::set_end_message(::google::protobuf::uint32 value) {
  set_has_end_message();
  end_message_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyMessagesRequest.end_message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyMessagesResponse_Message::kMessageIdFieldNumber;
const int CMsgDOTAFantasyMessagesResponse_Message::kMessageFieldNumber;
const int CMsgDOTAFantasyMessagesResponse_Message::kAuthorAccountIdFieldNumber;
const int CMsgDOTAFantasyMessagesResponse_Message::kTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyMessagesResponse_Message::CMsgDOTAFantasyMessagesResponse_Message()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyMessagesResponse.Message)
}
CMsgDOTAFantasyMessagesResponse_Message::CMsgDOTAFantasyMessagesResponse_Message(const CMsgDOTAFantasyMessagesResponse_Message& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_message()) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  ::memcpy(&message_id_, &from.message_id_,
    reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&message_id_) + sizeof(time_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyMessagesResponse.Message)
}

void CMsgDOTAFantasyMessagesResponse_Message::SharedCtor() {
  _cached_size_ = 0;
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&message_id_, 0, reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&message_id_) + sizeof(time_));
}

CMsgDOTAFantasyMessagesResponse_Message::~CMsgDOTAFantasyMessagesResponse_Message() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyMessagesResponse.Message)
  SharedDtor();
}

void CMsgDOTAFantasyMessagesResponse_Message::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTAFantasyMessagesResponse_Message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyMessagesResponse_Message::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAFantasyMessagesResponse_Message& CMsgDOTAFantasyMessagesResponse_Message::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAFantasyMessagesResponse_Message* CMsgDOTAFantasyMessagesResponse_Message::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyMessagesResponse_Message* n = new CMsgDOTAFantasyMessagesResponse_Message;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyMessagesResponse_Message::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyMessagesResponse.Message)
  if (has_message()) {
    GOOGLE_DCHECK(!message_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*message_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&message_id_, 0, reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&message_id_) + sizeof(time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAFantasyMessagesResponse_Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyMessagesResponse.Message)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 message_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_message_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &message_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string message = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAFantasyMessagesResponse.Message.message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 author_account_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_author_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &author_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyMessagesResponse.Message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyMessagesResponse.Message)
  return false;
#undef DO_
}

void CMsgDOTAFantasyMessagesResponse_Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyMessagesResponse.Message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 message_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->message_id(), output);
  }

  // optional string message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAFantasyMessagesResponse.Message.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  // optional uint32 author_account_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->author_account_id(), output);
  }

  // optional uint32 time = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyMessagesResponse.Message)
}

::google::protobuf::uint8* CMsgDOTAFantasyMessagesResponse_Message::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyMessagesResponse.Message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 message_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->message_id(), target);
  }

  // optional string message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAFantasyMessagesResponse.Message.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  // optional uint32 author_account_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->author_account_id(), target);
  }

  // optional uint32 time = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyMessagesResponse.Message)
  return target;
}

size_t CMsgDOTAFantasyMessagesResponse_Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyMessagesResponse.Message)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional uint32 message_id = 1;
    if (has_message_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->message_id());
    }

    // optional uint32 author_account_id = 3;
    if (has_author_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->author_account_id());
    }

    // optional uint32 time = 4;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyMessagesResponse_Message::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyMessagesResponse.Message)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyMessagesResponse_Message* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyMessagesResponse_Message>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyMessagesResponse.Message)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyMessagesResponse.Message)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyMessagesResponse_Message::MergeFrom(const CMsgDOTAFantasyMessagesResponse_Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyMessagesResponse.Message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_message();
      message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
    if (cached_has_bits & 0x00000002u) {
      message_id_ = from.message_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      author_account_id_ = from.author_account_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      time_ = from.time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyMessagesResponse_Message::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyMessagesResponse.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyMessagesResponse_Message::CopyFrom(const CMsgDOTAFantasyMessagesResponse_Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyMessagesResponse.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyMessagesResponse_Message::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyMessagesResponse_Message::Swap(CMsgDOTAFantasyMessagesResponse_Message* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyMessagesResponse_Message::InternalSwap(CMsgDOTAFantasyMessagesResponse_Message* other) {
  message_.Swap(&other->message_);
  std::swap(message_id_, other->message_id_);
  std::swap(author_account_id_, other->author_account_id_);
  std::swap(time_, other->time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyMessagesResponse_Message::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyMessagesResponse_Message

// optional uint32 message_id = 1;
bool CMsgDOTAFantasyMessagesResponse_Message::has_message_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAFantasyMessagesResponse_Message::set_has_message_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAFantasyMessagesResponse_Message::clear_has_message_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAFantasyMessagesResponse_Message::clear_message_id() {
  message_id_ = 0u;
  clear_has_message_id();
}
::google::protobuf::uint32 CMsgDOTAFantasyMessagesResponse_Message::message_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyMessagesResponse.Message.message_id)
  return message_id_;
}
void CMsgDOTAFantasyMessagesResponse_Message::set_message_id(::google::protobuf::uint32 value) {
  set_has_message_id();
  message_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyMessagesResponse.Message.message_id)
}

// optional string message = 2;
bool CMsgDOTAFantasyMessagesResponse_Message::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyMessagesResponse_Message::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyMessagesResponse_Message::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyMessagesResponse_Message::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
const ::std::string& CMsgDOTAFantasyMessagesResponse_Message::message() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyMessagesResponse.Message.message)
  return message_.GetNoArena();
}
void CMsgDOTAFantasyMessagesResponse_Message::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyMessagesResponse.Message.message)
}
#if LANG_CXX11
void CMsgDOTAFantasyMessagesResponse_Message::set_message(::std::string&& value) {
  set_has_message();
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAFantasyMessagesResponse.Message.message)
}
#endif
void CMsgDOTAFantasyMessagesResponse_Message::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAFantasyMessagesResponse.Message.message)
}
void CMsgDOTAFantasyMessagesResponse_Message::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAFantasyMessagesResponse.Message.message)
}
::std::string* CMsgDOTAFantasyMessagesResponse_Message::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAFantasyMessagesResponse.Message.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTAFantasyMessagesResponse_Message::release_message() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAFantasyMessagesResponse.Message.message)
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTAFantasyMessagesResponse_Message::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAFantasyMessagesResponse.Message.message)
}

// optional uint32 author_account_id = 3;
bool CMsgDOTAFantasyMessagesResponse_Message::has_author_account_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAFantasyMessagesResponse_Message::set_has_author_account_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAFantasyMessagesResponse_Message::clear_has_author_account_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAFantasyMessagesResponse_Message::clear_author_account_id() {
  author_account_id_ = 0u;
  clear_has_author_account_id();
}
::google::protobuf::uint32 CMsgDOTAFantasyMessagesResponse_Message::author_account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyMessagesResponse.Message.author_account_id)
  return author_account_id_;
}
void CMsgDOTAFantasyMessagesResponse_Message::set_author_account_id(::google::protobuf::uint32 value) {
  set_has_author_account_id();
  author_account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyMessagesResponse.Message.author_account_id)
}

// optional uint32 time = 4;
bool CMsgDOTAFantasyMessagesResponse_Message::has_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTAFantasyMessagesResponse_Message::set_has_time() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTAFantasyMessagesResponse_Message::clear_has_time() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTAFantasyMessagesResponse_Message::clear_time() {
  time_ = 0u;
  clear_has_time();
}
::google::protobuf::uint32 CMsgDOTAFantasyMessagesResponse_Message::time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyMessagesResponse.Message.time)
  return time_;
}
void CMsgDOTAFantasyMessagesResponse_Message::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyMessagesResponse.Message.time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyMessagesResponse::kResultFieldNumber;
const int CMsgDOTAFantasyMessagesResponse::kMessagesFieldNumber;
const int CMsgDOTAFantasyMessagesResponse::kNumTotalMessagesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyMessagesResponse::CMsgDOTAFantasyMessagesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyMessagesResponse)
}
CMsgDOTAFantasyMessagesResponse::CMsgDOTAFantasyMessagesResponse(const CMsgDOTAFantasyMessagesResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      messages_(from.messages_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    reinterpret_cast<char*>(&num_total_messages_) -
    reinterpret_cast<char*>(&result_) + sizeof(num_total_messages_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyMessagesResponse)
}

void CMsgDOTAFantasyMessagesResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&result_, 0, reinterpret_cast<char*>(&num_total_messages_) -
    reinterpret_cast<char*>(&result_) + sizeof(num_total_messages_));
}

CMsgDOTAFantasyMessagesResponse::~CMsgDOTAFantasyMessagesResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyMessagesResponse)
  SharedDtor();
}

void CMsgDOTAFantasyMessagesResponse::SharedDtor() {
}

void CMsgDOTAFantasyMessagesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyMessagesResponse::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAFantasyMessagesResponse& CMsgDOTAFantasyMessagesResponse::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAFantasyMessagesResponse* CMsgDOTAFantasyMessagesResponse::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyMessagesResponse* n = new CMsgDOTAFantasyMessagesResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyMessagesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyMessagesResponse)
  messages_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&result_, 0, reinterpret_cast<char*>(&num_total_messages_) -
      reinterpret_cast<char*>(&result_) + sizeof(num_total_messages_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAFantasyMessagesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyMessagesResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgDOTAFantasyMessagesResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgDOTAFantasyMessagesResponse_EResult_IsValid(value)) {
            set_result(static_cast< ::proto::dota::CMsgDOTAFantasyMessagesResponse_EResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTAFantasyMessagesResponse.Message messages = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_messages()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_total_messages = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_num_total_messages();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_total_messages_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyMessagesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyMessagesResponse)
  return false;
#undef DO_
}

void CMsgDOTAFantasyMessagesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyMessagesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAFantasyMessagesResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // repeated .proto.dota.CMsgDOTAFantasyMessagesResponse.Message messages = 2;
  for (unsigned int i = 0, n = this->messages_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->messages(i), output);
  }

  // optional uint32 num_total_messages = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->num_total_messages(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyMessagesResponse)
}

::google::protobuf::uint8* CMsgDOTAFantasyMessagesResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyMessagesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAFantasyMessagesResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // repeated .proto.dota.CMsgDOTAFantasyMessagesResponse.Message messages = 2;
  for (unsigned int i = 0, n = this->messages_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->messages(i), deterministic, target);
  }

  // optional uint32 num_total_messages = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->num_total_messages(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyMessagesResponse)
  return target;
}

size_t CMsgDOTAFantasyMessagesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyMessagesResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgDOTAFantasyMessagesResponse.Message messages = 2;
  {
    unsigned int count = this->messages_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->messages(i));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional .proto.dota.CMsgDOTAFantasyMessagesResponse.EResult result = 1 [default = SUCCESS];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 num_total_messages = 3;
    if (has_num_total_messages()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_total_messages());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyMessagesResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyMessagesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyMessagesResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyMessagesResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyMessagesResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyMessagesResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyMessagesResponse::MergeFrom(const CMsgDOTAFantasyMessagesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyMessagesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  messages_.MergeFrom(from.messages_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000002u) {
      num_total_messages_ = from.num_total_messages_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyMessagesResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyMessagesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyMessagesResponse::CopyFrom(const CMsgDOTAFantasyMessagesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyMessagesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyMessagesResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyMessagesResponse::Swap(CMsgDOTAFantasyMessagesResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyMessagesResponse::InternalSwap(CMsgDOTAFantasyMessagesResponse* other) {
  messages_.InternalSwap(&other->messages_);
  std::swap(result_, other->result_);
  std::swap(num_total_messages_, other->num_total_messages_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyMessagesResponse::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyMessagesResponse

// optional .proto.dota.CMsgDOTAFantasyMessagesResponse.EResult result = 1 [default = SUCCESS];
bool CMsgDOTAFantasyMessagesResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyMessagesResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyMessagesResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyMessagesResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
::proto::dota::CMsgDOTAFantasyMessagesResponse_EResult CMsgDOTAFantasyMessagesResponse::result() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyMessagesResponse.result)
  return static_cast< ::proto::dota::CMsgDOTAFantasyMessagesResponse_EResult >(result_);
}
void CMsgDOTAFantasyMessagesResponse::set_result(::proto::dota::CMsgDOTAFantasyMessagesResponse_EResult value) {
  assert(::proto::dota::CMsgDOTAFantasyMessagesResponse_EResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyMessagesResponse.result)
}

// repeated .proto.dota.CMsgDOTAFantasyMessagesResponse.Message messages = 2;
int CMsgDOTAFantasyMessagesResponse::messages_size() const {
  return messages_.size();
}
void CMsgDOTAFantasyMessagesResponse::clear_messages() {
  messages_.Clear();
}
const ::proto::dota::CMsgDOTAFantasyMessagesResponse_Message& CMsgDOTAFantasyMessagesResponse::messages(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyMessagesResponse.messages)
  return messages_.Get(index);
}
::proto::dota::CMsgDOTAFantasyMessagesResponse_Message* CMsgDOTAFantasyMessagesResponse::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAFantasyMessagesResponse.messages)
  return messages_.Mutable(index);
}
::proto::dota::CMsgDOTAFantasyMessagesResponse_Message* CMsgDOTAFantasyMessagesResponse::add_messages() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTAFantasyMessagesResponse.messages)
  return messages_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAFantasyMessagesResponse_Message >*
CMsgDOTAFantasyMessagesResponse::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTAFantasyMessagesResponse.messages)
  return &messages_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAFantasyMessagesResponse_Message >&
CMsgDOTAFantasyMessagesResponse::messages() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTAFantasyMessagesResponse.messages)
  return messages_;
}

// optional uint32 num_total_messages = 3;
bool CMsgDOTAFantasyMessagesResponse::has_num_total_messages() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAFantasyMessagesResponse::set_has_num_total_messages() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAFantasyMessagesResponse::clear_has_num_total_messages() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAFantasyMessagesResponse::clear_num_total_messages() {
  num_total_messages_ = 0u;
  clear_has_num_total_messages();
}
::google::protobuf::uint32 CMsgDOTAFantasyMessagesResponse::num_total_messages() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyMessagesResponse.num_total_messages)
  return num_total_messages_;
}
void CMsgDOTAFantasyMessagesResponse::set_num_total_messages(::google::protobuf::uint32 value) {
  set_has_num_total_messages();
  num_total_messages_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyMessagesResponse.num_total_messages)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyRemoveOwner::kFantasyLeagueIdFieldNumber;
const int CMsgDOTAFantasyRemoveOwner::kOwnerAccountIdFieldNumber;
const int CMsgDOTAFantasyRemoveOwner::kTeamIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyRemoveOwner::CMsgDOTAFantasyRemoveOwner()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyRemoveOwner)
}
CMsgDOTAFantasyRemoveOwner::CMsgDOTAFantasyRemoveOwner(const CMsgDOTAFantasyRemoveOwner& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&fantasy_league_id_, &from.fantasy_league_id_,
    reinterpret_cast<char*>(&team_index_) -
    reinterpret_cast<char*>(&fantasy_league_id_) + sizeof(team_index_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyRemoveOwner)
}

void CMsgDOTAFantasyRemoveOwner::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&fantasy_league_id_, 0, reinterpret_cast<char*>(&team_index_) -
    reinterpret_cast<char*>(&fantasy_league_id_) + sizeof(team_index_));
}

CMsgDOTAFantasyRemoveOwner::~CMsgDOTAFantasyRemoveOwner() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyRemoveOwner)
  SharedDtor();
}

void CMsgDOTAFantasyRemoveOwner::SharedDtor() {
}

void CMsgDOTAFantasyRemoveOwner::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyRemoveOwner::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAFantasyRemoveOwner& CMsgDOTAFantasyRemoveOwner::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAFantasyRemoveOwner* CMsgDOTAFantasyRemoveOwner::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyRemoveOwner* n = new CMsgDOTAFantasyRemoveOwner;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyRemoveOwner::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyRemoveOwner)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&fantasy_league_id_, 0, reinterpret_cast<char*>(&team_index_) -
      reinterpret_cast<char*>(&fantasy_league_id_) + sizeof(team_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAFantasyRemoveOwner::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyRemoveOwner)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_fantasy_league_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 owner_account_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_owner_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &owner_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team_index = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_team_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyRemoveOwner)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyRemoveOwner)
  return false;
#undef DO_
}

void CMsgDOTAFantasyRemoveOwner::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyRemoveOwner)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fantasy_league_id(), output);
  }

  // optional uint32 owner_account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->owner_account_id(), output);
  }

  // optional uint32 team_index = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->team_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyRemoveOwner)
}

::google::protobuf::uint8* CMsgDOTAFantasyRemoveOwner::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyRemoveOwner)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fantasy_league_id(), target);
  }

  // optional uint32 owner_account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->owner_account_id(), target);
  }

  // optional uint32 team_index = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->team_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyRemoveOwner)
  return target;
}

size_t CMsgDOTAFantasyRemoveOwner::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyRemoveOwner)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 fantasy_league_id = 1;
    if (has_fantasy_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_league_id());
    }

    // optional uint32 owner_account_id = 2;
    if (has_owner_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->owner_account_id());
    }

    // optional uint32 team_index = 3;
    if (has_team_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_index());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyRemoveOwner::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyRemoveOwner)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyRemoveOwner* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyRemoveOwner>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyRemoveOwner)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyRemoveOwner)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyRemoveOwner::MergeFrom(const CMsgDOTAFantasyRemoveOwner& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyRemoveOwner)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      fantasy_league_id_ = from.fantasy_league_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      owner_account_id_ = from.owner_account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      team_index_ = from.team_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyRemoveOwner::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyRemoveOwner)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyRemoveOwner::CopyFrom(const CMsgDOTAFantasyRemoveOwner& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyRemoveOwner)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyRemoveOwner::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyRemoveOwner::Swap(CMsgDOTAFantasyRemoveOwner* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyRemoveOwner::InternalSwap(CMsgDOTAFantasyRemoveOwner* other) {
  std::swap(fantasy_league_id_, other->fantasy_league_id_);
  std::swap(owner_account_id_, other->owner_account_id_);
  std::swap(team_index_, other->team_index_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyRemoveOwner::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyRemoveOwner

// optional uint32 fantasy_league_id = 1;
bool CMsgDOTAFantasyRemoveOwner::has_fantasy_league_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyRemoveOwner::set_has_fantasy_league_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyRemoveOwner::clear_has_fantasy_league_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyRemoveOwner::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  clear_has_fantasy_league_id();
}
::google::protobuf::uint32 CMsgDOTAFantasyRemoveOwner::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyRemoveOwner.fantasy_league_id)
  return fantasy_league_id_;
}
void CMsgDOTAFantasyRemoveOwner::set_fantasy_league_id(::google::protobuf::uint32 value) {
  set_has_fantasy_league_id();
  fantasy_league_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyRemoveOwner.fantasy_league_id)
}

// optional uint32 owner_account_id = 2;
bool CMsgDOTAFantasyRemoveOwner::has_owner_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAFantasyRemoveOwner::set_has_owner_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAFantasyRemoveOwner::clear_has_owner_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAFantasyRemoveOwner::clear_owner_account_id() {
  owner_account_id_ = 0u;
  clear_has_owner_account_id();
}
::google::protobuf::uint32 CMsgDOTAFantasyRemoveOwner::owner_account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyRemoveOwner.owner_account_id)
  return owner_account_id_;
}
void CMsgDOTAFantasyRemoveOwner::set_owner_account_id(::google::protobuf::uint32 value) {
  set_has_owner_account_id();
  owner_account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyRemoveOwner.owner_account_id)
}

// optional uint32 team_index = 3;
bool CMsgDOTAFantasyRemoveOwner::has_team_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAFantasyRemoveOwner::set_has_team_index() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAFantasyRemoveOwner::clear_has_team_index() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAFantasyRemoveOwner::clear_team_index() {
  team_index_ = 0u;
  clear_has_team_index();
}
::google::protobuf::uint32 CMsgDOTAFantasyRemoveOwner::team_index() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyRemoveOwner.team_index)
  return team_index_;
}
void CMsgDOTAFantasyRemoveOwner::set_team_index(::google::protobuf::uint32 value) {
  set_has_team_index();
  team_index_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyRemoveOwner.team_index)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyRemoveOwnerResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyRemoveOwnerResponse::CMsgDOTAFantasyRemoveOwnerResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyRemoveOwnerResponse)
}
CMsgDOTAFantasyRemoveOwnerResponse::CMsgDOTAFantasyRemoveOwnerResponse(const CMsgDOTAFantasyRemoveOwnerResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyRemoveOwnerResponse)
}

void CMsgDOTAFantasyRemoveOwnerResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
}

CMsgDOTAFantasyRemoveOwnerResponse::~CMsgDOTAFantasyRemoveOwnerResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyRemoveOwnerResponse)
  SharedDtor();
}

void CMsgDOTAFantasyRemoveOwnerResponse::SharedDtor() {
}

void CMsgDOTAFantasyRemoveOwnerResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyRemoveOwnerResponse::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAFantasyRemoveOwnerResponse& CMsgDOTAFantasyRemoveOwnerResponse::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAFantasyRemoveOwnerResponse* CMsgDOTAFantasyRemoveOwnerResponse::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyRemoveOwnerResponse* n = new CMsgDOTAFantasyRemoveOwnerResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyRemoveOwnerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyRemoveOwnerResponse)
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAFantasyRemoveOwnerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyRemoveOwnerResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgDOTAFantasyRemoveOwnerResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgDOTAFantasyRemoveOwnerResponse_EResult_IsValid(value)) {
            set_result(static_cast< ::proto::dota::CMsgDOTAFantasyRemoveOwnerResponse_EResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyRemoveOwnerResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyRemoveOwnerResponse)
  return false;
#undef DO_
}

void CMsgDOTAFantasyRemoveOwnerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyRemoveOwnerResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAFantasyRemoveOwnerResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyRemoveOwnerResponse)
}

::google::protobuf::uint8* CMsgDOTAFantasyRemoveOwnerResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyRemoveOwnerResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAFantasyRemoveOwnerResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyRemoveOwnerResponse)
  return target;
}

size_t CMsgDOTAFantasyRemoveOwnerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyRemoveOwnerResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .proto.dota.CMsgDOTAFantasyRemoveOwnerResponse.EResult result = 1 [default = SUCCESS];
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyRemoveOwnerResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyRemoveOwnerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyRemoveOwnerResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyRemoveOwnerResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyRemoveOwnerResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyRemoveOwnerResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyRemoveOwnerResponse::MergeFrom(const CMsgDOTAFantasyRemoveOwnerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyRemoveOwnerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void CMsgDOTAFantasyRemoveOwnerResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyRemoveOwnerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyRemoveOwnerResponse::CopyFrom(const CMsgDOTAFantasyRemoveOwnerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyRemoveOwnerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyRemoveOwnerResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyRemoveOwnerResponse::Swap(CMsgDOTAFantasyRemoveOwnerResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyRemoveOwnerResponse::InternalSwap(CMsgDOTAFantasyRemoveOwnerResponse* other) {
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyRemoveOwnerResponse::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyRemoveOwnerResponse

// optional .proto.dota.CMsgDOTAFantasyRemoveOwnerResponse.EResult result = 1 [default = SUCCESS];
bool CMsgDOTAFantasyRemoveOwnerResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyRemoveOwnerResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyRemoveOwnerResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyRemoveOwnerResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
::proto::dota::CMsgDOTAFantasyRemoveOwnerResponse_EResult CMsgDOTAFantasyRemoveOwnerResponse::result() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyRemoveOwnerResponse.result)
  return static_cast< ::proto::dota::CMsgDOTAFantasyRemoveOwnerResponse_EResult >(result_);
}
void CMsgDOTAFantasyRemoveOwnerResponse::set_result(::proto::dota::CMsgDOTAFantasyRemoveOwnerResponse_EResult value) {
  assert(::proto::dota::CMsgDOTAFantasyRemoveOwnerResponse_EResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyRemoveOwnerResponse.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyScheduledMatchesRequest::kFantasyLeagueIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyScheduledMatchesRequest::CMsgDOTAFantasyScheduledMatchesRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyScheduledMatchesRequest)
}
CMsgDOTAFantasyScheduledMatchesRequest::CMsgDOTAFantasyScheduledMatchesRequest(const CMsgDOTAFantasyScheduledMatchesRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fantasy_league_id_ = from.fantasy_league_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyScheduledMatchesRequest)
}

void CMsgDOTAFantasyScheduledMatchesRequest::SharedCtor() {
  _cached_size_ = 0;
  fantasy_league_id_ = 0u;
}

CMsgDOTAFantasyScheduledMatchesRequest::~CMsgDOTAFantasyScheduledMatchesRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyScheduledMatchesRequest)
  SharedDtor();
}

void CMsgDOTAFantasyScheduledMatchesRequest::SharedDtor() {
}

void CMsgDOTAFantasyScheduledMatchesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyScheduledMatchesRequest::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAFantasyScheduledMatchesRequest& CMsgDOTAFantasyScheduledMatchesRequest::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAFantasyScheduledMatchesRequest* CMsgDOTAFantasyScheduledMatchesRequest::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyScheduledMatchesRequest* n = new CMsgDOTAFantasyScheduledMatchesRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyScheduledMatchesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyScheduledMatchesRequest)
  fantasy_league_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAFantasyScheduledMatchesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyScheduledMatchesRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_fantasy_league_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyScheduledMatchesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyScheduledMatchesRequest)
  return false;
#undef DO_
}

void CMsgDOTAFantasyScheduledMatchesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyScheduledMatchesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fantasy_league_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyScheduledMatchesRequest)
}

::google::protobuf::uint8* CMsgDOTAFantasyScheduledMatchesRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyScheduledMatchesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fantasy_league_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyScheduledMatchesRequest)
  return target;
}

size_t CMsgDOTAFantasyScheduledMatchesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyScheduledMatchesRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 fantasy_league_id = 1;
  if (has_fantasy_league_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->fantasy_league_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyScheduledMatchesRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyScheduledMatchesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyScheduledMatchesRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyScheduledMatchesRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyScheduledMatchesRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyScheduledMatchesRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyScheduledMatchesRequest::MergeFrom(const CMsgDOTAFantasyScheduledMatchesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyScheduledMatchesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_fantasy_league_id()) {
    set_fantasy_league_id(from.fantasy_league_id());
  }
}

void CMsgDOTAFantasyScheduledMatchesRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyScheduledMatchesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyScheduledMatchesRequest::CopyFrom(const CMsgDOTAFantasyScheduledMatchesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyScheduledMatchesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyScheduledMatchesRequest::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyScheduledMatchesRequest::Swap(CMsgDOTAFantasyScheduledMatchesRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyScheduledMatchesRequest::InternalSwap(CMsgDOTAFantasyScheduledMatchesRequest* other) {
  std::swap(fantasy_league_id_, other->fantasy_league_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyScheduledMatchesRequest::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyScheduledMatchesRequest

// optional uint32 fantasy_league_id = 1;
bool CMsgDOTAFantasyScheduledMatchesRequest::has_fantasy_league_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyScheduledMatchesRequest::set_has_fantasy_league_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyScheduledMatchesRequest::clear_has_fantasy_league_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyScheduledMatchesRequest::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  clear_has_fantasy_league_id();
}
::google::protobuf::uint32 CMsgDOTAFantasyScheduledMatchesRequest::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyScheduledMatchesRequest.fantasy_league_id)
  return fantasy_league_id_;
}
void CMsgDOTAFantasyScheduledMatchesRequest::set_fantasy_league_id(::google::protobuf::uint32 value) {
  set_has_fantasy_league_id();
  fantasy_league_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyScheduledMatchesRequest.fantasy_league_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::kTimestampFieldNumber;
const int CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::kTeamIdsFieldNumber;
const int CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::kLeagueIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays)
}
CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays(const CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      team_ids_(from.team_ids_),
      league_ids_(from.league_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays)
}

void CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = 0u;
}

CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::~CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays)
  SharedDtor();
}

void CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::SharedDtor() {
}

void CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays& CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays* CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays* n = new CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays)
  team_ids_.Clear();
  league_ids_.Clear();
  timestamp_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 team_ids = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_team_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_team_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 league_ids = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24u, input, this->mutable_league_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(26u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_league_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays)
  return false;
#undef DO_
}

void CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->timestamp(), output);
  }

  // repeated uint32 team_ids = 2;
  for (int i = 0, n = this->team_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->team_ids(i), output);
  }

  // repeated uint32 league_ids = 3;
  for (int i = 0, n = this->league_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->league_ids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays)
}

::google::protobuf::uint8* CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->timestamp(), target);
  }

  // repeated uint32 team_ids = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(2, this->team_ids_, target);

  // repeated uint32 league_ids = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(3, this->league_ids_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays)
  return target;
}

size_t CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 team_ids = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->team_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->team_ids_size());
    total_size += data_size;
  }

  // repeated uint32 league_ids = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->league_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->league_ids_size());
    total_size += data_size;
  }

  // optional uint32 timestamp = 1;
  if (has_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::MergeFrom(const CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  team_ids_.MergeFrom(from.team_ids_);
  league_ids_.MergeFrom(from.league_ids_);
  if (from.has_timestamp()) {
    set_timestamp(from.timestamp());
  }
}

void CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::CopyFrom(const CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::Swap(CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::InternalSwap(CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays* other) {
  team_ids_.InternalSwap(&other->team_ids_);
  league_ids_.InternalSwap(&other->league_ids_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays

// optional uint32 timestamp = 1;
bool CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::clear_timestamp() {
  timestamp_ = 0u;
  clear_has_timestamp();
}
::google::protobuf::uint32 CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::timestamp() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays.timestamp)
  return timestamp_;
}
void CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::set_timestamp(::google::protobuf::uint32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays.timestamp)
}

// repeated uint32 team_ids = 2;
int CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::team_ids_size() const {
  return team_ids_.size();
}
void CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::clear_team_ids() {
  team_ids_.Clear();
}
::google::protobuf::uint32 CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::team_ids(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays.team_ids)
  return team_ids_.Get(index);
}
void CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::set_team_ids(int index, ::google::protobuf::uint32 value) {
  team_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays.team_ids)
}
void CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::add_team_ids(::google::protobuf::uint32 value) {
  team_ids_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays.team_ids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::team_ids() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays.team_ids)
  return team_ids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::mutable_team_ids() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays.team_ids)
  return &team_ids_;
}

// repeated uint32 league_ids = 3;
int CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::league_ids_size() const {
  return league_ids_.size();
}
void CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::clear_league_ids() {
  league_ids_.Clear();
}
::google::protobuf::uint32 CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::league_ids(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays.league_ids)
  return league_ids_.Get(index);
}
void CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::set_league_ids(int index, ::google::protobuf::uint32 value) {
  league_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays.league_ids)
}
void CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::add_league_ids(::google::protobuf::uint32 value) {
  league_ids_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays.league_ids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::league_ids() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays.league_ids)
  return league_ids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::mutable_league_ids() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays.league_ids)
  return &league_ids_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyScheduledMatchesResponse::kResultFieldNumber;
const int CMsgDOTAFantasyScheduledMatchesResponse::kScheduledMatchDaysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyScheduledMatchesResponse::CMsgDOTAFantasyScheduledMatchesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyScheduledMatchesResponse)
}
CMsgDOTAFantasyScheduledMatchesResponse::CMsgDOTAFantasyScheduledMatchesResponse(const CMsgDOTAFantasyScheduledMatchesResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      scheduled_match_days_(from.scheduled_match_days_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyScheduledMatchesResponse)
}

void CMsgDOTAFantasyScheduledMatchesResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
}

CMsgDOTAFantasyScheduledMatchesResponse::~CMsgDOTAFantasyScheduledMatchesResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyScheduledMatchesResponse)
  SharedDtor();
}

void CMsgDOTAFantasyScheduledMatchesResponse::SharedDtor() {
}

void CMsgDOTAFantasyScheduledMatchesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyScheduledMatchesResponse::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAFantasyScheduledMatchesResponse& CMsgDOTAFantasyScheduledMatchesResponse::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAFantasyScheduledMatchesResponse* CMsgDOTAFantasyScheduledMatchesResponse::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyScheduledMatchesResponse* n = new CMsgDOTAFantasyScheduledMatchesResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyScheduledMatchesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyScheduledMatchesResponse)
  scheduled_match_days_.Clear();
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAFantasyScheduledMatchesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyScheduledMatchesResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgDOTAFantasyScheduledMatchesResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgDOTAFantasyScheduledMatchesResponse_EResult_IsValid(value)) {
            set_result(static_cast< ::proto::dota::CMsgDOTAFantasyScheduledMatchesResponse_EResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays scheduled_match_days = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_scheduled_match_days()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyScheduledMatchesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyScheduledMatchesResponse)
  return false;
#undef DO_
}

void CMsgDOTAFantasyScheduledMatchesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyScheduledMatchesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAFantasyScheduledMatchesResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // repeated .proto.dota.CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays scheduled_match_days = 2;
  for (unsigned int i = 0, n = this->scheduled_match_days_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->scheduled_match_days(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyScheduledMatchesResponse)
}

::google::protobuf::uint8* CMsgDOTAFantasyScheduledMatchesResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyScheduledMatchesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAFantasyScheduledMatchesResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // repeated .proto.dota.CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays scheduled_match_days = 2;
  for (unsigned int i = 0, n = this->scheduled_match_days_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->scheduled_match_days(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyScheduledMatchesResponse)
  return target;
}

size_t CMsgDOTAFantasyScheduledMatchesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyScheduledMatchesResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays scheduled_match_days = 2;
  {
    unsigned int count = this->scheduled_match_days_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scheduled_match_days(i));
    }
  }

  // optional .proto.dota.CMsgDOTAFantasyScheduledMatchesResponse.EResult result = 1 [default = SUCCESS];
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyScheduledMatchesResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyScheduledMatchesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyScheduledMatchesResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyScheduledMatchesResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyScheduledMatchesResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyScheduledMatchesResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyScheduledMatchesResponse::MergeFrom(const CMsgDOTAFantasyScheduledMatchesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyScheduledMatchesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  scheduled_match_days_.MergeFrom(from.scheduled_match_days_);
  if (from.has_result()) {
    set_result(from.result());
  }
}

void CMsgDOTAFantasyScheduledMatchesResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyScheduledMatchesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyScheduledMatchesResponse::CopyFrom(const CMsgDOTAFantasyScheduledMatchesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyScheduledMatchesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyScheduledMatchesResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyScheduledMatchesResponse::Swap(CMsgDOTAFantasyScheduledMatchesResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyScheduledMatchesResponse::InternalSwap(CMsgDOTAFantasyScheduledMatchesResponse* other) {
  scheduled_match_days_.InternalSwap(&other->scheduled_match_days_);
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyScheduledMatchesResponse::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyScheduledMatchesResponse

// optional .proto.dota.CMsgDOTAFantasyScheduledMatchesResponse.EResult result = 1 [default = SUCCESS];
bool CMsgDOTAFantasyScheduledMatchesResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyScheduledMatchesResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyScheduledMatchesResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyScheduledMatchesResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
::proto::dota::CMsgDOTAFantasyScheduledMatchesResponse_EResult CMsgDOTAFantasyScheduledMatchesResponse::result() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyScheduledMatchesResponse.result)
  return static_cast< ::proto::dota::CMsgDOTAFantasyScheduledMatchesResponse_EResult >(result_);
}
void CMsgDOTAFantasyScheduledMatchesResponse::set_result(::proto::dota::CMsgDOTAFantasyScheduledMatchesResponse_EResult value) {
  assert(::proto::dota::CMsgDOTAFantasyScheduledMatchesResponse_EResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyScheduledMatchesResponse.result)
}

// repeated .proto.dota.CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays scheduled_match_days = 2;
int CMsgDOTAFantasyScheduledMatchesResponse::scheduled_match_days_size() const {
  return scheduled_match_days_.size();
}
void CMsgDOTAFantasyScheduledMatchesResponse::clear_scheduled_match_days() {
  scheduled_match_days_.Clear();
}
const ::proto::dota::CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays& CMsgDOTAFantasyScheduledMatchesResponse::scheduled_match_days(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyScheduledMatchesResponse.scheduled_match_days)
  return scheduled_match_days_.Get(index);
}
::proto::dota::CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays* CMsgDOTAFantasyScheduledMatchesResponse::mutable_scheduled_match_days(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAFantasyScheduledMatchesResponse.scheduled_match_days)
  return scheduled_match_days_.Mutable(index);
}
::proto::dota::CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays* CMsgDOTAFantasyScheduledMatchesResponse::add_scheduled_match_days() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTAFantasyScheduledMatchesResponse.scheduled_match_days)
  return scheduled_match_days_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays >*
CMsgDOTAFantasyScheduledMatchesResponse::mutable_scheduled_match_days() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTAFantasyScheduledMatchesResponse.scheduled_match_days)
  return &scheduled_match_days_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays >&
CMsgDOTAFantasyScheduledMatchesResponse::scheduled_match_days() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTAFantasyScheduledMatchesResponse.scheduled_match_days)
  return scheduled_match_days_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyLeaveLeagueRequest::kFantasyLeagueIdFieldNumber;
const int CMsgDOTAFantasyLeaveLeagueRequest::kFantasyTeamIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyLeaveLeagueRequest::CMsgDOTAFantasyLeaveLeagueRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyLeaveLeagueRequest)
}
CMsgDOTAFantasyLeaveLeagueRequest::CMsgDOTAFantasyLeaveLeagueRequest(const CMsgDOTAFantasyLeaveLeagueRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&fantasy_league_id_, &from.fantasy_league_id_,
    reinterpret_cast<char*>(&fantasy_team_index_) -
    reinterpret_cast<char*>(&fantasy_league_id_) + sizeof(fantasy_team_index_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyLeaveLeagueRequest)
}

void CMsgDOTAFantasyLeaveLeagueRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&fantasy_league_id_, 0, reinterpret_cast<char*>(&fantasy_team_index_) -
    reinterpret_cast<char*>(&fantasy_league_id_) + sizeof(fantasy_team_index_));
}

CMsgDOTAFantasyLeaveLeagueRequest::~CMsgDOTAFantasyLeaveLeagueRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyLeaveLeagueRequest)
  SharedDtor();
}

void CMsgDOTAFantasyLeaveLeagueRequest::SharedDtor() {
}

void CMsgDOTAFantasyLeaveLeagueRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyLeaveLeagueRequest::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAFantasyLeaveLeagueRequest& CMsgDOTAFantasyLeaveLeagueRequest::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAFantasyLeaveLeagueRequest* CMsgDOTAFantasyLeaveLeagueRequest::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyLeaveLeagueRequest* n = new CMsgDOTAFantasyLeaveLeagueRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyLeaveLeagueRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyLeaveLeagueRequest)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&fantasy_league_id_, 0, reinterpret_cast<char*>(&fantasy_team_index_) -
      reinterpret_cast<char*>(&fantasy_league_id_) + sizeof(fantasy_team_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAFantasyLeaveLeagueRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyLeaveLeagueRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_fantasy_league_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 fantasy_team_index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_fantasy_team_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_team_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyLeaveLeagueRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyLeaveLeagueRequest)
  return false;
#undef DO_
}

void CMsgDOTAFantasyLeaveLeagueRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyLeaveLeagueRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fantasy_league_id(), output);
  }

  // optional uint32 fantasy_team_index = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->fantasy_team_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyLeaveLeagueRequest)
}

::google::protobuf::uint8* CMsgDOTAFantasyLeaveLeagueRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyLeaveLeagueRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fantasy_league_id(), target);
  }

  // optional uint32 fantasy_team_index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->fantasy_team_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyLeaveLeagueRequest)
  return target;
}

size_t CMsgDOTAFantasyLeaveLeagueRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyLeaveLeagueRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 fantasy_league_id = 1;
    if (has_fantasy_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_league_id());
    }

    // optional uint32 fantasy_team_index = 2;
    if (has_fantasy_team_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_team_index());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyLeaveLeagueRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyLeaveLeagueRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyLeaveLeagueRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyLeaveLeagueRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyLeaveLeagueRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyLeaveLeagueRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyLeaveLeagueRequest::MergeFrom(const CMsgDOTAFantasyLeaveLeagueRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyLeaveLeagueRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      fantasy_league_id_ = from.fantasy_league_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      fantasy_team_index_ = from.fantasy_team_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyLeaveLeagueRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyLeaveLeagueRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyLeaveLeagueRequest::CopyFrom(const CMsgDOTAFantasyLeaveLeagueRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyLeaveLeagueRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyLeaveLeagueRequest::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyLeaveLeagueRequest::Swap(CMsgDOTAFantasyLeaveLeagueRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyLeaveLeagueRequest::InternalSwap(CMsgDOTAFantasyLeaveLeagueRequest* other) {
  std::swap(fantasy_league_id_, other->fantasy_league_id_);
  std::swap(fantasy_team_index_, other->fantasy_team_index_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyLeaveLeagueRequest::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyLeaveLeagueRequest

// optional uint32 fantasy_league_id = 1;
bool CMsgDOTAFantasyLeaveLeagueRequest::has_fantasy_league_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyLeaveLeagueRequest::set_has_fantasy_league_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyLeaveLeagueRequest::clear_has_fantasy_league_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyLeaveLeagueRequest::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  clear_has_fantasy_league_id();
}
::google::protobuf::uint32 CMsgDOTAFantasyLeaveLeagueRequest::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyLeaveLeagueRequest.fantasy_league_id)
  return fantasy_league_id_;
}
void CMsgDOTAFantasyLeaveLeagueRequest::set_fantasy_league_id(::google::protobuf::uint32 value) {
  set_has_fantasy_league_id();
  fantasy_league_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyLeaveLeagueRequest.fantasy_league_id)
}

// optional uint32 fantasy_team_index = 2;
bool CMsgDOTAFantasyLeaveLeagueRequest::has_fantasy_team_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAFantasyLeaveLeagueRequest::set_has_fantasy_team_index() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAFantasyLeaveLeagueRequest::clear_has_fantasy_team_index() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAFantasyLeaveLeagueRequest::clear_fantasy_team_index() {
  fantasy_team_index_ = 0u;
  clear_has_fantasy_team_index();
}
::google::protobuf::uint32 CMsgDOTAFantasyLeaveLeagueRequest::fantasy_team_index() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyLeaveLeagueRequest.fantasy_team_index)
  return fantasy_team_index_;
}
void CMsgDOTAFantasyLeaveLeagueRequest::set_fantasy_team_index(::google::protobuf::uint32 value) {
  set_has_fantasy_team_index();
  fantasy_team_index_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyLeaveLeagueRequest.fantasy_team_index)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyLeaveLeagueResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyLeaveLeagueResponse::CMsgDOTAFantasyLeaveLeagueResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyLeaveLeagueResponse)
}
CMsgDOTAFantasyLeaveLeagueResponse::CMsgDOTAFantasyLeaveLeagueResponse(const CMsgDOTAFantasyLeaveLeagueResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyLeaveLeagueResponse)
}

void CMsgDOTAFantasyLeaveLeagueResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
}

CMsgDOTAFantasyLeaveLeagueResponse::~CMsgDOTAFantasyLeaveLeagueResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyLeaveLeagueResponse)
  SharedDtor();
}

void CMsgDOTAFantasyLeaveLeagueResponse::SharedDtor() {
}

void CMsgDOTAFantasyLeaveLeagueResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyLeaveLeagueResponse::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAFantasyLeaveLeagueResponse& CMsgDOTAFantasyLeaveLeagueResponse::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAFantasyLeaveLeagueResponse* CMsgDOTAFantasyLeaveLeagueResponse::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyLeaveLeagueResponse* n = new CMsgDOTAFantasyLeaveLeagueResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyLeaveLeagueResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyLeaveLeagueResponse)
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAFantasyLeaveLeagueResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyLeaveLeagueResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgDOTAFantasyLeaveLeagueResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgDOTAFantasyLeaveLeagueResponse_EResult_IsValid(value)) {
            set_result(static_cast< ::proto::dota::CMsgDOTAFantasyLeaveLeagueResponse_EResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyLeaveLeagueResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyLeaveLeagueResponse)
  return false;
#undef DO_
}

void CMsgDOTAFantasyLeaveLeagueResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyLeaveLeagueResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAFantasyLeaveLeagueResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyLeaveLeagueResponse)
}

::google::protobuf::uint8* CMsgDOTAFantasyLeaveLeagueResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyLeaveLeagueResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAFantasyLeaveLeagueResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyLeaveLeagueResponse)
  return target;
}

size_t CMsgDOTAFantasyLeaveLeagueResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyLeaveLeagueResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .proto.dota.CMsgDOTAFantasyLeaveLeagueResponse.EResult result = 1 [default = SUCCESS];
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyLeaveLeagueResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyLeaveLeagueResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyLeaveLeagueResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyLeaveLeagueResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyLeaveLeagueResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyLeaveLeagueResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyLeaveLeagueResponse::MergeFrom(const CMsgDOTAFantasyLeaveLeagueResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyLeaveLeagueResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void CMsgDOTAFantasyLeaveLeagueResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyLeaveLeagueResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyLeaveLeagueResponse::CopyFrom(const CMsgDOTAFantasyLeaveLeagueResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyLeaveLeagueResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyLeaveLeagueResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyLeaveLeagueResponse::Swap(CMsgDOTAFantasyLeaveLeagueResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyLeaveLeagueResponse::InternalSwap(CMsgDOTAFantasyLeaveLeagueResponse* other) {
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyLeaveLeagueResponse::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyLeaveLeagueResponse

// optional .proto.dota.CMsgDOTAFantasyLeaveLeagueResponse.EResult result = 1 [default = SUCCESS];
bool CMsgDOTAFantasyLeaveLeagueResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyLeaveLeagueResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyLeaveLeagueResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyLeaveLeagueResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
::proto::dota::CMsgDOTAFantasyLeaveLeagueResponse_EResult CMsgDOTAFantasyLeaveLeagueResponse::result() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyLeaveLeagueResponse.result)
  return static_cast< ::proto::dota::CMsgDOTAFantasyLeaveLeagueResponse_EResult >(result_);
}
void CMsgDOTAFantasyLeaveLeagueResponse::set_result(::proto::dota::CMsgDOTAFantasyLeaveLeagueResponse_EResult value) {
  assert(::proto::dota::CMsgDOTAFantasyLeaveLeagueResponse_EResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyLeaveLeagueResponse.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyPlayerScoreDetailsRequest::kFantasyLeagueIdFieldNumber;
const int CMsgDOTAFantasyPlayerScoreDetailsRequest::kPlayerAccountIdFieldNumber;
const int CMsgDOTAFantasyPlayerScoreDetailsRequest::kStartTimeFieldNumber;
const int CMsgDOTAFantasyPlayerScoreDetailsRequest::kEndTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyPlayerScoreDetailsRequest::CMsgDOTAFantasyPlayerScoreDetailsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsRequest)
}
CMsgDOTAFantasyPlayerScoreDetailsRequest::CMsgDOTAFantasyPlayerScoreDetailsRequest(const CMsgDOTAFantasyPlayerScoreDetailsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&fantasy_league_id_, &from.fantasy_league_id_,
    reinterpret_cast<char*>(&end_time_) -
    reinterpret_cast<char*>(&fantasy_league_id_) + sizeof(end_time_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsRequest)
}

void CMsgDOTAFantasyPlayerScoreDetailsRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&fantasy_league_id_, 0, reinterpret_cast<char*>(&end_time_) -
    reinterpret_cast<char*>(&fantasy_league_id_) + sizeof(end_time_));
}

CMsgDOTAFantasyPlayerScoreDetailsRequest::~CMsgDOTAFantasyPlayerScoreDetailsRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsRequest)
  SharedDtor();
}

void CMsgDOTAFantasyPlayerScoreDetailsRequest::SharedDtor() {
}

void CMsgDOTAFantasyPlayerScoreDetailsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyPlayerScoreDetailsRequest::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAFantasyPlayerScoreDetailsRequest& CMsgDOTAFantasyPlayerScoreDetailsRequest::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAFantasyPlayerScoreDetailsRequest* CMsgDOTAFantasyPlayerScoreDetailsRequest::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyPlayerScoreDetailsRequest* n = new CMsgDOTAFantasyPlayerScoreDetailsRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyPlayerScoreDetailsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsRequest)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&fantasy_league_id_, 0, reinterpret_cast<char*>(&end_time_) -
      reinterpret_cast<char*>(&fantasy_league_id_) + sizeof(end_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAFantasyPlayerScoreDetailsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fantasy_league_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_fantasy_league_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 player_account_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_player_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 start_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_start_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 end_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_end_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsRequest)
  return false;
#undef DO_
}

void CMsgDOTAFantasyPlayerScoreDetailsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fantasy_league_id(), output);
  }

  // optional uint32 player_account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->player_account_id(), output);
  }

  // optional uint32 start_time = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->start_time(), output);
  }

  // optional uint32 end_time = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->end_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsRequest)
}

::google::protobuf::uint8* CMsgDOTAFantasyPlayerScoreDetailsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 fantasy_league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fantasy_league_id(), target);
  }

  // optional uint32 player_account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->player_account_id(), target);
  }

  // optional uint32 start_time = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->start_time(), target);
  }

  // optional uint32 end_time = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->end_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsRequest)
  return target;
}

size_t CMsgDOTAFantasyPlayerScoreDetailsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional uint32 fantasy_league_id = 1;
    if (has_fantasy_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_league_id());
    }

    // optional uint32 player_account_id = 2;
    if (has_player_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_account_id());
    }

    // optional uint32 start_time = 3;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_time());
    }

    // optional uint32 end_time = 4;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->end_time());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyPlayerScoreDetailsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyPlayerScoreDetailsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyPlayerScoreDetailsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyPlayerScoreDetailsRequest::MergeFrom(const CMsgDOTAFantasyPlayerScoreDetailsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      fantasy_league_id_ = from.fantasy_league_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      player_account_id_ = from.player_account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      start_time_ = from.start_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      end_time_ = from.end_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyPlayerScoreDetailsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyPlayerScoreDetailsRequest::CopyFrom(const CMsgDOTAFantasyPlayerScoreDetailsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyPlayerScoreDetailsRequest::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyPlayerScoreDetailsRequest::Swap(CMsgDOTAFantasyPlayerScoreDetailsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyPlayerScoreDetailsRequest::InternalSwap(CMsgDOTAFantasyPlayerScoreDetailsRequest* other) {
  std::swap(fantasy_league_id_, other->fantasy_league_id_);
  std::swap(player_account_id_, other->player_account_id_);
  std::swap(start_time_, other->start_time_);
  std::swap(end_time_, other->end_time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyPlayerScoreDetailsRequest::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyPlayerScoreDetailsRequest

// optional uint32 fantasy_league_id = 1;
bool CMsgDOTAFantasyPlayerScoreDetailsRequest::has_fantasy_league_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyPlayerScoreDetailsRequest::set_has_fantasy_league_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyPlayerScoreDetailsRequest::clear_has_fantasy_league_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyPlayerScoreDetailsRequest::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  clear_has_fantasy_league_id();
}
::google::protobuf::uint32 CMsgDOTAFantasyPlayerScoreDetailsRequest::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsRequest.fantasy_league_id)
  return fantasy_league_id_;
}
void CMsgDOTAFantasyPlayerScoreDetailsRequest::set_fantasy_league_id(::google::protobuf::uint32 value) {
  set_has_fantasy_league_id();
  fantasy_league_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsRequest.fantasy_league_id)
}

// optional uint32 player_account_id = 2;
bool CMsgDOTAFantasyPlayerScoreDetailsRequest::has_player_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAFantasyPlayerScoreDetailsRequest::set_has_player_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAFantasyPlayerScoreDetailsRequest::clear_has_player_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAFantasyPlayerScoreDetailsRequest::clear_player_account_id() {
  player_account_id_ = 0u;
  clear_has_player_account_id();
}
::google::protobuf::uint32 CMsgDOTAFantasyPlayerScoreDetailsRequest::player_account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsRequest.player_account_id)
  return player_account_id_;
}
void CMsgDOTAFantasyPlayerScoreDetailsRequest::set_player_account_id(::google::protobuf::uint32 value) {
  set_has_player_account_id();
  player_account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsRequest.player_account_id)
}

// optional uint32 start_time = 3;
bool CMsgDOTAFantasyPlayerScoreDetailsRequest::has_start_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAFantasyPlayerScoreDetailsRequest::set_has_start_time() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAFantasyPlayerScoreDetailsRequest::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAFantasyPlayerScoreDetailsRequest::clear_start_time() {
  start_time_ = 0u;
  clear_has_start_time();
}
::google::protobuf::uint32 CMsgDOTAFantasyPlayerScoreDetailsRequest::start_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsRequest.start_time)
  return start_time_;
}
void CMsgDOTAFantasyPlayerScoreDetailsRequest::set_start_time(::google::protobuf::uint32 value) {
  set_has_start_time();
  start_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsRequest.start_time)
}

// optional uint32 end_time = 4;
bool CMsgDOTAFantasyPlayerScoreDetailsRequest::has_end_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTAFantasyPlayerScoreDetailsRequest::set_has_end_time() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTAFantasyPlayerScoreDetailsRequest::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTAFantasyPlayerScoreDetailsRequest::clear_end_time() {
  end_time_ = 0u;
  clear_has_end_time();
}
::google::protobuf::uint32 CMsgDOTAFantasyPlayerScoreDetailsRequest::end_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsRequest.end_time)
  return end_time_;
}
void CMsgDOTAFantasyPlayerScoreDetailsRequest::set_end_time(::google::protobuf::uint32 value) {
  set_has_end_time();
  end_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsRequest.end_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::kMatchIdFieldNumber;
const int CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::kSeriesIdFieldNumber;
const int CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::kSeriesNumFieldNumber;
const int CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::kSeriesTypeFieldNumber;
const int CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::kLeagueTierFieldNumber;
const int CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::kLeagueIdFieldNumber;
const int CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::kOpposingTeamIdFieldNumber;
const int CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::kOpposingTeamLogoFieldNumber;
const int CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::kOpposingTeamNameFieldNumber;
const int CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::kOwnedByFieldNumber;
const int CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::kBenchedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData)
}
CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData(const CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  opposing_team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_opposing_team_name()) {
    opposing_team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.opposing_team_name_);
  }
  ::memcpy(&match_id_, &from.match_id_,
    reinterpret_cast<char*>(&benched_) -
    reinterpret_cast<char*>(&match_id_) + sizeof(benched_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData)
}

void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::SharedCtor() {
  _cached_size_ = 0;
  opposing_team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&match_id_, 0, reinterpret_cast<char*>(&benched_) -
    reinterpret_cast<char*>(&match_id_) + sizeof(benched_));
}

CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::~CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData)
  SharedDtor();
}

void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::SharedDtor() {
  opposing_team_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData& CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData* CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData* n = new CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData)
  if (has_opposing_team_name()) {
    GOOGLE_DCHECK(!opposing_team_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*opposing_team_name_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 254u) {
    ::memset(&match_id_, 0, reinterpret_cast<char*>(&opposing_team_id_) -
      reinterpret_cast<char*>(&match_id_) + sizeof(opposing_team_id_));
  }
  if (_has_bits_[8 / 32] & 1792u) {
    ::memset(&opposing_team_logo_, 0, reinterpret_cast<char*>(&benched_) -
      reinterpret_cast<char*>(&opposing_team_logo_) + sizeof(benched_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 match_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_match_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 series_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_series_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &series_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 series_num = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_series_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &series_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 series_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_series_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &series_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 league_tier = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_league_tier();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &league_tier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 league_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_league_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 opposing_team_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_opposing_team_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opposing_team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 opposing_team_logo = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_opposing_team_logo();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &opposing_team_logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string opposing_team_name = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_opposing_team_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->opposing_team_name().data(), this->opposing_team_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData.opposing_team_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 owned_by = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_owned_by();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &owned_by_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool benched = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_benched();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &benched_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData)
  return false;
#undef DO_
}

void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->match_id(), output);
  }

  // optional uint32 series_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->series_id(), output);
  }

  // optional uint32 series_num = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->series_num(), output);
  }

  // optional uint32 series_type = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->series_type(), output);
  }

  // optional uint32 league_tier = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->league_tier(), output);
  }

  // optional uint32 league_id = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->league_id(), output);
  }

  // optional uint32 opposing_team_id = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->opposing_team_id(), output);
  }

  // optional uint64 opposing_team_logo = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->opposing_team_logo(), output);
  }

  // optional string opposing_team_name = 9;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->opposing_team_name().data(), this->opposing_team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData.opposing_team_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->opposing_team_name(), output);
  }

  // optional uint32 owned_by = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->owned_by(), output);
  }

  // optional bool benched = 12;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->benched(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData)
}

::google::protobuf::uint8* CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->match_id(), target);
  }

  // optional uint32 series_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->series_id(), target);
  }

  // optional uint32 series_num = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->series_num(), target);
  }

  // optional uint32 series_type = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->series_type(), target);
  }

  // optional uint32 league_tier = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->league_tier(), target);
  }

  // optional uint32 league_id = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->league_id(), target);
  }

  // optional uint32 opposing_team_id = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->opposing_team_id(), target);
  }

  // optional uint64 opposing_team_logo = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->opposing_team_logo(), target);
  }

  // optional string opposing_team_name = 9;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->opposing_team_name().data(), this->opposing_team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData.opposing_team_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->opposing_team_name(), target);
  }

  // optional uint32 owned_by = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->owned_by(), target);
  }

  // optional bool benched = 12;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->benched(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData)
  return target;
}

size_t CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string opposing_team_name = 9;
    if (has_opposing_team_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->opposing_team_name());
    }

    // optional uint64 match_id = 1;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

    // optional uint32 series_id = 2;
    if (has_series_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->series_id());
    }

    // optional uint32 series_num = 3;
    if (has_series_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->series_num());
    }

    // optional uint32 series_type = 4;
    if (has_series_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->series_type());
    }

    // optional uint32 league_tier = 5;
    if (has_league_tier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->league_tier());
    }

    // optional uint32 league_id = 6;
    if (has_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->league_id());
    }

    // optional uint32 opposing_team_id = 7;
    if (has_opposing_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->opposing_team_id());
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional uint64 opposing_team_logo = 8;
    if (has_opposing_team_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->opposing_team_logo());
    }

    // optional uint32 owned_by = 11;
    if (has_owned_by()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->owned_by());
    }

    // optional bool benched = 12;
    if (has_benched()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::MergeFrom(const CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_opposing_team_name();
      opposing_team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.opposing_team_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      series_id_ = from.series_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      series_num_ = from.series_num_;
    }
    if (cached_has_bits & 0x00000010u) {
      series_type_ = from.series_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      league_tier_ = from.league_tier_;
    }
    if (cached_has_bits & 0x00000040u) {
      league_id_ = from.league_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      opposing_team_id_ = from.opposing_team_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      opposing_team_logo_ = from.opposing_team_logo_;
    }
    if (cached_has_bits & 0x00000200u) {
      owned_by_ = from.owned_by_;
    }
    if (cached_has_bits & 0x00000400u) {
      benched_ = from.benched_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::CopyFrom(const CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::Swap(CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::InternalSwap(CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData* other) {
  opposing_team_name_.Swap(&other->opposing_team_name_);
  std::swap(match_id_, other->match_id_);
  std::swap(series_id_, other->series_id_);
  std::swap(series_num_, other->series_num_);
  std::swap(series_type_, other->series_type_);
  std::swap(league_tier_, other->league_tier_);
  std::swap(league_id_, other->league_id_);
  std::swap(opposing_team_id_, other->opposing_team_id_);
  std::swap(opposing_team_logo_, other->opposing_team_logo_);
  std::swap(owned_by_, other->owned_by_);
  std::swap(benched_, other->benched_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData

// optional uint64 match_id = 1;
bool CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::has_match_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::set_has_match_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::clear_has_match_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::clear_match_id() {
  match_id_ = GOOGLE_ULONGLONG(0);
  clear_has_match_id();
}
::google::protobuf::uint64 CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::match_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData.match_id)
  return match_id_;
}
void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::set_match_id(::google::protobuf::uint64 value) {
  set_has_match_id();
  match_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData.match_id)
}

// optional uint32 series_id = 2;
bool CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::has_series_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::set_has_series_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::clear_has_series_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::clear_series_id() {
  series_id_ = 0u;
  clear_has_series_id();
}
::google::protobuf::uint32 CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::series_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData.series_id)
  return series_id_;
}
void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::set_series_id(::google::protobuf::uint32 value) {
  set_has_series_id();
  series_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData.series_id)
}

// optional uint32 series_num = 3;
bool CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::has_series_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::set_has_series_num() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::clear_has_series_num() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::clear_series_num() {
  series_num_ = 0u;
  clear_has_series_num();
}
::google::protobuf::uint32 CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::series_num() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData.series_num)
  return series_num_;
}
void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::set_series_num(::google::protobuf::uint32 value) {
  set_has_series_num();
  series_num_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData.series_num)
}

// optional uint32 series_type = 4;
bool CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::has_series_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::set_has_series_type() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::clear_has_series_type() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::clear_series_type() {
  series_type_ = 0u;
  clear_has_series_type();
}
::google::protobuf::uint32 CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::series_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData.series_type)
  return series_type_;
}
void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::set_series_type(::google::protobuf::uint32 value) {
  set_has_series_type();
  series_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData.series_type)
}

// optional uint32 league_tier = 5;
bool CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::has_league_tier() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::set_has_league_tier() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::clear_has_league_tier() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::clear_league_tier() {
  league_tier_ = 0u;
  clear_has_league_tier();
}
::google::protobuf::uint32 CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::league_tier() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData.league_tier)
  return league_tier_;
}
void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::set_league_tier(::google::protobuf::uint32 value) {
  set_has_league_tier();
  league_tier_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData.league_tier)
}

// optional uint32 league_id = 6;
bool CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::has_league_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::set_has_league_id() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::clear_has_league_id() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::clear_league_id() {
  league_id_ = 0u;
  clear_has_league_id();
}
::google::protobuf::uint32 CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::league_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData.league_id)
  return league_id_;
}
void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::set_league_id(::google::protobuf::uint32 value) {
  set_has_league_id();
  league_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData.league_id)
}

// optional uint32 opposing_team_id = 7;
bool CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::has_opposing_team_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::set_has_opposing_team_id() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::clear_has_opposing_team_id() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::clear_opposing_team_id() {
  opposing_team_id_ = 0u;
  clear_has_opposing_team_id();
}
::google::protobuf::uint32 CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::opposing_team_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData.opposing_team_id)
  return opposing_team_id_;
}
void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::set_opposing_team_id(::google::protobuf::uint32 value) {
  set_has_opposing_team_id();
  opposing_team_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData.opposing_team_id)
}

// optional uint64 opposing_team_logo = 8;
bool CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::has_opposing_team_logo() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::set_has_opposing_team_logo() {
  _has_bits_[0] |= 0x00000100u;
}
void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::clear_has_opposing_team_logo() {
  _has_bits_[0] &= ~0x00000100u;
}
void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::clear_opposing_team_logo() {
  opposing_team_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_opposing_team_logo();
}
::google::protobuf::uint64 CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::opposing_team_logo() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData.opposing_team_logo)
  return opposing_team_logo_;
}
void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::set_opposing_team_logo(::google::protobuf::uint64 value) {
  set_has_opposing_team_logo();
  opposing_team_logo_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData.opposing_team_logo)
}

// optional string opposing_team_name = 9;
bool CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::has_opposing_team_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::set_has_opposing_team_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::clear_has_opposing_team_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::clear_opposing_team_name() {
  opposing_team_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_opposing_team_name();
}
const ::std::string& CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::opposing_team_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData.opposing_team_name)
  return opposing_team_name_.GetNoArena();
}
void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::set_opposing_team_name(const ::std::string& value) {
  set_has_opposing_team_name();
  opposing_team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData.opposing_team_name)
}
#if LANG_CXX11
void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::set_opposing_team_name(::std::string&& value) {
  set_has_opposing_team_name();
  opposing_team_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData.opposing_team_name)
}
#endif
void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::set_opposing_team_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_opposing_team_name();
  opposing_team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData.opposing_team_name)
}
void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::set_opposing_team_name(const char* value, size_t size) {
  set_has_opposing_team_name();
  opposing_team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData.opposing_team_name)
}
::std::string* CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::mutable_opposing_team_name() {
  set_has_opposing_team_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData.opposing_team_name)
  return opposing_team_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::release_opposing_team_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData.opposing_team_name)
  clear_has_opposing_team_name();
  return opposing_team_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::set_allocated_opposing_team_name(::std::string* opposing_team_name) {
  if (opposing_team_name != NULL) {
    set_has_opposing_team_name();
  } else {
    clear_has_opposing_team_name();
  }
  opposing_team_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), opposing_team_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData.opposing_team_name)
}

// optional uint32 owned_by = 11;
bool CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::has_owned_by() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::set_has_owned_by() {
  _has_bits_[0] |= 0x00000200u;
}
void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::clear_has_owned_by() {
  _has_bits_[0] &= ~0x00000200u;
}
void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::clear_owned_by() {
  owned_by_ = 0u;
  clear_has_owned_by();
}
::google::protobuf::uint32 CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::owned_by() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData.owned_by)
  return owned_by_;
}
void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::set_owned_by(::google::protobuf::uint32 value) {
  set_has_owned_by();
  owned_by_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData.owned_by)
}

// optional bool benched = 12;
bool CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::has_benched() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::set_has_benched() {
  _has_bits_[0] |= 0x00000400u;
}
void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::clear_has_benched() {
  _has_bits_[0] &= ~0x00000400u;
}
void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::clear_benched() {
  benched_ = false;
  clear_has_benched();
}
bool CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::benched() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData.benched)
  return benched_;
}
void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::set_benched(bool value) {
  set_has_benched();
  benched_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData.benched)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyPlayerScoreDetailsResponse::kResultFieldNumber;
const int CMsgDOTAFantasyPlayerScoreDetailsResponse::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyPlayerScoreDetailsResponse::CMsgDOTAFantasyPlayerScoreDetailsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse)
}
CMsgDOTAFantasyPlayerScoreDetailsResponse::CMsgDOTAFantasyPlayerScoreDetailsResponse(const CMsgDOTAFantasyPlayerScoreDetailsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse)
}

void CMsgDOTAFantasyPlayerScoreDetailsResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
}

CMsgDOTAFantasyPlayerScoreDetailsResponse::~CMsgDOTAFantasyPlayerScoreDetailsResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse)
  SharedDtor();
}

void CMsgDOTAFantasyPlayerScoreDetailsResponse::SharedDtor() {
}

void CMsgDOTAFantasyPlayerScoreDetailsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyPlayerScoreDetailsResponse::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAFantasyPlayerScoreDetailsResponse& CMsgDOTAFantasyPlayerScoreDetailsResponse::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAFantasyPlayerScoreDetailsResponse* CMsgDOTAFantasyPlayerScoreDetailsResponse::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyPlayerScoreDetailsResponse* n = new CMsgDOTAFantasyPlayerScoreDetailsResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyPlayerScoreDetailsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse)
  data_.Clear();
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAFantasyPlayerScoreDetailsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult_IsValid(value)) {
            set_result(static_cast< ::proto::dota::CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse)
  return false;
#undef DO_
}

void CMsgDOTAFantasyPlayerScoreDetailsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // repeated .proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData data = 2;
  for (unsigned int i = 0, n = this->data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse)
}

::google::protobuf::uint8* CMsgDOTAFantasyPlayerScoreDetailsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // repeated .proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData data = 2;
  for (unsigned int i = 0, n = this->data_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->data(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse)
  return target;
}

size_t CMsgDOTAFantasyPlayerScoreDetailsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData data = 2;
  {
    unsigned int count = this->data_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data(i));
    }
  }

  // optional .proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.EResult result = 1 [default = SUCCESS];
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyPlayerScoreDetailsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyPlayerScoreDetailsResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyPlayerScoreDetailsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyPlayerScoreDetailsResponse::MergeFrom(const CMsgDOTAFantasyPlayerScoreDetailsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  if (from.has_result()) {
    set_result(from.result());
  }
}

void CMsgDOTAFantasyPlayerScoreDetailsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyPlayerScoreDetailsResponse::CopyFrom(const CMsgDOTAFantasyPlayerScoreDetailsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyPlayerScoreDetailsResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyPlayerScoreDetailsResponse::Swap(CMsgDOTAFantasyPlayerScoreDetailsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyPlayerScoreDetailsResponse::InternalSwap(CMsgDOTAFantasyPlayerScoreDetailsResponse* other) {
  data_.InternalSwap(&other->data_);
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyPlayerScoreDetailsResponse::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyPlayerScoreDetailsResponse

// optional .proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.EResult result = 1 [default = SUCCESS];
bool CMsgDOTAFantasyPlayerScoreDetailsResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyPlayerScoreDetailsResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyPlayerScoreDetailsResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyPlayerScoreDetailsResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
::proto::dota::CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult CMsgDOTAFantasyPlayerScoreDetailsResponse::result() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.result)
  return static_cast< ::proto::dota::CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult >(result_);
}
void CMsgDOTAFantasyPlayerScoreDetailsResponse::set_result(::proto::dota::CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult value) {
  assert(::proto::dota::CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.result)
}

// repeated .proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData data = 2;
int CMsgDOTAFantasyPlayerScoreDetailsResponse::data_size() const {
  return data_.size();
}
void CMsgDOTAFantasyPlayerScoreDetailsResponse::clear_data() {
  data_.Clear();
}
const ::proto::dota::CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData& CMsgDOTAFantasyPlayerScoreDetailsResponse::data(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.data)
  return data_.Get(index);
}
::proto::dota::CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData* CMsgDOTAFantasyPlayerScoreDetailsResponse::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.data)
  return data_.Mutable(index);
}
::proto::dota::CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData* CMsgDOTAFantasyPlayerScoreDetailsResponse::add_data() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.data)
  return data_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData >*
CMsgDOTAFantasyPlayerScoreDetailsResponse::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.data)
  return &data_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData >&
CMsgDOTAFantasyPlayerScoreDetailsResponse::data() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTAFantasyPlayerScoreDetailsResponse.data)
  return data_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAPassportVoteTeamGuess::kLeagueIdFieldNumber;
const int CMsgDOTAPassportVoteTeamGuess::kWinnerIdFieldNumber;
const int CMsgDOTAPassportVoteTeamGuess::kRunnerupIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAPassportVoteTeamGuess::CMsgDOTAPassportVoteTeamGuess()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAPassportVoteTeamGuess)
}
CMsgDOTAPassportVoteTeamGuess::CMsgDOTAPassportVoteTeamGuess(const CMsgDOTAPassportVoteTeamGuess& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&league_id_, &from.league_id_,
    reinterpret_cast<char*>(&runnerup_id_) -
    reinterpret_cast<char*>(&league_id_) + sizeof(runnerup_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAPassportVoteTeamGuess)
}

void CMsgDOTAPassportVoteTeamGuess::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&league_id_, 0, reinterpret_cast<char*>(&runnerup_id_) -
    reinterpret_cast<char*>(&league_id_) + sizeof(runnerup_id_));
}

CMsgDOTAPassportVoteTeamGuess::~CMsgDOTAPassportVoteTeamGuess() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAPassportVoteTeamGuess)
  SharedDtor();
}

void CMsgDOTAPassportVoteTeamGuess::SharedDtor() {
}

void CMsgDOTAPassportVoteTeamGuess::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAPassportVoteTeamGuess::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAPassportVoteTeamGuess& CMsgDOTAPassportVoteTeamGuess::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAPassportVoteTeamGuess* CMsgDOTAPassportVoteTeamGuess::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAPassportVoteTeamGuess* n = new CMsgDOTAPassportVoteTeamGuess;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAPassportVoteTeamGuess::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAPassportVoteTeamGuess)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&league_id_, 0, reinterpret_cast<char*>(&runnerup_id_) -
      reinterpret_cast<char*>(&league_id_) + sizeof(runnerup_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAPassportVoteTeamGuess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAPassportVoteTeamGuess)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 league_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_league_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 winner_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_winner_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &winner_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 runnerup_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_runnerup_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &runnerup_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAPassportVoteTeamGuess)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAPassportVoteTeamGuess)
  return false;
#undef DO_
}

void CMsgDOTAPassportVoteTeamGuess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAPassportVoteTeamGuess)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->league_id(), output);
  }

  // optional uint32 winner_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->winner_id(), output);
  }

  // optional uint32 runnerup_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->runnerup_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAPassportVoteTeamGuess)
}

::google::protobuf::uint8* CMsgDOTAPassportVoteTeamGuess::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAPassportVoteTeamGuess)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->league_id(), target);
  }

  // optional uint32 winner_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->winner_id(), target);
  }

  // optional uint32 runnerup_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->runnerup_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAPassportVoteTeamGuess)
  return target;
}

size_t CMsgDOTAPassportVoteTeamGuess::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAPassportVoteTeamGuess)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 league_id = 1;
    if (has_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->league_id());
    }

    // optional uint32 winner_id = 2;
    if (has_winner_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->winner_id());
    }

    // optional uint32 runnerup_id = 3;
    if (has_runnerup_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->runnerup_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAPassportVoteTeamGuess::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAPassportVoteTeamGuess)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAPassportVoteTeamGuess* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAPassportVoteTeamGuess>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAPassportVoteTeamGuess)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAPassportVoteTeamGuess)
    MergeFrom(*source);
  }
}

void CMsgDOTAPassportVoteTeamGuess::MergeFrom(const CMsgDOTAPassportVoteTeamGuess& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAPassportVoteTeamGuess)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      league_id_ = from.league_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      winner_id_ = from.winner_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      runnerup_id_ = from.runnerup_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAPassportVoteTeamGuess::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAPassportVoteTeamGuess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAPassportVoteTeamGuess::CopyFrom(const CMsgDOTAPassportVoteTeamGuess& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAPassportVoteTeamGuess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAPassportVoteTeamGuess::IsInitialized() const {
  return true;
}

void CMsgDOTAPassportVoteTeamGuess::Swap(CMsgDOTAPassportVoteTeamGuess* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAPassportVoteTeamGuess::InternalSwap(CMsgDOTAPassportVoteTeamGuess* other) {
  std::swap(league_id_, other->league_id_);
  std::swap(winner_id_, other->winner_id_);
  std::swap(runnerup_id_, other->runnerup_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAPassportVoteTeamGuess::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAPassportVoteTeamGuess

// optional uint32 league_id = 1;
bool CMsgDOTAPassportVoteTeamGuess::has_league_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAPassportVoteTeamGuess::set_has_league_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAPassportVoteTeamGuess::clear_has_league_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAPassportVoteTeamGuess::clear_league_id() {
  league_id_ = 0u;
  clear_has_league_id();
}
::google::protobuf::uint32 CMsgDOTAPassportVoteTeamGuess::league_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAPassportVoteTeamGuess.league_id)
  return league_id_;
}
void CMsgDOTAPassportVoteTeamGuess::set_league_id(::google::protobuf::uint32 value) {
  set_has_league_id();
  league_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAPassportVoteTeamGuess.league_id)
}

// optional uint32 winner_id = 2;
bool CMsgDOTAPassportVoteTeamGuess::has_winner_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAPassportVoteTeamGuess::set_has_winner_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAPassportVoteTeamGuess::clear_has_winner_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAPassportVoteTeamGuess::clear_winner_id() {
  winner_id_ = 0u;
  clear_has_winner_id();
}
::google::protobuf::uint32 CMsgDOTAPassportVoteTeamGuess::winner_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAPassportVoteTeamGuess.winner_id)
  return winner_id_;
}
void CMsgDOTAPassportVoteTeamGuess::set_winner_id(::google::protobuf::uint32 value) {
  set_has_winner_id();
  winner_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAPassportVoteTeamGuess.winner_id)
}

// optional uint32 runnerup_id = 3;
bool CMsgDOTAPassportVoteTeamGuess::has_runnerup_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAPassportVoteTeamGuess::set_has_runnerup_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAPassportVoteTeamGuess::clear_has_runnerup_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAPassportVoteTeamGuess::clear_runnerup_id() {
  runnerup_id_ = 0u;
  clear_has_runnerup_id();
}
::google::protobuf::uint32 CMsgDOTAPassportVoteTeamGuess::runnerup_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAPassportVoteTeamGuess.runnerup_id)
  return runnerup_id_;
}
void CMsgDOTAPassportVoteTeamGuess::set_runnerup_id(::google::protobuf::uint32 value) {
  set_has_runnerup_id();
  runnerup_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAPassportVoteTeamGuess.runnerup_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAPassportVoteGenericSelection::kSelectionIndexFieldNumber;
const int CMsgDOTAPassportVoteGenericSelection::kSelectionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAPassportVoteGenericSelection::CMsgDOTAPassportVoteGenericSelection()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAPassportVoteGenericSelection)
}
CMsgDOTAPassportVoteGenericSelection::CMsgDOTAPassportVoteGenericSelection(const CMsgDOTAPassportVoteGenericSelection& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&selection_index_, &from.selection_index_,
    reinterpret_cast<char*>(&selection_) -
    reinterpret_cast<char*>(&selection_index_) + sizeof(selection_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAPassportVoteGenericSelection)
}

void CMsgDOTAPassportVoteGenericSelection::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&selection_index_, 0, reinterpret_cast<char*>(&selection_) -
    reinterpret_cast<char*>(&selection_index_) + sizeof(selection_));
}

CMsgDOTAPassportVoteGenericSelection::~CMsgDOTAPassportVoteGenericSelection() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAPassportVoteGenericSelection)
  SharedDtor();
}

void CMsgDOTAPassportVoteGenericSelection::SharedDtor() {
}

void CMsgDOTAPassportVoteGenericSelection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAPassportVoteGenericSelection::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAPassportVoteGenericSelection& CMsgDOTAPassportVoteGenericSelection::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAPassportVoteGenericSelection* CMsgDOTAPassportVoteGenericSelection::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAPassportVoteGenericSelection* n = new CMsgDOTAPassportVoteGenericSelection;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAPassportVoteGenericSelection::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAPassportVoteGenericSelection)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&selection_index_, 0, reinterpret_cast<char*>(&selection_) -
      reinterpret_cast<char*>(&selection_index_) + sizeof(selection_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAPassportVoteGenericSelection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAPassportVoteGenericSelection)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.DOTA_2013PassportSelectionIndices selection_index = 1 [default = PP13_SEL_ALLSTAR_PLAYER_0];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTA_2013PassportSelectionIndices_IsValid(value)) {
            set_selection_index(static_cast< ::proto::dota::DOTA_2013PassportSelectionIndices >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 selection = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_selection();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &selection_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAPassportVoteGenericSelection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAPassportVoteGenericSelection)
  return false;
#undef DO_
}

void CMsgDOTAPassportVoteGenericSelection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAPassportVoteGenericSelection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.DOTA_2013PassportSelectionIndices selection_index = 1 [default = PP13_SEL_ALLSTAR_PLAYER_0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->selection_index(), output);
  }

  // optional uint32 selection = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->selection(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAPassportVoteGenericSelection)
}

::google::protobuf::uint8* CMsgDOTAPassportVoteGenericSelection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAPassportVoteGenericSelection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.DOTA_2013PassportSelectionIndices selection_index = 1 [default = PP13_SEL_ALLSTAR_PLAYER_0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->selection_index(), target);
  }

  // optional uint32 selection = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->selection(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAPassportVoteGenericSelection)
  return target;
}

size_t CMsgDOTAPassportVoteGenericSelection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAPassportVoteGenericSelection)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .proto.dota.DOTA_2013PassportSelectionIndices selection_index = 1 [default = PP13_SEL_ALLSTAR_PLAYER_0];
    if (has_selection_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->selection_index());
    }

    // optional uint32 selection = 2;
    if (has_selection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->selection());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAPassportVoteGenericSelection::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAPassportVoteGenericSelection)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAPassportVoteGenericSelection* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAPassportVoteGenericSelection>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAPassportVoteGenericSelection)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAPassportVoteGenericSelection)
    MergeFrom(*source);
  }
}

void CMsgDOTAPassportVoteGenericSelection::MergeFrom(const CMsgDOTAPassportVoteGenericSelection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAPassportVoteGenericSelection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      selection_index_ = from.selection_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      selection_ = from.selection_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAPassportVoteGenericSelection::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAPassportVoteGenericSelection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAPassportVoteGenericSelection::CopyFrom(const CMsgDOTAPassportVoteGenericSelection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAPassportVoteGenericSelection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAPassportVoteGenericSelection::IsInitialized() const {
  return true;
}

void CMsgDOTAPassportVoteGenericSelection::Swap(CMsgDOTAPassportVoteGenericSelection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAPassportVoteGenericSelection::InternalSwap(CMsgDOTAPassportVoteGenericSelection* other) {
  std::swap(selection_index_, other->selection_index_);
  std::swap(selection_, other->selection_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAPassportVoteGenericSelection::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAPassportVoteGenericSelection

// optional .proto.dota.DOTA_2013PassportSelectionIndices selection_index = 1 [default = PP13_SEL_ALLSTAR_PLAYER_0];
bool CMsgDOTAPassportVoteGenericSelection::has_selection_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAPassportVoteGenericSelection::set_has_selection_index() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAPassportVoteGenericSelection::clear_has_selection_index() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAPassportVoteGenericSelection::clear_selection_index() {
  selection_index_ = 0;
  clear_has_selection_index();
}
::proto::dota::DOTA_2013PassportSelectionIndices CMsgDOTAPassportVoteGenericSelection::selection_index() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAPassportVoteGenericSelection.selection_index)
  return static_cast< ::proto::dota::DOTA_2013PassportSelectionIndices >(selection_index_);
}
void CMsgDOTAPassportVoteGenericSelection::set_selection_index(::proto::dota::DOTA_2013PassportSelectionIndices value) {
  assert(::proto::dota::DOTA_2013PassportSelectionIndices_IsValid(value));
  set_has_selection_index();
  selection_index_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAPassportVoteGenericSelection.selection_index)
}

// optional uint32 selection = 2;
bool CMsgDOTAPassportVoteGenericSelection::has_selection() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAPassportVoteGenericSelection::set_has_selection() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAPassportVoteGenericSelection::clear_has_selection() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAPassportVoteGenericSelection::clear_selection() {
  selection_ = 0u;
  clear_has_selection();
}
::google::protobuf::uint32 CMsgDOTAPassportVoteGenericSelection::selection() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAPassportVoteGenericSelection.selection)
  return selection_;
}
void CMsgDOTAPassportVoteGenericSelection::set_selection(::google::protobuf::uint32 value) {
  set_has_selection();
  selection_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAPassportVoteGenericSelection.selection)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAPassportStampedPlayer::kSteamIdFieldNumber;
const int CMsgDOTAPassportStampedPlayer::kStampLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAPassportStampedPlayer::CMsgDOTAPassportStampedPlayer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAPassportStampedPlayer)
}
CMsgDOTAPassportStampedPlayer::CMsgDOTAPassportStampedPlayer(const CMsgDOTAPassportStampedPlayer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steam_id_, &from.steam_id_,
    reinterpret_cast<char*>(&stamp_level_) -
    reinterpret_cast<char*>(&steam_id_) + sizeof(stamp_level_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAPassportStampedPlayer)
}

void CMsgDOTAPassportStampedPlayer::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&steam_id_, 0, reinterpret_cast<char*>(&stamp_level_) -
    reinterpret_cast<char*>(&steam_id_) + sizeof(stamp_level_));
}

CMsgDOTAPassportStampedPlayer::~CMsgDOTAPassportStampedPlayer() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAPassportStampedPlayer)
  SharedDtor();
}

void CMsgDOTAPassportStampedPlayer::SharedDtor() {
}

void CMsgDOTAPassportStampedPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAPassportStampedPlayer::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAPassportStampedPlayer& CMsgDOTAPassportStampedPlayer::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAPassportStampedPlayer* CMsgDOTAPassportStampedPlayer::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAPassportStampedPlayer* n = new CMsgDOTAPassportStampedPlayer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAPassportStampedPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAPassportStampedPlayer)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&steam_id_, 0, reinterpret_cast<char*>(&stamp_level_) -
      reinterpret_cast<char*>(&steam_id_) + sizeof(stamp_level_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAPassportStampedPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAPassportStampedPlayer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 steam_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_steam_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 stamp_level = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_stamp_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stamp_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAPassportStampedPlayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAPassportStampedPlayer)
  return false;
#undef DO_
}

void CMsgDOTAPassportStampedPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAPassportStampedPlayer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->steam_id(), output);
  }

  // optional uint32 stamp_level = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->stamp_level(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAPassportStampedPlayer)
}

::google::protobuf::uint8* CMsgDOTAPassportStampedPlayer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAPassportStampedPlayer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->steam_id(), target);
  }

  // optional uint32 stamp_level = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->stamp_level(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAPassportStampedPlayer)
  return target;
}

size_t CMsgDOTAPassportStampedPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAPassportStampedPlayer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 steam_id = 1;
    if (has_steam_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->steam_id());
    }

    // optional uint32 stamp_level = 2;
    if (has_stamp_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stamp_level());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAPassportStampedPlayer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAPassportStampedPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAPassportStampedPlayer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAPassportStampedPlayer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAPassportStampedPlayer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAPassportStampedPlayer)
    MergeFrom(*source);
  }
}

void CMsgDOTAPassportStampedPlayer::MergeFrom(const CMsgDOTAPassportStampedPlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAPassportStampedPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      stamp_level_ = from.stamp_level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAPassportStampedPlayer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAPassportStampedPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAPassportStampedPlayer::CopyFrom(const CMsgDOTAPassportStampedPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAPassportStampedPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAPassportStampedPlayer::IsInitialized() const {
  return true;
}

void CMsgDOTAPassportStampedPlayer::Swap(CMsgDOTAPassportStampedPlayer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAPassportStampedPlayer::InternalSwap(CMsgDOTAPassportStampedPlayer* other) {
  std::swap(steam_id_, other->steam_id_);
  std::swap(stamp_level_, other->stamp_level_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAPassportStampedPlayer::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAPassportStampedPlayer

// optional uint64 steam_id = 1;
bool CMsgDOTAPassportStampedPlayer::has_steam_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAPassportStampedPlayer::set_has_steam_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAPassportStampedPlayer::clear_has_steam_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAPassportStampedPlayer::clear_steam_id() {
  steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id();
}
::google::protobuf::uint64 CMsgDOTAPassportStampedPlayer::steam_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAPassportStampedPlayer.steam_id)
  return steam_id_;
}
void CMsgDOTAPassportStampedPlayer::set_steam_id(::google::protobuf::uint64 value) {
  set_has_steam_id();
  steam_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAPassportStampedPlayer.steam_id)
}

// optional uint32 stamp_level = 2;
bool CMsgDOTAPassportStampedPlayer::has_stamp_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAPassportStampedPlayer::set_has_stamp_level() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAPassportStampedPlayer::clear_has_stamp_level() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAPassportStampedPlayer::clear_stamp_level() {
  stamp_level_ = 0u;
  clear_has_stamp_level();
}
::google::protobuf::uint32 CMsgDOTAPassportStampedPlayer::stamp_level() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAPassportStampedPlayer.stamp_level)
  return stamp_level_;
}
void CMsgDOTAPassportStampedPlayer::set_stamp_level(::google::protobuf::uint32 value) {
  set_has_stamp_level();
  stamp_level_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAPassportStampedPlayer.stamp_level)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAPassportPlayerCardChallenge::kChallengeIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAPassportPlayerCardChallenge::CMsgDOTAPassportPlayerCardChallenge()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAPassportPlayerCardChallenge)
}
CMsgDOTAPassportPlayerCardChallenge::CMsgDOTAPassportPlayerCardChallenge(const CMsgDOTAPassportPlayerCardChallenge& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  challenge_id_ = from.challenge_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAPassportPlayerCardChallenge)
}

void CMsgDOTAPassportPlayerCardChallenge::SharedCtor() {
  _cached_size_ = 0;
  challenge_id_ = 0u;
}

CMsgDOTAPassportPlayerCardChallenge::~CMsgDOTAPassportPlayerCardChallenge() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAPassportPlayerCardChallenge)
  SharedDtor();
}

void CMsgDOTAPassportPlayerCardChallenge::SharedDtor() {
}

void CMsgDOTAPassportPlayerCardChallenge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAPassportPlayerCardChallenge::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAPassportPlayerCardChallenge& CMsgDOTAPassportPlayerCardChallenge::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAPassportPlayerCardChallenge* CMsgDOTAPassportPlayerCardChallenge::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAPassportPlayerCardChallenge* n = new CMsgDOTAPassportPlayerCardChallenge;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAPassportPlayerCardChallenge::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAPassportPlayerCardChallenge)
  challenge_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAPassportPlayerCardChallenge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAPassportPlayerCardChallenge)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 challenge_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_challenge_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &challenge_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAPassportPlayerCardChallenge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAPassportPlayerCardChallenge)
  return false;
#undef DO_
}

void CMsgDOTAPassportPlayerCardChallenge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAPassportPlayerCardChallenge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 challenge_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->challenge_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAPassportPlayerCardChallenge)
}

::google::protobuf::uint8* CMsgDOTAPassportPlayerCardChallenge::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAPassportPlayerCardChallenge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 challenge_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->challenge_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAPassportPlayerCardChallenge)
  return target;
}

size_t CMsgDOTAPassportPlayerCardChallenge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAPassportPlayerCardChallenge)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 challenge_id = 1;
  if (has_challenge_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->challenge_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAPassportPlayerCardChallenge::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAPassportPlayerCardChallenge)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAPassportPlayerCardChallenge* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAPassportPlayerCardChallenge>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAPassportPlayerCardChallenge)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAPassportPlayerCardChallenge)
    MergeFrom(*source);
  }
}

void CMsgDOTAPassportPlayerCardChallenge::MergeFrom(const CMsgDOTAPassportPlayerCardChallenge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAPassportPlayerCardChallenge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_challenge_id()) {
    set_challenge_id(from.challenge_id());
  }
}

void CMsgDOTAPassportPlayerCardChallenge::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAPassportPlayerCardChallenge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAPassportPlayerCardChallenge::CopyFrom(const CMsgDOTAPassportPlayerCardChallenge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAPassportPlayerCardChallenge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAPassportPlayerCardChallenge::IsInitialized() const {
  return true;
}

void CMsgDOTAPassportPlayerCardChallenge::Swap(CMsgDOTAPassportPlayerCardChallenge* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAPassportPlayerCardChallenge::InternalSwap(CMsgDOTAPassportPlayerCardChallenge* other) {
  std::swap(challenge_id_, other->challenge_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAPassportPlayerCardChallenge::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAPassportPlayerCardChallenge

// optional uint32 challenge_id = 1;
bool CMsgDOTAPassportPlayerCardChallenge::has_challenge_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAPassportPlayerCardChallenge::set_has_challenge_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAPassportPlayerCardChallenge::clear_has_challenge_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAPassportPlayerCardChallenge::clear_challenge_id() {
  challenge_id_ = 0u;
  clear_has_challenge_id();
}
::google::protobuf::uint32 CMsgDOTAPassportPlayerCardChallenge::challenge_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAPassportPlayerCardChallenge.challenge_id)
  return challenge_id_;
}
void CMsgDOTAPassportPlayerCardChallenge::set_challenge_id(::google::protobuf::uint32 value) {
  set_has_challenge_id();
  challenge_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAPassportPlayerCardChallenge.challenge_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAPassportVote::kTeamVotesFieldNumber;
const int CMsgDOTAPassportVote::kGenericSelectionsFieldNumber;
const int CMsgDOTAPassportVote::kStampedPlayersFieldNumber;
const int CMsgDOTAPassportVote::kPlayerCardChallengesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAPassportVote::CMsgDOTAPassportVote()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAPassportVote)
}
CMsgDOTAPassportVote::CMsgDOTAPassportVote(const CMsgDOTAPassportVote& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      team_votes_(from.team_votes_),
      generic_selections_(from.generic_selections_),
      stamped_players_(from.stamped_players_),
      player_card_challenges_(from.player_card_challenges_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAPassportVote)
}

void CMsgDOTAPassportVote::SharedCtor() {
  _cached_size_ = 0;
}

CMsgDOTAPassportVote::~CMsgDOTAPassportVote() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAPassportVote)
  SharedDtor();
}

void CMsgDOTAPassportVote::SharedDtor() {
}

void CMsgDOTAPassportVote::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAPassportVote::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAPassportVote& CMsgDOTAPassportVote::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAPassportVote* CMsgDOTAPassportVote::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAPassportVote* n = new CMsgDOTAPassportVote;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAPassportVote::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAPassportVote)
  team_votes_.Clear();
  generic_selections_.Clear();
  stamped_players_.Clear();
  player_card_challenges_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAPassportVote::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAPassportVote)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgDOTAPassportVoteTeamGuess team_votes = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_team_votes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTAPassportVoteGenericSelection generic_selections = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_generic_selections()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTAPassportStampedPlayer stamped_players = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stamped_players()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTAPassportPlayerCardChallenge player_card_challenges = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_card_challenges()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAPassportVote)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAPassportVote)
  return false;
#undef DO_
}

void CMsgDOTAPassportVote::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAPassportVote)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTAPassportVoteTeamGuess team_votes = 1;
  for (unsigned int i = 0, n = this->team_votes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->team_votes(i), output);
  }

  // repeated .proto.dota.CMsgDOTAPassportVoteGenericSelection generic_selections = 2;
  for (unsigned int i = 0, n = this->generic_selections_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->generic_selections(i), output);
  }

  // repeated .proto.dota.CMsgDOTAPassportStampedPlayer stamped_players = 3;
  for (unsigned int i = 0, n = this->stamped_players_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->stamped_players(i), output);
  }

  // repeated .proto.dota.CMsgDOTAPassportPlayerCardChallenge player_card_challenges = 4;
  for (unsigned int i = 0, n = this->player_card_challenges_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->player_card_challenges(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAPassportVote)
}

::google::protobuf::uint8* CMsgDOTAPassportVote::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAPassportVote)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTAPassportVoteTeamGuess team_votes = 1;
  for (unsigned int i = 0, n = this->team_votes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->team_votes(i), deterministic, target);
  }

  // repeated .proto.dota.CMsgDOTAPassportVoteGenericSelection generic_selections = 2;
  for (unsigned int i = 0, n = this->generic_selections_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->generic_selections(i), deterministic, target);
  }

  // repeated .proto.dota.CMsgDOTAPassportStampedPlayer stamped_players = 3;
  for (unsigned int i = 0, n = this->stamped_players_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->stamped_players(i), deterministic, target);
  }

  // repeated .proto.dota.CMsgDOTAPassportPlayerCardChallenge player_card_challenges = 4;
  for (unsigned int i = 0, n = this->player_card_challenges_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->player_card_challenges(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAPassportVote)
  return target;
}

size_t CMsgDOTAPassportVote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAPassportVote)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgDOTAPassportVoteTeamGuess team_votes = 1;
  {
    unsigned int count = this->team_votes_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->team_votes(i));
    }
  }

  // repeated .proto.dota.CMsgDOTAPassportVoteGenericSelection generic_selections = 2;
  {
    unsigned int count = this->generic_selections_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->generic_selections(i));
    }
  }

  // repeated .proto.dota.CMsgDOTAPassportStampedPlayer stamped_players = 3;
  {
    unsigned int count = this->stamped_players_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stamped_players(i));
    }
  }

  // repeated .proto.dota.CMsgDOTAPassportPlayerCardChallenge player_card_challenges = 4;
  {
    unsigned int count = this->player_card_challenges_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_card_challenges(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAPassportVote::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAPassportVote)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAPassportVote* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAPassportVote>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAPassportVote)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAPassportVote)
    MergeFrom(*source);
  }
}

void CMsgDOTAPassportVote::MergeFrom(const CMsgDOTAPassportVote& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAPassportVote)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  team_votes_.MergeFrom(from.team_votes_);
  generic_selections_.MergeFrom(from.generic_selections_);
  stamped_players_.MergeFrom(from.stamped_players_);
  player_card_challenges_.MergeFrom(from.player_card_challenges_);
}

void CMsgDOTAPassportVote::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAPassportVote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAPassportVote::CopyFrom(const CMsgDOTAPassportVote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAPassportVote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAPassportVote::IsInitialized() const {
  return true;
}

void CMsgDOTAPassportVote::Swap(CMsgDOTAPassportVote* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAPassportVote::InternalSwap(CMsgDOTAPassportVote* other) {
  team_votes_.InternalSwap(&other->team_votes_);
  generic_selections_.InternalSwap(&other->generic_selections_);
  stamped_players_.InternalSwap(&other->stamped_players_);
  player_card_challenges_.InternalSwap(&other->player_card_challenges_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAPassportVote::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAPassportVote

// repeated .proto.dota.CMsgDOTAPassportVoteTeamGuess team_votes = 1;
int CMsgDOTAPassportVote::team_votes_size() const {
  return team_votes_.size();
}
void CMsgDOTAPassportVote::clear_team_votes() {
  team_votes_.Clear();
}
const ::proto::dota::CMsgDOTAPassportVoteTeamGuess& CMsgDOTAPassportVote::team_votes(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAPassportVote.team_votes)
  return team_votes_.Get(index);
}
::proto::dota::CMsgDOTAPassportVoteTeamGuess* CMsgDOTAPassportVote::mutable_team_votes(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAPassportVote.team_votes)
  return team_votes_.Mutable(index);
}
::proto::dota::CMsgDOTAPassportVoteTeamGuess* CMsgDOTAPassportVote::add_team_votes() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTAPassportVote.team_votes)
  return team_votes_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAPassportVoteTeamGuess >*
CMsgDOTAPassportVote::mutable_team_votes() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTAPassportVote.team_votes)
  return &team_votes_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAPassportVoteTeamGuess >&
CMsgDOTAPassportVote::team_votes() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTAPassportVote.team_votes)
  return team_votes_;
}

// repeated .proto.dota.CMsgDOTAPassportVoteGenericSelection generic_selections = 2;
int CMsgDOTAPassportVote::generic_selections_size() const {
  return generic_selections_.size();
}
void CMsgDOTAPassportVote::clear_generic_selections() {
  generic_selections_.Clear();
}
const ::proto::dota::CMsgDOTAPassportVoteGenericSelection& CMsgDOTAPassportVote::generic_selections(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAPassportVote.generic_selections)
  return generic_selections_.Get(index);
}
::proto::dota::CMsgDOTAPassportVoteGenericSelection* CMsgDOTAPassportVote::mutable_generic_selections(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAPassportVote.generic_selections)
  return generic_selections_.Mutable(index);
}
::proto::dota::CMsgDOTAPassportVoteGenericSelection* CMsgDOTAPassportVote::add_generic_selections() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTAPassportVote.generic_selections)
  return generic_selections_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAPassportVoteGenericSelection >*
CMsgDOTAPassportVote::mutable_generic_selections() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTAPassportVote.generic_selections)
  return &generic_selections_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAPassportVoteGenericSelection >&
CMsgDOTAPassportVote::generic_selections() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTAPassportVote.generic_selections)
  return generic_selections_;
}

// repeated .proto.dota.CMsgDOTAPassportStampedPlayer stamped_players = 3;
int CMsgDOTAPassportVote::stamped_players_size() const {
  return stamped_players_.size();
}
void CMsgDOTAPassportVote::clear_stamped_players() {
  stamped_players_.Clear();
}
const ::proto::dota::CMsgDOTAPassportStampedPlayer& CMsgDOTAPassportVote::stamped_players(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAPassportVote.stamped_players)
  return stamped_players_.Get(index);
}
::proto::dota::CMsgDOTAPassportStampedPlayer* CMsgDOTAPassportVote::mutable_stamped_players(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAPassportVote.stamped_players)
  return stamped_players_.Mutable(index);
}
::proto::dota::CMsgDOTAPassportStampedPlayer* CMsgDOTAPassportVote::add_stamped_players() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTAPassportVote.stamped_players)
  return stamped_players_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAPassportStampedPlayer >*
CMsgDOTAPassportVote::mutable_stamped_players() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTAPassportVote.stamped_players)
  return &stamped_players_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAPassportStampedPlayer >&
CMsgDOTAPassportVote::stamped_players() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTAPassportVote.stamped_players)
  return stamped_players_;
}

// repeated .proto.dota.CMsgDOTAPassportPlayerCardChallenge player_card_challenges = 4;
int CMsgDOTAPassportVote::player_card_challenges_size() const {
  return player_card_challenges_.size();
}
void CMsgDOTAPassportVote::clear_player_card_challenges() {
  player_card_challenges_.Clear();
}
const ::proto::dota::CMsgDOTAPassportPlayerCardChallenge& CMsgDOTAPassportVote::player_card_challenges(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAPassportVote.player_card_challenges)
  return player_card_challenges_.Get(index);
}
::proto::dota::CMsgDOTAPassportPlayerCardChallenge* CMsgDOTAPassportVote::mutable_player_card_challenges(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAPassportVote.player_card_challenges)
  return player_card_challenges_.Mutable(index);
}
::proto::dota::CMsgDOTAPassportPlayerCardChallenge* CMsgDOTAPassportVote::add_player_card_challenges() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTAPassportVote.player_card_challenges)
  return player_card_challenges_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAPassportPlayerCardChallenge >*
CMsgDOTAPassportVote::mutable_player_card_challenges() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTAPassportVote.player_card_challenges)
  return &player_card_challenges_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAPassportPlayerCardChallenge >&
CMsgDOTAPassportVote::player_card_challenges() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTAPassportVote.player_card_challenges)
  return player_card_challenges_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientToGCGetPlayerCardRosterRequest::kLeagueIdFieldNumber;
const int CMsgClientToGCGetPlayerCardRosterRequest::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientToGCGetPlayerCardRosterRequest::CMsgClientToGCGetPlayerCardRosterRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgClientToGCGetPlayerCardRosterRequest)
}
CMsgClientToGCGetPlayerCardRosterRequest::CMsgClientToGCGetPlayerCardRosterRequest(const CMsgClientToGCGetPlayerCardRosterRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&league_id_, &from.league_id_,
    reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&league_id_) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgClientToGCGetPlayerCardRosterRequest)
}

void CMsgClientToGCGetPlayerCardRosterRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&league_id_, 0, reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&league_id_) + sizeof(timestamp_));
}

CMsgClientToGCGetPlayerCardRosterRequest::~CMsgClientToGCGetPlayerCardRosterRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgClientToGCGetPlayerCardRosterRequest)
  SharedDtor();
}

void CMsgClientToGCGetPlayerCardRosterRequest::SharedDtor() {
}

void CMsgClientToGCGetPlayerCardRosterRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientToGCGetPlayerCardRosterRequest::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientToGCGetPlayerCardRosterRequest& CMsgClientToGCGetPlayerCardRosterRequest::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientToGCGetPlayerCardRosterRequest* CMsgClientToGCGetPlayerCardRosterRequest::New(::google::protobuf::Arena* arena) const {
  CMsgClientToGCGetPlayerCardRosterRequest* n = new CMsgClientToGCGetPlayerCardRosterRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientToGCGetPlayerCardRosterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgClientToGCGetPlayerCardRosterRequest)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&league_id_, 0, reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&league_id_) + sizeof(timestamp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientToGCGetPlayerCardRosterRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgClientToGCGetPlayerCardRosterRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 league_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_league_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgClientToGCGetPlayerCardRosterRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgClientToGCGetPlayerCardRosterRequest)
  return false;
#undef DO_
}

void CMsgClientToGCGetPlayerCardRosterRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgClientToGCGetPlayerCardRosterRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->league_id(), output);
  }

  // optional uint32 timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgClientToGCGetPlayerCardRosterRequest)
}

::google::protobuf::uint8* CMsgClientToGCGetPlayerCardRosterRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgClientToGCGetPlayerCardRosterRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->league_id(), target);
  }

  // optional uint32 timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgClientToGCGetPlayerCardRosterRequest)
  return target;
}

size_t CMsgClientToGCGetPlayerCardRosterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgClientToGCGetPlayerCardRosterRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 league_id = 1;
    if (has_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->league_id());
    }

    // optional uint32 timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientToGCGetPlayerCardRosterRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgClientToGCGetPlayerCardRosterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientToGCGetPlayerCardRosterRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientToGCGetPlayerCardRosterRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgClientToGCGetPlayerCardRosterRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgClientToGCGetPlayerCardRosterRequest)
    MergeFrom(*source);
  }
}

void CMsgClientToGCGetPlayerCardRosterRequest::MergeFrom(const CMsgClientToGCGetPlayerCardRosterRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgClientToGCGetPlayerCardRosterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      league_id_ = from.league_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_ = from.timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientToGCGetPlayerCardRosterRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgClientToGCGetPlayerCardRosterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCGetPlayerCardRosterRequest::CopyFrom(const CMsgClientToGCGetPlayerCardRosterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgClientToGCGetPlayerCardRosterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCGetPlayerCardRosterRequest::IsInitialized() const {
  return true;
}

void CMsgClientToGCGetPlayerCardRosterRequest::Swap(CMsgClientToGCGetPlayerCardRosterRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientToGCGetPlayerCardRosterRequest::InternalSwap(CMsgClientToGCGetPlayerCardRosterRequest* other) {
  std::swap(league_id_, other->league_id_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientToGCGetPlayerCardRosterRequest::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientToGCGetPlayerCardRosterRequest

// optional uint32 league_id = 1;
bool CMsgClientToGCGetPlayerCardRosterRequest::has_league_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientToGCGetPlayerCardRosterRequest::set_has_league_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientToGCGetPlayerCardRosterRequest::clear_has_league_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientToGCGetPlayerCardRosterRequest::clear_league_id() {
  league_id_ = 0u;
  clear_has_league_id();
}
::google::protobuf::uint32 CMsgClientToGCGetPlayerCardRosterRequest::league_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientToGCGetPlayerCardRosterRequest.league_id)
  return league_id_;
}
void CMsgClientToGCGetPlayerCardRosterRequest::set_league_id(::google::protobuf::uint32 value) {
  set_has_league_id();
  league_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientToGCGetPlayerCardRosterRequest.league_id)
}

// optional uint32 timestamp = 2;
bool CMsgClientToGCGetPlayerCardRosterRequest::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientToGCGetPlayerCardRosterRequest::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientToGCGetPlayerCardRosterRequest::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientToGCGetPlayerCardRosterRequest::clear_timestamp() {
  timestamp_ = 0u;
  clear_has_timestamp();
}
::google::protobuf::uint32 CMsgClientToGCGetPlayerCardRosterRequest::timestamp() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientToGCGetPlayerCardRosterRequest.timestamp)
  return timestamp_;
}
void CMsgClientToGCGetPlayerCardRosterRequest::set_timestamp(::google::protobuf::uint32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientToGCGetPlayerCardRosterRequest.timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientToGCGetPlayerCardRosterResponse::kResultFieldNumber;
const int CMsgClientToGCGetPlayerCardRosterResponse::kPlayerCardItemIdFieldNumber;
const int CMsgClientToGCGetPlayerCardRosterResponse::kScoreFieldNumber;
const int CMsgClientToGCGetPlayerCardRosterResponse::kFinalizedFieldNumber;
const int CMsgClientToGCGetPlayerCardRosterResponse::kPercentileFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientToGCGetPlayerCardRosterResponse::CMsgClientToGCGetPlayerCardRosterResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgClientToGCGetPlayerCardRosterResponse)
}
CMsgClientToGCGetPlayerCardRosterResponse::CMsgClientToGCGetPlayerCardRosterResponse(const CMsgClientToGCGetPlayerCardRosterResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      player_card_item_id_(from.player_card_item_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    reinterpret_cast<char*>(&percentile_) -
    reinterpret_cast<char*>(&result_) + sizeof(percentile_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgClientToGCGetPlayerCardRosterResponse)
}

void CMsgClientToGCGetPlayerCardRosterResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&result_, 0, reinterpret_cast<char*>(&percentile_) -
    reinterpret_cast<char*>(&result_) + sizeof(percentile_));
}

CMsgClientToGCGetPlayerCardRosterResponse::~CMsgClientToGCGetPlayerCardRosterResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgClientToGCGetPlayerCardRosterResponse)
  SharedDtor();
}

void CMsgClientToGCGetPlayerCardRosterResponse::SharedDtor() {
}

void CMsgClientToGCGetPlayerCardRosterResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientToGCGetPlayerCardRosterResponse::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientToGCGetPlayerCardRosterResponse& CMsgClientToGCGetPlayerCardRosterResponse::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientToGCGetPlayerCardRosterResponse* CMsgClientToGCGetPlayerCardRosterResponse::New(::google::protobuf::Arena* arena) const {
  CMsgClientToGCGetPlayerCardRosterResponse* n = new CMsgClientToGCGetPlayerCardRosterResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientToGCGetPlayerCardRosterResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgClientToGCGetPlayerCardRosterResponse)
  player_card_item_id_.Clear();
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&result_, 0, reinterpret_cast<char*>(&percentile_) -
      reinterpret_cast<char*>(&result_) + sizeof(percentile_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientToGCGetPlayerCardRosterResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgClientToGCGetPlayerCardRosterResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgClientToGCGetPlayerCardRosterResponse.Result result = 1 [default = SUCCESS];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgClientToGCGetPlayerCardRosterResponse_Result_IsValid(value)) {
            set_result(static_cast< ::proto::dota::CMsgClientToGCGetPlayerCardRosterResponse_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 player_card_item_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16u, input, this->mutable_player_card_item_id())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_player_card_item_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float score = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool finalized = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_finalized();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &finalized_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float percentile = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {
          set_has_percentile();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &percentile_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgClientToGCGetPlayerCardRosterResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgClientToGCGetPlayerCardRosterResponse)
  return false;
#undef DO_
}

void CMsgClientToGCGetPlayerCardRosterResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgClientToGCGetPlayerCardRosterResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgClientToGCGetPlayerCardRosterResponse.Result result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // repeated uint64 player_card_item_id = 2;
  for (int i = 0, n = this->player_card_item_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->player_card_item_id(i), output);
  }

  // optional float score = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->score(), output);
  }

  // optional bool finalized = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->finalized(), output);
  }

  // optional float percentile = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->percentile(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgClientToGCGetPlayerCardRosterResponse)
}

::google::protobuf::uint8* CMsgClientToGCGetPlayerCardRosterResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgClientToGCGetPlayerCardRosterResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgClientToGCGetPlayerCardRosterResponse.Result result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // repeated uint64 player_card_item_id = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(2, this->player_card_item_id_, target);

  // optional float score = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->score(), target);
  }

  // optional bool finalized = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->finalized(), target);
  }

  // optional float percentile = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->percentile(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgClientToGCGetPlayerCardRosterResponse)
  return target;
}

size_t CMsgClientToGCGetPlayerCardRosterResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgClientToGCGetPlayerCardRosterResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint64 player_card_item_id = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->player_card_item_id_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->player_card_item_id_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional .proto.dota.CMsgClientToGCGetPlayerCardRosterResponse.Result result = 1 [default = SUCCESS];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional float score = 3;
    if (has_score()) {
      total_size += 1 + 4;
    }

    // optional bool finalized = 4;
    if (has_finalized()) {
      total_size += 1 + 1;
    }

    // optional float percentile = 5;
    if (has_percentile()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientToGCGetPlayerCardRosterResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgClientToGCGetPlayerCardRosterResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientToGCGetPlayerCardRosterResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientToGCGetPlayerCardRosterResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgClientToGCGetPlayerCardRosterResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgClientToGCGetPlayerCardRosterResponse)
    MergeFrom(*source);
  }
}

void CMsgClientToGCGetPlayerCardRosterResponse::MergeFrom(const CMsgClientToGCGetPlayerCardRosterResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgClientToGCGetPlayerCardRosterResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_card_item_id_.MergeFrom(from.player_card_item_id_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000002u) {
      score_ = from.score_;
    }
    if (cached_has_bits & 0x00000004u) {
      finalized_ = from.finalized_;
    }
    if (cached_has_bits & 0x00000008u) {
      percentile_ = from.percentile_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientToGCGetPlayerCardRosterResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgClientToGCGetPlayerCardRosterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCGetPlayerCardRosterResponse::CopyFrom(const CMsgClientToGCGetPlayerCardRosterResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgClientToGCGetPlayerCardRosterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCGetPlayerCardRosterResponse::IsInitialized() const {
  return true;
}

void CMsgClientToGCGetPlayerCardRosterResponse::Swap(CMsgClientToGCGetPlayerCardRosterResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientToGCGetPlayerCardRosterResponse::InternalSwap(CMsgClientToGCGetPlayerCardRosterResponse* other) {
  player_card_item_id_.InternalSwap(&other->player_card_item_id_);
  std::swap(result_, other->result_);
  std::swap(score_, other->score_);
  std::swap(finalized_, other->finalized_);
  std::swap(percentile_, other->percentile_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientToGCGetPlayerCardRosterResponse::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientToGCGetPlayerCardRosterResponse

// optional .proto.dota.CMsgClientToGCGetPlayerCardRosterResponse.Result result = 1 [default = SUCCESS];
bool CMsgClientToGCGetPlayerCardRosterResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientToGCGetPlayerCardRosterResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientToGCGetPlayerCardRosterResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientToGCGetPlayerCardRosterResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
::proto::dota::CMsgClientToGCGetPlayerCardRosterResponse_Result CMsgClientToGCGetPlayerCardRosterResponse::result() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientToGCGetPlayerCardRosterResponse.result)
  return static_cast< ::proto::dota::CMsgClientToGCGetPlayerCardRosterResponse_Result >(result_);
}
void CMsgClientToGCGetPlayerCardRosterResponse::set_result(::proto::dota::CMsgClientToGCGetPlayerCardRosterResponse_Result value) {
  assert(::proto::dota::CMsgClientToGCGetPlayerCardRosterResponse_Result_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientToGCGetPlayerCardRosterResponse.result)
}

// repeated uint64 player_card_item_id = 2;
int CMsgClientToGCGetPlayerCardRosterResponse::player_card_item_id_size() const {
  return player_card_item_id_.size();
}
void CMsgClientToGCGetPlayerCardRosterResponse::clear_player_card_item_id() {
  player_card_item_id_.Clear();
}
::google::protobuf::uint64 CMsgClientToGCGetPlayerCardRosterResponse::player_card_item_id(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientToGCGetPlayerCardRosterResponse.player_card_item_id)
  return player_card_item_id_.Get(index);
}
void CMsgClientToGCGetPlayerCardRosterResponse::set_player_card_item_id(int index, ::google::protobuf::uint64 value) {
  player_card_item_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientToGCGetPlayerCardRosterResponse.player_card_item_id)
}
void CMsgClientToGCGetPlayerCardRosterResponse::add_player_card_item_id(::google::protobuf::uint64 value) {
  player_card_item_id_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgClientToGCGetPlayerCardRosterResponse.player_card_item_id)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CMsgClientToGCGetPlayerCardRosterResponse::player_card_item_id() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgClientToGCGetPlayerCardRosterResponse.player_card_item_id)
  return player_card_item_id_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CMsgClientToGCGetPlayerCardRosterResponse::mutable_player_card_item_id() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgClientToGCGetPlayerCardRosterResponse.player_card_item_id)
  return &player_card_item_id_;
}

// optional float score = 3;
bool CMsgClientToGCGetPlayerCardRosterResponse::has_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientToGCGetPlayerCardRosterResponse::set_has_score() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientToGCGetPlayerCardRosterResponse::clear_has_score() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientToGCGetPlayerCardRosterResponse::clear_score() {
  score_ = 0;
  clear_has_score();
}
float CMsgClientToGCGetPlayerCardRosterResponse::score() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientToGCGetPlayerCardRosterResponse.score)
  return score_;
}
void CMsgClientToGCGetPlayerCardRosterResponse::set_score(float value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientToGCGetPlayerCardRosterResponse.score)
}

// optional bool finalized = 4;
bool CMsgClientToGCGetPlayerCardRosterResponse::has_finalized() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientToGCGetPlayerCardRosterResponse::set_has_finalized() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientToGCGetPlayerCardRosterResponse::clear_has_finalized() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientToGCGetPlayerCardRosterResponse::clear_finalized() {
  finalized_ = false;
  clear_has_finalized();
}
bool CMsgClientToGCGetPlayerCardRosterResponse::finalized() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientToGCGetPlayerCardRosterResponse.finalized)
  return finalized_;
}
void CMsgClientToGCGetPlayerCardRosterResponse::set_finalized(bool value) {
  set_has_finalized();
  finalized_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientToGCGetPlayerCardRosterResponse.finalized)
}

// optional float percentile = 5;
bool CMsgClientToGCGetPlayerCardRosterResponse::has_percentile() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgClientToGCGetPlayerCardRosterResponse::set_has_percentile() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgClientToGCGetPlayerCardRosterResponse::clear_has_percentile() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgClientToGCGetPlayerCardRosterResponse::clear_percentile() {
  percentile_ = 0;
  clear_has_percentile();
}
float CMsgClientToGCGetPlayerCardRosterResponse::percentile() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientToGCGetPlayerCardRosterResponse.percentile)
  return percentile_;
}
void CMsgClientToGCGetPlayerCardRosterResponse::set_percentile(float value) {
  set_has_percentile();
  percentile_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientToGCGetPlayerCardRosterResponse.percentile)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientToGCSetPlayerCardRosterRequest::kLeagueIdFieldNumber;
const int CMsgClientToGCSetPlayerCardRosterRequest::kTimestampFieldNumber;
const int CMsgClientToGCSetPlayerCardRosterRequest::kSlotFieldNumber;
const int CMsgClientToGCSetPlayerCardRosterRequest::kPlayerCardItemIdFieldNumber;
const int CMsgClientToGCSetPlayerCardRosterRequest::kEventIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientToGCSetPlayerCardRosterRequest::CMsgClientToGCSetPlayerCardRosterRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgClientToGCSetPlayerCardRosterRequest)
}
CMsgClientToGCSetPlayerCardRosterRequest::CMsgClientToGCSetPlayerCardRosterRequest(const CMsgClientToGCSetPlayerCardRosterRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&league_id_, &from.league_id_,
    reinterpret_cast<char*>(&event_id_) -
    reinterpret_cast<char*>(&league_id_) + sizeof(event_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgClientToGCSetPlayerCardRosterRequest)
}

void CMsgClientToGCSetPlayerCardRosterRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&league_id_, 0, reinterpret_cast<char*>(&event_id_) -
    reinterpret_cast<char*>(&league_id_) + sizeof(event_id_));
}

CMsgClientToGCSetPlayerCardRosterRequest::~CMsgClientToGCSetPlayerCardRosterRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgClientToGCSetPlayerCardRosterRequest)
  SharedDtor();
}

void CMsgClientToGCSetPlayerCardRosterRequest::SharedDtor() {
}

void CMsgClientToGCSetPlayerCardRosterRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientToGCSetPlayerCardRosterRequest::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientToGCSetPlayerCardRosterRequest& CMsgClientToGCSetPlayerCardRosterRequest::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientToGCSetPlayerCardRosterRequest* CMsgClientToGCSetPlayerCardRosterRequest::New(::google::protobuf::Arena* arena) const {
  CMsgClientToGCSetPlayerCardRosterRequest* n = new CMsgClientToGCSetPlayerCardRosterRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientToGCSetPlayerCardRosterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgClientToGCSetPlayerCardRosterRequest)
  if (_has_bits_[0 / 32] & 31u) {
    ::memset(&league_id_, 0, reinterpret_cast<char*>(&event_id_) -
      reinterpret_cast<char*>(&league_id_) + sizeof(event_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientToGCSetPlayerCardRosterRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgClientToGCSetPlayerCardRosterRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 league_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_league_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 slot = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_slot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 player_card_item_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_player_card_item_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_card_item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 event_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_event_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgClientToGCSetPlayerCardRosterRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgClientToGCSetPlayerCardRosterRequest)
  return false;
#undef DO_
}

void CMsgClientToGCSetPlayerCardRosterRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgClientToGCSetPlayerCardRosterRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->league_id(), output);
  }

  // optional uint32 timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->timestamp(), output);
  }

  // optional uint32 slot = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->slot(), output);
  }

  // optional uint64 player_card_item_id = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->player_card_item_id(), output);
  }

  // optional uint32 event_id = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->event_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgClientToGCSetPlayerCardRosterRequest)
}

::google::protobuf::uint8* CMsgClientToGCSetPlayerCardRosterRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgClientToGCSetPlayerCardRosterRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->league_id(), target);
  }

  // optional uint32 timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->timestamp(), target);
  }

  // optional uint32 slot = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->slot(), target);
  }

  // optional uint64 player_card_item_id = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->player_card_item_id(), target);
  }

  // optional uint32 event_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->event_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgClientToGCSetPlayerCardRosterRequest)
  return target;
}

size_t CMsgClientToGCSetPlayerCardRosterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgClientToGCSetPlayerCardRosterRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional uint32 league_id = 1;
    if (has_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->league_id());
    }

    // optional uint32 timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

    // optional uint64 player_card_item_id = 4;
    if (has_player_card_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_card_item_id());
    }

    // optional uint32 slot = 3;
    if (has_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot());
    }

    // optional uint32 event_id = 5;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientToGCSetPlayerCardRosterRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgClientToGCSetPlayerCardRosterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientToGCSetPlayerCardRosterRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientToGCSetPlayerCardRosterRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgClientToGCSetPlayerCardRosterRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgClientToGCSetPlayerCardRosterRequest)
    MergeFrom(*source);
  }
}

void CMsgClientToGCSetPlayerCardRosterRequest::MergeFrom(const CMsgClientToGCSetPlayerCardRosterRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgClientToGCSetPlayerCardRosterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      league_id_ = from.league_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      player_card_item_id_ = from.player_card_item_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      slot_ = from.slot_;
    }
    if (cached_has_bits & 0x00000010u) {
      event_id_ = from.event_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientToGCSetPlayerCardRosterRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgClientToGCSetPlayerCardRosterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCSetPlayerCardRosterRequest::CopyFrom(const CMsgClientToGCSetPlayerCardRosterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgClientToGCSetPlayerCardRosterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCSetPlayerCardRosterRequest::IsInitialized() const {
  return true;
}

void CMsgClientToGCSetPlayerCardRosterRequest::Swap(CMsgClientToGCSetPlayerCardRosterRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientToGCSetPlayerCardRosterRequest::InternalSwap(CMsgClientToGCSetPlayerCardRosterRequest* other) {
  std::swap(league_id_, other->league_id_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(player_card_item_id_, other->player_card_item_id_);
  std::swap(slot_, other->slot_);
  std::swap(event_id_, other->event_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientToGCSetPlayerCardRosterRequest::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientToGCSetPlayerCardRosterRequest

// optional uint32 league_id = 1;
bool CMsgClientToGCSetPlayerCardRosterRequest::has_league_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientToGCSetPlayerCardRosterRequest::set_has_league_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientToGCSetPlayerCardRosterRequest::clear_has_league_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientToGCSetPlayerCardRosterRequest::clear_league_id() {
  league_id_ = 0u;
  clear_has_league_id();
}
::google::protobuf::uint32 CMsgClientToGCSetPlayerCardRosterRequest::league_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientToGCSetPlayerCardRosterRequest.league_id)
  return league_id_;
}
void CMsgClientToGCSetPlayerCardRosterRequest::set_league_id(::google::protobuf::uint32 value) {
  set_has_league_id();
  league_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientToGCSetPlayerCardRosterRequest.league_id)
}

// optional uint32 timestamp = 2;
bool CMsgClientToGCSetPlayerCardRosterRequest::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientToGCSetPlayerCardRosterRequest::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientToGCSetPlayerCardRosterRequest::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientToGCSetPlayerCardRosterRequest::clear_timestamp() {
  timestamp_ = 0u;
  clear_has_timestamp();
}
::google::protobuf::uint32 CMsgClientToGCSetPlayerCardRosterRequest::timestamp() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientToGCSetPlayerCardRosterRequest.timestamp)
  return timestamp_;
}
void CMsgClientToGCSetPlayerCardRosterRequest::set_timestamp(::google::protobuf::uint32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientToGCSetPlayerCardRosterRequest.timestamp)
}

// optional uint32 slot = 3;
bool CMsgClientToGCSetPlayerCardRosterRequest::has_slot() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgClientToGCSetPlayerCardRosterRequest::set_has_slot() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgClientToGCSetPlayerCardRosterRequest::clear_has_slot() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgClientToGCSetPlayerCardRosterRequest::clear_slot() {
  slot_ = 0u;
  clear_has_slot();
}
::google::protobuf::uint32 CMsgClientToGCSetPlayerCardRosterRequest::slot() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientToGCSetPlayerCardRosterRequest.slot)
  return slot_;
}
void CMsgClientToGCSetPlayerCardRosterRequest::set_slot(::google::protobuf::uint32 value) {
  set_has_slot();
  slot_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientToGCSetPlayerCardRosterRequest.slot)
}

// optional uint64 player_card_item_id = 4;
bool CMsgClientToGCSetPlayerCardRosterRequest::has_player_card_item_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientToGCSetPlayerCardRosterRequest::set_has_player_card_item_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientToGCSetPlayerCardRosterRequest::clear_has_player_card_item_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientToGCSetPlayerCardRosterRequest::clear_player_card_item_id() {
  player_card_item_id_ = GOOGLE_ULONGLONG(0);
  clear_has_player_card_item_id();
}
::google::protobuf::uint64 CMsgClientToGCSetPlayerCardRosterRequest::player_card_item_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientToGCSetPlayerCardRosterRequest.player_card_item_id)
  return player_card_item_id_;
}
void CMsgClientToGCSetPlayerCardRosterRequest::set_player_card_item_id(::google::protobuf::uint64 value) {
  set_has_player_card_item_id();
  player_card_item_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientToGCSetPlayerCardRosterRequest.player_card_item_id)
}

// optional uint32 event_id = 5;
bool CMsgClientToGCSetPlayerCardRosterRequest::has_event_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgClientToGCSetPlayerCardRosterRequest::set_has_event_id() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgClientToGCSetPlayerCardRosterRequest::clear_has_event_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgClientToGCSetPlayerCardRosterRequest::clear_event_id() {
  event_id_ = 0u;
  clear_has_event_id();
}
::google::protobuf::uint32 CMsgClientToGCSetPlayerCardRosterRequest::event_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientToGCSetPlayerCardRosterRequest.event_id)
  return event_id_;
}
void CMsgClientToGCSetPlayerCardRosterRequest::set_event_id(::google::protobuf::uint32 value) {
  set_has_event_id();
  event_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientToGCSetPlayerCardRosterRequest.event_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientToGCSetPlayerCardRosterResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientToGCSetPlayerCardRosterResponse::CMsgClientToGCSetPlayerCardRosterResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgClientToGCSetPlayerCardRosterResponse)
}
CMsgClientToGCSetPlayerCardRosterResponse::CMsgClientToGCSetPlayerCardRosterResponse(const CMsgClientToGCSetPlayerCardRosterResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgClientToGCSetPlayerCardRosterResponse)
}

void CMsgClientToGCSetPlayerCardRosterResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
}

CMsgClientToGCSetPlayerCardRosterResponse::~CMsgClientToGCSetPlayerCardRosterResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgClientToGCSetPlayerCardRosterResponse)
  SharedDtor();
}

void CMsgClientToGCSetPlayerCardRosterResponse::SharedDtor() {
}

void CMsgClientToGCSetPlayerCardRosterResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientToGCSetPlayerCardRosterResponse::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientToGCSetPlayerCardRosterResponse& CMsgClientToGCSetPlayerCardRosterResponse::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientToGCSetPlayerCardRosterResponse* CMsgClientToGCSetPlayerCardRosterResponse::New(::google::protobuf::Arena* arena) const {
  CMsgClientToGCSetPlayerCardRosterResponse* n = new CMsgClientToGCSetPlayerCardRosterResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientToGCSetPlayerCardRosterResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgClientToGCSetPlayerCardRosterResponse)
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientToGCSetPlayerCardRosterResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgClientToGCSetPlayerCardRosterResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgClientToGCSetPlayerCardRosterResponse.Result result = 1 [default = SUCCESS];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgClientToGCSetPlayerCardRosterResponse_Result_IsValid(value)) {
            set_result(static_cast< ::proto::dota::CMsgClientToGCSetPlayerCardRosterResponse_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgClientToGCSetPlayerCardRosterResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgClientToGCSetPlayerCardRosterResponse)
  return false;
#undef DO_
}

void CMsgClientToGCSetPlayerCardRosterResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgClientToGCSetPlayerCardRosterResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgClientToGCSetPlayerCardRosterResponse.Result result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgClientToGCSetPlayerCardRosterResponse)
}

::google::protobuf::uint8* CMsgClientToGCSetPlayerCardRosterResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgClientToGCSetPlayerCardRosterResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgClientToGCSetPlayerCardRosterResponse.Result result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgClientToGCSetPlayerCardRosterResponse)
  return target;
}

size_t CMsgClientToGCSetPlayerCardRosterResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgClientToGCSetPlayerCardRosterResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .proto.dota.CMsgClientToGCSetPlayerCardRosterResponse.Result result = 1 [default = SUCCESS];
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientToGCSetPlayerCardRosterResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgClientToGCSetPlayerCardRosterResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientToGCSetPlayerCardRosterResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientToGCSetPlayerCardRosterResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgClientToGCSetPlayerCardRosterResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgClientToGCSetPlayerCardRosterResponse)
    MergeFrom(*source);
  }
}

void CMsgClientToGCSetPlayerCardRosterResponse::MergeFrom(const CMsgClientToGCSetPlayerCardRosterResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgClientToGCSetPlayerCardRosterResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void CMsgClientToGCSetPlayerCardRosterResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgClientToGCSetPlayerCardRosterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCSetPlayerCardRosterResponse::CopyFrom(const CMsgClientToGCSetPlayerCardRosterResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgClientToGCSetPlayerCardRosterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCSetPlayerCardRosterResponse::IsInitialized() const {
  return true;
}

void CMsgClientToGCSetPlayerCardRosterResponse::Swap(CMsgClientToGCSetPlayerCardRosterResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientToGCSetPlayerCardRosterResponse::InternalSwap(CMsgClientToGCSetPlayerCardRosterResponse* other) {
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientToGCSetPlayerCardRosterResponse::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ffantasy_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientToGCSetPlayerCardRosterResponse

// optional .proto.dota.CMsgClientToGCSetPlayerCardRosterResponse.Result result = 1 [default = SUCCESS];
bool CMsgClientToGCSetPlayerCardRosterResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientToGCSetPlayerCardRosterResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientToGCSetPlayerCardRosterResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientToGCSetPlayerCardRosterResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
::proto::dota::CMsgClientToGCSetPlayerCardRosterResponse_Result CMsgClientToGCSetPlayerCardRosterResponse::result() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientToGCSetPlayerCardRosterResponse.result)
  return static_cast< ::proto::dota::CMsgClientToGCSetPlayerCardRosterResponse_Result >(result_);
}
void CMsgClientToGCSetPlayerCardRosterResponse::set_result(::proto::dota::CMsgClientToGCSetPlayerCardRosterResponse_Result value) {
  assert(::proto::dota::CMsgClientToGCSetPlayerCardRosterResponse_Result_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientToGCSetPlayerCardRosterResponse.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace dota
}  // namespace proto

// @@protoc_insertion_point(global_scope)
